
================================
mig procedure

create or replace PROCEDURE MIG_GATHER_STAT
(
  i_owner VARCHAR2 DEFAULT 'STG01'
)
IS    
    V_SQL_TEXT         VARCHAR2(32000) := '';
BEGIN    

-- DBMS_STATS.gather_table_stats(ownname=>'STG01',tabname=>'ADDRESSGROUP',estimate_percent=>100,method_opt=>'FOR ALL COLUMNS SIZE AUTO', DEGREE=>8,CASCADE=> FALSE);
-- DBMS_STATS.gather_table_stats(ownname=>'STG01',tabname=>'ADDRESSGROUPEXT',estimate_percent=>100,method_opt=>'FOR ALL COLUMNS SIZE AUTO', DEGREE=>8,CASCADE=> FALSE);
-- DBMS_STATS.gather_table_stats(ownname=>'STG01',tabname=>'ALERT',estimate_percent=>100,method_opt=>'FOR ALL COLUMNS SIZE AUTO', DEGREE=>8,CASCADE=> FALSE);
-- DBMS_STATS.gather_table_stats(ownname=>'STG01',tabname=>'CONTACT',estimate_percent=>100,method_opt=>'FOR ALL COLUMNS SIZE AUTO', DEGREE=>8,CASCADE=> FALSE);


    V_SQL_TEXT := '';
    FOR COMMENT_CUR IN (
                        select 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(ownname=>'''||OWNER||''',tabname=>'''||TABLE_NAME||''',estimate_percent=>100,method_opt=>''FOR ALL COLUMNS SIZE AUTO'', DEGREE=>8,CASCADE=> FALSE); END;' script
                          FROM ALL_tables
                         WHERE OWNER = UPPER(i_owner)
                           AND last_analyzed IS NULL
                           AND TABLE_NAME NOT LIKE 'ERR$%'
                           AND ROWNUM =1 
                        )
    LOOP
        V_SQL_TEXT := COMMENT_CUR.script;
        
        BEGIN
            EXECUTE IMMEDIATE V_SQL_TEXT;        
            COMMIT;        
        EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM||CHR(13)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);            
        END;
        
        
    
       
    END LOOP; 
    
END;


-----------------------------------------------
create or replace PROCEDURE MIG_PRC_ENC_1
IS
   c_limit PLS_INTEGER := 100;
   V_JOB_SEQ    NUMBER;
   V_PGM_NAME VARCHAR2(100) := 'MIG_PRC_ENC_1';
   V_CNT        NUMBER;
   CURSOR TB_MASCM031_CUR
   IS
    SELECT ADDR addr_kr,DBSEC.ENC_ADDR(CAST (DBSEC.DEC_ADDR@dl_mig(ADDR) AS VARCHAR2(4000)),'SELECT') AS addr_u8  
      FROM (
    SELECT DISTINCT ADDR_LINE_ONE addr
      FROM STG01.ADDRESS A
     WHERE NOT EXISTS (SELECT 1 FROM STG01.MAPKEY_ADDR_ENC S WHERE A.ADDR_LINE_ONE = S.ADDR_ENC_KR)
       AND ROWNUM <= 100
           );

   TYPE mapkey_addr IS TABLE OF STG01.MAPKEY_ADDR_ENC%ROWTYPE;

   l_mapkey_addr   mapkey_addr;
BEGIN
   SELECT MIG01.MIG_SEQ_JOB_LOG_ID.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
   MIG01.MIG_PRC_LOG('START',V_JOB_SEQ,V_PGM_NAME,'N','',0);  
   OPEN TB_MASCM031_CUR;

   LOOP
      FETCH TB_MASCM031_CUR BULK COLLECT INTO l_mapkey_addr LIMIT c_limit;
      
      COMMIT;
      
      FORALL i IN 1 .. l_mapkey_addr.COUNT INSERT INTO stg01.MAPKEY_ADDR_ENC VALUES l_mapkey_addr(i);

      EXIT WHEN l_mapkey_addr.COUNT = 0;
   END LOOP;
   COMMIT;
  
   close TB_MASCM031_CUR;
   MIG01.MIG_PRC_LOG('END',V_JOB_SEQ,V_PGM_NAME,'Y','',0);
EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        MIG01.MIG_PRC_LOG('END',V_JOB_SEQ,V_PGM_NAME,'N','',0);   
END;

--------------------------------------------------
create or replace PROCEDURE        MIG_PRC_TEST_SC
IS
        V_USERENV VARCHAR2(1000);        
BEGIN


SELECT SYS_CONTEXT('userenv','current_schema')  INTO V_USERENV FROM dual;  
DBMS_OUTPUT.PUT_LINE(V_USERENV);
SELECT SYS_CONTEXT('userenv','current_user')  INTO V_USERENV FROM dual;  
DBMS_OUTPUT.PUT_LINE(V_USERENV);
SELECT SYS_CONTEXT('userenv','SESSION_USER')  INTO V_USERENV FROM dual;  
DBMS_OUTPUT.PUT_LINE(V_USERENV);

END;

----------------------------
create or replace PROCEDURE        MIG_PRC_TRUNCATE
( I_TBL_NAME IN VARCHAR2 ) 
IS
 V_OWNER VARCHAR2(30) ; 
 V_TBL_NAME VARCHAR2(30) ; 
 V_SESSION_USER VARCHAR2(30) ; 
BEGIN

	 --TUNCATE 실행 유저 
	 SELECT SYS_CONTEXT('USERENV','SESSION_USER') 
	 INTO V_SESSION_USER
	 FROM DUAL ; 
   
	 -- 실행 USER 기준으로 TRUNCATE TABLE 검색
	 SELECT TABLE_OWNER  , TABLE_NAME
	  INTO V_OWNER  , V_TBL_NAME
	  FROM ALL_SYNONYMS 
	 WHERE OWNER = V_SESSION_USER 
	   AND SYNONYM_NAME = UPPER(I_TBL_NAME) ;


	IF V_OWNER NOT IN ( 'STG01' , 'STG02') THEN 
		
		DBMS_OUTPUT.PUT_LINE ( 'TRUNCATE TABLE '||V_OWNER||'.'||V_TBL_NAME||' ; ' ) ; 
		EXECUTE IMMEDIATE 'TRUNCATE TABLE '||V_OWNER||'.'||V_TBL_NAME ; 
	ELSE 
		DBMS_OUTPUT.PUT_LINE ( 'STG 관련 테이블은 TRUNCATE 할 수 없습니다.') ; 
	END IF ; 
	
	
	-- 시노님이 없으면 현재 접속된 계정의 테이블을 TRUNCATE 한다.
	EXCEPTION
	    WHEN 
		 NO_DATA_FOUND 
			THEN 
			  DBMS_OUTPUT.PUT_LINE ( 'TRUNCATE TABLE '||V_SESSION_USER||'.'||I_TBL_NAME||' ; ' ) ; 
			  EXECUTE IMMEDIATE 'TRUNCATE TABLE '||V_SESSION_USER||'.'||I_TBL_NAME ; 
        WHEN 
	 	 OTHERS THEN DBMS_OUTPUT.PUT_LINE ( SQLERRM||CHR(13)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE ) ; 
END ;
------------------------------
create or replace PROCEDURE MIG_PRC_MB_COL_TOTAL
IS
 V_JOB_SEQ NUMBER;
BEGIN
EXEC MIG01.MIG_PRC_MB_COL_01; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_02; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_03; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_04; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_05; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_06; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_07; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_08; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_09; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_10; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_11; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_12; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_13; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_14; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_15; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_16; COMMIT;
EXEC MIG01.MIG_PRC_MB_COL_17; COMMIT;


EXEC STG01.MIG_PRC_TB_ISACTCRT; COMMIT;
EXEC STG01.MIG_PRC_TB_PATLG003; COMMIT;
EXEC STG01.MIG_PRC_TB_PASCTCRH; COMMIT;
EXEC STG01.MIG_PRC_TB_CPRCTODS; COMMIT;
EXEC STG01.MIG_PRC_TB_PAKCSRE3; COMMIT;
EXEC STG01.MIG_PRC_TB_PAADTUMS; COMMIT;
EXEC STG01.MIG_PRC_TB_SMTMA002; COMMIT;
EXEC STG01.MIG_PRC_TB_UVMMTLOG; COMMIT;
EXEC STG01.MIG_PRC_TB_CSSCS010; COMMIT;
EXEC STG01.MIG_PRC_TB_LRMONCEC; COMMIT;
EXEC STG01.MIG_PRC_TB_UVUMSEMD; COMMIT;
EXEC STG01.MIG_PRC_TB_ISRPTCNP; COMMIT;

END;

---------------------------------
create or replace PROCEDURE MIG_PRC_MB_COL_10
IS
        V_JOB_SEQ    NUMBER;
        V_PGM_NAME VARCHAR2(100) := 'MIG_PRC_MB_COL_10';
        V_CNT        NUMBER;
BEGIN
    SELECT MIG01.MIG_SEQ_JOB_LOG_ID.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
    MIG01.MIG_PRC_LOG('START',V_JOB_SEQ,V_PGM_NAME,'N','',0);


INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT45' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT45' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT45,1) <> UMS_IT45  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT46' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT46' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT46,1) <> UMS_IT46  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT47' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT47' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT47,1) <> UMS_IT47  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT48' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT48' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT48,1) <> UMS_IT48  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT49' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT49' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT49,1) <> UMS_IT49  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT50' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT50' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT50,1) <> UMS_IT50  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT51' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT51' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT51,1) <> UMS_IT51  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT52' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT52' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT52,1) <> UMS_IT52  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT53' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT53' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT53,1) <> UMS_IT53  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT54' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT54' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT54,1) <> UMS_IT54  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT55' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT55' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT55,1) <> UMS_IT55  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT56' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT56' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT56,1) <> UMS_IT56  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT57' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT57' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT57,1) <> UMS_IT57  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT58' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT58' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT58,1) <> UMS_IT58  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT59' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT59' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT59,1) <> UMS_IT59  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT60' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT60' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT60,1) <> UMS_IT60  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT61' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT61' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT61,1) <> UMS_IT61  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT62' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT62' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT62,1) <> UMS_IT62  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT63' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT63' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT63,1) <> UMS_IT63  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT64' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT64' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT64,1) <> UMS_IT64  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT65' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT65' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT65,1) <> UMS_IT65  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT66' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT66' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT66,1) <> UMS_IT66  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT67' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT67' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT67,1) <> UMS_IT67  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT68' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT68' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT68,1) <> UMS_IT68  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT69' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT69' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT69,1) <> UMS_IT69  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT70' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT70' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT70,1) <> UMS_IT70  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT71' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT71' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT71,1) <> UMS_IT71  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT72' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT72' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT72,1) <> UMS_IT72  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT73' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT73' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT73,1) <> UMS_IT73  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT74' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT74' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT74,1) <> UMS_IT74  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT75' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT75' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT75,1) <> UMS_IT75  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT76' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT76' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT76,1) <> UMS_IT76  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT77' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT77' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT77,1) <> UMS_IT77  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT78' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT78' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT78,1) <> UMS_IT78  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT79' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT79' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT79,1) <> UMS_IT79  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'WORK_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'WORK_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(WORK_NO,1) <> WORK_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'UMS_SQNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'UMS_SQNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(UMS_SQNO,1) <> UMS_SQNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RQST_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RQST_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(RQST_TYPE,1) <> RQST_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'WORK_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'WORK_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(WORK_TYPE,1) <> WORK_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RCPT_ADDR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RCPT_ADDR' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(RCPT_ADDR,1) <> RCPT_ADDR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RCPT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RCPT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(RCPT_NAME,1) <> RCPT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RCPT_RRNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'RCPT_RRNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(RCPT_RRNO,1) <> RCPT_RRNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'ERRO_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'ERRO_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(ERRO_CODE,1) <> ERRO_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'FAIL_CAUS' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSERR' TBL_ID, 'FAIL_CAUS' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSERR@DL_MIG A WHERE SUBSTR(FAIL_CAUS,1) <> FAIL_CAUS  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'PREFIX_DESC' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'PREFIX_DESC' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(PREFIX_DESC,1) <> PREFIX_DESC  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_ONE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_ONE' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(GIVEN_NAME_ONE,1) <> GIVEN_NAME_ONE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_TWO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_TWO' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(GIVEN_NAME_TWO,1) <> GIVEN_NAME_TWO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_THREE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_THREE' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(GIVEN_NAME_THREE,1) <> GIVEN_NAME_THREE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_FOUR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'GIVEN_NAME_FOUR' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(GIVEN_NAME_FOUR,1) <> GIVEN_NAME_FOUR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'LAST_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'LAST_NAME' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(LAST_NAME,1) <> LAST_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'SUFFIX_DESC' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'SUFFIX_DESC' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(SUFFIX_DESC,1) <> SUFFIX_DESC  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'USE_STANDARD_IND' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'USE_STANDARD_IND' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(USE_STANDARD_IND,1) <> USE_STANDARD_IND  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'LAST_UPDATE_USER' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'LAST_UPDATE_USER' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(LAST_UPDATE_USER,1) <> LAST_UPDATE_USER  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_LAST_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_LAST_NAME' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(P_LAST_NAME,1) <> P_LAST_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_ONE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_ONE' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(P_GIVEN_NAME_ONE,1) <> P_GIVEN_NAME_ONE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_TWO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_TWO' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(P_GIVEN_NAME_TWO,1) <> P_GIVEN_NAME_TWO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_THREE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_THREE' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(P_GIVEN_NAME_THREE,1) <> P_GIVEN_NAME_THREE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_FOUR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'PERSONNAME' TBL_ID, 'P_GIVEN_NAME_FOUR' COL_ID , ROWID RID FROM MDM.PERSONNAME@DL_CDISMIG A WHERE SUBSTR(P_GIVEN_NAME_FOUR,1) <> P_GIVEN_NAME_FOUR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'CNVS_ZPNO_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'CNVS_ZPNO_ID' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(CNVS_ZPNO_ID,1) <> CNVS_ZPNO_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'CNVS_DTAL_ADDR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'CNVS_DTAL_ADDR' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(CNVS_DTAL_ADDR,1) <> CNVS_DTAL_ADDR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'RDNM_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'RDNM_CODE' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(RDNM_CODE,1) <> RDNM_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'UNDG_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'UNDG_YN' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(UNDG_YN,1) <> UNDG_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'MAIN_BULD_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'MAIN_BULD_NO' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(MAIN_BULD_NO,1) <> MAIN_BULD_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'SUB_BULD_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'SUB_BULD_NO' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(SUB_BULD_NO,1) <> SUB_BULD_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'BULD_ADMN_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'BULD_ADMN_NO' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(BULD_ADMN_NO,1) <> BULD_ADMN_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'OLD_TWMD_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'OLD_TWMD_NAME' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(OLD_TWMD_NAME,1) <> OLD_TWMD_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'LAST_UPDATE_USER' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESSEXT' TBL_ID, 'LAST_UPDATE_USER' COL_ID , ROWID RID FROM MDM.ADDRESSEXT@DL_CDISMIG A WHERE SUBSTR(LAST_UPDATE_USER,1) <> LAST_UPDATE_USER  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_LINE_ONE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_LINE_ONE' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(ADDR_LINE_ONE,1) <> ADDR_LINE_ONE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_ADDR_LINE_ONE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_ADDR_LINE_ONE' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(P_ADDR_LINE_ONE,1) <> P_ADDR_LINE_ONE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_LINE_TWO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_LINE_TWO' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(ADDR_LINE_TWO,1) <> ADDR_LINE_TWO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_ADDR_LINE_TWO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_ADDR_LINE_TWO' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(P_ADDR_LINE_TWO,1) <> P_ADDR_LINE_TWO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_LINE_THREE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_LINE_THREE' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(ADDR_LINE_THREE,1) <> ADDR_LINE_THREE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_ADDR_LINE_THREE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_ADDR_LINE_THREE' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(P_ADDR_LINE_THREE,1) <> P_ADDR_LINE_THREE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'CITY_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'CITY_NAME' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(CITY_NAME,1) <> CITY_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'POSTAL_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'POSTAL_CODE' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(POSTAL_CODE,1) <> POSTAL_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_STANDARD_IND' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'ADDR_STANDARD_IND' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(ADDR_STANDARD_IND,1) <> ADDR_STANDARD_IND  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'OVERRIDE_IND' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'OVERRIDE_IND' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(OVERRIDE_IND,1) <> OVERRIDE_IND  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'RESIDENCE_NUM' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'RESIDENCE_NUM' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(RESIDENCE_NUM,1) <> RESIDENCE_NUM  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'COUNTY_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'COUNTY_CODE' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(COUNTY_CODE,1) <> COUNTY_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'LATITUDE_DEGREES' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'LATITUDE_DEGREES' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(LATITUDE_DEGREES,1) <> LATITUDE_DEGREES  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'LONGITUDE_DEGREES' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'LONGITUDE_DEGREES' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(LONGITUDE_DEGREES,1) <> LONGITUDE_DEGREES  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'LAST_UPDATE_USER' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'LAST_UPDATE_USER' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(LAST_UPDATE_USER,1) <> LAST_UPDATE_USER  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'POSTAL_BARCODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'POSTAL_BARCODE' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(POSTAL_BARCODE,1) <> POSTAL_BARCODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_CITY' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_CITY' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(P_CITY,1) <> P_CITY  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'BUILDING_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'BUILDING_NAME' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(BUILDING_NAME,1) <> BUILDING_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STREET_NUMBER' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STREET_NUMBER' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(STREET_NUMBER,1) <> STREET_NUMBER  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STREET_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STREET_NAME' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(STREET_NAME,1) <> STREET_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STREET_SUFFIX' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STREET_SUFFIX' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(STREET_SUFFIX,1) <> STREET_SUFFIX  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'PRE_DIRECTIONAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'PRE_DIRECTIONAL' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(PRE_DIRECTIONAL,1) <> PRE_DIRECTIONAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'POST_DIRECTIONAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'POST_DIRECTIONAL' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(POST_DIRECTIONAL,1) <> POST_DIRECTIONAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'BOX_DESIGNATOR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'BOX_DESIGNATOR' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(BOX_DESIGNATOR,1) <> BOX_DESIGNATOR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'BOX_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'BOX_ID' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(BOX_ID,1) <> BOX_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STN_INFO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STN_INFO' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(STN_INFO,1) <> STN_INFO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STN_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'STN_ID' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(STN_ID,1) <> STN_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'REGION' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'REGION' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(REGION,1) <> REGION  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'DEL_DESIGNATOR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'DEL_DESIGNATOR' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(DEL_DESIGNATOR,1) <> DEL_DESIGNATOR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'DEL_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'DEL_ID' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(DEL_ID,1) <> DEL_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'DEL_INFO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'DEL_INFO' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(DEL_INFO,1) <> DEL_INFO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_STREET_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'MDM' OWNER ,'ADDRESS' TBL_ID, 'P_STREET_NAME' COL_ID , ROWID RID FROM MDM.ADDRESS@DL_CDISMIG A WHERE SUBSTR(P_STREET_NAME,1) <> P_STREET_NAME  ; COMMIT;
EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;

        /* ------------- 오류로그(END  ) ------------- */
        MIG01.MIG_PRC_LOG('START',V_JOB_SEQ,V_PGM_NAME,'N','',0);

END;
----------------------
create or replace PROCEDURE MIG_PRC_MB_COL_09
IS
        V_JOB_SEQ    NUMBER;
        V_PGM_NAME VARCHAR2(100) := 'MIG_PRC_MB_COL_09';
        V_CNT        NUMBER;
BEGIN
    SELECT MIG01.MIG_SEQ_JOB_LOG_ID.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
    MIG01.MIG_PRC_LOG('START',V_JOB_SEQ,V_PGM_NAME,'N','',0);


INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'ACCM_RSDN_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'ACCM_RSDN_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(ACCM_RSDN_NO,1) <> ACCM_RSDN_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'RPRS_RESN_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'RPRS_RESN_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(RPRS_RESN_CODE,1) <> RPRS_RESN_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'ORIG_RESN_DATE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'ORIG_RESN_DATE' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(ORIG_RESN_DATE,1) <> ORIG_RESN_DATE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'ACCI_DVSN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'ACCI_DVSN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(ACCI_DVSN,1) <> ACCI_DVSN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(REVR_NAME,1) <> REVR_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_RSDN_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_RSDN_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(REVR_RSDN_NO,1) <> REVR_RSDN_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_TEL_USOS' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_TEL_USOS' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(REVR_TEL_USOS,1) <> REVR_TEL_USOS  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_ADDR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'REVR_ADDR' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(REVR_ADDR,1) <> REVR_ADDR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'BKNM' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'BKNM' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(BKNM,1) <> BKNM  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'DPSR_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAPAYDOC' TBL_ID, 'DPSR_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_PAPAYDOC@DL_MIG A WHERE SUBSTR(DPSR_NAME,1) <> DPSR_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'ORSD_THEN_LPYN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'ORSD_THEN_LPYN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(ORSD_THEN_LPYN,1) <> ORSD_THEN_LPYN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD1_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD1_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD1_DTAL,1) <> RESL_CD1_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD2_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD2_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD2_DTAL,1) <> RESL_CD2_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD3_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD3_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD3_DTAL,1) <> RESL_CD3_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'CAUS_CODE_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'CAUS_CODE_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(CAUS_CODE_DTAL,1) <> CAUS_CODE_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'OBST_CLSF_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'OBST_CLSF_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(OBST_CLSF_CODE,1) <> OBST_CLSF_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'BODY_PART_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'BODY_PART_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(BODY_PART_CODE,1) <> BODY_PART_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SCTR_OPER_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SCTR_OPER_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(SCTR_OPER_YN,1) <> SCTR_OPER_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'ACCI_OCCR_NTCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'ACCI_OCCR_NTCD' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(ACCI_OCCR_NTCD,1) <> ACCI_OCCR_NTCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD4' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD4,1) <> RESL_CD4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD5' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD5' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD5,1) <> RESL_CD5  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD6' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD6' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD6,1) <> RESL_CD6  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD4_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD4_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD4_DTAL,1) <> RESL_CD4_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD5_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD5_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD5_DTAL,1) <> RESL_CD5_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD6_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'RESL_CD6_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(RESL_CD6_DTAL,1) <> RESL_CD6_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'DSAS_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'DSAS_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(DSAS_NAME,1) <> DSAS_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'NEW_PMMI_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'NEW_PMMI_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(NEW_PMMI_YN,1) <> NEW_PMMI_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'DPAT_ONLY_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'DPAT_ONLY_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(DPAT_ONLY_YN,1) <> DPAT_ONLY_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SAOB_PRDM_IMYN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SAOB_PRDM_IMYN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(SAOB_PRDM_IMYN,1) <> SAOB_PRDM_IMYN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SADE_PRDM_DTPY' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SADE_PRDM_DTPY' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(SADE_PRDM_DTPY,1) <> SADE_PRDM_DTPY  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SADE_PRDM_IMYN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'SADE_PRDM_IMYN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(SADE_PRDM_IMYN,1) <> SADE_PRDM_IMYN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'PLRS_HPLD_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'PLRS_HPLD_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(PLRS_HPLD_YN,1) <> PLRS_HPLD_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'REDL_YN_6M' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_PAKCSRH3' TBL_ID, 'REDL_YN_6M' COL_ID , ROWID RID FROM SYSADMIN.TB_PAKCSRH3@DL_MIG A WHERE SUBSTR(REDL_YN_6M,1) <> REDL_YN_6M  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(LAST_CHMN_MPNO,1) <> LAST_CHMN_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'PGM_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'PGM_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(PGM_ID,1) <> PGM_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_DPCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_DPCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ALTK_DPCD,1) <> ALTK_DPCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_PRIO_RANK' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_PRIO_RANK' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(MESG_PRIO_RANK,1) <> MESG_PRIO_RANK  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_GRAD_DVSN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_GRAD_DVSN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(MESG_GRAD_DVSN,1) <> MESG_GRAD_DVSN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MSG_TITL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MSG_TITL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(MSG_TITL,1) <> MSG_TITL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MSG_CTEN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MSG_CTEN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(MSG_CTEN,1) <> MSG_CTEN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SNDR_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SNDR_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(SNDR_NO,1) <> SNDR_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_TRNM_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_TRNM_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(MESG_TRNM_TYPE,1) <> MESG_TRNM_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'GRP_SEND_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'GRP_SEND_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(GRP_SEND_YN,1) <> GRP_SEND_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_STAT' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_STAT' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(MESG_STAT,1) <> MESG_STAT  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RCPT_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RCPT_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(RCPT_NO,1) <> RCPT_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'TRNM_RESL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'TRNM_RESL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(TRNM_RESL,1) <> TRNM_RESL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'TRNM_RESL_CLSF' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'TRNM_RESL_CLSF' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(TRNM_RESL_CLSF,1) <> TRNM_RESL_CLSF  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'GW_INFO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'GW_INFO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(GW_INFO,1) <> GW_INFO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RTRM_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RTRM_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(RTRM_YN,1) <> RTRM_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'NATN_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'NATN_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(NATN_CODE,1) <> NATN_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_CHR_SET' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'MESG_CHR_SET' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(MESG_CHR_SET,1) <> MESG_CHR_SET  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ENCT_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ENCT_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ENCT_YN,1) <> ENCT_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'DUAL_USE_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'DUAL_USE_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(DUAL_USE_ID,1) <> DUAL_USE_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SNDR_KEY' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SNDR_KEY' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(SNDR_KEY,1) <> SNDR_KEY  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'TMPL_CLCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'TMPL_CLCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(TMPL_CLCD,1) <> TMPL_CLCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ETC_TEXT_FL1' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ETC_TEXT_FL1' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ETC_TEXT_FL1,1) <> ETC_TEXT_FL1  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ETC_TEXT_FL2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ETC_TEXT_FL2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ETC_TEXT_FL2,1) <> ETC_TEXT_FL2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ETC_TEXT_FL3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ETC_TEXT_FL3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ETC_TEXT_FL3,1) <> ETC_TEXT_FL3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SBST_SEND_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SBST_SEND_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(SBST_SEND_YN,1) <> SBST_SEND_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SBST_SEND_RSTI' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SBST_SEND_RSTI' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(SBST_SEND_RSTI,1) <> SBST_SEND_RSTI  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SBST_SEND_WKNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'SBST_SEND_WKNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(SBST_SEND_WKNO,1) <> SBST_SEND_WKNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RQST_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RQST_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(RQST_TYPE,1) <> RQST_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'WORK_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'WORK_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(WORK_TYPE,1) <> WORK_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'UMS_CUST_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'UMS_CUST_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(UMS_CUST_ID,1) <> UMS_CUST_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'UMS_JOB_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'UMS_JOB_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(UMS_JOB_CODE,1) <> UMS_JOB_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RCPT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'RCPT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(RCPT_NAME,1) <> RCPT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_IMAG_LINK' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_IMAG_LINK' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ALTK_IMAG_LINK,1) <> ALTK_IMAG_LINK  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_IMAG_URL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_IMAG_URL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ALTK_IMAG_URL,1) <> ALTK_IMAG_URL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_TRNM_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_TRNM_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ALTK_TRNM_TYPE,1) <> ALTK_TRNM_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_AD_FLAG' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_AD_FLAG' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ALTK_AD_FLAG,1) <> ALTK_AD_FLAG  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_BTN_CTEN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMTTRN' TBL_ID, 'ALTK_BTN_CTEN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMTTRN@DL_MIG A WHERE SUBSTR(ALTK_BTN_CTEN,1) <> ALTK_BTN_CTEN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT7' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT7' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT7,1) <> DATA_CHNG_IT7  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT8' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT8' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT8,1) <> DATA_CHNG_IT8  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT9' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT9' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT9,1) <> DATA_CHNG_IT9  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT10' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT10' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT10,1) <> DATA_CHNG_IT10  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT11' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT11' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT11,1) <> DATA_CHNG_IT11  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT12' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT12' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT12,1) <> DATA_CHNG_IT12  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT13' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT13' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT13,1) <> DATA_CHNG_IT13  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT14' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT14' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT14,1) <> DATA_CHNG_IT14  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT15' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT15' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT15,1) <> DATA_CHNG_IT15  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'FRST_APRM_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'FRST_APRM_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(FRST_APRM_MPNO,1) <> FRST_APRM_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'FRST_RCNT_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'FRST_RCNT_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(FRST_RCNT_YN,1) <> FRST_RCNT_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'LAST_APRM_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'LAST_APRM_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(LAST_APRM_MPNO,1) <> LAST_APRM_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'LAST_RCNT_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'LAST_RCNT_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(LAST_RCNT_YN,1) <> LAST_RCNT_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_YN,1) <> DATA_CHNG_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'CHNG_RESN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'CHNG_RESN' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(CHNG_RESN,1) <> CHNG_RESN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'CHNG_BSNS_DVCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'CHNG_BSNS_DVCD' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(CHNG_BSNS_DVCD,1) <> CHNG_BSNS_DVCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DLNG_DATE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DLNG_DATE' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DLNG_DATE,1) <> DLNG_DATE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'POLY_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'POLY_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(POLY_NO,1) <> POLY_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_DVSN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_DVSN' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_DVSN,1) <> DATA_CHNG_DVSN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(LAST_CHMN_MPNO,1) <> LAST_CHMN_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'PGM_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'PGM_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(PGM_ID,1) <> PGM_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'HOST_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'HOST_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(HOST_ID,1) <> HOST_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'BTCH_PGM_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'BTCH_PGM_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(BTCH_PGM_ID,1) <> BTCH_PGM_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'MOVE_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'MOVE_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(MOVE_TYPE,1) <> MOVE_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'SYS_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'SYS_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(SYS_CODE,1) <> SYS_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'SUB_SYS_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'SUB_SYS_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(SUB_SYS_CODE,1) <> SUB_SYS_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'WORK_MAN_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'WORK_MAN_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(WORK_MAN_MPNO,1) <> WORK_MAN_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'ARGU' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'ARGU' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(ARGU,1) <> ARGU  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'END_STAT' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'END_STAT' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(END_STAT,1) <> END_STAT  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'MSG_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'MSG_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(MSG_TYPE,1) <> MSG_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'CMNT_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'CMNT_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(CMNT_TYPE,1) <> CMNT_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'USER_DEFN_MSG' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'USER_DEFN_MSG' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(USER_DEFN_MSG,1) <> USER_DEFN_MSG  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'FNCT_TRCE_INFO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'FNCT_TRCE_INFO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(FNCT_TRCE_INFO,1) <> FNCT_TRCE_INFO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'BTCH_JOB_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVBATLOG' TBL_ID, 'BTCH_JOB_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVBATLOG@DL_MIG A WHERE SUBSTR(BTCH_JOB_ID,1) <> BTCH_JOB_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_ITCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_ITCD' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_ITCD,1) <> DATA_CHNG_ITCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DLNG_MAN_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DLNG_MAN_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DLNG_MAN_MPNO,1) <> DLNG_MAN_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DLNG_DEPT_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DLNG_DEPT_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DLNG_DEPT_CODE,1) <> DLNG_DEPT_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'STDD_DATE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'STDD_DATE' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(STDD_DATE,1) <> STDD_DATE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT1' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT1' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT1,1) <> DATA_CHNG_IT1  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT2' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT2,1) <> DATA_CHNG_IT2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT3' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT3,1) <> DATA_CHNG_IT3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT4' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT4,1) <> DATA_CHNG_IT4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT5' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT5' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT5,1) <> DATA_CHNG_IT5  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT6' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_TRCOTCIT' TBL_ID, 'DATA_CHNG_IT6' COL_ID , ROWID RID FROM SYSADMIN.TB_TRCOTCIT@DL_MIG A WHERE SUBSTR(DATA_CHNG_IT6,1) <> DATA_CHNG_IT6  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PGM_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PGM_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(PGM_ID,1) <> PGM_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'STRT_DATE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'STRT_DATE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(STRT_DATE,1) <> STRT_DATE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'CTPR_LCTN_DVSN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'CTPR_LCTN_DVSN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(CTPR_LCTN_DVSN,1) <> CTPR_LCTN_DVSN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TWMD_LCTN_DVSN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TWMD_LCTN_DVSN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TWMD_LCTN_DVSN,1) <> TWMD_LCTN_DVSN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ZIP_NO_1' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ZIP_NO_1' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(ZIP_NO_1,1) <> ZIP_NO_1  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ZIP_NO_2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ZIP_NO_2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(ZIP_NO_2,1) <> ZIP_NO_2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ZIP_NO_3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ZIP_NO_3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(ZIP_NO_3,1) <> ZIP_NO_3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'DTAL_ADDR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'DTAL_ADDR' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(DTAL_ADDR,1) <> DTAL_ADDR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DDD,1) <> TEL_NO_DDD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_BRH,1) <> TEL_NO_BRH  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DTAL,1) <> TEL_NO_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DDD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DDD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_DDD,1) <> FAX_NO_DDD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_BRH' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_BRH' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_BRH,1) <> FAX_NO_BRH  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DTAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DTAL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_DTAL,1) <> FAX_NO_DTAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DDD2,1) <> TEL_NO_DDD2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_BRH2,1) <> TEL_NO_BRH2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTL2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTL2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DTL2,1) <> TEL_NO_DTL2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DDD2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DDD2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_DDD2,1) <> FAX_NO_DDD2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_BRH2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_BRH2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_BRH2,1) <> FAX_NO_BRH2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DTL2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DTL2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_DTL2,1) <> FAX_NO_DTL2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'BSMN_RGST_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'BSMN_RGST_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(BSMN_RGST_NO,1) <> BSMN_RGST_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PSTN_INFO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PSTN_INFO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(PSTN_INFO,1) <> PSTN_INFO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TRAF' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TRAF' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TRAF,1) <> TRAF  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'SBST_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'SBST_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(SBST_NAME,1) <> SBST_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'BIWK_OFDY_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'BIWK_OFDY_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(BIWK_OFDY_YN,1) <> BIWK_OFDY_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DDD3,1) <> TEL_NO_DDD3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_BRH3,1) <> TEL_NO_BRH3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTL3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTL3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DTL3,1) <> TEL_NO_DTL3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RCNM_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RCNM_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(RCNM_MPNO,1) <> RCNM_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_RCNT_TIME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_RCNT_TIME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(UMS_RCNT_TIME,1) <> UMS_RCNT_TIME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_JOB_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_JOB_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(UMS_JOB_CODE,1) <> UMS_JOB_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'ALTK_DPCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'ALTK_DPCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(ALTK_DPCD,1) <> ALTK_DPCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RQST_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RQST_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(RQST_ID,1) <> RQST_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RQST_SUB_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RQST_SUB_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(RQST_SUB_ID,1) <> RQST_SUB_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'SNDR_TEL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'SNDR_TEL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(SNDR_TEL,1) <> SNDR_TEL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RCPT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RCPT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(RCPT_NAME,1) <> RCPT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RCPT_TEL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'RCPT_TEL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(RCPT_TEL,1) <> RCPT_TEL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'MSG' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'MSG' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(MSG,1) <> MSG  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_TRNM_STCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_TRNM_STCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(UMS_TRNM_STCD,1) <> UMS_TRNM_STCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_TRNM_RTCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_TRNM_RTCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(UMS_TRNM_RTCD,1) <> UMS_TRNM_RTCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_TRNM_ERCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_TRNM_ERCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(UMS_TRNM_ERCD,1) <> UMS_TRNM_ERCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_CUST_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVSMSBAT' TBL_ID, 'UMS_CUST_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVSMSBAT@DL_MIG A WHERE SUBSTR(UMS_CUST_ID,1) <> UMS_CUST_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PCAR_TRAF' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PCAR_TRAF' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(PCAR_TRAF,1) <> PCAR_TRAF  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'WALK_TRAF' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'WALK_TRAF' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(WALK_TRAF,1) <> WALK_TRAF  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PARK_INFO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'PARK_INFO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(PARK_INFO,1) <> PARK_INFO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'RQST_URL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'RQST_URL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(RQST_URL,1) <> RQST_URL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'IMAG_FILE_URL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'IMAG_FILE_URL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(IMAG_FILE_URL,1) <> IMAG_FILE_URL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DDD4' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DDD4,1) <> TEL_NO_DDD4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_BRH4' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_BRH4,1) <> TEL_NO_BRH4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTL4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'TEL_NO_DTL4' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(TEL_NO_DTL4,1) <> TEL_NO_DTL4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DDD3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DDD3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_DDD3,1) <> FAX_NO_DDD3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_BRH3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_BRH3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_BRH3,1) <> FAX_NO_BRH3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DTL3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'FAX_NO_DTL3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(FAX_NO_DTL3,1) <> FAX_NO_DTL3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ORGN_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'ORGN_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(ORGN_CODE,1) <> ORGN_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'END_DATE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'END_DATE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(END_DATE,1) <> END_DATE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVORG002' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVORG002@DL_MIG A WHERE SUBSTR(LAST_CHMN_MPNO,1) <> LAST_CHMN_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RCNM_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RCNM_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(RCNM_MPNO,1) <> RCNM_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_RCNT_TIME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_RCNT_TIME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(UMS_RCNT_TIME,1) <> UMS_RCNT_TIME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_JOB_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_JOB_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(UMS_JOB_CODE,1) <> UMS_JOB_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'ALTK_DPCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'ALTK_DPCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(ALTK_DPCD,1) <> ALTK_DPCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'WORK_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'WORK_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(WORK_NO,1) <> WORK_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RQST_SUB_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RQST_SUB_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(RQST_SUB_ID,1) <> RQST_SUB_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(LAST_CHMN_MPNO,1) <> LAST_CHMN_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'PGM_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'PGM_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(PGM_ID,1) <> PGM_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'SNDR_TEL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'SNDR_TEL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(SNDR_TEL,1) <> SNDR_TEL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RCPT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RCPT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(RCPT_NAME,1) <> RCPT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RECV_TEL_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'RECV_TEL_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(RECV_TEL_NO,1) <> RECV_TEL_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_CUST_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_CUST_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(UMS_CUST_ID,1) <> UMS_CUST_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'MSG_TITL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'MSG_TITL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(MSG_TITL,1) <> MSG_TITL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'MSG_CTEN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'MSG_CTEN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(MSG_CTEN,1) <> MSG_CTEN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_TRNM_STCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_TRNM_STCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(UMS_TRNM_STCD,1) <> UMS_TRNM_STCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_TRNM_RTCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_TRNM_RTCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(UMS_TRNM_RTCD,1) <> UMS_TRNM_RTCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_TRNM_ERCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'UMS_TRNM_ERCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(UMS_TRNM_ERCD,1) <> UMS_TRNM_ERCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_1' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_1' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(FILE_ROUT_1,1) <> FILE_ROUT_1  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(FILE_ROUT_2,1) <> FILE_ROUT_2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(FILE_ROUT_3,1) <> FILE_ROUT_3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_4' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(FILE_ROUT_4,1) <> FILE_ROUT_4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_5' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSBAT' TBL_ID, 'FILE_ROUT_5' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSBAT@DL_MIG A WHERE SUBSTR(FILE_ROUT_5,1) <> FILE_ROUT_5  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'WORK_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'WORK_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(WORK_NO,1) <> WORK_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'LAST_CHMN_MPNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(LAST_CHMN_MPNO,1) <> LAST_CHMN_MPNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'PGM_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'PGM_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(PGM_ID,1) <> PGM_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'MSG_TITL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'MSG_TITL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(MSG_TITL,1) <> MSG_TITL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'MSG_CTEN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'MSG_CTEN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(MSG_CTEN,1) <> MSG_CTEN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_1' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_1' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(FILE_ROUT_1,1) <> FILE_ROUT_1  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(FILE_ROUT_2,1) <> FILE_ROUT_2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(FILE_ROUT_3,1) <> FILE_ROUT_3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_4' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(FILE_ROUT_4,1) <> FILE_ROUT_4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_5' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVMMSINF' TBL_ID, 'FILE_ROUT_5' COL_ID , ROWID RID FROM SYSADMIN.TB_UVMMSINF@DL_MIG A WHERE SUBSTR(FILE_ROUT_5,1) <> FILE_ROUT_5  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_STCK_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_STCK_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(UMS_STCK_NO,1) <> UMS_STCK_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_LOAN_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_LOAN_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(UMS_LOAN_NO,1) <> UMS_LOAN_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_TRNM_RTCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_TRNM_RTCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(UMS_TRNM_RTCD,1) <> UMS_TRNM_RTCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_TRNM_ERCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_TRNM_ERCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(UMS_TRNM_ERCD,1) <> UMS_TRNM_ERCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RCPT_HP_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RCPT_HP_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RCPT_HP_NO,1) <> RCPT_HP_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RCPT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RCPT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RCPT_NAME,1) <> RCPT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_VLID_TIME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_VLID_TIME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SEND_VLID_TIME,1) <> SEND_VLID_TIME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_CUST_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_CUST_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(UMS_CUST_ID,1) <> UMS_CUST_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'WORK_NO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'WORK_NO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(WORK_NO,1) <> WORK_NO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_DATE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_DATE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RQST_DATE,1) <> RQST_DATE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RQST_TYPE,1) <> RQST_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_OBJT' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_OBJT' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RQST_OBJT,1) <> RQST_OBJT  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_OZ_SRVR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_OZ_SRVR' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RQST_OZ_SRVR,1) <> RQST_OZ_SRVR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_UMS_SRVR' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_UMS_SRVR' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RQST_UMS_SRVR,1) <> RQST_UMS_SRVR  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_OZ_PARM' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'RQST_OZ_PARM' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(RQST_OZ_PARM,1) <> RQST_OZ_PARM  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'WORK_TYPE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'WORK_TYPE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(WORK_TYPE,1) <> WORK_TYPE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_TITL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_TITL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SEND_TITL,1) <> SEND_TITL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SNDR_ID,1) <> SNDR_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SNDR_NAME,1) <> SNDR_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_DEPT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_DEPT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SNDR_DEPT_NAME,1) <> SNDR_DEPT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_DPCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_DPCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SNDR_DPCD,1) <> SNDR_DPCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_PSTN_BRH' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_PSTN_BRH' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SNDR_PSTN_BRH,1) <> SNDR_PSTN_BRH  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_TEL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_TEL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SNDR_TEL,1) <> SNDR_TEL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_EMAL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SNDR_EMAL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SNDR_EMAL,1) <> SNDR_EMAL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'TRNM_CTEN_INFO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'TRNM_CTEN_INFO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(TRNM_CTEN_INFO,1) <> TRNM_CTEN_INFO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SMS_TRNM_CTEN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SMS_TRNM_CTEN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SMS_TRNM_CTEN,1) <> SMS_TRNM_CTEN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_RSVT_TIME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_RSVT_TIME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SEND_RSVT_TIME,1) <> SEND_RSVT_TIME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_LMIT_STTM' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_LMIT_STTM' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SEND_LMIT_STTM,1) <> SEND_LMIT_STTM  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_LMIT_ENTM' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'SEND_LMIT_ENTM' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(SEND_LMIT_ENTM,1) <> SEND_LMIT_ENTM  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'FORM_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'FORM_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(FORM_ID,1) <> FORM_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'CMNT' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'CMNT' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(CMNT,1) <> CMNT  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_JOB_CODE' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_JOB_CODE' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(UMS_JOB_CODE,1) <> UMS_JOB_CODE  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_TRNM_STCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSSRV' TBL_ID, 'UMS_TRNM_STCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSSRV@DL_MIG A WHERE SUBSTR(UMS_TRNM_STCD,1) <> UMS_TRNM_STCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT80' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT80' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT80,1) <> UMS_IT80  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT81' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT81' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT81,1) <> UMS_IT81  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT82' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT82' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT82,1) <> UMS_IT82  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT83' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT83' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT83,1) <> UMS_IT83  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT84' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT84' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT84,1) <> UMS_IT84  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT85' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT85' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT85,1) <> UMS_IT85  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT86' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT86' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT86,1) <> UMS_IT86  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT87' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT87' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT87,1) <> UMS_IT87  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT88' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT88' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT88,1) <> UMS_IT88  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT89' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT89' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT89,1) <> UMS_IT89  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT90' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT90' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT90,1) <> UMS_IT90  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT91' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT91' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT91,1) <> UMS_IT91  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT92' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT92' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT92,1) <> UMS_IT92  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT93' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT93' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT93,1) <> UMS_IT93  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT94' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT94' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT94,1) <> UMS_IT94  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT95' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT95' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT95,1) <> UMS_IT95  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT96' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT96' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT96,1) <> UMS_IT96  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT97' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT97' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT97,1) <> UMS_IT97  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT98' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT98' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT98,1) <> UMS_IT98  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT99' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT99' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT99,1) <> UMS_IT99  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_I100' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_I100' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_I100,1) <> UMS_I100  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_1' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_1' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_1,1) <> UMS_PRGP_1  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_2,1) <> UMS_PRGP_2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_3,1) <> UMS_PRGP_3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_4' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_4,1) <> UMS_PRGP_4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_5' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_5' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_5,1) <> UMS_PRGP_5  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_6' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_6' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_6,1) <> UMS_PRGP_6  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_7' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_7' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_7,1) <> UMS_PRGP_7  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_8' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_8' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_8,1) <> UMS_PRGP_8  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_9' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_9' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_9,1) <> UMS_PRGP_9  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_10' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PRGP_10' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PRGP_10,1) <> UMS_PRGP_10  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_WORK_ID,1) <> UMS_WORK_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_KDCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_KDCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_WORK_KDCD,1) <> UMS_WORK_KDCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_SQNO' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_SQNO' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_WORK_SQNO,1) <> UMS_WORK_SQNO  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_TITL_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_TITL_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_TITL_NAME,1) <> UMS_TITL_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_EXPL' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_WORK_EXPL' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_WORK_EXPL,1) <> UMS_WORK_EXPL  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_SBTT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_SBTT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_SBTT_NAME,1) <> UMS_SBTT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_RCPT_NAME' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_RCPT_NAME' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_RCPT_NAME,1) <> UMS_RCPT_NAME  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_EMAL_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_EMAL_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_EMAL_ID,1) <> UMS_EMAL_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PSWD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_PSWD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_PSWD,1) <> UMS_PSWD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_CUST_ID' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_CUST_ID' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_CUST_ID,1) <> UMS_CUST_ID  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'SEND_RESL_DVSN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'SEND_RESL_DVSN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(SEND_RESL_DVSN,1) <> SEND_RESL_DVSN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'MAIL_SEND_ERCD' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'MAIL_SEND_ERCD' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(MAIL_SEND_ERCD,1) <> MAIL_SEND_ERCD  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'READ_YN' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'READ_YN' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(READ_YN,1) <> READ_YN  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT1' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT1' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT1,1) <> UMS_IT1  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT2' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT2' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT2,1) <> UMS_IT2  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT3' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT3' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT3,1) <> UMS_IT3  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT4' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT4' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT4,1) <> UMS_IT4  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT5' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT5' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT5,1) <> UMS_IT5  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT6' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT6' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT6,1) <> UMS_IT6  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT7' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT7' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT7,1) <> UMS_IT7  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT8' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT8' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT8,1) <> UMS_IT8  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT9' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT9' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT9,1) <> UMS_IT9  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT10' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT10' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT10,1) <> UMS_IT10  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT11' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT11' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT11,1) <> UMS_IT11  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT12' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT12' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT12,1) <> UMS_IT12  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT13' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT13' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT13,1) <> UMS_IT13  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT14' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT14' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT14,1) <> UMS_IT14  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT15' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT15' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT15,1) <> UMS_IT15  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT16' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT16' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT16,1) <> UMS_IT16  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT17' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT17' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT17,1) <> UMS_IT17  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT18' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT18' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT18,1) <> UMS_IT18  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT19' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT19' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT19,1) <> UMS_IT19  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT20' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT20' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT20,1) <> UMS_IT20  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT21' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT21' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT21,1) <> UMS_IT21  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT22' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT22' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT22,1) <> UMS_IT22  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT23' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT23' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT23,1) <> UMS_IT23  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT24' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT24' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT24,1) <> UMS_IT24  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT25' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT25' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT25,1) <> UMS_IT25  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT26' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT26' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT26,1) <> UMS_IT26  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT27' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT27' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT27,1) <> UMS_IT27  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT28' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT28' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT28,1) <> UMS_IT28  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT29' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT29' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT29,1) <> UMS_IT29  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT30' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT30' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT30,1) <> UMS_IT30  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT31' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT31' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT31,1) <> UMS_IT31  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT32' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT32' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT32,1) <> UMS_IT32  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT33' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT33' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT33,1) <> UMS_IT33  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT34' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT34' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT34,1) <> UMS_IT34  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT35' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT35' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT35,1) <> UMS_IT35  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT36' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT36' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT36,1) <> UMS_IT36  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT37' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT37' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT37,1) <> UMS_IT37  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT38' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT38' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT38,1) <> UMS_IT38  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT39' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT39' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT39,1) <> UMS_IT39  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT40' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT40' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT40,1) <> UMS_IT40  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT41' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT41' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT41,1) <> UMS_IT41  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT42' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT42' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT42,1) <> UMS_IT42  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT43' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT43' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT43,1) <> UMS_IT43  ; COMMIT;
INSERT INTO MIG01.MIG_MB_COL_ALL SELECT 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT44' COL_ID , '' RID FROM  DUAL; INSERT INTO MIG01.MIG_MB_COL_ALL SELECT /*+ PARALLEL(A 4) */ 'SYSADMIN' OWNER ,'TB_UVUMSEML' TBL_ID, 'UMS_IT44' COL_ID , ROWID RID FROM SYSADMIN.TB_UVUMSEML@DL_MIG A WHERE SUBSTR(UMS_IT44,1) <> UMS_IT44  ; COMMIT;
EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;

        /* ------------- 오류로그(END  ) ------------- */
        MIG01.MIG_PRC_LOG('START',V_JOB_SEQ,V_PGM_NAME,'N','',0);

END;

------------------------------------------------
create or replace PROCEDURE MIG_PRC_INIT_ERRTBL_TEST
IS
    V_TRG_YN VARCHAR2(1);
BEGIN
--    DBMS_OUTPUT.PUT_LINE('DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => ''STG01.TB_SMPTA016'',skip_unsupported=>true)');
--    EXECUTE IMMEDIATE 'CREATE TABLE TEST2 (COL1 VARCHAR2(1))';
--    EXECUTE IMMEDIATE 'DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => ''STG01.TB_SMPTA016'',skip_unsupported=>true)';
    EXECUTE IMMEDIATE 'BEGIN DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => ''STG01.TB_SMPTA016'',skip_unsupported=>true); END;';
--    EXECUTE IMMEDIATE 'DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => ''STG01.TB_SMPTA016'',skip_unsupported=>true);';
END;

-----------------------------------------------------

create or replace PROCEDURE MIG_PRC_IND_INIT
(
      v_OWNER           IN  VARCHAR2
    , v_TARG_TBL_NM     IN  VARCHAR2
    , v_ALTER_DIV       IN  VARCHAR2
)
IS
    v_START_TM         DATE;
    v_ERR_MSG        VARCHAR2(4000);
    v_ROW_CNT        NUMBER(18);
    v_TARG_JOB_NM   VARCHAR2(300);
    V_PGM_NAME        VARCHAR2(300);
    V_JOB_SEQ      number(18);

    -- ALTER INDEXS
    CURSOR CUR_ALTER_IDXS IS
    SELECT OWNER
         , TBL_NM
         , IDX_NM
         , CONST_NM
         , UNIQ_YN
         , UNIQ_COL 
         , PK_YN
         , CASE WHEN REBUILD_DEG > 0 THEN 'PARALLEL ' || REBUILD_DEG ELSE '' END REBUILD_DEG
      FROM MIG01.MIG_IND_INIT A
     WHERE OWNER = v_OWNER
       AND TBL_NM = v_TARG_TBL_NM
       ;

BEGIN
    
    v_TARG_JOB_NM   := 'INDEX ALTER_'|| v_ALTER_DIV || '(' || v_TARG_TBL_NM || ')' ;
    V_PGM_NAME       := 'MIG_PRC_IND_INIT' ;
    v_START_TM      := SYSDATE;
    v_ERR_MSG       := NULL;
    v_ROW_CNT       := 0;
    
    SELECT MIG01.MIG_SEQ_JOB_LOG_ID.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
    MIG01.MIG_PRC_LOG('START',V_JOB_SEQ,V_PGM_NAME,'N','',0);

    BEGIN
    
        IF v_ALTER_DIV = 'UNUSABLE' THEN
            DBMS_APPLICATION_INFO.SET_CLIENT_INFO('MIG_IND_INIT');
            
            -- 기존 인덱스 정보 생성 스크립트
            DELETE FROM  MIG01.MIG_IND_INIT A WHERE A.OWNER = v_OWNER AND A.TBL_NM = v_TARG_TBL_NM; 

            -- INDEX 생성
            INSERT INTO MIG_IND_INIT
             SELECT v_OWNER --A.OWNER
                  , A.TABLE_NAME
                  , A.INDEX_NAME
                  , B.CONSTRAINT_NAME
                  , DECODE(A.UNIQUENESS, 'UNIQUE', 'Y', 'N')
                  , QNIQ_COL
                  , DECODE(B.CONSTRAINT_TYPE, 'P', 'Y', 'N')
                  , 16
                  , SYSDATE
               FROM DBA_INDEXES A
                  , DBA_CONSTRAINTS B
                  , (
                        SELECT INDEX_OWNER
                             , INDEX_NAME
                             , SUBSTR( XMLAGG ( XMLELEMENT ( COLUMN_NAME, ',', COLUMN_NAME) ORDER BY COLUMN_POSITION ).EXTRACT('//text()'),2) QNIQ_COL
                          FROM DBA_IND_COLUMNS A
                         WHERE INDEX_OWNER = v_OWNER
                           AND INDEX_NAME NOT LIKE 'B2EN%'
                          GROUP BY INDEX_OWNER,INDEX_NAME
                    ) C
              WHERE A.OWNER = B.INDEX_OWNER(+)
                AND A.INDEX_NAME = B.INDEX_NAME(+)
                AND A.OWNER = C.INDEX_OWNER
                AND A.INDEX_NAME = C.INDEX_NAME
                AND A.OWNER = v_OWNER
                AND A.INDEX_NAME NOT LIKE 'B2EN%'
                AND A.INDEX_NAME NOT LIKE 'KEY%'
                AND A.TABLE_NAME = v_TARG_TBL_NM
            ;

        ELSIF v_ALTER_DIV = 'REBUILD' THEN    
            DBMS_APPLICATION_INFO.SET_CLIENT_INFO('');
        END IF;

        FOR ALTER_IDXS_ROW IN CUR_ALTER_IDXS LOOP
        
            IF v_ALTER_DIV = 'UNUSABLE' AND ALTER_IDXS_ROW.UNIQ_YN = 'Y' THEN

                IF ALTER_IDXS_ROW.PK_YN = 'Y' THEN 
                    EXECUTE IMMEDIATE 'ALTER TABLE ' || ALTER_IDXS_ROW.OWNER || '.' || ALTER_IDXS_ROW.TBL_NM || ' DROP CONSTRAINT ' || ALTER_IDXS_ROW.CONST_NM ||'';
                END IF;
                
                EXECUTE IMMEDIATE 'DROP INDEX '|| ALTER_IDXS_ROW.IDX_NM || '';
            
            ELSIF v_ALTER_DIV = 'UNUSABLE' AND ALTER_IDXS_ROW.UNIQ_YN = 'N' THEN
            
                EXECUTE IMMEDIATE 'ALTER INDEX ' || ALTER_IDXS_ROW.IDX_NM || ' UNUSABLE' ;
            
            ELSIF v_ALTER_DIV = 'REBUILD' AND ALTER_IDXS_ROW.UNIQ_YN = 'Y' THEN
            
                EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX ' || ALTER_IDXS_ROW.IDX_NM || ' ON '|| ALTER_IDXS_ROW.OWNER || '.' || ALTER_IDXS_ROW.TBL_NM || '(' || ALTER_IDXS_ROW.UNIQ_COL || ') PARALLEL 4' ;                               
                
                IF ALTER_IDXS_ROW.PK_YN = 'Y' THEN 
                    EXECUTE IMMEDIATE 'ALTER TABLE ' || ALTER_IDXS_ROW.OWNER || '.' || ALTER_IDXS_ROW.TBL_NM || ' ADD CONSTRAINT ' || ALTER_IDXS_ROW.CONST_NM || ' PRIMARY KEY (' || ALTER_IDXS_ROW.UNIQ_COL || ')';
                END IF;    
                
                EXECUTE IMMEDIATE 'ALTER INDEX ' || ALTER_IDXS_ROW.IDX_NM || ' NOPARALLEL ';
            
            ELSIF v_ALTER_DIV = 'REBUILD' AND ALTER_IDXS_ROW.UNIQ_YN = 'N' THEN
            
                EXECUTE IMMEDIATE 'ALTER INDEX ' || ALTER_IDXS_ROW.IDX_NM || ' REBUILD ' || ALTER_IDXS_ROW.REBUILD_DEG || ' ' ;
                EXECUTE IMMEDIATE 'ALTER INDEX ' || ALTER_IDXS_ROW.IDX_NM || ' NOPARALLEL ';
            
            END IF;
            
            v_ROW_CNT := v_ROW_CNT + 1;
            
        END LOOP;
        
        
        
        MIG01.MIG_PRC_LOG('END',V_JOB_SEQ,V_PGM_NAME,'Y','',0);

        -- EXCEPTION
        EXCEPTION WHEN OTHERS THEN
            --v_ERR_MSG := SUBSTR(TO_CHAR(SQLERRM),1,4000);
            v_ROW_CNT := 0;
            
            MIG01.MIG_PRC_LOG('END',V_JOB_SEQ,V_PGM_NAME,'N','',0);
            ROLLBACK;
            RETURN;
        
    END;
    
END;

--------------------------------------------
create or replace PROCEDURE MIG_PRC_ENC1
DECLARE
   c_limit PLS_INTEGER := 100;

   CURSOR TB_MASCM031_CUR
   IS
    SELECT ADDR addr_kr,DBSEC.ENC_ADDR(CAST (DBSEC.DEC_ADDR@dl_mig(ADDR_LINE_ONE) AS VARCHAR2(4000)),'SELECT') AS addr_u8  
      FROM (
    SELECT DISTINCT ADDR_LINE_ONE addr
      FROM STG01.ADDRESS A
     WHERE NOT EXISTS (SELECT 1 FROM STG01.MAPKEY_ADDR_ENC S WHERE A.ADDR_LINE_ONE = S.ADDR_ENC_KR)
       AND ROWNUM <= 100
           );

   TYPE mapkey_addr IS TABLE OF STG01.MAPKEY_ADDR_ENC%ROWTYPE;

   l_mapkey_addr   mapkey_addr;
BEGIN
   OPEN TB_MASCM031_CUR;

   LOOP
      FETCH TB_MASCM031_CUR BULK COLLECT INTO l_mapkey_addr LIMIT c_limit;
      
      COMMIT;
      
      FORALL i IN 1 .. l_mapkey_addr.COUNT INSERT INTO stg01.MAPKEY_ADDR_ENC VALUES l_mapkey_addr(i);

      EXIT WHEN l_mapkey_addr.COUNT = 0;
   END LOOP;
   COMMIT;
   close TB_MASCM031_CUR;
EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;

        
        
   
END;
------------------------------------------------------
create or replace PROCEDURE MIG_PRC_ENC_7
IS
   c_limit PLS_INTEGER := 100;
   V_JOB_SEQ    NUMBER;
   V_PGM_NAME VARCHAR2(100) := 'MIG_PRC_ENC_7';
   V_CNT        NUMBER;
   CURSOR TB_MASCM031_CUR
   IS
    SELECT ADDR addr_kr,DBSEC.ENC_ADDR(CAST (DBSEC.DEC_ADDR@dl_mig(ADDR) AS VARCHAR2(4000)),'SELECT') AS addr_u8  
      FROM (
    SELECT DISTINCT CNVS_DTAL_ADDR addr
      FROM STG01.TB_MASCM030 A
     WHERE NOT EXISTS (SELECT 1 FROM STG01.MAPKEY_ADDR_ENC S WHERE A.CNVS_DTAL_ADDR = S.ADDR_ENC_KR)
       AND ROWNUM <= 100
           );

   TYPE mapkey_addr IS TABLE OF STG01.MAPKEY_ADDR_ENC%ROWTYPE;

   l_mapkey_addr   mapkey_addr;
BEGIN
   SELECT MIG01.MIG_SEQ_JOB_LOG_ID.NEXTVAL INTO V_JOB_SEQ FROM DUAL;
   MIG01.MIG_PRC_LOG('START',V_JOB_SEQ,V_PGM_NAME,'N','',0);  
   OPEN TB_MASCM031_CUR;

   LOOP
      FETCH TB_MASCM031_CUR BULK COLLECT INTO l_mapkey_addr LIMIT c_limit;
      
      COMMIT;
      
      FORALL i IN 1 .. l_mapkey_addr.COUNT INSERT INTO stg01.MAPKEY_ADDR_ENC VALUES l_mapkey_addr(i);

      EXIT WHEN l_mapkey_addr.COUNT = 0;
   END LOOP;
   COMMIT;
  
   close TB_MASCM031_CUR;
   MIG01.MIG_PRC_LOG('END',V_JOB_SEQ,V_PGM_NAME,'Y','',0);
EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        MIG01.MIG_PRC_LOG('END',V_JOB_SEQ,V_PGM_NAME,'N','',0);   
END;
-----------------------------------


  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "SYSTEM"."MIG_VW_ERR_CNT" ("TABLE_NAME", "ERR_CNT") DEFAULT COLLATION "USING_NLS_COMP"  AS 
  SELECT 'LOCATIONGROUP' TABLE_NAME, COUNT(*) ERR_CNT FROM STG02.ERR$_LOCATIONGROUP UNION ALL
SELECT 'ADDRESS' TABLE_NAME, COUNT(*) FROM STG02.ERR$_ADDRESS UNION ALL
SELECT 'ADDRESSGROUP' TABLE_NAME, COUNT(*) FROM STG02.ERR$_ADDRESSGROUP UNION ALL
SELECT 'ADDRESSGROUPEXT' TABLE_NAME, COUNT(*) FROM STG02.ERR$_ADDRESSGROUPEXT UNION ALL
SELECT 'ADDRESSEXT' TABLE_NAME, COUNT(*) FROM STG02.ERR$_ADDRESSEXT UNION ALL
SELECT 'PHONENUMBER' TABLE_NAME, COUNT(*) FROM STG02.ERR$_PHONENUMBER UNION ALL
SELECT 'CONTACTMETHODGROUP' TABLE_NAME, COUNT(*) FROM STG02.ERR$_CONTACTMETHODGROUP UNION ALL
SELECT 'PRIVPREF' TABLE_NAME, COUNT(*) FROM STG02.ERR$_PRIVPREF UNION ALL
SELECT 'TB_UVBNC101' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_UVBNC101 UNION ALL
SELECT 'TB_PARPTSOA' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_PARPTSOA UNION ALL
SELECT 'TB_PAKCSSR5' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_PAKCSSR5 UNION ALL
SELECT 'TB_PAKCSCOD' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_PAKCSCOD UNION ALL
SELECT 'TB_PADDPIKD' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_PADDPIKD UNION ALL
SELECT 'TB_MMUSRGRP' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_MMUSRGRP UNION ALL
SELECT 'TB_MMDBSTAT' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_MMDBSTAT UNION ALL
SELECT 'TB_CPREQGDI' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_CPREQGDI UNION ALL
SELECT 'TB_PAKCSSRC' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_PAKCSSRC UNION ALL
SELECT 'TB_PAKCSSR4' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_PAKCSSR4 UNION ALL
SELECT 'TB_PAKCSSR8' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_PAKCSSR8 UNION ALL
SELECT 'TB_NCAPLRCN' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_NCAPLRCN UNION ALL
SELECT 'TB_MMSMTADE' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_MMSMTADE UNION ALL
SELECT 'TB_SMPED032' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_SMPED032 UNION ALL
SELECT 'TB_UVDUM003' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_UVDUM003 UNION ALL
SELECT 'TB_CCAMTHIS' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_CCAMTHIS UNION ALL
SELECT 'TB_CCBSNDVN' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_CCBSNDVN UNION ALL
SELECT 'TB_SMPCOD06' TABLE_NAME, COUNT(*) FROM STG02.ERR$_TB_SMPCOD06 
;



  CREATE TABLE "MIG02"."ERR$_TBL_CLMCESASDI" 
   (	"ORA_ERR_NUMBER$" NUMBER, 
	"ORA_ERR_MESG$" VARCHAR2(2000 BYTE) COLLATE "USING_NLS_COMP", 
	"ORA_ERR_ROWID$" UROWID (4000), 
	"ORA_ERR_OPTYP$" VARCHAR2(2 BYTE) COLLATE "USING_NLS_COMP", 
	"ORA_ERR_TAG$" VARCHAR2(2000 BYTE) COLLATE "USING_NLS_COMP", 
	"ORCH_DCTR_LCNS_NO" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"RGSR_EMNB" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"RGST_DTTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"RGST_PRGM_ID" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"LAST_CHNR_EMNB" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"LAST_CHNG_DTTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"LAST_CHNG_PRGM_ID" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"DLTN_YN" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"RFDT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"STND_YYMM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"DCTR_NM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"HSPL_CODE" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"HSPL_NM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"HSPL_ASCF_DVSN_CODE" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"HSPL_ASCF_DVSN_NM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"HSPL_PSCD" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"CTPR_CODE" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"CTPR_NM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"HSPL_ADDR" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"ATNT_HSPL_YN" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_DSDS_HPGC_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_DSDS_HPGC_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_DSDS_HPGC_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_DSDS_JONT_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_DSDS_JONT_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_DSDS_JONT_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDS_HPGC_OTPN_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDS_HPGC_OTPN_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDS_HPGC_OTPN_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDS_JONT_OTPN_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDS_JONT_OTPN_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDS_JONT_OTPN_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OTPN_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OTPN_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OTPN_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_FIMS_RGST_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_FIMS_RGST_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_FIMS_RGST_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_SPDM_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_SPDM_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_SPDM_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_EXLN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_EXLN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_EXLN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_BLCS_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_BLCS_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_BLCS_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_FADC_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_FADC_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_FADC_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_LNDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_LNDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_LNDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_ATNT_FP_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_ATNT_FP_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_ATNT_FP_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_RCPR_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_RCPR_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_RCPR_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OTPN_RCPR_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OTPN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OTPN_RCPR_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OTPN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OTPN_RCPR_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OTPN_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CUST_AVRG_INPN_NBDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_CUST_AVRG_INPN_NBDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_CUST_AVRG_INPN_NBDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CUST_AVRG_INPN_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_CUST_AVRG_INPN_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_CUST_AVRG_INPN_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CUST_AVRG_OTPN_NBDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_CUST_AVRG_OTPN_NBDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_CUST_AVRG_OTPN_NBDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CUST_AVRG_OTPN_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_CUST_AVRG_OTPN_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_CUST_AVRG_OTPN_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_SPLS_IPOP_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_SPLS_IPOP_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_SPLS_IPOP_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_SPDM_DSNM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_SPDM_DSNM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_SPDM_DSNM" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_BLCS_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_BLCS_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_BLCS_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_VRBD_UMDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_VRBD_UMDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_VRBD_UMDS" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_UMDS_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_UMDS_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_UMDS_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_LNDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_LNDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_LNDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_ANMT_SIGN_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_ANMT_SIGN_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_ANMT_SIGN_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_NNON_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_NNON_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_NNON_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_EYES_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_EYES_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_EYES_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_MIND_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_MIND_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_MIND_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_BKBN_LBJT_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_BKBN_LBJT_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_BKBN_LBJT_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_HEAR_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_HEAR_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_HEAR_DSDG_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSFR_DGSS_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSFR_DGSS_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSFR_DGSS_CONT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_MEPT_DMND_AMT_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_MEPT_DMND_AMT_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_MEPT_DMND_AMT_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_MEPT_DMND_NOTM_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_MEPT_DMND_NOTM_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_MEPT_DMND_NOTM_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_UMDS_AMT_VRBD_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_UMDS_AMT_VRBD_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_UMDS_AMT_VRBD_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_UMDS_RATO_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_UMDS_RATO_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_UMDS_RATO_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_NNON_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_NNON_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_NNON_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_EYES_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_EYES_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_EYES_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_MIND_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_MIND_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_MIND_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSBY_DSBB_LBJT_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSBY_DSBB_LBJT_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSBY_DSBB_LBJT_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_HEAR_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_HEAR_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_HEAR_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSFR_DGSS_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSFR_DGSS_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSFR_DGSS_WHOL_SAAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_ACTA_DMND_NBPS_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_ACTA_DMND_NBPS_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_ACTA_DMND_NBPS_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"CNCD_YR_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"PRYR_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"PYPY_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"BEFR_PYPY_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_FIMS_RGST_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_FIMS_RGST_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_FIMS_RGST_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_FIMS_DSCS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_FIMS_DSCS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_FIMS_DSCS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_SPDM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_SPDM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_SPDM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_EXLN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_EXLN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_EXLN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_BLCS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_BLCS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_BLCS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OPER_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OPER_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OPER_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_LNDS_ACPS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_LNDS_ACPS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_LNDS_ACPS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_ATNT_FP_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_ATNT_FP_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_ATNT_FP_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DTDS_BKBN_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DTDS_BKBN_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DTDS_BKBN_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_DSDS_HPGC_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_DSDS_HPGC_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_DSDS_HPGC_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_DSDS_JONT_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_DSDS_JONT_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_DSDS_JONT_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_INPN_VRBD_DISS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_INPN_VRBD_DISS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_INPN_VRBD_DISS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_IPPM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_IPPM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_IPPM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_IPFA_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_IPFA_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_IPFA_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSBY_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSBY_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSBY_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DGSS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DGSS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DGSS_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OTPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OTPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OTPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OPPM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OPPM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OPPM_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_OPFA_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_OPFA_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_OPFA_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"CNCD_YR_PMMI_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"PRYR_PMMI_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"PYPY_PMMI_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"BEFR_PYPY_PMMI_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"CNCD_YR_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"PRYR_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"PYPY_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"BEFR_PYPY_INPN_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_MEPT_DMND_AMT_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_MEPT_DMND_AMT_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_MEPT_DMND_AMT_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_MEPT_DMND_NOTM_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_MEPT_DMND_NOTM_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_MEPT_DMND_NOTM_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_UMDS_AMT_VRBD_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_UMDS_AMT_VRBD_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_UMDS_AMT_VRBD_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_UMDS_RATO_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_UMDS_RATO_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_UMDS_RATO_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_NNON_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_NNON_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_NNON_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_EYES_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_EYES_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_EYES_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_MIND_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_MIND_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_MIND_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSBY_DSBB_LBJT_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSBY_DSBB_LBJT_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSBY_DSBB_LBJT_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSDG_HEAR_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSDG_HEAR_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSDG_HEAR_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DSFR_DGSS_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DSFR_DGSS_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DSFR_DGSS_LSAI" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_MEPT_DMND_AMT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_MEPT_DMND_AMT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_MEPT_DMND_AMT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_DMND_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_DMND_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_DMND_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_MEPT_DMND_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_MEPT_DMND_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_MEPT_DMND_NOTM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_AVRG_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_AVRG_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_AVRG_OPAM" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"FLSE_RCPR_ORGN_YN" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_HPGC_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_HPGC_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_HPGC_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_JNDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_JNDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_JNDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_BKBN_DTDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_BKBN_DTDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_BKBN_DTDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_VRBD_DISS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_VRBD_DISS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_VRBD_DISS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_ADLT_DISS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CAVS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CRBV_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_CCDS_CUST_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_HPGC_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_HPGC_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_HPGC_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_JNDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_JNDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_JNDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_BKBN_DTDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_BKBN_DTDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_BKBN_DTDS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR5_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR3_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"YR1_VRBD_DISS_CUST_RATO" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"STND_CRNY_DCML_PSIT_CNT" VARCHAR2(4000 BYTE) COLLATE "USING_NLS_COMP", 
	"CRNY_CODE" VARCHAR2(32767 BYTE) COLLATE "USING_NLS_COMP"
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "TSD_MIG02_REG" ;

   COMMENT ON TABLE "MIG02"."ERR$_TBL_CLMCESASDI"  IS 'DML Error Logging table for "TBL_CLMCESASDI"';


------------------------------------------
create or replace PROCEDURE        extract_id 
(
    p_proc_number IN VARCHAR2 -- 처리번호 (외부채번)
   , p_policy_numbers IN ARRAY_STR -- 증번목록 
   , p_proc_type IN VARCHAR2 -- 처리구분 (D: 삭제, I: 등록)
   , p_schema_type IN VARCHAR2 -- 스키마구분 (PA, QI)
   , p_is_force IN NUMBER -- 강제처리여부 (0: validate, 1: 강제실행)
)  
IS
  c_proc_number NUMBER;
  r_proc_number HPACOM.TBL_MIGRATION.proc_number%TYPE;
  r_proc_type HPACOM.TBL_MIGRATION_DTL.proc_type%TYPE;
  r_policy_number HPACOM.TBL_MIGRATION_DTL.policy_number%TYPE;
  p_rpn VARCHAR2(1000);
  c_policy_number NUMBER;
  v_sysdate TIMESTAMP(6);
  v_elapsed NUMBER;
BEGIN
  select systimestamp into v_sysdate from dual;
  -- qi체크
  if p_schema_type <> 'PA' then RAISE_APPLICATION_ERROR (-20000,'error : 현재 ''PA''만 지원합니다.'); end if;
  if p_is_force = 0 then  
    -- 처리중 체크
    SELECT count(1) into c_proc_number from HPACOM.TBL_MIGRATION where proc_number <> p_proc_number and proc_end_at is null;
    if c_proc_number > 0 then RAISE_APPLICATION_ERROR (-20000,'error : 진행중인 migration이 존재합니다.'); end if;
  end if;

  -- migration 등록 (등록 및 삭제가 끝나면 종료일시, 상태 update)
  select count(1) into c_proc_number from HPACOM.TBL_MIGRATION where PROC_NUMBER = p_proc_number;
  if c_proc_number = 0 then
    insert into HPACOM.TBL_MIGRATION (PROC_NUMBER, PROC_START_AT, SCHEMA_TYPE) values (p_proc_number, sysdate, p_schema_type);
    commit; -- migration commit
  end if;

  -- 처리구분에 따라 migration target delete
  DELETE FROM HPACOM.TBL_MIGRATION_TARGET WHERE PROC_TYPE = p_proc_type;

  -- input 증번 입력
  -- 강제실행일때 중복증번일경우 빼고 insert
  select count(1) into c_proc_number from HPACOM.TBL_MIGRATION_DTL where PROC_NUMBER = p_proc_number and PROC_TYPE = p_proc_type and POLICY_NUMBER in (select column_value from table(p_policy_numbers));
  if c_proc_number > 0 and p_is_force = 0 then RAISE_APPLICATION_ERROR (-20000,'error : 중복된 증번이 존재합니다.'); end if; 
  for i in 1..p_policy_numbers.count loop
    merge into HPACOM.TBL_MIGRATION_DTL a using (select p_proc_number as proc_number, p_proc_type as proc_type, p_policy_numbers(i) as policy_number from dual) b on (a.proc_number = b.proc_number and a.proc_type = b.proc_type and a.policy_number = b.policy_number)
    when not matched then insert (PROC_NUMBER, PROC_TYPE, POLICY_NUMBER, IS_INPUT_VALUE) values (p_proc_number, p_proc_type, p_policy_numbers(i), 1);
  end loop;

  -- 연관계약 추출
  begin
    SELECT PROC_NUMBER, PROC_TYPE, POLICY_NUMBER INTO r_proc_number, r_proc_type, r_policy_number
    FROM HPACOM.TBL_MIGRATION_DTL WHERE PROC_NUMBER = p_proc_number AND PROC_TYPE = p_proc_type AND PROC_STATUS IS NULL AND RELATED_POLICY_NUMBER IS NULL AND ROWNUM = 1;
  exception 
  when no_data_found then 
    r_policy_number := null;
  when others then
    RAISE_APPLICATION_ERROR (-20000,'error : other exception.');
  end;  
  WHILE r_policy_number is not null 
    LOOP
--      with pp as (
--       select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number union all
--       select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment_due p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number union all
--       select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_policy_loan_payment p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number union all
--       select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_prem_payment p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number)
      select listagg(list.pn,'|') within group(order by list.pn,'|') into p_rpn 
      from (
--            select distinct 'PP_'||tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
--            select distinct 'PP_'||tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment_due p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
--            select distinct 'PP_'||tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_policy_loan_payment p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
--            select distinct 'PP_'||tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_prem_payment p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
            select distinct 'AR_'||rel_from_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_from_policy_number = r_policy_number union
            select distinct 'AR_'||rel_to_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_from_policy_number = r_policy_number union
            select distinct 'AR_'||rel_from_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_to_policy_number = r_policy_number union
            select distinct 'AR_'||rel_to_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_to_policy_number = r_policy_number ) list;
      IF p_rpn is null then p_rpn := 'N/A'; END IF;
      update HPACOM.TBL_MIGRATION_DTL set RELATED_POLICY_NUMBER = p_rpn where PROC_NUMBER = p_proc_number AND PROC_TYPE = p_proc_type AND POLICY_NUMBER = r_policy_number;
      for r in (
--        with pp as (
--         select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number union all
--         select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment_due p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number union all
--         select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_policy_loan_payment p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number union all
--         select pp.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_prem_payment p, hpafin.tbl_payment_processing pp where tla.id = a.id and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id and tla.policy_number = r_policy_number)
--          select distinct tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
--          select distinct tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_payment_due p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
--          select distinct tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_policy_loan_payment p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
--          select distinct tla.policy_number as pn from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a, hpafin.tbl_prem_payment p, pp where tla.id = a.id and tla.policy_number is not null and a.agreement_number = p.agreement_number and p.payment_processing_id = pp.id union
          select distinct rel_from_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_from_policy_number = r_policy_number union
          select distinct rel_to_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_from_policy_number = r_policy_number union
          select distinct rel_from_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_to_policy_number = r_policy_number union
          select distinct rel_to_policy_number as pn from hpacnt.tbl_agmt_rel connect by nocycle prior rel_from_policy_number = rel_to_policy_number start with rel_to_policy_number = r_policy_number ) loop
        merge into HPACOM.TBL_MIGRATION_DTL a using (select p_proc_number as proc_number, p_proc_type as proc_type, r.pn as policy_number from dual) b on (a.proc_number = b.proc_number and a.proc_type = b.proc_type and a.policy_number = b.policy_number)
        when not matched then insert (PROC_NUMBER, PROC_TYPE, POLICY_NUMBER, IS_INPUT_VALUE) values (p_proc_number, p_proc_type, r.pn, 0);
      end loop;   
      begin
        SELECT PROC_NUMBER, PROC_TYPE, POLICY_NUMBER INTO r_proc_number, r_proc_type, r_policy_number
        FROM HPACOM.TBL_MIGRATION_DTL WHERE PROC_NUMBER = p_proc_number AND PROC_TYPE = p_proc_type AND PROC_STATUS IS NULL AND RELATED_POLICY_NUMBER IS NULL AND ROWNUM = 1;
      exception 
      when no_data_found then 
        r_policy_number := null;
      when others then
        RAISE_APPLICATION_ERROR (-20000,'error : other exception.');
      end;
    END LOOP;
  commit;

  --강제처리여부가 0 & 처리구분이 I이면 전체증번이 입력되었는지 체크
  if p_is_force = 0 and p_proc_type = 'I' then  
    SELECT count(1) into c_proc_number from HPACOM.TBL_MIGRATION_DTL where PROC_NUMBER = p_proc_number and proc_type = p_proc_type and IS_INPUT_VALUE = 0;
    if c_proc_number > 0 then RAISE_APPLICATION_ERROR (-20000,'error : 전체 연관증번을 입력하세요.'); end if;
  end if;

  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('전처리 - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- id 추출
  for r in (select policy_number from HPACOM.TBL_MIGRATION_DTL WHERE PROC_NUMBER = p_proc_number AND PROC_TYPE = p_proc_type and proc_status is null) loop

    -- 계약
    for sub_r in (select distinct tla.id from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a where tla.id = a.id and a.product_type_code = '1' and tla.policy_number = r.policy_number) loop
      insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, r.policy_number, 'TBL_TOP_LEVEL_AGREEMENT', sub_r.id);
      insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, r.policy_number, 'TBL_AGREEMENT', sub_r.id);
    end loop;

    -- 가설계약 (증번이없는..)
    for sub_r in (select distinct a1.id from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpacnt.tbl_agreement a1 where mt.proc_type = p_proc_type and mt.policy_number = r.policy_number and mt.table_name = 'TBL_TOP_LEVEL_AGREEMENT' and mt.id = a.id and a.agreement_number = a1.agreement_number
                  minus select distinct mt.id from hpacom.tbl_migration_target mt where mt.proc_type = p_proc_type and mt.policy_number = r.policy_number and mt.table_name = 'TBL_TOP_LEVEL_AGREEMENT') loop
      insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, r.policy_number, 'TBL_TOP_LEVEL_AGREEMENT', sub_r.id);
      insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, r.policy_number, 'TBL_AGREEMENT', sub_r.id);
    end loop;

    -- tla 계약이 없으면 상태 N
    select count(1) into c_policy_number from HPACOM.TBL_MIGRATION_TARGET where PROC_TYPE = p_proc_type and TABLE_NAME = 'TBL_TOP_LEVEL_AGREEMENT' and policy_number = r.policy_number;
    if c_policy_number = 0 then
      update HPACOM.TBL_MIGRATION_DTL set proc_status = 'N' where PROC_NUMBER = p_proc_number and proc_type = p_proc_type and policy_number = r.policy_number;
    end if;
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('계약 - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품
  for sub_r in (select distinct rel.tla_id, mt.policy_number from hpacom.TBL_MIGRATION_TARGET mt, hpacnt.tbl_tla_child_rel rel where mt.proc_type = p_proc_type and mt.table_name = 'TBL_TOP_LEVEL_AGREEMENT' and mt.id = rel.parent_tla_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_TOP_LEVEL_AGREEMENT', sub_r.tla_id);
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGREEMENT', sub_r.tla_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('가입상품 - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 급부
  for sub_r in (select distinct rel.agreement_id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement_child_rel rel where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_TOP_LEVEL_AGREEMENT' and mt.id = rel.parent_agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGREEMENT', sub_r.agreement_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGREEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt 고정속성
  for sub_r in (select distinct col.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_col_property col where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = col.agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_COL_PROPERTY', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_COL_PROPERTY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt anchor
  for sub_r in (select distinct anchor.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpacnt.tbl_agreement_anchor anchor where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = anchor.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGREEMENT_ANCHOR', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGREEMENT_ANCHOR - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 납입상태
  for sub_r in (select distinct pymtst.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_pymt_status pymtst where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT_ANCHOR' and mt.id = pymtst.agreement_anchor_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_PYMT_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_PYMT_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- bundle composition
  for sub_r in (select distinct bc.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_bundle_composition bc where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT_ANCHOR' and mt.id = bc.agreement_anchor_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_BUNDLE_COMPOSITION', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_BUNDLE_COMPOSITION - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 계약간관계
  for sub_r in (select distinct ar.id, (select tla.policy_number from hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_agreement a where tla.id = a.id and ar.rel_from_agreement_anchor_id = a.agreement_anchor_id and tla.policy_number is not null and rownum = 1) as policy_number
                from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_rel ar where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT_ANCHOR' and (mt.id = ar.rel_from_agreement_anchor_id or mt.id = ar.rel_to_agreement_anchor_id)) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_REL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_REL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 계약간관계 상태
  for sub_r in (select distinct ars.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_rel_status ars where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGMT_REL' and mt.id = ars.agmt_rel_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_REL_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_REL_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt 버전
  for sub_r in (select distinct av.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement_version av where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_TOP_LEVEL_AGREEMENT' and mt.id = av.top_level_agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGREEMENT_VERSION', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGREEMENT_VERSION - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- versioned
  for sub_r in (select distinct va.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement_version av, hpacnt.tbl_versioned_agreement va where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_AGREEMENT_VERSION' and mt.id = av.id and av.versioned_agreement_id = va.id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_VERSIONED_AGREEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_VERSIONED_AGREEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- request
  for sub_r in (select distinct req.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_top_level_agreement tla, hpacnt.tbl_request req where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_TOP_LEVEL_AGREEMENT' and mt.id = tla.id and tla.request_id = req.id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_REQUEST', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_REQUEST - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- request container
  for sub_r in (select distinct reqcnt.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_request req, hpacnt.tbl_request_container reqcnt where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_REQUEST' and mt.id = req.id and req.request_container_id = reqcnt.id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_REQUEST_CONTAINER', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_REQUEST_CONTAINER - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- request lcs
  for sub_r in (select distinct reqlcs.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_request_lcs reqlcs where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_REQUEST' and mt.id = reqlcs.request_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_REQUEST_LCS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_REQUEST_LCS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- ria
  for sub_r in (select distinct rel.role_in_actual_id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement_ria_rel rel where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_AGREEMENT' and mt.id = rel.agreement_id ) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_ROLE_IN_ACTUAL', sub_r.role_in_actual_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_ROLE_IN_ACTUAL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- ria 고정속성
  for sub_r in (select distinct col.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ria_col_property col where mt.PROC_TYPE = p_proc_type and mt.TABLE_NAME = 'TBL_ROLE_IN_ACTUAL' and mt.id = col.role_in_actual_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RIA_COL_PROPERTY', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RIA_COL_PROPERTY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt 속성
  for sub_r in (select distinct prop.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_property prop where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = prop.agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_PROPERTY', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_PROPERTY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- req 속성
  for sub_r in (select distinct prop.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_req_property prop where mt.proc_type = p_proc_type and mt.table_name = 'TBL_REQUEST' and mt.id = prop.request_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_REQ_PROPERTY', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_REQ_PROPERTY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- ria 속성
  for sub_r in (select distinct prop.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ria_property prop where mt.proc_type = p_proc_type and mt.table_name = 'TBL_ROLE_IN_ACTUAL' and mt.id = prop.role_in_actual_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RIA_PROPERTY', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RIA_PROPERTY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- tla child
  for sub_r in (select distinct rel.parent_tla_id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_tla_child_rel rel where mt.proc_type = p_proc_type and mt.table_name = 'TBL_TOP_LEVEL_AGREEMENT' and mt.id = rel.parent_tla_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_TLA_CHILD_REL', sub_r.parent_tla_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_TLA_CHILD_REL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt child
  for sub_r in (select distinct rel.parent_agreement_id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement_child_rel rel where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = rel.parent_agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGREEMENT_CHILD_REL', sub_r.parent_agreement_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGREEMENT_CHILD_REL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt ria
  for sub_r in (select distinct rel.agreement_id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement_ria_rel rel where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = rel.agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGREEMENT_RIA_REL', sub_r.agreement_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGREEMENT_RIA_REL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 제도
  for sub_r in (select distinct opt.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_option opt where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT_ANCHOR' and mt.id = opt.agreement_anchor_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_OPTION', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_OPTION - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 신청정보
  for sub_r in (select distinct appl.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_application appl where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT_ANCHOR' and mt.id = appl.agreement_anchor_id union all
                select distinct appl.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_application appl where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGMT_OPTION' and mt.id = appl.option_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_APPLICATION', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_APPLICATION - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 신청정보 속성
  for sub_r in (select distinct prop.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_application_property prop where mt.proc_type = p_proc_type and mt.table_name = 'TBL_APPLICATION' and mt.id = prop.ap_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_APPLICATION_PROPERTY', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_APPLICATION_PROPERTY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 신청정보 세트속성
  for sub_r in (select distinct prop.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_application_set_property prop where mt.proc_type = p_proc_type and mt.table_name = 'TBL_APPLICATION' and mt.id = prop.ap_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_APPLICATION_SET_PROPERTY', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_APPLICATION_SET_PROPERTY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 신청정보 처리이력
  for sub_r in (select distinct tx.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_application_tx tx where mt.proc_type = p_proc_type and mt.table_name = 'TBL_APPLICATION_PROPERTY' and mt.id = tx.apd_id union all
                select distinct tx.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_application_tx tx where mt.proc_type = p_proc_type and mt.table_name = 'TBL_APPLICATION_SET_PROPERTY' and mt.id = tx.aspd_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_APPLICATION_TX', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_APPLICATION_TX - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 신청정보 접수
  for sub_r in (select distinct prop.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_drft_appl_prop prop where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = prop.agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_DRFT_APPL_PROP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_DRFT_APPL_PROP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 신청정보 세트접수
  for sub_r in (select distinct prop.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_drft_appl_set_prop prop where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = prop.agreement_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_DRFT_APPL_SET_PROP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_DRFT_APPL_SET_PROP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 납입제도
  for sub_r in (select distinct pp.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_premium_plan pp where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT_ANCHOR' and mt.id = pp.agreement_anchor_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREMIUM_PLAN', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREMIUM_PLAN - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 납입제도 처리이력
  for sub_r in (select distinct tx.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_premium_plan_tx tx where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREMIUM_PLAN' and mt.id = tx.premium_plan_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREMIUM_PLAN_TX', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREMIUM_PLAN_TX - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- RA
  for sub_r in (select distinct ra.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpacnt.tbl_ra ra where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = ra.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RA', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RA - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 연금산출정보
  for sub_r in (select distinct dtl.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ra_ann_calc_dtl dtl where mt.proc_type = p_proc_type and mt.table_name = 'TBL_RA' and mt.id = dtl.ra_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RA_ANN_CALC_DTL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RA_ANN_CALC_DTL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 계약FP
  for sub_r in (select distinct dtl.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ra_fp_dtl dtl where mt.proc_type = p_proc_type and mt.table_name = 'TBL_RA' and mt.id = dtl.ra_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RA_FP_DTL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RA_FP_DTL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 계약부속정보
  for sub_r in (select distinct dtl.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ra_plcy_supp_dtl dtl where mt.proc_type = p_proc_type and mt.table_name = 'TBL_RA' and mt.id = dtl.ra_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RA_PLCY_SUPP_DTL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RA_PLCY_SUPP_DTL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- IRA
  for sub_r in (select distinct ira.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpacnt.tbl_ira ira where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = ira.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_IRA', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_IRA - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입펀드
  for sub_r in (select distinct dtl.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ira_fund_dtl dtl where mt.proc_type = p_proc_type and mt.table_name = 'TBL_IRA' and mt.id = dtl.ira_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_IRA_FUND_DTL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_IRA_FUND_DTL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입펀드 항목
  for sub_r in (select distinct itm.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ira_fund_item itm where mt.proc_type = p_proc_type and mt.table_name = 'TBL_IRA_FUND_DTL' and mt.id = itm.dtl_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_IRA_FUND_ITEM', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_IRA_FUND_ITEM - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- RA 처리이력
  for sub_r in (select distinct tx.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ra_tx tx where mt.proc_type = p_proc_type and mt.table_name = 'TBL_IRA_FUND_DTL' and mt.id = tx.fund_id union all
                select distinct tx.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ra_tx tx where mt.proc_type = p_proc_type and mt.table_name = 'TBL_RA_ANN_CALC_DTL' and mt.id = tx.ann_calc_id union all
                select distinct tx.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ra_tx tx where mt.proc_type = p_proc_type and mt.table_name = 'TBL_RA_FP_DTL' and mt.id = tx.fp_id union all
                select distinct tx.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_ra_tx tx where mt.proc_type = p_proc_type and mt.table_name = 'TBL_RA_PLCY_SUPP_DTL' and mt.id = tx.plcy_supp_id ) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RA_TX', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RA_TX - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 수금정보
  for sub_r in (select distinct vao.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpacnt.tbl_vao_prem_coll vao where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = vao.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_VAO_PREM_COLL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_VAO_PREM_COLL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 수금정보 이력
  for sub_r in (select distinct ver.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_vao_prem_coll_version ver where mt.proc_type = p_proc_type and mt.table_name = 'TBL_VAO_PREM_COLL' and mt.id = ver.vao_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_VAO_PREM_COLL_VERSION', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_VAO_PREM_COLL_VERSION - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- rule 결과
  for sub_r in (select distinct rs.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_rule_result rs where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = rs.agreement_id union all
                select distinct rs.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_rule_result rs where mt.proc_type = p_proc_type and mt.table_name = 'TBL_REQUEST' and mt.id = rs.request_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RULE_RESULT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RULE_RESULT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- rue 결과 값
  for sub_r in (select distinct pr.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_rule_result_param pr where mt.proc_type = p_proc_type and mt.table_name = 'TBL_RULE_RESULT' and mt.id = pr.rule_result_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_RULE_RESULT_PARAM', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_RULE_RESULT_PARAM - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt 묶음 관계
  for sub_r in (select distinct bdlrel.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_bundle_rel bdlrel where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT_ANCHOR' and mt.id = bdlrel.agreement_anchor_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_BUNDLE_REL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_BUNDLE_REL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt 묶음
  for sub_r in (select distinct bdlrel.agmt_bundle_id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_bundle_rel bdlrel where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGMT_BUNDLE_REL' and mt.id = bdlrel.id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_BUNDLE', sub_r.agmt_bundle_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_BUNDLE  - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt 묶음 관계상태
  for sub_r in (select distinct bdlrelst.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_bundle_rel_status bdlrelst where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGMT_BUNDLE_REL' and mt.id = bdlrelst.agmt_bundle_rel_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_BUNDLE_REL_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_BUNDLE_REL_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- agmt 묶음 상태
  for sub_r in (select distinct bdlst.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agmt_bundle_status bdlst where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGMT_BUNDLE' and mt.id = bdlst.agreement_bundle_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_AGMT_BUNDLE_STATUS', sub_r.id);
  end loop; 
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_AGMT_BUNDLE_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 당사자역할
  for sub_r in (select distinct pr.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpapty.tbl_party_role pr where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = pr.context_reference) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PARTY_ROLE', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PARTY_ROLE - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- account
  for sub_r in (select distinct acct.id, m.policy_number from hpacom.tbl_migration_dtl m, hpafin.tbl_monetary_account_entry acct where m.proc_number = p_proc_number and m.proc_type = p_proc_type and m.policy_number = acct.policy_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONETARY_ACCOUNT_ENTRY', sub_r.id);
  end loop; 
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONETARY_ACCOUNT_ENTRY - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- mp
  for sub_r in (select distinct mp.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_money_prov mp where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = mp.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONEY_PROV', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONEY_PROV - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- mpa
  for sub_r in (select distinct mp.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_money_prov_anchor mp where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = mp.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONEY_PROV_ANCHOR', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONEY_PROV_ANCHOR - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- mpe
  for sub_r in (select distinct mp.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_money_prov_element mp where mt.proc_type = p_proc_type and mt.table_name = 'TBL_MONEY_PROV' and mt.id = mp.money_prov_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONEY_PROV_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONEY_PROV_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- mps
  for sub_r in (select distinct mp.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_money_prov_status mp where mt.proc_type = p_proc_type and mt.table_name = 'TBL_MONEY_PROV' and mt.id = mp.money_prov_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONEY_PROV_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONEY_PROV_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- ms
  for sub_r in (select distinct ms.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_money_scheduler ms where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = ms.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONEY_SCHEDULER', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONEY_SCHEDULER - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- mse
  for sub_r in (select distinct ms.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_money_scheduler_execution ms where mt.proc_type = p_proc_type and mt.table_name = 'TBL_MONEY_SCHEDULER' and mt.id = ms.money_scheduler_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONEY_SCHEDULER_EXECUTION', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONEY_SCHEDULER_EXECUTION - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- mss
  for sub_r in (select distinct ms.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_money_scheduler_status ms where mt.proc_type = p_proc_type and mt.table_name = 'TBL_MONEY_SCHEDULER' and mt.id = ms.money_scheduler_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONEY_SCHEDULER_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONEY_SCHEDULER_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- msas
  for sub_r in (select distinct mp.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_ms_attached_status mp where mt.proc_type = p_proc_type and mt.table_name = 'TBL_MONEY_PROV' and mt.id = mp.money_prov_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MS_ATTACHED_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MS_ATTACHED_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 월대체
  for sub_r in (select distinct mfr.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_monthly_finfr_reserve mfr where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = mfr.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONTHLY_FINFR_RESERVE', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONTHLY_FINFR_RESERVE - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 월대체 상태
  for sub_r in (select distinct mfr.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_monthly_fin_status mfr where mt.proc_type = p_proc_type and mt.table_name = 'TBL_MONTHLY_FINFR_RESERVE' and mt.id = mfr.monthly_fin_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONTHLY_FIN_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONTHLY_FIN_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 월대체
  for sub_r in (select distinct mfr.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_monthly_finrev_comp mfr where mt.proc_type = p_proc_type and mt.table_name = 'TBL_MONTHLY_FINFR_RESERVE' and mt.id = mfr.monthly_finrev_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_MONTHLY_FINREV_COMP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_MONTHLY_FINREV_COMP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_payment p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = p.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 입출금
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_comp p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT' and mt.id = p.payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_COMP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_COMP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT' and mt.id = p.payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금 상태
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_status p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT' and mt.id = p.payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 입출금 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_comp_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_COMP' and mt.id = p.payment_comp_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_COMP_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_COMP_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금 예정
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_payment_due p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = p.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_DUE', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_DUE - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 입출금 예정
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_due_comp p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE' and mt.id = p.payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_DUE_COMP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_DUE_COMP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금 예정 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_due_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE' and mt.id = p.payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_DUE_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_DUE_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금 예정 상태
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_due_status p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE' and mt.id = p.payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_DUE_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_DUE_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 입출금 예정 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_due_comp_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE_COMP' and mt.id = p.payment_due_comp_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_DUE_COMP_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_DUE_COMP_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 원천세
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_withholding_tax p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT' and mt.id = p.payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_WITHHOLDING_TAX', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_WITHHOLDING_TAX - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 원천세 예정
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_withholding_tax_due p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE' and mt.id = p.payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_WITHHOLDING_TAX_DUE', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_WITHHOLDING_TAX_DUE - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 배당금 상세
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_dividend_payment_detail p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_COMP' and mt.id = p.payment_comp_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_DIVIDEND_PAYMENT_DETAIL', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_DIVIDEND_PAYMENT_DETAIL - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험계약대출
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_policy_loan p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = p.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_POLICY_LOAN', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_POLICY_LOAN - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험계약대출 이력
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_policy_loan_version p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_POLICY_LOAN' and mt.id = p.policy_loan_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_POLICY_LOAN_VERSION', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_POLICY_LOAN_VERSION - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험계약대출 입출금
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_policy_loan_payment p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = p.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_POLICY_LOAN_PAYMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_POLICY_LOAN_PAYMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 보험계약대출 입출금
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_poloan_payment_comp p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_POLICY_LOAN_PAYMENT' and mt.id = p.policy_loan_payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_POLOAN_PAYMENT_COMP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_POLOAN_PAYMENT_COMP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험계약대출 입출금 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_poloan_payment_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_POLICY_LOAN_PAYMENT' and mt.id = p.policy_loan_payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_POLOAN_PAYMENT_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_POLOAN_PAYMENT_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

   -- 보험계약대출 입출금 상태
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_poloan_paym_status p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_POLICY_LOAN_PAYMENT' and mt.id = p.policy_loan_payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_POLOAN_PAYM_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_POLOAN_PAYM_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 보험계약대출 입출금 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_poloan_paym_comp_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_POLOAN_PAYMENT_COMP' and mt.id = p.poloan_paym_comp_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_POLOAN_PAYM_COMP_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_POLOAN_PAYM_COMP_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험료 입금
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_prem_payment p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = p.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 보험료 입금
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment_comp p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT' and mt.id = p.prem_payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_COMP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_COMP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험료 입금 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT' and mt.id = p.prem_payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험료 입금 상태
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment_status p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT' and mt.id = p.prem_payment_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 보험료 입금 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment_comp_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT_COMP' and mt.id = p.prem_payment_comp_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_COMP_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_COMP_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험료 입금 예정
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpacnt.tbl_agreement a, hpafin.tbl_prem_payment_due p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_AGREEMENT' and mt.id = a.id and a.agreement_number = p.agreement_number) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_DUE', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_DUE - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 보험료 입금 예정
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment_due_comp p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT_DUE' and mt.id = p.prem_payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_DUE_COMP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_DUE_COMP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험료 입금 예정 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment_due_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT_DUE' and mt.id = p.prem_payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_DUE_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_DUE_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 보험료 입금 예정 상태
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment_due_status p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT_DUE' and mt.id = p.prem_payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREM_PAYMENT_DUE_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREM_PAYMENT_DUE_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 가입상품 보험료 입금 예정 항목
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prempaym_due_comp_element p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT_DUE_COMP' and mt.id = p.prem_payment_due_comp_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PREMPAYM_DUE_COMP_ELEMENT', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PREMPAYM_DUE_COMP_ELEMENT - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금거래간관계
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT' and mt.id = p.from_payment_id union
                select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT' and mt.id = p.to_payment_id union
                select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE' and mt.id = p.from_payment_due_id union
                select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE' and mt.id = p.to_payment_due_id union
                select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT' and mt.id = p.from_prem_payment_id union
                select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT' and mt.id = p.to_prem_payment_id union
                select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT_DUE' and mt.id = p.from_prem_payment_due_id union
                select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_fin_tran_relationship p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT_DUE' and mt.id = p.to_prem_payment_due_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_FIN_TRAN_RELATIONSHIP', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_FIN_TRAN_RELATIONSHIP - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금처리
  for sub_r in (with t as (select distinct p.payment_processing_id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT' and mt.id = p.id and p.payment_processing_id is not null union
                            select distinct p.payment_processing_id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_policy_loan_payment p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_POLICY_LOAN_PAYMENT' and mt.id = p.id and p.payment_processing_id is not null union
                            select distinct p.payment_processing_id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_due p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_DUE' and mt.id = p.id and p.payment_processing_id is not null union
                            select distinct p.payment_processing_id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_prem_payment p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PREM_PAYMENT' and mt.id = p.id and p.payment_processing_id is not null)
                select distinct t.payment_processing_id, (select t2.policy_number from t t2 where t.payment_processing_id = t2.payment_processing_id and rownum = 1) as policy_number from t) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_PROCESSING', sub_r.payment_processing_id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_PROCESSING - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 입출금처리 상태
  for sub_r in (select distinct p.id, mt.policy_number from hpacom.tbl_migration_target mt, hpafin.tbl_payment_processing_status p where mt.proc_type = p_proc_type and mt.table_name = 'TBL_PAYMENT_PROCESSING' and mt.id = p.payment_processing_id) loop
    insert into HPACOM.TBL_MIGRATION_TARGET (PROC_TYPE, POLICY_NUMBER, TABLE_NAME, ID) values (p_proc_type, sub_r.policy_number, 'TBL_PAYMENT_PROCESSING_STATUS', sub_r.id);
  end loop;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('TBL_PAYMENT_PROCESSING_STATUS - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  -- 처리구분이 I일때 mig대역 ID인지 체크
  select count(1) into c_policy_number from hpacom.tbl_migration_target where id < 100000000000;
  if p_proc_type = 'I' and p_is_force = 0 and c_policy_number > 0 then RAISE_APPLICATION_ERROR (-20000,'error : 이행데이터 외의 데이터가 존재합니다.'); end if;

  -- 상태 P update
  update HPACOM.TBL_MIGRATION_DTL set proc_status = 'P' where PROC_NUMBER = p_proc_number and proc_type = p_proc_type and proc_status is null;
  select (extract( minute from t.diff )*60*1000 + round(extract( second from t.diff )*1000)) into v_elapsed from (select systimestamp - v_sysdate as diff from dual) t;
  DBMS_OUTPUT.PUT_LINE('후처리 - '||v_elapsed||'ms');
  select systimestamp into v_sysdate from dual;

  COMMIT;
  EXCEPTION 
  WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
    hpadem.migration_error(p_proc_number, p_proc_type, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
    ROLLBACK;

END;





========================

기구조직순환관계구현(20190523)

SELECT L3_RANK, L3_NAME, L3_CODE
	 , L4_RANK, L4_NAME, L4_CODE 
	, SUM(CASE WHEN ORGN_SPQU_TPDV NOT IN ('49','54') THEN 1 
				ELSE CASE WHEN SUBSTR(ORGN_CRTN_DATE,1,6) between TO_CHAR(ADD_MONTHS(SYSDATE, -13), 'YYYYMM') and TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') THEN 0
						  WHEN SUBSTR(ORGN_CRTN_DATE,1,6) between TO_CHAR(ADD_MONTHS(SYSDATE, -25), 'YYYYMM') and TO_CHAR(ADD_MONTHS(SYSDATE, -13), 'YYYYMM') THEN 0.5
						  ELSE 1
					 END
		   END) AS L6_CNT_OR
	, SUM(1) AS L6_CNT
FROM 	TB_UVORGVW3
WHERE 1=1
AND STDD_YM = '201903'
AND ORGN_ORGN_TPDV IN ('E1','E4')
AND ORGN_BUSS_TPDV = 'A2'
AND ORGN_STAT_DVSN = ' '
AND ORGN_SPQU_TPDV NOT IN ('53','50','60','61','62','66') 
GROUP BY L3_RANK, L3_NAME, L3_CODE
	 , L4_RANK, L4_NAME, L4_CODE
;


SELECT *
FROM 	TB_UVORGVW3
WHERE   stdd_ym = '201903'
;

SELECT	ORGN_CODE, ORGN_DVCD, ORGN_NAME, BUSS_TPDV_CODE, ORGN_TPDV_CODE, PRCD_OGC1
FROM	TB_UVORG004
WHERE   1 = 1
AND		ORGN_STAT_DVSN <> 'X'
AND     BUSS_TPDV_CODE = 'A2'
CONNECT BY PRIOR ORGN_CODE = PRCD_OGC1
--START WITH PRCD_OGC1 IS NULL
;




SELECT	*
FROM	(
			SELECT	ORGN_CODE, ORGN_DVCD, ORGN_NAME, BUSS_TPDV_CODE, ORGN_TPDV_CODE, PRCD_OGC1, ROWNUM RNUM
			FROM	TB_UVORG004
			WHERE   1 = 1
			AND		ORGN_STAT_DVSN <> 'X'
			AND     BUSS_TPDV_CODE = 'A2'
			CONNECT BY PRIOR ORGN_CODE = PRCD_OGC1
			START WITH PRCD_OGC1 IS NULL
		) A LEFT OUTER JOIN
		(
			SELECT A.STDD_YM, A.ORGN_CODE, A.SLMN_ACHV_AMT
			FROM TB_MIMAN007 A
			WHERE A.STDD_YM = '201901'
			AND   A.TAGT_ACHV_DVCD = '31'
			AND   A.INSR_CMPN_CODE = '00'
			AND   A.ORGN_BUSS_DVCD = '10'
			AND   A.INSR_ITEM_DVCD = '0100'   
			AND   A.EIS_ITEM_CODE  = '100101' 
			AND   A.ONSF_ACHV_YN ='Y'
		) B  ON A.ORGN_CODE = B.ORGN_CODE
ORDER BY A.RNUM
;


SELECT *
FROM
(
SELECT A.ORGN_CODE, A.SLMN_ACHV_AMT
        FROM TB_MIMAN007 A
        WHERE A.STDD_YM BETWEEN '201901' AND '201903'
        AND   A.TAGT_ACHV_DVCD = '31'
        AND   A.INSR_CMPN_CODE = '00'
        AND   A.ORGN_BUSS_DVCD = '10'
        AND   A.INSR_ITEM_DVCD = '0100'   
        AND   A.EIS_ITEM_CODE  = '100101' 
        AND   A.ONSF_ACHV_YN ='Y'
) A LEFT OUTER JOIN TB_UVORG004 B ON A.ORGN_CODE = B.ORGN_CODE
WHERE ORGN_DVCD <> '4'
;

===================================================
기관코드 사용 쿼리예시

SELECT A.L3_NAME, A.L3_CODE
           , A.L4_RANK, A.L4_NAME, A.L4_CODE  AS ORGN_CODE

      ,A.SLMN_ACHV_AMT          AS SLMN_ACHV_AMT
      ,A.BOJANGWOLCHO           AS BOJANGWOLCHO
      ,A.PER_CUR                AS PER_CUR
      ,A.BJWOLCHO_AVG           AS BJWOLCHO_AVG
      ,A.L6_CNT                 AS L6_CNT
      ,A.ORG_CNT                AS ORG_CNT
      ,A.TOT_SUM   AS TOT_SUM
      ,B.TOT AS TOT1
      ,C.TOT AS TOT2
	  ,D.SLMN_ACHV_AMT AS SLMN_ACHV_AMT
	  ,D.BOJANGWOLCHO AS BOJANGWOLCHO
	  ,D.BJWOLCHO_AVG AS BJWOLCHO_AVG
	  ,D.PER_CUR AS PER_CUR
	  ,D.PER_QUT AS PER_QUT
      , (1 + 
	   (CASE WHEN C.TOT = 0 THEN 0
            WHEN B.TOT > C.TOT THEN CASE WHEN B.TOT >= 1950 THEN 0.05
                                         ELSE 0
                                    END
            WHEN B.TOT < C.TOT THEN CASE WHEN B.TOT < 1950 THEN -0.05
                                         ELSE 0
                                    END
            ELSE 0 END ) 
	  + (CASE WHEN D.PER_CUR < 90 AND D.PER_QUT < 0 THEN -0.1 ELSE 0 END)
	   ) AS RATE
      ,TRUNC((1 + 
	   (CASE WHEN C.TOT = 0 THEN 0
            WHEN B.TOT > C.TOT THEN CASE WHEN B.TOT >= 1950 THEN 0.05
                                         ELSE 0
                                    END
            WHEN B.TOT < C.TOT THEN CASE WHEN B.TOT < 1950 THEN -0.05
                                         ELSE 0
                                    END
            ELSE 0 END ) 
	  + (CASE WHEN D.PER_CUR < 90 AND D.PER_QUT < 0 THEN -0.1 ELSE 0 END))
		* A.TOT_SUM ,-3) AS rate22
FROM 
(   
	-- 조직별 예산
    with temp_slmn_achv_bj as
    (
        SELECT A.STDD_YM, B.L3_RANK,B.L3_CODE,B.L3_NAME,B.L4_CODE,B.L4_NAME, B.L4_RANK,B.L6_RANK,B.L6_CODE,B.L6_NAME,
               SUM(A.SLMN_ACHV_AMT) AS SLMN_ACHV_AMT
        FROM TB_MIMAN007 A, TB_UVORGVW3 B	--	조직별 경영정보/영업관리
        WHERE A.STDD_YM between TO_CHAR(ADD_MONTHS(SYSDATE, -2), 'YYYYMM')  and TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
        AND   A.TAGT_ACHV_DVCD = '31'
        AND   A.INSR_CMPN_CODE = '00'
        AND   A.ORGN_BUSS_DVCD = '10'
        AND   A.INSR_ITEM_DVCD = '0100'   
        AND   A.EIS_ITEM_CODE  = '100101' 
        AND   A.ONSF_ACHV_YN ='Y'
        AND   A.ORGN_CODE = B.ORGN_CODE
        AND   B.STDD_YM = A.STDD_YM
        AND   B.ORGN_STAT_DVSN <> 'X'	--	기관상태구분(존재,폐쇄)
        AND   B.ORGN_BUSS_TPDV = 'A2'	--	기관영업형태구분(개인,개인대리점,개인법인대리점,단체,단체대리점,TM대리점,방카슈랑스)
        AND   B.ORGN_SPQU_TPDV NOT IN ('37','50')	--	기관특성형태구분(직할영업,전속브랜치,제휴TM,전속일반대리점)
        AND   B.L4_SPQU_TPDV = '44'	--	L4특성형태구분
        GROUP BY  A.STDD_YM, B.L3_RANK,B.L3_CODE,B.L3_NAME,B.L4_CODE,B.L4_NAME,B.L4_RANK,B.L6_RANK,B.L6_CODE,B.L6_NAME
    ),
	 -- 년기준 개인설계사별신계약업적
     tb_bjwolcho_year as
    (SELECT L3_RANK, L3_CODE, L3_NAME
         ,L4_CODE,L4_NAME,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
       ,MIN(TOT_BJWOLCHO) ,MAX(TOT_BJWOLCHO) , TRUNC((SUM(TOT_BJWOLCHO)-MIN(TOT_BJWOLCHO)-MAX(TOT_BJWOLCHO))/(COUNT(CLOG_YM)-2),0) AS BJWOLCHO_AVG 
    FROM 
    (
        SELECT CLOG_YM,L3_RANK, L3_CODE, L3_NAME 
               ,L4_CODE,L4_NAME,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
               ,SUM(TOT_BJWOLCHO)   AS TOT_BJWOLCHO        
        FROM
         (
              SELECT  /*+ INDEX(TB_SMPPE001 TB_SMPPE001_PK) */
                      C.CLOG_YM,
                      L3_RANK, L3_CODE, L3_NAME,
                      L4_RANK, L4_CODE, L4_NAME,
                      L6_RANK, L6_CODE, L6_NAME,
                      --C.LP_PRNO,
                      SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
                FROM  TB_SMPPE053 B, TB_SMPAC003 C, TB_UVORGVW3 D	--	설계사_인사축소, 개인설계사별신계약업적
               WHERE  B.CLOG_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  B.INCB_DVSN     <> 'C'
                 AND  B.LP_TYPE_DVCD   = 'P'
                 AND  c.LP_PRNO        = b.LP_PRNO
                 AND  c.CLOG_YM BETWEEN '201810' AND '201812' 
                 AND  D.ORGN_CODE      = B.OFFC_CODE
                 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_STAT_DVSN = ' '
                 AND  D.ORGN_ORGN_TPDV = 'E1'	--	기관기관형태구분
                 AND  D.ORGN_BUSS_TPDV = 'A2'	--	기관영업형태구분
                 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')		--	기관특성형태구분
               --AND  D.ORGN_CODE = '13915'
               GROUP BY C.CLOG_YM,L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME , L6_RANK, L6_CODE, L6_NAME--, c.LP_PRNO
               UNION ALL
              SELECT  C.CLOG_YM,
                      L3_RANK, L3_CODE, L3_NAME,
                      L4_RANK, L4_CODE, L4_NAME,
                      L6_RANK, L6_CODE, L6_NAME,
                      --LP_PRNO ,
                      SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
                FROM  TB_SMOPE011 B, TB_SMPAC003 C, TB_UVORGVW3 D	--	내근사원이력, 개인설계사별신계약업적
               WHERE  B.OBJT_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 and  C.LP_PRNO        = B.EMPL_NO
                 AND  c.CLOG_YM BETWEEN '201810' AND '201812'
                 AND  D.ORGN_CODE      = C.OFFC_CODE
                 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_STAT_DVSN = ' '
        --         AND  D.ORGN_ORGN_TPDV = 'E1'
                 AND  D.ORGN_BUSS_TPDV = 'A2'
                 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')
               --AND D.ORGN_CODE = '13915'
               GROUP BY C.CLOG_YM, L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME, L6_RANK, L6_CODE, L6_NAME--, LP_PRNO
        )
         GROUP BY CLOG_YM,L3_RANK, L3_CODE, L3_NAME
           ,L4_NAME,L4_CODE,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
        )
        WHERE 1=1 
        GROUP BY L3_RANK, L3_CODE, L3_NAME
          ,L4_NAME,L4_CODE,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
    )
	-- 월기준 개인설계사별신계약업적
    , tb_bjwolcho_month as
    (
        SELECT CLOG_YM, L3_RANK, L3_CODE, L3_NAME,L4_CODE,L4_NAME,L4_RANK,L6_RANK,L6_CODE,L6_NAME
               ,SUM(TOT_BJWOLCHO) AS BOJANGWOLCHO
         FROM
         (
              SELECT  /*+ INDEX(TB_SMPPE001 TB_SMPPE001_PK) */
                      C.CLOG_YM,
                      L3_RANK, L3_CODE, L3_NAME,
                      L4_RANK, L4_CODE, L4_NAME,
                      L6_RANK, L6_CODE, L6_NAME,
                      C.LP_PRNO,
                      SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
                FROM  TB_SMPPE001 B, TB_SMPAC003 C, TB_UVORGVW3 D
               WHERE  B.CLOG_YM        =  c.CLOG_YM--TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  B.INCB_DVSN     <> 'C'
                 AND  NOT (B.INCB_DVSN = 'R' AND FIRE_RESN_CODE IN ('E','8'))
                 AND  B.LP_TYPE_DVCD   = 'P'
                 AND  c.LP_PRNO        = b.LP_PRNO
                 AND  c.CLOG_YM  BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -2), 'YYYYMM') AND TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_CODE      = B.OFFC_CODE
                 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_STAT_DVSN = ' '
                 AND  D.ORGN_ORGN_TPDV = 'E1'
                 AND  D.ORGN_BUSS_TPDV = 'A2'
                 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')
               --AND  D.ORGN_CODE = '06548'
               GROUP BY C.CLOG_YM,L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME , L6_RANK, L6_CODE, L6_NAME, c.LP_PRNO
               UNION ALL
              SELECT  C.CLOG_YM,
                      L3_RANK, L3_CODE, L3_NAME,
                      L4_RANK, L4_CODE, L4_NAME,
                      L6_RANK, L6_CODE, L6_NAME,
                      LP_PRNO ,
                      SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
                FROM  TB_SMOPE011 B, TB_SMPAC003 C, TB_UVORGVW3 D
               WHERE  B.OBJT_YM        = c.CLOG_YM--TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 and  C.LP_PRNO        = B.EMPL_NO
                 and  C.CLOG_YM  BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -2), 'YYYYMM') AND TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_CODE      = C.OFFC_CODE
                 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_STAT_DVSN = ' '
                 --AND  D.ORGN_ORGN_TPDV = 'E1'
                 AND  D.ORGN_BUSS_TPDV = 'A2'
                 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')
               --AND D.ORGN_CODE = '06548'
               GROUP BY C.CLOG_YM, L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME, L6_RANK, L6_CODE, L6_NAME, LP_PRNO
        )
         GROUP BY CLOG_YM, L3_RANK, L3_CODE, L3_NAME,L4_NAME,L4_CODE,L4_RANK,L6_RANK,L6_CODE,L6_NAME
    )
	
    SELECT L3_RANK, L3_CODE, L3_NAME
           , L4_RANK, L4_NAME, L4_CODE 
         , SLMN_ACHV_AMT
         , BOJANGWOLCHO
         , PER_CUR
         , BJWOLCHO_AVG
         , L6_CNT_OR
         , ORG_CNT
		 , L6_CNT
         , CASE WHEN (PER_CUR >= 120) THEN L6_CNT * 1000000
                WHEN (PER_CUR >= 110) THEN L6_CNT * 700000
				WHEN (PER_CUR >= 100)  OR (ORG_CNT >= 0)      THEN L6_CNT * 500000
                ELSE 0 
           END 
           AS TOT_SUM
    FROM
    (
        SELECT A.L3_RANK, A.L3_CODE, A.L3_NAME
               ,A.L4_RANK, A.L4_NAME, A.L4_CODE 
              ,A.SLMN_ACHV_AMT
              ,B.BOJANGWOLCHO
              ,TRUNC(B.BOJANGWOLCHO/ A.SLMN_ACHV_AMT * 100) AS PER_CUR
              ,C.BJWOLCHO_AVG
              ,D.L6_CNT_OR
              ,TRUNC(B.BOJANGWOLCHO - C.BJWOLCHO_AVG ) AS ORG_CNT
			  ,D.L6_CNT
        FROM
        (
            -- ??????????? ???
            SELECT L3_RANK, L3_CODE, L3_NAME
                 , L4_RANK, L4_NAME, L4_CODE 
				 , SUM(SLMN_ACHV_AMT) AS SLMN_ACHV_AMT
            FROM temp_slmn_achv_bj
            WHERE 1=1
            AND STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') 
            GROUP BY L3_RANK, L3_CODE, L3_NAME
                 , L4_RANK, L4_NAME, L4_CODE 
        ) A,
        (
            -- ??????? ???
            SELECT L3_RANK, L3_CODE, L3_NAME
                 , L4_RANK, L4_NAME, L4_CODE 
				 ,TRUNC(SUM(BOJANGWOLCHO)) AS BOJANGWOLCHO  
            FROM tb_bjwolcho_month
            WHERE 1=1
            AND CLOG_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
            GROUP BY L3_RANK, L3_CODE, L3_NAME
                 , L4_RANK, L4_NAME, L4_CODE 
        ) B, 
        (
            -- 4?б? ????
            SELECT L3_RANK, L3_CODE, L3_NAME
                 , L4_RANK, L4_NAME, L4_CODE 
				 , TRUNC(SUM(BJWOLCHO_AVG)) AS BJWOLCHO_AVG
            FROM tb_bjwolcho_year
            WHERE 1=1
            GROUP BY L3_RANK, L3_CODE, L3_NAME
                 , L4_RANK, L4_NAME, L4_CODE 
        ) C, 
        (
            -- ????????
            SELECT L3_RANK, L3_NAME, L3_CODE
                 , L4_RANK, L4_NAME, L4_CODE 
                , SUM(CASE WHEN ORGN_SPQU_TPDV NOT IN ('49','54') THEN 1 
                            ELSE CASE WHEN SUBSTR(ORGN_CRTN_DATE,1,6) between TO_CHAR(ADD_MONTHS(SYSDATE, -13), 'YYYYMM') and TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') THEN 0
                                      WHEN SUBSTR(ORGN_CRTN_DATE,1,6) between TO_CHAR(ADD_MONTHS(SYSDATE, -25), 'YYYYMM') and TO_CHAR(ADD_MONTHS(SYSDATE, -13), 'YYYYMM') THEN 0.5
                                      ELSE 1
                                 END
                       END) AS L6_CNT_OR -- ???? ???? ?????? ????? ????..... 
                , SUM(1) AS L6_CNT
            FROM TB_UVORGVW3
            WHERE 1=1
            AND STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
            AND ORGN_ORGN_TPDV IN ('E1','E4')
            AND ORGN_BUSS_TPDV = 'A2'
            AND ORGN_STAT_DVSN = ' '
            AND ORGN_SPQU_TPDV NOT IN ('53','50','60','61','62','66') 
            GROUP BY L3_RANK, L3_NAME, L3_CODE
                 , L4_RANK, L4_NAME, L4_CODE
        ) D
        WHERE 1=1
        AND A.L4_CODE = B.L4_CODE
        AND A.L4_CODE = C.L4_CODE
        AND A.L4_CODE = D.L4_CODE
    )
) A,
(
    SELECT C.L3_RANK, C.L3_CODE, C.L3_NAME
          ,C.L4_RANK, C.L4_CODE, C.L4_NAME
--          ,C.L6_RANK, C.L6_NAME, C.L6_CODE
          ,CASE WHEN SUM(A2) = 0 THEN 0
                ELSE TRUNC(SUM(D2)/SUM(A2)*100,1) 
           END AS A02,
           CASE WHEN SUM(A3) = 0 THEN 0
                ELSE TRUNC(SUM(D3)/SUM(A3)*100,1) 
           END AS A03,
           CASE WHEN SUM(A4) = 0 THEN 0
                ELSE TRUNC(SUM(D4)/SUM(A4)*100,1) 
           END AS A04,
           CASE WHEN SUM(A5) = 0 THEN 0
                ELSE TRUNC(SUM(D5)/SUM(A5)*100,1) 
           END AS A05,
           CASE WHEN SUM(A6) = 0 THEN 0
                ELSE TRUNC(SUM(D6)/SUM(A6)*100,1) 
           END AS A06,
           CASE WHEN SUM(A7) = 0 THEN 0
                ELSE TRUNC(SUM(D7)/SUM(A7)*100,1) 
           END AS A07,
           CASE WHEN SUM(A8) = 0 THEN 0
                ELSE TRUNC(SUM(D8)/SUM(A8)*100,1) 
           END AS A08,
           CASE WHEN SUM(A9) = 0 THEN 0
                ELSE TRUNC(SUM(D9)/SUM(A9)*100,1) 
           END AS A09,
           CASE WHEN SUM(A10) = 0 THEN 0
                ELSE TRUNC(SUM(D10)/SUM(A10)*100,1) 
           END AS A10,
           CASE WHEN SUM(A11) = 0 THEN 0
                ELSE TRUNC(SUM(D11)/SUM(A11)*100,1) 
           END AS A11,
           CASE WHEN SUM(A12) = 0 THEN 0
                ELSE TRUNC(SUM(D12)/SUM(A12)*100,1) 
           END AS A12,
           CASE WHEN SUM(A13) = 0 THEN 0
                ELSE TRUNC(SUM(D13)/SUM(A13)*100,1) 
           END AS A13,
           CASE WHEN SUM(A14) = 0 THEN 0
                ELSE TRUNC(SUM(D14)/SUM(A14)*100,1) 
           END AS A14,
           CASE WHEN SUM(A15) = 0 THEN 0
                ELSE TRUNC(SUM(D15)/SUM(A15)*100,1) 
           END AS A15,
           CASE WHEN SUM(A16) = 0 THEN 0
                ELSE TRUNC(SUM(D16)/SUM(A16)*100,1) 
           END AS A16,
           CASE WHEN SUM(A17) = 0 THEN 0
                ELSE TRUNC(SUM(D17)/SUM(A17)*100,1) 
           END AS A17,
           CASE WHEN SUM(A18) = 0 THEN 0
                ELSE TRUNC(SUM(D18)/SUM(A18)*100,1) 
           END AS A18,
           CASE WHEN SUM(A19) = 0 THEN 0
                ELSE TRUNC(SUM(D19)/SUM(A19)*100,1) 
           END AS A19,
           CASE WHEN SUM(A20) = 0 THEN 0
                ELSE TRUNC(SUM(D20)/SUM(A20)*100,1) 
           END AS A20,
           CASE WHEN SUM(A21) = 0 THEN 0
                ELSE TRUNC(SUM(D21)/SUM(A21)*100,1) 
           END AS A21,
           CASE WHEN SUM(A22) = 0 THEN 0
                ELSE TRUNC(SUM(D22)/SUM(A22)*100,1) 
           END AS A22,
           CASE WHEN SUM(A23) = 0 THEN 0
                ELSE TRUNC(SUM(D23)/SUM(A23)*100,1) 
           END AS A23,
           CASE WHEN SUM(A24) = 0 THEN 0
                ELSE TRUNC(SUM(D24)/SUM(A24)*100,1) 
           END AS A24,
           CASE WHEN SUM(A25) = 0 THEN 0
                ELSE TRUNC(SUM(D25)/SUM(A25)*100,1) 
           END AS A25,
           
           CASE WHEN SUM(A2) = 0 THEN 0 ELSE TRUNC(SUM(D2)/SUM(A2)*100,1) END 
           + 
           CASE WHEN SUM(A3) = 0 THEN 0 ELSE TRUNC(SUM(D3)/SUM(A3)*100,1) END
           + 
           CASE WHEN SUM(A4) = 0 THEN 0 ELSE TRUNC(SUM(D4)/SUM(A4)*100,1) END
           + 
           CASE WHEN SUM(A5) = 0 THEN 0 ELSE TRUNC(SUM(D5)/SUM(A5)*100,1) END
           + 
           CASE WHEN SUM(A6) = 0 THEN 0 ELSE TRUNC(SUM(D6)/SUM(A6)*100,1) END
           + 
           CASE WHEN SUM(A7) = 0 THEN 0 ELSE TRUNC(SUM(D7)/SUM(A7)*100,1) END
           + 
           CASE WHEN SUM(A8) = 0 THEN 0 ELSE TRUNC(SUM(D8)/SUM(A8)*100,1) END
           + 
           CASE WHEN SUM(A9) = 0 THEN 0 ELSE TRUNC(SUM(D9)/SUM(A9)*100,1) END
           + 
           CASE WHEN SUM(A10) = 0 THEN 0 ELSE TRUNC(SUM(D10)/SUM(A10)*100,1) END
           + 
           CASE WHEN SUM(A11) = 0 THEN 0 ELSE TRUNC(SUM(D11)/SUM(A11)*100,1) END
           + 
           CASE WHEN SUM(A12) = 0 THEN 0 ELSE TRUNC(SUM(D12)/SUM(A12)*100,1) END
           + 
           CASE WHEN SUM(A13) = 0 THEN 0 ELSE TRUNC(SUM(D13)/SUM(A13)*100,1) END
           + 
           CASE WHEN SUM(A14) = 0 THEN 0 ELSE TRUNC(SUM(D14)/SUM(A14)*100,1) END
           + 
           CASE WHEN SUM(A15) = 0 THEN 0 ELSE TRUNC(SUM(D15)/SUM(A15)*100,1) END
           + 
           CASE WHEN SUM(A16) = 0 THEN 0 ELSE TRUNC(SUM(D16)/SUM(A16)*100,1) END
           + 
           CASE WHEN SUM(A17) = 0 THEN 0 ELSE TRUNC(SUM(D17)/SUM(A17)*100,1) END
           + 
           CASE WHEN SUM(A18) = 0 THEN 0 ELSE TRUNC(SUM(D18)/SUM(A18)*100,1) END
           + 
           CASE WHEN SUM(A19) = 0 THEN 0 ELSE TRUNC(SUM(D19)/SUM(A19)*100,1) END
           + 
           CASE WHEN SUM(A20) = 0 THEN 0 ELSE TRUNC(SUM(D20)/SUM(A20)*100,1) END
           + 
           CASE WHEN SUM(A21) = 0 THEN 0 ELSE TRUNC(SUM(D21)/SUM(A21)*100,1) END 
           + 
           CASE WHEN SUM(A22) = 0 THEN 0 ELSE TRUNC(SUM(D22)/SUM(A22)*100,1) END 
           + 
           CASE WHEN SUM(A23) = 0 THEN 0 ELSE TRUNC(SUM(D23)/SUM(A23)*100,1) END
           + 
           CASE WHEN SUM(A24) = 0 THEN 0 ELSE TRUNC(SUM(D24)/SUM(A24)*100,1) END
           + 
           CASE WHEN SUM(A25) = 0 THEN 0 ELSE TRUNC(SUM(D25)/SUM(A25)*100,1) END
           AS TOT
    FROM 
    (
        SELECT A.ORGN_CODE,
              SUM(CASE WHEN A.ORDR = '2'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A2,
              SUM(CASE WHEN A.ORDR = '3'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A3,
              SUM(CASE WHEN A.ORDR = '4'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A4,
              SUM(CASE WHEN A.ORDR = '5'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A5,
              SUM(CASE WHEN A.ORDR = '6'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A6,
              SUM(CASE WHEN A.ORDR = '7'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A7,
              SUM(CASE WHEN A.ORDR = '8'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A8,
              SUM(CASE WHEN A.ORDR = '9'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A9,
              SUM(CASE WHEN A.ORDR = '10'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A10,
              SUM(CASE WHEN A.ORDR = '11'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A11,
              SUM(CASE WHEN A.ORDR = '12'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A12,
              SUM(CASE WHEN A.ORDR = '13'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A13,
              SUM(CASE WHEN A.ORDR = '14'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A14,
              SUM(CASE WHEN A.ORDR = '15'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A15,
              SUM(CASE WHEN A.ORDR = '16'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A16,
              SUM(CASE WHEN A.ORDR = '17'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A17,
              SUM(CASE WHEN A.ORDR = '18'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A18,
              SUM(CASE WHEN A.ORDR = '19'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A19,
              SUM(CASE WHEN A.ORDR = '20'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A20,
              SUM(CASE WHEN A.ORDR = '21'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A21,
              SUM(CASE WHEN A.ORDR = '22'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A22,
              SUM(CASE WHEN A.ORDR = '23'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A23,
              SUM(CASE WHEN A.ORDR = '24'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A24,
              SUM(CASE WHEN A.ORDR = '25'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A25,
              
              SUM(CASE WHEN A.ORDR = '2'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D2,
              SUM(CASE WHEN A.ORDR = '3'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D3,
              SUM(CASE WHEN A.ORDR = '4'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D4,
              SUM(CASE WHEN A.ORDR = '5'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D5,
              SUM(CASE WHEN A.ORDR = '6'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D6,
              SUM(CASE WHEN A.ORDR = '7'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D7,
              SUM(CASE WHEN A.ORDR = '8'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D8,
              SUM(CASE WHEN A.ORDR = '9'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D9,
              SUM(CASE WHEN A.ORDR = '10'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D10,
              SUM(CASE WHEN A.ORDR = '11'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D11,
              SUM(CASE WHEN A.ORDR = '12'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D12,
              SUM(CASE WHEN A.ORDR = '13'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D13,
              SUM(CASE WHEN A.ORDR = '14'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D14,
              SUM(CASE WHEN A.ORDR = '15'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D15,
              SUM(CASE WHEN A.ORDR = '16'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D16,
              SUM(CASE WHEN A.ORDR = '17'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D17,
              SUM(CASE WHEN A.ORDR = '18'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D18,
              SUM(CASE WHEN A.ORDR = '19'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D19,
              SUM(CASE WHEN A.ORDR = '20'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D20,
              SUM(CASE WHEN A.ORDR = '21'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D21,
              SUM(CASE WHEN A.ORDR = '22'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D22,
              SUM(CASE WHEN A.ORDR = '23'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D23,
              SUM(CASE WHEN A.ORDR = '24'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D24,
              SUM(CASE WHEN A.ORDR = '25'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D25
        FROM TB_SMOAC029 A,
        (
            SELECT ORGN_CODE,
                  CASE WHEN ORGN_ORGN_TPDV='B1' AND ORGN_BUSS_TPDV='A2' THEN 1
                       WHEN ORGN_ORGN_TPDV IN ('C1','E1') AND ORGN_BUSS_TPDV='A2'
                            AND ORGN_DVCD='4' AND ORGN_SPQU_TPDV NOT IN ('21','38','18','45') THEN 1
                       WHEN ORGN_ORGN_TPDV IN ('E1','E4') AND ORGN_BUSS_TPDV='A2'
                            AND ORGN_DVCD='6'
                            AND ORGN_SPQU_TPDV NOT IN ('21','18','42','43','54') THEN 1
                       WHEN ORGN_BUSS_TPDV='A2' AND ORGN_DVCD='6'
                            AND ORGN_SPQU_TPDV IN ('21', '42', '43','54') THEN 1
                       ELSE 0 END AB
             FROM TB_UVORGVW3
            WHERE STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
            GROUP BY ORGN_CODE, ORGN_ORGN_TPDV,ORGN_BUSS_TPDV, ORGN_DVCD, ORGN_SPQU_TPDV
        ) B
        WHERE A.ORGN_CODE = B.ORGN_CODE
          AND A.CLOG_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -2), 'YYYYMM')
          AND A.ORDR BETWEEN '2' AND '25'
          AND A.RELV_GRAC_DVCD = '2'
          AND A.NFAC_CARR_DVCD = '1'
          AND B.AB = '1'
          AND A.ORGN_SLSB_DVSN = '1'
        GROUP BY A.ORGN_CODE
    ) A,
    (
        SELECT L3_RANK, L3_CODE, L3_NAME
              ,L4_RANK, L4_CODE, L4_NAME
              ,L6_RANK, L6_NAME, L6_CODE
        FROM TB_UVORGVW3
        WHERE 1=1
        AND STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
        AND ORGN_BUSS_TPDV = 'A2'
        AND ORGN_STAT_DVSN <> 'X'
        AND ORGN_ORGN_TPDV = 'B1'
    ) B, TB_UVORGVW3 C
    WHERE 1=1
    AND C.STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
    AND A.ORGN_CODE = C.ORGN_CODE
    AND C.L3_CODE = B.L3_CODE
    GROUP BY C.L3_RANK, C.L3_CODE, C.L3_NAME
            ,C.L4_RANK, C.L4_CODE, C.L4_NAME
--            ,C.L6_RANK, C.L6_CODE, C.L6_NAME
) B,
(
    SELECT C.L3_RANK, C.L3_CODE, C.L3_NAME
          ,C.L4_RANK, C.L4_CODE, C.L4_NAME
--          ,C.L6_RANK, C.L6_NAME, C.L6_CODE
          ,CASE WHEN SUM(A2) = 0 THEN 0
                ELSE TRUNC(SUM(D2)/SUM(A2)*100,1) 
           END AS A02,
           CASE WHEN SUM(A3) = 0 THEN 0
                ELSE TRUNC(SUM(D3)/SUM(A3)*100,1) 
           END AS A03,
           CASE WHEN SUM(A4) = 0 THEN 0
                ELSE TRUNC(SUM(D4)/SUM(A4)*100,1) 
           END AS A04,
           CASE WHEN SUM(A5) = 0 THEN 0
                ELSE TRUNC(SUM(D5)/SUM(A5)*100,1) 
           END AS A05,
           CASE WHEN SUM(A6) = 0 THEN 0
                ELSE TRUNC(SUM(D6)/SUM(A6)*100,1) 
           END AS A06,
           CASE WHEN SUM(A7) = 0 THEN 0
                ELSE TRUNC(SUM(D7)/SUM(A7)*100,1) 
           END AS A07,
           CASE WHEN SUM(A8) = 0 THEN 0
                ELSE TRUNC(SUM(D8)/SUM(A8)*100,1) 
           END AS A08,
           CASE WHEN SUM(A9) = 0 THEN 0
                ELSE TRUNC(SUM(D9)/SUM(A9)*100,1) 
           END AS A09,
           CASE WHEN SUM(A10) = 0 THEN 0
                ELSE TRUNC(SUM(D10)/SUM(A10)*100,1) 
           END AS A10,
           CASE WHEN SUM(A11) = 0 THEN 0
                ELSE TRUNC(SUM(D11)/SUM(A11)*100,1) 
           END AS A11,
           CASE WHEN SUM(A12) = 0 THEN 0
                ELSE TRUNC(SUM(D12)/SUM(A12)*100,1) 
           END AS A12,
           CASE WHEN SUM(A13) = 0 THEN 0
                ELSE TRUNC(SUM(D13)/SUM(A13)*100,1) 
           END AS A13,
           CASE WHEN SUM(A14) = 0 THEN 0
                ELSE TRUNC(SUM(D14)/SUM(A14)*100,1) 
           END AS A14,
           CASE WHEN SUM(A15) = 0 THEN 0
                ELSE TRUNC(SUM(D15)/SUM(A15)*100,1) 
           END AS A15,
           CASE WHEN SUM(A16) = 0 THEN 0
                ELSE TRUNC(SUM(D16)/SUM(A16)*100,1) 
           END AS A16,
           CASE WHEN SUM(A17) = 0 THEN 0
                ELSE TRUNC(SUM(D17)/SUM(A17)*100,1) 
           END AS A17,
           CASE WHEN SUM(A18) = 0 THEN 0
                ELSE TRUNC(SUM(D18)/SUM(A18)*100,1) 
           END AS A18,
           CASE WHEN SUM(A19) = 0 THEN 0
                ELSE TRUNC(SUM(D19)/SUM(A19)*100,1) 
           END AS A19,
           CASE WHEN SUM(A20) = 0 THEN 0
                ELSE TRUNC(SUM(D20)/SUM(A20)*100,1) 
           END AS A20,
           CASE WHEN SUM(A21) = 0 THEN 0
                ELSE TRUNC(SUM(D21)/SUM(A21)*100,1) 
           END AS A21,
           CASE WHEN SUM(A22) = 0 THEN 0
                ELSE TRUNC(SUM(D22)/SUM(A22)*100,1) 
           END AS A22,
           CASE WHEN SUM(A23) = 0 THEN 0
                ELSE TRUNC(SUM(D23)/SUM(A23)*100,1) 
           END AS A23,
           CASE WHEN SUM(A24) = 0 THEN 0
                ELSE TRUNC(SUM(D24)/SUM(A24)*100,1) 
           END AS A24,
           CASE WHEN SUM(A25) = 0 THEN 0
                ELSE TRUNC(SUM(D25)/SUM(A25)*100,1) 
           END AS A25,
           
           CASE WHEN SUM(A2) = 0 THEN 0 ELSE TRUNC(SUM(D2)/SUM(A2)*100,1) END 
           + 
           CASE WHEN SUM(A3) = 0 THEN 0 ELSE TRUNC(SUM(D3)/SUM(A3)*100,1) END
           + 
           CASE WHEN SUM(A4) = 0 THEN 0 ELSE TRUNC(SUM(D4)/SUM(A4)*100,1) END
           + 
           CASE WHEN SUM(A5) = 0 THEN 0 ELSE TRUNC(SUM(D5)/SUM(A5)*100,1) END
           + 
           CASE WHEN SUM(A6) = 0 THEN 0 ELSE TRUNC(SUM(D6)/SUM(A6)*100,1) END
           + 
           CASE WHEN SUM(A7) = 0 THEN 0 ELSE TRUNC(SUM(D7)/SUM(A7)*100,1) END
           + 
           CASE WHEN SUM(A8) = 0 THEN 0 ELSE TRUNC(SUM(D8)/SUM(A8)*100,1) END
           + 
           CASE WHEN SUM(A9) = 0 THEN 0 ELSE TRUNC(SUM(D9)/SUM(A9)*100,1) END
           + 
           CASE WHEN SUM(A10) = 0 THEN 0 ELSE TRUNC(SUM(D10)/SUM(A10)*100,1) END
           + 
           CASE WHEN SUM(A11) = 0 THEN 0 ELSE TRUNC(SUM(D11)/SUM(A11)*100,1) END
           + 
           CASE WHEN SUM(A12) = 0 THEN 0 ELSE TRUNC(SUM(D12)/SUM(A12)*100,1) END
           + 
           CASE WHEN SUM(A13) = 0 THEN 0 ELSE TRUNC(SUM(D13)/SUM(A13)*100,1) END
           + 
           CASE WHEN SUM(A14) = 0 THEN 0 ELSE TRUNC(SUM(D14)/SUM(A14)*100,1) END
           + 
           CASE WHEN SUM(A15) = 0 THEN 0 ELSE TRUNC(SUM(D15)/SUM(A15)*100,1) END
           + 
           CASE WHEN SUM(A16) = 0 THEN 0 ELSE TRUNC(SUM(D16)/SUM(A16)*100,1) END
           + 
           CASE WHEN SUM(A17) = 0 THEN 0 ELSE TRUNC(SUM(D17)/SUM(A17)*100,1) END
           + 
           CASE WHEN SUM(A18) = 0 THEN 0 ELSE TRUNC(SUM(D18)/SUM(A18)*100,1) END
           + 
           CASE WHEN SUM(A19) = 0 THEN 0 ELSE TRUNC(SUM(D19)/SUM(A19)*100,1) END
           + 
           CASE WHEN SUM(A20) = 0 THEN 0 ELSE TRUNC(SUM(D20)/SUM(A20)*100,1) END
           + 
           CASE WHEN SUM(A21) = 0 THEN 0 ELSE TRUNC(SUM(D21)/SUM(A21)*100,1) END 
           + 
           CASE WHEN SUM(A22) = 0 THEN 0 ELSE TRUNC(SUM(D22)/SUM(A22)*100,1) END 
           + 
           CASE WHEN SUM(A23) = 0 THEN 0 ELSE TRUNC(SUM(D23)/SUM(A23)*100,1) END
           + 
           CASE WHEN SUM(A24) = 0 THEN 0 ELSE TRUNC(SUM(D24)/SUM(A24)*100,1) END
           + 
           CASE WHEN SUM(A25) = 0 THEN 0 ELSE TRUNC(SUM(D25)/SUM(A25)*100,1) END
           AS TOT
    FROM 
    (
        SELECT A.ORGN_CODE,
              SUM(CASE WHEN A.ORDR = '2'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A2,
              SUM(CASE WHEN A.ORDR = '3'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A3,
              SUM(CASE WHEN A.ORDR = '4'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A4,
              SUM(CASE WHEN A.ORDR = '5'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A5,
              SUM(CASE WHEN A.ORDR = '6'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A6,
              SUM(CASE WHEN A.ORDR = '7'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A7,
              SUM(CASE WHEN A.ORDR = '8'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A8,
              SUM(CASE WHEN A.ORDR = '9'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A9,
              SUM(CASE WHEN A.ORDR = '10'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A10,
              SUM(CASE WHEN A.ORDR = '11'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A11,
              SUM(CASE WHEN A.ORDR = '12'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A12,
              SUM(CASE WHEN A.ORDR = '13'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A13,
              SUM(CASE WHEN A.ORDR = '14'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A14,
              SUM(CASE WHEN A.ORDR = '15'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A15,
              SUM(CASE WHEN A.ORDR = '16'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A16,
              SUM(CASE WHEN A.ORDR = '17'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A17,
              SUM(CASE WHEN A.ORDR = '18'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A18,
              SUM(CASE WHEN A.ORDR = '19'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A19,
              SUM(CASE WHEN A.ORDR = '20'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A20,
              SUM(CASE WHEN A.ORDR = '21'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A21,
              SUM(CASE WHEN A.ORDR = '22'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A22,
              SUM(CASE WHEN A.ORDR = '23'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A23,
              SUM(CASE WHEN A.ORDR = '24'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A24,
              SUM(CASE WHEN A.ORDR = '25'  THEN A.CLLT_CNTT_SAMT ELSE 0 END) A25,
              
              SUM(CASE WHEN A.ORDR = '2'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D2,
              SUM(CASE WHEN A.ORDR = '3'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D3,
              SUM(CASE WHEN A.ORDR = '4'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D4,
              SUM(CASE WHEN A.ORDR = '5'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D5,
              SUM(CASE WHEN A.ORDR = '6'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D6,
              SUM(CASE WHEN A.ORDR = '7'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D7,
              SUM(CASE WHEN A.ORDR = '8'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D8,
              SUM(CASE WHEN A.ORDR = '9'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D9,
              SUM(CASE WHEN A.ORDR = '10'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D10,
              SUM(CASE WHEN A.ORDR = '11'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D11,
              SUM(CASE WHEN A.ORDR = '12'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D12,
              SUM(CASE WHEN A.ORDR = '13'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D13,
              SUM(CASE WHEN A.ORDR = '14'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D14,
              SUM(CASE WHEN A.ORDR = '15'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D15,
              SUM(CASE WHEN A.ORDR = '16'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D16,
              SUM(CASE WHEN A.ORDR = '17'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D17,
              SUM(CASE WHEN A.ORDR = '18'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D18,
              SUM(CASE WHEN A.ORDR = '19'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D19,
              SUM(CASE WHEN A.ORDR = '20'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D20,
              SUM(CASE WHEN A.ORDR = '21'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D21,
              SUM(CASE WHEN A.ORDR = '22'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D22,
              SUM(CASE WHEN A.ORDR = '23'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D23,
              SUM(CASE WHEN A.ORDR = '24'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D24,
              SUM(CASE WHEN A.ORDR = '25'  THEN A.MNTN_CNTT_SAMT ELSE 0 END) D25
        FROM TB_SMOAC029 A,
        (
            SELECT ORGN_CODE,
                  CASE WHEN ORGN_ORGN_TPDV='B1' AND ORGN_BUSS_TPDV='A2' THEN 1
                       WHEN ORGN_ORGN_TPDV IN ('C1','E1') AND ORGN_BUSS_TPDV='A2'
                            AND ORGN_DVCD='4' AND ORGN_SPQU_TPDV NOT IN ('21','38','18','45') THEN 1
                       WHEN ORGN_ORGN_TPDV IN ('E1','E4') AND ORGN_BUSS_TPDV='A2'
                            AND ORGN_DVCD='6'
                            AND ORGN_SPQU_TPDV NOT IN ('21','18','42','43','54') THEN 1
                       WHEN ORGN_BUSS_TPDV='A2' AND ORGN_DVCD='6'
                            AND ORGN_SPQU_TPDV IN ('21', '42', '43','54') THEN 1
                       ELSE 0 END AB
             FROM TB_UVORGVW3
            WHERE STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
            GROUP BY ORGN_CODE, ORGN_ORGN_TPDV,ORGN_BUSS_TPDV, ORGN_DVCD, ORGN_SPQU_TPDV
        ) B
        WHERE A.ORGN_CODE = B.ORGN_CODE
          AND A.CLOG_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -3), 'YYYYMM')
          AND A.ORDR BETWEEN '2' AND '25'
          AND A.RELV_GRAC_DVCD = '2'
          AND A.NFAC_CARR_DVCD = '1'
          AND B.AB = '1'
          AND A.ORGN_SLSB_DVSN = '1'
        GROUP BY A.ORGN_CODE
    ) A,
    (
        SELECT L3_RANK, L3_CODE, L3_NAME
              ,L4_RANK, L4_CODE, L4_NAME
              ,L6_RANK, L6_NAME, L6_CODE
        FROM TB_UVORGVW3
        WHERE 1=1
        AND STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
        AND ORGN_BUSS_TPDV = 'A2'
        AND ORGN_STAT_DVSN <> 'X'
        AND ORGN_ORGN_TPDV = 'B1'
    ) B, TB_UVORGVW3 C
    WHERE 1=1
    AND C.STDD_YM = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
    AND A.ORGN_CODE = C.ORGN_CODE
    AND C.L3_CODE = B.L3_CODE
    GROUP BY C.L3_RANK, C.L3_CODE, C.L3_NAME
            ,C.L4_RANK, C.L4_CODE, C.L4_NAME
--            ,C.L6_RANK, C.L6_CODE, C.L6_NAME
) C
,(
	SELECT A.L3_RANK, A.L3_CODE, A.L3_NAME,A.L4_CODE,A.L4_NAME, A.L4_RANK--,A.L6_RANK,A.L6_CODE,A.L6_NAME
		  ,A.SLMN_ACHV_AMT AS SLMN_ACHV_AMT
		  ,B.BOJANGWOLCHO
		  ,TRUNC(B.BOJANGWOLCHO/ A.SLMN_ACHV_AMT * 100) AS PER_CUR
		  ,C.BJWOLCHO_AVG
		  ,B.BOJANGWOLCHO - C.BJWOLCHO_AVG AS PER_QUT
		  
		  
	FROM (
			
			SELECT B.L3_RANK,B.L3_CODE,B.L3_NAME,B.L4_CODE,B.L4_NAME, B.L4_RANK--,B.L6_RANK,B.L6_CODE,B.L6_NAME
				  ,SUM(A.SLMN_ACHV_AMT) AS SLMN_ACHV_AMT
			FROM TB_MIMAN007 A, TB_UVORGVW3 B
			WHERE A.STDD_YM =TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
			AND   A.TAGT_ACHV_DVCD = '31'
			AND   A.INSR_CMPN_CODE = '00'
			AND   A.ORGN_BUSS_DVCD = '10'
			AND   A.INSR_ITEM_DVCD = '0100'   -- ???强
			AND   A.EIS_ITEM_CODE  = '100101' -- ????
			AND   A.ONSF_ACHV_YN ='Y'
			AND   A.ORGN_CODE = B.ORGN_CODE
			AND   B.STDD_YM =TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
			AND   B.ORGN_STAT_DVSN <> 'X'
			AND   B.ORGN_BUSS_TPDV = 'A2'
			AND   B.ORGN_SPQU_TPDV NOT IN ('37','50')
			AND   B.L4_SPQU_TPDV = '44'
			GROUP BY B.L3_RANK,B.L3_CODE,B.L3_NAME,B.L4_CODE,B.L4_NAME,B.L4_RANK--,B.L6_RANK,B.L6_CODE,B.L6_NAME
	)A
	,(-- ??????????
		SELECT CLOG_YM, L3_RANK, L3_CODE, L3_NAME,L4_CODE,L4_NAME,L4_RANK
--		,L6_RANK,L6_CODE,L6_NAME
				   ,SUM(TOT_BJWOLCHO) AS BOJANGWOLCHO
			 FROM
			 (
				  SELECT  /*+ INDEX(TB_SMPPE001 TB_SMPPE001_PK) */
						  C.CLOG_YM,
						  L3_RANK, L3_CODE, L3_NAME,
						  L4_RANK, L4_CODE, L4_NAME,
						  L6_RANK, L6_CODE, L6_NAME,
						  C.LP_PRNO,
						  SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
					FROM  TB_SMPPE001 B, TB_SMPAC003 C, TB_UVORGVW3 D
				   WHERE  B.CLOG_YM        =  c.CLOG_YM--TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
					 AND  B.INCB_DVSN     <> 'C'
					 AND  NOT (B.INCB_DVSN = 'R' AND FIRE_RESN_CODE IN ('E','8'))
					 AND  B.LP_TYPE_DVCD   = 'P'
					 AND  c.LP_PRNO        = b.LP_PRNO
					 AND  c.CLOG_YM  BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') AND TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
					 AND  D.ORGN_CODE      = B.OFFC_CODE
					 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
					 AND  D.ORGN_STAT_DVSN = ' '
					 AND  D.ORGN_ORGN_TPDV = 'E1'
					 AND  D.ORGN_BUSS_TPDV = 'A2'
					 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')
				   --AND  D.ORGN_CODE = '06548'
				   GROUP BY C.CLOG_YM,L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME , L6_RANK, L6_CODE, L6_NAME, c.LP_PRNO
				   UNION ALL
				  SELECT  C.CLOG_YM,
						  L3_RANK, L3_CODE, L3_NAME,
						  L4_RANK, L4_CODE, L4_NAME,
						  L6_RANK, L6_CODE, L6_NAME,
						  LP_PRNO ,
						  SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
					FROM  TB_SMOPE011 B, TB_SMPAC003 C, TB_UVORGVW3 D
				   WHERE  B.OBJT_YM        = c.CLOG_YM--TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
					 and  C.LP_PRNO        = B.EMPL_NO
					 and  C.CLOG_YM  BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') AND TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
					 AND  D.ORGN_CODE      = C.OFFC_CODE
					 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
					 AND  D.ORGN_STAT_DVSN = ' '
					 --AND  D.ORGN_ORGN_TPDV = 'E1'
					 AND  D.ORGN_BUSS_TPDV = 'A2'
					 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')
				   --AND D.ORGN_CODE = '06548'
				   GROUP BY C.CLOG_YM, L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME, L6_RANK, L6_CODE, L6_NAME, LP_PRNO
			)
			 GROUP BY CLOG_YM, L3_RANK, L3_CODE, L3_NAME,L4_NAME,L4_CODE,L4_RANK
--			 ,L6_RANK,L6_CODE,L6_NAME
	)B
	,(
	SELECT L3_RANK, L3_CODE, L3_NAME
         ,L4_CODE,L4_NAME,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
       ,MIN(TOT_BJWOLCHO) ,MAX(TOT_BJWOLCHO) , TRUNC(SUM(TOT_BJWOLCHO)/COUNT(CLOG_YM),0) AS BJWOLCHO_AVG 
    FROM 
    (
        SELECT CLOG_YM,L3_RANK, L3_CODE, L3_NAME 
               ,L4_CODE,L4_NAME,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
               ,SUM(TOT_BJWOLCHO)   AS TOT_BJWOLCHO        
        FROM
         (
              SELECT  /*+ INDEX(TB_SMPPE001 TB_SMPPE001_PK) */
                      C.CLOG_YM,
                      L3_RANK, L3_CODE, L3_NAME,
                      L4_RANK, L4_CODE, L4_NAME,
                      L6_RANK, L6_CODE, L6_NAME,
                      --C.LP_PRNO,
                      SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
                FROM  TB_SMPPE053 B, TB_SMPAC003 C, TB_UVORGVW3 D
               WHERE  B.CLOG_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  B.INCB_DVSN     <> 'C'
                 AND  B.LP_TYPE_DVCD   = 'P'
                 AND  c.LP_PRNO        = b.LP_PRNO
                 AND  c.CLOG_YM BETWEEN '201810' AND '201812'   --4?б?(10~12??)
                 AND  D.ORGN_CODE      = B.OFFC_CODE
                 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_STAT_DVSN = ' '
                 AND  D.ORGN_ORGN_TPDV = 'E1'
                 AND  D.ORGN_BUSS_TPDV = 'A2'
                 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')
               --AND  D.ORGN_CODE = '13915'
               GROUP BY C.CLOG_YM,L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME , L6_RANK, L6_CODE, L6_NAME--, c.LP_PRNO
               UNION ALL
              SELECT  C.CLOG_YM,
                      L3_RANK, L3_CODE, L3_NAME,
                      L4_RANK, L4_CODE, L4_NAME,
                      L6_RANK, L6_CODE, L6_NAME,
                      --LP_PRNO ,
                      SUM(GURT_TOT_MFRT) AS TOT_BJWOLCHO
                FROM  TB_SMOPE011 B, TB_SMPAC003 C, TB_UVORGVW3 D
               WHERE  B.OBJT_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 and  C.LP_PRNO        = B.EMPL_NO
                 AND  c.CLOG_YM BETWEEN '201810' AND '201812'   --4?б?(10~12??)
                 AND  D.ORGN_CODE      = C.OFFC_CODE
                 AND  D.STDD_YM        = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
                 AND  D.ORGN_STAT_DVSN = ' '
        --         AND  D.ORGN_ORGN_TPDV = 'E1'
                 AND  D.ORGN_BUSS_TPDV = 'A2'
                 AND  D.ORGN_SPQU_TPDV NOT IN ('23','37','50','66')
               --AND D.ORGN_CODE = '13915'
               GROUP BY C.CLOG_YM, L3_RANK, L3_CODE, L3_NAME , L4_RANK, L4_CODE, L4_NAME, L6_RANK, L6_CODE, L6_NAME--, LP_PRNO
        )
         GROUP BY CLOG_YM,L3_RANK, L3_CODE, L3_NAME
           ,L4_NAME,L4_CODE,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
        )
        WHERE 1=1 
        GROUP BY L3_RANK, L3_CODE, L3_NAME
          ,L4_NAME,L4_CODE,L4_RANK--,L6_RANK,L6_CODE,L6_NAME
    )C
	WHERE 1=1
	  AND A.L4_CODE= B.L4_CODE
	  AND A.L4_CODE= C.L4_CODE(+)
  ) D
WHERE 1=1
AND A.L4_CODE = B.L4_CODE
AND B.L4_CODE = C.L4_CODE
AND A.L4_CODE = D.L4_CODE(+)
ORDER BY B.L3_RANK, B.L4_RANK

====================================================
선분이력 쪼개기
-- 가입상품기준으로 M건의 가입상품피보험자 데이터 존재 체크

SELECT /*+ PARALLEL(A,8) PARALLEL(B,8) USE_HASH(A,B) */

       B.POLY_NO, B.JOIN_GOOD_NO

--  , A.INSU_NO, A.JNGD_INSU_HSNO, COUNT(*)

     , B.JNGD_HSNO, A.INSU_NO, COUNT(*)

FROM   TB_ISCJGINS A           -- 가입상품피보험자

     , TB_ISAPLCJG B           -- 가입상품

WHERE  1=1

AND    A.POLY_NO       = B.POLY_NO

AND    A.JOIN_GOOD_NO  = B.JOIN_GOOD_NO

AND    A.END_DATE     >= B.STRT_DATE

AND    A.STRT_DATE    <= B.END_DATE

AND    B.LAST_CHNG_DTTM  >= TO_DATE('20190101', 'YYYYMMDD')

GROUP BY B.POLY_NO, B.JOIN_GOOD_NO

     , B.JNGD_HSNO, A.INSU_NO

HAVING COUNT(*) > 1

; 



SELECT	*
FROM	TB_ISAPLCJG		A		-- 	가입상품
	,	TB_ISCJGINS		B		--	가입상품피보험자
WHERE		
;



SELECT	*
FROM    TB_ISAPLCJG		-- 	가입상품
WHERE 	JNGD_HSNO > 1
;


SELECT	*
FROM    TB_ISCJGINS		-- 	가입상품피보험자
WHERE 	JNGD_INSU_HSNO > 1
;




SELECT	*
FROM	
(
SELECT	*
FROM    TB_ISAPLCJG		-- 	가입상품
WHERE 	JNGD_HSNO > 1
) A
,
(
SELECT	*
FROM    TB_ISCJGINS		-- 	가입상품피보험자
WHERE 	JNGD_INSU_HSNO > 1
) B
WHERE   A.POLY_NO = B.POLY_NO
AND     A.JOIN_GOOD_NO = B.JOIN_GOOD_NO
;


/*
100011660	1	2
			2	2
100013490	1	2
100023720	3	2
100029410	1	3
*/

SELECT	*
FROM    TB_ISAPLCJG		-- 	가입상품
WHERE 	POLY_NO = '100011660'
AND		JOIN_GOOD_NO = 1
--AND 	JNGD_HSNO	= 2	
;

SELECT	*
FROM    TB_ISCJGINS		-- 	가입상품피보험자
WHERE 	POLY_NO = '100011660'
AND		JOIN_GOOD_NO = 1
;


SELECT	A.POLY_NO, A.JOIN_GOOD_NO, A.JNGD_HSNO, A.STRT_DATE, A.END_DATE, B.POLY_NO, B.JOIN_GOOD_NO, B.INSU_NO, B.JNGD_INSU_HSNO, B.STRT_DATE, B.END_DATE
FROM	TB_ISAPLCJG		A
	,	TB_ISCJGINS		B
WHERE	A.POLY_NO		=	B.POLY_NO
AND		A.JOIN_GOOD_NO	=	B.JOIN_GOOD_NO
AND		A.POLY_NO = '100011660'
AND		A.JOIN_GOOD_NO = 1
AND     B.INSU_NO = 2
;



SELECT	DISTINCT A.POLY_NO, A.JOIN_GOOD_NO, B.INSU_NO, A.STRT_DATE, A.END_DATE, B.STRT_DATE, B.END_DATE
FROM	(
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 1 JNGD_HSNO, '20030610' STRT_DATE, '20031110' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 JNGD_HSNO, '20031111' STRT_DATE, '20111023' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'10200308100011660' POLY_NO, 1 JOIN_GOOD_NO, 3 JNGD_HSNO, '20111024' STRT_DATE, '99991231' END_DATE
			FROM	DUAL
		) A
	,	(
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 1 JNGD_INSU_HSNO, '20030610' STRT_DATE, '20030710' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 2 JNGD_INSU_HSNO, '20030711' STRT_DATE, '20030810' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 3 JNGD_INSU_HSNO, '20030811' STRT_DATE, '20040110' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 4 JNGD_INSU_HSNO, '20040111' STRT_DATE, '20111023' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 5 JNGD_INSU_HSNO, '20111024' STRT_DATE, '99991231' END_DATE
			FROM	DUAL
		) B
WHERE	A.POLY_NO		=	B.POLY_NO
AND		A.JOIN_GOOD_NO	=	B.JOIN_GOOD_NO
;




SELECT	*
FROM	(
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 1 JNGD_HSNO, '20030610' STRT_DATE, '20031110' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 JNGD_HSNO, '20031111' STRT_DATE, '20111023' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 3 JNGD_HSNO, '20111024' STRT_DATE, '99991231' END_DATE
			FROM	DUAL
		) A
	,	(
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 1 JNGD_INSU_HSNO, '20030610' STRT_DATE, '20030710' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 2 JNGD_INSU_HSNO, '20030711' STRT_DATE, '20030810' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 3 JNGD_INSU_HSNO, '20030811' STRT_DATE, '20040110' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 4 JNGD_INSU_HSNO, '20040111' STRT_DATE, '20111023' END_DATE
			FROM	DUAL
			UNION ALL
			SELECT	'100011660' POLY_NO, 1 JOIN_GOOD_NO, 2 INSU_NO, 5 JNGD_INSU_HSNO, '20111024' STRT_DATE, '99991231' END_DATE
			FROM	DUAL
		) B
WHERE	A.POLY_NO		=	B.POLY_NO
AND		A.JOIN_GOOD_NO	=	B.JOIN_GOOD_NO
AND     A.STRT_DATE BETWEEN B.STRT_DATE AND B.END_DATE
;
==================================================================================================
이력관련 컬럼조사
SELECT	*
FROM 	ALL_COL_COMMENTS	A
WHERE   A.TABLE_NAME LIKE 'TB_%'
AND     A.TABLE_NAME NOT LIKE 'TB_TMP%'
--AND		( A.COMMENTS LIKE '%일자' OR A.COMMENTS LIKE '%일시' )
AND		A.COMMENTS LIKE '%일자'
AND     ( A.COMMENTS LIKE '%유효%' OR A.COMMENTS LIKE '%시작%' OR A.COMMENTS LIKE '%종료%' OR A.COMMENTS LIKE '%이력%' )
ORDER BY A.TABLE_NAME
;




SELECT	DISTINCT OWNER, TABLE_NAME
FROM 	ALL_COL_COMMENTS	A
WHERE   A.TABLE_NAME LIKE 'TB_%'
AND     A.TABLE_NAME NOT LIKE 'TB_TMP%'
--AND		( A.COMMENTS LIKE '%일자' OR A.COMMENTS LIKE '%일시' )
AND		A.COMMENTS LIKE '%일자'
AND     ( A.COMMENTS LIKE '%유효%' OR A.COMMENTS LIKE '%시작%' OR A.COMMENTS LIKE '%종료%' OR A.COMMENTS LIKE '%이력%' )
--AND     A.TABLE_NAME LIKE 'TB_NCAP%'
;


SELECT	*--DISTINCT OWNER, TABLE_NAME
FROM 	ALL_COL_COMMENTS	A
WHERE   A.TABLE_NAME LIKE 'TB_%'
AND     A.TABLE_NAME NOT LIKE 'TB_TMP%'
AND		( A.COMMENTS LIKE '%일시' )
AND     ( A.COMMENTS LIKE '%유효%' OR A.COMMENTS LIKE '%시작%' OR A.COMMENTS LIKE '%종료%' OR A.COMMENTS LIKE '%이력%' )
--AND     A.TABLE_NAME LIKE 'TB_NCAP%'

;


SELECT	chbf_orgn_code, chaf_orgn_code, COUNT(*)
FROM    TB_UVORG003
GROUP BY chbf_orgn_code, chaf_orgn_code
HAVING COUNT(*) > 1
;

SELECT	adtd_orgn_code, audt_strt_date, COUNT(*)
FROM    TB_AUADM001
GROUP BY adtd_orgn_code, audt_strt_date  
HAVING COUNT(*) > 1
;


select	*
FROM    TB_AUADM001	--	TB_ACSLPC01, TB_AUADM001,TB_AUADM005, TB_CCIRKSHS, TB_CCIRKSPT, TB_CPAPLSDO, TB_CPPMIRTP
;


select	*
FROM    TB_AUADM005	--	TB_ACSLPC01, TB_AUADM001,TB_AUADM005, TB_CCIRKSHS, TB_CCIRKSPT, TB_CPAPLSDO, TB_CPPMIRTP
;



select	*
FROM    TB_CCIRKSPT	--	TB_ACSLPC01, TB_AUADM001,TB_AUADM005, TB_CCIRKSHS, TB_CCIRKSPT, TB_CPAPLSDO, TB_CPPMIRTP
;


select	*
FROM    TB_CPPMIRTP	--	TB_ACSLPC01, TB_AUADM001,TB_AUADM005, TB_CCIRKSHS, TB_CCIRKSPT, TB_CPAPLSDO, TB_CPPMIRTP
;


select	*
FROM    TB_CPPMIRTP	--	TB_ACSLPC01, TB_AUADM001,TB_AUADM005, TB_CCIRKSHS, TB_CCIRKSPT, TB_CPAPLSDO, TB_CPPMIRTP
WHERE   poly_no = '141383204'
--AND     join_good_no = '4'
--AND     good_code_dtal = '018'
;



select	*
FROM    ALL_CONS_COLUMNS
WHERE   TABLE_name = 'TB_AUADM001'
--AND     constraint_name = 'TB_AUADM001_PK'
;


select	NTLT_KIND_CODE, DATA_SQNO, COUNT(*)
FROM    TB_ISRPT041
GROUP BY NTLT_KIND_CODE, DATA_SQNO
HAVING COUNT(*) > 1
;


select	*
FROM    TB_ISRPT041
WHERE   NTLT_KIND_CODE = 'CP01'
AND     DATA_SQNO = 10
;

우편번호2
============================================================================================
as is chk
SELECT	*
FROM    ALL_TAB_COLUMNS		T
WHERE	T.TABLE_NAME LIKE 'TB_%'
AND 	LENGTH(T.TABLE_NAME) = 11
AND 	LENGTH(T.TABLE_NAME) - LENGTH(REPLACE(T.TABLE_NAME, '_','')) = 1
AND 	(T.OWNER LIKE '%ADMIN' OR T.OWNER = 'PIDUSR' OR T.OWNER = 'KCESSUSR')
AND     T.TABLE_NAME = 'TB_ISAPLINS'  --TB_ISCJGINS
--		POLY_NO, INSU_NO, INSU_HIST_NO
;

(
SELECT	B.OWNER, B.TABLE_NAME, B.COLUMN_NAME, B.POSITION
FROM    ALL_TAB_COLUMNS		T
	,	ALL_CONSTRAINTS		A
	,	ALL_CONS_COLUMNS	B	
WHERE	T.TABLE_NAME LIKE 'TB_%'
AND 	LENGTH(T.TABLE_NAME) = 11
AND 	LENGTH(T.TABLE_NAME) - LENGTH(REPLACE(T.TABLE_NAME, '_','')) = 1
AND 	(T.OWNER LIKE '%ADMIN' OR T.OWNER = 'PIDUSR' OR T.OWNER = 'KCESSUSR')
AND     T.OWNER = B.OWNER
AND		T.TABLE_NAME = B.TABLE_NAME
AND     T.COLUMN_NAME = B.COLUMN_NAME
AND		A.OWNER = B.OWNER
AND		A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
AND		A.CONSTRAINT_TYPE = 'P'
AND		A.TABLE_NAME = 'TB_ISAPLINS'  --TB_ISCJGINS
)
===========================================================
-- 식별 관계의 RI 후보 추출
SELECT	LOW_OWNER, LOW_TAB_NAME, LOW_TAB_COL_NAME, HIGH_OWNER, HIGH_TAB_NAME, HIGH_TAB_COL_NAME
FROM	(
			SELECT	A.OWNER				HIGH_OWNER
				, 	A.TABLE_NAME		HIGH_TAB_NAME
				, 	A.COLUMN_NAME		HIGH_TAB_COL_NAME
				, 	A.CNT				HIGH_PK_CNT
				,	B.OWNER				LOW_OWNER
				, 	B.TABLE_NAME		LOW_TAB_NAME
				, 	B.COLUMN_NAME		LOW_TAB_COL_NAME
				, 	B.CNT				LOW_PK_CNT
				,	COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) JOIN_CNT
			FROM	(
						SELECT	B.OWNER, B.TABLE_NAME, B.COLUMN_NAME, B.POSITION, COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) CNT
						FROM    ALL_CONSTRAINTS		A
							,	ALL_CONS_COLUMNS	B	
						WHERE	A.TABLE_NAME LIKE 'TB_%'
						AND 	LENGTH(A.TABLE_NAME) = 11
						AND 	LENGTH(A.TABLE_NAME) - LENGTH(REPLACE(A.TABLE_NAME, '_','')) = 1
						AND 	(A.OWNER LIKE '%ADMIN' OR A.OWNER = 'PIDUSR' OR A.OWNER = 'KCESSUSR')
						AND		A.OWNER = B.OWNER
						AND		A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
						AND		A.CONSTRAINT_TYPE = 'P'
						--AND		A.TABLE_NAME = 'TB_ISAPLINS'
						AND     B.COLUMN_NAME NOT LIKE '%HIST_NO'
						--AND		A.TABLE_NAME LIKE 'TB_IS%'
					) A,
					(
						SELECT	B.OWNER, B.TABLE_NAME, B.COLUMN_NAME, B.POSITION, COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) CNT
						FROM    ALL_CONSTRAINTS		A
							,	ALL_CONS_COLUMNS	B	
						WHERE	A.TABLE_NAME LIKE 'TB_%'
						AND 	LENGTH(A.TABLE_NAME) = 11
						AND 	LENGTH(A.TABLE_NAME) - LENGTH(REPLACE(A.TABLE_NAME, '_','')) = 1
						AND 	(A.OWNER LIKE '%ADMIN' OR A.OWNER = 'PIDUSR' OR A.OWNER = 'KCESSUSR')
						AND		A.OWNER = B.OWNER
						AND		A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
						AND		A.CONSTRAINT_TYPE = 'P'
						--AND		A.TABLE_NAME = 'TB_ISINSSPT'
						AND     B.COLUMN_NAME NOT LIKE '%HIST_NO'
						--AND		A.TABLE_NAME LIKE 'TB_IS%'
					) B
			WHERE	SUBSTR(A.TABLE_NAME,4,2) = SUBSTR(B.TABLE_NAME,4,2)
			AND     A.COLUMN_NAME LIKE '%'||B.COLUMN_NAME
			AND 	A.TABLE_NAME <> B.TABLE_NAME
			AND		B.CNT >= A.CNT											--	하위테이블의 PK 개수가 같거나 커야함
		) A
WHERE	A.HIGH_PK_CNT = JOIN_CNT											--	상위테이블의 PK 개수와 하위테이블와의 조인 칼럼개수가 같아야 함
ORDER BY LOW_OWNER, LOW_TAB_NAME, LOW_TAB_COL_NAME, HIGH_OWNER, HIGH_TAB_NAME, HIGH_TAB_COL_NAME
;



-- 식별 관계의 RI 후보 추출 다운로드 쿼리
WITH T AS
(
SELECT	ROWNUM RNUM, LOW_OWNER, LOW_TAB_NAME, LOW_TAB_COL_NAME, HIGH_OWNER, HIGH_TAB_NAME, HIGH_TAB_COL_NAME,
		LOW_OWNER||','||LOW_TAB_NAME||','||LOW_TAB_COL_NAME||','||HIGH_OWNER||','||HIGH_TAB_NAME||','||HIGH_TAB_COL_NAME AS STR
FROM	(
			SELECT	A.OWNER				HIGH_OWNER
				, 	A.TABLE_NAME		HIGH_TAB_NAME
				, 	A.COLUMN_NAME		HIGH_TAB_COL_NAME
				, 	A.CNT				HIGH_PK_CNT
				,	B.OWNER				LOW_OWNER
				, 	B.TABLE_NAME		LOW_TAB_NAME
				, 	B.COLUMN_NAME		LOW_TAB_COL_NAME
				, 	B.CNT				LOW_PK_CNT
				,	COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) JOIN_CNT
			FROM	(
						SELECT	B.OWNER, B.TABLE_NAME, B.COLUMN_NAME, B.POSITION, COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) CNT
						FROM    ALL_CONSTRAINTS		A
							,	ALL_CONS_COLUMNS	B	
						WHERE	A.TABLE_NAME LIKE 'TB_%'
						AND 	LENGTH(A.TABLE_NAME) = 11
						AND 	LENGTH(A.TABLE_NAME) - LENGTH(REPLACE(A.TABLE_NAME, '_','')) = 1
						AND 	(A.OWNER LIKE '%ADMIN' OR A.OWNER = 'PIDUSR' OR A.OWNER = 'KCESSUSR')
						AND		A.OWNER = B.OWNER
						AND		A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
						AND		A.CONSTRAINT_TYPE = 'P'
						--AND		A.TABLE_NAME = 'TB_ISAPLINS'
						AND     B.COLUMN_NAME NOT LIKE '%HIST_NO'
						--AND		A.TABLE_NAME LIKE 'TB_IS%'
					) A,
					(
						SELECT	B.OWNER, B.TABLE_NAME, B.COLUMN_NAME, B.POSITION, COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) CNT
						FROM    ALL_CONSTRAINTS		A
							,	ALL_CONS_COLUMNS	B	
						WHERE	A.TABLE_NAME LIKE 'TB_%'
						AND 	LENGTH(A.TABLE_NAME) = 11
						AND 	LENGTH(A.TABLE_NAME) - LENGTH(REPLACE(A.TABLE_NAME, '_','')) = 1
						AND 	(A.OWNER LIKE '%ADMIN' OR A.OWNER = 'PIDUSR' OR A.OWNER = 'KCESSUSR')
						AND		A.OWNER = B.OWNER
						AND		A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
						AND		A.CONSTRAINT_TYPE = 'P'
						--AND		A.TABLE_NAME = 'TB_ISINSSPT'
						AND     B.COLUMN_NAME NOT LIKE '%HIST_NO'
						--AND		A.TABLE_NAME LIKE 'TB_IS%'
					) B
			WHERE	SUBSTR(A.TABLE_NAME,4,2) = SUBSTR(B.TABLE_NAME,4,2)
			AND     A.COLUMN_NAME LIKE '%'||B.COLUMN_NAME
			AND 	A.TABLE_NAME <> B.TABLE_NAME
			AND		B.CNT >= A.CNT										--	하위테이블의 PK 개수가 같거나 커야함
		) A
WHERE	A.HIGH_PK_CNT = JOIN_CNT										--	상위테이블의 PK 개수와 하위테이블와의 조인 칼럼개수가 같아야 함
ORDER BY LOW_OWNER, LOW_TAB_NAME, LOW_TAB_COL_NAME, HIGH_OWNER, HIGH_TAB_NAME, HIGH_TAB_COL_NAME
)
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 0 AND RNUM <= 50
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 50 AND RNUM <= 100
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 100 AND RNUM <= 150
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 150 AND RNUM <= 200
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 200 AND RNUM <= 250
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 250 AND RNUM <= 300
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 300 AND RNUM <= 350
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 350 AND RNUM <= 400
GROUP BY ''
UNION ALL
SELECT	LISTAGG(STR,CHR(10)) WITHIN GROUP (ORDER BY STR)
FROM	T
WHERE	RNUM > 400 AND RNUM <= 450
GROUP BY ''
;





-- 비식별 관계의 RI 후보 추출
SELECT	
		LOW_OWNER, LOW_TAB_NAME, LOW_TAB_COL_NAME, HIGH_OWNER, HIGH_TAB_NAME, HIGH_TAB_COL_NAME
FROM	(
			SELECT	/*+ LEADING(A) USE_HASH(A B) */
					A.OWNER				HIGH_OWNER
				, 	A.TABLE_NAME		HIGH_TAB_NAME
				, 	A.COLUMN_NAME		HIGH_TAB_COL_NAME
				, 	A.CNT				HIGH_PK_CNT
				,	B.OWNER				LOW_OWNER
				, 	B.TABLE_NAME		LOW_TAB_NAME
				, 	B.COLUMN_NAME		LOW_TAB_COL_NAME
				, 	B.CNT				LOW_PK_CNT
				,	COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) JOIN_CNT
			FROM	(
						SELECT	B.OWNER, B.TABLE_NAME, B.COLUMN_NAME, COUNT(*) OVER (PARTITION BY B.OWNER, B.TABLE_NAME) CNT
						FROM    ALL_CONSTRAINTS		A
							,	ALL_CONS_COLUMNS	B	
						WHERE	A.TABLE_NAME LIKE 'TB_%'
						AND 	LENGTH(A.TABLE_NAME) = 11
						AND 	LENGTH(A.TABLE_NAME) - LENGTH(REPLACE(A.TABLE_NAME, '_','')) = 1
						AND 	(A.OWNER LIKE '%ADMIN' OR A.OWNER = 'PIDUSR' OR A.OWNER = 'KCESSUSR')
						AND		A.OWNER = B.OWNER
						AND		A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
						AND		A.CONSTRAINT_TYPE = 'P'
						--AND		A.TABLE_NAME = 'TB_ISAPLINS'
						AND     B.COLUMN_NAME NOT LIKE '%HIST_NO'
						AND		A.TABLE_NAME LIKE 'TB_IS%'
					) A,
					(
						SELECT	A.OWNER, A.TABLE_NAME, A.COLUMN_NAME, COUNT(*) OVER (PARTITION BY A.OWNER, A.TABLE_NAME) CNT
						FROM    ALL_TAB_COLUMNS	A	
						WHERE	A.TABLE_NAME LIKE 'TB_%'
						AND 	LENGTH(A.TABLE_NAME) = 11
						AND 	LENGTH(A.TABLE_NAME) - LENGTH(REPLACE(A.TABLE_NAME, '_','')) = 1
						AND 	(A.OWNER LIKE '%ADMIN' OR A.OWNER = 'PIDUSR' OR A.OWNER = 'KCESSUSR')
						--AND		A.TABLE_NAME = 'TB_ISINSSPT'
						AND     A.COLUMN_NAME NOT LIKE '%HIST_NO'
						--AND		A.TABLE_NAME LIKE 'TB_IS%'
					) B
			WHERE	SUBSTR(A.TABLE_NAME,4,2) = SUBSTR(B.TABLE_NAME,4,2)
			AND     A.COLUMN_NAME LIKE '%'||B.COLUMN_NAME
			AND 	A.TABLE_NAME <> B.TABLE_NAME
			--AND		B.CNT >= A.CNT		--	하위테이블의 PK 개수가 같거나 커야함
		) A
WHERE	A.HIGH_PK_CNT = JOIN_CNT		--	상위테이블의 PK 개수와 하위테이블와의 조인 칼럼개수가 같아야 함
ORDER BY LOW_OWNER, LOW_TAB_NAME, LOW_TAB_COL_NAME, HIGH_OWNER, HIGH_TAB_NAME, HIGH_TAB_COL_NAME
;
==================================================================================================
mapr설계

SELECT	TABLE_NAME||TO_CHAR(LAST_ANALYZED,'YYYYMMDD')||'01'		CLAIM
	, 	LEVEL													SEQ
	,	CASE WHEN NUM_ROWS > 10000 THEN '1'
	         ELSE '2'
	    END		 												REC_CLS_CD
	, 	NUM_ROWS												TOT_AMT	
	,	NUM_ROWS - BLOCKS										SLRY_AMT
	,	BLOCKS													BI_SLRY_AMT	
	,	OWNER												HSPL_CD	
	,	LAST_ANALYZED - 1										ENTER_ST_DT	
	,   LAST_ANALYZED											ENTER_END_DT		
FROM    (
			SELECT	*
			FROM    ALL_TABLES
			WHERE   TABLE_NAME LIKE 'TB_%'
			AND     TABLE_NAME LIKE 'TB_CPACHIAP'
			AND		OWNER = 'CPADMIN'
		) A
CONNECT BY LEVEL <= 10
;





SELECT	A.CLAIM, A.SEQ, B.ITM_CD, A.TOT_AMT, A.SLRY_AMT, A.BI_SLRY_AMT
FROM	(
			SELECT	TABLE_NAME||TO_CHAR(LAST_ANALYZED,'YYYYMMDD')||'01'		CLAIM
				, 	LEVEL													SEQ
				,	CASE WHEN NUM_ROWS > 10000 THEN '1'
						 ELSE '2'
					END		 												REC_CLS_CD
				, 	NUM_ROWS												TOT_AMT	
				,	NUM_ROWS - BLOCKS										SLRY_AMT
				,	BLOCKS													BI_SLRY_AMT	
				,	OWNER												HSPL_CD	
				,	LAST_ANALYZED - 1										ENTER_ST_DT	
				,   LAST_ANALYZED											ENTER_END_DT	
				,   OWNER
				,	TABLE_NAME
			FROM    (
						SELECT	*
						FROM    ALL_TABLES
						WHERE   TABLE_NAME LIKE 'TB_%'
						AND     TABLE_NAME LIKE 'TB_CPACHIAP'
						AND		OWNER = 'CPADMIN'
					) A
			CONNECT BY LEVEL <= 3
		)	A
	,	(
			SELECT	OWNER, TABLE_NAME, COLUMN_NAME	ITM_CD
			FROM    ALL_TAB_COLUMNS
			WHERE   TABLE_NAME = 'ALL_TABLES'
			AND     COLUMN_ID BETWEEN 1 AND 5
		)	B
ORDER BY 1,2,3	
;




SELECT	*
FROM    ALL_TAB_COLUMNS
WHERE   TABLE_NAME = 'ALL_TABLES'
AND      COLUMN_ID BETWEEN 15 AND 20
;
========================================================
날짜 데이터 추출
SELECT	/*+ LEADING(A B C) */ A.OWNER, A.TABLE_NAME, A.COLUMN_NAME,  A.DATA_TYPE, A.DATA_LENGTH, A.DATA_PRECISION, B.A, C.COMMENTS
FROM    ALL_TAB_COLUMNS	A
	,	(
		SELECT 'ACCD' A FROM DUAL UNION ALL 
		SELECT 'ACDT' A FROM DUAL UNION ALL 
		SELECT 'AG55' A FROM DUAL UNION ALL 
		SELECT 'AG60' A FROM DUAL UNION ALL 
		SELECT 'AGDT' A FROM DUAL UNION ALL 
		SELECT 'APDT' A FROM DUAL UNION ALL 
		SELECT 'APED' A FROM DUAL UNION ALL 
		SELECT 'APSD' A FROM DUAL UNION ALL 
		SELECT 'ARDT' A FROM DUAL UNION ALL 
		SELECT 'ARES' A FROM DUAL UNION ALL 
		SELECT 'ASDT' A FROM DUAL UNION ALL 
		SELECT 'AVDT' A FROM DUAL UNION ALL 
		SELECT 'BGIN' A FROM DUAL UNION ALL 
		SELECT 'BIRT' A FROM DUAL UNION ALL 
		SELECT 'BRTH' A FROM DUAL UNION ALL 
		SELECT 'BSDT' A FROM DUAL UNION ALL 
		SELECT 'CADT' A FROM DUAL UNION ALL 
		SELECT 'CCDT' A FROM DUAL UNION ALL 
		SELECT 'CDTT' A FROM DUAL UNION ALL 
		SELECT 'CFDM' A FROM DUAL UNION ALL 
		SELECT 'CFDT' A FROM DUAL UNION ALL 
		SELECT 'CGDT' A FROM DUAL UNION ALL 
		SELECT 'CHAF' A FROM DUAL UNION ALL 
		SELECT 'CHDT' A FROM DUAL UNION ALL 
		SELECT 'CHFR' A FROM DUAL UNION ALL 
		SELECT 'CHMN' A FROM DUAL UNION ALL 
		SELECT 'CHTO' A FROM DUAL UNION ALL 
		SELECT 'CLD1' A FROM DUAL UNION ALL 
		SELECT 'CLD2' A FROM DUAL UNION ALL 
		SELECT 'CLDD' A FROM DUAL UNION ALL 
		SELECT 'CLDT' A FROM DUAL UNION ALL 
		SELECT 'CLPR' A FROM DUAL UNION ALL 
		SELECT 'CNDT' A FROM DUAL UNION ALL 
		SELECT 'CODT' A FROM DUAL UNION ALL 
		SELECT 'CPDT' A FROM DUAL UNION ALL 
		SELECT 'CRDT' A FROM DUAL UNION ALL 
		SELECT 'CRT' A FROM DUAL UNION ALL 
		SELECT 'CSDT' A FROM DUAL UNION ALL 
		SELECT 'CTDT' A FROM DUAL UNION ALL 
		SELECT 'CTOR' A FROM DUAL UNION ALL 
		SELECT 'CVDT' A FROM DUAL UNION ALL 
		SELECT 'DATE' A FROM DUAL UNION ALL 
		SELECT 'DAY' A FROM DUAL UNION ALL 
		SELECT 'DCDT' A FROM DUAL UNION ALL 
		SELECT 'DDAT' A FROM DUAL UNION ALL 
		SELECT 'DEAD' A FROM DUAL UNION ALL 
		SELECT 'DEDT' A FROM DUAL UNION ALL 
		SELECT 'DLDT' A FROM DUAL UNION ALL 
		SELECT 'DSDT' A FROM DUAL UNION ALL 
		SELECT 'DT' A FROM DUAL UNION ALL 
		SELECT 'DT1' A FROM DUAL UNION ALL 
		SELECT 'DT2' A FROM DUAL UNION ALL 
		SELECT 'DT3' A FROM DUAL UNION ALL 
		SELECT 'DTM4' A FROM DUAL UNION ALL 
		SELECT 'DTM5' A FROM DUAL UNION ALL 
		SELECT 'DTTM' A FROM DUAL UNION ALL 
		SELECT 'DUDY' A FROM DUAL UNION ALL 
		SELECT 'DVDT' A FROM DUAL UNION ALL 
		SELECT 'EDDT' A FROM DUAL UNION ALL 
		SELECT 'EDT1' A FROM DUAL UNION ALL 
		SELECT 'EDT2' A FROM DUAL UNION ALL 
		SELECT 'END' A FROM DUAL UNION ALL 
		SELECT 'ENDH' A FROM DUAL UNION ALL 
		SELECT 'ENDT' A FROM DUAL UNION ALL 
		SELECT 'EPDT' A FROM DUAL UNION ALL 
		SELECT 'ERDT' A FROM DUAL UNION ALL 
		SELECT 'ETDT' A FROM DUAL UNION ALL 
		SELECT 'EVDT' A FROM DUAL UNION ALL 
		SELECT 'EVSD' A FROM DUAL UNION ALL 
		SELECT 'EXDT' A FROM DUAL UNION ALL 
		SELECT 'FL1' A FROM DUAL UNION ALL 
		SELECT 'FOUR' A FROM DUAL UNION ALL 
		SELECT 'FRDT' A FROM DUAL UNION ALL 
		SELECT 'FSDT' A FROM DUAL UNION ALL 
		SELECT 'FXDT' A FROM DUAL UNION ALL 
		SELECT 'GRDT' A FROM DUAL UNION ALL 
		SELECT 'GTDT' A FROM DUAL UNION ALL 
		SELECT 'HIST' A FROM DUAL UNION ALL 
		SELECT 'HPDT' A FROM DUAL UNION ALL 
		SELECT 'IFDT' A FROM DUAL UNION ALL 
		SELECT 'IMDS' A FROM DUAL UNION ALL 
		SELECT 'IPDT' A FROM DUAL UNION ALL 
		SELECT 'IPTM' A FROM DUAL UNION ALL 
		SELECT 'IQDT' A FROM DUAL UNION ALL 
		SELECT 'IRDT' A FROM DUAL UNION ALL 
		SELECT 'JGDT' A FROM DUAL UNION ALL 
		SELECT 'JNDT' A FROM DUAL UNION ALL 
		SELECT 'LCHD' A FROM DUAL UNION ALL 
		SELECT 'LKDD' A FROM DUAL UNION ALL 
		SELECT 'LKDT' A FROM DUAL UNION ALL 
		SELECT 'LNDT' A FROM DUAL UNION ALL 
		SELECT 'LOGN' A FROM DUAL UNION ALL 
		SELECT 'LPDT' A FROM DUAL UNION ALL 
		SELECT 'LSDT' A FROM DUAL UNION ALL 
		SELECT 'LSTD' A FROM DUAL UNION ALL 
		SELECT 'MDAY' A FROM DUAL UNION ALL 
		SELECT 'MINS' A FROM DUAL UNION ALL 
		SELECT 'NEW' A FROM DUAL UNION ALL 
		SELECT 'NTDT' A FROM DUAL UNION ALL 
		SELECT 'OBST' A FROM DUAL UNION ALL 
		SELECT 'OCDT' A FROM DUAL UNION ALL 
		SELECT 'OCDY' A FROM DUAL UNION ALL 
		SELECT 'OFDT' A FROM DUAL UNION ALL 
		SELECT 'OFMN' A FROM DUAL UNION ALL 
		SELECT 'OLD' A FROM DUAL UNION ALL 
		SELECT 'ONCE' A FROM DUAL UNION ALL 
		SELECT 'ONE' A FROM DUAL UNION ALL 
		SELECT 'OPDA' A FROM DUAL UNION ALL 
		SELECT 'ORDT' A FROM DUAL UNION ALL 
		SELECT 'ORSD' A FROM DUAL UNION ALL 
		SELECT 'PBDT' A FROM DUAL UNION ALL 
		SELECT 'PEDT' A FROM DUAL UNION ALL 
		SELECT 'PRDT' A FROM DUAL UNION ALL 
		SELECT 'PRES' A FROM DUAL UNION ALL 
		SELECT 'PRRM' A FROM DUAL UNION ALL 
		SELECT 'PSDT' A FROM DUAL UNION ALL 
		SELECT 'PSDY' A FROM DUAL UNION ALL 
		SELECT 'PYDT' A FROM DUAL UNION ALL 
		SELECT 'PYDY' A FROM DUAL UNION ALL 
		SELECT 'RCDT' A FROM DUAL UNION ALL 
		SELECT 'RDAT' A FROM DUAL UNION ALL 
		SELECT 'RDDT' A FROM DUAL UNION ALL 
		SELECT 'RECP' A FROM DUAL UNION ALL 
		SELECT 'RECV' A FROM DUAL UNION ALL 
		SELECT 'REDY' A FROM DUAL UNION ALL 
		SELECT 'REGD' A FROM DUAL UNION ALL 
		SELECT 'RGDT' A FROM DUAL UNION ALL 
		SELECT 'RKDT' A FROM DUAL UNION ALL 
		SELECT 'RLDT' A FROM DUAL UNION ALL 
		SELECT 'RMDT' A FROM DUAL UNION ALL 
		SELECT 'RODT' A FROM DUAL UNION ALL 
		SELECT 'RPDT' A FROM DUAL UNION ALL 
		SELECT 'RQDT' A FROM DUAL UNION ALL 
		SELECT 'RSDT' A FROM DUAL UNION ALL 
		SELECT 'RSVD' A FROM DUAL UNION ALL 
		SELECT 'RTDT' A FROM DUAL UNION ALL 
		SELECT 'RVDT' A FROM DUAL UNION ALL 
		SELECT 'RVDY' A FROM DUAL UNION ALL 
		SELECT 'SCND' A FROM DUAL UNION ALL 
		SELECT 'SDDT' A FROM DUAL UNION ALL 
		SELECT 'SDT1' A FROM DUAL UNION ALL 
		SELECT 'SDT2' A FROM DUAL UNION ALL 
		SELECT 'SLDD' A FROM DUAL UNION ALL 
		SELECT 'SLDT' A FROM DUAL UNION ALL 
		SELECT 'SNDT' A FROM DUAL UNION ALL 
		SELECT 'SRDT' A FROM DUAL UNION ALL 
		SELECT 'STDH' A FROM DUAL UNION ALL 
		SELECT 'STDT' A FROM DUAL UNION ALL 
		SELECT 'STDY' A FROM DUAL UNION ALL 
		SELECT 'STRT' A FROM DUAL UNION ALL 
		SELECT 'TEMP' A FROM DUAL UNION ALL 
		SELECT 'TFDT' A FROM DUAL UNION ALL 
		SELECT 'THRE' A FROM DUAL UNION ALL 
		SELECT 'TIME' A FROM DUAL UNION ALL 
		SELECT 'TMDT' A FROM DUAL UNION ALL 
		SELECT 'TRDT' A FROM DUAL UNION ALL 
		SELECT 'TSDT' A FROM DUAL UNION ALL 
		SELECT 'TWO' A FROM DUAL UNION ALL 
		SELECT 'VLDT' A FROM DUAL UNION ALL 
		SELECT 'WDAY' A FROM DUAL UNION ALL 
		SELECT 'WKSQ' A FROM DUAL UNION ALL 
		SELECT 'XCDT' A FROM DUAL UNION ALL 
		SELECT 'XPDT' A FROM DUAL UNION ALL 
		SELECT 'YEND' A FROM DUAL UNION ALL 
		SELECT 'YMD' A FROM DUAL
		)	B
	,	ALL_COL_COMMENTS C		
WHERE   A.COLUMN_NAME LIKE '%'||B.A
AND     A.OWNER = C.OWNER
AND     A.TABLE_NAME = C.TABLE_NAME
AND     A.COLUMN_NAME = C.COLUMN_NAME
AND     A.TABLE_NAME LIKE 'TB_%'
AND     A.TABLE_NAME NOT LIKE 'TB_TMP%'
;
===========================================================================
증권번호(POLY_NO)를 가지는 테이블,칼럼조사(20190508)

SELECT  A.OWNER, A.TABLE_NAME, B.COLUMN_NAME, B.DATA_TYPE, B.DATA_LENGTH, B.DATA_PRECISION, B.COLUMN_ID, A.STATUS, A.NUM_ROWS, A.LAST_ANALYZED, A.PARTITIONED, C.CONSTRAINT_NAME, C.CONSTRAINT_TYPE 
FROM    ALL_TABLES		A
	,   ALL_TAB_COLUMNS	B
	,   (
			SELECT  A.OWNER, A.CONSTRAINT_NAME, CONSTRAINT_TYPE, B.TABLE_NAME, B.COLUMN_NAME, B.POSITION
			FROM    ALL_CONSTRAINTS       A
					  ,          ALL_CONS_COLUMNS B
			WHERE   A.OWNER = B.OWNER
			AND     A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
			AND     B.TABLE_NAME LIKE 'TB_%'
			AND     B.COLUMN_NAME LIKE '%POLY_NO%'
			AND     A.CONSTRAINT_TYPE = 'P'
		)	C
WHERE   A.OWNER = B.OWNER
AND     A.TABLE_NAME = B.TABLE_NAME
AND     B.OWNER = C.OWNER
AND     B.TABLE_NAME = C.TABLE_NAME(+)
AND     B.COLUMN_NAME = C.COLUMN_NAME(+)
AND     B.COLUMN_NAME LIKE '%POLY_NO%'
AND     A.TABLE_NAME LIKE 'TB_%'
--AND     B.TABLE_NAME = 'TB_ISAPLCTT'
;


select	*
FROM    all_tab_columns
WHERE   TABLE_name = 'TB_SMPPE308'


======================================================================
증권번호별 입금정보 조회

-- 입금회차 존재하는 2019년 가입계약 추출
SELECT	A.POLY_NO, COUNT(*)
FROM	TB_ISAPLCTT		A	--	계약
	,	TB_ISCJGRCV		B	--	가입상품입금
WHERE   A.POLY_NO = B.POLY_NO
AND 	A.FRST_CNTT_DATE >= '20190101'
GROUP BY A.POLY_NO
HAVING COUNT(*) > 1
;

/*
180817701	4
180821522	3
180828236	6
180833194	24
180833402	6
*/

-- 가입상품조회
SELECT	*
FROM	TB_ISAPLCJG		--	가입상품
WHERE   POLY_NO = '180828236'
ORDER BY JOIN_GOOD_NO
--	JNGD_DLNG_DVCD(가입상품별처리구분코드: 0(계약별처리), 1(가입상품별처리), 2(중도부가))
;

-- 가입상품 입금내역 조회
SELECT	*
FROM	TB_ISCJGRCV		--	가입상품입금
WHERE   POLY_NO = '180828236'
--AND		JOIN_GOOD_NO = '1'
-- 16,17번 가입상품 1회차 납회의 입금처리일련번호 1512853194가 다른 테이블과 다 연결됨	.. 검증계 중도부가 내역만??
;

-- 가입상품 입금이력 내역 조회	-- 조회내역 없음
SELECT	*
FROM	TB_ISCJGRCH		--	가입상품입금
WHERE   POLY_NO = '180828236'
--AND		JOIN_GOOD_NO = '1'
-- 16,17번 가입상품 1회차 납회의 입금처리일련번호 1512853194가 다른 테이블과 다 연결됨
;

-- 보험료 입금내역 조회	-- 조회내역 없음
SELECT	*
FROM	TB_ISRCVPRM	
WHERE   POLY_NO = '180828236'
;





=============================================
통합코드조회(연관코드활용)


SELECT	A.CODE_ID, A.CODE_NAME, A.RELN_CD1, A.RELN_CD2, A.EXPL_1, A.EXPL_2
	, 	B.CODE_VAL, B.OUTP_ORDR, B.CODE_NAME, B.RELN_CD1, B.RELN_CD2
	,   C.CODE_VAL, C.CODE_NAME
FROM	TB_UVCDM001	A
	,	TB_UVCDM002	B
	,	TB_UVCDM002	C
WHERE   A.CODE_ID = B.CODE_ID
AND		B.RELN_CD1 IS NOT NULL
AND		A.CODE_ID = 'DTAL_JOB_CODE'		--	상세직업코드
AND		A.RELN_CD1 = C.CODE_ID
AND     B.RELN_CD1 = C.CODE_VAL
ORDER BY B.RELN_CD1
;



SELECT	A.CODE_ID, A.CODE_NAME, A.RELN_CD1, A.RELN_CD2, A.EXPL_1, A.EXPL_2
	, 	B.CODE_VAL, B.OUTP_ORDR, B.CODE_NAME, B.RELN_CD1, B.RELN_CD2
FROM	TB_UVCDM001	A
	,	TB_UVCDM002	B
WHERE   A.CODE_ID = B.CODE_ID
AND		TRIM(B.RELN_CD1) = ''
--AND		TRIM(B.RELN_CD2) <> ''
;


SELECT	RELN_CD1,	RELN_CD2, COUNT(*)
FROM	TB_UVCDM001
GROUP BY RELN_CD1,	RELN_CD2
;

SELECT	*
FROM	TB_UVCDM001
WHERE   RELN_CD2  = 'TOCH_INPT_DVCD'
;

--2만
TCAC_RESL
TOCH_INPT_DVCD	--	XCCS_PRCD_VTCD

-- 둘다
CRNY_CODE NATN_CODE_ISO
EIS_ITEM_LCCD EIS_ITEM_MCCD
BSNS_VSUS_DVSN BSNS_DURN_DVSN
CNSL_TPCD_LCLS CNSL_TPCD_MCLS

========================================
통합코드조회(칼럼선별)


SELECT	A.CODE_ID, A.CODE_NAME, A.CODE_TYPE, A.RELN_CD1, A.RELN_CD2, A.EXPL_1, A.EXPL_2, A.EXPL_3, A.EXPL_4, A.EXPL_5, A.EXPL_6
	, 	B.CODE_VAL, B.OUTP_ORDR, B.RELN_CD1, B.RELN_CD2,	B.EXPL_1, B.EXPL_2, B.EXPL_3, B.EXPL_4, B.EXPL_5, B.EXPL_6
FROM	TB_UVCDM001	A
	,	TB_UVCDM002	B
WHERE   A.CODE_ID = B.CODE_ID
AND		B.RELN_CD1 IS NOT NULL
;
======================================================
HPAS 검증계 이관 SQL
EXECUTE MIG_PKG_HPAS.HPAS_TRG_DELETE('DL_DVRF', 'ETL');
EXECUTE MIG_PKG_HPAS.HPAS_TRG_MOVE('TRG02', 'DL_DVRF');
--EXECUTE MIG_PKG_HPAS.HPAS_GAP_CNT('TRG02', 'DL_DVRF', 'ETL');

=================================
SELECT-INSERT_추출_SCRIPT

SELECT  *
FROM
		(
		SELECT A.OWNER, A.TABLE_NAME, A.COLUMN_NAME, 1 AS SEQ1, A.COLUMN_ID AS SEQ2,
		CASE WHEN A.COLUMN_ID = 1 THEN
			 'INSERT /*+ APPEND PARALLEL(A 4) */ INTO '|| A.OWNER || '.' || A.TABLE_NAME ||'@DL_DVRF A' || CHR(13) || '(' || CHR(13) || '        ' || COLUMN_NAME
			 WHEN (SELECT MAX(X.COLUMN_ID) FROM ALL_TAB_COLUMNS@DL_DVRF X WHERE X.TABLE_NAME = A.TABLE_NAME AND X.OWNER = A.OWNER) = COLUMN_ID THEN
			 '      , ' || COLUMN_NAME || CHR(13) || ')'
			 ELSE '      , ' || COLUMN_NAME
		END AS MIG_SQL
		FROM   ALL_TAB_COLUMNS@DL_DVRF A

		UNION ALL

		SELECT A.OWNER, A.TABLE_NAME, A.COLUMN_NAME, 2 AS SEQ1, A.COLUMN_ID AS SEQ2,
		CASE WHEN A.COLUMN_ID = 1 THEN
			 'SELECT  /*+ FULL(A) PARALLEL(A 4) */' || CHR(13) || '        ' || COLUMN_NAME
			 WHEN (SELECT MAX(X.COLUMN_ID) FROM ALL_TAB_COLUMNS@DL_DVRF X WHERE X.TABLE_NAME = A.TABLE_NAME AND X.OWNER = A.OWNER) = COLUMN_ID THEN
			 '      , ' || COLUMN_NAME || CHR(13) || 'FROM    TRG02.' || A.TABLE_NAME || ' A;' || CHR(13) || CHR(13) || 'COMMIT;' || CHR(13)
			 ELSE '      , ' || COLUMN_NAME
		END AS MIG_SQL
		FROM   ALL_TAB_COLUMNS@DL_DVRF A
		) A
WHERE  1 = 1
--AND    A.COLUMN_NAME NOT IN ('CREATE_PRGM_ID', 'LAST_MODIFIED_PRGM_ID')
AND    A.OWNER LIKE 'HPA%'
AND    A.TABLE_NAME IN
(
'TBL_AGMT_PYMT_STATUS'
,'TBL_AGREEMENT'
,'TBL_AGREEMENT_ANCHOR'
,'TBL_AGMT_REL'
,'TBL_APPLICATION'
,'TBL_APPLICATION_PROPERTY'
,'TBL_COL_PROPERTY'
,'TBL_BUNDLE_COMPOSITION'
,'TBL_DIVIDEND_PAYMENT_DETAIL'
,'TBL_FIN_TRAN_RELATIONSHIP'
,'TBL_IRA'
,'TBL_IRA_FUND_DTL'
,'TBL_IRA_FUND_ITEM'
,'TBL_MONEY_PROV'
,'TBL_MONEY_PROV_ANCHOR'
,'TBL_MONEY_PROV_ELEMENT'
,'TBL_MONEY_PROV_STATUS'
,'TBL_MONEY_SCHEDULER'
,'TBL_MONEY_SCHEDULER_STATUS'
,'TBL_MONTHLY_FINFR_RESERVE'
,'TBL_MONTHLY_FIN_STATUS'
,'TBL_MONTHLY_FINREV_COMP'
,'TBL_PAYMENT'
,'TBL_PAYMENT_COMP'
,'TBL_PAYMENT_COMP_ELEMENT'
,'TBL_PREM_PAYMENT_DUE'
,'TBL_PREM_PAYMENT_DUE_COMP'
,'TBL_PREMPAYM_DUE_COMP_ELEMENT'
,'TBL_PREM_PAYMENT_DUE_ELEMENT'
,'TBL_PAYMENT_ELEMENT'
,'TBL_PAYMENT_PROCESSING'
,'TBL_PAYMENT_PROCESSING_STATUS'
,'TBL_PAYMENT_STATUS'
,'TBL_PREMIUM_PLAN'
,'TBL_PREM_PAYMENT'
,'TBL_PREM_PAYMENT_ELEMENT'
,'TBL_PREM_PAYMENT_STATUS'
,'TBL_PROPERTY'
,'TBL_RA_FP_DTL'
,'TBL_RA_PLCY_SUPP_DTL'
,'TBL_ROLE_IN_ACTUAL'
,'TBL_TOP_LEVEL_AGREEMENT'
,'TBL_VAO_PREM_COLL'
,'TBL_VAO_PREM_COLL_VERSION'
,'TBL_WITHHOLDING_TAX'
,'TBL_AGMT_REL_STATUS'
,'TBL_AGREEMENT_VERSION'
,'TBL_APPLICATION_TX'
,'TBL_PREMIUM_PLAN_TX'
,'TBL_RA'
,'TBL_RA_TX'
,'TBL_REQUEST'
,'TBL_REQUEST_CONTAINER'
,'TBL_REQUEST_LCS'
,'TBL_TLA_CHILD_REL'
,'TBL_VERSIONED_AGREEMENT'
,'TBL_PREM_PAYMENT_DUE_STATUS'
,'TBL_POLICY_LOAN_PAYMENT'
,'TBL_POLOAN_PAYMENT_ELEMENT'
,'TBL_POLOAN_PAYM_STATUS'
,'TBL_PREM_PAYMENT_COMP'
,'TBL_PREM_PAYMENT_COMP_ELEMENT'
,'TBL_PARTY_ROLE'
,'TBL_APPLICATION_SET_PROPERTY'
,'TBL_AGREEMENT_RIA_REL'
)
ORDER BY TABLE_NAME, SEQ1, SEQ2 
;

===========================
SELECT-INSERT문

COMMIT;
ALTER SESSION ENABLE PARALLEL DML;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_AGMT_PYMT_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , AGREEMENT_NUMBER
      , CONTRACT_PROC_NUMBER
      , ORIGIN_AGREEMENT_ID
      , POLICY_NUMBER
      , AGMT_PYMT_STATE_CODE
      , AGMT_PYMT_STATE_REASON_CODE
      , AGREEMENT_ANCHOR_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , AGREEMENT_NUMBER
      , CONTRACT_PROC_NUMBER
      , ORIGIN_AGREEMENT_ID
      , POLICY_NUMBER
      , AGMT_PYMT_STATE_CODE
      , AGMT_PYMT_STATE_REASON_CODE
      , AGREEMENT_ANCHOR_ID
FROM    TRG02.TBL_AGMT_PYMT_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_AGMT_REL@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , REL_FROM_AGREEMENT_NUMBER
      , REL_FROM_ORIGIN_AGREEMENT_ID
      , REL_FROM_POLICY_NUMBER
      , REL_TO_AGREEMENT_NUMBER
      , REL_TO_ORIGIN_AGREEMENT_ID
      , REL_TO_POLICY_NUMBER
      , REL_TYPE_CODE
      , REL_FROM_AGREEMENT_ANCHOR_ID
      , REL_TO_AGREEMENT_ANCHOR_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , REL_FROM_AGREEMENT_NUMBER
      , REL_FROM_ORIGIN_AGREEMENT_ID
      , REL_FROM_POLICY_NUMBER
      , REL_TO_AGREEMENT_NUMBER
      , REL_TO_ORIGIN_AGREEMENT_ID
      , REL_TO_POLICY_NUMBER
      , REL_TYPE_CODE
      , REL_FROM_AGREEMENT_ANCHOR_ID
      , REL_TO_AGREEMENT_ANCHOR_ID
FROM    TRG02.TBL_AGMT_REL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_AGMT_REL_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , CONTRACT_PROC_NUMBER
      , REL_STATE_CODE
      , REL_STATE_REASON_CODE
      , AGREEMENT_REL_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , CONTRACT_PROC_NUMBER
      , REL_STATE_CODE
      , REL_STATE_REASON_CODE
      , AGREEMENT_REL_ID
FROM    TRG02.TBL_AGMT_REL_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_AGREEMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , AGREEMENT_NUMBER
      , AGMT_STATE_DTL_CODE
      , AGMT_STATE_DTL_REASON_CODE
      , END_AT
      , EXTERNAL_REF
      , INDEX_IN_ACTUAL
      , ORIGINAL_START_AT
      , PRODUCT_ADD_TYPE_CODE
      , PRODUCT_CODE
      , PRODUCT_DETAIL_CODE
      , PRODUCT_TYPE_CODE
      , PRODUCT_TYPE_DETAIL_CODE
      , PSM_CODE
      , START_AT
      , KIND_ID
      , AGREEMENT_ANCHOR_ID
      , AGMT_STATE_CODE
      , ORIGIN_PARENT_AGREEMENT_ID
      , TARGET_AGREEMENT_ID
      , TOP_LEVEL_AGREEMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , AGREEMENT_NUMBER
      , AGMT_STATE_DTL_CODE
      , AGMT_STATE_DTL_REASON_CODE
      , END_AT
      , EXTERNAL_REF
      , INDEX_IN_ACTUAL
      , ORIGINAL_START_AT
      , PRODUCT_ADD_TYPE_CODE
      , PRODUCT_CODE
      , PRODUCT_DETAIL_CODE
      , PRODUCT_TYPE_CODE
      , PRODUCT_TYPE_DETAIL_CODE
      , PSM_CODE
      , START_AT
      , KIND_ID
      , AGREEMENT_ANCHOR_ID
      , AGMT_STATE_CODE
      , ORIGIN_PARENT_AGREEMENT_ID
      , TARGET_AGREEMENT_ID
      , TOP_LEVEL_AGREEMENT_ID
FROM    TRG02.TBL_AGREEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_AGREEMENT_ANCHOR@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_NUMBER
      , LAST_AGREEMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_NUMBER
      , LAST_AGREEMENT_ID
FROM    TRG02.TBL_AGREEMENT_ANCHOR A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_AGREEMENT_RIA_REL@DL_DVRF A
(
        AGREEMENT_ID
      , ROLE_IN_ACTUAL_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        AGREEMENT_ID
      , ROLE_IN_ACTUAL_ID
FROM    TRG02.TBL_AGREEMENT_RIA_REL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_AGREEMENT_VERSION@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , CAN_CREATE_NEXT_VERSION
      , CAN_REINSTATE_PREVIOUS_VERSION
      , CONTRACT_PROC_NUMBER
      , EFFECTIVE
      , END_AT
      , NOT_ACCEPTED
      , REPLACED_AT
      , REPLACEMENT_REASON_CODE
      , START_AT
      , TRAN_END_ON
      , TRAN_START_ON
      , MAJOR_VERSION_NUMBER
      , MINOR_VERSION_NUMBER
      , VERSION_SEQ
      , NEXT_VALD_MAJOR_VERSION_ID
      , NEXT_VERSION_ID
      , PREVIOUS_VALD_MAJOR_VERSION_ID
      , PREVIOUS_VERSION_ID
      , REINSTATED_VERSION_ID
      , TOP_LEVEL_AGREEMENT_ID
      , VERSIONED_AGREEMENT_ID
--      , VALD_VERSION_ON_SAME_DAY
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , CAN_CREATE_NEXT_VERSION
      , CAN_REINSTATE_PREVIOUS_VERSION
      , CONTRACT_PROC_NUMBER
      , EFFECTIVE
      , END_AT
      , NOT_ACCEPTED
      , REPLACED_AT
      , REPLACEMENT_REASON_CODE
      , START_AT
      , TRAN_END_ON
      , TRAN_START_ON
      , MAJOR_VERSION_NUMBER
      , MINOR_VERSION_NUMBER
      , VERSION_SEQ
      , NEXT_VALD_MAJOR_VERSION_ID
      , NEXT_VERSION_ID
      , PREVIOUS_VALD_MAJOR_VERSION_ID
      , PREVIOUS_VERSION_ID
      , REINSTATED_VERSION_ID
      , TOP_LEVEL_AGREEMENT_ID
      , VERSIONED_AGREEMENT_ID
--      , VALD_VERSION_ON_SAME_DAY
FROM    TRG02.TBL_AGREEMENT_VERSION A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_APPLICATION@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_NUMBER
      , APPLICATION_KIND_ID
      , DESCRIPTION
      , IS_CANCELLED
      , IS_SET
      , OPTION_CODE
      , POLICY_NUMBER
      , SPEC_UUID
      , AGREEMENT_ANCHOR_ID
      , OPTION_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_NUMBER
      , APPLICATION_KIND_ID
      , DESCRIPTION
      , IS_CANCELLED
      , IS_SET
      , OPTION_CODE
      , POLICY_NUMBER
      , SPEC_UUID
      , AGREEMENT_ANCHOR_ID
      , OPTION_ID
FROM    TRG02.TBL_APPLICATION A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_APPLICATION_PROPERTY@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , APPLICATION_KIND_ID
      , APPLICATION_PROPERTY_KIND_ID
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , AMOUNT
      , AMOUNT_SCALE
      , BIGDECIMAL_VALUE
      , BOOLEAN_VALUE
      , CURRENCY_AMOUNT
      , CURRENCY_AMOUNT_CURRENCY_CODE
      , CURRENCY_AMOUNT_SCALE
      , DATETIME_VALUE
      , DATE_VALUE
      , DESCRIPTION
      , INTEGER_VALUE
      , PERCENTAGE_AMOUNT
      , PERCENTAGE_AMOUNT_SCALE
      , SPEC_UUID
      , STRING_VALUE
      , AP_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , APPLICATION_KIND_ID
      , APPLICATION_PROPERTY_KIND_ID
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , AMOUNT
      , AMOUNT_SCALE
      , BIGDECIMAL_VALUE
      , BOOLEAN_VALUE
      , CURRENCY_AMOUNT
      , CURRENCY_AMOUNT_CURRENCY_CODE
      , CURRENCY_AMOUNT_SCALE
      , DATETIME_VALUE
      , DATE_VALUE
      , DESCRIPTION
      , INTEGER_VALUE
      , PERCENTAGE_AMOUNT
      , PERCENTAGE_AMOUNT_SCALE
      , SPEC_UUID
      , STRING_VALUE
      , AP_ID
FROM    TRG02.TBL_APPLICATION_PROPERTY A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_APPLICATION_SET_PROPERTY@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , APPLICATION_KIND_ID
      , APPLICATION_NUMBER
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , AMOUNT10
      , AMOUNT10_SCALE
      , AMOUNT11
      , AMOUNT11_SCALE
      , AMOUNT12
      , AMOUNT12_SCALE
      , AMOUNT13
      , AMOUNT13_SCALE
      , AMOUNT14
      , AMOUNT14_SCALE
      , AMOUNT15
      , AMOUNT15_SCALE
      , AMOUNT16
      , AMOUNT16_SCALE
      , AMOUNT17
      , AMOUNT17_SCALE
      , AMOUNT18
      , AMOUNT18_SCALE
      , AMOUNT19
      , AMOUNT19_SCALE
      , AMOUNT1
      , AMOUNT1_SCALE
      , AMOUNT20
      , AMOUNT20_SCALE
      , AMOUNT2
      , AMOUNT2_SCALE
      , AMOUNT3
      , AMOUNT3_SCALE
      , AMOUNT4
      , AMOUNT4_SCALE
      , AMOUNT5
      , AMOUNT5_SCALE
      , AMOUNT6
      , AMOUNT6_SCALE
      , AMOUNT7
      , AMOUNT7_SCALE
      , AMOUNT8
      , AMOUNT8_SCALE
      , AMOUNT9
      , AMOUNT9_SCALE
      , BIGDECIMAL10_VALUE
      , BIGDECIMAL11_VALUE
      , BIGDECIMAL12_VALUE
      , BIGDECIMAL13_VALUE
      , BIGDECIMAL14_VALUE
      , BIGDECIMAL15_VALUE
      , BIGDECIMAL16_VALUE
      , BIGDECIMAL17_VALUE
      , BIGDECIMAL18_VALUE
      , BIGDECIMAL19_VALUE
      , BIGDECIMAL1_VALUE
      , BIGDECIMAL20_VALUE
      , BIGDECIMAL2_VALUE
      , BIGDECIMAL3_VALUE
      , BIGDECIMAL4_VALUE
      , BIGDECIMAL5_VALUE
      , BIGDECIMAL6_VALUE
      , BIGDECIMAL7_VALUE
      , BIGDECIMAL8_VALUE
      , BIGDECIMAL9_VALUE
      , BOOLEAN10_VALUE
      , BOOLEAN11_VALUE
      , BOOLEAN12_VALUE
      , BOOLEAN13_VALUE
      , BOOLEAN14_VALUE
      , BOOLEAN15_VALUE
      , BOOLEAN16_VALUE
      , BOOLEAN17_VALUE
      , BOOLEAN18_VALUE
      , BOOLEAN19_VALUE
      , BOOLEAN1_VALUE
      , BOOLEAN20_VALUE
      , BOOLEAN2_VALUE
      , BOOLEAN3_VALUE
      , BOOLEAN4_VALUE
      , BOOLEAN5_VALUE
      , BOOLEAN6_VALUE
      , BOOLEAN7_VALUE
      , BOOLEAN8_VALUE
      , BOOLEAN9_VALUE
      , CURRENCY_AMOUNT10
      , CURRENCY_AMOUNT10_CCY_CODE
      , CURRENCY_AMOUNT10_SCALE
      , CURRENCY_AMOUNT11
      , CURRENCY_AMOUNT11_CCY_CODE
      , CURRENCY_AMOUNT11_SCALE
      , CURRENCY_AMOUNT12
      , CURRENCY_AMOUNT12_CCY_CODE
      , CURRENCY_AMOUNT12_SCALE
      , CURRENCY_AMOUNT13
      , CURRENCY_AMOUNT13_CCY_CODE
      , CURRENCY_AMOUNT13_SCALE
      , CURRENCY_AMOUNT14
      , CURRENCY_AMOUNT14_CCY_CODE
      , CURRENCY_AMOUNT14_SCALE
      , CURRENCY_AMOUNT15
      , CURRENCY_AMOUNT15_CCY_CODE
      , CURRENCY_AMOUNT15_SCALE
      , CURRENCY_AMOUNT16
      , CURRENCY_AMOUNT16_CCY_CODE
      , CURRENCY_AMOUNT16_SCALE
      , CURRENCY_AMOUNT17
      , CURRENCY_AMOUNT17_CCY_CODE
      , CURRENCY_AMOUNT17_SCALE
      , CURRENCY_AMOUNT18
      , CURRENCY_AMOUNT18_CCY_CODE
      , CURRENCY_AMOUNT18_SCALE
      , CURRENCY_AMOUNT19
      , CURRENCY_AMOUNT19_CCY_CODE
      , CURRENCY_AMOUNT19_SCALE
      , CURRENCY_AMOUNT1
      , CURRENCY_AMOUNT1_CCY_CODE
      , CURRENCY_AMOUNT1_SCALE
      , CURRENCY_AMOUNT20
      , CURRENCY_AMOUNT20_CCY_CODE
      , CURRENCY_AMOUNT20_SCALE
      , CURRENCY_AMOUNT2
      , CURRENCY_AMOUNT2_CCY_CODE
      , CURRENCY_AMOUNT2_SCALE
      , CURRENCY_AMOUNT3
      , CURRENCY_AMOUNT3_CCY_CODE
      , CURRENCY_AMOUNT3_SCALE
      , CURRENCY_AMOUNT4
      , CURRENCY_AMOUNT4_CCY_CODE
      , CURRENCY_AMOUNT4_SCALE
      , CURRENCY_AMOUNT5
      , CURRENCY_AMOUNT5_CCY_CODE
      , CURRENCY_AMOUNT5_SCALE
      , CURRENCY_AMOUNT6
      , CURRENCY_AMOUNT6_CCY_CODE
      , CURRENCY_AMOUNT6_SCALE
      , CURRENCY_AMOUNT7
      , CURRENCY_AMOUNT7_CCY_CODE
      , CURRENCY_AMOUNT7_SCALE
      , CURRENCY_AMOUNT8
      , CURRENCY_AMOUNT8_CCY_CODE
      , CURRENCY_AMOUNT8_SCALE
      , CURRENCY_AMOUNT9
      , CURRENCY_AMOUNT9_CCY_CODE
      , CURRENCY_AMOUNT9_SCALE
      , DATE10_VALUE
      , DATE11_VALUE
      , DATE12_VALUE
      , DATE13_VALUE
      , DATE14_VALUE
      , DATE15_VALUE
      , DATE16_VALUE
      , DATE17_VALUE
      , DATE18_VALUE
      , DATE19_VALUE
      , DATE1_VALUE
      , DATE20_VALUE
      , DATE2_VALUE
      , DATE3_VALUE
      , DATE4_VALUE
      , DATE5_VALUE
      , DATE6_VALUE
      , DATE7_VALUE
      , DATE8_VALUE
      , DATE9_VALUE
      , DATETIME10_VALUE
      , DATETIME11_VALUE
      , DATETIME12_VALUE
      , DATETIME13_VALUE
      , DATETIME14_VALUE
      , DATETIME15_VALUE
      , DATETIME16_VALUE
      , DATETIME17_VALUE
      , DATETIME18_VALUE
      , DATETIME19_VALUE
      , DATETIME1_VALUE
      , DATETIME20_VALUE
      , DATETIME2_VALUE
      , DATETIME3_VALUE
      , DATETIME4_VALUE
      , DATETIME5_VALUE
      , DATETIME6_VALUE
      , DATETIME7_VALUE
      , DATETIME8_VALUE
      , DATETIME9_VALUE
      , DESCRIPTION
      , INTEGER10_VALUE
      , INTEGER11_VALUE
      , INTEGER12_VALUE
      , INTEGER13_VALUE
      , INTEGER14_VALUE
      , INTEGER15_VALUE
      , INTEGER16_VALUE
      , INTEGER17_VALUE
      , INTEGER18_VALUE
      , INTEGER19_VALUE
      , INTEGER1_VALUE
      , INTEGER20_VALUE
      , INTEGER2_VALUE
      , INTEGER3_VALUE
      , INTEGER4_VALUE
      , INTEGER5_VALUE
      , INTEGER6_VALUE
      , INTEGER7_VALUE
      , INTEGER8_VALUE
      , INTEGER9_VALUE
      , PERCENTAGE_AMOUNT10
      , PERCENTAGE_AMOUNT10_SCALE
      , PERCENTAGE_AMOUNT11
      , PERCENTAGE_AMOUNT11_SCALE
      , PERCENTAGE_AMOUNT12
      , PERCENTAGE_AMOUNT12_SCALE
      , PERCENTAGE_AMOUNT13
      , PERCENTAGE_AMOUNT13_SCALE
      , PERCENTAGE_AMOUNT14
      , PERCENTAGE_AMOUNT14_SCALE
      , PERCENTAGE_AMOUNT15
      , PERCENTAGE_AMOUNT15_SCALE
      , PERCENTAGE_AMOUNT16
      , PERCENTAGE_AMOUNT16_SCALE
      , PERCENTAGE_AMOUNT17
      , PERCENTAGE_AMOUNT17_SCALE
      , PERCENTAGE_AMOUNT18
      , PERCENTAGE_AMOUNT18_SCALE
      , PERCENTAGE_AMOUNT19
      , PERCENTAGE_AMOUNT19_SCALE
      , PERCENTAGE_AMOUNT1
      , PERCENTAGE_AMOUNT1_SCALE
      , PERCENTAGE_AMOUNT20
      , PERCENTAGE_AMOUNT20_SCALE
      , PERCENTAGE_AMOUNT2
      , PERCENTAGE_AMOUNT2_SCALE
      , PERCENTAGE_AMOUNT3
      , PERCENTAGE_AMOUNT3_SCALE
      , PERCENTAGE_AMOUNT4
      , PERCENTAGE_AMOUNT4_SCALE
      , PERCENTAGE_AMOUNT5
      , PERCENTAGE_AMOUNT5_SCALE
      , PERCENTAGE_AMOUNT6
      , PERCENTAGE_AMOUNT6_SCALE
      , PERCENTAGE_AMOUNT7
      , PERCENTAGE_AMOUNT7_SCALE
      , PERCENTAGE_AMOUNT8
      , PERCENTAGE_AMOUNT8_SCALE
      , PERCENTAGE_AMOUNT9
      , PERCENTAGE_AMOUNT9_SCALE
      , STRING10_VALUE
      , STRING11_VALUE
      , STRING12_VALUE
      , STRING13_VALUE
      , STRING14_VALUE
      , STRING15_VALUE
      , STRING16_VALUE
      , STRING17_VALUE
      , STRING18_VALUE
      , STRING19_VALUE
      , STRING1_VALUE
      , STRING20_VALUE
      , STRING2_VALUE
      , STRING3_VALUE
      , STRING4_VALUE
      , STRING5_VALUE
      , STRING6_VALUE
      , STRING7_VALUE
      , STRING8_VALUE
      , STRING9_VALUE
      , AP_ID
      , KIND_ID1
      , KIND_ID10
      , KIND_ID11
      , KIND_ID12
      , KIND_ID13
      , KIND_ID14
      , KIND_ID15
      , KIND_ID16
      , KIND_ID17
      , KIND_ID18
      , KIND_ID19
      , KIND_ID2
      , KIND_ID20
      , KIND_ID3
      , KIND_ID4
      , KIND_ID5
      , KIND_ID6
      , KIND_ID7
      , KIND_ID8
      , KIND_ID9
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , APPLICATION_KIND_ID
      , APPLICATION_NUMBER
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , AMOUNT10
      , AMOUNT10_SCALE
      , AMOUNT11
      , AMOUNT11_SCALE
      , AMOUNT12
      , AMOUNT12_SCALE
      , AMOUNT13
      , AMOUNT13_SCALE
      , AMOUNT14
      , AMOUNT14_SCALE
      , AMOUNT15
      , AMOUNT15_SCALE
      , AMOUNT16
      , AMOUNT16_SCALE
      , AMOUNT17
      , AMOUNT17_SCALE
      , AMOUNT18
      , AMOUNT18_SCALE
      , AMOUNT19
      , AMOUNT19_SCALE
      , AMOUNT1
      , AMOUNT1_SCALE
      , AMOUNT20
      , AMOUNT20_SCALE
      , AMOUNT2
      , AMOUNT2_SCALE
      , AMOUNT3
      , AMOUNT3_SCALE
      , AMOUNT4
      , AMOUNT4_SCALE
      , AMOUNT5
      , AMOUNT5_SCALE
      , AMOUNT6
      , AMOUNT6_SCALE
      , AMOUNT7
      , AMOUNT7_SCALE
      , AMOUNT8
      , AMOUNT8_SCALE
      , AMOUNT9
      , AMOUNT9_SCALE
      , BIGDECIMAL10_VALUE
      , BIGDECIMAL11_VALUE
      , BIGDECIMAL12_VALUE
      , BIGDECIMAL13_VALUE
      , BIGDECIMAL14_VALUE
      , BIGDECIMAL15_VALUE
      , BIGDECIMAL16_VALUE
      , BIGDECIMAL17_VALUE
      , BIGDECIMAL18_VALUE
      , BIGDECIMAL19_VALUE
      , BIGDECIMAL1_VALUE
      , BIGDECIMAL20_VALUE
      , BIGDECIMAL2_VALUE
      , BIGDECIMAL3_VALUE
      , BIGDECIMAL4_VALUE
      , BIGDECIMAL5_VALUE
      , BIGDECIMAL6_VALUE
      , BIGDECIMAL7_VALUE
      , BIGDECIMAL8_VALUE
      , BIGDECIMAL9_VALUE
      , BOOLEAN10_VALUE
      , BOOLEAN11_VALUE
      , BOOLEAN12_VALUE
      , BOOLEAN13_VALUE
      , BOOLEAN14_VALUE
      , BOOLEAN15_VALUE
      , BOOLEAN16_VALUE
      , BOOLEAN17_VALUE
      , BOOLEAN18_VALUE
      , BOOLEAN19_VALUE
      , BOOLEAN1_VALUE
      , BOOLEAN20_VALUE
      , BOOLEAN2_VALUE
      , BOOLEAN3_VALUE
      , BOOLEAN4_VALUE
      , BOOLEAN5_VALUE
      , BOOLEAN6_VALUE
      , BOOLEAN7_VALUE
      , BOOLEAN8_VALUE
      , BOOLEAN9_VALUE
      , CURRENCY_AMOUNT10
      , CURRENCY_AMOUNT10_CCY_CODE
      , CURRENCY_AMOUNT10_SCALE
      , CURRENCY_AMOUNT11
      , CURRENCY_AMOUNT11_CCY_CODE
      , CURRENCY_AMOUNT11_SCALE
      , CURRENCY_AMOUNT12
      , CURRENCY_AMOUNT12_CCY_CODE
      , CURRENCY_AMOUNT12_SCALE
      , CURRENCY_AMOUNT13
      , CURRENCY_AMOUNT13_CCY_CODE
      , CURRENCY_AMOUNT13_SCALE
      , CURRENCY_AMOUNT14
      , CURRENCY_AMOUNT14_CCY_CODE
      , CURRENCY_AMOUNT14_SCALE
      , CURRENCY_AMOUNT15
      , CURRENCY_AMOUNT15_CCY_CODE
      , CURRENCY_AMOUNT15_SCALE
      , CURRENCY_AMOUNT16
      , CURRENCY_AMOUNT16_CCY_CODE
      , CURRENCY_AMOUNT16_SCALE
      , CURRENCY_AMOUNT17
      , CURRENCY_AMOUNT17_CCY_CODE
      , CURRENCY_AMOUNT17_SCALE
      , CURRENCY_AMOUNT18
      , CURRENCY_AMOUNT18_CCY_CODE
      , CURRENCY_AMOUNT18_SCALE
      , CURRENCY_AMOUNT19
      , CURRENCY_AMOUNT19_CCY_CODE
      , CURRENCY_AMOUNT19_SCALE
      , CURRENCY_AMOUNT1
      , CURRENCY_AMOUNT1_CCY_CODE
      , CURRENCY_AMOUNT1_SCALE
      , CURRENCY_AMOUNT20
      , CURRENCY_AMOUNT20_CCY_CODE
      , CURRENCY_AMOUNT20_SCALE
      , CURRENCY_AMOUNT2
      , CURRENCY_AMOUNT2_CCY_CODE
      , CURRENCY_AMOUNT2_SCALE
      , CURRENCY_AMOUNT3
      , CURRENCY_AMOUNT3_CCY_CODE
      , CURRENCY_AMOUNT3_SCALE
      , CURRENCY_AMOUNT4
      , CURRENCY_AMOUNT4_CCY_CODE
      , CURRENCY_AMOUNT4_SCALE
      , CURRENCY_AMOUNT5
      , CURRENCY_AMOUNT5_CCY_CODE
      , CURRENCY_AMOUNT5_SCALE
      , CURRENCY_AMOUNT6
      , CURRENCY_AMOUNT6_CCY_CODE
      , CURRENCY_AMOUNT6_SCALE
      , CURRENCY_AMOUNT7
      , CURRENCY_AMOUNT7_CCY_CODE
      , CURRENCY_AMOUNT7_SCALE
      , CURRENCY_AMOUNT8
      , CURRENCY_AMOUNT8_CCY_CODE
      , CURRENCY_AMOUNT8_SCALE
      , CURRENCY_AMOUNT9
      , CURRENCY_AMOUNT9_CCY_CODE
      , CURRENCY_AMOUNT9_SCALE
      , DATE10_VALUE
      , DATE11_VALUE
      , DATE12_VALUE
      , DATE13_VALUE
      , DATE14_VALUE
      , DATE15_VALUE
      , DATE16_VALUE
      , DATE17_VALUE
      , DATE18_VALUE
      , DATE19_VALUE
      , DATE1_VALUE
      , DATE20_VALUE
      , DATE2_VALUE
      , DATE3_VALUE
      , DATE4_VALUE
      , DATE5_VALUE
      , DATE6_VALUE
      , DATE7_VALUE
      , DATE8_VALUE
      , DATE9_VALUE
      , DATETIME10_VALUE
      , DATETIME11_VALUE
      , DATETIME12_VALUE
      , DATETIME13_VALUE
      , DATETIME14_VALUE
      , DATETIME15_VALUE
      , DATETIME16_VALUE
      , DATETIME17_VALUE
      , DATETIME18_VALUE
      , DATETIME19_VALUE
      , DATETIME1_VALUE
      , DATETIME20_VALUE
      , DATETIME2_VALUE
      , DATETIME3_VALUE
      , DATETIME4_VALUE
      , DATETIME5_VALUE
      , DATETIME6_VALUE
      , DATETIME7_VALUE
      , DATETIME8_VALUE
      , DATETIME9_VALUE
      , DESCRIPTION
      , INTEGER10_VALUE
      , INTEGER11_VALUE
      , INTEGER12_VALUE
      , INTEGER13_VALUE
      , INTEGER14_VALUE
      , INTEGER15_VALUE
      , INTEGER16_VALUE
      , INTEGER17_VALUE
      , INTEGER18_VALUE
      , INTEGER19_VALUE
      , INTEGER1_VALUE
      , INTEGER20_VALUE
      , INTEGER2_VALUE
      , INTEGER3_VALUE
      , INTEGER4_VALUE
      , INTEGER5_VALUE
      , INTEGER6_VALUE
      , INTEGER7_VALUE
      , INTEGER8_VALUE
      , INTEGER9_VALUE
      , PERCENTAGE_AMOUNT10
      , PERCENTAGE_AMOUNT10_SCALE
      , PERCENTAGE_AMOUNT11
      , PERCENTAGE_AMOUNT11_SCALE
      , PERCENTAGE_AMOUNT12
      , PERCENTAGE_AMOUNT12_SCALE
      , PERCENTAGE_AMOUNT13
      , PERCENTAGE_AMOUNT13_SCALE
      , PERCENTAGE_AMOUNT14
      , PERCENTAGE_AMOUNT14_SCALE
      , PERCENTAGE_AMOUNT15
      , PERCENTAGE_AMOUNT15_SCALE
      , PERCENTAGE_AMOUNT16
      , PERCENTAGE_AMOUNT16_SCALE
      , PERCENTAGE_AMOUNT17
      , PERCENTAGE_AMOUNT17_SCALE
      , PERCENTAGE_AMOUNT18
      , PERCENTAGE_AMOUNT18_SCALE
      , PERCENTAGE_AMOUNT19
      , PERCENTAGE_AMOUNT19_SCALE
      , PERCENTAGE_AMOUNT1
      , PERCENTAGE_AMOUNT1_SCALE
      , PERCENTAGE_AMOUNT20
      , PERCENTAGE_AMOUNT20_SCALE
      , PERCENTAGE_AMOUNT2
      , PERCENTAGE_AMOUNT2_SCALE
      , PERCENTAGE_AMOUNT3
      , PERCENTAGE_AMOUNT3_SCALE
      , PERCENTAGE_AMOUNT4
      , PERCENTAGE_AMOUNT4_SCALE
      , PERCENTAGE_AMOUNT5
      , PERCENTAGE_AMOUNT5_SCALE
      , PERCENTAGE_AMOUNT6
      , PERCENTAGE_AMOUNT6_SCALE
      , PERCENTAGE_AMOUNT7
      , PERCENTAGE_AMOUNT7_SCALE
      , PERCENTAGE_AMOUNT8
      , PERCENTAGE_AMOUNT8_SCALE
      , PERCENTAGE_AMOUNT9
      , PERCENTAGE_AMOUNT9_SCALE
      , STRING10_VALUE
      , STRING11_VALUE
      , STRING12_VALUE
      , STRING13_VALUE
      , STRING14_VALUE
      , STRING15_VALUE
      , STRING16_VALUE
      , STRING17_VALUE
      , STRING18_VALUE
      , STRING19_VALUE
      , STRING1_VALUE
      , STRING20_VALUE
      , STRING2_VALUE
      , STRING3_VALUE
      , STRING4_VALUE
      , STRING5_VALUE
      , STRING6_VALUE
      , STRING7_VALUE
      , STRING8_VALUE
      , STRING9_VALUE
      , AP_ID
      , KIND_ID1
      , KIND_ID10
      , KIND_ID11
      , KIND_ID12
      , KIND_ID13
      , KIND_ID14
      , KIND_ID15
      , KIND_ID16
      , KIND_ID17
      , KIND_ID18
      , KIND_ID19
      , KIND_ID2
      , KIND_ID20
      , KIND_ID3
      , KIND_ID4
      , KIND_ID5
      , KIND_ID6
      , KIND_ID7
      , KIND_ID8
      , KIND_ID9
FROM    TRG02.TBL_APPLICATION_SET_PROPERTY A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_APPLICATION_TX@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , PREV_START_AT
      , PREV_END_AT
      , PREV_IS_REPLACED
      , REINSTATED_TX_NUMBER
      , TX_CODE
      , TX_AT
      , TX_NUMBER
      , LOCK_NO
      , APD_ID
      , ASPD_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , PREV_START_AT
      , PREV_END_AT
      , PREV_IS_REPLACED
      , REINSTATED_TX_NUMBER
      , TX_CODE
      , TX_AT
      , TX_NUMBER
      , LOCK_NO
      , APD_ID
      , ASPD_ID
FROM    TRG02.TBL_APPLICATION_TX A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_BUNDLE_COMPOSITION@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , KEY_INDEX
      , KEY
      , VALUE
      , AGREEMENT_ANCHOR_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , KEY_INDEX
      , KEY
      , VALUE
      , AGREEMENT_ANCHOR_ID
FROM    TRG02.TBL_BUNDLE_COMPOSITION A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_COL_PROPERTY@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , ANUT_TYPE_CODE
      , ANUT_OTPY_STRT_AG
      , ANUT_OTPY_STRT_DATE
      , ANUT_OTPY_TRGT_TYPE_CODE
      , ANUT_STRT_POTM_ACVL_DBRT
      , ANUT_STRT_POTM_ACVL_DBRT_SCALE
      , CRTN_GURT_OTPY_TERM
      , CRTN_GURT_OTPY_TERM_DVSN_CODE
      , ACDT_INUR_CODE
      , CNTC_GNDR_DVSN_CODE
      , CUST_ROLE_CODE
      , DRVN_KNCR_CODE
      , INED_HLTH_STTS_DVSN_CODE
      , INJR_OCKN_CODE
      , INJR_RISK_GRAD_CODE
      , INUR_CODE
      , INUR_JOIN_DVSN_CODE
      , INUR_NO
      , JOIN_AG
      , MINU_RLTS_CODE
      , OCKN_CODE
      , PREM_CALC_APLY_AG
      , RISK_GRAD_CODE
      , ACPY_TERM
      , ACTL_ISRN_TERM
      , CNTC_CNTG_YYMM
      , CNTC_PNTM_GROU_CUST_ID
      , CTDT
      , FRST_CTDT
      , LAST_LAPS_DATE
      , MTRT_DATE
      , PAYM_CYCL_CODE
      , PREM_PDUP_APLB_YYMM
      , SALE_CHNL_CODE
      , TRMN_PRCS_DATE
      , BYPD_PRCS_DVSN_CODE
      , INCV_RNWL_ELAP_NBYR
      , ISRN_FAMT
      , ISRN_FAMT_CURRENCY_CODE
      , ISRN_FAMT_SCALE
      , ISRN_TERM
      , ISRN_TERM_DVSN_CODE
      , PAYM_TERM
      , PAYM_TERM_DVSN_CODE
      , PREM_APLY_DVSN_CODE
      , RNWL_TMTH
      , WITM_YN
      , BNFC_DVSN_CODE
      , BNFC_PROY
      , DONT_GROU_YN
      , RIPT_RATO
      , RIPT_RATO_SCALE
      , AGREEMENT_ID
      , REQUEST_ID
      , ROLE_IN_ACTUAL_ID
      , ANUT_GURT_TERM_TYPE_CODE
      , ANUT_STRT_STTM_DVSN_CODE
      , LNTP_ANUT_BNET_DETL_SQNO
      , LNTP_ANUT_BNET_SQNO
      , ANUT_DTL_TYPE_CODE
      , DETH_RESN_DATE
      , INAC_BSKN_CODE
      , PREM_CORP_SHRA
      , PREM_CORP_SHRA_SCALE
      , ACVL_MGIV_ACCT_DVSN_CODE
      , FRST_ANUT_OTPY_STRT_DATE
      , PREM_PAYM_FORM_CODE
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , ANUT_TYPE_CODE
      , ANUT_OTPY_STRT_AG
      , ANUT_OTPY_STRT_DATE
      , ANUT_OTPY_TRGT_TYPE_CODE
      , ANUT_STRT_POTM_ACVL_DBRT
      , ANUT_STRT_POTM_ACVL_DBRT_SCALE
      , CRTN_GURT_OTPY_TERM
      , CRTN_GURT_OTPY_TERM_DVSN_CODE
      , ACDT_INUR_CODE
      , CNTC_GNDR_DVSN_CODE
      , CUST_ROLE_CODE
      , DRVN_KNCR_CODE
      , INED_HLTH_STTS_DVSN_CODE
      , INJR_OCKN_CODE
      , INJR_RISK_GRAD_CODE
      , INUR_CODE
      , INUR_JOIN_DVSN_CODE
      , INUR_NO
      , JOIN_AG
      , MINU_RLTS_CODE
      , OCKN_CODE
      , PREM_CALC_APLY_AG
      , RISK_GRAD_CODE
      , ACPY_TERM
      , ACTL_ISRN_TERM
      , CNTC_CNTG_YYMM
      , CNTC_PNTM_GROU_CUST_ID
      , CTDT
      , FRST_CTDT
      , LAST_LAPS_DATE
      , MTRT_DATE
      , PAYM_CYCL_CODE
      , PREM_PDUP_APLB_YYMM
      , SALE_CHNL_CODE
      , TRMN_PRCS_DATE
      , BYPD_PRCS_DVSN_CODE
      , INCV_RNWL_ELAP_NBYR
      , ISRN_FAMT
      , ISRN_FAMT_CURRENCY_CODE
      , ISRN_FAMT_SCALE
      , ISRN_TERM
      , ISRN_TERM_DVSN_CODE
      , PAYM_TERM
      , PAYM_TERM_DVSN_CODE
      , PREM_APLY_DVSN_CODE
      , RNWL_TMTH
      , WITM_YN
      , BNFC_DVSN_CODE
      , BNFC_PROY
      , DONT_GROU_YN
      , RIPT_RATO
      , RIPT_RATO_SCALE
      , AGREEMENT_ID
      , REQUEST_ID
      , ROLE_IN_ACTUAL_ID
      , ANUT_GURT_TERM_TYPE_CODE
      , ANUT_STRT_STTM_DVSN_CODE
      , LNTP_ANUT_BNET_DETL_SQNO
      , LNTP_ANUT_BNET_SQNO
      , ANUT_DTL_TYPE_CODE
      , DETH_RESN_DATE
      , INAC_BSKN_CODE
      , PREM_CORP_SHRA
      , PREM_CORP_SHRA_SCALE
      , ACVL_MGIV_ACCT_DVSN_CODE
      , FRST_ANUT_OTPY_STRT_DATE
      , PREM_PAYM_FORM_CODE
FROM    TRG02.TBL_COL_PROPERTY A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_DIVIDEND_PAYMENT_DETAIL@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , ACCRUED_AMOUNT
      , ACCRUED_SCALE
      , ACCRUED_ON
      , ADD_INTEREST_AMOUNT
      , ADD_INTEREST_SCALE
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , CURRENCY_CODE
      , DIVIDEND_KIND_CODE
      , DIV_OCCR_TYPE_CODE
      , EXTERNAL_REF
      , PAYMENT_ID
      , PAYABLE_AMOUNT
      , PAYABLE_SCALE
      , POLICY_NUMBER
      , PAYMENT_COMP_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , ACCRUED_AMOUNT
      , ACCRUED_SCALE
      , ACCRUED_ON
      , ADD_INTEREST_AMOUNT
      , ADD_INTEREST_SCALE
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , CURRENCY_CODE
      , DIVIDEND_KIND_CODE
      , DIV_OCCR_TYPE_CODE
      , EXTERNAL_REF
      , PAYMENT_ID
      , PAYABLE_AMOUNT
      , PAYABLE_SCALE
      , POLICY_NUMBER
      , PAYMENT_COMP_ID
FROM    TRG02.TBL_DIVIDEND_PAYMENT_DETAIL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_FIN_TRAN_RELATIONSHIP@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AMOUNT
      , CURRENCY_CODE
      , SCALE
      , DESCRIPTION
      , START_ON
      , END_ON
      , FIN_TRAN_RELATION_TYPE_CODE
      , RELATION_DIRECTIVE_CODE
      , FROM_PAYMENT_ID
      , FROM_PAYMENT_DUE_ID
      , FROM_PREM_PAYMENT_ID
      , FROM_PREM_PAYMENT_DUE_ID
      , TO_PAYMENT_ID
      , TO_PAYMENT_DUE_ID
      , TO_PREM_PAYMENT_ID
      , TO_PREM_PAYMENT_DUE_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AMOUNT
      , CURRENCY_CODE
      , SCALE
      , DESCRIPTION
      , START_ON
      , END_ON
      , FIN_TRAN_RELATION_TYPE_CODE
      , RELATION_DIRECTIVE_CODE
      , FROM_PAYMENT_ID
      , FROM_PAYMENT_DUE_ID
      , FROM_PREM_PAYMENT_ID
      , FROM_PREM_PAYMENT_DUE_ID
      , TO_PAYMENT_ID
      , TO_PAYMENT_DUE_ID
      , TO_PREM_PAYMENT_ID
      , TO_PREM_PAYMENT_DUE_ID
FROM    TRG02.TBL_FIN_TRAN_RELATIONSHIP A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_IRA@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , DESCRIPTION
      , IS_CANCELLED
      , AGREEMENT_NUMBER
      , LOCK_NO
      , POLICY_NUMBER
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , DESCRIPTION
      , IS_CANCELLED
      , AGREEMENT_NUMBER
      , LOCK_NO
      , POLICY_NUMBER
FROM    TRG02.TBL_IRA A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_IRA_FUND_DTL@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , GROUP_CODE
      , GROUP_INDICATOR
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , IRA_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , GROUP_CODE
      , GROUP_INDICATOR
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , IRA_ID
FROM    TRG02.TBL_IRA_FUND_DTL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_IRA_FUND_ITEM@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , ALLOC_RATE
      , ALLOC_RATE_SCALE
      , FUND_CODE
      , RESERVE_ACCOUNT_TYPE_CODE
      , RESERVE_RATIO
      , RESERVE_RATIO_SCALE
      , DTL_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , ALLOC_RATE
      , ALLOC_RATE_SCALE
      , FUND_CODE
      , RESERVE_ACCOUNT_TYPE_CODE
      , RESERVE_RATIO
      , RESERVE_RATIO_SCALE
      , DTL_ID
FROM    TRG02.TBL_IRA_FUND_ITEM A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONEY_PROV@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , DESCRIPTION
      , END_ON
      , ORIGIN_AGREEMENT_ID
      , POLICY_NUMBER
      , START_ON
      , CREATED_AT
      , REPLACED_AT
      , ANNIVERSARY_ON
      , ANNIVERSARY_TYPE_CODE
      , CURRENCY_CODE
      , FREQUENCY_CODE
      , NEXT_DUE_ON
      , NEXT_NUMBER_OF_PAYMENT_DUES
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , RUN_ON
      , MONEY_PROV_ANCHOR_ID
      , MONEY_SCHEDULER_ID
      , ACCOUNT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , DESCRIPTION
      , END_ON
      , ORIGIN_AGREEMENT_ID
      , POLICY_NUMBER
      , START_ON
      , CREATED_AT
      , REPLACED_AT
      , ANNIVERSARY_ON
      , ANNIVERSARY_TYPE_CODE
      , CURRENCY_CODE
      , FREQUENCY_CODE
      , NEXT_DUE_ON
      , NEXT_NUMBER_OF_PAYMENT_DUES
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , RUN_ON
      , MONEY_PROV_ANCHOR_ID
      , MONEY_SCHEDULER_ID
      , ACCOUNT_ID
FROM    TRG02.TBL_MONEY_PROV A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONEY_PROV_ANCHOR@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
FROM    TRG02.TBL_MONEY_PROV_ANCHOR A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONEY_PROV_ELEMENT@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , DESCRIPTION
      , END_ON
      , EXTERNAL_REF
      , RUN_ON
      , START_ON
      , FIN_ELEMENT_TYPE_CODE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , TARGET_FIN_TRAN_TYPE_CODE
      , ANNIVERSARY_ON
      , ANNIVERSARY_TYPE_CODE
      , FREQUENCY_CODE
      , NEXT_DUE_ON
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , PREM_ELEMENT_RELATION_CODE
      , DUE_ON
      , MONEY_PROV_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , DESCRIPTION
      , END_ON
      , EXTERNAL_REF
      , RUN_ON
      , START_ON
      , FIN_ELEMENT_TYPE_CODE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , TARGET_FIN_TRAN_TYPE_CODE
      , ANNIVERSARY_ON
      , ANNIVERSARY_TYPE_CODE
      , FREQUENCY_CODE
      , NEXT_DUE_ON
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , PREM_ELEMENT_RELATION_CODE
      , DUE_ON
      , MONEY_PROV_ID
FROM    TRG02.TBL_MONEY_PROV_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONEY_PROV_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , MONEY_PROV_STATE_REASON_CODE
      , MONEY_PROV_STATE_CODE
      , MONEY_PROV_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , MONEY_PROV_STATE_REASON_CODE
      , MONEY_PROV_STATE_CODE
      , MONEY_PROV_ID
FROM    TRG02.TBL_MONEY_PROV_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONEY_SCHEDULER@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , ANNIVERSARY_ON
      , ANNIVERSARY_TYPE_CODE
      , DESCRIPTION
      , END_ON
      , FREQUENCE_CODE
      , NEXT_CYCLE_START_ON
      , NEXT_RUN_ON
      , ORIGIN_AGREEMENT_ID
      , PAYMENT_METHOD_CODE
      , POLICY_NUMBER
      , IS_ROLLUP
      , IS_RUN_DATE_ADJ
      , START_ON
      , GRACE_PERIOD
      , COLLECTION_METHOD_CODE
      , LATEST_NUMBER_OF_PAYMENT_DUES
      , LATEST_PAYMENT_DUE_PERIOD
      , PAYMENT_DUE_PERIOD_END
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , ANNIVERSARY_ON
      , ANNIVERSARY_TYPE_CODE
      , DESCRIPTION
      , END_ON
      , FREQUENCE_CODE
      , NEXT_CYCLE_START_ON
      , NEXT_RUN_ON
      , ORIGIN_AGREEMENT_ID
      , PAYMENT_METHOD_CODE
      , POLICY_NUMBER
      , IS_ROLLUP
      , IS_RUN_DATE_ADJ
      , START_ON
      , GRACE_PERIOD
      , COLLECTION_METHOD_CODE
      , LATEST_NUMBER_OF_PAYMENT_DUES
      , LATEST_PAYMENT_DUE_PERIOD
      , PAYMENT_DUE_PERIOD_END
FROM    TRG02.TBL_MONEY_SCHEDULER A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONEY_SCHEDULER_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , MONEY_SCHE_STATE_REASON_CODE
      , MONEY_SCHEDULER_STATE_CODE
      , MONEY_SCHEDULER_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_ON
      , END_ON
      , CREATED_AT
      , REPLACED_AT
      , MONEY_SCHE_STATE_REASON_CODE
      , MONEY_SCHEDULER_STATE_CODE
      , MONEY_SCHEDULER_ID
FROM    TRG02.TBL_MONEY_SCHEDULER_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONTHLY_FINFR_RESERVE@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , BASE_ON
      , MAINCVR_PREM_AMOUNT
      , MAINCVR_PREM_SCALE
      , NUMBER_OF_SUBST_PAYMENTS
      , ORG_MAINCVR_PREM_AMOUNT
      , ORG_MAINCVR_PREM_SCALE
      , PROD_CLSF_CODE
      , SUBST_PAYMENT_PERIOD
      , TOT_ORGRIDER_PREM_AMOUNT
      , TOT_ORGRIDER_PREM_SCALE
      , TOT_RIDER_PREM_AMOUNT
      , TOT_RIDER_PREM_SCALE
      , MONTHLY_FIN_MIS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , BASE_ON
      , MAINCVR_PREM_AMOUNT
      , MAINCVR_PREM_SCALE
      , NUMBER_OF_SUBST_PAYMENTS
      , ORG_MAINCVR_PREM_AMOUNT
      , ORG_MAINCVR_PREM_SCALE
      , PROD_CLSF_CODE
      , SUBST_PAYMENT_PERIOD
      , TOT_ORGRIDER_PREM_AMOUNT
      , TOT_ORGRIDER_PREM_SCALE
      , TOT_RIDER_PREM_AMOUNT
      , TOT_RIDER_PREM_SCALE
      , MONTHLY_FIN_MIS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
FROM    TRG02.TBL_MONTHLY_FINFR_RESERVE A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONTHLY_FINREV_COMP@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , BASE_ON
      , MAINCVR_PREM_AMOUNT
      , MAINCVR_PREM_SCALE
      , NUMBER_OF_SUBST_PAYMENTS
      , ORG_MAINCVR_PREM_AMOUNT
      , ORG_MAINCVR_PREM_SCALE
      , PROD_CLSF_CODE
      , SUBST_PAYMENT_PERIOD
      , TOT_ORGRIDER_PREM_AMOUNT
      , TOT_ORGRIDER_PREM_SCALE
      , TOT_RIDER_PREM_AMOUNT
      , TOT_RIDER_PREM_SCALE
      , PARENT_COMP_ID
      , MONTHLY_FINREV_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , BASE_ON
      , MAINCVR_PREM_AMOUNT
      , MAINCVR_PREM_SCALE
      , NUMBER_OF_SUBST_PAYMENTS
      , ORG_MAINCVR_PREM_AMOUNT
      , ORG_MAINCVR_PREM_SCALE
      , PROD_CLSF_CODE
      , SUBST_PAYMENT_PERIOD
      , TOT_ORGRIDER_PREM_AMOUNT
      , TOT_ORGRIDER_PREM_SCALE
      , TOT_RIDER_PREM_AMOUNT
      , TOT_RIDER_PREM_SCALE
      , PARENT_COMP_ID
      , MONTHLY_FINREV_ID
FROM    TRG02.TBL_MONTHLY_FINREV_COMP A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_MONTHLY_FIN_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , MONTHLY_FIN_STATE_REASON_CODE
      , MONTHLY_FIN_STATE_CODE
      , MONTHLY_FIN_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , MONTHLY_FIN_STATE_REASON_CODE
      , MONTHLY_FIN_STATE_CODE
      , MONTHLY_FIN_ID
FROM    TRG02.TBL_MONTHLY_FIN_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAPTY.TBL_PARTY_ROLE@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , EXTERNAL_REF
      , CONTEXT_DOMAIN_TYPE
      , CONTEXT_REFERENCE
      , PARTY_ROLE_TYPE_CODE
      , PARTY_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , EXTERNAL_REF
      , CONTEXT_DOMAIN_TYPE
      , CONTEXT_REFERENCE
      , PARTY_ROLE_TYPE_CODE
      , PARTY_ID
FROM    TRG02.TBL_PARTY_ROLE A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PAYMENT@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DEPOSIT_ON
      , DETAILED_DESCRIPTION
      , PAYMENT_ON
      , REJECTION_ON
      , REJECTION_REASON_CODE
      , VALUE_ON
      , COLLECTION_METHOD_CODE
      , PAYMENT_METHOD_CODE
      , PRODUCT_CODE
      , PRODUCT_DETAIL_CODE
      , DEDUCTIBLE_AMOUNT
      , DEDUCTIBLE_SCALE
      , NUM_OF_PREPAID_PREM
      , NUM_OF_UNPAID_PREM
      , PAYABLE_AMOUNT
      , PAYABLE_SCALE
      , APPLIED_NUM_OF_PAYMENTS
      , BENEFICIARY_ID
      , CLAIM_NOTI_REF
      , COLLECTING_FP_NUMBER
      , COLLECTING_ORG_CODE
      , ELAPSED_MONTHS
      , IS_SHARE_PAYMAENT
      , LAST_NUMBER_OF_PAYMENTS
      , LAST_PAYMENT_PERIOD
      , LAST_POSTED_ON
      , LAST_RECEIPT_ON
      , LOAN_REPAYMENT_ID
      , PAYMENT_DETAILED_REASON_CODE
      , PAYMENT_PROC_TYPE_CODE
      , PAYMENT_REASON_CODE
      , REFUND_REASON_CODE
      , PAYMENT_MIS_ID
      , PAYMENT_MOS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
      , PAYMENT_PROCESSING_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DEPOSIT_ON
      , DETAILED_DESCRIPTION
      , PAYMENT_ON
      , REJECTION_ON
      , REJECTION_REASON_CODE
      , VALUE_ON
      , COLLECTION_METHOD_CODE
      , PAYMENT_METHOD_CODE
      , PRODUCT_CODE
      , PRODUCT_DETAIL_CODE
      , DEDUCTIBLE_AMOUNT
      , DEDUCTIBLE_SCALE
      , NUM_OF_PREPAID_PREM
      , NUM_OF_UNPAID_PREM
      , PAYABLE_AMOUNT
      , PAYABLE_SCALE
      , APPLIED_NUM_OF_PAYMENTS
      , BENEFICIARY_ID
      , CLAIM_NOTI_REF
      , COLLECTING_FP_NUMBER
      , COLLECTING_ORG_CODE
      , ELAPSED_MONTHS
      , IS_SHARE_PAYMAENT
      , LAST_NUMBER_OF_PAYMENTS
      , LAST_PAYMENT_PERIOD
      , LAST_POSTED_ON
      , LAST_RECEIPT_ON
      , LOAN_REPAYMENT_ID
      , PAYMENT_DETAILED_REASON_CODE
      , PAYMENT_PROC_TYPE_CODE
      , PAYMENT_REASON_CODE
      , REFUND_REASON_CODE
      , PAYMENT_MIS_ID
      , PAYMENT_MOS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
      , PAYMENT_PROCESSING_ID
FROM    TRG02.TBL_PAYMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PAYMENT_COMP@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , PRODUCT_CODE
      , PRODUCT_DETAIL_CODE
      , DEDUCTIBLE_AMOUNT
      , DEDUCTIBLE_SCALE
      , PAYABLE_AMOUNT
      , PAYABLE_SCALE
      , PAYMENT_DETAILED_REASON_CODE
      , PAYMENT_REASON_CODE
      , APPLIED_INT_RATE
      , APPLIED_INT_RATE_SCALE
      , NUM_OF_PREPAID_PREM
      , NUM_OF_UNPAID_PREM
      , POLICY_ELAPSED_DAYS
      , POLICY_ELAPSED_MONTHS
      , POLICY_ELAPSED_YEARS
      , ADD_RESERVE_AMOUNT
      , ADD_RESERVE_SCALE
      , ADD_RESERVE_WITHDRAW_AMOUNT
      , ADD_RESERVE_WITHDRAW_SCALE
      , BASE_RESERVE_AMOUNT
      , BASE_RESERVE_SCALE
      , DIS_APPLIED_DAYS
      , DIS_APPLIED_YEARS
      , GUARANTEED_PAYM_TERM
      , INST_PAYM_FREQUENCY_CODE
      , INST_PAYM_TYPE_CODE
      , IS_ADV_PAYMENT
      , IS_GUARANTEED_PAYM
      , IS_LUMSUM_PAYMENT
      , IS_MISTAKEN_PAYM_EXCLUDED
      , IS_PAY_BACK
      , LUMSUM_PAYM_DISRATE
      , LUMSUM_PAYM_DISRATE_SCALE
      , NUM_OF_INST_PAYMENT
      , OCCURRENCE_ON
      , ORIG_OCCURRENCE_ON
      , TOT_NUM_INST_PAYMENT
      , DIVIDEND_KIND_CODE
      , DIVIDEND_PAYM_METHOD_CODE
      , FIRST_PAYMENT_ACCR_PERIOD
      , LAST_PAYMENT_ACCR_PERIOD
      , PREM_OFFSET_END_NUM
      , PREM_OFFSET_START_NUM
      , TER_YEAR_ACCR_PERIOD
      , IS_PAYMENT_WAIVED
      , PAYMENT_WAIVED_MONTHS
      , PAYMENT_WAIVED_START_ON
      , WAIVER_METHOD_CODE
      , PARENT_COMP_ID
      , PAYMENT_ID
--      , LAST_NUMBER_OF_PAYMENTS
--      , LAST_PAYMENT_PERIOD
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , PRODUCT_CODE
      , PRODUCT_DETAIL_CODE
      , DEDUCTIBLE_AMOUNT
      , DEDUCTIBLE_SCALE
      , PAYABLE_AMOUNT
      , PAYABLE_SCALE
      , PAYMENT_DETAILED_REASON_CODE
      , PAYMENT_REASON_CODE
      , APPLIED_INT_RATE
      , APPLIED_INT_RATE_SCALE
      , NUM_OF_PREPAID_PREM
      , NUM_OF_UNPAID_PREM
      , POLICY_ELAPSED_DAYS
      , POLICY_ELAPSED_MONTHS
      , POLICY_ELAPSED_YEARS
      , ADD_RESERVE_AMOUNT
      , ADD_RESERVE_SCALE
      , ADD_RESERVE_WITHDRAW_AMOUNT
      , ADD_RESERVE_WITHDRAW_SCALE
      , BASE_RESERVE_AMOUNT
      , BASE_RESERVE_SCALE
      , DIS_APPLIED_DAYS
      , DIS_APPLIED_YEARS
      , GUARANTEED_PAYM_TERM
      , INST_PAYM_FREQUENCY_CODE
      , INST_PAYM_TYPE_CODE
      , IS_ADV_PAYMENT
      , IS_GUARANTEED_PAYM
      , IS_LUMSUM_PAYMENT
      , IS_MISTAKEN_PAYM_EXCLUDED
      , IS_PAY_BACK
      , LUMSUM_PAYM_DISRATE
      , LUMSUM_PAYM_DISRATE_SCALE
      , NUM_OF_INST_PAYMENT
      , OCCURRENCE_ON
      , ORIG_OCCURRENCE_ON
      , TOT_NUM_INST_PAYMENT
      , DIVIDEND_KIND_CODE
      , DIVIDEND_PAYM_METHOD_CODE
      , FIRST_PAYMENT_ACCR_PERIOD
      , LAST_PAYMENT_ACCR_PERIOD
      , PREM_OFFSET_END_NUM
      , PREM_OFFSET_START_NUM
      , TER_YEAR_ACCR_PERIOD
      , IS_PAYMENT_WAIVED
      , PAYMENT_WAIVED_MONTHS
      , PAYMENT_WAIVED_START_ON
      , WAIVER_METHOD_CODE
      , PARENT_COMP_ID
      , PAYMENT_ID
--      , LAST_NUMBER_OF_PAYMENTS
--      , LAST_PAYMENT_PERIOD
FROM    TRG02.TBL_PAYMENT_COMP A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PAYMENT_COMP_ELEMENT@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , PAYMENT_ELEMENT_RELATION_CODE
      , APPLIED_DAYS
      , APPLIED_INT_RATE
      , APPLIED_INT_RATE_SCALE
      , BASE_AMOUNT_AF_CHANGE
      , BASE_AF_CHANGE_SCALE
      , BASE_AMOUNT_BF_CHANGE
      , BASE_BF_CHANGE_SCALE
      , POLICY_CHANGE_CALC_TYPE_CODE
      , PAYMENT_COMP_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , PAYMENT_ELEMENT_RELATION_CODE
      , APPLIED_DAYS
      , APPLIED_INT_RATE
      , APPLIED_INT_RATE_SCALE
      , BASE_AMOUNT_AF_CHANGE
      , BASE_AF_CHANGE_SCALE
      , BASE_AMOUNT_BF_CHANGE
      , BASE_BF_CHANGE_SCALE
      , POLICY_CHANGE_CALC_TYPE_CODE
      , PAYMENT_COMP_ID
FROM    TRG02.TBL_PAYMENT_COMP_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PAYMENT_ELEMENT@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , PAYMENT_ELEMENT_RELATION_CODE
      , APPLIED_DAYS
      , APPLIED_INT_RATE
      , APPLIED_INT_RATE_SCALE
      , BASE_AMOUNT_AF_CHANGE
      , BASE_AF_CHANGE_SCALE
      , BASE_AMOUNT_BF_CHANGE
      , BASE_BF_CHANGE_SCALE
      , POLICY_CHANGE_CALC_TYPE_CODE
      , PAYMENT_ID
      , POLICY_CHANGE_ACCT_TYPE_CODE
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , PAYMENT_ELEMENT_RELATION_CODE
      , APPLIED_DAYS
      , APPLIED_INT_RATE
      , APPLIED_INT_RATE_SCALE
      , BASE_AMOUNT_AF_CHANGE
      , BASE_AF_CHANGE_SCALE
      , BASE_AMOUNT_BF_CHANGE
      , BASE_BF_CHANGE_SCALE
      , POLICY_CHANGE_CALC_TYPE_CODE
      , PAYMENT_ID
      , POLICY_CHANGE_ACCT_TYPE_CODE
FROM    TRG02.TBL_PAYMENT_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PAYMENT_PROCESSING@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , APPLICATION_METHOD_CODE
      , BANK_ACCOUNT_INFO_ID
      , BANK_ACCOUNT_INFO_TYPE_CODE
      , COLLECTION_METHOD_CODE
      , DESCRIPTION
      , DUE_AMOUNT
      , DUE_CURRENCY_CODE
      , DUE_SCALE
      , DUE_ON
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , IS_DELEGATE_RECEIPIENT
      , OUTG_PAYMENT_ORG_CODE
      , PAYEE_DESCRIPTION
      , PAYEE_ID
      , PAYEE_TYPE_CODE
      , PAYER_DESCRIPTION
      , PAYER_ID
      , PAYER_TYPE_CODE
      , PAYMENT_AMOUNT
      , PAYMENT_CURRENCY_CODE
      , PAYMENT_SCALE
      , PAYMENT_ON
      , PAYMENT_DIRECTIVE_CODE
      , PAYMENT_METHOD_CODE
      , PAYMENT_PROCESSING_NUMBER
      , RECEIPT_ON
      , RECEIPT_ISSUE_ON
      , RECEIPT_NUMBER
      , RECEIPT_RETURN_ON
      , REQUEST_AT
      , TRANSFER_FEE_AMOUNT
      , TRANSFER_FEE_SCALE
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , APPLICATION_METHOD_CODE
      , BANK_ACCOUNT_INFO_ID
      , BANK_ACCOUNT_INFO_TYPE_CODE
      , COLLECTION_METHOD_CODE
      , DESCRIPTION
      , DUE_AMOUNT
      , DUE_CURRENCY_CODE
      , DUE_SCALE
      , DUE_ON
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , IS_DELEGATE_RECEIPIENT
      , OUTG_PAYMENT_ORG_CODE
      , PAYEE_DESCRIPTION
      , PAYEE_ID
      , PAYEE_TYPE_CODE
      , PAYER_DESCRIPTION
      , PAYER_ID
      , PAYER_TYPE_CODE
      , PAYMENT_AMOUNT
      , PAYMENT_CURRENCY_CODE
      , PAYMENT_SCALE
      , PAYMENT_ON
      , PAYMENT_DIRECTIVE_CODE
      , PAYMENT_METHOD_CODE
      , PAYMENT_PROCESSING_NUMBER
      , RECEIPT_ON
      , RECEIPT_ISSUE_ON
      , RECEIPT_NUMBER
      , RECEIPT_RETURN_ON
      , REQUEST_AT
      , TRANSFER_FEE_AMOUNT
      , TRANSFER_FEE_SCALE
FROM    TRG02.TBL_PAYMENT_PROCESSING A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PAYMENT_PROCESSING_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , PAYMENT_PROC_STATE_REASON_CODE
      , RESOLVE_PENDING_ON
      , PAYMENT_PROCESSING_STATE_CODE
      , PAYMENT_PROCESSING_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , PAYMENT_PROC_STATE_REASON_CODE
      , RESOLVE_PENDING_ON
      , PAYMENT_PROCESSING_STATE_CODE
      , PAYMENT_PROCESSING_ID
FROM    TRG02.TBL_PAYMENT_PROCESSING_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PAYMENT_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PAYMENT_STATE_REASON_CODE
      , PAYMENT_STATE_CODE
      , PAYMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PAYMENT_STATE_REASON_CODE
      , PAYMENT_STATE_CODE
      , PAYMENT_ID
FROM    TRG02.TBL_PAYMENT_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_POLICY_LOAN_PAYMENT@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DEPOSIT_ON
      , DETAILED_DESCRIPTION
      , PAYMENT_ON
      , REJECTION_ON
      , REJECTION_REASON_CODE
      , VALUE_ON
      , IS_PROC_IN_ADVANCE
      , LOAN_BALANCE_AMOUNT
      , LOAN_BALANCE_SCALE
      , LOAN_REPAYM_METHOD_CODE
      , POLICY_LOAN_ID
      , SURRENDER_VALUE_AMOUNT
      , SURRENDER_VALUE_SCALE
      , PAYMENT_PROCESSING_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DEPOSIT_ON
      , DETAILED_DESCRIPTION
      , PAYMENT_ON
      , REJECTION_ON
      , REJECTION_REASON_CODE
      , VALUE_ON
      , IS_PROC_IN_ADVANCE
      , LOAN_BALANCE_AMOUNT
      , LOAN_BALANCE_SCALE
      , LOAN_REPAYM_METHOD_CODE
      , POLICY_LOAN_ID
      , SURRENDER_VALUE_AMOUNT
      , SURRENDER_VALUE_SCALE
      , PAYMENT_PROCESSING_ID
FROM    TRG02.TBL_POLICY_LOAN_PAYMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_POLOAN_PAYMENT_ELEMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_DAYS
      , CALC_END_ON
      , CALC_START_ON
      , LOAN_ELEMENT_RELATION_CODE
      , POLICY_LOAN_PAYMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_DAYS
      , CALC_END_ON
      , CALC_START_ON
      , LOAN_ELEMENT_RELATION_CODE
      , POLICY_LOAN_PAYMENT_ID
FROM    TRG02.TBL_POLOAN_PAYMENT_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_POLOAN_PAYM_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PLOAN_PAYM_STATE_REASON_CODE
      , PLOAN_PAYMENT_STATE_CODE
      , POLICY_LOAN_PAYMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PLOAN_PAYM_STATE_REASON_CODE
      , PLOAN_PAYMENT_STATE_CODE
      , POLICY_LOAN_PAYMENT_ID
FROM    TRG02.TBL_POLOAN_PAYM_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_PREMIUM_PLAN@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , PREM_PLAN_TYPE_CODE
      , APPLICATION_DATE
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , APPL_EMP_NUMBER
      , APPL_ORG_CODE
      , PAYMENT_PLAN_END_ON
      , END_EMP_NUMBER
      , END_ORG_CODE
      , END_REASON_CODE
      , END_YM
      , PAYMENT_GRACE_RATE
      , PAYMENT_GRACE_RATE_SCALE
      , START_YM
      , AGREEMENT_ANCHOR_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , PREM_PLAN_TYPE_CODE
      , APPLICATION_DATE
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , APPL_EMP_NUMBER
      , APPL_ORG_CODE
      , PAYMENT_PLAN_END_ON
      , END_EMP_NUMBER
      , END_ORG_CODE
      , END_REASON_CODE
      , END_YM
      , PAYMENT_GRACE_RATE
      , PAYMENT_GRACE_RATE_SCALE
      , START_YM
      , AGREEMENT_ANCHOR_ID
FROM    TRG02.TBL_PREMIUM_PLAN A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_PREMIUM_PLAN_TX@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , PREV_START_AT
      , PREV_END_AT
      , PREV_IS_REPLACED
      , REINSTATED_TX_NUMBER
      , TX_CODE
      , TX_AT
      , TX_NUMBER
      , LOCK_NO
      , PREMIUM_PLAN_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , PREV_START_AT
      , PREV_END_AT
      , PREV_IS_REPLACED
      , REINSTATED_TX_NUMBER
      , TX_CODE
      , TX_AT
      , TX_NUMBER
      , LOCK_NO
      , PREMIUM_PLAN_ID
FROM    TRG02.TBL_PREMIUM_PLAN_TX A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREMPAYM_DUE_COMP_ELEMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_DUE_COMP_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_DUE_COMP_ID
FROM    TRG02.TBL_PREMPAYM_DUE_COMP_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DEPOSIT_ON
      , DETAILED_DESCRIPTION
      , PAYMENT_ON
      , REJECTION_ON
      , REJECTION_REASON_CODE
      , VALUE_ON
      , COLLECTING_FP_NUMBER
      , COLLECTING_ORG_CODE
      , COLLECTION_METHOD_CODE
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , ORIG_RIDER_PREM_AMOUNT
      , ORIG_RIDER_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_FREQUENCY_CODE
      , PAYMENT_METHOD_TYPE_CODE
      , PAYMENT_PERIOD
      , PAYMENT_STATE_TYPE_CODE
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PROCESSING_FP_NUMBER
      , PROCESSING_ORG_CODE
      , RECEIPT_ON
      , PREM_PAYMENT_MIS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
      , PAYMENT_PROCESSING_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DEPOSIT_ON
      , DETAILED_DESCRIPTION
      , PAYMENT_ON
      , REJECTION_ON
      , REJECTION_REASON_CODE
      , VALUE_ON
      , COLLECTING_FP_NUMBER
      , COLLECTING_ORG_CODE
      , COLLECTION_METHOD_CODE
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , ORIG_RIDER_PREM_AMOUNT
      , ORIG_RIDER_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_FREQUENCY_CODE
      , PAYMENT_METHOD_TYPE_CODE
      , PAYMENT_PERIOD
      , PAYMENT_STATE_TYPE_CODE
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PROCESSING_FP_NUMBER
      , PROCESSING_ORG_CODE
      , RECEIPT_ON
      , PREM_PAYMENT_MIS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
      , PAYMENT_PROCESSING_ID
FROM    TRG02.TBL_PREM_PAYMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_COMP@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_PERIOD
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PARENT_COMP_ID
      , MONEY_PROV_ID
      , PREM_PAYMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_PERIOD
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PARENT_COMP_ID
      , MONEY_PROV_ID
      , PREM_PAYMENT_ID
FROM    TRG02.TBL_PREM_PAYMENT_COMP A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_COMP_ELEMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_COMP_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_COMP_ID
FROM    TRG02.TBL_PREM_PAYMENT_COMP_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_DUE@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DUE_ON
      , ISSUE_ON
      , PAYMENT_DUE_PERIOD_END_ON
      , PAYMENT_DUE_PERIOD_START_ON
      , WRITTEN_OFF_ON
      , CANCELLATION_REASON_CODE
      , COLLECTION_METHOD_CODE
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , ORIG_RIDER_PREM_AMOUNT
      , ORIG_RIDER_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_METHOD_CODE
      , PAYMENT_PERIOD
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PREM_PAYMENT_DUE_MIS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
      , PAYMENT_PROCESSING_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CONTRACT_PROC_NUMBER
      , CURRENCY_CODE
      , DESCRIPTION
      , EXTERNAL_REF
      , FIN_TRAN_TYPE_CODE
      , INN_REF
      , INN_REF_TYPE_CODE
      , MONEY_PROV_ELEMENT_ID
      , MONEY_PROV_ELEMENT_TYPE_CODE
      , POLICY_NUMBER
      , POSTED_ON
      , DUE_ON
      , ISSUE_ON
      , PAYMENT_DUE_PERIOD_END_ON
      , PAYMENT_DUE_PERIOD_START_ON
      , WRITTEN_OFF_ON
      , CANCELLATION_REASON_CODE
      , COLLECTION_METHOD_CODE
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , ORIG_RIDER_PREM_AMOUNT
      , ORIG_RIDER_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_METHOD_CODE
      , PAYMENT_PERIOD
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PREM_PAYMENT_DUE_MIS_ID
      , MONEY_PROV_ID
      , MONEY_SCHEDULER_EXECUTION_ID
      , PAYMENT_PROCESSING_ID
FROM    TRG02.TBL_PREM_PAYMENT_DUE A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_DUE_COMP@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_PERIOD
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PARENT_COMP_ID
      , MONEY_PROV_ID
      , PREM_PAYMENT_DUE_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , AMOUNT
      , SCALE
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INN_REF
      , INN_REF_TYPE_CODE
      , POLICY_NUMBER
      , END_OF_PAYMENT_PERIOD
      , NUMBER_OF_PAYMENTS
      , ORIG_PREMIUM_AMOUNT
      , ORIG_PREM_SCALE
      , OVERDUE_INTEREST_AMOUNT
      , OVERDUE_INTEREST_SCALE
      , PAYMENT_PERIOD
      , PREMIUM_AMOUNT
      , PREM_SCALE
      , PREMIUM_KIND_TYPE_CODE
      , PREPAID_DISCOUNT_AMOUNT
      , PREPAID_DISCOUNT_SCALE
      , PARENT_COMP_ID
      , MONEY_PROV_ID
      , PREM_PAYMENT_DUE_ID
FROM    TRG02.TBL_PREM_PAYMENT_DUE_COMP A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_DUE_ELEMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_DUE_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_DUE_ID
FROM    TRG02.TBL_PREM_PAYMENT_DUE_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_DUE_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PREMPAYM_DUE_STATE_REASON_CODE
      , PREM_PAYMENT_DUE_STATE_CODE
      , PREM_PAYMENT_DUE_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PREMPAYM_DUE_STATE_REASON_CODE
      , PREM_PAYMENT_DUE_STATE_CODE
      , PREM_PAYMENT_DUE_ID
FROM    TRG02.TBL_PREM_PAYMENT_DUE_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_ELEMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , BASE_AMOUNT
      , BASE_CURRENCY_CODE
      , BASE_SCALE
      , FIN_ELEMENT_TYPE_CODE
      , APPLIED_RATE
      , APPLIED_RATE_SCALE
      , FIN_ELEMENT_TYPE_KIND_CODE
      , PREM_ELEMENT_RELATION_CODE
      , PREM_PAYMENT_ID
FROM    TRG02.TBL_PREM_PAYMENT_ELEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_PREM_PAYMENT_STATUS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PAYMENT_STATE_REASON_CODE
      , PAYMENT_STATE_CODE
      , PREM_PAYMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , DESCRIPTION
      , START_AT
      , END_AT
      , ADDITIONAL_DESCRIPTION
      , RESOLVE_PENDING_ON
      , PAYMENT_STATE_REASON_CODE
      , PAYMENT_STATE_CODE
      , PREM_PAYMENT_ID
FROM    TRG02.TBL_PREM_PAYMENT_STATUS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_PROPERTY@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , STRING_VALUE
      , AMOUNT
      , AMOUNT_SCALE
      , BIGDECIMAL_VALUE
      , BOOLEAN_VALUE
      , PERCENTAGE_AMOUNT
      , PERCENTAGE_AMOUNT_SCALE
      , DATE_VALUE
      , INTEGER_VALUE
      , DATETIME_VALUE
      , CURRENCY_AMOUNT
      , CURRENCY_AMOUNT_CURRENCY_CODE
      , CURRENCY_AMOUNT_SCALE
      , AGREEMENT_ID
      , KIND_ID
      , REQUEST_ID
      , ROLE_IN_ACTUAL_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , STRING_VALUE
      , AMOUNT
      , AMOUNT_SCALE
      , BIGDECIMAL_VALUE
      , BOOLEAN_VALUE
      , PERCENTAGE_AMOUNT
      , PERCENTAGE_AMOUNT_SCALE
      , DATE_VALUE
      , INTEGER_VALUE
      , DATETIME_VALUE
      , CURRENCY_AMOUNT
      , CURRENCY_AMOUNT_CURRENCY_CODE
      , CURRENCY_AMOUNT_SCALE
      , AGREEMENT_ID
      , KIND_ID
      , REQUEST_ID
      , ROLE_IN_ACTUAL_ID
FROM    TRG02.TBL_PROPERTY A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_RA@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , DESCRIPTION
      , IS_CANCELLED
      , AGREEMENT_NUMBER
      , LOCK_NO
      , POLICY_NUMBER
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , DESCRIPTION
      , IS_CANCELLED
      , AGREEMENT_NUMBER
      , LOCK_NO
      , POLICY_NUMBER
FROM    TRG02.TBL_RA A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_RA_FP_DTL@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , FP_TYPE_CODE
      , FP_INDICATOR
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , CNT_FP_CNTRBT_RATE
      , CNT_FP_CNTRBT_RATE_SCALE
      , FP_NUMBER
      , IS_MAIN_FP
      , ORG_CODE
      , RA_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , FP_TYPE_CODE
      , FP_INDICATOR
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , CNT_FP_CNTRBT_RATE
      , CNT_FP_CNTRBT_RATE_SCALE
      , FP_NUMBER
      , IS_MAIN_FP
      , ORG_CODE
      , RA_ID
FROM    TRG02.TBL_RA_FP_DTL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_RA_PLCY_SUPP_DTL@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , GROUP_CODE
      , GROUP_INDICATOR
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , BRTH_SCDL_ON
      , GROUP_CONTRACT_NUMBER
      , GRP_MBR_HLTH_INS_ENT_TYPE_CODE
      , GRP_PLCY_ENT_TYPE_CODE
      , INDV_GRP_SALES_TYPE_CODE
      , IS_AVL_TAX_INCENTIVE_APPL
      , IS_CORP_PLCYHOLDER
      , IS_JOIN_ADV_OUT_PYMT_AT_DEATH
      , IS_JOIN_CNV_TO_ANN
      , IS_JOIN_TAX_INCENTIVE
      , IS_NON_TAXATION_PRODUCT
      , IS_TAXATION
      , TAX_INCENTIVE_MAIN_KIND_CODE
      , RA_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , BASE_TX_AT
      , BASE_TX_NUMBER
      , GROUP_CODE
      , GROUP_INDICATOR
      , IS_REPLACED
      , START_AT
      , END_AT
      , LOCK_NO
      , BRTH_SCDL_ON
      , GROUP_CONTRACT_NUMBER
      , GRP_MBR_HLTH_INS_ENT_TYPE_CODE
      , GRP_PLCY_ENT_TYPE_CODE
      , INDV_GRP_SALES_TYPE_CODE
      , IS_AVL_TAX_INCENTIVE_APPL
      , IS_CORP_PLCYHOLDER
      , IS_JOIN_ADV_OUT_PYMT_AT_DEATH
      , IS_JOIN_CNV_TO_ANN
      , IS_JOIN_TAX_INCENTIVE
      , IS_NON_TAXATION_PRODUCT
      , IS_TAXATION
      , TAX_INCENTIVE_MAIN_KIND_CODE
      , RA_ID
FROM    TRG02.TBL_RA_PLCY_SUPP_DTL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_RA_TX@DL_DVRF A
(
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , PREV_START_AT
      , PREV_END_AT
      , PREV_IS_REPLACED
      , REINSTATED_TX_NUMBER
      , TX_CODE
      , TX_AT
      , TX_NUMBER
      , LOCK_NO
      , FUND_ID
      , PLCY_SUPP_ID
      , ANN_CALC_ID
      , FP_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        DTYPE
      , ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , PREV_START_AT
      , PREV_END_AT
      , PREV_IS_REPLACED
      , REINSTATED_TX_NUMBER
      , TX_CODE
      , TX_AT
      , TX_NUMBER
      , LOCK_NO
      , FUND_ID
      , PLCY_SUPP_ID
      , ANN_CALC_ID
      , FP_ID
FROM    TRG02.TBL_RA_TX A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_REQUEST@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , EXECUTED_AT
      , PSM_CODE
      , REQUEST_AT
      , REQUEST_STATE_CODE
      , REQUESTED_AT
      , KIND_ID
      , REQUEST_CONTAINER_ID
      , RESULT_TLA_ID
      , TARGET_TLA_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , EXECUTED_AT
      , PSM_CODE
      , REQUEST_AT
      , REQUEST_STATE_CODE
      , REQUESTED_AT
      , KIND_ID
      , REQUEST_CONTAINER_ID
      , RESULT_TLA_ID
      , TARGET_TLA_ID
FROM    TRG02.TBL_REQUEST A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_REQUEST_CONTAINER@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , CONTRACT_PROC_NUMBER
      , MAIN_REQUEST_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , CONTRACT_PROC_NUMBER
      , MAIN_REQUEST_ID
FROM    TRG02.TBL_REQUEST_CONTAINER A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_REQUEST_LCS@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , CREATED_AT
      , REPLACEMENT_AT
      , STATE_CODE
      , REQUEST_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , CREATED_AT
      , REPLACEMENT_AT
      , STATE_CODE
      , REQUEST_ID
FROM    TRG02.TBL_REQUEST_LCS A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_ROLE_IN_ACTUAL@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , END_AT
      , INDEX_IN_ACTUAL
      , ROLE_NUMBER
      , ROLE_PLAYER_REFERENCE
      , ROLE_PLAYER_TYPE_CODE
      , START_AT
      , KIND_ID
      , ORIGIN_AGREEMENT_ID
      , ORIGIN_REQUEST_ID
      , TARGET_ROLE_IN_ACTUAL_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , SPEC_UUID
      , END_AT
      , INDEX_IN_ACTUAL
      , ROLE_NUMBER
      , ROLE_PLAYER_REFERENCE
      , ROLE_PLAYER_TYPE_CODE
      , START_AT
      , KIND_ID
      , ORIGIN_AGREEMENT_ID
      , ORIGIN_REQUEST_ID
      , TARGET_ROLE_IN_ACTUAL_ID
FROM    TRG02.TBL_ROLE_IN_ACTUAL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_TLA_CHILD_REL@DL_DVRF A
(
        PARENT_TLA_ID
      , TLA_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        PARENT_TLA_ID
      , TLA_ID
FROM    TRG02.TBL_TLA_CHILD_REL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_TOP_LEVEL_AGREEMENT@DL_DVRF A
(
        POLICY_NUMBER
      , QUOTATION_NUMBER
      , SALES_PRODUCT_CODE
      , IS_TEMPLATE
      , ID
      , AGREEMENT_VERSION_ID
      , MAJOR_AGREEMENT_VERSION_ID
      , ORIGIN_PARENT_TLA_ID
      , REQUEST_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        POLICY_NUMBER
      , QUOTATION_NUMBER
      , SALES_PRODUCT_CODE
      , IS_TEMPLATE
      , ID
      , AGREEMENT_VERSION_ID
      , MAJOR_AGREEMENT_VERSION_ID
      , ORIGIN_PARENT_TLA_ID
      , REQUEST_ID
FROM    TRG02.TBL_TOP_LEVEL_AGREEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_VAO_PREM_COLL@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , AGREEMENT_NUMBER
      , LOCK_NO
      , POLICY_NUMBER
      , COLLECTION_METHOD_CODE
      , GROUP_COLLECTION_MGMT_NUMBER
      , LAST_NUMBER_OF_PYMTS
      , LAST_PYMT_PERIOD
      , LAST_PROCESSING_ON
      , LAST_STANDARD_ON
      , LAST_SUBST_PYMT_PERIOD
      , PREMIUM_PAYMENT_TYPE_CODE
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , AGREEMENT_NUMBER
      , LOCK_NO
      , POLICY_NUMBER
      , COLLECTION_METHOD_CODE
      , GROUP_COLLECTION_MGMT_NUMBER
      , LAST_NUMBER_OF_PYMTS
      , LAST_PYMT_PERIOD
      , LAST_PROCESSING_ON
      , LAST_STANDARD_ON
      , LAST_SUBST_PYMT_PERIOD
      , PREMIUM_PAYMENT_TYPE_CODE
FROM    TRG02.TBL_VAO_PREM_COLL A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_VAO_PREM_COLL_VERSION@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , START_AT
      , END_AT
      , EXTERNAL_REF
      , REASON
      , BASE_TX_AT
      , LOCK_NO
      , LAST_NUMBER_OF_PYMTS
      , LAST_PYMT_PERIOD
      , LAST_PROCESSING_ON
      , LAST_STANDARD_ON
      , VAO_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , START_AT
      , END_AT
      , EXTERNAL_REF
      , REASON
      , BASE_TX_AT
      , LOCK_NO
      , LAST_NUMBER_OF_PYMTS
      , LAST_PYMT_PERIOD
      , LAST_PROCESSING_ON
      , LAST_STANDARD_ON
      , VAO_ID
FROM    TRG02.TBL_VAO_PREM_COLL_VERSION A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPACNT.TBL_VERSIONED_AGREEMENT@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , START_AT
      , LAST_VERSION_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , START_AT
      , LAST_VERSION_ID
FROM    TRG02.TBL_VERSIONED_AGREEMENT A;

COMMIT;

INSERT /*+ APPEND PARALLEL(A 4) */ INTO HPAFIN.TBL_WITHHOLDING_TAX@DL_DVRF A
(
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INCOME_TAX_AMOUNT
      , INCOME_TAX_SCALE
      , INCOME_TAX_RATE
      , INCOME_TAX_RATE_SCALE
      , INN_REF
      , INN_REF_TYPE_CODE
      , PAYMENT_ON
      , POLICY_NUMBER
      , REFUND_ON
      , RESIDENCE_TAX_AMOUNT
      , RESIDENCE_TAX_SCALE
      , RESIDENCE_TAX_RATE
      , RESI_TAX_RATE_SCALE
      , RURAL_SPECIAL_TAX_AMOUNT
      , RURAL_SPECIAL_TAX_SCALE
      , RURAL_SPECIAL_TAX_RATE
      , RURAL_TAX_RATE_SCALE
      , TAX_CALC_END_ON
      , TAX_CALC_START_ON
      , TAXABLE_INCOME_AMOUNT
      , TAXABLE_INCOME_SCALE
      , TAXABLE_INCOME_TYPE_CODE
      , WITH_TAX_KIND_CODE
      , PAYMENT_ID
      , TAX_REFUND_PAYMENT_ID
)
SELECT  /*+ FULL(A) PARALLEL(A 4) */
        ID
      , CREATE_AT
      , CREATE_PRGM_ID
      , CREATOR_ID
      , CREATOR_IP
      , LAST_MODIFIED_AT
      , LAST_MODIFIED_PRGM_ID
      , LAST_MODIFIER_ID
      , LAST_MODIFIER_IP
      , LOCK_NO
      , AGREEMENT_ID
      , AGREEMENT_NUMBER
      , CURRENCY_CODE
      , EXTERNAL_REF
      , INCOME_TAX_AMOUNT
      , INCOME_TAX_SCALE
      , INCOME_TAX_RATE
      , INCOME_TAX_RATE_SCALE
      , INN_REF
      , INN_REF_TYPE_CODE
      , PAYMENT_ON
      , POLICY_NUMBER
      , REFUND_ON
      , RESIDENCE_TAX_AMOUNT
      , RESIDENCE_TAX_SCALE
      , RESIDENCE_TAX_RATE
      , RESI_TAX_RATE_SCALE
      , RURAL_SPECIAL_TAX_AMOUNT
      , RURAL_SPECIAL_TAX_SCALE
      , RURAL_SPECIAL_TAX_RATE
      , RURAL_TAX_RATE_SCALE
      , TAX_CALC_END_ON
      , TAX_CALC_START_ON
      , TAXABLE_INCOME_AMOUNT
      , TAXABLE_INCOME_SCALE
      , TAXABLE_INCOME_TYPE_CODE
      , WITH_TAX_KIND_CODE
      , PAYMENT_ID
      , TAX_REFUND_PAYMENT_ID
FROM    TRG02.TBL_WITHHOLDING_TAX A;

COMMIT;

======================
20201104_HPAS이행(검증계) -----  건수비교_SCRIPT

SELECT A.*, B.*, CASE WHEN ABS(A.S_CNT - B.T_CNT) > 0 THEN 'ERR' ELSE NULL END AS GAP_CHECK
FROM
(
SELECT 'TRG02' AS OWNER, 'TBL_AGMT_PYMT_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_AGMT_PYMT_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_AGREEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_AGREEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_AGREEMENT_ANCHOR' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_AGREEMENT_ANCHOR UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_AGMT_REL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_AGMT_REL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_APPLICATION' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_APPLICATION UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_APPLICATION_PROPERTY' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_APPLICATION_PROPERTY UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_COL_PROPERTY' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_COL_PROPERTY UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_BUNDLE_COMPOSITION' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_BUNDLE_COMPOSITION UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_DIVIDEND_PAYMENT_DETAIL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_DIVIDEND_PAYMENT_DETAIL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_FIN_TRAN_RELATIONSHIP' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_FIN_TRAN_RELATIONSHIP UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_IRA' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_IRA UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_IRA_FUND_DTL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_IRA_FUND_DTL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_IRA_FUND_ITEM' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_IRA_FUND_ITEM UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONEY_PROV' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONEY_PROV UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONEY_PROV_ANCHOR' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONEY_PROV_ANCHOR UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONEY_PROV_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONEY_PROV_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONEY_PROV_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONEY_PROV_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONEY_SCHEDULER' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONEY_SCHEDULER UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONEY_SCHEDULER_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONEY_SCHEDULER_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONTHLY_FINFR_RESERVE' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONTHLY_FINFR_RESERVE UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONTHLY_FIN_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONTHLY_FIN_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_MONTHLY_FINREV_COMP' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_MONTHLY_FINREV_COMP UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PAYMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PAYMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PAYMENT_COMP' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PAYMENT_COMP UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PAYMENT_COMP_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PAYMENT_COMP_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_DUE' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_DUE UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_DUE_COMP' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_DUE_COMP UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREMPAYM_DUE_COMP_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREMPAYM_DUE_COMP_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_DUE_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_DUE_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PAYMENT_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PAYMENT_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PAYMENT_PROCESSING' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PAYMENT_PROCESSING UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PAYMENT_PROCESSING_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PAYMENT_PROCESSING_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PAYMENT_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PAYMENT_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREMIUM_PLAN' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREMIUM_PLAN UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PROPERTY' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PROPERTY UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_RA_FP_DTL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_RA_FP_DTL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_RA_PLCY_SUPP_DTL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_RA_PLCY_SUPP_DTL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_ROLE_IN_ACTUAL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_ROLE_IN_ACTUAL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_TOP_LEVEL_AGREEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_TOP_LEVEL_AGREEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_VAO_PREM_COLL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_VAO_PREM_COLL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_VAO_PREM_COLL_VERSION' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_VAO_PREM_COLL_VERSION UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_WITHHOLDING_TAX' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_WITHHOLDING_TAX UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_AGMT_REL_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_AGMT_REL_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_AGREEMENT_VERSION' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_AGREEMENT_VERSION UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_APPLICATION_TX' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_APPLICATION_TX UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREMIUM_PLAN_TX' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREMIUM_PLAN_TX UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_RA' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_RA UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_RA_TX' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_RA_TX UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_REQUEST' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_REQUEST UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_REQUEST_CONTAINER' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_REQUEST_CONTAINER UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_REQUEST_LCS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_REQUEST_LCS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_TLA_CHILD_REL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_TLA_CHILD_REL UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_VERSIONED_AGREEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_VERSIONED_AGREEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_DUE_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_DUE_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_POLICY_LOAN_PAYMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_POLICY_LOAN_PAYMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_POLOAN_PAYMENT_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_POLOAN_PAYMENT_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_POLOAN_PAYM_STATUS' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_POLOAN_PAYM_STATUS UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_COMP' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_COMP UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PREM_PAYMENT_COMP_ELEMENT' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PREM_PAYMENT_COMP_ELEMENT UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_PARTY_ROLE' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_PARTY_ROLE UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_APPLICATION_SET_PROPERTY' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_APPLICATION_SET_PROPERTY UNION ALL
SELECT 'TRG02' AS OWNER, 'TBL_AGREEMENT_RIA_REL' AS S_TAB_NM, COUNT(1) AS S_CNT FROM TRG02.TBL_AGREEMENT_RIA_REL
) A
,
(
SELECT 'HPACNT' AS OWNER, 'TBL_AGMT_PYMT_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_AGMT_PYMT_STATUS@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_AGREEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_AGREEMENT@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_AGREEMENT_ANCHOR' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_AGREEMENT_ANCHOR@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_AGMT_REL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_AGMT_REL@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_APPLICATION' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_APPLICATION@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_APPLICATION_PROPERTY' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_APPLICATION_PROPERTY@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_COL_PROPERTY' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_COL_PROPERTY@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_BUNDLE_COMPOSITION' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_BUNDLE_COMPOSITION@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_DIVIDEND_PAYMENT_DETAIL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_DIVIDEND_PAYMENT_DETAIL@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_FIN_TRAN_RELATIONSHIP' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_FIN_TRAN_RELATIONSHIP@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_IRA' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_IRA@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_IRA_FUND_DTL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_IRA_FUND_DTL@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_IRA_FUND_ITEM' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_IRA_FUND_ITEM@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONEY_PROV' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONEY_PROV@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONEY_PROV_ANCHOR' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONEY_PROV_ANCHOR@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONEY_PROV_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONEY_PROV_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONEY_PROV_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONEY_PROV_STATUS@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONEY_SCHEDULER' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONEY_SCHEDULER@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONEY_SCHEDULER_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONEY_SCHEDULER_STATUS@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONTHLY_FINFR_RESERVE' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONTHLY_FINFR_RESERVE@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONTHLY_FIN_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONTHLY_FIN_STATUS@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_MONTHLY_FINREV_COMP' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_MONTHLY_FINREV_COMP@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PAYMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PAYMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PAYMENT_COMP' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PAYMENT_COMP@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PAYMENT_COMP_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PAYMENT_COMP_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_DUE' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_DUE@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_DUE_COMP' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_DUE_COMP@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREMPAYM_DUE_COMP_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREMPAYM_DUE_COMP_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_DUE_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_DUE_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PAYMENT_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PAYMENT_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PAYMENT_PROCESSING' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PAYMENT_PROCESSING@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PAYMENT_PROCESSING_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PAYMENT_PROCESSING_STATUS@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PAYMENT_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PAYMENT_STATUS@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_PREMIUM_PLAN' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_PREMIUM_PLAN@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_STATUS@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_PROPERTY' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_PROPERTY@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_RA_FP_DTL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_RA_FP_DTL@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_RA_PLCY_SUPP_DTL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_RA_PLCY_SUPP_DTL@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_ROLE_IN_ACTUAL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_ROLE_IN_ACTUAL@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_TOP_LEVEL_AGREEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_TOP_LEVEL_AGREEMENT@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_VAO_PREM_COLL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_VAO_PREM_COLL@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_VAO_PREM_COLL_VERSION' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_VAO_PREM_COLL_VERSION@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_WITHHOLDING_TAX' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_WITHHOLDING_TAX@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_AGMT_REL_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_AGMT_REL_STATUS@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_AGREEMENT_VERSION' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_AGREEMENT_VERSION@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_APPLICATION_TX' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_APPLICATION_TX@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_PREMIUM_PLAN_TX' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_PREMIUM_PLAN_TX@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_RA' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_RA@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_RA_TX' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_RA_TX@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_REQUEST' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_REQUEST@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_REQUEST_CONTAINER' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_REQUEST_CONTAINER@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_REQUEST_LCS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_REQUEST_LCS@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_TLA_CHILD_REL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_TLA_CHILD_REL@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_VERSIONED_AGREEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_VERSIONED_AGREEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_DUE_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_DUE_STATUS@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_POLICY_LOAN_PAYMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_POLICY_LOAN_PAYMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_POLOAN_PAYMENT_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_POLOAN_PAYMENT_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_POLOAN_PAYM_STATUS' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_POLOAN_PAYM_STATUS@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_COMP' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_COMP@DL_DVRF UNION ALL
SELECT 'HPAFIN' AS OWNER, 'TBL_PREM_PAYMENT_COMP_ELEMENT' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAFIN.TBL_PREM_PAYMENT_COMP_ELEMENT@DL_DVRF UNION ALL
SELECT 'HPAPTY' AS OWNER, 'TBL_PARTY_ROLE' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPAPTY.TBL_PARTY_ROLE@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_APPLICATION_SET_PROPERTY' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_APPLICATION_SET_PROPERTY@DL_DVRF UNION ALL
SELECT 'HPACNT' AS OWNER, 'TBL_AGREEMENT_RIA_REL' AS T_TAB_NM, COUNT(1) AS T_CNT FROM HPACNT.TBL_AGREEMENT_RIA_REL@DL_DVRF
) B
WHERE  1 = 1
AND    A.S_TAB_NM = B.T_TAB_NM
--AND    (A.S_CNT = 0 OR    B.T_CNT > 0)
ORDER BY A.S_TAB_NM
;

===========================
20201104_HPAS이행(검증계) -----   검증계 DELETE문

COMMIT;
ALTER SESSION ENABLE PARALLEL DML;

DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_AGMT_PYMT_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_AGREEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_AGREEMENT_ANCHOR@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_AGMT_REL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_APPLICATION@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_APPLICATION_PROPERTY@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_COL_PROPERTY@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_BUNDLE_COMPOSITION@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_DIVIDEND_PAYMENT_DETAIL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_FIN_TRAN_RELATIONSHIP@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_IRA@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_IRA_FUND_DTL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_IRA_FUND_ITEM@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONEY_PROV@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONEY_PROV_ANCHOR@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONEY_PROV_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONEY_PROV_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONEY_SCHEDULER@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONEY_SCHEDULER_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONTHLY_FINFR_RESERVE@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONTHLY_FIN_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_MONTHLY_FINREV_COMP@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PAYMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PAYMENT_COMP@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PAYMENT_COMP_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_DUE@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_DUE_COMP@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREMPAYM_DUE_COMP_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_DUE_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PAYMENT_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PAYMENT_PROCESSING@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PAYMENT_PROCESSING_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PAYMENT_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_PREMIUM_PLAN@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_PROPERTY@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_RA_FP_DTL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_RA_PLCY_SUPP_DTL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_ROLE_IN_ACTUAL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_TOP_LEVEL_AGREEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_VAO_PREM_COLL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_VAO_PREM_COLL_VERSION@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_WITHHOLDING_TAX@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_AGMT_REL_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_AGREEMENT_VERSION@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_APPLICATION_TX@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_PREMIUM_PLAN_TX@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_RA@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_RA_TX@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_REQUEST@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_REQUEST_CONTAINER@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_REQUEST_LCS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_TLA_CHILD_REL@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_VERSIONED_AGREEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_DUE_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_POLICY_LOAN_PAYMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_POLOAN_PAYMENT_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_POLOAN_PAYM_STATUS@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_COMP@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAFIN.TBL_PREM_PAYMENT_COMP_ELEMENT@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPAPTY.TBL_PARTY_ROLE@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_APPLICATION_SET_PROPERTY@DL_DVRF A;
COMMIT;
DELETE /*+ PARALLEL(A 4) */ FROM HPACNT.TBL_AGREEMENT_RIA_REL@DL_DVRF A;
COMMIT;

=====================================
20201104_HPAS이행(검증계) ----  이행데이터 DELETE문_SCRIPT

SELECT 
'DELETE /*+ PARALLEL(A 4) */ FROM '||A.OWNER||'.'||A.TABLE_NAME||'@DL_DVRF A;'||CHR(13)||'COMMIT;'
FROM   ALL_TABLES@DL_DVRF A
WHERE  1 = 1
AND    A.OWNER LIKE 'HPA%'
AND    A.TABLE_NAME IN
(
'TBL_AGMT_PYMT_STATUS'
,'TBL_AGREEMENT'
,'TBL_AGREEMENT_ANCHOR'
,'TBL_AGMT_REL'
,'TBL_APPLICATION'
,'TBL_APPLICATION_PROPERTY'
,'TBL_COL_PROPERTY'
,'TBL_BUNDLE_COMPOSITION'
,'TBL_DIVIDEND_PAYMENT_DETAIL'
,'TBL_FIN_TRAN_RELATIONSHIP'
,'TBL_IRA'
,'TBL_IRA_FUND_DTL'
,'TBL_IRA_FUND_ITEM'
,'TBL_MONEY_PROV'
,'TBL_MONEY_PROV_ANCHOR'
,'TBL_MONEY_PROV_ELEMENT'
,'TBL_MONEY_PROV_STATUS'
,'TBL_MONEY_SCHEDULER'
,'TBL_MONEY_SCHEDULER_STATUS'
,'TBL_MONTHLY_FINFR_RESERVE'
,'TBL_MONTHLY_FIN_STATUS'
,'TBL_MONTHLY_FINREV_COMP'
,'TBL_PAYMENT'
,'TBL_PAYMENT_COMP'
,'TBL_PAYMENT_COMP_ELEMENT'
,'TBL_PREM_PAYMENT_DUE'
,'TBL_PREM_PAYMENT_DUE_COMP'
,'TBL_PREMPAYM_DUE_COMP_ELEMENT'
,'TBL_PREM_PAYMENT_DUE_ELEMENT'
,'TBL_PAYMENT_ELEMENT'
,'TBL_PAYMENT_PROCESSING'
,'TBL_PAYMENT_PROCESSING_STATUS'
,'TBL_PAYMENT_STATUS'
,'TBL_PREMIUM_PLAN'
,'TBL_PREM_PAYMENT'
,'TBL_PREM_PAYMENT_ELEMENT'
,'TBL_PREM_PAYMENT_STATUS'
,'TBL_PROPERTY'
,'TBL_RA_FP_DTL'
,'TBL_RA_PLCY_SUPP_DTL'
,'TBL_ROLE_IN_ACTUAL'
,'TBL_TOP_LEVEL_AGREEMENT'
,'TBL_VAO_PREM_COLL'
,'TBL_VAO_PREM_COLL_VERSION'
,'TBL_WITHHOLDING_TAX'
,'TBL_AGMT_REL_STATUS'
,'TBL_AGREEMENT_VERSION'
,'TBL_APPLICATION_TX'
,'TBL_PREMIUM_PLAN_TX'
,'TBL_RA'
,'TBL_RA_TX'
,'TBL_REQUEST'
,'TBL_REQUEST_CONTAINER'
,'TBL_REQUEST_LCS'
,'TBL_TLA_CHILD_REL'
,'TBL_VERSIONED_AGREEMENT'
,'TBL_PREM_PAYMENT_DUE_STATUS'
,'TBL_POLICY_LOAN_PAYMENT'
,'TBL_POLOAN_PAYMENT_ELEMENT'
,'TBL_POLOAN_PAYM_STATUS'
,'TBL_PREM_PAYMENT_COMP'
,'TBL_PREM_PAYMENT_COMP_ELEMENT'
,'TBL_PARTY_ROLE'
,'TBL_APPLICATION_SET_PROPERTY'
,'TBL_AGREEMENT_RIA_REL'
)
;



SELECT 
'SELECT '''||OWNER||''' AS OWNER, '''||TABLE_NAME||''' AS S_TAB_NM, COUNT(1) AS CNT FROM '||OWNER||'.'||TABLE_NAME||'@DL_DVRF UNION ALL'
FROM   ALL_TABLES@DL_DVRF A
WHERE  1 = 1
AND    A.OWNER LIKE 'HPA%'
AND    A.TABLE_NAME IN
(
'TBL_AGMT_PYMT_STATUS'
,'TBL_AGREEMENT'
,'TBL_AGREEMENT_ANCHOR'
,'TBL_AGMT_REL'
,'TBL_APPLICATION'
,'TBL_APPLICATION_PROPERTY'
,'TBL_COL_PROPERTY'
,'TBL_BUNDLE_COMPOSITION'
,'TBL_DIVIDEND_PAYMENT_DETAIL'
,'TBL_FIN_TRAN_RELATIONSHIP'
,'TBL_IRA'
,'TBL_IRA_FUND_DTL'
,'TBL_IRA_FUND_ITEM'
,'TBL_MONEY_PROV'
,'TBL_MONEY_PROV_ANCHOR'
,'TBL_MONEY_PROV_ELEMENT'
,'TBL_MONEY_PROV_STATUS'
,'TBL_MONEY_SCHEDULER'
,'TBL_MONEY_SCHEDULER_STATUS'
,'TBL_MONTHLY_FINFR_RESERVE'
,'TBL_MONTHLY_FIN_STATUS'
,'TBL_MONTHLY_FINREV_COMP'
,'TBL_PAYMENT'
,'TBL_PAYMENT_COMP'
,'TBL_PAYMENT_COMP_ELEMENT'
,'TBL_PREM_PAYMENT_DUE'
,'TBL_PREM_PAYMENT_DUE_COMP'
,'TBL_PREMPAYM_DUE_COMP_ELEMENT'
,'TBL_PREM_PAYMENT_DUE_ELEMENT'
,'TBL_PAYMENT_ELEMENT'
,'TBL_PAYMENT_PROCESSING'
,'TBL_PAYMENT_PROCESSING_STATUS'
,'TBL_PAYMENT_STATUS'
,'TBL_PREMIUM_PLAN'
,'TBL_PREM_PAYMENT'
,'TBL_PREM_PAYMENT_ELEMENT'
,'TBL_PREM_PAYMENT_STATUS'
,'TBL_PROPERTY'
,'TBL_RA_FP_DTL'
,'TBL_RA_PLCY_SUPP_DTL'
,'TBL_ROLE_IN_ACTUAL'
,'TBL_TOP_LEVEL_AGREEMENT'
,'TBL_VAO_PREM_COLL'
,'TBL_VAO_PREM_COLL_VERSION'
,'TBL_WITHHOLDING_TAX'
,'TBL_AGMT_REL_STATUS'
,'TBL_AGREEMENT_VERSION'
,'TBL_APPLICATION_TX'
,'TBL_PREMIUM_PLAN_TX'
,'TBL_RA'
,'TBL_RA_TX'
,'TBL_REQUEST'
,'TBL_REQUEST_CONTAINER'
,'TBL_REQUEST_LCS'
,'TBL_TLA_CHILD_REL'
,'TBL_VERSIONED_AGREEMENT'
,'TBL_PREM_PAYMENT_DUE_STATUS'
,'TBL_POLICY_LOAN_PAYMENT'
,'TBL_POLOAN_PAYMENT_ELEMENT'
,'TBL_POLOAN_PAYM_STATUS'
,'TBL_PREM_PAYMENT_COMP'
,'TBL_PREM_PAYMENT_COMP_ELEMENT'
,'TBL_PARTY_ROLE'
,'TBL_APPLICATION_SET_PROPERTY'
,'TBL_AGREEMENT_RIA_REL'
)
;



=============================
bizcommon.pc
/** $Id: bizcommon.pc 12612 2010-12-11 09:56:57Z 1070356 $
 * 대한생명 NK21 프로젝트 -- UNIX/Tuxedo Service 업무 공통 Library
 *-----------------------------------------------------------
   Library 명: ${PRODUCT}/lib/libbizcommon.so
 *-----------------------------------------------------------
 * 2001-11-27  김진우, 김정섭 작성
 * 2002-05-02  현영환  PG4APPC Interface를 위한 Module
 * 2002-07-08  김정섭  주5일 근무로 인한 일자 관련 추가
 * 2002-12-08  김진우  외국인 Check 모듈 추가
 * 2003-06-26  정규식  CMUV_getDayDiff_CC() 수정
 * 2003-08-07  김진우  성능향상을 위한 shared memory 구성
 * 2003-11-04  신명철  즉시이체 전문관리를 위한 함수 추가
 * 2004-03-04  신명철  Unit_Test Compile MSG Clear
 * 2004-04-12  신명철  공통모듈 이차원Pointer -> Array 변경
 * 2004/08/10  신명철  양력<->음력 변환함수 DBIO로 변경, 계산방식의 사용을 중단.
 * 2004/09/01  신명철  보안카드 모듈 신규 반영 -- CMUV_getSecuCardData_CC
 */
#include <bizcommon.h>
#include <common.h>
#include <sqlca.h>
#include <sqlda.h>
#include <sqlcpr.h>
#include <dbio_ddal.h>
#include <uvcrypt.h> /* 암복호화에 필요한 header */
EXEC SQL INCLUDE dbio_com.h;
EXEC SQL INCLUDE dbio/dduv_solar2lunar_cc.h;
EXEC SQL INCLUDE dbio/dduv_lunar2solar_cc.h;

/************************************************************************
  Function Name : CMUV_getDayDiff_CC()
  Note          : 주어진 두 일자(YYYYMMDD) 간의 일수를 계산
  Parameters    : INPUT  = (char*)시작일자 - YYYYMMDD
                           (char*)종료일자 - YYYYMMDD
  Return Value  : (int)일수 or Error Code
                  정상   = 양수 : 일수
                  비정상 =   -1 : 입력데이타 길이 및 타입오류
                             -2 : 입력데이타  validation check error.
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getDayDiff_CC(char *strtdate, char *enddate) {
  int a = atoi(strtdate), b = atoi(enddate);
  if (!uvIsValidYmd(a) || !uvIsValidYmd(b)) return -1;
  int days = uvDiffDays(a, b);
  return days < 0? -days: days;
}

/************************************************************************
  Function Name : CMUV_getMonthDiff_CC()
  Note          : 주어진 두 일자(YYYYMM) 간의 월수를 계산
  Parameters    : INPUT  = (char*)시작년월 - YYYYMM
                           (char*)종료년월 - YYYYMM
  Return Value  : (int)월수 or Error Code
                  정상   = 양수 : 월수
                  비정상 =   -1 : 입력데이타 길이 및 타입오류
                             -2 : 입력데이타  validation check error.
                             -3 : 시작월이 종료월보다 늦은경우
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getMonthDiff_CC(char *strtdate, char *enddate) {
  char    tmbuf1[10], tmbuf2[10];
  int i;

  if (strtdate[0] >= '3') return -2;
  if (enddate[0]  >= '3') return -2;

  sprintf(tmbuf1, "%.6s", strtdate);
  sprintf(tmbuf2, "%.6s", enddate);

  for (i = 0; i<6; i++) if (!isdigit(*(tmbuf1+i))) return -1;
  for (i = 0; i<6; i++) if (!isdigit(*(tmbuf2+i))) return -2;

  if (CMUV_isValidDate_CC(3, tmbuf1) < 0) return -1;
  if (CMUV_isValidDate_CC(3, tmbuf2) < 0) return -2;

  if (atoi(tmbuf1) > atoi(tmbuf2)) return -3;

  int year1 = uvAtoi(tmbuf1, 0, 4), mon1  = uvAtoi(tmbuf1, 4, 2);
  int year2 = uvAtoi(tmbuf2, 0, 4), mon2  = uvAtoi(tmbuf2, 4, 2);
  int diff = 0;
  while (year1 != year2 || mon1 != mon2) {
    if (++mon1 > 12) {
      mon1 = 1;
      year1++;
    }
    diff++;
  }
  return diff;
}

/************************************************************************
  Function Name : CMUV_isValidRRN_CC()
  Note          : 주민등록번호가 유효한지를 판별.
  Parameters    : INPUT  = (char*)주민등록번호
  Return Value  : (int)유효여부 or Error Code
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 남녀 구분기호 오류
                           -3 : 일자 오류
                           -4 : 주민등록번호 오류
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_isValidRRN_CC(char* crypt_resid) {
  int x[14], i, check, digit = 0;
  char t[20];
  char date[7], full_date[3];
  int today, residay, weekday;
  char residentno[20];
  
  strcpy(residentno, crypt_resid);   // 주민번호 정합성체크 변수세팅
  uvDecryptRrno((char*)residentno);  // 주민번호 복호화

  if (strlen(residentno) != 13)
      return -1;

  for (i = 0; i<13; i++)
      if (!isdigit(*(residentno+i)))
      return -1;

  for (i = 0; i<13; i++)
      x[i] = uvAtoi(residentno, i, 1);

  if (x[6] < 1 || x[6] > 8)
      return -2;
  else {
    if (x[6] == 1||x[6] == 2||x[6] == 5||x[6] == 6) {
      weekday = uvGetTime(13, t);
      today = atoi(t);
      strncpy(date, residentno, 6);
      sprintf(full_date, "%.2s%.6s", "19", date);
      residay = atoi(full_date);
      if ((today-residay)<0)
          return -3;
    } else if (x[6] == 3||x[6] == 4||x[6] == 7||x[6] == 8) {
      weekday = uvGetTime(13, t);
      today = atoi(t);
      strncpy(date, residentno, 6);
      sprintf(full_date, "%.2s%.6s", "20", date);
      residay = atoi(full_date);
      if ((today-residay)<0)
          return -3;
    }
  }

  /*
      digit = x[11]*5 + x[10]*4 + x[9]*3 + x[8]*2 + x[7]*9 + x[6]*8 +
              x[5]*7 + x[4]*6 + x[3]*5 + x[2]*4 + x[1]*3 + x[0]*2;
  */
  if (x[6] < 5) {       /* 2003.08.28, 신명철(외국인은 무조건 pass) */
    for (i = 11; i >= 0; i--)
        digit += x[i]*(i%8+2);
    check = ((11-(digit%11))%10);
    if (x[12] != check)
        return -4;
  }
  return TRUE;
}

/************************************************************************
  Function Name : CMUV_getWeekDay_CC()
  Note          : 기준일의 해당요일
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                  OUTPUT = (char*)요일     - 영문대문자 요일
  Return Value  : (int)요일코드 or Error Code
                  정상   = 양수 : 요일 Code (0:일요일 1:월요일.. 6:토요일)
                  비정상 =   -1 : 입력데이타 길이 및 타입오류
                             -2 : 입력데이타  validation check error.
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getWeekDay_CC(char *indate, char *weekday) {
  static char *week[] = {"SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY",
                         "THURSDAY", "FRIDAY", "SATURDAY"};
  int ymd = atoi(indate);
  if (!uvIsValidYmd(ymd)) return -1;
  int i = uvGetWeekday(ymd) - 1;
  strcpy(weekday, week[i]);
  return i;
}

/************************************************************************
  Function Name : CMUV_getDateByMonth_CC()
  Note          : 기준년월을 기준으로 몇개월 전후의 년월을 산출
  Parameters    : INPUT  = (char*)기준년월 - YYYYMM
                           (int)월수       - +/- Number
                  OUTPUT = (char*)결과년월 - YYYYMM
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 입력데이타  validation check error.
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getDateByMonth_CC(char* indate, int amount, char* outdate) {
  int     i;
  char    tmbuf1[10];

  if (strlen(indate) > 8)
      return -1;

  for (i = 0; i<6; i++)
      if (!isdigit(*(indate+i)))
      return -1;

  sprintf(tmbuf1, "%.6s", indate);
  if (CMUV_isValidDate_CC(3, tmbuf1) < 0)
      return -2;

  int year1 = uvAtoi(tmbuf1, 0, 4);
  int mon1  = uvAtoi(tmbuf1, 4, 2);

  if (amount>0) {
    for (i = 0; i<amount; i++) {
      ++mon1;
      if (mon1 > 12) {
        mon1 = 1;
        year1++;
      }
    }
  } else {
    for (i = 0; i<abs(amount); i++) {
      --mon1;
      if (mon1 < 1) {
        mon1 = 12;
        year1--;
      }
    }
  }
  sprintf(outdate, "%04d%02d", year1, mon1);
  return 1;
}

/************************************************************************
  Function Name : CMUV_isValidCorpNo_CC(char* corpno)
  Note          : 법인번호의 적합성을 체크하는 루틴 (13자리)
  Parameters    : INPUT  = (char*)법인번호 - 13자리
  Return Value  : (int)유효여부 or Error Code
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 법인번호 오류
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_isValidCorpNo_CC(char* corpno) {
  int x[14], i, digit;
  int tmp = 0;

  if (strlen(corpno) != 13)
      return -1;
  for (i = 0; i<13; i++)
      if (!isdigit(*(corpno+i)))
      return -1;

  for (i = 0; i<13; i++)
      x[i] = uvAtoi(corpno, i, 1);

  for (i = 0; i<12; i++)
      tmp += x[i]*((i%2 == 0) ? 1 : 2);
  tmp = tmp%10;

  digit = 10 - tmp;
  if (digit == 10) digit = 0;

  if (digit == x[12])
      return TRUE;
  else
      return -2;
}

/************************************************************************
  Function Name : CMUV_isValidBizNo_CC(char* bizno)
  Note          : 사업자등록번호의 적합성을 체크하는 루틴 (10자리)
  Parameters    : INPUT  = (char*)사업자등록번호 - 10자리
  Return Value  : (int)유효여부 or Error Code
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 법인번호 오류
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_isValidBizNo_CC(char* bizno) {
  int x[11], i, digitSum, digitTmp;

  if (strlen(bizno) != 10)
      return -1;
  for (i = 0; i<10; i++)
      if (!isdigit(*(bizno+i)))
      return -2;

  for (i = 0; i<10; i++)
      x[i] = uvAtoi(bizno, i, 1);

  digitSum = x[0]+x[1]*3+x[2]*7+x[3]+x[4]*3+x[5]*7+x[6]+x[7]*3;
  digitTmp = x[8]*5;

  digitSum = digitSum + digitTmp/10 + digitTmp%10;
  digitSum = digitSum%10;

  if (digitSum == x[9])
      return TRUE;
  else
      return -2;
}

/************************************************************************
  Function Name : CMUV_getDateByDay_CC(char* strtdate, int amount,
                        char* outdate)
  Note          : 특정일자를 기준으로 며칠 전후 일자를 산출.
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                           (int)일수       - +/- Number
                  OUTPUT = (char*)산출일자 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 입력데이타  validation check error.
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getDateByDay_CC(char* indate, int amount, char* outdate) {
  int ymd = atoi(indate);
  if (!uvIsValidYmd(ymd)) return -1;
  sprintf(outdate, "%d", uvAddDays(ymd, amount));
  return TRUE;
}

/************************************************************************
  Function Name : CMUV_getAgeByRRN_CC(char* residentno)
  Note          : 주민번호를 받아서 만 나이를 얻는다.
  Parameters    : INPUT  = (char*)주민등록번호
  Return Value  : (int)만나이 or Error Code
                  정상   = 양수 : 만나이
                  비정상 =   -1 : Invalid 주민번호
                             -2 : 오늘보다 늦은 년도
                             -3 : 오늘보다 늦은 일자
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getAgeByRRN_CC(char* residentno) {
  int biryear, curyear, birday, curday;
  int curwday;
  int age, sex;
  char curtime[10], restime[10];
  char tmbuf[20];

  sprintf(tmbuf, "%.13s", residentno);

/* 주민번호 암호화로 인해 주석처리
  if ((CMUV_isValidRRN_CC(tmbuf))<0)
      return -1;
*/ 

  sex = uvAtoi(residentno, 6, 1);
  if (sex == 1 || sex == 2 || sex == 5 || sex == 6)
      sprintf(restime, "%.2s%.6s", "19", residentno);
  else if (sex == 3 || sex == 4 || sex == 7 || sex == 8)
      sprintf(restime, "%.2s%.6s", "20", residentno);
  else return -1;

  curwday = uvGetTime(13, curtime);

  biryear = uvAtoi(restime, 0, 4);
  curyear = uvAtoi(curtime, 0, 4);
  birday = uvAtoi(restime, 4, 4);
  curday = uvAtoi(curtime, 4, 4);

  age = curyear-biryear;
  if (age < 0)
      return -2;

  if ((age == 0)&&((curday-birday) < 0))
      return -3;
  else if ((age!= 0)&&((curday-birday) < 0))
      age = age-1;

  return age;

}

/************************************************************************
  Function Name : CMUV_getSunday_CC(char* strtdate)
  Note          : 일자를 입력 받아서 그 주의 일요일을 얻는다
  Parameters    : INPUT  = (char*)기준일자      - YYYYMMDD
                  OUTPUT = (char*)일요일의 일자 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 입력데이타  validation check error.
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getSunday_CC(char* indate, char* outdate) {
  int ymd = atoi(indate);
  if (!uvIsValidYmd(ymd)) return -1;
  sprintf(outdate, "%d", uvAddDays(ymd, 1 - uvGetWeekday(ymd)));
  return TRUE;
}

/************************************************************************
  Function Name : CMUV_getSaturday_CC(char* strtdate, char* outdate)
  Note          : 일자를 입력 받아서 그 주의 토요일을 얻는다
  Parameters    : INPUT  = (char*)기준일자      - YYYYMMDD
                  OUTPUT = (char*)토요일의 일자 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 입력데이타  validation check error.
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getSaturday_CC(char* indate, char* outdate) {
  int ymd = atoi(indate);
  if (!uvIsValidYmd(ymd)) return -1;
  sprintf(outdate, "%d", uvAddDays(ymd, 7 - uvGetWeekday(ymd)));
  return TRUE;
}

/************************************************************************
  Function Name : CMUV_convertNo2Hangul_CC()
  Note          : 숫자 String을 한글 금액으로 변환
  Parameters    : INPUT  = (char*)금액
                  OUTPUT = (char*)한글금액
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 오류
                           -2 : 입력데이타 타입 오류
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_convertNo2Hangul_CC(char *don, char *hdon) {
  char    su[][3] = {"", "일", "이", "삼", "사",
        "오", "육", "칠", "팔", "구", };
  char    danwi[][5] = {"", "만", "억", "조", "경",};
  char    dan[][5]   = {"", "십", "백", "천",};
  char    tmp[10];
  int     i, len, id, did, k, chk = 0;

  *hdon = 0x00;
  len = strlen(don);
  if (len > 17)
      return -1;

  did = (len-1)/4;

  for (i = 0; i<len; i++) {
    if (! isdigit(*(don+i)))
        return -2;
  }
  for (i = 0; i < len; i++) {
    tmp[0] = 0x00;
    id = uvAtoi(don, i, 1);
    if (id)
        chk = 1;
    k = ((len-1)-i)%4;
    if (! k) {
      did = ((len-1)-i)/4;
      if (chk)
          sprintf(tmp, "%s%s", su[id], danwi[did]);
      chk = 0;
    } else if (id)
        sprintf(tmp, "%s%s", su[id], dan[k]);

    sprintf(hdon, "%s%s", hdon, tmp);
  }
  return TRUE;
}

/************************************************************************
  Function Name : CMUV_isValidMailID_CC()
  Note          : E-mail ID를 받아서 적합성을 체크
  Parameters    : INPUT  = (char*)E-mail ID
  Return Value  : (int)유효여부 or Error Code
                  정상   = 1
                  비정상 = -1 : @가 두개 이상 있슴
                           -2 : @가 없음
                           -3 : ID나 도메인에 특수문자가 들어있거나
                                ID를 숫자로 시작함
                           -4 : '.'이 없음
                           -5 : '.'앞위로 문자가 없거나
                                '.'이 두개이상 연속으로 들어옴.
                           -6 : '.'이 4개 이상 있슴.
                           -7 : '.'앞뒤에 문자나 숫자가 없음
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_isValidMailID_CC(char* mailID) {
  char idbuf[100], domainbuf[100], tmpbuf[100];
  char domain[4][100];
  int len, i = 0, j = 0;
  char *tmpP1, *tmpP2, *token;

  if (*mailID == NULL)
      return -1;

  memset(idbuf, NULL, sizeof(idbuf));
  memset(domainbuf, NULL, sizeof(domainbuf));
  memset(domain, NULL, sizeof(domain));

  tmpP1 = strchr(mailID, '@');
  tmpP2 = strrchr(mailID, '@');

  if (tmpP1) {
    strncpy(idbuf, mailID, tmpP1-mailID);
    sprintf(domainbuf, "%s", mailID+(tmpP1-mailID+1));
    memcpy(tmpbuf, domainbuf, sizeof(domainbuf));
    if (tmpP1 != tmpP2)
        return -1;
  } else
      return -2;

  len = strlen(idbuf);
  for (i = 0; i<len; i++)
      if (!isalpha(idbuf[0])     ||
      (!isalnum(*(idbuf+i))   &&
      *(idbuf+i)!= 0x2d        &&
      *(idbuf+i)!= 0x5f)       &&
      *(idbuf+i)!= 0x2e) {
    return -3;
  }

  len = strlen(tmpbuf);
  for (i = 0; i<len; i++)
      if (!isalpha(tmpbuf[0])    ||
      (!isalnum(*(tmpbuf+i))  &&
      *(tmpbuf+i)!= 0x2d       &&
      *(tmpbuf+i)!= 0x5f)      &&
      *(tmpbuf+i)!= 0x2e) {
    return -3;
  }

  tmpP1 = strchr(domainbuf, '.');
  if (tmpP1 == NULL)
      return -4;

  token = strtok(domainbuf, ".");
  if (token!= NULL)
      strcpy(domain[0], token);
  else
      return -5;

  while (token!= NULL) {
    token = strtok(NULL, ".");
    if (token)
        strcpy(domain[j+1], token);
    if (j>3)
        return -6;

    j++;
  }

  tmpP2 = strrchr(tmpbuf, '.');
  if (tmpP2 == NULL)
      return -4;
  if ((*(tmpP1+1) == NULL) ||
      (*(tmpP1-1) == NULL) ||
      (*(tmpP1+1) == '.')  ||
      (*(tmpP1-1) == '.'))
      return -7;

  return TRUE;
}

/************************************************************************
  Function Name : CMUV_removeGarbage_CC()
  Note          : Grrbage Data('-', SPACE 기호)를 지움
  Parameters    : INPUT  = (char*)지울 문자를 포함한 문자열
                           (int)index - 0 : Trim Left
                                        1 : Trim Right
                                        2 : Trim All
                                        3 : "-"값 지움
                  OUTPUT = (char*)필요없는 데이타가 지워진 문자열
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : garbageData에 값이 없음
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_removeGarbage_CC(char* garbageData, char* cleanData, int index) {
  char ch1, ch2;
  int len, i, k;
  char *tmp_p1, *tmp_p2;
  char* seps = "- ";
  char    tmp[10240];
  char    chk[3] = "\xA1\xA1";

  len = strlen(garbageData);
  memset(tmp, NULL, sizeof(tmp));

  if ((*garbageData == NULL))
      return -1;

  if (index == 0) {
    for (i = 0; i<len; i++) {
      ch1 = *(garbageData+i);
      if (ch1 != 0x20) {
        ch2 = ch1;
        break;
      }
    }
    tmp_p1 = strchr(garbageData, ch2);
    if (tmp_p1)
        strncpy(cleanData, garbageData+(tmp_p1-garbageData),
        len-(tmp_p1-garbageData));
  } else if (index == 1) {
    for (i = 1; i<len; i++) {
      ch1 = *(garbageData+len-i);
      if (ch1 != 0x20) {
        ch2 = ch1;
        break;
      }
    }
    tmp_p1 = strrchr(garbageData, ch2);
    if (tmp_p1)
        strncpy(cleanData, garbageData, (tmp_p1-garbageData+1));
  } else if (index == 2) {
    for (i = 0; i<len; i++) {
      ch1 = *(garbageData+i);
      if (ch1 != 0x20) {
        ch2 = ch1;
        break;
      }
    }
    tmp_p1 = strchr(garbageData, ch2);

    for (i = 1; i<len; i++) {
      ch1 = *(garbageData+len-i);
      if (ch1 != 0x20) {
        ch2 = ch1;
        break;
      }
    }
    tmp_p2 = strrchr(garbageData, ch2);
    if (tmp_p1 &&tmp_p2)
        strncpy(cleanData, garbageData+(tmp_p1-garbageData),
        tmp_p2-tmp_p1+1);

  } else if (index == 3) {
    for (i = k = 0; i<len; i++) {
      ch1 = *(garbageData+i);

      if (ch1 == *seps)
          continue;

      *(cleanData+k) = ch1;
      k++;
    }
  } else if (index == 4) {
    for (i = k = 0; i < strlen(garbageData); i++) {
      if (*(garbageData+i) == 0x20)
          continue;
      if (memcmp(garbageData+i, chk, 2) == 0) {
        i++;
        continue;
      }
      tmp[k++] = *(garbageData+i);
    }
    memcpy(cleanData, tmp, k);
  }
  return TRUE;
}

/************************************************************************
  Function Name : CMUV_isValidDate_CC()
  Note          : 일자 검사
  Parameters    : INPUT  = (int)일자 형식 구분 - 1 : YYYYMMDD
                                                 2 : YYMMDD
                                                 3 : YYYYMM
                                                 4 : MMDD
                                                 5 : MM
                                                 6 : DD
                           (char*)일자
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 일자오류
                           -2 : 범위를 벗어난 달 오류 (1-12)
                           -3 : 범위를 벗어난 일 오류 (1-31)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_isValidDate_CC(int type, char *indate) {
  char    tmpdate[20];
  char    year[5];
  char    mon[3];
  char    day[3];
  int     retval, len, conv_year, conv_mon, conv_day;

  len = strlen(indate);

  memset(year, NULL, sizeof(year));
  memset(mon, NULL, sizeof(mon));
  memset(day, NULL, sizeof(day));

  sprintf(tmpdate, "%.8s", indate);

  if (type == 1) {                      /* YYYYMMDD 형식 */
    if (len != 8)                       /* 2002.04.15, KSC */
        return -1;

    strncpy(year, tmpdate, 4);
    strncpy(mon,  tmpdate+4, 2);
    strncpy(day,  tmpdate+6, 2);
    conv_year = atoi(year);
    if (conv_year < 1900)
        return -1;
  } else if (type == 2) { /* YYMMDD 형식 */
    if (len != 6)                       /* 2002.04.15, KSC */
        return -1;
    strncpy(year, tmpdate, 2);
    strncpy(mon,  tmpdate+2, 2);
    strncpy(day,  tmpdate+4, 2);
    conv_year = atoi(year);
    conv_year += 2000;
  } else if (type == 3) { /* YYYYMM 형식 */
    if (len != 6)                       /* 2002.04.15, KSC */
        return -1;

    strncpy(year, tmpdate, 4);
    strncpy(mon,  tmpdate+4, 2);
    conv_year = atoi(year);
    conv_mon  = atoi(mon);
    if (conv_year < 0)
        return -1;
    if (conv_mon < 1 || conv_mon > 12)
        return -1;
    else return 1;
  } else if (type == 4) { /* MMDD 형식 */
    if (len != 4)                       /* 2002.04.15, KSC */
        return -1;
    strncpy(mon, tmpdate, 2);
    strncpy(day, tmpdate+2, 2);
  } else if (type == 5) { /* MM 형식 */
    if (len != 2)                       /* 2002.04.15, KSC */
        return -1;
    strncpy(mon, tmpdate, 2);
    conv_mon = atoi(mon);
    if (conv_mon < 1 || conv_mon > 12)
        return -1;
    else return 1;
  } else if (type == 6) { /* DD 형식 */
    if (len != 2)                       /* 2002.04.15, KSC */
        return -1;
    strncpy(day, tmpdate, 2);
    conv_day = atoi(day);
    if (conv_day < 1 || conv_day > 31)
        return -1;
    else return 1;
  } else return -1;

  conv_mon = atoi(mon);
  conv_day = atoi(day);

  if (conv_mon < 1)
      return -2;
  if (conv_day < 1)
      return -3;
  switch (conv_mon) {
  case 1 :
  case 3 :
  case 5 :
  case 7 :
  case 8 :
  case 10 :
  case 12 :
    if (conv_day > 31)
        retval = -3;
    else retval = 1;
    break;
  case 4 :
  case 6 :
  case 9 :
  case 11 :
    if (conv_day > 30)
        retval = -3;
    else retval = 1;
    break;
  case 2 :
    if (type == 4) {
      if (conv_day > 29)
          retval = -3;
      else retval = 1;
      break;
    }
    if (conv_year % 4 == 0) {
      if (conv_year % 100 == 0) {
        if (conv_year % 400 == 0) {
          if (conv_day > 29)
              retval = -3;
          else retval = 1;
        } else {
          if (conv_day > 28)
              retval = -3;
          else retval = 1;
        }
      } else {
        if (conv_day > 29)
            retval = -3;
        else retval = 1;
      }
    } else {
      if (conv_day > 28)
          retval = -3;
      else retval = 1;
    }
    break;
  default :
    retval = -2;
    break;
  }
  return retval;
}

/************************************************************************
  Function Name : CMUV_getEndDateOfMonth_CC()
  Note          : 입력일자의 말일을 계산하는 함수
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                  OUTPUT = (char*)말일     - YYYYMMDD
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 입력데이타  일자 validation check error.
 ------------------------------------------------------------------------
  Remarks
*************************************************************************/
int CMUV_getEndDateOfMonth_CC(char* indate, char* outdate) {
  int ymd = atoi(indate);
  if (!uvIsValidYmd(ymd)) return -1;
  sprintf(outdate, "%d", uvLastYmd(ymd));
  return TRUE;
}

/************************************************************************
  Function Name : CMUV_getEndDayOfFinancialYear_CC()
  Note          : 회계년도의 말일을 계산하는 함수
  Parameters    : INPUT  = (char*)기준일자     - YYYYMMDD
                  OUTPUT = (char*)회계년도말일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 입력데이타  일자 validation check error.
 ------------------------------------------------------------------------
  Remarks
*************************************************************************/
int CMUV_getEndDayOfFinancialYear_CC(char* indate, char* outdate) {
  int yr, mn, dy;
  char tmbuf[10];
  int i;

  if (strlen(indate) != 8)
      return -1;
  for (i = 0; i<8; i++)
      if (!isdigit(*(indate+i)))
      return -1;

  sprintf(tmbuf, "%.8s", indate);
  if (CMUV_isValidDate_CC(1, tmbuf) < 0)
      return -2;

  yr = uvAtoi(tmbuf, 0, 4);
  mn = uvAtoi(tmbuf, 4, 2);
  dy = uvAtoi(tmbuf, 6, 2);

  if (mn>= 1&&mn<= 3) {mn = 3; dy = 31; } else if (mn>= 4 && mn<= 12) {yr = yr+1; mn = 3; dy = 31; }

  sprintf(outdate, "%04d%02d%02d", yr, mn, dy);

  return TRUE;
}

/************************************************************************
  Function Name : CMUV_getFirstDayOfFinancialYear_CC()
  Note          : 회계년도의 초일을 계산하는 함수
  Parameters    : INPUT  = (char*)기준일자     - YYYYMMDD
                  OUTPUT = (char*)회계년도초일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 및 타입오류
                           -2 : 입력데이타  일자 validation check error.
 ------------------------------------------------------------------------
  Remarks
*************************************************************************/
int CMUV_getFirstDayOfFinancialYear_CC(char* indate, char* outdate) {
  int yr, mn, dy;
  char tmbuf[10];
  int i;

  if (strlen(indate) != 8)
      return -1;
  for (i = 0; i<8; i++)
      if (!isdigit(*(indate+i)))
      return -1;

  sprintf(tmbuf, "%.8s", indate);
  if (CMUV_isValidDate_CC(1, tmbuf) < 0)
      return -2;

  yr = uvAtoi(tmbuf, 0, 4);
  mn = uvAtoi(tmbuf, 4, 2);
  dy = uvAtoi(tmbuf, 6, 2);

  if (mn>= 1&&mn<= 3) {yr = yr-1; mn = 4; dy = 1; } else if (mn>= 4 && mn<= 12) {mn = 4; dy = 1; }

  sprintf(outdate, "%04d%02d%02d", yr, mn, dy);

  return TRUE;
}

/************************************************************************
  Function Name : CMUV_convertSolar2Lunar_CC()
  Note          : 주어진 일자(YYYYMMDD) 를 음력으로 변환
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                  OUTPUT = (char*)음력일자 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0 이상
                  비정상 = -1 :  기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                          비정상 : -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_convertSolar2Lunar_CC(char* indate, char* rtndate) {
  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char tmbuf[10];
  char userDfnMsg[1024];
  int  i;

  struct _basic_bdal_param                ddalParam;
  struct _dduv_solar2lunar_cc_out         dduvSolar2LunarCcOut;
  struct _dduv_solar2lunar_cc_in          dduvSolar2LunarCcIn;

  if (strlen(indate) != 8)
      return -1;
  for (i = 0; i<8; i++)
      if (!isdigit(*(indate+i)))
      return -1;

  sprintf(tmbuf, "%.8s", indate);
  if (CMUV_isValidDate_CC(1, tmbuf) < 0)
      return -2;

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  memset(userDfnMsg,0x00,sizeof(userDfnMsg));
  setBdalInitTrs(ddalParam, _singleRow_Array_Size,DBCURSOR_CLOSE);

  dduvSolar2lunarCcInClear(&dduvSolar2LunarCcIn);
  dduvSolar2lunarCcOutClear(&dduvSolar2LunarCcOut);

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dduvSolar2LunarCcIn.iYmd,  indate);

  dduvSolar2lunarCc(&ddalParam, &dduvSolar2LunarCcIn, &dduvSolar2LunarCcOut);

  if (checkSqlCode() != SQL_OK) {
    EXEC SQL ROLLBACK;
    appReturnCode = 0;
    strcpy(userDfnMsg,ddalParam.retMsg);
    uvDebug(UVDebugDir, "%s,%d,%d", userDfnMsg, appReturnCode, cptReturnCode);
    dduvSolar2lunarCcClose();
    return cptReturnCode;
  }
  /* DBIO module 호출 결과 확인                                       */

  /* DBIO 호출 결과를 처리한다.                                       */
  sprintf(rtndate, "%.8s\n", (char*) dduvSolar2LunarCcOut.lunaDate.arr);

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_convertLunar2Solar_CC()
  Note          : 주어진 일자(YYYYMMDD) 를 양력으로 변환
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                           (int)윤달여부   - 1 : 평달
                                             2 : 윤달
                  OUTPUT = (char*)양력일자 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0 이상
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           비정상 : -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_convertLunar2Solar_CC(char* indate, int leapyes, char* rtndate) {
  char tmbuf[10];
  char userDfnMsg[1024];
  int  i;

  struct _basic_bdal_param                ddalParam;
  struct _dduv_lunar2solar_cc_out         dduvLunar2SolarCcOut;
  struct _dduv_lunar2solar_cc_in          dduvLunar2SolarCcIn;

  if (strlen(indate) != 8)
      return -1;
  for (i = 0; i<8; i++)
      if (!isdigit(*(indate+i)))
      return -1;

  sprintf(tmbuf, "%.8s", indate);
  if (CMUV_isValidDate_CC(1, tmbuf) < 0)
      return -2;

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  memset(userDfnMsg,0x00,sizeof(userDfnMsg));
  setBdalInitTrs(ddalParam, _singleRow_Array_Size,   DBCURSOR_CLOSE);

  dduvLunar2solarCcInClear(&dduvLunar2SolarCcIn);
  dduvLunar2solarCcOutClear(&dduvLunar2SolarCcOut);

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dduvLunar2SolarCcIn.iYmd,  indate);

  if (leapyes == 1) {
    COPY(dduvLunar2SolarCcIn.iInmmYn,   "N");
  } else if (leapyes == 2) {
    COPY(dduvLunar2SolarCcIn.iInmmYn,   "Y");
  }

  dduvLunar2solarCc(&ddalParam, &dduvLunar2SolarCcIn, &dduvLunar2SolarCcOut);

  if (checkSqlCode() != SQL_OK) {
    EXEC SQL ROLLBACK;
    appReturnCode = 0;
    strcpy(userDfnMsg,ddalParam.retMsg);
    uvDebug(UVDebugDir, "%s,%d,%d", userDfnMsg, appReturnCode, cptReturnCode);
    dduvLunar2solarCcClose();
    return cptReturnCode;
  }
  /* DBIO module 호출 결과 확인                                       */

  /* DBIO 호출 결과를 처리한다.                                       */
  sprintf(rtndate, "%.8s\n", (char*) dduvLunar2SolarCcOut.ymd.arr);

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getCustAddress_CC()
  Note          : 고객의 성명과 주민번호로 주소 내역을 조회
  Parameters    : INPUT  = (char*)고객명       - char[50+1]
                           (char*)고객주민번호 - char[13+1]
                  INOUT  = IN  : (int*) 조회 buff ROW CNT(미지정시 최대 처리 가능 건수로 간주)
                           OUT : (int*) 조회결과 건수
                  OUTPUT = (char**)주소상태    - char[12+1]
                           (char**)상세주소    - char[56+1]
                           (char**)우편번호1   - char[4+1]
                           (char**)우편번호2   - char[4+1]
                           (char**)우편번호3   - char[4+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getCustAddress_CC(char* cust_name, char* rsdn_rgst_no, int* cnt,
    char addr_stcd[][12+1], char dtal_addr[][56+1],
    char zip_no_1[][4+1], char zip_no_2[][4+1], char zip_no_3[][4+1]) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[50+1];
  varchar dbioInputParam2[13+1];
  varchar dbioOutputParam1[_getCustAddress_Array_Size][12+1];
  varchar dbioOutputParam2[_getCustAddress_Array_Size][56+1];
  varchar dbioOutputParam3[_getCustAddress_Array_Size][4+1];
  varchar dbioOutputParam4[_getCustAddress_Array_Size][4+1];
  varchar dbioOutputParam5[_getCustAddress_Array_Size][4+1];
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getCustAddress_CC";

  /* 변수 초기화 */
  int i, ii;
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */
  INITVAR(dbioInputParam2);                    /* 입력 변수 2 */

  for (ii = 0; ii < _getCustAddress_Array_Size; ii++) {
    INITVAR(dbioOutputParam1[ii]);           /* 출력 변수 1 */
    INITVAR(dbioOutputParam2[ii]);           /* 출력 변수 2 */
    INITVAR(dbioOutputParam3[ii]);           /* 출력 변수 3 */
    INITVAR(dbioOutputParam4[ii]);           /* 출력 변수 4 */
    INITVAR(dbioOutputParam5[ii]);           /* 출력 변수 5 */
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  if (*cnt <= 0 || *cnt >= _getCustAddress_Array_Size) {
    setInitDBIO(_getCustAddress_Array_Size, DBCURSOR_CLOSE);
  } else {
    setInitDBIO(*cnt, DBCURSOR_CLOSE);
  }

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,cust_name);
  COPY(dbioInputParam2,rsdn_rgst_no);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVMSL001_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioInputParam2,   /* input parameter 2            */
                  :dbioOutputParam1,  /* output parameter 1           */
                  :dbioOutputParam2,  /* output parameter 2           */
                  :dbioOutputParam3,  /* output parameter 3           */
                  :dbioOutputParam4,  /* output parameter 4           */
                  :dbioOutputParam5 ); /* output parameter 5 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVMSL001_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }
  /* DBIO 호출 결과를 처리한다.                                       */
  *cnt = dbioRpSize;

  for (i = 0; i < dbioRpSize; i++) {
    memset(addr_stcd[i],    0x00,   sizeof(addr_stcd[i]));
    memset(dtal_addr[i],    0x00,   sizeof(dtal_addr[i]));
    memset(zip_no_1[i],     0x00,   sizeof(zip_no_1[i]));
    memset(zip_no_2[i],     0x00,   sizeof(zip_no_2[i]));
    memset(zip_no_3[i],     0x00,   sizeof(zip_no_3[i]));

    memcpy(addr_stcd[i],    dbioOutputParam1[i].arr,    dbioOutputParam1[i].len);
    memcpy(dtal_addr[i],    dbioOutputParam2[i].arr,    dbioOutputParam2[i].len);
    memcpy(zip_no_1[i],     dbioOutputParam3[i].arr,    dbioOutputParam3[i].len);
    memcpy(zip_no_2[i],     dbioOutputParam4[i].arr,    dbioOutputParam4[i].len);
    memcpy(zip_no_3[i],     dbioOutputParam5[i].arr,    dbioOutputParam5[i].len);
  }

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getCreditCardNo_CC()
  Note          : 고객의 성명과 주민번호로 고객카드내역조회
  Parameters    : INPUT  = (char*)고객명             - char[50+1]
                           (char*)고객주민번호       - char[13+1]
                  INOUT  = IN  : (int*) 조회 buff ROW CNT(미지정시 최대 처리 가능 건수로 간주)
                           OUT : (int*) 조회결과 건수
                  OUTPUT = (char**)카드사명          - char[12+1]
                           (char**)카드번호          - char[24+1]
                           (char**)카드소유자명      - char[56+1]
                           (char**)카드관계명        - char[12+1]
                           (char**)카드상태          - char[12+1]
                           (char**)카드유효월        - char[8+1]
                           (char**)카드거래개시일자  - char[8+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getCreditCardNo_CC(char* cust_name, char* rsdn_rgst_no, int* cnt,
    char card_cmpn_code[][12+1], char card_no[][24+1], char card_ownr_name[][56+1],
    char card_reln_code[][12+1], char card_stcd[][12+1], char card_vlid_mnth[][8+1],
    char card_dlgs_stdt[][8+1]) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[50+1];
  varchar dbioInputParam2[13+1];
  varchar dbioOutputParam1[_getCreditCardNo_Array_Size][12+1];
  varchar dbioOutputParam2[_getCreditCardNo_Array_Size][24+1];
  varchar dbioOutputParam3[_getCreditCardNo_Array_Size][56+1];
  varchar dbioOutputParam4[_getCreditCardNo_Array_Size][12+1];
  varchar dbioOutputParam5[_getCreditCardNo_Array_Size][12+1];
  varchar dbioOutputParam6[_getCreditCardNo_Array_Size][8+1];
  varchar dbioOutputParam7[_getCreditCardNo_Array_Size][8+1];
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getCreditCardNo_CC";

  /* 변수 초기화 */
  int i, ii;
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */
  INITVAR(dbioInputParam2);                    /* 입력 변수 2 */

  for (ii = 0; ii < _getCreditCardNo_Array_Size; ii++) {
    INITVAR(dbioOutputParam1[ii]);           /* 출력 변수 1 */
    INITVAR(dbioOutputParam2[ii]);           /* 출력 변수 2 */
    INITVAR(dbioOutputParam3[ii]);           /* 출력 변수 3 */
    INITVAR(dbioOutputParam4[ii]);           /* 출력 변수 4 */
    INITVAR(dbioOutputParam5[ii]);           /* 출력 변수 5 */
    INITVAR(dbioOutputParam6[ii]);           /* 출력 변수 6 */
    INITVAR(dbioOutputParam7[ii]);           /* 출력 변수 7 */
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  if (*cnt <= 0 || *cnt >= _getCreditCardNo_Array_Size) {
    setInitDBIO(_getCreditCardNo_Array_Size,DBCURSOR_CLOSE);
  } else {
    setInitDBIO(*cnt, DBCURSOR_CLOSE);
  }

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,cust_name);
  COPY(dbioInputParam2,rsdn_rgst_no);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVMSL002_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioInputParam2,   /* input parameter 2            */
                  :dbioOutputParam1,  /* output parameter 1           */
                  :dbioOutputParam2,  /* output parameter 2           */
                  :dbioOutputParam3,  /* output parameter 3           */
                  :dbioOutputParam4,  /* output parameter 4           */
                  :dbioOutputParam5,  /* output parameter 5           */
                  :dbioOutputParam6,  /* output parameter 6           */
                  :dbioOutputParam7 ); /* output parameter 7 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVMSL002_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  *cnt = dbioRpSize;

  for (i = 0; i < dbioRpSize; i++) {
    memset(card_cmpn_code[i],       0x00,   sizeof(card_cmpn_code[i]));
    memset(card_no[i],              0x00,   sizeof(card_no[i]));
    memset(card_ownr_name[i],       0x00,   sizeof(card_ownr_name[i]));
    memset(card_reln_code[i],       0x00,   sizeof(card_reln_code[i]));
    memset(card_stcd[i],            0x00,   sizeof(card_stcd[i]));
    memset(card_vlid_mnth[i],       0x00,   sizeof(card_vlid_mnth[i]));
    memset(card_dlgs_stdt[i],       0x00,   sizeof(card_dlgs_stdt[i]));

    memcpy(card_cmpn_code[i],       dbioOutputParam1[i].arr,    dbioOutputParam1[i].len);
    memcpy(card_no[i],              dbioOutputParam2[i].arr,    dbioOutputParam2[i].len);
    memcpy(card_ownr_name[i],       dbioOutputParam3[i].arr,    dbioOutputParam3[i].len);
    memcpy(card_reln_code[i],       dbioOutputParam4[i].arr,    dbioOutputParam4[i].len);
    memcpy(card_stcd[i],            dbioOutputParam5[i].arr,    dbioOutputParam5[i].len);
    memcpy(card_vlid_mnth[i],       dbioOutputParam6[i].arr,    dbioOutputParam6[i].len);
    memcpy(card_dlgs_stdt[i],       dbioOutputParam7[i].arr,    dbioOutputParam7[i].len);
  }

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_checkDuplicatedRRN_CC()
  Note          : 주민등록번호 중복 체크
  Parameters    : INPUT  = (char*)고객명         - char[50+1]
                           (char*)고객주민번호   - char[13+1]
                  OUTPUT = (int*)중복여부 :  1   - 중복되지 않음
                                             0   - 종복됨
                                            -1   - NOT FOUND DATA
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_checkDuplicatedRRN_CC(char* cust_name, char* rsdn_rgst_no,
    int* dup_yn) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[50+1];
  varchar dbioInputParam2[13+1];
  int dbioOutputParam1;
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_checkDuplicatedRRN_CC";

  /* 변수 초기화 */
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */
  INITVAR(dbioInputParam2);                    /* 입력 변수 2 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  setInitDBIO(_singleRow_Array_Size,DBCURSOR_CLOSE);

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,cust_name);
  COPY(dbioInputParam2,rsdn_rgst_no);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVSSL001_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioInputParam2,   /* input parameter 2            */
                  :dbioOutputParam1); /* output parameter 1 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVSSL001_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  switch (dbioOutputParam1) {
  case 0:
    *dup_yn = -1;
    break;
  case 1:
    *dup_yn = TRUE;
    break;
  default:
    *dup_yn = FALSE;
    break;
  }

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getEmpName_CC()
  Note          : 사원번호 혹은 사원명으로 사원번호와 사원명 조회
  Parameters    : INPUT  = (char*)사원명/번호  - char[20+1]
                  INOUT  = IN  : (int*) 조회 buff ROW CNT(미지정시 최대 처리 가능 건수로 간주)
                           OUT : (int*) 조회결과 건수
                  OUTPUT = (char**)사원명      - char[8+1]
                           (char**)사원번호    - char[24+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getEmpName_CC(char* empl, int* cnt,
    char empl_no[][8+1], char empl_name[][24+1]) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[20+1];
  varchar dbioOutputParam1[_getEmpName_Array_Size][8+1];
  varchar dbioOutputParam2[_getEmpName_Array_Size][24+1];
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getEmpName_CC";

  /* 변수 초기화 */
  int i, ii;
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */

  for (ii = 0; ii < _getEmpName_Array_Size; ii++) {
    INITVAR(dbioOutputParam1[ii]);           /* 출력 변수 1 */
    INITVAR(dbioOutputParam2[ii]);           /* 출력 변수 2 */
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  if (*cnt <= 0 || *cnt >= _getEmpName_Array_Size) {
    setInitDBIO(_getEmpName_Array_Size, DBCURSOR_CLOSE);
  } else {
    setInitDBIO(*cnt, DBCURSOR_CLOSE);
  }

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,empl);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVMSL003_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioOutputParam1,  /* output parameter 1           */
                  :dbioOutputParam2); /* output parameter 2 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVMSL003_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  *cnt = dbioRpSize;

  for (i = 0; i < dbioRpSize; i++) {
    memset(empl_no[i],      0x00,   sizeof(empl_no[i]));
    memset(empl_name[i],    0x00,   sizeof(empl_name[i]));

    memcpy(empl_no[i],      dbioOutputParam1[i].arr, dbioOutputParam1[i].len);
    memcpy(empl_name[i],    dbioOutputParam2[i].arr, dbioOutputParam2[i].len);
  }

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getGroupCode_CC()
  Note          : 단체명으로 단체코드와 사업자번호를 조회
  Parameters    : INPUT  = (char*)단체명      - char[50+1]
                  INOUT  = IN  : (int*) 조회 buff ROW CNT(미지정시 최대 처리 가능 건수로 간주)
                           OUT : (int*) 조회결과 건수
                  OUTPUT = (char**)단체코드   - char[12+1]
                           (char**)단체명     - char[56+1]
                           (char**)사업자번호 - char[12+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getGroupCode_CC(char* cust, int* cnt,
    char cust_id[][12+1], char cust_name[][56+1], char bsmn_rgst_no[][12+1]) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[50+1];
  varchar dbioOutputParam1[_getGroupCode_Array_Size][12+1];
  varchar dbioOutputParam2[_getGroupCode_Array_Size][56+1];
  varchar dbioOutputParam3[_getGroupCode_Array_Size][12+1];
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getGroupCode_CC";

  /* 변수 초기화 */
  int i, ii;
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */

  for (ii = 0; ii < _getGroupCode_Array_Size; ii++) {
    INITVAR(dbioOutputParam1[ii]);           /* 출력 변수 1 */
    INITVAR(dbioOutputParam2[ii]);           /* 출력 변수 2 */
    INITVAR(dbioOutputParam3[ii]);           /* 출력 변수 3 */
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  if (*cnt <= 0 || *cnt >= _getGroupCode_Array_Size) {
    setInitDBIO(_getGroupCode_Array_Size,DBCURSOR_CLOSE);
  } else {
    setInitDBIO(*cnt,DBCURSOR_CLOSE);
  }

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,cust);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVMSL004_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioOutputParam1,  /* output parameter 1           */
                  :dbioOutputParam2,  /* output parameter 2           */
                  :dbioOutputParam3); /* output parameter 3 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVMSL004_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  *cnt = dbioRpSize;

  for (i = 0; i < dbioRpSize; i++) {
    memset(cust_id[i],              0x00,       sizeof(cust_id[i]));
    memset(cust_name[i],            0x00,       sizeof(cust_name[i]));
    memset(bsmn_rgst_no[i],         0x00,       sizeof(bsmn_rgst_no[i]));

    memcpy(cust_id[i],              dbioOutputParam1[i].arr, dbioOutputParam1[i].len);
    memcpy(cust_name[i],            dbioOutputParam2[i].arr, dbioOutputParam2[i].len);
    memcpy(bsmn_rgst_no[i],         dbioOutputParam3[i].arr, dbioOutputParam3[i].len);
  }

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getPlanner_CC()
  Note          : 설계사조회
  Parameters    : INPUT  = (char*)설계사코드 - char[8+1]
                  OUTPUT = (char*)설계사명   - char[56+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getPlanner_CC(char* lp_prno, char* lp_name) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[8+1];
  varchar dbioOutputParam1[56+1];
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getPlanner_CC";

  /* 변수 초기화 */
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */
  INITVAR(dbioOutputParam1);                   /* 출력 변수 1 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  setInitDBIO(_singleRow_Array_Size,DBCURSOR_CLOSE);

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,lp_prno);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVSSL003_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioOutputParam1); /* output parameter 1 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVSSL003_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  sprintf(lp_name, "%s", dbioOutputParam1.arr);

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_isValidPhoneNo_CC()
  Note          : 전화번호 체크
  Parameters    : INPUT  = (char*)지역번호 - char[4+1]
                           (char*)국
                           (char*)번호
  Return Value  : (int)유효여부 or Error Code
                  정상   = 0
                  비정상 = -1 : 입력데이터 길이 오류 및 타입 오류
                           -2 : 지역번호 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_isValidPhoneNo_CC(char* stat, char* area, char* no) {
  int slen, alen, nlen;
  int i = 0;

  slen = strlen(stat);
  alen = strlen(area);
  nlen = strlen(no);

  if (slen>3 || slen<2 || alen>4 || alen<2 || nlen>4 || nlen<3)
      return -1;

  while ((*(stat+i)!= NULL) && (*(area+i)!= NULL) && (*(no+i)!= NULL)) {
    if (!isdigit(*(stat+i)) || !isdigit(*(area+i)) || !isdigit(*(no+i)))
        return -1;

    i++;
  }

  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[4+1];
  int dbioOutputParam1;
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_isValidPhoneNo_CC";

  /* 변수 초기화 */
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  setInitDBIO(_singleRow_Array_Size,DBCURSOR_CLOSE);

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,stat);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVSSL004_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioOutputParam1); /* output parameter 1 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVSSL004_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  if (dbioOutputParam1 == 1) return 0;
  else return -2;
}

/************************************************************************
  Function Name : CMUV_getOfficeCode_CC()
  Note          : 기관조회
  Parameters    : INPUT  = (char*)기관코드/명  - char[100+1]
                           (char*)구분flag     - 'C' : 기관코드 입력
                                                 'N' : 기관명 입력
                  INOUT  = IN  : (int*) 조회 buff ROW CNT(미지정시 최대 처리 가능 건수로 간주)
                           OUT : (int*) 조회결과 건수
                  OUTPUT = (char**)기관코드    - char[12+1]
                           (char**)기관명      - char[112+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getOfficeCode_CC(char* orgn_val, char* orgn_flag, int* cnt,
    char orgn_code[][12+1], char orgn_name[][112+1]) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[100+1];
  varchar dbioInputParam2[1+1];
  varchar dbioOutputParam1[_getOfficeCode_Array_Size][12+1];
  varchar dbioOutputParam2[_getOfficeCode_Array_Size][112+1];
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getOfficeCode_CC";

  /* 변수 초기화 */
  int i, ii;
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */
  INITVAR(dbioInputParam2);                    /* 입력 변수 2 */

  for (ii = 0; ii < _getOfficeCode_Array_Size; ii++) {
    INITVAR(dbioOutputParam1[ii]);           /* 출력 변수 1 */
    INITVAR(dbioOutputParam2[ii]);           /* 출력 변수 2 */
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  if (*cnt <= 0 || *cnt >= _getOfficeCode_Array_Size) {
    setInitDBIO(_getOfficeCode_Array_Size,DBCURSOR_CLOSE);
  } else {
    setInitDBIO(*cnt,DBCURSOR_CLOSE);
  }

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,orgn_val);
  COPY(dbioInputParam2,orgn_flag);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVMSL006_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioInputParam2,   /* input parameter 2            */
                  :dbioOutputParam1,  /* output parameter 1           */
                  :dbioOutputParam2); /* output parameter 2 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVMSL006_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  *cnt = dbioRpSize;

  for (i = 0; i < dbioRpSize; i++) {
    memset(orgn_code[i],    0x00,   sizeof(orgn_code[i]));
    memset(orgn_name[i],    0x00,   sizeof(orgn_name[i]));

    memcpy(orgn_code[i],    dbioOutputParam1[i].arr, dbioOutputParam1[i].len);
    memcpy(orgn_name[i],    dbioOutputParam2[i].arr, dbioOutputParam2[i].len);
  }

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getOfficeInfo_CC()
  Note          : 기관정보조회
  Parameters    : INPUT  = (char*)기관코드/명       - char[100+1]
                           (char*)구분flag          - 'C' : 기관코드 입력
                                                      'N' : 기관명 입력
                  INOUT  = IN  : (int*) 조회 buff ROW CNT(미지정시 최대 처리 가능 건수로 간주)
                           OUT : (int*) 조회결과 건수
                  OUTPUT = (char**)기관코드         - char[8+1]
                           (char**)기관명           - char[112+1]
                           (char**)기관구분         - char[12+1]
                           (char**)업무형태구분코드 - char[12+1]
                           (char**)직급기관여부     - char[4+1]
                           (char**)융자수납처여부   - char[4+1]
                           (char**)기관상태구분     - char[4+1]
                           (char**)기관폐쇄일자     - char[8+1]
                           (char**)시도소재구분     - char[4+1]
                           (char**)읍면동소재구분   - char[4+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getOfficeInfo_CC(char* orgn_val, char* orgn_flag, int* cnt,
    char orgn_code[][8+1], char orgn_name[][112+1], char orgn_dvcd[][12+1],
    char buss_tpdv_code[][12+1], char clpo_orgn_yn[][4+1], char loan_rvpl_yn[][4+1],
    char orgn_stat_dvsn[][4+1], char orgn_clos_date[][8+1],
    char ctpr_lctn_dvsn[][4+1], char twmd_lctn_dvsn[][4+1]) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[100+1];
  varchar dbioInputParam2[1+1];
  varchar dbioOutputParam1[_getOfficeInfo_Array_Size][8+1];
  varchar dbioOutputParam2[_getOfficeInfo_Array_Size][112+1];
  varchar dbioOutputParam3[_getOfficeInfo_Array_Size][12+1];
  varchar dbioOutputParam4[_getOfficeInfo_Array_Size][12+1];
  varchar dbioOutputParam5[_getOfficeInfo_Array_Size][4+1];
  varchar dbioOutputParam6[_getOfficeInfo_Array_Size][4+1];
  varchar dbioOutputParam7[_getOfficeInfo_Array_Size][4+1];
  varchar dbioOutputParam8[_getOfficeInfo_Array_Size][8+1];
  varchar dbioOutputParam9[_getOfficeInfo_Array_Size][4+1];
  varchar dbioOutputParam10[_getOfficeInfo_Array_Size][4+1];
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getOfficeInfo_Code";

  /* 변수 초기화 */
  int i, ii;
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */
  INITVAR(dbioInputParam2);                    /* 입력 변수 2 */

  for (ii = 0; ii < _getOfficeInfo_Array_Size; ii++) {
    INITVAR(dbioOutputParam1[ii]);           /* 출력 변수 1 */
    INITVAR(dbioOutputParam2[ii]);           /* 출력 변수 2 */
    INITVAR(dbioOutputParam3[ii]);           /* 출력 변수 3 */
    INITVAR(dbioOutputParam4[ii]);           /* 출력 변수 4 */
    INITVAR(dbioOutputParam5[ii]);           /* 출력 변수 5 */
    INITVAR(dbioOutputParam6[ii]);           /* 출력 변수 6 */
    INITVAR(dbioOutputParam7[ii]);           /* 출력 변수 7 */
    INITVAR(dbioOutputParam8[ii]);           /* 출력 변수 8 */
    INITVAR(dbioOutputParam9[ii]);           /* 출력 변수 9 */
    INITVAR(dbioOutputParam10[ii]);          /* 출력 변수 10 */
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  if (*cnt <= 0 || *cnt >= _getOfficeInfo_Array_Size) {
    setInitDBIO(_getOfficeInfo_Array_Size,DBCURSOR_CLOSE);
  } else {
    setInitDBIO(*cnt,DBCURSOR_CLOSE);
  }

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,orgn_val);
  COPY(dbioInputParam2,orgn_flag);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVMSL007_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioInputParam2,   /* input parameter 2            */
                  :dbioOutputParam1,  /* output parameter 1           */
                  :dbioOutputParam2,  /* output parameter 2           */
                  :dbioOutputParam3,  /* output parameter 3           */
                  :dbioOutputParam4,  /* output parameter 4           */
                  :dbioOutputParam5,  /* output parameter 5           */
                  :dbioOutputParam6,  /* output parameter 6           */
                  :dbioOutputParam7,  /* output parameter 7           */
                  :dbioOutputParam8,  /* output parameter 8           */
                  :dbioOutputParam9,  /* output parameter 9           */
                  :dbioOutputParam10); /* output parameter 10 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {
    setDBIOErrMsg(fnName);

    uvDebug(UVDebugDir,"DBIO(DCUV_CMUVMSL007_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.                                       */
  *cnt = dbioRpSize;

  for (i = 0; i < dbioRpSize; i++) {
    memset(orgn_code[i],        0x00, sizeof(orgn_code[i]));
    memset(orgn_name[i],        0x00, sizeof(orgn_name[i]));
    memset(orgn_dvcd[i],        0x00, sizeof(orgn_dvcd[i]));
    memset(buss_tpdv_code[i],   0x00, sizeof(buss_tpdv_code[i]));
    memset(clpo_orgn_yn[i],     0x00, sizeof(clpo_orgn_yn[i]));
    memset(loan_rvpl_yn[i],     0x00, sizeof(loan_rvpl_yn[i]));
    memset(orgn_stat_dvsn[i],   0x00, sizeof(orgn_stat_dvsn[i]));
    memset(orgn_clos_date[i],   0x00, sizeof(orgn_clos_date[i]));
    memset(ctpr_lctn_dvsn[i],   0x00, sizeof(ctpr_lctn_dvsn[i]));
    memset(twmd_lctn_dvsn[i],   0x00, sizeof(twmd_lctn_dvsn[i]));

    memcpy(orgn_code[i],            dbioOutputParam1[i].arr,  dbioOutputParam1[i].len);
    memcpy(orgn_name[i],            dbioOutputParam2[i].arr,  dbioOutputParam2[i].len);
    memcpy(orgn_dvcd[i],            dbioOutputParam3[i].arr,  dbioOutputParam3[i].len);
    memcpy(buss_tpdv_code[i],       dbioOutputParam4[i].arr,  dbioOutputParam4[i].len);
    memcpy(clpo_orgn_yn[i],         dbioOutputParam5[i].arr,  dbioOutputParam5[i].len);
    memcpy(loan_rvpl_yn[i],         dbioOutputParam6[i].arr,  dbioOutputParam6[i].len);
    memcpy(orgn_stat_dvsn[i],       dbioOutputParam7[i].arr,  dbioOutputParam7[i].len);
    memcpy(orgn_clos_date[i],       dbioOutputParam8[i].arr,  dbioOutputParam8[i].len);
    memcpy(ctpr_lctn_dvsn[i],       dbioOutputParam9[i].arr,  dbioOutputParam9[i].len);
    memcpy(twmd_lctn_dvsn[i],       dbioOutputParam10[i].arr, dbioOutputParam10[i].len);
  }
  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getWordOfDueum_CC()
  Note          : 주어진 문자를 두음처리하여 반환
  Parameters    : INPUT  = (char*)처리전 문자
                           (char*)처리후 문자
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 입력데이타 길이 범위 오류
                           -2 : 입력데이타 한글 아님
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getWordOfDueum_CC(char *instr, char *outstr) {
  char tmbuf[200];
  char outbuf[200];
  char buf[3];
  char xxx;
  char *res;
  unsigned long data;
  int len, i, j, ret, size;

  if (strlen(instr) > 200 || strlen(instr) < 1) {
    sprintf(outstr, "LENGTH ERROR");
    return -1;
  }

  strcpy(tmbuf, instr);

  ret = 0;
  len = strlen(tmbuf);

  /* 한글여부 확인 (완성형 코드로 확인) */

  for (i = 0; i<len; i++) {
    xxx = tmbuf[i];
    size = sizeof(xxx);
    size = size * 8;
    /* data = *(long *) &xxx; */
    data = xxx;
    res = (char *) malloc(size+1);

    for (j = 0; j<size; j++)
        res[(size - 1) - j] = ((data >> j) & 0x01) + '0';
    res[size] = 0;          /* 완성형 코드 */

    
    if (res[0] == '0') {
      ret = 1;
      break;
    }

    free(res);
  }

  /* 한글이 아님     */


  if (ret == 1) {
    sprintf(outstr, "%s", instr);
    return -2;
  }

  /* 두음 법칙 처리 */


  for (i = 0; i<len; i = i+2) {
    strncpy(buf, &tmbuf[i], 2);
    buf[2] = 0;

    if (i == 0) {
      if (!strcmp(buf,"라"))         sprintf(buf, "나");
      else if (!strcmp(buf,"로"))    sprintf(buf, "노");
      else if (!strcmp(buf,"량"))    sprintf(buf, "양");
      else if (!strcmp(buf,"리"))    sprintf(buf, "이");
      else if (!strcmp(buf,"림"))    sprintf(buf, "임");
      else if (!strcmp(buf,"랑"))    sprintf(buf, "낭");
      else if (!strcmp(buf,"류"))    sprintf(buf, "유");
      else if (!strcmp(buf,"뢰"))    sprintf(buf, "뇌");
      else if (!strcmp(buf,"란"))    sprintf(buf, "난");

      strcpy(outbuf, buf);
    } else {
      if (!strcmp(buf,"례"))         sprintf(buf, "예");
      else if (!strcmp(buf,"륭"))    sprintf(buf, "융");
      else if (!strcmp(buf,"란"))    sprintf(buf, "난");
      else if (!strcmp(buf,"률"))    sprintf(buf, "율");
      else if (!strcmp(buf,"래"))    sprintf(buf, "내");
      else if (!strcmp(buf,"로"))    sprintf(buf, "노");
      else if (!strcmp(buf,"량"))    sprintf(buf, "양");
      else if (!strcmp(buf,"락"))    sprintf(buf, "낙");
      else if (!strcmp(buf,"라"))    sprintf(buf, "나");
      else if (!strcmp(buf,"님"))    sprintf(buf, "임");
      else if (!strcmp(buf,"림"))    sprintf(buf, "임");
      else if (!strcmp(buf,"련"))    sprintf(buf, "연");
      else if (!strcmp(buf,"년"))    sprintf(buf, "연");
      else if (!strcmp(buf,"니"))    sprintf(buf, "이");
      else if (!strcmp(buf,"리"))    sprintf(buf, "이");
      else if (!strcmp(buf,"륜"))    sprintf(buf, "윤");
      else if (!strcmp(buf,"랑"))    sprintf(buf, "낭");
      else if (!strcmp(buf,"룰"))    sprintf(buf, "울");
      else if (!strcmp(buf,"린"))    sprintf(buf, "인");
      else if (!strcmp(buf,"람"))    sprintf(buf, "남");
      else if (!strcmp(buf,"녕"))    sprintf(buf, "영");
      else if (!strcmp(buf,"령"))    sprintf(buf, "영");
      else if (!strcmp(buf,"롱"))    sprintf(buf, "농");
      else if (!strcmp(buf,"룡"))    sprintf(buf, "용");
      else if (!strcmp(buf,"료"))    sprintf(buf, "요");
      else if (!strcmp(buf,"립"))    sprintf(buf, "입");
      else if (!strcmp(buf,"록"))    sprintf(buf, "녹");
      else if (!strcmp(buf,"류"))    sprintf(buf, "유");
      else if (!strcmp(buf,"렬"))    sprintf(buf, "열");
      else if (!strcmp(buf,"릉"))    sprintf(buf, "능");
      else if (!strcmp(buf,"녀"))    sprintf(buf, "여");
      else if (!strcmp(buf,"려"))    sprintf(buf, "여");
      else if (!strcmp(buf,"뇨"))    sprintf(buf, "요");
      else if (!strcmp(buf,"뉴"))    sprintf(buf, "뉴");
      else if (!strcmp(buf,"렴"))    sprintf(buf, "염");
      else if (!strcmp(buf,"념"))    sprintf(buf, "염");
      else if (!strcmp(buf,"닉"))    sprintf(buf, "익");
      else if (!strcmp(buf,"력"))    sprintf(buf, "역");
      else if (!strcmp(buf,"루"))    sprintf(buf, "누");
      else if (!strcmp(buf,"르"))    sprintf(buf, "느");
      else if (!strcmp(buf,"론"))    sprintf(buf, "논");
      else if (!strcmp(buf,"뢰"))    sprintf(buf, "뇌");

      strcat(outbuf, buf);
    }
  }
  outbuf[len] = 0;
  sprintf(outstr, "%s", outbuf);
  return 1;
  
}

/************************************************************************
  Function Name : CMUV_PG4APPC_CC()
  Note          : CICS Data 인터페이스
  Parameters    : INPUT  = (char*) CICS Trx. ID          - char[4000]
                                   조회 Key 값
                  OUTPUT = (char**)CICS 조회 Data        - char[20000]
                           (int)Tip 호출 SP Return code  - int

  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_PG4APPC_CC(char* send_Val, char* recv_Val) {
  int     retCode, fretCode;
  char    snddata[PG4APPC_SND_SIZE+1], rcvdata[PG4APPC_RCV_SIZE+1];

  if (strlen(send_Val) > PG4APPC_SND_SIZE) {
    uvDebug("Send Size 초과! %d", strlen(send_Val));
    return -1;
  }
  *recv_Val = 0x00;
  memset(snddata, NULL, sizeof(snddata));
  memset(rcvdata, NULL, sizeof(rcvdata));
  retCode = fretCode = 0;
  memcpy(snddata, send_Val, strlen(send_Val));

  setInitDBIO(0,DBCURSOR_CLOSE);

  COPY(dbioSvcName,"PG4APPC");
  COPY(dbioUserId, "PG4APPC_User");

  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVPG4001_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :snddata,
                  :rcvdata);
  END;
  END-EXEC;

  if (sqlca.sqlcode == 0) {
    if (retCode != 0) {
      fretCode = dbioRetCode;
      uvDebug("PG4APPC Tip SP호출 Tip_Error[%d]", retCode);
    }
  } else {
    fretCode = sqlca.sqlcode;
    uvDebug("PG4APPC COMMON_cc Error[%d]", sqlca.sqlcode);
  }

  memcpy(recv_Val, rcvdata, PG4APPC_RCV_SIZE);
  return fretCode;
}

/************************************************************************
  Function Name : CMUV_PG4APPC_FB_CC()
  Note          : FALLBACK SYSTEM을 위한 CICS Data 인터페이스
  Parameters    : INPUT  = (char*) CICS Trx. ID          - char[4000]
                                   조회 Key 값
                  OUTPUT = (char**)CICS 조회 Data        - char[20000]
                           (int)Tip 호출 SP Return code  - int

  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_PG4APPC_FB_CC(char* send_Val, char* recv_Val) {
  int     retCode, fretCode;
  char    snddata[PG4APPC_SND_SIZE+1], rcvdata[PG4APPC_RCV_SIZE+1];

  if (strlen(send_Val) > PG4APPC_SND_SIZE) {
    uvDebug("Send Size 초과! %d", strlen(send_Val));
    return -1;
  }
  *recv_Val = 0x00;
  memset(snddata, NULL, sizeof(snddata));
  memset(rcvdata, NULL, sizeof(rcvdata));
  retCode = fretCode = 0;
  memcpy(snddata, send_Val, strlen(send_Val));

  setInitDBIO(0,DBCURSOR_CLOSE);

  COPY(dbioSvcName,"PG4APPC");
  COPY(dbioUserId, "PG4APPC_User");

  EXEC SQL EXECUTE
      BEGIN DCUV_CMUVPG4002_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
                  :dbioSvcName,       /* Service Name                 */
                  :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :snddata,
                  :rcvdata);
  END;
  END-EXEC;

  if (sqlca.sqlcode == 0) {
    if (retCode != 0) {
      fretCode = dbioRetCode;
      uvDebug("PG4APPC Tip SP호출 Tip_Error[%d]", retCode);
      printf("PG4APPC Tip SP호출 Tip_Error[%d]\n", retCode);
    }
  } else {
    fretCode = sqlca.sqlcode;
    uvDebug("PG4APPC COMMON_cc Error[%d]", sqlca.sqlcode);
    printf("PG4APPC COMMON_cc Error[%d]\n", sqlca.sqlcode);
  }

  memcpy(recv_Val, rcvdata, PG4APPC_RCV_SIZE);
  return fretCode;
}

/************************************************************************
  Function Name : CMUV_getString_CC()
  Note          : Delimiter로 구분된 문자열에서 원하는 순번의 data get
  Parameters    : (char*)data, (char*)delimiters, (int)order
  Return Value  : (char*)string, (int)string length
 ------------------------------------------------------------------------
  Remarks >> len = CMUV_getString_CC(oriBuf, "|", k, str);
*************************************************************************/
int CMUV_getString_CC(char *data, char *delim, int order, char *str) {
  int     k = 0;
  char    *token, save[PG4APPC_RCV_SIZE+1];

  strcpy(save, data);
  *str = 0x00;
  token = strtok(save, delim);
  while (token != NULL) {
    if (k == order) {                       /* target string */
      strcpy(str, token);
      break;
    }
    k++;
    token = strtok(NULL, delim);            /* get next token */
  }
  return strlen(str);
}

/************************************************************************
  Function Name : CMUV_appendString_CC()
  Note          : 두 개의 문자열을 주어진 delimiter와 함께 append
  Parameters    : (char*)str1, (char*)delimiter, (char*)str2
  Return Value  : (int)appened string length
 ------------------------------------------------------------------------
  Remarks >> CMUV_appendString_CC(oriBuf, "|", mm);
*************************************************************************/
int CMUV_appendString_CC(char *str1, char *delim, char *str2) {
  str1 = strcat(str1, delim);
  str1 = strcat(str1, str2);
  return strlen(str1);
}

/************************************************************************
  Function Name : CMUV_insertComma_CC()
  Note          : 3자리 마다 자릿수 추가
  Parameters    : (double)돈, (char*)comma 낀 돈
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void CMUV_insertComma_CC(double don, char *str) {
  int     i, k, m;
  char    tmp[100], buf[100];

  sprintf(tmp, "%.0f", don);
  for (k = 0, i = (strlen(tmp)-1); i >= 0; i--, k++) {
    if ((k%4) == 3) {
      if (tmp[i] != '-') {
        buf[k] = ',';
        i++;
        continue;
      }
    }
    buf[k] = tmp[i];
  }
  for (m = 0, i = k-1; i >= 0; i--, m++)
      *(str+m) = buf[i];

  *(str+m) = 0x00;
}

/************************************************************************
  Function Name : CMUV_getBizDay_CC()
  Note          : 전후 영업일자 산출
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                           (int)구분Flag   - 1 : 채권휴일(일/공휴일)
                                             2 : 주식휴일(토/일/공휴일)
                                             3 : 격주휴일(격주/일/공휴일)
                                             4 : 주5일휴일(일/토/공휴일)
                  OUTPUT = (char*)전영업일 - YYYYMMDD
                           (char*)익영업일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 1
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getBizDay_CC(char* indate, int flag,
    char* before_date, char* after_date) {
  char    tmbuf[10], outdate[10], rtn_after_date[10], rtn_before_date[10];
  int     hldy_yn = 2, rtn1, rtn2, rtn;

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("indate : %s", indate);
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  sprintf(tmbuf, "%s", indate);
  if (CMUV_isValidDate_CC(1, tmbuf) < 0)
      return -2;
  do {
    rtn1 = CMUV_getDateByDay_CC(tmbuf, 1, outdate);
    if (rtn1 == TRUE) {
      rtn2 = CMUV_isValidHoliday_CC(outdate, flag, &hldy_yn);
      if (rtn2 == 0)
          sprintf(tmbuf, "%s", outdate);
      else return rtn2;
    } else return rtn1;

  } while (hldy_yn == 1);

  sprintf(rtn_after_date, "%s", tmbuf);
  sprintf(tmbuf, "%.8s", indate);
  do {
    rtn = CMUV_getDateByDay_CC(tmbuf, -1, outdate);
    if (rtn == TRUE) {
      rtn = CMUV_isValidHoliday_CC(outdate, flag, &hldy_yn);
      if (rtn == 0)
          sprintf(tmbuf, "%s", outdate);
      else return rtn;
    } else return rtn;

  } while (hldy_yn == 1);

  sprintf(rtn_before_date, "%s", tmbuf);
  sprintf(before_date, "%s", rtn_before_date);
  sprintf(after_date, "%s", rtn_after_date);

  return TRUE;
}

/************************************************************************
  Function Name : CMUV_isValidHoliday_CC()
  Note          : 휴일체크
  Parameters    : INPUT  = (char*)기준일자  - YYYYMMDD
                           (int)구분Flag    - 1 : 채권휴일(일/공휴일)
                                              2 : 주식휴일(토/일/공휴일)
                                              3 : 격주휴일(격주/일/공휴일)
                                              4 : 주5일휴일(일/토/공휴일)
                  OUTPUT = (int*)휴무일여부 - 1 : 휴무일
                                              0 : 휴무일 아님
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_isValidHoliday_CC(char* indate, int flag, int* hldy_yn) {
  int     sp, mp, ep, status;

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 2;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  switch (flag) {
  case 1 :                                      /* 채권휴무 */
    if ((NK_SHM->etc001+mp)->HLDY_YN == 'Y')
        *hldy_yn = TRUE;
    else *hldy_yn = FALSE;
    break;

  case 2 :                                      /* 주식휴무 */
    if ((NK_SHM->etc001+mp)->HLDY_YN == 'Y'||
        (NK_SHM->etc001+mp)->STOK_HLDY_YN == 'Y')
        *hldy_yn = TRUE;
    else *hldy_yn = FALSE;
    break;

  case 3 :                                      /* 격주휴무 */
    if ((NK_SHM->etc001+mp)->HLDY_YN == 'Y'||
        (NK_SHM->etc001+mp)->BIWK_OFDY_YN == 'Y')
        *hldy_yn = TRUE;
    else *hldy_yn = FALSE;
    break;

  case 4 :                                      /* 주5일휴무 */
    if ((NK_SHM->etc001+mp)->HLDY_YN == 'Y'||
        /*               (NK_SHM->etc001+mp)->STOK_HLDY_YN == 'Y' ||*/
        (NK_SHM->etc001+mp)->BIWK_OFDY_YN == 'Y' ||
        !memcmp((NK_SHM->etc001+mp)->DAY, "7", 1))
        *hldy_yn = TRUE;
    else *hldy_yn = FALSE;
    break;
  }
  return 0;
}

/************************************************************************
  Function Name : CMUV_getWeekCount_CC()
  Note          : 해당월주 체크
  Parameters    : INPUT  = (char*)기준일자  - YYYYMMDD
                  OUTPUT = (int*)총월주수   - Number
                           (int*)해당월주차 - Number
                           (int*)총년주차   - Number
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getWeekCount_CC(char* indate,
    int* mthy_tot_wkct, int* mthy_wksq, int* year_wksq) {
  int     sp, mp, ep, status;

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  *mthy_tot_wkct = (NK_SHM->etc001+mp)->MTHY_TOT_WKCT;
  *mthy_wksq = (NK_SHM->etc001+mp)->MTHY_WKSQ;
  *year_wksq = (NK_SHM->etc001+mp)->YEAR_WKSQ;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getBondFirstDayOfMonth_CC()
  Note          : 채권초일산출
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                  OUTPUT = (char*)채권초일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getBondFirstDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, flag = 1, hldy, rt;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memcpy(szTemp, indate, 6);
  for (i = 1; i < 31; i++) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getBondLastDayOfMonth_CC()
  Note          : 채권말일산출
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                  OUTPUT = (char*)채권말일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getBondLastDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, hldy, rt, lastday, flag = 1;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(szTemp, 0x00, sizeof(szTemp));
  rt = CMUV_getEndDateOfMonth_CC(indate, szTemp);
  if (rt < 0) {
    uvDebug("CMUV_getEndDateOfMonth_CC :: input err[%s]", indate);
    return -1;
  }
  lastday = uvAtoi(szTemp, 6, 2);
  for (i = lastday; i > 0; i--) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getBiwkFirstDayOfMonth_CC()
  Note          : 격주휴무초일산출
  Parameters    : INPUT  = (char*)기준일자     - YYYYMMDD
                  OUTPUT = (char*)격주휴무초일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getBiwkFirstDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, hldy, rt, flag = 3;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memcpy(szTemp, indate, 6);
  for (i = 1; i < 31; i++) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getBiwkLastDayOfMonth_CC()
  Note          : 격주휴무말일산출
  Parameters    : INPUT  = (char*)기준일자     - YYYYMMDD
                  OUTPUT = (char*)격주휴무말일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getBiwkLastDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, hldy, rt, lastday, flag = 3;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(szTemp, 0x00, sizeof(szTemp));
  rt = CMUV_getEndDateOfMonth_CC(indate, szTemp);
  if (rt < 0) {
    uvDebug("CMUV_getEndDateOfMonth_CC :: input err[%s]", indate);
    return -1;
  }
  lastday = uvAtoi(szTemp, 6, 2);
  for (i = lastday; i > 0; i--) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getStokFirstDayOfMonth_CC()
  Note          : 주식휴무초일산출
  Parameters    : INPUT  = (char*)기준일자     - YYYYMMDD
                  OUTPUT = (char*)주식휴무초일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getStokFirstDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, hldy, rt, flag = 2;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memcpy(szTemp, indate, 6);
  for (i = 1; i < 31; i++) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getStokLastDayOfMonth_CC()
  Note          : 주식휴무말일산출
  Parameters    : INPUT  = (char*)기준일자     - YYYYMMDD
                  OUTPUT = (char*)주식휴무말일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getStokLastDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, hldy, rt, lastday, flag = 2;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(szTemp, 0x00, sizeof(szTemp));
  rt = CMUV_getEndDateOfMonth_CC(indate, szTemp);
  if (rt < 0) {
    uvDebug("CMUV_getEndDateOfMonth_CC :: input err[%s]", indate);
    return -1;
  }
  lastday = uvAtoi(szTemp, 6, 2);
  for (i = lastday; i > 0; i--) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getFiveFirstDayOfMonth_CC()
  Note          : 주5일휴무초일산출
  Parameters    : INPUT  = (char*)기준일자      - YYYYMMDD
                  OUTPUT = (char*)주5일휴무초일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getFiveFirstDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, hldy, rt, flag = 4;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memcpy(szTemp, indate, 6);
  for (i = 1; i < 31; i++) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getFiveLastDayOfMonth_CC()
  Note          : 주5일휴무말일산출
  Parameters    : INPUT  = (char*)기준일자      - YYYYMMDD
                  OUTPUT = (char*)주5일휴무말일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getFiveLastDayOfMonth_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, i, hldy, rt, lastday, flag = 4;
  char    szTemp[10], dtTemp[3];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(szTemp, 0x00, sizeof(szTemp));
  rt = CMUV_getEndDateOfMonth_CC(indate, szTemp);
  if (rt < 0) {
    uvDebug("CMUV_getEndDateOfMonth_CC :: input err[%s]", indate);
    return -1;
  }
  lastday = uvAtoi(szTemp, 6, 2);
  for (i = lastday; i > 0; i--) {
    sprintf(dtTemp, "%02d", i);
    memcpy(szTemp+6, dtTemp, 2);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (!hldy)
        break;
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getStartDayOfWeek_CC()
  Note          : 주시작일산출 (채권기준)
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                  OUTPUT = (char*)주시작일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getStartDayOfWeek_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, hldy, rt, tp, flag = 1;
  char    szTemp[10], o_mn[9], n_mn[9];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (! memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(o_mn, 0x00, sizeof(o_mn));
  memset(n_mn, 0x00, sizeof(n_mn));
  memcpy(o_mn, (NK_SHM->etc001+mp)->YMD, 8);
  if ((NK_SHM->etc001+mp)->DAY[0] != '2') {
    if ((NK_SHM->etc001+mp)->DAY[0] == '1') {
      mp = mp - 6;
      memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
      /* 월 변경 금지
                  if(memcmp(o_mn, n_mn, 6)) {
                      mp = mp + 6;
                      memset(szTemp, 0x00, sizeof(szTemp));
                      mp = mp - uvAtoi((NK_SHM->etc001+mp)->YMD, 6, 2) + 1;
                      for(;;) {
                          memset(szTemp, 0x00, sizeof(szTemp));
                          memcpy(szTemp, (NK_SHM->etc001+mp)->YMD, 8);
                          rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
                          if(! hldy)
                              break;
                          mp++;
                      }
                  }
                  else {
      */
      for (;;) {
        memset(szTemp, 0x00, sizeof(szTemp));
        memcpy(szTemp, (NK_SHM->etc001+mp), 8);
        rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
        if (! hldy)
            break;
        mp++;
      }
      /*          }*/
    } else {
      tp = ((NK_SHM->etc001+mp)->DAY[0]-0x30)-2;
      mp = mp - tp;
      memset(n_mn, 0x00, sizeof(n_mn));
      memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
      /* 월 변경 금지
                  if (memcmp(o_mn, n_mn, 6)) {
                      mp = mp + tp;
                      memset(szTemp, 0x00, sizeof(szTemp));
                      mp = mp - uvAtoi((NK_SHM->etc001+mp)->YMD, 6, 2) + 1;
                      for(;;) {
                          memset(szTemp, 0x00, sizeof(szTemp));
                          memcpy(szTemp, (NK_SHM->etc001+mp), 8);
                          rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
                          if(! hldy)
                              break;
                          mp++;
                      }
                  }
                  else {
      */
      for (;;) {
        memset(szTemp, 0x00, sizeof(szTemp));
        memcpy(szTemp, (NK_SHM->etc001+mp), 8);
        rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
        if (! hldy)
            break;
        mp++;
      }
      /*          }*/
    }
  } else {
    for (;;) {
      memset(szTemp, 0x00, sizeof(szTemp));
      memcpy(szTemp, (NK_SHM->etc001+mp), 8);
      rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
      if (! hldy)
          break;
      mp++;
    }
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getStokStartDayOfWeek_CC()
  Note          : 주식 주시작일산출
  Parameters    : INPUT  = (char*)기준일자      - YYYYMMDD
                  OUTPUT = (char*)주식 주시작일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getStokStartDayOfWeek_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, hldy, rt, tp;
  int     flag = 2;
  char    szTemp[10], o_mn[9], n_mn[9];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(o_mn, 0x00, sizeof(o_mn));
  memset(n_mn, 0x00, sizeof(n_mn));
  memcpy(o_mn, (NK_SHM->etc001+mp)->YMD, 8);
  if ((NK_SHM->etc001+mp)->DAY[0] != '2') {
    if ((NK_SHM->etc001+mp)->DAY[0] == '1') {
      mp = mp - 6;
      memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
      /* 월 변경 금지
                  if (memcmp(o_mn, n_mn, 6)) {
                      mp = mp + 6;
                      memset(szTemp, 0x00, sizeof(szTemp));
                      mp = mp - uvAtoi((NK_SHM->etc001+mp)->YMD, 6, 2) + 1;
                      for(;;) {
                          memset(szTemp, 0x00, sizeof(szTemp));
                          memcpy(szTemp, (NK_SHM->etc001+mp)->YMD, 8);
                          rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
                          if(! hldy)
                              break;
                          mp++;
                      }
                  }
                  else {
      */
      for (;;) {
        memset(szTemp, 0x00, sizeof(szTemp));
        memcpy(szTemp, (NK_SHM->etc001+mp), 8);
        rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
        if (! hldy)
            break;
        mp++;
      }
      /*          }*/
    } else {
      tp = ((NK_SHM->etc001+mp)->DAY[0]-0x30)-2;
      mp = mp - tp;
      memset(n_mn, 0x00, sizeof(n_mn));
      memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
      /* 월 변경 금지
                  if (memcmp(o_mn, n_mn, 6)) {
                      mp = mp + tp;
                      memset(szTemp, 0x00, sizeof(szTemp));
                      mp = mp - uvAtoi((NK_SHM->etc001+mp)->YMD, 6, 2) + 1;
                      for(;;) {
                          memset(szTemp, 0x00, sizeof(szTemp));
                          memcpy(szTemp, (NK_SHM->etc001+mp), 8);
                          rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
                          if(! hldy)
                              break;
                          mp++;
                      }
                  }
                  else {
      */
      for (;;) {
        memset(szTemp, 0x00, sizeof(szTemp));
        memcpy(szTemp, (NK_SHM->etc001+mp), 8);
        rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
        if (! hldy)
            break;
        mp++;
      }
      /*          }*/
    }
  } else {
    for (;;) {
      memset(szTemp, 0x00, sizeof(szTemp));
      memcpy(szTemp, (NK_SHM->etc001+mp), 8);
      rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
      if (! hldy)
          break;
      mp++;
    }
  }
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getEndDayOfWeek_CC()
  Note          : 주종료일산출 (채권기준)
  Parameters    : INPUT  = (char*)기준일자 - YYYYMMDD
                  OUTPUT = (char*)주종료일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getEndDayOfWeek_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, hldy, rt, tp;
  char    szTemp[10];
  int     flag = 1;
  char    o_mn[9], n_mn[9];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(o_mn, 0x00, sizeof(o_mn));
  memset(n_mn, 0x00, sizeof(n_mn));
  memcpy(o_mn, (NK_SHM->etc001+mp)->YMD, 8);
  if ((NK_SHM->etc001+mp)->DAY[0] != '7') {
    if ((NK_SHM->etc001+mp)->DAY[0] == '1')
        mp--;
    tp = 7-((NK_SHM->etc001+mp)->DAY[0]-0x30);
    mp = mp + tp;
  }
  memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
  /* 월 변경 금지
      if (memcmp(o_mn, n_mn, 6)) {
          memset(szTemp, 0x00, sizeof(szTemp));
          rt = CMUV_getEndDateOfMonth_CC(o_mn, szTemp);
          if (rt < 0) {
              printf("CMUV_getEndDateOfMonth_CC :: input err[%s]\n", o_mn);
              return -1;
          }
          for(;;) {
              rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
              if (!hldy) break;
              memcpy(mn, szTemp+6, 2);
              mm = atoi(mn);
              mm--;
              sprintf(mn, "%02d", mm);
              memcpy(szTemp+6, mn, 2);
          }
      }
      else {
  */
  for (;;) {
    memset(szTemp, 0x00, sizeof(szTemp));
    memcpy(szTemp, (NK_SHM->etc001+mp), 8);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (! hldy)
        break;
    mp--;
  }
  /*  }*/
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getStokEndDayOfWeek_CC()
  Note          : 주식 주종료일산출
  Parameters    : INPUT  = (char*)기준일자      - YYYYMMDD
                  OUTPUT = (char*)주식 주종료일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getStokEndDayOfWeek_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, hldy, rt, tp, flag = 2;
  char    szTemp[10], o_mn[9], n_mn[9];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(o_mn, 0x00, sizeof(o_mn));
  memset(n_mn, 0x00, sizeof(n_mn));
  memcpy(o_mn, (NK_SHM->etc001+mp)->YMD, 8);
  if ((NK_SHM->etc001+mp)->DAY[0] != '7') {
    if ((NK_SHM->etc001+mp)->DAY[0] == '1')
        mp--;
    tp = 7-((NK_SHM->etc001+mp)->DAY[0]-0x30);
    mp = mp + tp;
  }
  memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
  /* 월 변경 금지
      if (memcmp(o_mn, n_mn, 6)) {
          memset(szTemp, 0x00, sizeof(szTemp));
          rt = CMUV_getEndDateOfMonth_CC(o_mn, szTemp);
          if (rt < 0) {
              printf("CMUV_getEndDateOfMonth_CC :: input err[%s]\n", o_mn);
              return -1;
          }
          for(;;) {
              rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
              if(! hldy)
                  break;
              memcpy(mn, szTemp+6, 2);
              mm = atoi(mn);
              mm--;
              sprintf(mn, "%02d", mm);
              memcpy(szTemp+6, mn, 2);
          }
      }
      else {
  */
  for (;;) {
    memset(szTemp, 0x00, sizeof(szTemp));
    memcpy(szTemp, (NK_SHM->etc001+mp), 8);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (! hldy)
        break;
    mp--;
  }
  /*  }*/
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getBiwkEndDayOfWeek_CC()
  Note          : 격주 주종료일산출
  Parameters    : INPUT  = (char*)기준일자      - YYYYMMDD
                  OUTPUT = (char*)격주 주종료일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getBiwkEndDayOfWeek_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, hldy, rt, tp, flag = 3;
  char    szTemp[10], o_mn[9], n_mn[9];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(o_mn, 0x00, sizeof(o_mn));
  memset(n_mn, 0x00, sizeof(n_mn));
  memcpy(o_mn, (NK_SHM->etc001+mp)->YMD, 8);
  if ((NK_SHM->etc001+mp)->DAY[0] != '7') {
    if ((NK_SHM->etc001+mp)->DAY[0] == '1')
        mp--;
    tp = 7-((NK_SHM->etc001+mp)->DAY[0]-0x30);
    mp = mp + tp;
  }
  memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
  /* 월 변경 금지
      if (memcmp(o_mn, n_mn, 6)) {
          memset(szTemp, 0x00, sizeof(szTemp));
          rt = CMUV_getEndDateOfMonth_CC(o_mn, szTemp);
          if (rt < 0) {
              printf("CMUV_getEndDateOfMonth_CC :: input err[%s]\n", o_mn);
              return -1;
          }
          for (;;) {
              rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
              if(! hldy)
                  break;
              memcpy(mn, szTemp+6, 2);
              mm = atoi(mn);
              mm--;
              sprintf(mn, "%02d", mm);
              memcpy(szTemp+6, mn, 2);
          }
      }
      else {
  */
  for (;;) {
    memset(szTemp, 0x00, sizeof(szTemp));
    memcpy(szTemp, (NK_SHM->etc001+mp), 8);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (! hldy)
        break;
    mp--;
  }
  /*  }*/
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getFiveEndDayOfWeek_CC()
  Note          : 주5일 주종료일산출
  Parameters    : INPUT  = (char*)기준일자       - YYYYMMDD
                  OUTPUT = (char*)주5일 주종료일 - YYYYMMDD
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -1 : 기준일자 길이 오류(범위를 벗어남)
                                기준일자 숫자타입 오류(숫자가 아님)
                           -2 : 기준일자의 일자 오류
                           -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getFiveEndDayOfWeek_CC(char* indate, char* outdate) {
  int     sp, mp, ep, status, hldy, rt, tp, flag = 4;
  char    szTemp[10], o_mn[9], n_mn[9];

  if (memcmp(indate, "20511231", 8) > 0
      || memcmp(indate, "19610101", 8) < 0) {
    uvDebug("Inavlid Date...");
    return -1;
  }
  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  if (CMUV_isValidDate_CC(1, indate) < 0)
      return -2;
  sprintf(szTemp, "%.6s", indate);

  sp = 0;
  ep = NK_SHM->info.etc001_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->etc001+sp), indate, 8)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->etc001+ep), indate, 8)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->etc001+sp), indate, 8)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->etc001+ep), indate, 8)) < 0)
      status = 4;
  else {
    while (1) {
      if (!memcmp((NK_SHM->etc001+mp), indate, 8)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->etc001+mp), indate, 8) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->etc001+mp), indate, 8) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  memset(o_mn, 0x00, sizeof(o_mn));
  memset(n_mn, 0x00, sizeof(n_mn));
  memcpy(o_mn, (NK_SHM->etc001+mp)->YMD, 8);
  if ((NK_SHM->etc001+mp)->DAY[0] != '7') {
    if ((NK_SHM->etc001+mp)->DAY[0] == '1')
        mp--;
    tp = 7-((NK_SHM->etc001+mp)->DAY[0]-0x30);
    mp = mp + tp;
  }
  memcpy(n_mn, (NK_SHM->etc001+mp)->YMD, 8);
  /* 월 변경 금지
      if (memcmp(o_mn, n_mn, 6)) {
          memset(szTemp, 0x00, sizeof(szTemp));
          rt = CMUV_getEndDateOfMonth_CC(o_mn, szTemp); ?????
          if (rt < 0) {
              printf("CMUV_getEndDateOfMonth_CC :: input err[%s]\n", o_mn);
              return -1;
          }
          for (;;) {
              rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
              if(! hldy)
                  break;
              memcpy(mn, szTemp+6, 2);
              mm = atoi(mn);
              mm--;
              sprintf(mn, "%02d", mm);
              memcpy(szTemp+6, mn, 2);
          }
      }
      else {
  */
  for (;;) {
    memset(szTemp, 0x00, sizeof(szTemp));
    memcpy(szTemp, (NK_SHM->etc001+mp), 8);
    rt = CMUV_isValidHoliday_CC(szTemp, flag, &hldy);
    if (! hldy)
        break;
    mp--;
  }
  /*  }*/
  memcpy(outdate, szTemp, 8);
  outdate[8] = 0x00;

  return 0;
}

/************************************************************************
  Function Name : CMUV_getUniCode_CC()
  Note          : 통합코드 조회
  Parameters    : INPUT  = (char*)코드타입  - char[16+1]
                           (char*)코드값    - char[16+1]
                  OUTPUT = (int*)조회건수
                           (char**)코드값   - char[16+1]
                           (char**)코드내용 - char[224+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getUniCode_CC(char* code_id, char* code_val, int* cnt,
    char code_vals[][16+1], char code_names[][224+1]) {
  int     sp, mp, ep, count = 1, status, i, len, llen;

  if (NK_SHM_ID < 0) {
    if ((NK_SHM_ID = uvMapSharedMemory(NK_SHM_KEY,
        (void*)&NK_SHM, sizeof(NK_SHM_DS))) < 0)
        return -3;
  }
  len = strlen(code_id);
  llen = strlen(code_val);
  sp = *cnt = 0;
  ep = NK_SHM->info.cdm002_num - 1;
  mp = (ep - sp +1) / 2;

  if (!memcmp((NK_SHM->cdm002+sp), code_id, len)) {
    status = 1;
    mp = 0;
  } else if (!memcmp((NK_SHM->cdm002+ep), code_id, len)) {
    status = 1;
    mp = ep;
  } else if ((memcmp((NK_SHM->cdm002+sp), code_id, len)) > 0)
      status = 3;
  else if ((memcmp((NK_SHM->cdm002+ep), code_id, len)) < 0)
      status = 4;
  else {
    while (1) {
      if (! memcmp((NK_SHM->cdm002+mp), code_id, len)) {
        status = 1;
        break;
      } else if (sp == mp) {
        status = 2;
        break;
      } else if (memcmp((NK_SHM->cdm002+mp), code_id, len) > 0)
          ep = mp;
      else if (memcmp((NK_SHM->cdm002+mp), code_id, len) < 0)
          sp = mp;
      mp = sp + ((ep - sp) / 2);
    }
  }
  while (mp >= 0) {
    if (memcmp((NK_SHM->cdm002+mp)->CODE_ID, code_id, len)) {
      mp--;
      count = 1;
      break;
    } else mp++;
  }
  while (1) {
    if (! memcmp((NK_SHM->cdm002+mp)->CODE_ID, code_id, len)) {
      count++;
      mp--;
    } else {
      count--;
      mp++;
      break;
    }
  }
  if (code_val[0] == NULL) {                /* 다 건 */
    for (i = 0; i < count; i++) {
      memset(code_vals[i],  0x00, 16+1);
      memcpy(code_vals[i],
          (NK_SHM->cdm002+mp)->CODE_VAL,
          sizeof((NK_SHM->cdm002+mp)->CODE_VAL));

      memset(code_names[i], 0x00, 224+1);
      memcpy(code_names[i],
          (NK_SHM->cdm002+mp)->CODE_NAME,
          sizeof((NK_SHM->cdm002+mp)->CODE_NAME));
      mp++;
    }
    *cnt = count;
  } else { /* 단 건 */
    for (i = 0; i < count; i++) {
      if (! memcmp((NK_SHM->cdm002+mp)->CODE_VAL, code_val, llen)) {
        memcpy(code_vals, (NK_SHM->cdm002+mp)->CODE_VAL, 10);
        memcpy(code_names, (NK_SHM->cdm002+mp)->CODE_NAME, 200);
        *cnt = 1;
        break;
      } else mp++;
    }
  }
  for (i = 0; i < *cnt; i++) {
    uvTrim2(code_vals[i],
        sizeof(NK_SHM->cdm002[0].CODE_VAL));
    uvTrim2(code_names[i],
        sizeof(NK_SHM->cdm002[0].CODE_NAME)-1);
  }
  return 0;
}

/************************************************************************
  Function Name : CMUV_getNcapliamSqno_CC()
  Note          : 즉시이체 전문관리번호를 구한다.
  Parameters    : INPUT  = (char*)작업일자      - char[8+1]
                           (char*)최종변경자    - char[8+1]
                           (char*)변경PGM_ID        - char[50+1]

                  OUTPUT = (char*)전문관리번호   - char[10+1]
  Return Value  : (int)State
                  정상   = 0
                  비정상 = -SQLCODE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getNcapliamSqno_CC(char* seqNo, char* workData, char* lastChngMpno,
    char* pgmID) {
  EXEC SQL BEGIN DECLARE SECTION;
  varchar dbioInputParam1[50+1];    /* pgmID */
  varchar dbioInputParam2[8+1];     /* lastChngMpno */
  varchar dbioInputParam3[8+1];     /* workDate */
  long dbioOutputParam1;            /* seqNo */
  EXEC SQL END DECLARE SECTION;

  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  char *fnName = "CMUV_getNcapliamSqno_CC";

  /* 변수 초기화 */
  INITVAR(dbioInputParam1);                    /* 입력 변수 1 */
  INITVAR(dbioInputParam2);                    /* 입력 변수 2 */
  INITVAR(dbioInputParam3);                    /* 입력 변수 3 */

  dbioOutputParam1 = 0;                        /* 출력 변수 1 */
  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다           */
  setInitDBIO(_singleRow_Array_Size,DBCURSOR_CLOSE);

  /* DBIO module 호출하기전 input 변수 setting                        */
  COPY(dbioInputParam1,pgmID);
  COPY(dbioInputParam2,lastChngMpno);
  COPY(dbioInputParam3,workData);

  /* DBIO module 호출                                                 */
  EXEC SQL EXECUTE
       BEGIN DCUV_NCAPLIAM_S_I_SP.call(
                  /* DBIO module 호출하기 위한 default parameters     */
                  :dbioRqSize,        /* request row size             */
                  :dbioRpSize,        /* response row size            */
                  :dbioRetCode,       /* return SQL CODE              */
                  :dbioRetMsg,        /* return message               */
                  :dbioCsrFlag,       /* cursor handling variable     */
/*                  :dbioSvcName,       /* Service Name                 */
/*                    :dbioUserId,        /* user id                      */
                  /* 각 DBIO module과 interface하기 위한 parameters   */
                  :dbioInputParam1,   /* input parameter 1            */
                  :dbioInputParam2,   /* input parameter 2            */
                  :dbioInputParam3,   /* input parameter 3            */
                  :dbioOutputParam1); /* output parameter 1 */
  END;
  END-EXEC;

  /* DBIO module 호출 결과 확인                                       */
  if (getDBIOResult() != SQL_OK) {

    setDBIOErrMsg(fnName);
    uvDebug(UVDebugDir,"DBIO(DCUV_NCAPLIAM_S_I_SP) 호출 Error[%d], %s", \
        cptReturnCode,getDBIOErrMsg());
    return cptReturnCode;
  }

  /* DBIO 호출 결과를 처리한다.   */
  sprintf(seqNo, "%.6ld", dbioOutputParam1);

  return dbioRetCode;
}

/************************************************************************
  Function Name : CMUV_getSecuCardData_CC()
  Note          : 4자리 난수/암호화생성(보안카드 사용)
  Parameters    : INPUT  = (int) 카드당 생성건수
                           (char[][])난수    - char[4+1]
                           (char[][])암호화  - char[20+1]
                           (int*)   seed 값(호출시 마다 다르게 줄것!)
                                    1회 호출만 해당함.
                  OUTPUT = (int*)생성건수
  Return Value  : (int)State
                  정상   = 0
                  비정상 = 음수
                  -1     = 요청건수와 생성건수가 다름.
                  -2     = 1회 수행시 카드 Set 생성 건수 초과
                  -3     = seed 값 초과
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int CMUV_getSecuCardData_CC(int cnt, char number[][4+1], char encrypt[][50+1], int *res) {
  int i, j;

  int     One = 0;
  int     Two = 54321;
  char    EndFlag = 'N';
  char    Same = 'N';
  char    temp[10];
  time_t t;

  if (cnt > 500000) return -2;
  if (*res >500001) return -3;

  for (i = 0; i<cnt+1; i++) {
    EndFlag = 'N';
    while (EndFlag == 'N') {
      srand((unsigned) time(&t)*(1+i*i+*res));         /* 양수를 사용하기위해 */
      One = rand() % 999999;

      srand((unsigned) One*(Two+i*i+*res));            /* 양수를 사용하기위해 */
      Two = 0;
      Two = rand() % 9999;                          /* 4자리 숫자로 생성 */
      memset(temp,    0x00,   sizeof(temp));
      sprintf(temp,   "%04d\0",   Two);

      for (j = 0; j<i; j++) {   /* 한 카드에 동일한 난수가 나타나지 않도록 */
        if (strcmp(temp,number[j]) == 0 || Two == 0 ||         /* 재생성 */
            (temp[0] == temp[1] && temp[0] == temp[2] && temp[0] == temp[3])) {
          Same = 'Y';
          break;
        } else Same = 'N';
      }

      if (Same == 'N') {
        sprintf(number[i],  "%04d\0",   Two);
        EndFlag = 'Y';         /* 이전의 난수와 동일한 수가 없으면 채택 */
      } else             EndFlag = 'N'; /* 이전의 난수와 동일한 수가 있으면 재시도 */
    }
  }

  for (i = 0; i<cnt; i++) {
    uvEncryption(number[i], encrypt[i]);        /* 암호화 */
  }
  if (i == cnt) {
    *res = cnt;
    return 0;         /* 난수 생성 정상 */
  } else return -1; /* 난수 생성 오류 */
}
/************************************************************************
  End of Code
 ************************************************************************/

 ======================================
 DENC_APL102VW34_SP
 
 PACKAGE         DENC_APL102VW34_SP AS
  procedure CALL(
    rqSize           IN OUT nocopy NUMBER,
    rpSize           IN OUT nocopy NUMBER,
    retCode          OUT nocopy NUMBER,
    retMsg           OUT nocopy VARCHAR2,
    flag             IN OUT nocopy NUMBER,
    srdo_vlid_term   OUT nocopy VARCHAR2,
    suit_vlid_term   OUT nocopy VARCHAR2,
    plan_no          OUT nocopy NUMBER,
    p_poly_no        IN VARCHAR2);
  procedure CLOSE;
END DENC_APL102VW34_SP;
PACKAGE BODY         DENC_APL102VW34_SP AS
  procedure CALL(
    rqSize           IN OUT nocopy NUMBER,
    rpSize           IN OUT nocopy NUMBER,
    retCode          OUT nocopy NUMBER,
    retMsg           OUT nocopy VARCHAR2,
    flag             IN OUT nocopy NUMBER,
    srdo_vlid_term   OUT nocopy VARCHAR2,
    suit_vlid_term   OUT nocopy VARCHAR2,
    plan_no          OUT nocopy NUMBER,
    p_poly_no        IN VARCHAR2)
  is begin
    retCode := 0;
    retMsg := 'DENC_APL102VW34_SP';
select b.srdo_vlid_term
      ,NVL((select c.END_DATE
              from tb_csscm200 c
             where c.cust_id = substr(b.suit_imag_adno,3,10)
               and c.fnpl_prno = a.cllt_lp_prno
               and c.hist_no = to_number(substr(b.suit_imag_adno,13,4))
           ),'99991231') suit_vlid_term
       ,b.PLAN_NO
  into
       srdo_vlid_term,
       suit_vlid_term,
       plan_no
  from tb_isaplctt a
      ,tb_ncaplci1 b
 where a.poly_no = p_poly_no
   and a.poly_no = b.poly_no;
    rpSize := sql%rowcount;
    retCode := -sqlcode;
  exception
    when no_data_found then
      rpSize  := 0;
      retCode := 0;
    when others then
      rpSize  := sql%rowcount;
      retCode := -sqlcode;
      retMsg  :=  sqlerrm;
  end CALL;

  procedure CLOSE is begin
    null;
  end CLOSE;
END DENC_APL102VW34_SP;

===================================
DENC_SDUALCALC_001_SP

/******************************************************************************/
/*   1. System  명  : 대한생명 NK21 프로젝트                                  */
/*   2. Process 명  :                                                         */
/*   3. File    명  : /.../product/include/header/nc/CMNC_lib_struct.h        */
/*   4. 설      명  : UNIX/Tuxedo Service 공통 header file                    */
/*   5. 작  성  일  : 2001.11.30                                              */
/*   6. 작  성  자  :                                                         */
/*   7. 개발  환경  : Compaq Tru64 UNIX Version 5.1                           */
/*   8. Compiler    : Compaq C / Oracle Pro*C 8.1.7.1.0                       */
/*----------------------------------------------------------------------------*/
/*   개정 번호       일자     수정자           내        용                   */
/*----------------------------------------------------------------------------*/

#include <typetool.h>

#include "is/isBase.h"
#include "nc/global_nc.h"

// define Macro 변수는 global_nc.h로 일괄 통합함(2018.09.01)

//#define INSU_CNT    10  /* 피보험자 건수:계약자,주피,종피,자녀1,자녀2,계약단체,피부양자*//* 변경시에는 nc_aplstruct.h도 변경할 것*/
//#define GOOD_CNT   200  /* 가입상품 건수(의무부가특약 제외) 35->200           *//* 변경시에는 nc_aplstruct.h도 변경할 것*/
//#define JEDO_CNT    35  /* 제도특약 갯수                                      *//* 변경시에는 nc_aplstruct.h도 변경할 것*/
//#define TCRM_CNT    30  /* 계약관계자전체 (계약자,피보험자,수익자) */
//#define DSTB_CNT    50  /* 심사자분배유형코드 건수 (심사자분배모듈) */
//#define RV_GOOD_CNT 100 /* 부활시 가입상품건수(갱신상품포함) */
//#define NORCOL_CNT  10000 /* 상품구성관계 건수 */
//#define STF          3                          /* 비과세상품(56,58,59)  건수 */
//#define ASSM_ITEM_CNT 150 /* 사정항목정의 건수 */
//
///* 신진혁, 부활자유납입 테스트 때문에 define 하였음 */
//#define BU_TEST
//#define UL_RV_NUM   24  /* 24회 이상인 상품有 ==> 사용불가!!! */

/* #define CRD_TEST 신진혁 2006.5.29 신용정보조회 미오픈으로 막아놓음, SVncapl100in, CMNC_udwrNotc, CMNC_CrdtSrch_CC 사용 */

/******************************************************************************/
/******************************************************************************/
/*  부활가능계약조건체크 (CMRV_buhwalGang_CC)                                 */
/*  2002.01.03 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    reviDate                  [  8 + 1];  /*   : 부활일자             */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    char    lapsDate                  [  8 + 1];  /*   : 실효일자             */

    //char    rvDvsn                    [  1 + 1];  /* 부활구분 Y:해당월납입, N:해당월미납입,  */
    char    cnvnReviObjtYn            [  1 + 1];  /*   : 간편부활대상여부     */

    CMNC_ModuleReturn  modRc;
}   CMRV_buhwalGang;

/******************************************************************************/
/*  부활연체이자산출 (CMRV_buhwalYuncheIja_CC)                                */
/*  2002.01.04 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
	int     nDlngDate     ;  /* 처리일자      */
  int     nIrkdCode     ;  /* 보종코드 세목 */
	int     nGoodCode     ;  /* 상품코드 세목 */
	int     nFrstCnttDate ;  /* 최초계약일자  */
	int     nCnttDate     ;  /* 계약일자      */
	int     nCnttConcYm   ;  /* 계약체결년월  */
	int     nCnvsDate     ;  /* 전환일자      */
	int     nPaymCyclCode ;  /* 납입주코드    */
	int     nInsrTerm     ;  /* 보험기간      */
	int     nRealInsrTerm ;  /* 실보험기간    */
	int     nExpr1Date    ;  /* 1보기만기일자 */
	int     nElapTm       ;  /* 경과개월수    */
	int     nStrtDate     ;  /* 기간_시작     */
	int     nEndDate      ;  /* 기간_종료     */
  double  prem          ;  /* 보험료        */
  double  vlnsPrem      ;  /* 보험료(변액)  */
  double  totInteAmt    ;  /* 연체이자      */
  double  totVlnsInteAmt;  /* 연체이자(변액)*/
}   ST_inteAmt;

typedef struct
{
    double  joinGoodNo                           ;  /* 가입상품번호          */
	  double  jngdHsno                             ;  /* 가입상품이력번호      */
	  double  updtDlngSqno                         ;  /* 갱신처리일련번호      */
	  char    goodRelnCode                [  1 + 1];  /* 상품관계코드          */
    char    goodCodeDtal                [  4 + 1];  /* 상품종류_세           */
    char    goodCodeItem                [  3 + 1];  /* 상품종류_목           */
	  double  prem                                 ;  /* 보험료                */

	  double  goodArreInte                         ;  /* 총연체이자            */
    double  goodvlnsArreInte                     ;  /* 변액투입보험료연체이자*/

	  int     arreCnt                              ;  /* 연체횟수              */
    int     premCnt                              ;  /* 연체보험료횟수        */
    double  mnthArreInte    [ARYCNT_200]         ;  /* 0                     */
    double  mnthArreVlnsInte[ARYCNT_200]         ;  /* 월연체이자            */
    char    paymYm          [ARYCNT_200][  6 + 1];  /* 연체납월              */
    char    arreTerm        [ARYCNT_200][  8 + 1];  /* 연체기간              */
    double  arrePaymCnt     [ARYCNT_200];           /* 연체납회              */
    double  arrePrem        [ARYCNT_200];           /* 연체보험료            */

} CMRV_buhwalYuncheIjaGood;

typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    paymCyclCode              [ 12 + 1];  /*   : 납입주기             */
    double  sumPrem                            ;  /*   : 합계보험료           */
    char    lapsDate                  [  8 + 1];  /*   : 실효일자             */
    char    reviDate                  [  8 + 1];  /*   : 부활일자             */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */

	  int     goodCnt                            ;
	  CMRV_buhwalYuncheIjaGood  yiGood [CJG_CNT];  /* 상품별 연체이자 */

	  double  totArreInte                        ;  /*   : 총연체이자           */
    double  vlnsArreInte                       ;  /*   : 변액투입보험료연체이자*/ /* 2006.07.18 양용현 신설 */

	  int     arreCnt                            ;  /*     연체횟수              */
    int     premCnt                            ;  /*     연체보험료횟수        */
    double  mnthArreInte    [ARYCNT_200]       ;  /*   : 월연체이자           */
    double  mnthArreVlnsInte[ARYCNT_200]       ;  /*   : 월연체이자           */
    char    paymYm          [ARYCNT_200][6 + 1];  /*   : 연체납월             */
    char    arreTerm        [ARYCNT_200][8 + 1];  /*   : 연체기간             */
    double  arrePaymCnt     [ARYCNT_200]       ;  /*     연체납회              */
    double  arrePrem        [ARYCNT_200]       ;  /*     연체보험료            */

	  char    premDvsn                   [ 2 + 1];  /*   : 해당월납입여부       */
	  int     yFrpyStrtCnt                       ;  /*   : 연내자유납시작회차   */
	  int     reviLastPyct                       ;  /*   : 부활종납회           */

    char    frpyLapsYn                [  4 + 1];  /* 자유납기간 중 실효여부   */
    char    frpyStrtDate              [  8 + 1];  /* 자유납부활 시작일자      */
    char    frpyEndDate               [  8 + 1];  /* 자유납부활 종료일자      */

	  CMNC_ModuleReturn  modRc;
}   CMRV_buhwalYuncheIja;

/******************************************************************************/
/*  부활연체보험료산출 (CMRV_buhwalYuncheBohumryo_CC)                         */
/*  2002.01.04 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    paymCyclCode              [ 12 + 1];  /* I : 납입주기             */
    int     arreCnt                            ;  /*   : 연체횟수             */
    int     premCnt                            ;  /*   : 연체보험료횟수       */
    double  sumPrem                            ;  /*   : 합계보험료           */

    char    polyNo                    [ 12 + 1];  /*   : 증권번호             */
    char    reviDate                  [  8 + 1];  /*   : 부활일자             */

	  int     goodCnt                            ;
    double  joinGoodNo      [CJG_CNT]         ;  /*   : 가입상품번호          */
	  double  jngdHsno        [CJG_CNT]         ;  /*   : 가입상품이력번호      */
	  double  updtDlngSqno    [CJG_CNT]         ;  /*   : 갱신처리일련번호      */
	  char    goodRelnCode    [CJG_CNT][  1 + 1];  /*   : 상품관계코드          */
    char    goodCodeDtal    [CJG_CNT][  4 + 1];  /*   : 상품종류_세           */
    char    goodCodeItem    [CJG_CNT][  3 + 1];  /*   : 상품종류_목           */
    int     goodArreCnt     [CJG_CNT]         ;  /*   : 연체횟수              */
    int     goodPremCnt     [CJG_CNT]         ;  /*   : 연체보험료횟수        */
    double  goodPrem        [CJG_CNT]         ;  /*   : 보험료                */
	  double  goodArrePrem    [CJG_CNT]         ;  /*   : 연체보험료            */

    int     yFrpyStrtCnt                          ;  /*   : 연내자유납시작회차   */

    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  arrePrem                           ;  /*   : 연체보험료           */
    CMNC_ModuleReturn  modRc;
}   CMRV_buhwalYuncheBohumryo;

/******************************************************************************/
/*  연체기간산출 (CMRV_buhwalYuncheGigan_CC)                                  */
/*  2002.01.03 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    double  joinGoodNo                         ;  /* 가입상품번호      */
	  double  jngdHsno                           ;  /* 가입상품이력번호  */
	  double  updtDlngSqno                       ;  /* 갱신처리일련번호  */
	  char    goodRelnCode              [  1 + 1];  /* 상품관계코드      */
    char    goodCodeDtal              [  4 + 1];  /* 상품종류_세       */
    char    goodCodeItem              [  3 + 1];  /* 상품종류_목       */

    int     arreCnt                            ;  /* 연체횟수       (연체이자계산 납회)   */
    char    paymYm        [ARYCNT_200][  6 + 1];  /* 연체납월          */
    char    arreTerm      [ARYCNT_200][  8 + 1];  /* 연체기간 From     */
    int     premCnt                            ;  /* 연체보험료횟수 (보험료를 연체한 총납회)  */

    char    arreEnd       [ARYCNT_200][  8 + 1];  /* 연체기간To(연내자유납 사용) */
    double  arrePaymCnt   [ARYCNT_200];           /* 연체납회                    */
    double  arreDayCnt    [ARYCNT_200];           /* 연체일수                    */
    double  arrePrem      [ARYCNT_200];           /* 연체보험료                  */

} CMRV_buhwalYuncheGiganGood;

typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    paymCyclCode              [ 12 + 1];  /*   : 납입주기             */
    char    lapsDate                  [  8 + 1];  /*   : 실효일자             */
    char    reviDate                  [  8 + 1];  /*   : 부활일자             */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */

    int     arreCnt                            ;  /*   : 연체횟수             */
    char    paymYm        [ARYCNT_200][  6 + 1];  /*   : 연체납월             */
    char    arreTerm      [ARYCNT_200][  8 + 1];  /*   : 연체기간             */
    int     premCnt                            ;  /*   : 연체보험료횟수       */

	  char    premDvsn                  [  2 + 1];  /*   : 해당월납입여부       */
    int     yFrpyStrtCnt                       ;  /*   : 연내자유납시작회차   */
    int     reviLastPyct                       ;  /*   : 부활종납회           */

	  int     goodCnt                            ;
    CMRV_buhwalYuncheGiganGood  giganGood[CJG_CNT]; /*  상품별연체기간       */

    char    frpyLapsYn                [  4 + 1];  /* 자유납기간 중 실효여부      */
    char    frpyStrtDate              [  8 + 1];  /* 자유납부활 시작일자      */
    char    frpyEndDate               [  8 + 1];  /* 자유납부활 종료일자      */

    CMNC_ModuleReturn  modRc;
}   CMRV_buhwalYuncheGigan;

/******************************************************************************/
/*  부활일자체크 (CMRV_buhwalIja_CC)                                          */
/*  2002.01.02 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    reviDate                  [  8 + 1];  /* I : 부활일자             */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    CMNC_ModuleReturn  modRc;
}   CMRV_buhwalIja;

/******************************************************************************/
/*  반송/철회/해지 가능여부 체크 (CMNC_BanCheolHaeYn_CC)                      */
/*  2002.01.22 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    reviDlngNo                [  4 + 1];  /*   : 부활처리번호         */
    char    BCHgubun                  [  4 + 1];  /*   : 반송철회해지구분     */
    char    bsnsDvsn                  [  4 + 1];  /*   : 업무구분             */
    char    rqstRtdv                  [  4 + 1];  /*   : 신청경로             */
    char    retnRmtnRtdv              [ 12 + 1];  /*   : 송금경로구분         */
    char    wdraPosmDate              [  8 + 1];  /*   : 철회소인일자         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    CMNC_ModuleReturn  modRc;
}   CMNC_BanCheolHaeYn;

/******************************************************************************/
/*  신계약 반송보험료산출 (CMNC_NCBanSongBohumryo_CC)                         */
/*  2002.01.24 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    baseDate                  [  8 + 1];  /*   : 기준일자             */
    char    retnInteYn                [  4 + 1];  /*   : 이자산출여부         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  fstiRrcvPrem                       ;  /*   : 초회실입금보험료     */
    double  addPaymPrem                        ;  /*   : 추가납입보험료       */
    double  secdPrem                           ;  /*   : 2회이후입금보험료    */
    double  retnInte                           ;  /*   : 반송이자             */
    double  incmTax                            ;  /*   : 소득세               */
    double  rsdnTax                            ;  /*   : 주민세               */
    double  fstiRetnPrem                       ;  /*   : 초회환급보험료       */
    double  totRetnPrem                        ;  /*   : 총환급보험료         */
    CMNC_ModuleReturn  modRc;
}   CMNC_NCBanSongBohumryo;

/******************************************************************************/
/*  부활 반송보험료산출 (CMNC_RVBanSongBohumryo_CC)                           */
/*  2002.02.01 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    reviDlngNo                [  4 + 1];  /*   : 부활처리번호         */
    char    baseDate                  [  8 + 1];  /*   : 기준일자             */
    char    retnInteYn                [  4 + 1];  /*   : 이자산출여부         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  rvrm                               ;  /*   : 부활보험료           */
    double  addPaymPrem                        ;  /*   : 추가납입보험료       */
    double  secdPrem                           ;  /*   : 부활이후입금보험료   */
    double  retnInte                           ;  /*   : 반송이자             */
    double  incmTax                            ;  /*   : 소득세               */
    double  rsdnTax                            ;  /*   : 주민세               */
    double  fstiRetnPrem                       ;  /*   : 초회환급보험료       */
    double  totRetnPrem                        ;  /*   : 총환급보험료         */
    CMNC_ModuleReturn  modRc;
}   CMNC_RVBanSongBohumryo;

/******************************************************************************/
/*  중도부가 반송/철회보험료산출 (CMNC_JUBanCholBohumryo_CC)                  */
/*  2010.04.15 by 양용현                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    mwayAddDlno               [  4 + 1];  /*   : 중도부가번호         */
    char    rwdtDvsn                  [  4 + 1];  /*   : 반송철회해지구분     */
    char    recpDate                  [  8 + 1];  /*   : 접수일자             */
    char    baseDate                  [  8 + 1];  /*   : 기준일자             */
    char    retnInteYn                [  4 + 1];  /*   : 이자산출여부         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  mwayAddPrem                        ;  /*   : 중도부가보험료       */
    double  retnInte                           ;  /*   : 반송이자             */
    double  incmTax                            ;  /*   : 소득세               */
    double  rsdnTax                            ;  /*   : 주민세               */
    double  totRetnPrem                        ;  /*   : 총환급보험료         */
    CMNC_ModuleReturn  modRc;
}   CMNC_JUBanCholBohumryo;


/******************************************************************************/
/*  상품별 부활연체이자산출 (CMNC_GoodYuncheIja_CC)                           */
/*  2002.02.02 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    goodCode                  [  8 + 1];  /*   : 상품코드             */
    char    paymCyclCode              [ 12 + 1];  /*   : 납입주기             */
    double  prem                               ;  /*   : 보험료               */
    char    lapsDate                  [  8 + 1];  /*   : 실효일자             */
    char    reviDate                  [  8 + 1];  /*   : 부활일자             */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  reviInte                           ;  /*   : 부활연체이자         */
    CMNC_ModuleReturn  modRc;
}   CMNC_GoodYuncheIja;

/******************************************************************************/
/*  청약철회보험료산출 (CMNC_CholwhoiBohumryo_CC)                             */
/*  2002.01.28 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    recpDate                  [  8 + 1];  /*   : 접수일자             */
    char    rmtnDate                  [  8 + 1];  /*   : 송금일자             */
    char    retnInteYn                [  4 + 1];  /*   : 이자산출여부         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  fstiRrcvPrem                       ;  /*   : 초회실입금보험료     */
    double  addPaymPrem                        ;  /*   : 추가납입보험료       */
    double  secdPrem                           ;  /*   : 2회이후입금보험료    */
    double  retnInte                           ;  /*   : 철회이자             */
    double  incmTax                            ;  /*   : 소득세               */
    double  rsdnTax                            ;  /*   : 주민세               */
    double  fstiRetnPrem                       ;  /*   : 초회환급보험료       */
    double  totRetnPrem                        ;  /*   : 총환급보험료         */
    CMNC_ModuleReturn  modRc;
}   CMNC_CholwhoiBohumryo;

/******************************************************************************/
/*  품질보증해지보험료산출 (CMNC_HaeGiBohumryo_CC)                            */
/*  2002.01.30 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    rmtnDate                  [  8 + 1];  /*   : 송금일자             */
    char    retnInteYn                [  4 + 1];  /*   : 이자산출여부         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  fstiRrcvPrem                       ;  /*   : 초회실입금보험료     */
    double  addPaymPrem                        ;  /*   : 추가납입보험료       */
    double  secdPrem                           ;  /*   : 2회이후입금보험료    */
    double  retnInte                           ;  /*   : 해지이자             */
    double  incmTax                            ;  /*   : 소득세               */
    double  rsdnTax                            ;  /*   : 주민세               */
    double  fstiRetnPrem                       ;  /*   : 초회환급보험료       */
    double  totRetnPrem                        ;  /*   : 총환급보험료         */
    CMNC_ModuleReturn  modRc;
}   CMNC_HaeGiBohumryo;

/******************************************************************************/
/*  요청자료저장 (CMNC_OffStr_CC)                                             */
/*  2002.02.04 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    pynoBdctNo                [ 12 + 1];  /* I : 증권(일괄)번호       */
    char    bndlReviDlno              [  4 + 1];  /*   : (일괄)부활처리번호   */
    char    rwdtDvsn                  [ 12 + 1];  /*   : 반송철회해지구분     */
    char    bsnsDvsnCode              [  4 + 1];  /*   : 업무구분코드         */
    char    rwdtStatCode              [ 12 + 1];  /*   : 반송철회해지상태구분 */
    char    indvBndlDvsn              [  4 + 1];  /*   : 개별일괄구분         */
    char    rqstRoutDvsn              [ 12 + 1];  /*   : 요청경로구분         */
    char    rqstOrgnCode              [  8 + 1];  /*   : 요청기관코드         */
    char    dmdrMpno                  [ 12 + 1];  /*   : 요청자사번           */
    char    wdraPosmDate              [  8 + 1];  /*   : 철회소인일자         */
    char    wdraRecpDate              [  8 + 1];  /*   : 철회접수일자         */
    char    retnRmtnRtdv              [ 12 + 1];  /*   : 송금경로구분         */
    char    rwdtRmtnDate              [  8 + 1];  /*   : 송금일자             */
    char    retnResnCtrl              [ 10 + 1];  /*   : 반송사유고객역할코드 */
    char    splsRiskGrdv              [  4 + 1];  /*   : 초과위험등급구분     */
    char    retnResnCode              [ 12 + 1];  /*   : 반송사유코드         */
    char    rtrsAddCten               [200 + 1];  /*   : 반송사유추가내용     */
    char    cnttRcwcUsdv              [  4 + 1];  /*   : 계약입출금사용구분   */
    double  rcwcRgstHsno                       ;  /*   : 입출금등록이력번호   */
    char    custId                    [ 12 + 1];  /*   : 고객ID               */
    char    finaOrgnCode              [  8 + 1];  /*   : 금융기관코드         */
    char    finaOrgnDvsn              [  4 + 1];  /*   : 금융기관구분         */
    char    acctCardNo                [ 24 + 1];  /*   : 계좌_카드번호        */
    char    cardVlidEdym              [  8 + 1];  /*   : 카드유효만료년월     */
    char    bankBrchCode              [  8 + 1];  /*   : 은행지점코드         */
    char    jugmBsnsDvsn              [ 12 + 1];  /*   : 심사업무구분         */
    char    judgDlngTpcd              [ 12 + 1];  /*   : 심사자처리형태코드   */
    char    jugmDlrsCode              [ 12 + 1];  /*   : 심사처리사유코드     */
    char    btchDlngYn                [ 12 + 1];  /*   : 배치처리여부         */
    char    acctVrfyNo                [  4 + 1];  /*   : 계좌검증제외여부     */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    CMNC_ModuleReturn  modRc;
}   CMNC_OffStr;

/******************************************************************************/
/*  요청자료취소 (CMNC_OffCan_CC)                                             */
/*  2002.03.05 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    pynoBdctNo                [ 12 + 1];  /* I : 증권(일괄)번호       */
    char    bndlReviDlno              [  4 + 1];  /*   : (일괄)부활처리번호   */
    char    rwdtDvsn                  [ 12 + 1];  /*   : 반송철회해지구분     */
    char    bsnsDvsnCode              [  4 + 1];  /*   : 업무구분코드         */
    char    indvBndlDvsn              [  4 + 1];  /*   : 개별일괄구분         */
    char    cnclOrgnCode              [  8 + 1];  /*   : 취소기관코드         */
    char    cnclManMpno               [ 12 + 1];  /*   : 취소자사번           */
    char    jugmBsnsDvsn              [ 12 + 1];  /*   : 심사업무구분         */
    char    judgDlngTpcd              [ 12 + 1];  /*   : 심사자처리형태코드   */
    char    jugmDlrsCode              [ 12 + 1];  /*   : 심사처리사유코드     */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    CMNC_ModuleReturn  modRc;
}   CMNC_OffCan;

/******************************************************************************/
/*  결재자료저장 (CMNC_DcsStr_CC)                                             */
/*  2002.03.11 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    rqstAprvDvsn              [  4 + 1];  /* I : 요청/결재구분        */
    char    pynoBdctNo                [ 12 + 1];  /*   : 증권(일괄)번호       */
    char    bndlReviDlno              [  4 + 1];  /*   : (일괄)부활처리번호   */
    char    rwdtDvsn                  [ 12 + 1];  /*   : 반송철회해지구분     */
    char    bsnsDvsnCode              [  4 + 1];  /*   : 업무구분코드         */
    char    rwdtStatCode              [ 12 + 1];  /*   : 반송철회해지상태구분 */
    char    indvBndlDvsn              [  4 + 1];  /*   : 개별일괄구분         */
    char    rqstRoutDvsn              [ 12 + 1];  /*   : 요청경로구분         */
    char    aprvOrgnCode              [  8 + 1];  /*   : 결재기관코드         */
    char    aprvManMpno               [ 12 + 1];  /*   : 결재자사번           */
    char    wdraPosmDate              [  8 + 1];  /*   : 철회소인일자         */
    char    wdraRecpDate              [  8 + 1];  /*   : 철회접수일자         */
    char    retnRmtnRtdv              [ 12 + 1];  /*   : 송금경로구분         */
    char    rwdtRmtnDate              [  8 + 1];  /*   : 송금일자             */
    char    retnResnCtrl              [ 10 + 1];  /*   : 반송사유고객역할코드 */
    char    splsRiskGrdv              [  4 + 1];  /*   : 초과위험등급구분     */
    char    retnResnCode              [ 12 + 1];  /*   : 반송사유코드         */
    char    rtrsAddCten               [200 + 1];  /*   : 반송사유추가내용     */
    char    cnttRcwcUsdv              [  4 + 1];  /*   : 계약입출금사용구분   */
    double  rcwcRgstHsno                       ;  /*   : 입출금등록이력번호   */
    char    custId                    [ 12 + 1];  /*   : 고객ID               */
    char    finaOrgnCode              [  8 + 1];  /*   : 금융기관코드         */
    char    finaOrgnDvsn              [  4 + 1];  /*   : 금융기관구분         */
    char    acctCardNo                [ 24 + 1];  /*   : 계좌_카드번호        */
    char    cardVlidEdym              [  8 + 1];  /*   : 카드유효만료년월     */
    char    bankBrchCode              [  8 + 1];  /*   : 은행지점코드         */
    char    jugmObctStcd              [ 12 + 1];  /*   : 심사대상건상태코드   */
    char    jugmBsnsDvsn              [ 12 + 1];  /*   : 심사업무구분         */
    char    judgDlngTpcd              [ 12 + 1];  /*   : 심사자처리형태코드   */
    char    jugmDlrsCode              [ 12 + 1];  /*   : 심사처리사유코드     */
    char    btchDlngYn                [ 12 + 1];  /*   : 배치처리여부         */
    char    parsTdlgYn                [ 12 + 1];  /*   : 전환처리여부         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    char    cnttReviDate              [  8 + 1];  /*   : 계약_부활일자        */
    char    cnttClafDlyn              [  4 + 1];  /*   : 계약마감후처리여부   */
    char    emplYn                    [  4 + 1];  /*   : 내근사원여부         */
    double  lastPaymCnt                        ;  /*   : 최종납회             */
    double  fstiRrcvPrem                       ;  /*   : 초회실입금보험료     */
    double  addPaymPrem                        ;  /*   : 추가납입보험료       */
    double  secdPrem                           ;  /*   : 2회이후입금보험료    */
    double  retnInte                           ;  /*   : 반환이자             */
    double  incmTax                            ;  /*   : 소득세               */
    double  rsdnTax                            ;  /*   : 주민세               */
    double  fstiRetnPrem                       ;  /*   : 초회환급보험료       */
    double  totRetnPrem                        ;  /*   : 총환급보험료         */
    double  fstiPrem                           ;  /*   : 초회보험료           */
    double  frsyPrem                           ;  /*   : 초년도보험료         */
    double  seyePrem                           ;  /*   : 차년도보험료         */
    CMNC_ModuleReturn  modRc;
}   CMNC_DcsStr;

/******************************************************************************/
/*  결재자료취소 (CMNC_DcsCan_CC)                                             */
/*  2002.03.11 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    pynoBdctNo                [ 12 + 1];  /* I : 증권(일괄)번호       */
    char    bndlReviDlno              [  4 + 1];  /*   : (일괄)부활처리번호   */
    char    rwdtDvsn                  [ 12 + 1];  /*   : 반송철회해지구분     */
    char    bsnsDvsnCode              [  4 + 1];  /*   : 업무구분코드         */
    char    indvBndlDvsn              [  4 + 1];  /*   : 개별일괄구분         */
    char    cnclOrgnCode              [  8 + 1];  /*   : 취소기관코드         */
    char    cnclManMpno               [ 12 + 1];  /*   : 취소자사번           */
    char    jugmBsnsDvsn              [ 12 + 1];  /*   : 심사업무구분         */
    char    judgDlngTpcd              [ 12 + 1];  /*   : 심사자처리형태코드   */
    char    jugmDlrsCode              [ 12 + 1];  /*   : 심사처리사유코드     */
    char    parsTdlgYn                [ 12 + 1];  /*   : 전환처리여부         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    CMNC_ModuleReturn  modRc;
}   CMNC_DcsCan;

/******************************************************************************/
/*  변액보험 계약기본정보 (CMNC_vlnsCnttBaseSerch_CC)                         */
/*  2002.12.06 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [  9 + 1];  /* I : 증권번호             */
    char    prsnCoprSadv              [ 10 + 1];  /*   : 개인법인판매구분     */
    char    fundCodeI                 [ 10 + 1];  /*   : 펀드구분코드         */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    char    fundCodeO     [ARYCNT_050][ 10 + 1];  /*   : 펀드구분코드         */
    char    irkdCodeDtal  [ARYCNT_050][  8 + 1];  /*   : 보험종류코드_세      */
    char    irkdCodeItem  [ARYCNT_050][  8 + 1];  /*   : 보험종류코드_목      */
    char    clltOrgnCode  [ARYCNT_050][  5 + 1];  /*   : 모집기관코드         */
    char    clltLpPrno    [ARYCNT_050][  8 + 1];  /*   : 모집설계사고유번호   */
    char    ctorCustName  [ARYCNT_050][ 50 + 1];  /*   : 계약자명             */
    char    mainInsuName  [ARYCNT_050][ 50 + 1];  /*   : 주피보험자명         */
    double  mainInsrAmt   [ARYCNT_050]         ;  /*   : 주보험금             */
    char    cnttDate      [ARYCNT_050][  8 + 1];  /*   : 계약일자             */
    double  sumPrem       [ARYCNT_050]         ;  /*   : 합계보험료           */
    double  joinRato      [ARYCNT_050]         ;  /*   : 가입비율             */
    double  invtWdraPrem  [ARYCNT_050]         ;  /*   : 투입인출보험료       */
    char    cnttStatCode  [ARYCNT_050][ 10 + 1];  /*   : 계약상태코드         */
    CMNC_ModuleReturn  modRc;
}   CMNC_vlnsCnttBaseSerch;

/******************************************************************************/
/*  가망갑을지 동기화 처리(CMNC_gMSyncPrs_CC)                                 */
/*  2002.02.15 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar bdctNo                [ 12 + 1];    /* input  : 일괄계약번호      */
    varchar commitYn              [  1 + 1];    /* input  : COMMIT 여부       */
    double  nelpNetPrem                    ;    /* output : 미경과순보험료    */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld             [ 50 + 1];    /* output : 에러필드          */
    char    resultMsg             [100 + 1];    /* output : 결과메시지        */
} CMNC_gmSyncPrs;

/******************************************************************************/
/*  갑을지 동기화 처리(CMNC_gYSyncPrs_CC)                                     */
/*  2002.02.15 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar bdctNo                [ 12 + 1];    /* input  : 일괄계약번호      */
    double  nelpNetPrem                    ;    /* output : 미경과순보험료    */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld             [ 50 + 1];    /* output : 에러필드          */
    char    resultMsg             [100 + 1];    /* output : 결과메시지        */
} CMNC_gySyncPrs;

/******************************************************************************/
/*  일괄계약 발행처리(CMNC_chungyakBal_CC)                                    */
/*  2002.07.10 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar bdctNo                [ 12 + 1];    /* input  : 일괄계약번호      */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld             [ 50 + 1];    /* output : 에러필드          */
    char    resultMsg             [100 + 1];    /* output : 결과메시지        */
} CMNC_chungyakBal;

/******************************************************************************/
/*  방문수금승인조회(CMNC_vistCollRcntSrch_CC)                                */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar custId                  [ 10+1];    /* input  : 고객ID            */
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류코드_세   */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류코드_목   */
    varchar srdoPublPrdt            [  8+1];    /* input  : 청약서발행예정일자*/
    varchar rqstOrgnCode            [  8+1];    /* input  : 요청기관코드      */
} CMNC_vistCollRcntSrch;

/******************************************************************************/
/*  부실계약조회(CMNC_insoCnttChck_CC)                                        */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar custId               [6][ 10+1];    /* input  : 고객ID            */
                                                /*          0: 계약자         */
                                                /*          1: 주피           */
                                                /*          2: 종피           */
                                                /*          3: 자녀1          */
                                                /*          4: 자녀2          */
                                                /*          5: 납부자         */
    varchar orgnCode                [  5+1];    /* input  : 기관코드          */
    varchar clltLpPrno              [  8+1];    /* input  : 모집설계사고유번호*/
    varchar clplAddrKdcd            [ 10+1];    /* input  : 수금지주소종류코드*/
    varchar clogYm                  [  6+1];    /* input  : 마감년월          */
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류코드_세   */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류코드_목   */
    int     resl                           ;    /* output : 부실계약결과      */
}   CMNC_insoCnttChck;

/******************************************************************************/
/*  만기일자 산출(CMNC_endDateSrch_CC)                                        */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar cnttDate                [  8+1];    /* input : 계약일자           */
    varchar insrTermDvsn            [ 10+1];    /* input : 보험기간구분       */
    int     insrTerm                       ;    /* input : 보험기간           */
                                                /*    or   연금개시연령       */
    int     ctorAge                        ;    /* input : 계약자연령         */
    int     minsAge                        ;    /* input : 주피연령           */
    int     scndAge                        ;    /* input : 종피연령           */
    int     chldAge                        ;    /* input : 자녀연령           */
    varchar endDate                 [  8+1];    /* output: 만기일자           */
}   CMNC_endDateSrch;

/******************************************************************************/
/*  실보험기간 산출(CMNC_realInsrCalc_CC)                                     */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    int     insrTerm                       ;    /* input : 보험기간           */
    varchar insrTermDvsn            [ 10+1];    /* input : 보험기간구분       */
    int     minsAge                        ;    /* input : 주피연령           */
    int     scndAge                        ;    /* input : 종피연령           */
    int     chldAge                        ;    /* input : 자녀연령           */
    int     ctorAge                        ;    /* input : 계약자연령         */
    int     realInsrTerm                   ;    /* output: 실제보험기간       */
}   CMNC_realInsrCalc;

/******************************************************************************/
/*  실납입기간 산출(CMNC_realPaymCalc_CC)                                     */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    int     paymTerm                       ;    /* input : 납입기간           */
    varchar paymTermDvsn            [ 10+1];    /* input : 납입기간구분       */
    int     insrTerm                       ;    /* input : 보험기간           */
    varchar insrTermDvsn            [ 10+1];    /* input : 보험기간구분       */
    int     minsAge                        ;    /* input : 주피연령           */
    int     scndAge                        ;    /* input : 종피연령           */
    int     chldAge                        ;    /* input : 자녀연령           */
    int     realPaymTerm                   ;    /* output: 실납입기간         */
}   CMNC_realPaymCalc;

/******************************************************************************/
/*  설계사가족계약체크(CMNC_lpFmlyChck_CC)                                    */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar custId               [5][ 10+1];    /* input  : 고객ID            */
                                                /*          0: 계약자         */
                                                /*          1: 주피           */
                                                /*          2: 종피           */
                                                /*          3: 자녀1          */
                                                /*          4: 자녀2          */
    varchar clltLpPrno              [  8+1];    /* input  : 모집설계사고유번호*/
    varchar clogYm                  [  6+1];    /* input  : 마감년월          */
}   CMNC_lpFmlyChck;

/******************************************************************************/
/*  보험연령산출(CMNC_insrAgeCalc_CC)                                         */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar cnttDate                [  8+1];    /* input  : 계약일자          */
    varchar birthDate               [  8+1];    /* input  : 생년월일          */
    int     insrAge                        ;    /* output : 보험연령          */
}   CMNC_insrAgeCalc;

/******************************************************************************/
/*  보기납기체크(CMNC_pytrIntrChck_CC)                                        */
/*  2002.04.30 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar procGubun               [  2+1];    /* input  : 업무구분          */
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar goodCodeDtal            [  4+1];    /* input  : 상품코드_세       */
    varchar goodCodeItem            [  3+1];    /* input  : 상품코드_목       */
    varchar intrInqrCode            [ 10+1];    /* input  : 보험기간조회코드  */
    varchar pytrInqrCode            [ 10+1];    /* input  : 납입기간조회코드  */
    /* 사용항목                                                               */
    double  itemAW                         ;    /* input  : 계약자연령        */
    double  itemAX                         ;    /* input  : 주피연령          */
    double  itemAY                         ;    /* input  : 종피연령          */
    double  itemAZ1                        ;    /* input  : 자녀1연령         */
    double  itemAZ2                        ;    /* input  : 자녀2연령         */
    varchar itemN0Y                 [  1+1];    /* input  : 일시납여부        */
    double  itemC1P                        ;    /* input  : 월납보험료        */
    varchar itemC1Y                 [  1+1];    /* input  : 월납여부          */
    double  itemCY                         ;    /* input  : 납입주기          */
    varchar itemN1                  [ 10+1];    /* input  : 제1보험기간       */
                                                /* 보험기간조회코드           */
    varchar itemN2A                 [ 10+1];    /* input  :제2보기개시연령코드*/
                                                /* 연금지급개시연령           */
    varchar itemNN                  [ 10+1];    /* input  : 보험기간          */
                                                /* 보험기간조회코드           */
    varchar itemSW                  [  1+1];    /* input  : 계약자성별        */
    varchar itemSX                  [  1+1];    /* input  : 주피성별          */
    varchar itemSY                  [  1+1];    /* input  : 종피성별          */
    varchar itemSZ1                 [  1+1];    /* input  : 자녀1성별         */
    varchar itemCD                  [  8+1];    /* input  : 계약일자          */

    varchar resultYn                [  1+1];    /* output : 체크결과          */
                                                /* "Y":가능, "N":불가능       */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_pytrIntrChck;

/******************************************************************************/
/*  보기개시연령체크(CMNC_stintAGeChck_CC)                                    */
/*  2002.12.12 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar procGubun               [  2+1];    /* input  : 업무구분          */
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar goodCodeDtal            [  4+1];    /* input  : 상품코드_세       */
    varchar goodCodeItem            [  3+1];    /* input  : 상품코드_목       */
    varchar sintStagIqcd            [ 10+1];    /* input  : 제2보기개시연령조회코드*/
    varchar tintStagIqcd            [ 10+1];    /* input  : 제3보기개시연령조회코드*/
    /* 사용항목                                                               */

    double  itemAX                         ;    /* input  : 주피연령          */
    double  itemC1P                        ;    /* input  : 월납보험료        */
    varchar itemMM                  [ 10+1];    /* input  : 납입기간          */
    varchar itemN1                  [ 10+1];    /* input  : 제1보험기간       */
    varchar itemSX                  [  1+1];    /* input  : 주피성별          */
    varchar resultYn                [  1+1];    /* output : 체크결과          */
                                                /* "Y":가능, "N":불가능       */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_stintAgeChck;

/******************************************************************************/
/*  납입주기체크(CMNC_paymCyclChck_CC)                                        */
/*  2002.04.29 by 정철수                                                      */
/******************************************************************************/
typedef struct
{   varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar paymCyclCode            [ 10+1];    /* input  : 납입주기코드      */
    varchar resultYn                [  1+1];    /* output : 체크결과          */
                                                /* "Y":가능, "N":불가능       */
                                                /* "?":납입주기예외존재       */
    int     resultCode                     ;    /* output : 처리결과코드      */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */

}   CMNC_paymCyclChck;

/******************************************************************************/
/*  가입연령체크(CMNC_saleAgeChck_CC)                                         */
/*  2002.04.30 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar goodCodeDtal            [  4+1];    /* input  : 상품코드_세       */
    varchar goodCodeItem            [  3+1];    /* input  : 상품코드_목       */
    double  insuAge       [CRM_CNT]       ;    /* input  : 계약관계자연령    */
                                                /*  0:계약자, 1:주피, 2:종피, */
                                                /*  3:자녀(1) 4:자녀2         */
    varchar insuSex       [CRM_CNT][  1+1];    /* input  : 계약관계자성별    */
                                                /*  0:계약자, 1:주피, 2:종피, */
                                                /*  3:자녀(1) 4:자녀2         */

    /* 사용항목                                                               */
    varchar itemCY                  [ 10+1];    /* input  : 납입주기          */
    varchar itemMM                  [ 10+1];    /* input  : 납입기간          */
                                                /*         (납입기간조회코드) */
    varchar itemN1                  [ 10+1];    /* input  : 제1보험기간       */
                                                /*         (보험기간조회코드) */
    varchar itemN2A                 [ 10+1];    /* input  : 제2보기개시연령   */
                                                /*         (연금개시연령)     */
    varchar itemNN                  [ 10+1];    /* input  : 보험기간          */
                                                /*         (보험기간조회코드) */
    varchar itemAG                  [ 10+1];    /* input  : 만연령적용여부    */
    char    saleAgeYn     [CRM_CNT][  1+1];    /* output : 가능연령여부      */
                                                /*  'Y':가능, 'N':불가능      */
    double  minAge        [CRM_CNT]       ;    /* output : 최소연령          */
    double  maxAge        [CRM_CNT]       ;    /* output : 최대연령          */
    int     resultCode                     ;    /* output : 처리결과코드      */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_saleAgeChck;

/******************************************************************************/
/*  가입연령체크(CMNC_entAgeChck_CC)                                         */
/*  2003.03.16 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar procGubun               [  2+1];    /* input  : 업무구분          */
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar goodCodeDtal  [CJG_CNT][  4+1];    /* input  : 상품종류_세       */
    varchar goodCodeItem  [CJG_CNT][  3+1];    /* input  : 상품종류_목       */
    double  insuAge       [CRM_CNT]       ;    /* input  : 계약관계자연령    */
                                                /*  0:계약자, 1:주피, 2:종피, */
                                                /*  3:자녀(1) 4:자녀2         */
    varchar insuSex       [CRM_CNT][  1+1];    /* input  : 계약관계자성별    */
                                                /*  0:계약자, 1:주피, 2:종피, */
                                                /*  3:자녀(1) 4:자녀2         */

    /* 사용항목                                                               */
    varchar itemNN        [CJG_CNT][ 10+1];    /* input  : 보험기간          */
                                                /*         (보험기간조회코드) */
    varchar itemMM        [CJG_CNT][ 10+1];    /* input  : 납입기간          */
                                                /*         (납입기간조회코드) */
    varchar itemCY                  [ 10+1];    /* input  : 납입주기          */
    varchar itemN2A                 [ 10+1];    /* input  : 제2보기개시연령   */
                                                /*         (연금개시연령)     */
    varchar itemN1        [CJG_CNT][ 10+1];    /* input  : 제1보험기간       */
                                                /*         (보험기간조회코드) */
    varchar itemC0Y                 [  1+1];    /* input  : 일시납여부        */
                                                /*      (일시납:1, 비일시납:0)*/
    varchar itemC1Y                 [  1+1];    /* input  : 월납  여부        */
                                                /*         (월납 :1, 비월납:0)*/
    double  itemC1P       [CJG_CNT]       ;    /* input  : 월납 보험료       */
    varchar itemHZ        [CRM_CNT][ 10+1];    /* input  : 위험급수코드      */
    varchar itemRY                  [  1+1];    /* input  : 갱신여부          */
    double  itemDER       [CRM_CNT]       ;    /* input  : 사망위험지수      */
    double  itemCIR       [CRM_CNT]       ;    /* input  : CI위험지수        */
    varchar itemCD                  [  8+1];    /* input  : 계약일자          */
    int     goodCnt                        ;    /* input  : 상품갯수          */
    double  acatGurtTerm                   ;    /* input  : 적립금보증기간    */

    double  minAge        [CJG_CNT][CRM_CNT]; /* output : 최소연령          */
    double  maxAge        [CJG_CNT][CRM_CNT]; /* output : 최대연령          */
    int     resultCode                     ;    /* output : 처리결과코드      */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_entAgeChck;

/******************************************************************************/
/*  영업자유설계체크(CMNC_bussFrplChck_CC)                                    */
/*  2002.04.30 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    double  iisiPrm                        ;    /* input  : 일시납보험료      */
    double  monPrm                         ;    /* input  : 월납환산보험료    */
    varchar bussFrplYn              [  1+1];    /* output : 영업자유설계여부  */
                                                /*  'Y':해당, 'N':해당무      */
    int     resultCode                     ;    /* output : 처리결과코드      */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_bussFrplChck;

/******************************************************************************/
/*  최저보험료검색(CMNC_lowtPremSrch_CC)                                      */
/*  2002.04.30 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar procGubun               [  2+1];    /* input  : 업무구분          */
    varchar pgmGubun                [  1+1];    /* 개별/일괄구분       (C)    */
                                                /* P  : 개별                  */
                                                /* G  : 일괄갑지              */
                                                /* U  : 일괄을지              */
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar strtDate                [  8+1];    /* input  : 시작일자          */
    int     itemAZ1                        ;    /* input  : 자녀1연령         */
    varchar itemCY                  [ 10+1];    /* input  : 납입주기코드      */
    varchar itemMM                  [ 10+1];    /* input  : 납입기간조회코드  */
    double  itemMS                         ;    /* input  : 해당 보종의 주계약 가입금액*/
    double  itemZZ                         ;    /* input  : 해당 보종의 주계약 보험료*/
    varchar itemNN                  [ 10+1];    /* input  : 보험기간조회코드  */
    int     itemAX                         ;    /* input  : 주피연령          */
    int     itemBJ                         ;    /* input  : 법인구분          */
                                                /* 법인점포영업부:1, ELSE:0   */
    int     itemBD                         ;    /* input  : 업무구분   이은정참사요청 2004.02.20       */
    varchar itemSX                  [ 10+1];    /* input  : 성별       보전요청, 2009.09.07            */
    int     itemN2A                        ;    /* input  : 연금개시나이 보전요청, 2009.09.07          */

    varchar grpCustId               [ 10+1];    /* input  : 단체고객번호      */
    double  sumOrigPrem                    ;    /* input  : 원보험료          */
    double  conbRato                       ;    /* input  : 기부비율          */
    double  lowtPrem                       ;    /* output : 최저보험료        */
    varchar lowtPremYn              [  1+1];    /* output : 최저보험료여부    */
                                                /*  'Y':이상, 'N':미만        */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_lowtPremSrch;

/******************************************************************************/
/*  기준계약고검색(CMNC_stddAmtSrch_CC)                                       */
/*  2002.04.04 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류_세       */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류_목       */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar goodCodeDtal            [  4+1];    /* input  : 상품코드_세       */
    varchar goodCodeItem            [  3+1];    /* input  : 상품코드_목       */
    varchar strtDate                [  8+1];    /* input  : 시작일자          */
    int     paymTerm                       ;    /* input  : 납입기간          */
    varchar paymTermDvsn            [ 10+1];    /* input  : 납입기간구분      */
    int     insrTerm                       ;    /* input  : 보험기간          */
    varchar insrTermDvsn            [ 10+1];    /* input  : 보험기간구분      */
    varchar paymCyclCode            [ 10+1];    /* input  : 납입주기코드      */
    int     insAge        [CRM_CNT]       ;    /* input  : 피보험자연령      */
    double  sumPrem                        ;    /* input  : 합계보험료        */
    double  origMainPrem                   ;    /* input  : 원주보험료        */
    double  mainInsrAmt                    ;    /* input  : 주보험금          */
    double  stddAmt                        ;    /* output : 기준계약고        */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_stddAmtSrch;

/******************************************************************************/
/*  소급 보험료 산출(CMNC_retrPremCalc_CC)                                    */
/*  2002.04.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar paymCyclCode            [ 10+1];    /* input  : 납입주기코드      */
    double  sumPrem                        ;    /* input  : 합계보험료        */
    varchar ftprRmtnDate            [  8+1];    /* input  : 초회보험료송금일자*/
    varchar cnttDate                [  8+1];    /* input  : 계약일자          */
    double  retrCnt                        ;    /* input  : 소급횟수          */
    double  retrPrem                       ;    /* output : 소급보험료        */
    double  retrInte                       ;    /* output : 소급이자          */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_retrPremCalc;

/******************************************************************************/
/*  단체취급 할인율 검색(CMNC_dsctPremSrch_CC)                                */
/*  2002.05.06 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류코드_세   */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류코드_목   */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar goodCodeDtal            [  4+1];    /* input  : 상품코드_세       */
    varchar goodCodeItem            [  3+1];    /* input  : 상품코드_목       */
    varchar dsctRatoCode            [ 10+1];    /* input  : 할인율코드        */
    varchar strtDate                [  8+1];    /* input  : 시작일자          */
    double  dsctRato                       ;    /* output : 할인율            */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_dsctPremSrch;

/******************************************************************************/
/*  평균보험요율 산출(CMNC_getAvgRate_CC)                                     */
/*  2002.07.06 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar bdctNo                  [  9+1];    /* input  : 일괄계약번호      */
    varchar gubun                   [  1+1];    /* input  : 가망/실 구분      */
    double  avrgPremRato                   ;    /* output : 평균보험료율      */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_getAvgRate;

/******************************************************************************/
/*  평균보험료 산출(CMNC_getAvgPrm_CC)                                        */
/*  2002.07.06 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar bdctNo                  [  9+1];    /* input  : 일괄계약번호      */
    varchar gubun                   [  1+1];    /* input  : 가망/실 구분      */
    double  avrgPremRato                   ;    /* input  : 평균보험료율      */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_getAvgPrm;


/******************************************************************************/
/*  평균연령 산출(CMNC_getAvgAge_CC)                                          */
/*  2002.07.06 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar bdctNo                  [  9+1];    /* input  : 일괄계약번호      */
    double  avrgAgeMan                     ;    /* output : 평균연령_남자     */
    double  avrgAgeWomn                    ;    /* output : 평균연령_여자     */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_getAvgAge;

/******************************************************************************/
/*  의무부가특약 조립(CMNC_goodDutyAssm_CC)                                   */
/*  2002.06.03 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal              [  4+1];  /* input  : 보험종류코드_세   */
    varchar irkdCodeItem              [  3+1];  /* input  : 보험종류코드_목   */
    varchar saleChnlCode              [ 10+1];  /* input  : 판매채널코드      */
    varchar strtDate                  [  8+1];  /* input  : 시작일자          */
    varchar procGubun                 [  2+1];  /* input  : 업무구분          */
    double  joinAge         [CRM_CNT]       ;  /* input  : 계약관계자 연령   */

    varchar goodRelnCode    [CJG_CNT][  1+1];  /* inout  : 상품구분          */
    varchar goodCodeDtal    [CJG_CNT][  4+1];  /* inout  : 상품코드_세       */
    varchar goodCodeItem    [CJG_CNT][  3+1];  /* inout  : 상품코드_목       */
    varchar goodCodeName    [CJG_CNT][255+1];  /* inout  : 상품업무명        */
    double  goodInsrAmt     [CJG_CNT]       ;  /* inout  : 보험금            */
    double  goodPrem        [CJG_CNT]       ;  /* inout  : 보험료            */
    varchar goodInsrTermCode[CJG_CNT][ 10+1];  /* inout  : 보험기간조회코드  */
    varchar goodPaymTermCode[CJG_CNT][ 10+1];  /* inout  : 납입기간조회코드  */
    double  insrTerm        [CJG_CNT]       ;  /* inout  : 보험기간          */
    double  realInsrTerm    [CJG_CNT]       ;  /* inout  : 실보험기간        */
    varchar insrTermDvsn    [CJG_CNT][ 10+1];  /* inout  : 보험기간구분      */
    double  paymTerm        [CJG_CNT]       ;  /* inout  : 납입기간          */
    double  realPaymTerm    [CJG_CNT]       ;  /* inout  : 실납입기간        */
    varchar paymTermDvsn    [CJG_CNT][ 10+1];  /* inout  : 납입기간구분      */
    varchar exprDate        [CJG_CNT][  8+1];  /* inout  : 만기일자          */
    varchar ptpyYn          [CJG_CNT][  1+1];  /* inout  : 전기납여부        */
    double  stddJoinAmt     [CJG_CNT]       ;  /* inout  : 기준가입금액      */
    double  saleStddAmt     [CJG_CNT]       ;  /* inout  : 판매기준금액      */
    double  goodCnt                          ;  /* inout  : 상품갯수          */
    varchar sintStagIqcd              [ 10+1];  /* inout  : 제2보기개시연령조회코드*/

    int     resultCode                       ;  /* output : 처리결과          */
    char    resultFld                 [ 50+1];  /* output : 에러필드          */
    char    resultMsg                 [100+1];  /* output : 결과메시지        */
}   CMNC_goodDutyAssm;


/******************************************************************************/
/*  의무부가특약 조립(CMNC_dutyAssm_CC)                                       */
/*  2003.08.04 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal              [  4+1];  /* input  : 보험종류코드_세   */
    varchar irkdCodeItem              [  3+1];  /* input  : 보험종류코드_목   */
    varchar saleChnlCode              [ 10+1];  /* input  : 판매채널코드      */
    varchar strtDate                  [  8+1];  /* input  : 시작일자          */
    varchar procGubun                 [  2+1];  /* input  : 업무구분          */
    double  joinAge         [CRM_CNT]       ;  /* input  : 계약관계자 연령   */
    varchar goodRelnCode    [CJG_CNT][  1+1];  /* inout  : 상품구분          */
    double  joinGoodNo      [CJG_CNT]       ;  /* inout  : 가입상품번호      */
    varchar goodCodeDtal    [CJG_CNT][  4+1];  /* inout  : 상품코드_세       */
    varchar goodCodeItem    [CJG_CNT][  3+1];  /* inout  : 상품코드_목       */
    varchar goodCodeName    [CJG_CNT][255+1];  /* inout  : 상품업무명        */
    double  goodInsrAmt     [CJG_CNT]       ;  /* inout  : 보험금            */
    double  goodPrem        [CJG_CNT]       ;  /* inout  : 보험료            */
    varchar goodInsrTermCode[CJG_CNT][ 10+1];  /* inout  : 보험기간조회코드  */
    varchar goodPaymTermCode[CJG_CNT][ 10+1];  /* inout  : 납입기간조회코드  */
    double  insrTerm        [CJG_CNT]       ;  /* inout  : 보험기간          */
    double  realInsrTerm    [CJG_CNT]       ;  /* inout  : 실보험기간        */
    varchar insrTermDvsn    [CJG_CNT][ 10+1];  /* inout  : 보험기간구분      */
    double  paymTerm        [CJG_CNT]       ;  /* inout  : 납입기간          */
    double  realPaymTerm    [CJG_CNT]       ;  /* inout  : 실납입기간        */
    varchar paymTermDvsn    [CJG_CNT][ 10+1];  /* inout  : 납입기간구분      */
    varchar exprDate        [CJG_CNT][  8+1];  /* inout  : 만기일자          */
    varchar ptpyYn          [CJG_CNT][  1+1];  /* inout  : 전기납여부        */
    double  stddJoinAmt     [CJG_CNT]       ;  /* inout  : 기준가입금액      */
    double  saleStddAmt     [CJG_CNT]       ;  /* inout  : 판매기준금액      */
    varchar premYn          [CJG_CNT][  1+1];  /* inout  : 보험료유무        */
    varchar miagGpagUsyn    [CJG_CNT][  1+1];  /* inout  : 주피군단연령사용여부*/
    varchar prefGdcdDtal    [CJG_CNT][  4+1];  /* inout  : P참조상품코드_세  */
    varchar prefGdcdItem    [CJG_CNT][  3+1];  /* inout  : P참조상품코드_목  */
    varchar chldAgeStdd     [CJG_CNT][ 10+1];  /* inout  : 자녀연령기준      */
    double  goodCnt                          ;  /* inout  : 상품갯수          */
    varchar sintStagIqcd              [ 10+1];  /* inout  : 제2보기개시연령조회코드*/
    varchar prmUnit                   [ 1 +1];  /* input  : 가입기준            */
                                                   /*     0  : 보험료기준     */
                                                   /*     1  : 보험금기준     */
                                                   /*     2  : 합계보험료기준 */
    varchar ciSpecGubun               [ 1 +1];  /* input  : ci보험 의무보장특약 특별check */
                                                   /*     1  : ci보험 보험료기준입력 2000초과    */
                                                   /*     2  : ci보험 보험료기준입력 2000미만    */


    int     resultCode                       ;  /* output : 처리결과          */
    char    resultFld                 [ 50+1];  /* output : 에러필드          */
    char    resultMsg                 [100+1];  /* output : 결과메시지        */
}   CMNC_dutyAssm;

/******************************************************************************/
/*  가입한도 검색(CMNC_joinLmitSrch_CC)                                       */
/*  2002.05.13 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar procGubun               [  2+1];    /* input  : 업무구분          */
    varchar irkdCodeDtal            [  4+1];    /* input  : 보험종류코드_세   */
    varchar irkdCodeItem            [  3+1];    /* input  : 보험종류코드_목   */
    varchar saleChnlCode            [ 10+1];    /* input  : 판매채널코드      */
    varchar goodRelnCode  [CJG_CNT][ 10+1];    /* input  : 상품관계코드      */
    varchar goodCodeDtal  [CJG_CNT][  4+1];    /* input  : 상품코드_세       */
    varchar goodCodeItem  [CJG_CNT][  3+1];    /* input  : 상품코드_목       */
    varchar goodCodeName  [CJG_CNT][255+1];    /* input  : 상품명            */
    varchar strtDate                [  8+1];    /* input  : 시작일자          */
    double  goodCnt                        ;    /* input  : 가입상품건수      */
    double  joinAmt       [CJG_CNT]       ;    /* input  : 가입금액          */
    double  joinPrem      [CJG_CNT]       ;    /* input  : 가입보험료        */
    double  joinOrigPrem  [CJG_CNT]       ;    /* input  : 원보험료          */
    double  realInsrTerm  [CJG_CNT]       ;    /* input  : 실보험기간        */
    double  ilsaSumAmt                     ;    /* input  : 일반사망보장금액합*/
    double  conbRato                       ;    /* input  : 기부비율          */
    varchar pgmGubun                [  1+1];    /* 개별/일괄구분       (C)    */
                                                /* P  : 개별                  */
                                                /* G  : 일괄갑지              */
                                                /* U  : 일괄을지              */

    varchar jccaSamtKind            [ 10+1];    /* input  : 가입건수산출기준액종류*/
    varchar jccaUnitAmt             [ 10+1];    /* input  : 가입건수산출단위금액*/
    varchar joinStddCode            [ 10+1];    /* input  : 가입기준코드      */
    varchar ssplPremStcd            [ 10+1];    /* input  : 청약설계보험료기준코드 */
    varchar spclGrpTpcd             [ 10+1];    /* input  : 특수단체유형코드  */
    varchar freeJoinYn              [  1+1];    /* input  : 자유설계가입여부  */
    double  frplInsrAmt                       ; /* input  : 자유설계가입금액  */
    double  frplInsrPrem                      ; /* input  : 자유설계주보험료  */

    /* 사용항목                                                               */
    varchar itemSX                  [  1+1];    /* input  : 주피성별          */
    double  itemAX                         ;    /* input  : 주피연령          */
    varchar itemSY                  [  1+1];    /* input  : 종피성별          */
    double  itemAY                         ;    /* input  : 종피연령          */
    varchar itemSZ                  [  1+1];    /* input  : 자녀성별          */
    double  itemAZ                         ;    /* input  : 자녀연령          */
    varchar itemNN        [CJG_CNT][ 10+1];    /* input  : 보험기간          */
                                                /*          (보험기간조회코드)*/
    varchar itemN1        [CJG_CNT][ 10+1];    /* input  : 제1보험기간       */
                                                /*          (보험기간조회코드)*/
    varchar itemCY                  [ 10+1];    /* input  : 납입주기          */
    double  itemC0Y                        ;    /* input  : 일시납여부        */
                                                /*      (일시납:1, 비일시납:0)*/
    double  itemC1P                        ;    /* input  : 보험료            */
    varchar itemHZ                  [ 10+1];    /* input  : 위험등급          */
    double  itemPS                         ;    /* input  : 가입금액/보험료구분*/
    double  itemAR                         ;    /* input  : 대표연령적용여부  */
    double  itemPR                         ;    /* input  : 해당보종의 합계보험료*/
    varchar itemN2A                 [ 10+1];    /* input  : 제2보기개시연령코드*/
    double  itemMS                         ;    /* input  : 해당 보종의 주계약 가입금액*/
    varchar itemMM        [CJG_CNT][ 10+1];    /* input  : 납입기간          */
    double  itemLT                         ;    /* input  : 거치기간          */
    int     itemBJ                         ;    /* input  : 법인구분          */
                                                /* 법인점포영업부:1, ELSE:0   */
    int     itemBD                         ;    /* input  : 업무구분   이은정참사요청 2004.02.20       */
    double  itemPC                         ;    /* input  : 보험료법인부담율  */
    int     itemSJ                         ;    /* input  : 우량직종구분      */
    int     resultCode                     ;    /* output : 처리결과          */
    char    resultFld               [ 50+1];    /* output : 에러필드          */
    char    resultMsg               [100+1];    /* output : 결과메시지        */
}   CMNC_joinLmitSrch;

/******************************************************************************/
/*  가입한도 관련상품정보                                                     */
/*  2002.05.13 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar goodRelnCode            [ 10+1];    /* input  : 상품관계코드      */
    varchar goodCodeDtal            [  4+1];    /* input  : 상품코드_세       */
    varchar goodCodeItem            [  3+1];    /* input  : 상품코드_목       */
    double  joinAmt                        ;    /* input  : 가입금액          */
    double  joinPrem                       ;    /* input  : 가입보험료        */
    double  joinOrigPrem                   ;    /* input  : 가입원보험료      */
}   CMNC_joinLmitConn;

/******************************************************************************/
/*  보험종류/보험종류판매 검색                                                */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal     [  4 + 1]; /* input  : 보험종류코드_세           */
    varchar irkdCodeItem     [  3 + 1]; /* input  : 보험종류코드_목           */
    varchar saleChnlCode     [ 10 + 1]; /* input  : 판매채널코드              */
    varchar psgrDvsnSlcd     [ 10 + 1]; /* output : 개인단체구분_판매코드     */
    varchar psgrDvsnPrcd     [ 10 + 1]; /* output : 개인단체구분_인가코드     */
    varchar grpHndlYn        [  1 + 1]; /* output : 단체취급여부              */
    varchar txfrGoodYn       [  1 + 1]; /* output : 비과세상품여부            */
    varchar anrmInduCode     [ 10 + 1]; /* output : 연금보험료소득공제코드    */
    varchar txprConnTpcd     [  1 + 1]; /* output : 세금우대관련유형코드      */
    varchar intrDvcd         [ 10 + 1]; /* output : 보험기간구분코드          */
    varchar ssplPremStcd     [ 10 + 1]; /* output : 청약설계보험료기준코드    */
    varchar embrJoinYn       [  1 + 1]; /* output : 태아가입여부              */
    varchar anntDvcd         [ 10 + 1]; /* output : 연금구분코드              */
    varchar jccaSamtKind     [ 10 + 1]; /* output : 가입건수산출기준액종류    */
    varchar jccaUnitAmt      [ 10 + 1]; /* output : 가입건수산출단위금액      */
    double  adpsGoodCnt               ; /* output : 부가가능상품수            */
    varchar inkdBsnsName     [255 + 1]; /* output : 보종업무명                */
    varchar inkdJoinNtnm     [255 + 1]; /* output : 보종가입안내명            */
    varchar saleStrtDate     [  8 + 1]; /* output : 판매시작일자              */
    varchar saleEndDate      [  8 + 1]; /* output : 판매종료일자              */
    varchar bussFrplTpcd     [ 10 + 1]; /* output : 영업자유설계유형코드      */
    varchar crcdPrpyDvcd     [ 10 + 1]; /* output : 신용카드보험료납입구분코드*/
    int     resultCode                ; /* output : 처리결과                  */
    char    resultFld        [ 50 + 1]; /* output : 에러필드                  */
    char    resultMsg        [100 + 1]; /* output : 결과메시지                */
}   CMNC_mmnorSubSslSrch;

/******************************************************************************/
/*  보험종류/보험종류판매 검색(CMNC_mmnorSubSslSrc1)                          */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal     [  4 + 1]; /* input  : 보험종류코드_세           */
    varchar irkdCodeItem     [  3 + 1]; /* input  : 보험종류코드_목           */
    varchar saleChnlCode     [ 10 + 1]; /* input  : 판매채널코드              */
    varchar paymCycl         [ 10 + 1]; /* input  : 납입주기                  */
    varchar psgrDvsnSlcd     [ 10 + 1]; /* output : 개인단체구분_판매코드     */
    varchar psgrDvsnPrcd     [ 10 + 1]; /* output : 개인단체구분_인가코드     */
    varchar grpHndlYn        [  1 + 1]; /* output : 단체취급여부              */
    varchar txfrGoodYn       [  1 + 1]; /* output : 비과세상품여부            */
    varchar anrmInduCode     [ 10 + 1]; /* output : 연금보험료소득공제코드    */
    varchar txprConnTpcd     [  1 + 1]; /* output : 세금우대관련유형코드      */
    varchar intrDvcd         [ 10 + 1]; /* output : 보험기간구분코드          */
    varchar ssplPremStcd     [ 10 + 1]; /* output : 청약설계보험료기준코드    */
    varchar embrJoinYn       [  1 + 1]; /* output : 태아가입여부              */
    varchar anntDvcd         [ 10 + 1]; /* output : 연금구분코드              */
    varchar jccaSamtKind     [ 10 + 1]; /* output : 가입건수산출기준액종류    */
    varchar jccaUnitAmt      [ 10 + 1]; /* output : 가입건수산출단위금액      */
    double  adpsGoodCnt               ; /* output : 부가가능상품수            */
    varchar inkdBsnsName     [255 + 1]; /* output : 보종업무명                */
    varchar inkdJoinNtnm     [255 + 1]; /* output : 보종가입안내명            */
    varchar saleStrtDate     [  8 + 1]; /* output : 판매시작일자              */
    varchar saleEndDate      [  8 + 1]; /* output : 판매종료일자              */
    varchar bussFrplTpcd     [ 10 + 1]; /* output : 영업자유설계유형코드      */
    varchar crcdPrpyDvcd     [ 10 + 1]; /* output : 신용카드보험료납입구분코드*/
    varchar paymCyclCode     [ 10 + 1]; /* output : 납입주기                  */
    int     resultCode                ; /* output : 처리결과                  */
    char    resultFld        [ 50 + 1]; /* output : 에러필드                  */
    char    resultMsg        [100 + 1]; /* output : 결과메시지                */
}   CMNC_mmnorSubSslSrc1;

/******************************************************************************/
/*  상품 검색                                                                 */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar goodCodeDtal     [  4 + 1]; /* input  : 상품코드_세               */
    varchar goodCodeItem     [  3 + 1]; /* input  : 상품코드_목               */
    varchar premYn           [  1 + 1]; /* output : 보험료유무                */
    varchar joinStddCode     [  1 + 1]; /* output : 가입기준코드              */
    varchar joinMetdCode     [ 10 + 1]; /* output : 가입방법코드              */
    varchar fgobDehnCode     [ 10 + 1]; /* output : 제1급장해사망취급코드     */
    double  stddJoinAmt               ; /* output : 기준가입금액              */
    varchar cninDvcd         [ 10 + 1]; /* output : 연생구분코드              */
    varchar miagGpagUsyn     [  1 + 1]; /* output : 주피연령군단연령사용여부  */
    varchar rsfnAccuDvsn     [ 10 + 1]; /* output : 준비금적립구분            */
    varchar minsAgeStdd      [ 10 + 1]; /* output : 주피연령기준              */
    varchar scndAgeStdd      [ 10 + 1]; /* output : 종피연령기준              */
    varchar chldAgeStdd      [ 10 + 1]; /* output : 자녀연령기준              */
    double  lowtGurtRato              ; /* output : 최저보증이율              */
    varchar premApagStcd     [ 10 + 1]; /* output : 보험료적용연령기준코드    */
    varchar prefGdcdDtal     [  4 + 1]; /* output : P참조상품코드_세          */
    varchar prefGdcdItem     [  3 + 1]; /* output : P참조상품코드_목          */
    varchar vrefGdcdDtal     [  4 + 1]; /* output : V참조상품코드_세          */
    varchar vrefGdcdItem     [  3 + 1]; /* output : V참조상품코드_목          */
    varchar goodPermName     [255 + 1]; /* output : 상품인가명                */
    varchar goodBsnsName     [255 + 1]; /* output : 상품업무명                */
    varchar goodNotcName     [255 + 1]; /* output : 상품안내명                */
    varchar goodJoinNtnm     [255 + 1]; /* output : 상품가입안내명            */
    varchar pmmiGurtYn       [  4 + 1]; /* output : 실손보장여부              */
    int     resultCode                ; /* output : 처리결과                  */
    char    resultFld        [ 50 + 1]; /* output : 에러필드                  */
    char    resultMsg        [100 + 1]; /* output : 결과메시지                */
}   CMNC_mmnorMatSrch;

/******************************************************************************/
/*  상품구성 검색                                                             */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal          [  4 + 1]; /* input  : 보험종류코드_세      */
    varchar irkdCodeItem          [  3 + 1]; /* input  : 보험종류코드_목      */
    varchar saleChnlCode          [ 10 + 1]; /* input  : 판매채널코드         */
    varchar strtDate              [  8 + 1]; /* input  : 시작일자             */
    double  mmnorconCnt                    ; /* output : 상품구성건수         */
    varchar goodCodeDtal[CJG_CNT][  4 + 1]; /* output : 상품코드_세          */
    varchar goodCodeItem[CJG_CNT][  3 + 1]; /* output : 상품코드_목          */
    varchar goodRelnCode[CJG_CNT][ 10 + 1]; /* output : 상품관계코드         */
    varchar saleStrtDate[CJG_CNT][  8 + 1]; /* output : 판매시작일자         */
    varchar saleEndDate [CJG_CNT][  8 + 1]; /* output : 판매종료일자         */
    varchar saleStddCode[CJG_CNT][ 10 + 1]; /* output : 판매기준코드         */
    long    saleStddAmt [CJG_CNT]         ; /* output : 판매기준금액         */
    varchar ppayDsctCode[CJG_CNT][ 10 + 1]; /* output : 선납할인코드         */
    long    ppayPossCnt [CJG_CNT]         ; /* output : 선납가능횟수         */
    int     resultCode                     ; /* output : 처리결과             */
    char    resultFld             [ 50 + 1]; /* output : 에러필드             */
    char    resultMsg             [100 + 1]; /* output : 결과메시지           */
}   CMNC_mmnorConSrch;

/******************************************************************************/
/*  상품구성 검색1                                                            */
/*  2003.02.03 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal       [  4 + 1]; /* input  : 보험종류코드_세         */
    varchar irkdCodeItem       [  3 + 1]; /* input  : 보험종류코드_목         */
    varchar saleChnlCode       [ 10 + 1]; /* input  : 판매채널코드            */
    varchar goodCodeDtal       [  4 + 1]; /* input  : 상품코드_세             */
    varchar goodCodeItem       [  3 + 1]; /* input  : 상품코드_목             */
    varchar goodRelnCode       [ 10 + 1]; /* output : 상품관계코드            */
    varchar saleStrtDate       [  8 + 1]; /* output : 판매시작일자            */
    varchar saleEndDate        [  8 + 1]; /* output : 판매종료일자            */
    varchar saleStddCode       [ 10 + 1]; /* output : 판매기준코드            */
    long    saleStddAmt                 ; /* output : 판매기준금액            */
    varchar ppayDsctCode       [ 10 + 1]; /* output : 선납할인코드            */
    long    ppayPossCnt                 ; /* output : 선납가능횟수            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_mmnorConSrc1;

/******************************************************************************/
/*  상품구성 검색2                                                            */
/*  2003.05.20 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal          [  4 + 1]; /* input  : 보험종류코드_세      */
    varchar irkdCodeItem          [  3 + 1]; /* input  : 보험종류코드_목      */
    varchar saleChnlCode          [ 10 + 1]; /* input  : 판매채널코드         */
    varchar strtDate              [  8 + 1]; /* input  : 시작일자             */
    double  mmnorconCnt                    ; /* output : 상품구성건수         */
    varchar goodCodeDtal[ARY1000] [  4 + 1]; /* output : 상품코드_세          */
    varchar goodCodeItem[ARY1000] [  3 + 1]; /* output : 상품코드_목          */
    varchar goodBsnsName[ARY1000] [ 56 + 1]; /* output : 상품업무명           */
    varchar goodRelnCode[ARY1000] [ 10 + 1]; /* output : 상품관계코드         */
    varchar incmDuctCode[ARY1000] [ 10 + 1]; /* output : 소득공제코드         */
    varchar cnttOptrCncd[ARY1000] [ 10 + 1]; /* output : 계약임의해지조건코드 */
    varchar saleStrtDate[ARY1000] [  8 + 1]; /* output : 판매시작일자         */
    varchar saleEndDate [ARY1000] [  8 + 1]; /* output : 판매종료일자         */
    varchar saleStddCode[ARY1000] [ 10 + 1]; /* output : 판매기준코드         */
    long    saleStddAmt [ARY1000]          ; /* output : 판매기준금액         */
    varchar ppayDsctCode[ARY1000] [ 10 + 1]; /* output : 선납할인코드         */
    long    ppayPossCnt [ARY1000]          ; /* output : 선납가능횟수         */
    double  stddJoinAmt [ARY1000]          ; /* output : 기준가입금액         */
    varchar joinStddCode[ARY1000] [ 10 + 1]; /* output : 가입기준코드         */
    varchar premYn      [ARY1000] [  1 + 1]; /* output : 보험료유무           */
    varchar miagGpagUsyn[ARY1000] [  1 + 1]; /* output : 주피군단연령사용여부 */
    varchar prefGdcdDtal[ARY1000] [  4 + 1]; /* output : P참조상품코드_세     */
    varchar prefGdcdItem[ARY1000] [  3 + 1]; /* output : P참조상품코드_목     */
    varchar chldAgeStdd [ARY1000] [ 10 + 1]; /* output : 자녀연령기준         */

    int     resultCode                     ; /* output : 처리결과             */
    char    resultFld             [ 50 + 1]; /* output : 에러필드             */
    char    resultMsg             [100 + 1]; /* output : 결과메시지           */
}   CMNC_mmnorConSrc2;

/******************************************************************************/
/*  상품구성관계 검색                                                         */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal          [  4 + 1]; /* input  : 보험종류코드_세      */
    varchar irkdCodeItem          [  3 + 1]; /* input  : 보험종류코드_목      */
    varchar saleChnlCode          [ 10 + 1]; /* input  : 판매채널코드         */
    varchar goodCodeDtal          [  4 + 1]; /* input  : 상품코드_세          */
    varchar goodCodeItem          [  3 + 1]; /* input  : 상품코드_목          */
    varchar connGdcdDtal[CJG_CNT][  4 + 1]; /* output : 관련상품_세          */
    varchar connGdcdItem[CJG_CNT][  3 + 1]; /* output : 관련상품_목          */
    varchar addDvsn     [CJG_CNT][  1 + 1]; /* output : 부가구분             */
    double  dtadMultNumr[CJG_CNT]         ; /* output : 의무부가배수_분자    */
    double  dtadMultDnmt[CJG_CNT]         ; /* output : 의무부가배수_분모    */
    varchar intrRlcd    [CJG_CNT][ 10 + 1]; /* output : 보험기간관계코드     */
    varchar pytrRlcd    [CJG_CNT][ 10 + 1]; /* output : 납입기간관계코드     */
    double  lmitCnt                        ; /* output : 관련상품건수         */
    int     resultCode                     ; /* output : 처리결과             */
    char    resultFld             [ 50 + 1]; /* output : 에러필드             */
    char    resultMsg             [100 + 1]; /* output : 결과메시지           */
}   CMNC_mmnorCol01Srch;

/******************************************************************************/
/*  상품구성관계(의무부가) 검색                                               */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal       [  4 + 1]; /* input  : 보험종류코드_세         */
    varchar irkdCodeItem       [  3 + 1]; /* input  : 보험종류코드_목         */
    varchar saleChnlCode       [ 10 + 1]; /* input  : 판매채널코드            */
    varchar goodCodeDtal       [  4 + 1]; /* input  : 상품코드_세             */
    varchar goodCodeItem       [  3 + 1]; /* input  : 상품코드_목             */
    varchar connGdcdDtal       [  4 + 1]; /* input  : 관련상품_세             */
    varchar connGdcdItem       [  3 + 1]; /* input  : 관련상품_목             */
    varchar addDvsn            [  1 + 1]; /* output : 부가구분                */
    double  dtadMultNumr                ; /* output : 의무부가배수_분자       */
    double  dtadMultDnmt                ; /* output : 의무부가배수_분모       */
    varchar intrRlcd           [ 10 + 1]; /* output : 보험기간관계코드        */
    varchar pytrRlcd           [ 10 + 1]; /* output : 납입기간관계코드        */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_mmnorCol02Srch;

/******************************************************************************/
/*  상품구성관계 검색(보험종류로 검색)                                        */
/*  2003.04.15 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal             [  4 + 1]; /* input  : 보험종류코드_세   */
    varchar irkdCodeItem             [  3 + 1]; /* input  : 보험종류코드_목   */
    varchar saleChnlCode             [ 10 + 1]; /* input  : 판매채널코드      */
    varchar goodCodeDtal [NORCOL_CNT][  4 + 1]; /* output : 상품코드_세       */
    varchar goodCodeItem [NORCOL_CNT][  3 + 1]; /* output : 상품코드_목       */
    varchar connGdcdDtal [NORCOL_CNT][  4 + 1]; /* output : 관련상품_세       */
    varchar connGdcdItem [NORCOL_CNT][  3 + 1]; /* output : 관련상품_목       */
    varchar addDvsn      [NORCOL_CNT][  1 + 1]; /* output : 부가구분          */
    double  dtadMultNumr [NORCOL_CNT]         ; /* output : 의무부가배수_분자 */
    double  dtadMultDnmt [NORCOL_CNT]         ; /* output : 의무부가배수_분모 */
    varchar intrRlcd     [NORCOL_CNT][ 10 + 1]; /* output : 보험기간관계코드  */
    varchar pytrRlcd     [NORCOL_CNT][ 10 + 1]; /* output : 납입기간관계코드  */
    varchar goodBsnsName [NORCOL_CNT][255 + 1]; /* output : 상품업무명        */
    int     resultCnt                         ; /* output : 조회건수          */
    int     resultCode                        ; /* output : 처리결과          */
    char    resultFld                [ 50 + 1]; /* output : 에러필드          */
    char    resultMsg                [100 + 1]; /* output : 결과메시지        */
}   CMNC_mmnorCol03Srch;

/******************************************************************************/
/*  상품피보험자 검색                                                         */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar goodCodeDtal       [  4 + 1]; /* input  : 상품코드_세             */
    varchar goodCodeItem       [  3 + 1]; /* input  : 상품코드_목             */
    varchar joinInsuCode       [ 10 + 1]; /* input  : 피보험자코드            */
    varchar joinPossSex        [  1 + 1]; /* output : 가입가능성별            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_mmnorInsSrch;

/******************************************************************************/
/*  제도부가특약상품 검색                                                     */
/*  2002.06.08 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal          [  4 + 1]; /* input  : 보험종류코드_세      */
    varchar irkdCodeItem          [  3 + 1]; /* input  : 보험종류코드_목      */
    varchar saleChnlCode          [ 10 + 1]; /* input  : 판매채널코드         */
    varchar strtDate              [  8 + 1]; /* input  : 시작일자             */
    varchar sysSpcdCode [JEDO_CNT][ 10 + 1]; /* output : 제도특약코드         */
    double  jedoCnt                        ; /* output : 제도특약건수         */
    int     resultCode                     ; /* output : 처리결과             */
    char    resultFld             [ 50 + 1]; /* output : 에러필드             */
    char    resultMsg             [100 + 1]; /* output : 결과메시지           */
}   CMNC_mmnorRidSrch;

/******************************************************************************/
/*  제도부가특약상품(상품별) 검색                                             */
/*  2002.07.18 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal       [  4 + 1]; /* input  : 보험종류코드_세         */
    varchar irkdCodeItem       [  3 + 1]; /* input  : 보험종류코드_목         */
    varchar saleChnlCode       [ 10 + 1]; /* input  : 판매채널코드            */
    varchar sysSpcdCode        [ 10 + 1]; /* input  : 제도특약코드            */
    varchar strtDate           [  8 + 1]; /* input  : 시작일자                */
    varchar sysSpcdYn          [  1 + 1]; /* output : 제도특약가능여부        */
    varchar sysSpcdName        [200 + 1]; /* output : 제도특약명              */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_mmnorRidSrc1;

/******************************************************************************/
/*  보험료유형 검색                                                           */
/*  2002.08.30 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar irkdCodeDtal       [  4 + 1]; /* input  : 보험종류코드_세         */
    varchar irkdCodeItem       [  3 + 1]; /* input  : 보험종류코드_목         */
    varchar saleChnlCode       [ 10 + 1]; /* input  : 판매채널코드            */
    varchar premTypeCode       [  1 + 1]; /* inputt : 보험료유형코드          */
    varchar premTypeYn         [  1 + 1]; /* output : 보험료유형가능여부      */
    varchar premTypeName       [200 + 1]; /* output : 보험료유형명            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_mmnorPrtSrch;

/******************************************************************************/
/*  기관정보 검색                                                             */
/*  2002.06.10 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar orgnCode           [  5 + 1]; /* input  : 기관코드                */
    varchar orgnDvcd           [ 10 + 1]; /* output : 기관구분코드            */
    varchar orgnAbrvName       [ 50 + 1]; /* output : 기관축약명              */
    varchar orgnTpdvCode       [ 10 + 1]; /* output : 조직형태구분코드        */
    varchar bussTpdvCode       [ 10 + 1]; /* output : 영업형태구분코드        */
    varchar spquTpdvCode       [ 10 + 1]; /* output : 특성형태구분코드        */
    varchar pscoSaleDvcd       [ 10 + 1]; /* output : 개인법인판매구분코드    */
    varchar orgnCrtnDate       [  8 + 1]; /* output : 기관신설일자            */
    varchar orgnClosDate       [  8 + 1]; /* output : 기관폐쇄일자            */
    varchar prcdOgc1           [  5 + 1]; /* output : 상위기관코드1           */
    varchar prcdOgc2           [  5 + 1]; /* output : 상위기관코드2           */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_uvorg004Srch;

/******************************************************************************/
/*  사원정보 검색                                                             */
/*  2002.06.10 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar emplNo             [  8 + 1]; /* input  : 사원번호                */
    varchar emplName           [ 24 + 1]; /* output : 사원명                  */
    varchar emplDvsn           [  4 + 1]; /* output : 사원구분                */
    varchar custId             [ 12 + 1]; /* output : 고객ID                  */
    varchar rsdnRgstNo         [ 16 + 1]; /* output : 주민등록번호            */
    varchar incbDvsn           [  4 + 1]; /* output : 재직구분                */
    varchar pstnOrgnCode       [ 10 + 1]; /* output : 소속기관코드            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_uvorg010Srch;

/******************************************************************************/
/*  고객ID로 사원정보 검색                                                    */
/*  2002.12.26 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar custId             [ 10 + 1]; /* input  : 고객ID                  */
    varchar emplNo             [  8 + 1]; /* output : 사원번호                */
    varchar emplName           [ 24 + 1]; /* output : 사원명                  */
    varchar emplDvsn           [  4 + 1]; /* output : 사원구분                */
    varchar rsdnRgstNo         [ 16 + 1]; /* output : 주민등록번호            */
    varchar incbDvsn           [  4 + 1]; /* output : 재직구분                */
    varchar pstnOrgnCode       [  8 + 1]; /* output : 소속기관코드            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_uvorg010Src1;

/******************************************************************************/
/*  내근사원정보 검색                                                         */
/*  2002.06.10 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar emplNo             [  8 + 1]; /* input  : 사원번호                */
    varchar workPstnOgcd       [  8 + 1]; /* output : 근무소속기관코드        */
    varchar incbDvsn           [  4 + 1]; /* output : 재직구분                */
    varchar rtmtDate           [  8 + 1]; /* output : 퇴직일자                */
    varchar dutyCode           [ 12 + 1]; /* output : 직책코드                */
    varchar jobPstnCode        [ 12 + 1]; /* output : 직위코드                */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_uvorg006Srch;

/******************************************************************************/
/*  설계사 정보 검색                                                          */
/*  2002.06.10 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar lpPrno             [  8 + 1]; /* input  : 설계사고유번호          */
    varchar lpName             [ 50 + 1]; /* output : 설계사명                */
    varchar incbDvsn           [  1 + 1]; /* output : 재직구분                */
    varchar etrsDate           [  8 + 1]; /* output : 위촉일자                */
    varchar fireDate           [  8 + 1]; /* output : 해촉일자                */
    varchar offcCode           [  5 + 1]; /* output : 영업소코드              */
    varchar etrsCnclDate       [  8 + 1]; /* output : 위촉취소일자            */
    varchar spquTpdvCode       [  8 + 1]; /* output : 특성형태구분코드        */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_smppe001Srch;

/******************************************************************************/
/*  공통통합코드 검색                                                         */
/*  2002.08.30 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar codeId             [ 14 + 1]; /* input  : 코드ID                  */
    varchar codeName           [200 + 1]; /* output : 코드명                  */
    varchar strtDate           [  8 + 1]; /* output : 시작일자                */
    varchar codeVal            [ 12 + 1]; /* output : 코드값                  */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_uvcdm002Srch;

/******************************************************************************/
/*  단체정보 검색                                                             */
/*  2002.09.10 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar custId             [ 10 + 1]; /* input  : 고객ID                  */
    varchar bntpCode           [ 12 + 1]; /* output : 업종코드                */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_csscm060Srch;

/******************************************************************************/
/*  고객가족관계 검색                                                         */
/*  2002.11.03 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar mainCustId         [ 10 + 1]; /* input  : 주고객ID                */
    varchar subCustId          [ 10 + 1]; /* input  : 부고객ID                */
    varchar fmlyRelnCode       [ 10 + 1]; /* output : 가족관계코드            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_csscm040Srch;

/******************************************************************************/
/*  산재업종코드 검색                                                         */
/*  2003.01.03 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar gnrlBntpCode       [ 10 + 1]; /* input  : 업종코드                */
    varchar strtDate           [  8 + 1]; /* input  : 적용일자                */
    varchar idacBntpCode       [ 10 + 1]; /* output : 산재업종코드            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_idacBntpCode;

/******************************************************************************/
/*  산재업종코드 검색(단체고객ID로)                                           */
/*  2003.01.03 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar grpCustId          [ 10 + 1]; /* input  : 단체고객ID              */
    varchar strtDate           [  8 + 1]; /* input  : 적용일자                */
    varchar idacBntpCode       [ 10 + 1]; /* output : 산재업종코드            */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_idacBntpSrch;

/******************************************************************************/
/*  고객주소 검색                                                             */
/*  2003.01.20 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar custId             [ 10 + 1]; /* input  : 고객ID                  */
    varchar addrKdcd           [  8 + 1]; /* input  : 주소종류코드            */
    varchar zipNo1             [  3 + 1]; /* output : 우편번호1               */
    varchar zipNo2             [  3 + 1]; /* output : 우편번호2               */
    varchar zipNo3             [  3 + 1]; /* output : 우편번호3               */
    varchar dtalAddr           [100 + 1]; /* output : 세부주소                */
    int     resultCode                  ; /* output : 처리결과                */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_csscm030Srch;

/******************************************************************************/
/*  메시지 조회                                                               */
/*  2003.03.21 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    double  msgCode                     ; /* input  : 메시지코드              */
    varchar msgType            [  1 + 1]; /* output : 메시지타입              */
    varchar msgCten            [4000+ 1]; /* output : 메시지내용              */
    char    resultFld          [ 50 + 1]; /* output : 에러필드                */
    char    resultMsg          [100 + 1]; /* output : 결과메시지              */
}   CMNC_uvmsgcodSrch;

/******************************************************************************/
/*  기준계약고 기준금액값 STRUCT                                              */
/*  2002.04.04 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    double  stddAmt01Val       ; /* 기준금액코드01값(가입금액)                */
    double  stddAmt02Val       ; /* 기준금액코드02값(기납입보험료)            */
    double  stddAmt03Val       ; /* 기준금액코드03값(책임준비금)              */
    double  stddAmt04Val       ; /* 기준금액코드04값(일정금액(원))            */
    double  stddAmt05Val       ; /* 기준금액코드05값(적립금)                  */
    double  stddAmt06Val       ; /* 기준금액코드06값(월납보험료)              */
    double  stddAmt07Val       ; /* 기준금액코드07값(연납보험료)              */
    double  stddAmt08Val       ; /* 기준금액코드08값(연금전환해당액)          */
    double  stddAmt09Val       ; /* 기준금액코드09값(1차년도연금액)           */
    double  stddAmt10Val       ; /* 기준금액코드10값(7차년도연금액)           */
    double  stddAmt11Val       ; /* 기준금액코드11값(10차년도연금액)          */
    double  stddAmt12Val       ; /* 기준금액코드12값(최초5년간납입한주계약보험료)*/
    double  stddAmt13Val       ; /* 기준금액코드13값(6차년도연금액)           */
    double  stddAmt14Val       ; /* 기준금액코드14값(80세계약해당일의 적립액) */
}   ST_STDDAMTVAL;

/******************************************************************************/
/*  기계약합산(CMNC_custSumCalc_CC)                                           */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
#define CUST_SUM_OTHR
/******************************************************************************/
typedef struct
{
    varchar custId                         [ 10+1];  /* input  : 고객ID   mandatory*/
    varchar cnttDate                       [  8+1];  /* input  : 계약일자 mandatory*/
    varchar polyNo                         [  9+1];  /* input  : 증권번호          */
    varchar custRoleCode                   [ 10+1];  /* input  : 고객역할          */
    varchar mediKindCode                   [ 10+1];  /* input  : 진단종류코드      */
                                                     /* input  : 0;월납, 1:자유설계*/
    double  paymTerm        [  2]                 ;  /* input  : 납입기간          */
    varchar paymTermDvsn    [  2]          [ 10+1];  /* input  : 납입기간구분      */
    varchar irkdCodeDtal    [  2]          [  4+1];  /* input  : 보험종류코드_세   */
    varchar irkdCodeItem    [  2]          [  3+1];  /* input  : 보험종류코드_목   */
    double  sumOrigPrem     [  2]                 ;  /* input  : 합계원보험료      */
    char    goodCodeDtal    [  2][ CJG_CNT][  4+1];  /* input  : 상품코드세        */
    char    goodCodeItem    [  2][ CJG_CNT][  3+1];  /* input  : 상품코드목        */
    char    goodCodeName    [  2][ CJG_CNT][255+1];  /* input  : 상품코드명        */
    char    goodRelnCode    [  2][ CJG_CNT][ 10+1];  /* input  : 상품관계코드      */
    double  insrAmt         [  2][ CJG_CNT]       ;  /* input  : 가입보험금        */
    double  origPrem        [  2][ CJG_CNT]       ;  /* input  : 가입원보험료      */
    double  lmitPyct        [  2][ CJG_CNT]       ;  /* input  : 한정납회          */
    double  realInsrTerm    [  2][ CJG_CNT]       ;  /* input  : 실보험기간        */
    double  realPaymTerm    [  2][ CJG_CNT]       ;  /* input  : 실납입기간        */

    varchar xcptPolyNo      [100]          [  9+1];  /* input  : 제외(해지)증권번호*/
    varchar publPolyNo      [100]          [  9+1];  /* input  : 포함증권번호      */
    varchar plnoSumDvsn                    [  1+1];  /* input  : 증번합산구분      */
                                                     /*          단일증번합산시 'Y', 그외 'N'*/
                                                     /* input  : 감액 조정내역     */
    varchar ctrlPolyNo      [100]          [  9+1];  /* input  : 증권번호          */
    varchar ctrlCustRoleCode[100]          [ 10+1];  /* input  : 고객역할코드      */
    varchar ctrlMediKindCode[100]          [ 12+1];  /* input  : 진단종류코드      */
    double  ctrlPaymTerm    [100]                 ;  /* input  : 납입기간          */
    varchar ctrlPaymTermDvsn[100]          [ 10+1];  /* input  : 납입기간구분      */
    varchar ctrlIrkdCodeDtal[100]          [  4+1];  /* input  : 보험종류코드_세   */
    varchar ctrlIrkdCodeItem[100]          [  3+1];  /* input  : 보험종류코드_목   */
    varchar ctrlCnttDate    [100]          [  8+1];  /* input  : 계약일자          */
    char    ctrlGoodCodeDtal[100][ CJG_CNT][  4+1];  /* input  : 상품코드세        */
    char    ctrlGoodCodeItem[100][ CJG_CNT][  3+1];  /* input  : 상품코드목        */
    char    ctrlGoodCodeName[100][ CJG_CNT][255+1];  /* input  : 상품코드명        */
    char    ctrlGoodRelnCode[100][ CJG_CNT][ 10+1];  /* input  : 상품관계코드      */
    double  ctrlInsrAmt     [100][ CJG_CNT]       ;  /* input  : 가입보험금        */
    double  ctrlOrigPrem    [100][ CJG_CNT]       ;  /* input  : 가입원보험료      */
    double  ctrllmitPyct    [100][ CJG_CNT]       ;  /* input  : 한정납회          */
    double  ctrlRealInsrTerm[100][ CJG_CNT]       ;  /* input  : 실보험기간        */
    double  ctrlRealPaymTerm[100][ CJG_CNT]       ;  /* input  : 실납입기간        */

    varchar chldCustId                [ 10+1];  /* input  : 자녀고객ID        */
    varchar addParams             [10][ 10+1];  /* input  : 추가 파라미터     */
                                                /* 0      : 단건금액합산여부  */
                                                /* 1      : reserved          */
                                                /* 2      : reserved          */
                                                /* 3      : reserved          */
                                                /* 4      : reserved          */
                                                /* 5      : reserved          */
                                                /* 6      : reserved          */
                                                /* 7      : reserved          */
                                                /* 8      : reserved          */
                                                /* 9      : reserved          */
}   CMNC_custSumCalc_Inpt;

typedef struct
{
                                                /* output : 기계약가입보종    */
    double  pvctSumCnt                       ;  /* output : 합산산출건수      */
    varchar polyNo               [100][  9+1];  /* output : 증권번호          */
    varchar custRoleCode         [100][ 10+1];  /* output : 고객역할코드      */
    varchar mediKindCode         [100][ 12+1];  /* output : 진단종류코드      */
    double  paymTerm             [100]       ;  /* output : 납입기간          */
    varchar paymTermDvsn         [100][ 10+1];  /* output : 납입기간구분      */
    varchar rprsIrkdCode         [100][ 10+1];  /* output : 대표보험종류코드  */
    varchar irkdCodeDtal         [100][  4+1];  /* output : 보험종류코드_세   */
    varchar irkdCodeItem         [100][  3+1];  /* output : 보험종류코드_목   */
    varchar cnttDate             [100][  8+1];  /* output : 계약일자          */
    double  sumOrigPrem          [100]       ;  /* output : 합계원보험료      */
                                                /* output : 기계약가입+상품   */
    char    goodCodeDtal    [100][ CJG_CNT][  4+1];  /* output : 상품코드세        */
    char    goodCodeItem    [100][ CJG_CNT][  3+1];  /* output : 상품코드목        */
    char    goodCodeName    [100][ CJG_CNT][255+1];  /* output : 상품코드명        */
    char    goodRelnCode    [100][ CJG_CNT][ 10+1];  /* output : 상품관계코드      */
    double  insrAmt         [100][ CJG_CNT]       ;  /* output : 가입보험금        */
    double  origPrem        [100][ CJG_CNT]       ;  /* output : 가입원보험료      */
    double  lmitPyct        [100][ CJG_CNT]       ;  /* output : 한정납회          */
    double  realInsrTerm    [100][ CJG_CNT]       ;  /* output : 실보험기간        */
    double  realPaymTerm    [100][ CJG_CNT]       ;  /* output : 실납입기간        */

                                                     /* output : 사정항목합산      */
    varchar assmItemCode    [ASSM_ITEM_CNT][ 10+1];  /* output : 사정항목코드      */
    varchar assmItnmAbrv    [ASSM_ITEM_CNT][200+1];  /* output : 사정항목명약칭    */
    double  sumCalcAmt      [ASSM_ITEM_CNT]       ;  /* output : 합산산출금액      */
    double  oocsCalcAmt     [ASSM_ITEM_CNT]       ;  /* output : 단건산출금액      */
    double  othrPrstTota    [ASSM_ITEM_CNT]       ;  /* output : 타사급부합계금액  */ /* 추가 2006.03.08 장두원 */

}   CMNC_custSumCalc_Outp;

/******************************************************************************/
/*  가입한도(CMNC_octmSumCalc_CC)                                             */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar joltCalcDvsn              [ 10+1];  /* input  : 가입한도산출구분  */
    varchar cnttDate                  [  8+1];  /* input  : 계약일자          */
    varchar prsnCoprSadv              [ 10+1];  /* input  : 개인법인판매구분  */
    varchar riskGradCode              [ 10+1];  /* input  : 위험등급코드      */
                                                /* input  : 가입한도 축소확대 */
    varchar occpCode                  [ 10+1];  /* input  : 직종코드          */
    varchar clltOrgnCode              [  8+1];  /* input  : 모집기관코드      */
    varchar drveCatpCode              [ 10+1];  /* input  : 운전차종코드      */
                                                /* input  : 계약등급그룹      */
    varchar zipNo1                    [  3+1];  /* input  : 수금지우편번호1   */
    varchar zipNo2                    [  3+1];  /* input  : 수금지우편번호2   */
    varchar zipNo3                    [  3+1];  /* input  : 수금지우편번호3   */
                                                /* input  : 설계사그룹        */
    varchar polyNo                    [  9+1];  /* input  : 증권번호          */
    varchar reviDlngNo                [  4+1];  /* input  : 부활처리번호      */
    varchar grpCustId                 [ 10+1];  /* input  : 단체코드          */
    varchar irkdCodeDtal              [  4+1];  /* input  : 보험종류코드_세   */
    varchar irkdCodeItem              [  3+1];  /* input  : 보험종류코드_목   */
    double  joinAge                          ;  /* input  : 가입연령          */
    varchar custId                    [ 10+1];  /* input  : 고객코드          */
    varchar clltLpPrno                [  8+1];  /* input  : 모집설계사고유번호*/
    varchar paymCyclCode              [ 10+1];  /* input  : 납입주기코드      */
    varchar frnrDvsnCode              [ 10+1];  /* input  : 외국인구분코드    */
    varchar frnrStayCode              [ 10+1];  /* input  : 외국인체류코드    */
    varchar frnrRcntYn                [ 10+1];  /* input  : 외국인사전승인여부*/
    varchar persInqrAgyn              [  1+1];  /* input  : 정보조회동의여부  */
    varchar addParams             [10][ 10+1];  /* input  : 추가 파라미터     */
                                                /* 0      : reserved          */
                                                /* 1      : reserved          */
                                                /* 2      : reserved          */
                                                /* 3      : reserved          */
                                                /* 4      : reserved          */
                                                /* 5      : reserved          */
                                                /* 6      : reserved          */
                                                /* 7      : reserved          */
                                                /* 8      : reserved          */
                                                /* 9      : reserved          */

/* CRD_OPEN 에 대한 define 확인 후 삭제처리(미사용 추정)*/
#ifdef CRD_OPEN
    varchar sex                       [  2+1];  /* input  : 성별              */
    varchar saleChnlCode              [  4+1];  /* input  : 판매채널          */
    varchar bdctNo                    [ 10+1];  /* input  : 일괄번호          */
#endif

}   CMNC_octmSumCalc_Inpt;

typedef struct
{
    varchar splsBodyYn                [  1+1];  /* output : 초과체여부        */

    double  rprsIrkdEr           [ CJG_CNT]       ;  /* output : 대표보종 한도초과 */
    varchar rprsGoodCodeName     [ CJG_CNT][255+1];  /* output : 대표 상품코드_명  */
    double  rprsIrkdlmitRdex     [ CJG_CNT]       ;  /* output : 대표 축소확대존재 */
    double  rprsJoinPossAmt      [ CJG_CNT]       ;  /* output : 대표 초과금액     */

    double  irkdCodeEr           [ CJG_CNT]       ;  /* output : 보험     한도초과 */
    varchar irkdGoodCodeName     [ CJG_CNT][255+1];  /* output : 보험 상품코드_명  */
    double  irkdCodelmitRdex     [ CJG_CNT]       ;  /* output : 보험 축소확대존재 */
    double  irkdJoinPossAmt      [ CJG_CNT]       ;  /* output : 보험 초과금액     */

    double  assmItemEr      [ASSM_ITEM_CNT]            ;  /* output : 사정항목 한도초과 */
    double  assmItemlmitRdex[ASSM_ITEM_CNT]            ;  /* output : 사정 축소확대존재 */
    double  baseLmitAmt     [ASSM_ITEM_CNT]            ;  /* output : 기본한도금액      */
    double  lmitAmt         [ASSM_ITEM_CNT]            ;  /* output : 한도금액          */
    /* char    assmItemDtal    [ASSM_ITEM_CNT][400]       ;  /* output : 확대축소 상세내용 */

                                                /* output : 가입여력시뮬레이션*/
    char    goodCodeDtal    [ASSM_ITEM_CNT][ CJG_CNT][  4+1];  /* output : 상품코드_세       */
    char    goodCodeItem    [ASSM_ITEM_CNT][ CJG_CNT][  3+1];  /* output : 상품코드_목       */
    char    goodBsnsName    [ASSM_ITEM_CNT][ CJG_CNT][255+1];  /* output : 상품코드_명       */
    char    goodRelnCode    [ASSM_ITEM_CNT][ CJG_CNT][ 10+1];  /* output : 상품관계코드      */
    char    amtSumCode      [ASSM_ITEM_CNT][ CJG_CNT][ 10+1];  /* output : 금액합산코드      */
    char    amtSumName      [ASSM_ITEM_CNT][ CJG_CNT][200+1];  /* output : 금액합산코드명    */
    double  calcAmtMult     [ASSM_ITEM_CNT][ CJG_CNT]       ;  /* output : 산출배수/금액     */
    double  insrAmt         [ASSM_ITEM_CNT][ CJG_CNT]       ;  /* output : 가입금액          */
    double  origPrem        [ASSM_ITEM_CNT][ CJG_CNT]       ;  /* output : 가입원보험료      */

/* CRD_OPEN 에 대한 define 확인 후 삭제처리(미사용 추정)*/
#ifdef CRD_OPEN
    varchar crdtGrdv                  [ 4 +1];  /* output : 신용정보등급      */
    varchar tempVarchar          [ 10][ 4 +1];  /* output : 임시변수          */
#endif

    char   nwcsYn  [ 1+1]; /* Big Data 관점 신규고객여부 */

    double gndeScore; /* [0]:일반사망   스코어 */
    double acidScore; /* [1]:재해사망   스코어 */
    double achsScore; /* [2]:재해입원   스코어 */
    double dahsScore; /* [3]:질병입원   스코어 */
    double operScore; /* [4]:일반수술   스코어 */
    double ccdsScore; /* [5]:암진단     스코어 */
    double addsScore; /* [6]:성인병진단 스코어 */

    double  bigDataScore[ASSM_ITEM_CNT];  /* output : 빅데이터 스코어      */
                                          /* [0]:일반사망     스코어 double gndeScore; */
                                          /* [1]:재해사망     스코어 double acidScore; */
                                          /* [2]:재해입원     스코어 double achsScore; */
                                          /* [3]:질병입원     스코어 double dahsScore; */
                                          /* [4]:일반수술     스코어 double operScore; */
                                          /* [5]:암진단       스코어 double ccdsScore; */
                                          /* [6]:성인병진단   스코어 double addsScore; */



    /* SVC_CLOSE 제거작업시 사용 */
    int     resultCode               ;          /* O    처리결과    (0 :정상) */
    char    resultMsg       [100 + 1];          /* O    처리결과메시지        */

}   CMNC_octmSumCalc_Outp;

/******************************************************************************/
/*  가입한도 상세 조회(CMNC_octmSumCalc_CC)                                   */
/*  2018.03.05 by 新契約                                                      */
/******************************************************************************/
typedef struct
{
  int     assmItemCnt                         ; /* 사정항목건수 */
  varchar assmItemCode   [ASSM_ITEM_CNT][12+1]; /* 사정항목코드 */

  double  lmitRdexRato   [ASSM_ITEM_CNT]      ; /* 축소확대율 */
  double  joinLmitAmt    [ASSM_ITEM_CNT]      ; /* 가입한도액 */
  double  exJoinLmitAmt  [ASSM_ITEM_CNT]      ; /* 1.3배확대가입금액 */
  double  baseLmitAmt    [ASSM_ITEM_CNT]      ; /* 기본한도 */

  double  lmitRdexRatoA  [ASSM_ITEM_CNT]      ; /* 직종별 확대축소율 */
  double  lmitRdexRatoB  [ASSM_ITEM_CNT]      ; /* 모집기관별 확대축소율 */
  double  lmitRdexRatoC  [ASSM_ITEM_CNT]      ; /* 운전차종별 확대축소율 */
  double  lmitRdexRatoD  [ASSM_ITEM_CNT]      ; /* 계약등급별 확대축소율 */
  double  lmitRdexRatoE  [ASSM_ITEM_CNT]      ; /* 지역별 확대축소율 */
  double  lmitRdexRatoF  [ASSM_ITEM_CNT]      ; /* 설계사그룹별 확대축소율 */
  double  lmitRdexRatoG  [ASSM_ITEM_CNT]      ; /* 증권번호별 확대축소율 */
  double  lmitRdexRatoH  [ASSM_ITEM_CNT]      ; /* 단체코드별 확대축소율 */
  double  lmitRdexRatoI  [ASSM_ITEM_CNT]      ; /* 보험종류별 확대축소율 */
  double  lmitRdexRatoJ  [ASSM_ITEM_CNT]      ; /* 연령별 확대축소율 */
  double  lmitRdexRatoK  [ASSM_ITEM_CNT]      ; /* 연령위험직별 확대축소율 */
  double  lmitRdexRatoL  [ASSM_ITEM_CNT]      ; /* 특정주피별 확대축소율 */
  double  lmitRdexRatoM  [ASSM_ITEM_CNT]      ; /* 특정설계사별 확대축소율 */
  double  lmitRdexRatoN  [ASSM_ITEM_CNT]      ; /* 모집운전차종별 확대축소율 */
  double  lmitRdexRatoP  [ASSM_ITEM_CNT]      ; /* 모집운전차종별 확대축소율 */
  double  lmitRdexRatoQ  [ASSM_ITEM_CNT]      ; /* 신용등급별 확대축소율 */
  double  lmitRdexRatoR  [ASSM_ITEM_CNT]      ; /* 성별 확대축소율 */
  double  lmitRdexRatoS  [ASSM_ITEM_CNT]      ; /* 채널별 확대축소율 */
  double  lmitRdexRatoT  [ASSM_ITEM_CNT]      ; /* 직종채널별 확대축소율 */
  double  lmitRdexRatoU  [ASSM_ITEM_CNT]      ; /* 우수고객별 확대축소율 */
  double  lmitRdexRatoV  [ASSM_ITEM_CNT]      ; /* 표준하체제한조건 확대축소율 */
  double  lmitRdexRatoX  [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_일반사망 확대축소율 */
  double  lmitRdexRatoY  [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_재해사망 확대축소율 */
  double  lmitRdexRatoAh [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_재해입원 확대축소율 */
  double  lmitRdexRatoDh [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_질병입원 확대축소율 */
  double  lmitRdexRatoGo [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_일반수술 확대축소율 */
  double  lmitRdexRatoPca[ASSM_ITEM_CNT]      ; /* 재정우대고객_사망 확대축소율 */
  double  lmitRdexRatoPcg[ASSM_ITEM_CNT]      ; /* 재정우대고객_진단 확대축소율 */
  double  lmitRdexRatoVc [ASSM_ITEM_CNT]      ; /* 우수고객_입원 확대축소율 */
  double  lmitRdexRatoVf [ASSM_ITEM_CNT]      ; /* ACE_FP_입원 확대축소율 */
  double  lmitRdexRatoEp [ASSM_ITEM_CNT]      ; /* 내근_암진단 확대축소율 */
  double  lmitRdexRatoCd [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_암진단 축소확대율 */
  double  lmitRdexRatoAd [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_성인병진단 축소확대율 */
  double  lmitRdexRatoDa [ASSM_ITEM_CNT]      ; /* 빅데이터한도확대_진단 축소확대율 */
  double  lmitRdexRatoMr [ASSM_ITEM_CNT]      ; /* 수검고객_사망 확대축소율 */
  double  lmitRdexRatoMh [ASSM_ITEM_CNT]      ; /* 수검고객_입원 확대축소율 */
  double  lmitRdexRatoMs [ASSM_ITEM_CNT]      ; /* 수검고객_특정질병 확대축소율 */

}   CMNC_octmSumCalc_dtal;

/******************************************************************************/
/*  진단기준발췌(CMNC_mediStddXtrt_CC)                                        */
/*  2002.03.05 by 박민구                                                      */
/*  2005.10.30 가입금액 추가                                                  */
/******************************************************************************/
typedef struct
{
    varchar custId                  [ 10+1];    /* input  : 고객ID                  */
    varchar custRoleCode            [ 10+1];    /* input  : 고객역할                */
    varchar joltCalcDvsn            [ 10+1];    /* input  : 가입한도산출구분        */
    double  joinAge                        ;    /* input  : 가입연령                */
    varchar cnttDate                [  8+1];    /* input  : 계약일자                */
    varchar insrKindDtal            [  4+1];    /* input  : 보험종류세              */
    varchar insrKindItem            [  3+1];    /* input  : 보험종류목              */
    varchar goodCodeDtal       [ CJG_CNT][  4+1];    /* input  : 상품코드세              */
    varchar goodCodeItem       [ CJG_CNT][  3+1];    /* input  : 상품코드목              */
    varchar goodRelnCode       [ CJG_CNT][ 10+1];    /* input  : 상품관계코드            */
    double  insrAmt            [ CJG_CNT]       ;    /* input  : 가입금액                */
    double  wekyDrnkCnt                    ;    /* input  : 주당음주횟수            */
    varchar drnkKdcd                [ 10+1];    /* input  : 음주종류코드            */
    double  t01DrnkQnty                    ;    /* input  : 1회음주량               */
    double  dalySmokQnty                   ;    /* input  : 일당흡연량              */
    double  hght                           ;    /* input  : 신장                    */
    double  wght                           ;    /* input  : 몸무게                  */
    varchar hndrDvsnCode            [ 10+1];    /* input  : 장애인구분코드          */
    varchar intrInqrCode            [ 10+1];    /* input  : 일괄계약 보험기간조회코드 */
    double  insuPsct                       ;    /* input  : 일괄계약 피보험자 인원수*/
    double  premCoprCgrt                   ;    /* input  : 일괄계약 보험료법인부담 */
    varchar extraPerson             [  1+1];    /* input  : 할증체  여부 할증_cho   */
    varchar pmmiJoinYn              [  4+1];    /* input  : 실손가입가능여부        */

    varchar prevMediKncd            [ 10+1];    /* input : 이전_진단종류코드         */
    varchar prevXtrtRscd            [ 10+1];    /* input : 이전_진단대상발췌사유코드 */

    varchar mediKindCode            [ 10+1];    /* output : 진단종류코드            */
    varchar mediKindName            [200+1];    /* output : 진단종류코드명          */
    varchar wlisDtivObyn            [  1+1];    /* output : 종신보험의무조사대상여부*/
    varchar prevMediObyn            [  1+1];    /* output : 선진단대상여부          */
    varchar mdobXtrtRscd            [ 10+1];    /* output : 진단대상발췌사유코드    */
    varchar retnPaymDvsn            [ 10+1];    /* output : 반송지급구분 1=반송,2=지급*/
    varchar retnPaymRscd            [ 10+1];    /* output : 반송지급사유코드        */
    varchar stdbSbstKdcd            [ 10+1];    /* output : 표준체_표준하체종류코드 */
    varchar b26DChecMediYn          [  1+1];    /* output : 26일이전종진선테진단여부*/
    varchar prevPaymPrstYn          [  1+1];    /* output : 기지급급부체여부        */
    varchar mediOpinYn              [  1+1];    /* output : 소견서첨부요여부(YN)    */
    varchar acciPratOcv             [ 10+1];    /* output : 가입불가 장해등급('','1','2' or '3') */
    varchar mtpfVlutCode            [ 10+1];    /* output : 조치사유코드            */
    varchar custCrinMncd            [  4+1];    /* output : 고객신용정보조치코드    */
    varchar addtParams          [20][ 10+1];    /* output : 추가 파라메터(TEMP)     0,1,2 사용, 3 사용 */
                                                /* med->addtParams 정의
                                                        addtParams[0] 기관코드
                                                        addtParams[1] 업무구분
                                                        addtParams[2] 뇨검사대상여부(OUTPUT)
                                                        addtParams[3] 가입제한안내
                                                        addtParams[4] 모집FP
                                                        addtParams[5] 납입주기
                                                        addtParams[6] 판매채널
                                                        addtParams[7] 증권번호
                                                        addtParams[8] 직업코드
                                                        addtParams[9] 위험등급코드
                                                        addtParams[10] 건강체확인서판정여부(OUTPUT)
                                                */
    double  addParams           [10]       ;    /* output : 추가 파라메터(TEMP) */
                                                /* med->addParams 정의
                                                        addParams[0] 현가(PV산출용)
                                                        addParams[1]
                                                        addParams[2]
                                                        addParams[3]
                                                        addParams[4]
                                                        addParams[5]
                                                        addParams[6]
                                                        addParams[7]
                                                        addParams[8]
                                                        addParams[9]
                                                */
    /* SVC_CLOSE 제거작업시 사용 */
    int     resultCode               ;          /* O    처리결과    (0 :정상) */
    char    resultMsg       [100 + 1];          /* O    처리결과메시지        */

}   CMNC_mediStddXtrt;

/******************************************************************************/
/*  청약서 유효기간(CMNC_SrdoVlidTermChek)                                    */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar cnttDate                [  8+1];    /* 계약일자                   */
    varchar insuBrth                [ 13+1];    /* 주민번호                   */
    varchar srdoVlidTerm            [  8+1];    /* 유효기간                   */
    varchar pgmGubun                [  1+1];    /* 개별/일괄구분              */
                                                /* P  : 개별                  */
                                                /* G  : 일괄갑지              */
                                                /* U  : 일괄을지              */
}   CMNC_SrdoVlidTermChek;

/******************************************************************************/
/*  이미지 스캔 여부 검색(CMNC_imagScanYnSrch)                                */
/*  2002.03.05 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar imagAdmnNo              [ 16+1];    /* input  : 이미지관리번호    */
    double  imagKindCode                   ;    /* input  : 이미지종류코드    */
    varchar frstScanImno            [  8+1];    /* output : 최초스캔입력자사번*/
    varchar frstScanIptm            [ 16+1];    /* output : 최초스캔입력일시  */
    varchar sdocScanYn              [  4+1];    /* output : 부속서류스캔여부  */
    varchar srdoJgdaStcd            [ 10+1];    /* output : 청약서심사자료상태코드*/
}   CMNC_imagScanYnSrch;

/******************************************************************************/
/*  기관일마감 보험료 (CMNC_GiganMagamBoryoSum_CC)                            */
/*  2002.05.17 by 고호재                                                      */
/******************************************************************************/
typedef struct
{
    varchar  rmtnDate                  [  8 + 1];  /*   : 송금일자            */
}   CMNC_GiganMagamBoryoSum;

/*****************************************************************************/
/*  세금우대당사기계약합산및가능여부체크 (CMNC_TaxDangsaGigaeakCheck_CC)     */
/*  2003.03.05 by 장선희                                                     */
/*  청약서발행,접수시 세금우대한도 당사분 체크                               */
/*  입력값 참고사항                                                          */
/*   => 작업구분   1:발행  2:접수 3: 성립   0 : 고객id로 조회                */
/*                     (대상고객ID : 계약자고객ID,계약자단체이면 주피고객ID) */
/*                 작업구분   1,2,3  : 입력값 모두 필수( M 필수입력)         */
/*****************************************************************************/
typedef struct
{
    char    workDvsn        [  2 + 1];  /* I    작업구분                 M   */
    char    custId          [ 10 + 1];  /* I    대상고객id               M   */
    char    custSex         [  2 + 1];  /* I    대상고객성별(1:남,2:여)  M   */
    int     custAge                  ;  /* I    대상고객연령(만연령)     M   */
    char    txprConnTpcd    [ 10 + 1];  /* I    세금우대관련유형코드     M   */
    char    taxPrmnKind     [ 10 + 1];  /* I    세금우대주체종류             */
    char    polyNo          [ 12 + 1];  /* I    증권번호                     */
    char    cnttDate        [  8 + 1];  /* I    계약일자                     */
    double  kliTaxCnt                ;  /* O    당사세금우대건수             */
    double  kliTaxAmt                ;  /* O    당사세금우대금액             */
    double  taxPrpsAmt               ;  /* O    주체별세금우대가능금액       */
    double  taxPrjnAmt               ;  /* O    연합회세금우대등록금액       */
    int     resultCode               ;  /* O    처리결과    (0 :정상)        */
    char    resultMsg       [100 + 1];  /* O    처리결과메시지               */
}   CMNC_TaxDangsaGigaeakCheck;

/******************************************************************************/
/*  세금우대등록 (CMNC_taxPrctRgst)                                           */
/*  2002.06.07 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar txprOccrCadv            [ 10+1];    /* I : 세금우대발생원인구분   */
                                                /* I : 통합코드 참조          */
    varchar polyNo                  [  9+1];    /* I : 증권번호               */
    double  histNo                         ;    /* I : 이력번호               */
                                                /*     미처리건 재처리제외 0  */
    double  taxPrpsAmt                     ;    /* I : 주체별세금우대가능금액 */
    double  taxPrjnAmt                     ;    /* I : 연합회세금우대등록금액 */
    varchar txprAnswCode            [  3+1];    /* O : 은행연합회 응답코드    */
    varchar txprAnswDtcd            [ 10+1];    /* O : 은행연합회 응답세부코드*/
    varchar txprRecvYn              [  1+1];    /* O : 은행연합회수신여부     */
    varchar txprDlngRtcd            [ 10+1];    /* O : 은행연합회처리결과     */
}   CMNC_taxPrctRgst;

/******************************************************************************/
/*  세금우대삭제 (CMNC_taxPrctRgstCncl)                                       */
/*  2003.04.28 by 박민구                                                      */
/******************************************************************************/
typedef struct
{
    varchar txprOccrCadv            [ 10+1];    /* I : 세금우대발생원인구분   */
                                                /* I : 통합코드 참조          */
    varchar polyNo                  [  9+1];    /* I : 증권번호               */
    double  histNo                         ;    /* I : 이력번호               */
                                                /*     미처리건 재처리제외 0  */
}   CMNC_taxPrctRgstCncl;


/*****************************************************************************/
/*  저축성 비과세 등록 대상 조회 (CMNC_savingTaxFreeSrch)                    */
/*  2013.04.15 by 장선희                                                     */
/*  청약서발행,접수시 등록 유형 조회                                         */
/*  입력값 참고사항                                                          */
/*   => 작업구분   1:발행  2:접수 3: 성립   0 : 고객id로 조회                */
/*                     (대상고객ID : 계약자고객ID,계약자단체이면 단체객ID로) */
/*                 작업구분   1,2,3  : 입력값 모두 필수                      */
/*****************************************************************************/
typedef struct
{
    char     workDvsn         [  2+1]; /* I  작업구분                */

    varchar  irkdCodeDtal     [  4+1]; /* I  보험종류코드_세         */
    varchar  irkdCodeItem     [  3+1]; /* I  보험종류코드_목         */
    double   mainPrem                ; /* I  주보험료                */
    double   sumOrigPrem             ; /* I  합계원보험료            */
    double   totPaymPrem             ; /* I  총납입보험료            */
    varchar  cnttDate         [  8+1]; /* I  계약일자                */
    varchar  paymCyclCode     [ 10+1]; /* I  납입주기코드            */
    double   realInsrTerm            ; /* I  실보험기간              */
    double   realPaymTerm            ; /* I  실납입기간              */
    double   lmitPyct                ; /* I  한정납회                */
    double   ppayRetrCnt             ; /* I  선소급횟수              */
    double   anntPaymStag            ; /* I  연금지급개시연령        */
    varchar  anntPaymStdt     [  8+1]; /* I  연금지급개시일자        */
    double   minGurtTerm             ; /* I  최저보증기간            */
    varchar  ctorCustId       [ 10+1]; /* I  계약자고객ID            */
    varchar  minsCustId       [ 10+1]; /* I  주피고객ID              */
    varchar  endCustId        [ 10+1]; /* I  만기수익자고객ID        */
    varchar  polyNo           [ 12+1]; /* I  증권번호                */
    varchar  bankProcDvsn     [ 10+1]; /* I  은행처리구분            */

    int      stfCnt                  ; /* O  저축성비과세 건수       */
    double   joinAmt     [STF]       ; /* O  가입금액                */
    double   joinPossAmt [STF]       ; /* O  가입가능금액            */
    varchar  confirmYn   [STF][  4+1]; /* O  확인여부                */
    varchar  txprSavgKind[STF][ 12+1]; /* O  세금우대저축종류코드    */
    double   rgstPrrmAmt [STF]       ; /* O  등록예정금액            */
    varchar  txfrGoodClcd     [ 12+1]; /* O  비과세상품분류코드      */

    int      resultCode              ; /* O  처리결과    (0 :정상)   */
    char     resultMsg        [100+1]; /* O  처리결과메시지          */

}   CMNC_savingTaxFreeSrch;

/******************************************************************************/
/*  가수가불처리module (CMNC_moreLess_CC)                                     */
/*  2002.06.20 by 한원선                                                      */
/******************************************************************************/
typedef struct
{
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /* O : 결과메시지           */
}   CMNC_moreLess;

/******************************************************************************/
/*  성립처리module (CMNC_sunglibModule_CC)                                    */
/*  2002.06.20 by 한원선                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    jugmBsnsDvsn              [ 12 + 1];  /* I : 심사업무구분         */
    char    jugmOccrCano              [  4 + 1];  /* I : 심사발생원인번호     */
    int     jugmDlngNo                         ;  /* I : 심사처리번호         */
    char    sunglibGubun              [  4 + 1];  /* I : 성립구분             */
                       /* 1-심사대상건 2-기관전결건 3-일괄계약건 4-특별성립건 */
    char    pgmId                     [ 50 + 1];  /* I : 프로그램ID           */
    char    Mpno                      [  8 + 1];  /* I : 사번                 */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /* O : 결과메시지           */
}   CMNC_sunglib;

/******************************************************************************/
/*  부활성립처리module (CMRV_sunglibModule_CC)                                */
/*  2002.06.20 by 한원선                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo                    [ 12 + 1];  /* I : 증권번호             */
    char    reviDlngNo                [  4 + 1];  /* I : 부활처리번호         */
    char    jugmBsnsDvsn              [ 12 + 1];  /* I : 심사업무구분         */
    char    jugmOccrCano              [  4 + 1];  /* I : 심사발생원인번호     */
    int     jugmDlngNo                         ;  /* I : 심사처리번호         */
    char    sunglibGubun              [  4 + 1];  /* I : 성립구분             */
                       /* 1-심사대상건 2-기관전결건 3-일괄계약건 4-특별성립건 */
    char    pgmId                     [ 50 + 1];  /* I : 프로그램ID           */
    char    Mpno                      [  8 + 1];  /* I : 사번                 */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /* O : 결과메시지           */
}   CMRV_sunglib;

/******************************************************************************/
/*  보완발췌처리module (CMNC_bowanBalche_CC)                                  */
/*  2002.06.20 by 한원선                                                      */
/******************************************************************************/
typedef struct
{
    char    dvsn                      [  1 + 1];  /* I : 구분(1:신계약2:부활) */
    char    admnNo                    [ 13 + 1];  /* I : 관리번호(증번,부활번)*/
    char    apcnDate                  [  8 + 1];  /* I : 적용일자(계약,부활)  */
    char    irkdCodeDtal              [  4 + 1];  /* I : 보험종류_세          */
    char    irkdCodeItem              [  3 + 1];  /* I : 보험종류_목          */
    char    goodCodeDtal       [CJG_CNT][  4 + 1];  /* I : 상품종류_세          */
    char    goodCodeItem       [CJG_CNT][  3 + 1];  /* I : 상품종류_목          */
    char    txprSavgKind              [ 10 + 1];  /* I : 세금우대저축종류     */
    char    taxPrmnKind               [ 10 + 1];  /* I : 세금우대주체종류     */
    char    dtorCtorReln              [ 10 + 1];  /* I : 예금주계약자관계코드 */
    char    minsCtorReln              [ 10 + 1];  /* I : 주피계약자관계코드   */
    char    minsEdbnReln              [ 10 + 1];  /* I : 주피만기수익자관계   */
    char    custRoleCode        [CRM_CNT][ 10 + 1];  /* I : 고객역할코드         */
    char    rsdnRgstNo          [CRM_CNT][ 13 + 1];  /* I : 주민등록번호         */
    char    mediKindCode        [CRM_CNT][ 10 + 1];  /* I : 진단종류코드         */
    char    prevMediObyn        [CRM_CNT][  1 + 1];  /* I : 선진단대상진단여부   */
    int     resultCode                         ;  /* O : 처리결과             */
    char    cpmtObjtYn                [  1 + 1];  /* O : 보완대상여부         */
    int     cpmtCnt                            ;  /* O : 보완건수             */
    char    cpmtResnCode       [ARY50][ 12 + 1];  /* O : 보완사유코드         */
    double  cpmtSqno           [ARY50]         ;  /* O : 보완일련번호         */
    char    cpmtDocuCode       [ARY50][ 12 + 1];  /* O : 보완서류코드         */
    char    pgmId              [ARY50][ 20 + 1];  /* O : 프로그램ID           */
}   CMNC_bowanBalche;

/******************************************************************************/
/*  기관전결처리module (CMNC_GikwanJeonkyeul_CC)                              */
/*  2002.06.20 by 한원선                                                      */
/******************************************************************************/
typedef struct
{
    char    bsnsDvsnCode         [  2 + 1];  /* I : 업무구분코드 (NC,RV)      */
    char    polyNo               [  9 + 1];  /* I : 증권번호                  */
    char    insrTermDvsn         [ 10 + 1];  /* I : 보험기간구분              */
    char    clltRoutDvsn         [ 10 + 1];  /* I : 모집경로구분              */
    double  mainInsrAmt                   ;  /* I : 주보험금                  */
    char    irkdCodeDtal         [  4 + 1];  /* I : 보험종류코드_세           */
    char    irkdCodeItem         [  3 + 1];  /* I : 보험종류코드_목           */
    char    imagKindCode         [ 10 + 1];  /* I : 이미지종류코드            */
    char    jugmDataStdv         [ 10 + 1];  /* I : 심사자료상태구분          */
    char    orgnCode             [  5 + 1];  /* I : 기관코드                  */
    char    taxSelYn             [  1 + 1];  /* I : 세금우대선택여부          */
    char    clltLpPrno           [  8 + 1];  /* I : 모집설계사고유번호        */
    char    grttSpcdYn           [  1 + 1];  /* I : 단체취급특약여부          */
    char    ctorCrpbYn           [  1 + 1];  /* I : 계약자법인체여부          */
    char    freePlanYn           [  1 + 1];  /* I : 자유설계여부              */
    char    savgInsrYn           [  1 + 1];  /* I : 저축성보험여부            */
    char    acdtInsrYn           [  1 + 1];  /* I : 상해보험여부              */
    char    goodCodeDtal  [CJG_CNT][  4 + 1];  /* I : 상품코드_세               */
    char    goodCodeItem  [CJG_CNT][  3 + 1];  /* I : 상품코드_목               */
    char    rsdnRgstNo     [CRM_CNT][ 13 + 1];  /* I : 주민번호                  */
    char    custId         [CRM_CNT][ 10 + 1];  /* I : 고객ID                    */
    char    ctorInsuRlcd   [CRM_CNT][ 10 + 1];  /* I : 주피보험자와의관계        */
    char    notcYn         [CRM_CNT][  1 + 1];  /* I : 고지유무                  */
    char    occpCode       [CRM_CNT][ 10 + 1];  /* I : 직종코드                  */
    double  joinAge        [CRM_CNT]         ;  /* I : 가입연령                  */
    char    prevMediObyn   [CRM_CNT][  1 + 1];  /* I : 선진단대상여부            */
    char    wlisDtivObyn   [CRM_CNT][  1 + 1];  /* I : 종신보험의무조사대상여부  */
    char    hndrDvsnCode   [CRM_CNT][ 10 + 1];  /* I : 장애인구분코드            */
    char    frnrDvsnCode   [CRM_CNT][ 10 + 1];  /* I : 외국인구분코드            */
    char    hobyCode       [CRM_CNT][ 10 + 1];  /* I : 취미코드                  */
    char    mediKindCode   [CRM_CNT][ 10 + 1];  /* I : 진단종류코드              */
    char    riskGradCode   [CRM_CNT][ 10 + 1];  /* I : 위험등급코드              */
    char    jugmInfoYn     [CRM_CNT][  1 + 1];  /* I : 심사정보유무              */
    double  calcAmtA01     [CRM_CNT]         ;  /* I : 사정항목코드A01           */
    double  calcAmtA02     [CRM_CNT]         ;  /* I : 사정항목코드A02           */
    double  calcAmtA03     [CRM_CNT]         ;  /* I : 사정항목코드A03           */
    double  calcAmtA04     [CRM_CNT]         ;  /* I : 사정항목코드A04           */
    double  calcAmtA05     [CRM_CNT]         ;  /* I : 사정항목코드A05           */
    double  calcAmtA06     [CRM_CNT]         ;  /* I : 사정항목코드A06           */
    double  calcAmtA07     [CRM_CNT]         ;  /* I : 사정항목코드A07           */
    double  calcAmtA08     [CRM_CNT]         ;  /* I : 사정항목코드A08           */
    double  calcAmtC01     [CRM_CNT]         ;  /* I : 사정항목코드C01           */
    double  calcAmtF01     [CRM_CNT]         ;  /* I : 사정항목코드F01           */
    double  calcAmtD01     [CRM_CNT]         ;  /* I : 사정항목코드D01           */
    double  calcAmtG03     [CRM_CNT]         ;  /* I : 사정항목코드G03           */
    double  calcAmtD02     [CRM_CNT]         ;  /* I : 사정항목코드D02           */ /* (2005.12.23 장두원) */
    double  calcAmtB12     [CRM_CNT]         ;  /* I : 사정항목코드B12           */ /* (2005.12.23 장두원) */
    double  assmLmitRdexA01[CRM_CNT]         ;  /* I : 사정항목축소확대A01       */ /* (2005.12.23 장두원) */
    double  assmLmitRdexD02[CRM_CNT]         ;  /* I : 사정항목축소확대D02       */ /* (2005.12.23 장두원) */
    double  assmLmitRdexB12[CRM_CNT]         ;  /* I : 사정항목축소확대B12       */ /* (2005.12.23 장두원) */
    double  lmitAmtA01     [CRM_CNT]         ;  /* I : 한도금액A01               */ /* (2005.12.23 장두원) */
    double  lmitAmtD02     [CRM_CNT]         ;  /* I : 한도금액D02               */ /* (2005.12.23 장두원) */
    double  lmitAmtB12     [CRM_CNT]         ;  /* I : 한도금액B12               */ /* (2005.12.23 장두원) */
    double  oocsAmtA01     [CRM_CNT]         ;  /* I : 사정항목코드A01 단건합산  */ /* (2005.12.23 장두원) */
    double  oocsAmtD02     [CRM_CNT]         ;  /* I : 사정항목코드D02 단건합산  */ /* (2005.12.23 장두원) */
    double  oocsAmtB12     [CRM_CNT]         ;  /* I : 사정항목코드B12 단건합산  */ /* (2005.12.23 장두원) */
    double  oocsAmtA08     [CRM_CNT]         ;  /* I : 사정항목코드A08 단건합산  */ /* (2005.07.23 장두원) */

    double  tempAmt        [CRM_CNT]         ;  /* I : 기관전결 단건 합산을 위한 어레이 (2008.08) */

    double  sumOrigPrem                ;  /* I : 합계원보험료        (20031006추가) */
    char    mdobXtrtRscd   [CRM_CNT][ 10 + 1];  /* I : 진단대상발췌사유코드(20041122추가) */
    char    saleChnlCode         [ 10 + 1];  /* I : 판매채널코드        (20070710추가) */

    int     resultCode                    ;  /* O : 처리결과                  */
    char    resultMsg            [200 + 1];  /* O : 결과메세지                */
    char    orgnArdcYn           [  1 + 1];  /* O : 기관전결여부              */
    char    ardcLmitDvsn         [ 10 + 1];  /* O : 전결한도                  */
}   CMNC_GikwanJeonkyeul;

/******************************************************************************/
/*  위험대상판정입력(CMNC_DangerousTargetIn_CC)                               */
/*  2002.06.22 by 이영수                                                      */
/******************************************************************************/
typedef struct
{
    varchar proc_dvsn               [  4+1];    /* input  : 조회구분(1:입력 2:삭제) */
    varchar poly_no                 [  9+1];    /* input  : 증권번호          */
    varchar revi_dlng_no            [  4+1];    /* input  : 부활처리번호      */
    varchar apcn_date               [  8+1];    /* input  : 적용기준일자      */

    int     retCode                        ;    /* output : 결과코드          */
                                   /*(0:성립가능 1:성립불가 2:성립불가_COMMIT)*/
} CMNC_DangerousTargetIn;

/******************************************************************************/
/*  건진대상자정보조회(CMMS_ChexTargetExtract_CC)                             */
/*  2002.06.22 by 이영수                                                      */
/******************************************************************************/
typedef struct
{
   varchar polyNo                          [ 9+1];     /* input  : 증권번호          */
   varchar polyNoOut   [ARY50]          [50+1];        /* output :  증권번호         */
   varchar irkdCodeName   [ARY50]          [50+1];     /* output : 보험종류          */
   varchar ctorCustName   [ARY50]          [50+1];     /* output : 계약자명          */
   varchar cnttDate       [ARY50]          [ 8+1];     /* output : 계약일자          */
   double  prem           [ARY50];                     /* output : 보험료            */
   double  insrAmt        [ARY50];                     /* output : 보험금            */
   varchar paymCyclName   [ARY50]          [10+1];     /* output : 납입주기          */
   varchar minsCustName   [ARY50]          [50+1];     /* output : 주피성명          */
   varchar scndInsuName   [ARY50]          [50+1];     /* output : 종피성명          */
   varchar mediAppDate    [ARY50]          [ 8+1];     /* output : 건진적용기준일자  */
   double  stddPrem       [ARY50];                     /* output : 기준보험료        */
   double  stddInsrAmt    [ARY50];                     /* output : 기준보험금        */
   varchar minsCust       [ARY50]          [50+1];     /* output : 진단대상(주피)    */
   varchar scndInsu       [ARY50]          [50+1];     /* output : 진단대상(종피)    */
   varchar firstMediTargetYear   [ARY50]   [ 8+1];     /* output : 최초진단대상      */
   double  stddLupyPay           [ARY50];              /* output : 기준일시납        */
   varchar firstInsrDur   [ARY50]    [10+1];     /* output : 서비스주기(제1보험기간) */
   varchar secondInsrDur  [ARY50]    [10+1];     /* output : 서비스주기(제2보험기간) */

} CMMS_ChexTargetExtract;

/******************************************************************************/
/*  기관마감 (CMNC_GiganMagam_CC)                                             */
/*  2002.08.24 by 이용진                                                      */
/******************************************************************************/
typedef struct
{
    char    rmtnDate                  [  8 + 1];  /* I : 송금일자             */
    char    rmtnOrgnCode              [  5 + 1];  /*   : 송금기관코드         */
    char    mnacClafDlyn              [  4 + 1];  /*   : 월경리마감후처리여부 */
                                      /* 청약철회취소마감자료집계에서만 사용  */
    char    orgnGubn                  [  4 + 1];  /*   : 본사/지원단구분      */
                                      /* 부활, 현지철회, 품질해지에서만 사용  */
                                      /* 0 : 기관마감                         */
                                      /* 1 : 고객센타마감 -> 본사             */
                                      /* 2 :                 지원단           */
    int     resultCode                         ;  /* O : 처리결과             */
    char    resultMsg                 [100 + 1];  /*   : 결과메시지           */
    double  prem          [ARYCNT_030]         ;  /*   : 보험료               */
    double  inte          [ARYCNT_030]         ;  /*   : 이자                 */
    double  incmTax       [ARYCNT_030]         ;  /*   : 소득세               */
    double  rsdnTax       [ARYCNT_030]         ;  /*   : 주민세               */
    double  dlngCnt       [ARYCNT_030]         ;  /*   : 처리건수             */
    double  magmYn        [ARYCNT_030]         ;  /*   : 마감여부             */
    CMNC_ModuleReturn  modRc;
}   CMNC_GiganMagam;

/******************************************************************************/
/*  심사자분배 Structure 정의                                                 */
/*  2002.10.01 by 장두원                                                      */
/*                                                                            */
/*  (m) 필수입력                                                              */
/*  (o) 선택입력                                                              */
/*  (s) 최소 한 개이상 입력                                                   */
/*                                                                            */
/*  [2003.03.12 변경] 전결한도 입력하지 않으면 기본값 1로 처리됨              */
/*  [2004.02.25 변경] 보종코드_세 추가                                        */
/******************************************************************************/
typedef struct
{
    char    jugmBsnsDvsn          [ 12 + 1];  /* I : 심사업무구분     (m)     */
    char    relnJudgDvsn          [ 12 + 1];  /*   : 관계심사업무구분 (o)     */
    char    orgnCode              [  8 + 1];  /*   : 기관코드         (s)     */
    char    invrCode              [  8 + 1];  /*   : 조사자코드       (s)     */
    char    lpPrno                [  8 + 1];  /*   : 설계사고유번호   (s)     */
    char    irkdCodeDtal          [  4 + 1];  /*   : 보종코드_세      (s)     */
    char    jugmDgre              [ 10 + 1];  /*   : 전결한도         (o)     */
    char    apcnDate              [  8 + 1];  /*   : 적용일자         (m)     */

    char    frstJudgMpno          [  8 + 1];  /* O : 1차  심사자사번          */
    char    scndJudgMpno          [  8 + 1];  /* O : 2차  심사자사번          */
    char    thrdJudgMpno          [  8 + 1];  /* O : 3차  심사자사번          */
    char    judgMpno              [  8 + 1];  /* O : 현재 심사자사번          */
    int     resultCode                     ;  /*   : 처리결과                 */
    char    resultMsg             [100 + 1];  /*   : 결과메시지               */
} CMNC_udwrDist;

/******************************************************************************/
/*  심사자분배 Structure 정의                                                 */
/*  2006.01.03 by 장두원                                                      */
/*                                                                            */
/*  (m) 필수입력                                                              */
/*  (o) 선택입력                                                              */
/*  (s) 최소 한 개이상 입력                                                   */
/*                                                                            */
/******************************************************************************/

/* 운영기 반영전 테스트 기간중 오류방지를 위한 플레그임. */
#define JUDG_DIST
/*********************************************************/

typedef struct
{
    /* 입력 */
    char    jugmBsnsDvsn           [ 12 + 1];  /* 심사업무구분      (m) */
    char    relnJudgDvsn           [ 12 + 1];  /* 관계심사업무구분  (o) */
    char    ardcLmitDvsn           [ 12 + 1];  /* 전결한도구분      (o) */
    char    orgnCode               [  8 + 1];  /* 기관코드          (o) */
    char    apcnDate               [  8 + 1];  /* 적용일자          (m) */

    char    judgDstbTpcd [DSTB_CNT][ 10 + 1];  /* 심사자분배유형코드(o) */
    char    judgDstbCval [DSTB_CNT][ 56 + 1];  /* 심사분배코드값    (o) */

    /* 출력 */
    char    jugmDstbBsdv           [ 12 + 1];  /* 심사분배업무구분      */
    double  jugmDstbSqno                    ;  /* 심사분배일련번호      */
    char    frstJudgMpno           [  8 + 1];  /* 1차  심사자사번       */
    char    scndJudgMpno           [  8 + 1];  /* 2차  심사자사번       */
    char    thrdJudgMpno           [  8 + 1];  /* 3차  심사자사번       */
    char    crntJudgMpno           [  8 + 1];  /* 현재 심사자사번       */

    /* 결과 */
    int     resultCode                     ;  /*   : 처리결과           */
    char    resultMsg             [100 + 1];  /*   : 결과메시지         */

    CMNC_ModuleReturn mm;

} CMNC_judgDist;

/******************************************************************************/
/*  가입제한안내 Structure                                                    */
/*  2002.10.01 by 장두원                                                      */
/******************************************************************************/

typedef struct
{
    char    polyNo                [  9 + 1]; /* I 증권번호                    */
    char    reviDlngNo            [  4 + 1]; /* I 부활처리번호                */
    char    joltCalcDvsn          [ 10 + 1]; /* I 가입한도산출구분            */
    char    spclSplsYn            [  1 + 1]; /* I 특별초과여부                */

    char    bsnsDvsn              [  5 + 1]; /* I 업무구분(1:신계약 2:부활)   */
    char    prsnCoprSadv          [ 10 + 1]; /* I 개인법인판매구분            */
    char    irkdCodeDtal          [  4 + 1]; /* I 보종코드_세                 */
    char    irkdCodeItem          [  4 + 1]; /* I 보종코드_목                 */
    char    goodCodeDtal[CJG_CNT][  4 + 1]; /* I 상품코드_세                 */
    char    goodCodeItem[CJG_CNT][  4 + 1]; /* I 상품코드_목                 */
    double  spcdPrem    [JEDO_CNT]         ; /* I 특약보험료                  */
    char    custId      [TCRM_CNT][ 10 + 1]; /* I 고객ID                      */
    char    custRoleCode[TCRM_CNT][ 10 + 1]; /* I 고객역할코드                */
    char    occpCode    [TCRM_CNT][ 10 + 1]; /* I 직종코드                    */
    char    mediOpinYn  [TCRM_CNT][  1 + 1]; /* I 소견서첨부요여부(YN)        */
    char    extParam1   [TCRM_CNT][ 10 + 1]; /* I 장애체가입제한              */
    char    extParam2   [TCRM_CNT][ 10 + 1]; /* I 신장해분류에 의한 가입제한  */
    char    extParam3   [TCRM_CNT][ 10 + 1]; /* I reserved                    */
    char    extParam4   [TCRM_CNT][ 10 + 1]; /* I reserved                    */
    char    extParam5   [TCRM_CNT][ 10 + 1]; /* I reserved                    */
    char    apcnDate              [  8 + 1]; /* I 적용일자                    */
    int     rqLines                        ; /* I 요청라인수                  */
    char    taxPrctYn             [  1 + 1]; /* I 세금우대계약여부(YN)        */
    int     deadBnfcCnt                    ; /* I 사망시수익자 인원수         */
    char    addtParams  [      10][ 10 + 1]; /* I 추가파라메터                */
                                             /*   0 : reserved                */
                                             /*   1 : reserved                */
                                             /*   2 : reserved                */
                                             /*   3 : reserved                */
                                             /*   4 : reserved                */
                                             /*   5 : reserved                */
                                             /*   6 : reserved                */
                                             /*   7 : reserved                */
                                             /*   8 : reserved                */
                                             /*   9 : reserved                */

    int     rpLines                        ; /* O 결과라인수                  */
    char    joinLmitNotcCd   [ 50][ 10 + 1]; /* O 가입제한안내 코드           */
    char    joinLmitNotcNm   [ 50][255 + 1]; /* O 가입제한안내 문장           */
    int     resultCode                     ; /* O 처리결과                    */
    char    resultMsg             [100 + 1]; /* O 결과메시지                  */

}   CMNC_joinLmitNotc;

/******************************************************************************/
/*  심사시유의사항 Structure                                                    */
/*  2002.10.01 by 장두원                                                      */
/******************************************************************************/
typedef struct
{
    char    polyNo               [  9 + 1]; /* I 증권번호                     */
    char    reviDlngNo           [  4 + 1]; /* I 부활처리번호                 */
    char    joltCalcDvsn         [ 10 + 1]; /* I 가입한도산출구분             */
    char    spclSplsYn           [  1 + 1]; /* I 특별초과여부                 */

    char    apcnDate             [  8 + 1]; /* I 적용일자(계약일자)           */
    char    irkdCodeDtal         [  4 + 1]; /* I 보종코드_세                  */
    char    irkdCodeItem         [  4 + 1]; /* I 보종코드_목                  */
    char    acctRlcd             [ 10 + 1]; /* I 예금주관계                   */
    char    taxPrctYn            [ 10 + 1]; /* I 세금우대여부                 */
    char    taxPrmnKind          [ 10 + 1]; /* I 세금우대주체종류             */
    char    orgnArdcYn           [ 10 + 1]; /* I 기관전결대상여부             */
    char    grttSpcdYn           [ 10 + 1]; /* I 단체취급특약부가여부         */
    double  premCoprCgrt                  ; /* I 보험료법인부담율             */
    char    ctorEdbnReln         [ 10 + 1]; /* I 계약자만기수익자관계         */
    char    vlnsYn               [  1 + 1]; /* I 변액보험여부(YN)             */
    char    xtrcYn               [  1 + 1]; /* I 할증계약여부                 */ /* 20040716 장두원 */
  /*char    compYn               [  1 + 1]; /* I 비교안내여부                 */ /* 20050201 신진혁 */

    char    goodCodeDtal    [ CJG_CNT][  4 + 1]; /* I 상품코드_세                  */
    char    goodCodeItem    [ CJG_CNT][  4 + 1]; /* I 상품코드_목                  */
    double  spcdPrem        [ CJG_CNT]         ; /* I 특약보험료                   */

    char    custId          [ 15][ 10 + 1]; /* I 고객ID                       */
    char    rsdnRgstNo      [ 15][ 13 + 1]; /* I 주민번호                     */
    char    custRoleCode    [ 15][ 10 + 1]; /* I 고객역할코드                 */
    char    minsRelnCode    [ 15][ 10 + 1]; /* I 주피와의관계코드             */
    int     age             [ 15]         ; /* I 연령                         */
    char    occpCode        [ 15][ 10 + 1]; /* I 직종코드                     */
    char    riskGradCode    [ 15][ 10 + 1]; /* I 위험등급                     */
    char    mediKindCode    [ 15][ 10 + 1]; /* I 진단종류                     */
    char    prevMediObyn    [ 15][ 10 + 1]; /* I 선진단대상여부               */
    char    mdobXtrtRscd    [ 15][ 10 + 1]; /* I 진단대상발췌사유코드         */
    char    resnCode        [ 15][ 10 + 1]; /* I 사유코드(반송 또는 지급사유) */
    char    exYn            [ 15][ 10 + 1]; /* I 초과체여부                   */
    char    apYn            [ 15][ 10 + 1]; /* I 기지급급부체여부             */
    char    frnrManYn       [ 15][ 10 + 1]; /* I 외국인여부                   */
    char    hndcManYn       [ 15][ 10 + 1]; /* I 장애인여부                   */
    char    stdbSbstKdcd    [ 15][ 10 + 1]; /* I 표준하체종류코드             */
    char    mdivObjtDvsn    [ 15][ 10 + 1]; /* I 의무조사대상여부(YN) 향후 구분으로 변경필요 */
    char    frnrRcntYn      [ 15][ 10 + 1]; /* I 외국인사전승인여부           */
    char    lastSlctGrad    [ 15][ 10 + 1]; /* I VIP선정등급                  */
    char    atntPublLmit    [ 15][ 10 + 1]; /* I 유의고객발행(재해저축가)     */
    char    pmmiDuplYn      [ 15][  1 + 1]; /* I 실손중복여부                 */

    char    crdtGrdv             [  4 + 1]; /* I 신용등급구분                 */
    char    gradRscdBec          [  4 + 1]; /* I 신용평점사유 A 신규, B 기존테이블 */

    char    arsCnttYn            [  4 + 1]; /* I 영업외 청약건 여부           */
    char    dkidDiscYn           [  4 + 1]; /* I 두자녀할인건  여부           */
    char    healGoodYn           [  4 + 1]; /* I 건강피보 표준체상품 가입여부 */
    char    resr1Yn              [  4 + 1]; /* I 부양관계확인 유무            */
    char    resr2Yn              [  4 + 1]; /* Reserve2                       */
    char    resr3Yn              [  4 + 1]; /* I 우수고객 대상(셋팅PGM 미확인)*/
    char    resr4Yn              [  4 + 1]; /* I 재정질의서 구분              */
    char    resr5Yn              [  4 + 1]; /* I 고액계약 사전재정U/W 구분    */
    char    resr6Yn              [  4 + 1]; /* I  구분              */
    char    resr7Yn              [  4 + 1]; /* I  구분              */
    char    resr8Yn              [  4 + 1]; /* I  구분              */
    char    resr9Yn              [  4 + 1]; /* I  구분              */
    char    resr10Yn             [  4 + 1]; /* I  구분              */

    char    ctorCustId           [ 10 + 1]; /* I 계약자고객ID                 */
    char    cnttGrpCtid          [ 10 + 1]; /* I 계약자단체고객ID             */
    char    bdctNo               [  9 + 1]; /* I 일괄계약번호                 */
    char    paymCyclCode         [ 10 + 1]; /* I 납입주기코드                 */
    double  sumOrigPrem                  ;  /* I 합계원보험료                 */
    char    workGubun            [  1 + 1]; /* I 작업구분 1:발행 2:접수 3:성립*/
    char    saleChnlCode         [  4 + 1]; /* I 판매채널코드                 */
    char    custCrinMncd         [  4 + 1]; /* I 고객신용정보조치코드         */

    int     rpLines                       ; /* O 심사시유의사항 건수          */
    char    jugmAtntItcd    [ 50][ 10 + 1]; /* O 심사시유의사항 코드          */
    char    jugmAtntItnm    [ 50][255 + 1]; /* O 심사시유의사항 문장          */
    int     resultCode                    ; /* O 처리결과                     */
    char    resultMsg            [100 + 1]; /* O 결과메시지                   */
}   CMNC_udwrNotc;

/******************************************************************************/
/*  데이터 Ownership 관리                                                     */
/*  2002.10.29 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar orgnCode           [  5 + 1]; /* input : 처리대상기관코드         */
    int     gubun                       ; /* input : 처리구분                 */
                                          /*      1: 처리기관코드=로긴기관코드*/
                                          /*      2: 1의 경우 or              */
                                          /*         로긴기관코드=처리기관의 상위기관코드*/
    varchar superYn            [  1 + 1]; /* input : super user(00510, 00710) 처리가능여부*/
    int     resultCode                  ; /* output: 처리결과코드             */
                                          /*         정상:0. 비정상:error code*/
    char    resultFld          [ 50 + 1]; /* output: 에러필드                 */
    char    resultMsg          [100 + 1]; /* output: 결과메시지               */
    varchar loginOrgnCode      [  5 + 1]; /* output: Login 기관코드           */
}   CMNC_ownershipChck;

/******************************************************************************/
/*  일괄계약 조건 체크                                                        */
/*  2003.02.25 by 정철수                                                      */
/******************************************************************************/
typedef struct
{
    varchar bdctNo             [  9 + 1]; /* input : 일괄계약번호             */
    varchar workGubun          [  1 + 1]; /* input : 작업구분                 */
                                          /*      1: 신계약 발행              */
                                          /*      2: 신계약 접수              */
                                          /*      3: 신계약 성립              */
    int     resultCode                  ; /* output: 처리결과코드             */
                                          /*         정상:0. 비정상:error code*/
    char    resultMsg          [100 + 1]; /* output: 결과메시지               */
}   CMNC_bdctNoChck;

/******************************************************************************/
/*  즉시이체 집금 Structure  (CMNC_ImtrTrnfClac_CC)                           */
/*  2003.10.29 by 정현기                                                      */
/******************************************************************************/
typedef struct
{
    varchar    dmndDate             [  8 + 1]; /* I 청구일자                     */
    varchar    dlngManMpno          [  8 + 1]; /* I 처리자사번                   */
    varchar    dlngOrgnCode         [  5 + 1]; /* I 처리기관코드                 */
    varchar    admnNo               [ 20 + 1]; /* I 관리번호                     */
    varchar    admnNoDvsn           [ 10 + 1]; /* I 관리번호구분                 */
    varchar    bsnsDvsnCode         [ 10 + 1]; /* I 업무구분코드                 */
    varchar    bankCode             [  2 + 1]; /* I 은행코드                     */
    varchar    acctNo               [ 15 + 1]; /* I 계좌번호                     */
    double     recvAmt              ;          /* I 입금금액(이체금액)           */
    varchar    dpsrName             [ 50 + 1]; /* I 예금주명                     */
    varchar    dpsrRrno             [ 13 + 1]; /* I 예금주주민번호               */
    varchar    batchPgm             [ 10 + 1]; /* I 연결끊겼을시 온배치명        */
    varchar    cmsCode              [  5 + 1]; /* I cms code                     */
    varchar    wdrcName             [ 20 + 1]; /* I 출금인 성명                  */
    varchar    dpsrDvsn             [  1 + 1]; /* I 예금주실명번호종류(신규) : 0:개인 또는 외국인, 1:사업자, 2:여권번호     */
    varchar    agreDataDvsn         [  1 + 1]; /* I 동의자료구분(신규) : 1:서면, 2:공인인증서, 3:일반인증서, 4:녹취, 5:ARS  */
    varchar    agreDataAddr         [500 + 1]; /* I 동의자료주소(신규) : 각 서버로 부터 파일을 특정할 수 있는 식별 값       */
    varchar    recvYn               [  1 + 1]; /* o 수신여부(time out = n)       */
    double     jNo                  ;          /* o 전문번호                     */
    varchar    imtrNscd             [  4 + 1]; /* o 응답코드                     */
    varchar    imtrBankNscd         [  4 + 1]; /* o 은행응답코드                 */
    varchar    rqstSeqNo            [ 15 + 1]; /* o 신청일련번호(신규)           */
}   CMNC_imtrTrnfClac;

/******************************************************************************/
/*  계약전환조건확인                                                          */
/*  2003.12.19 장두원                                                         */
/*  2005.10.30 모집FP고유번호추가                                             */
/******************************************************************************/
typedef struct
{
    varchar procGubun              [  2+1]; /* I 업무구분       */
    varchar workGubun              [  1+1]; /* I 작업구분       */
    varchar pgmGubun               [  1+1]; /* I 개별일괄구분   */

    varchar polyNo                 [ 12+1]; /* I 증권번호(접수) */

    varchar cnttDate               [  8+1]; /* I 계약일자       */
    varchar saleChnlCode           [ 12+1]; /* I 판매채널코드   */
    varchar paymCyclCode           [ 12+1]; /* I 납입주기코드   */
    double  frpmainPrem                   ; /* I 자유설계주보험료 */
    varchar irkdCodeDtal           [  4+1]; /* I 보종코드_세    */
    varchar irkdCodeItem           [  4+1]; /* I 보종코드_목    */
    varchar clltLpPrno             [  8+1]; /* I 모집FP고유번호 */

    varchar custRoleCode [TCRM_CNT][ 12+1]; /* I 고객역할코드   */
    varchar custId       [TCRM_CNT][ 10+1]; /* I 고객ID         */

    varchar goodRelnCode [CJG_CNT][ 12+1]; /* I 상품관계코드   */
    varchar goodCodeDtal [CJG_CNT][  4+1]; /* I 상품코드_세    */
    varchar goodCodeItem [CJG_CNT][  4+1]; /* I 상품코드_목    */
    double  origPrem     [CJG_CNT]       ; /* I 원보험료       */

    int     oldPolyCnt                    ; /* O 전환전증번건수 */
    varchar oldPolyNo  [ARYCNT_200][  9+1]; /* O 전환전증번     */
    double  nrdMcnt    [ARYCNT_200]       ; /* O 미상각월수     */
    double  cnvsAmt    [ARYCNT_200]       ; /* O 전환금액       */
    double  stplLoanAmt[ARYCNT_200]       ; /* O 약관대출금액   */

    int     resultCode                    ; /* O 처리결과코드 (정상:0 비정상:error code) */
    char    resultMsg              [200+1]; /* O 결과메시지     */

}   CMNC_trsfCond;

/******************************************************************************/
/*  신계약 증권발행 공통출력 부분                                             */
/*  2004.01.09 by 신진혁                                                      */
/*  사용모듈 : CMNC_policyBalhaeng_CC.pc                                      */
/*  관련서비스 : SVncbil001ni40, SVncbil001ni20,                              */
/*               SVncbil001p001, SVncbil002p002                               */
/******************************************************************************/
typedef struct
{

    varchar polyGubunI                     [  4 + 1]; /* input : 증권종류구분(1:개별, 2:통합)*/
    varchar freePlanYnI                    [  4 + 1]; /* input : 자유설계여부(Y, N)          */
    varchar polyNoI                        [ 12 + 1]; /* input : 증번(입력)                  */
    varchar irkdCodeDtalI                  [  4 + 1]; /* input : 보종_세(입력)               */
    varchar irkdCodeItemI                  [  4 + 1]; /* input : 보종_목(입력)               */

    varchar inkdBsnsName     [ARYCNT_001]  [256 + 1]; /* output : 증권명                     */
    varchar irkdCodeDtal     [ARYCNT_001]  [ 12 + 1]; /* output : 보종코드_세                */
    varchar irkdCodeItem     [ARYCNT_001]  [ 12 + 1]; /* output : 보종코드_목                */
    varchar polyNo           [ARYCNT_001]  [ 24 + 1]; /* output : 증권번호                   */
    varchar cnttDate         [ARYCNT_001]  [  8 + 1]; /* output : 계약일자                   */
    varchar exprDate         [ARYCNT_001]  [ 48 + 1]; /* output : 만기일자                   */
    varchar exprAnnt         [ARYCNT_001]  [256 + 1]; /* output : 만기/연금개시구분          */
    varchar collMetdCode     [ARYCNT_001]  [224 + 1]; /* output : 수금방법코드               */
    varchar paymCyclCode     [ARYCNT_001]  [224 + 1]; /* output : 납입주기                   */
    varchar cnttName         [ARYCNT_001]  [ 56 + 1]; /* output : 계약자성명                 */
    varchar rgstNo           [ARYCNT_001]  [ 16 + 1]; /* output : 계약자번호                 */
    varchar jupiBoName       [ARYCNT_001]  [ 56 + 1]; /* output : 주피성명                   */
    varchar jupiBoJumin      [ARYCNT_001]  [ 16 + 1]; /* output : 주피주민번호               */
    varchar jongpiBoName     [ARYCNT_001]  [ 56 + 1]; /* output : 종피성명                   */
    varchar jongpiBoJumin    [ARYCNT_001]  [ 16 + 1]; /* output : 종피주민번호               */
    varchar child1Name       [ARYCNT_001]  [ 56 + 1]; /* output : 자녀1성명                  */
    varchar child1Jumin      [ARYCNT_001]  [ 16 + 1]; /* output : 자녀1주민번호              */
    varchar child2Name       [ARYCNT_001]  [ 56 + 1]; /* output : 자녀2성명                  */
    varchar child2Jumin      [ARYCNT_001]  [ 16 + 1]; /* output : 자녀2주민번호              */
    varchar suikMankiName    [ARYCNT_001]  [ 56 + 1]; /* output : 수익자만기_생존성명        */
    varchar suikMankiJumin   [ARYCNT_001]  [ 16 + 1]; /* output : 수익자만기_생존주민번호    */
    varchar suikIpwonName    [ARYCNT_001]  [ 56 + 1]; /* output : 수익자입원_상해성명        */
    varchar suikIpwonJumin   [ARYCNT_001]  [ 16 + 1]; /* output : 수익자입원_상해주민번호    */
    varchar suikSamangName   [ARYCNT_001]  [ 56 + 1]; /* output : 수익자사망성명             */
    varchar suikSamangJumin  [ARYCNT_001]  [ 16 + 1]; /* output : 수익자사망주민번호         */
    int     kyeYakAge        [ARYCNT_001]           ; /* output : 계약자나이                 */
    int     jupiBoAge        [ARYCNT_001]           ; /* output : 주피나이                   */
    int     jongpiBoAge      [ARYCNT_001]           ; /* output : 종피나이                   */
    int     child1Age        [ARYCNT_001]           ; /* output : 자녀1나이                  */
    int     child2Age        [ARYCNT_001]           ; /* output : 자녀2나이                  */
    int     suikMankiAge     [ARYCNT_001]           ; /* output : 수익자만기_생존나이        */
    int     suikIpwonAge     [ARYCNT_001]           ; /* output : 수익자입원_상해나이        */
    int     suikSamangAge    [ARYCNT_001]           ; /* output : 수익자사망나이             */
    int     samangCnt        [ARYCNT_001]           ; /* output : 수익자사망인원             */
    double  juKyeWolKaip     [ARYCNT_001]           ; /* output : 주계약월납가입금액         */
    double  juKyeWolBo       [ARYCNT_001]           ; /* output : 주계약월납보험료           */
    varchar juKyeWolNapTerm  [ARYCNT_001]  [256 + 1]; /* output : 주계약월납납입기간         */
    varchar juKyeWolBoTerm   [ARYCNT_001]  [256 + 1]; /* output : 주계약월납보험기간         */
    double  juKyeIlsiKaip    [ARYCNT_001]           ; /* output : 주계약일시납가입금액       */
    double  juKyeIlsiBo      [ARYCNT_001]           ; /* output : 주계약일시납보험료         */
    varchar juKyeIlsiNapTerm [ARYCNT_001]  [256 + 1]; /* output : 주계약일시납납입기간       */
    varchar juKyeIlsiBoTerm  [ARYCNT_001]  [256 + 1]; /* output : 주계약일시납보험기간       */
    double  totPrem          [ARYCNT_001]           ; /* output : 합계보험료                 */
    varchar totHan           [ARYCNT_001]  [200    ]; /* output : 합계보험료한글변환         */
    varchar jupiName         [ARYCNT_001]  [112 + 1]; /* output : 주피명                     */
    varchar jongpiName       [ARYCNT_001]  [ 80 + 1]; /* output : 대표종피명                 */
    double  sumOrigPrem      [ARYCNT_001]           ; /* output : 합계원보험료               */
    double  publCnt          [ARYCNT_001]           ; /* output : 증권발행횟수               */
    varchar jiJumName        [ARYCNT_001]  [112 + 1]; /* output : 지점명                     */
    varchar youngUpsoName    [ARYCNT_001]  [112 + 1]; /* output : 영업소명                   */
    varchar lpName           [ARYCNT_001]  [ 24 + 1]; /* output : 설계사명                   */
    varchar hpBsmn           [ARYCNT_001]  [  4 + 1]; /* output : 핸드폰_사업자              */
    varchar hpBrh            [ARYCNT_001]  [  4 + 1]; /* output : 핸드폰_국                  */
    varchar hpDtal           [ARYCNT_001]  [  4 + 1]; /* output : 핸드폰_세부                */
    varchar telNo            [ARYCNT_001]  [ 24 + 1]; /* output : 영업소전화번호             */

    double   spCondCnt       [ARYCNT_001]           ; /* output : 특별조건부인수대상건수     */
    varchar  custRoleName    [ARYCNT_020]  [ 12 + 1]; /* output : 특별조건부인수대상         */
    varchar  spptClsf        [ARYCNT_020]  [224 + 1]; /* output : 부담보부위                 */
    varchar  subMort         [ARYCNT_020]  [224 + 1]; /* output : 면책기간                   */
    varchar  reduTerm        [ARYCNT_020]  [224 + 1]; /* output : 삭감기간                   */
    double   spBugaCnt       [ARYCNT_001]           ; /* output : 특약부가내용건수           */
    varchar  goodBsnsName    [ARYCNT_020]  [256 + 1]; /* output : 특약 상품업무명            */
    double   spInsrAmt       [ARYCNT_020]           ; /* output : 특약 가입급액(보험금)      */
    double   spPrem          [ARYCNT_020]           ; /* output : 특약 보험료                */
    varchar  spNapipTerm     [ARYCNT_020]  [256 + 1]; /* output : 특약 납입기간              */
    varchar  spBoTerm        [ARYCNT_020]  [256 + 1]; /* output : 특약 보험기간              */

    int      resultCode                             ; /* output : 처리결과                   */
    char     resultMsg                     [100 + 1]; /* output : 결과메시지                 */
}   CMNC_policyBalhaeng;

/******************************************************************************/
/*  금융정보조회제한 체크                                                     */
/*  2004.06.17 by 신진혁                                                      */
/*  사용모듈 : CMNC_finaInfoChck_CC.pc                                        */
/*  관련서비스 :                                                              */
/******************************************************************************/
typedef struct
{
    varchar mntnReduDvsn [  8 + 1]; /* input  : 유지감소구분(1:유지, 2:감소, 3:ALL)         */
    varchar custRoleDvsn [  8 + 1]; /* input  : 고객역할구분(1:11/12, 2:21/22/23/24, 3:ALL) */

    /* 화면에서 설계사 고유번호를 입력받는 경우에만 */
    varchar kyinLpPrno   [  8 + 1]; /* input  : KeyIn설계사고유번호       */
    varchar kyinOrgnCode [  8 + 1]; /* input  : KeyIn설계사 소속 기관코드 */

    /* 상황에 따라 고객ID 또는 증권번호 택일 */
    varchar custId       [ 10 + 1]; /* input  : 고객ID                    */
    varchar pynoBdctNo   [ 10 + 1]; /* input  : 증권번호_일괄계약번호     */

    /* resultCode ==  0  일때 정상, 그외 메시지코드 */
    /* resultMsg  == "Y" 일때 정상, 그외 에러메시지 */
    int      resultCode           ; /* output : 처리결과                  */
    char     resultMsg   [256 + 1]; /* output : 결과메시지                */

}   CMNC_finaInfoChck;

/******************************************************************************
 청약서발행전환
 2004.06.23 by 장두원
 사용모듈 : CMNC_srdoRecpCncl_CC
 관련서비스 :
 ******************************************************************************/
typedef struct
{
    varchar bsnsDvsnCode[ 12 + 1]; /* I 업무구분 (NC/RV)           */
    varchar polyNo      [ 12 + 1]; /* I 증권번호                   */
    varchar reviDlngNo  [  4 + 1]; /* I 부활처리번호               */

    /* 즉시이체용 */
    varchar dmndDate    [  8 + 1]; /* I 청구일자                   */
    double  seqNo                ; /* I 일련번호                   */
    varchar imtrNscd    [  4 + 1]; /* I 응답코드                   */
    varchar imtrBankNscd[  4 + 1]; /* I 은행응답코드               */

    int     resultCode           ; /* O 처리결과                   */
    char    resultMsg   [256 + 1]; /* O 결과메시지                 */

}   CMNC_srdoRecpCncl;

/******************************************************************************/
/*  감액대상설정,결재처리 (CMNC_GamackSave_CC)                                */
/*  2005.08.23 by 장선희                                                      */
/******************************************************************************/
typedef struct
{
    varchar gmakDlngDvsn                  [  4 + 1];  /* I : 대상설정(1)/결재(3)구분*/
    varchar pynoBdctNo                    [ 12 + 1];  /* I : 증권(일괄)번호         */
    varchar retnRmtnRtdv                  [ 12 + 1];  /* I : 송금경로구분           */
    varchar rwdtRmtnDate                  [  8 + 1];  /* I : 송금일자               */
    varchar aprvOrgnCode                  [  8 + 1];  /* I : 설정_결재기관코드      */
    varchar aprvManMpno                   [ 12 + 1];  /* I : 설정_결재자사번        */
    varchar retnResnCtrl                  [ 10 + 1];  /* I : 반송사유고객역할코드   */
    varchar splsRiskGrdv                  [  4 + 1];  /* I : 초과위험등급구분       */
    varchar retnResnCode                  [ 12 + 1];  /* I : 반송사유코드           */
    varchar rtrsAddCten                   [200 + 1];  /* I : 반송사유추가내용       */
    varchar custId                        [ 12 + 1];  /* I : 고객ID                 */
    varchar finaOrgnCode                  [  8 + 1];  /* I : 금융기관코드           */
    varchar finaOrgnDvsn                  [  4 + 1];  /* I : 금융기관구분           */
    varchar acctCardNo                    [ 24 + 1];  /* I : 계좌_카드번호          */
    varchar cardVlidEdym                  [  8 + 1];  /* I : 카드유효만료년월       */
    varchar bankBrchCode                  [  8 + 1];  /* I : 은행지점코드           */
    varchar parsTdlgYn                    [  4 + 1];  /* I : 전환처리여부           */
    varchar jugmBsnsDvsn                  [ 12 + 1];  /* I : 심사업무구분           */
    varchar rqstRoutDvsn                  [ 12 + 1];  /* I : 요청경로구분           */
    varchar premIamtIpst                  [ 10 + 1];  /* I : 보험료/보험금입력기준  */
    varchar rwdtStatCode                  [ 12 + 1];  /*   : 반송철회해지상태구분   */
    varchar cnttRcwcUsdv                  [  4 + 1];  /*   : 계약입출금사용구분     */
    double  rcwcRgstHsno                           ;  /*   : 입출금등록이력번호     */
    varchar jugmObctStcd                  [ 12 + 1];  /*   : 심사대상건상태코드     */
    varchar judgDlngTpcd                  [ 12 + 1];  /*   : 심사자처리형태코드     */
    varchar cnttReviDate                  [  8 + 1];  /*   : 계약_부활일자          */
    /* 반송철회품질해지 */
    double  rfstiRrcvPrem                          ;  /*   : 반환_초회실입금보험료  */
    double  raddPaymPrem                           ;  /*   : 반환_추가납입보험료    */
    double  secdPrem                               ;  /*   : 반환_2회이후입금보험료 */
    double  retnInte                               ;  /*   : 반환_반환이자          */
    double  incmTax                                ;  /*   : 반환_소득세            */
    double  rsdnTax                                ;  /*   : 반환_주민세            */
    double  fstiRetnPrem                           ;  /*   : 반환_초회환급보험료    */
    double  totRetnPrem                            ;  /*   : 반환_총환급보험료      */
    double  fstiPrem                               ;  /*   : 반환_초회보험료        */
    /* 비자유설계,자유설계 월납 : freePlanDvsn =0 */
    double  cjgCnt                                 ;  /* I : 가입상품_건수          */
    double  cjgjoinGoodNo      [CJG_CNT]          ;  /* I : 가입상품번호           */
    varchar cjggoodCodeDtal    [CJG_CNT] [  4 + 1];  /* I : 상품코드_세            */
    varchar cjggoodCodeItem    [CJG_CNT] [  3 + 1];  /* I : 상품코드_목            */
    varchar cjggoodRelnCode    [CJG_CNT] [ 10 + 1];  /* I : 상품관계코드           */
    varchar cjgcnttStatCode    [CJG_CNT] [ 10 + 1];  /*   : 계약상태코드           */
    varchar cjgcnttStatDtcd    [CJG_CNT] [ 10 + 1];  /*   : 계약상태상세코드       */
    varchar cjgbefoCtsCode     [CJG_CNT] [ 10 + 1];  /*   : 직전계약상태코드       */
    varchar cjgbefoCtsDtcd     [CJG_CNT] [ 10 + 1];  /*   : 직전계약상태상세코드   */
    varchar cjgpaymCyclCode    [CJG_CNT] [ 10 + 1];  /*   : 납입주기코드           */
    double  cjgpaymTerm        [CJG_CNT]          ;  /*   : 납입기간               */
    double  cjgrealPaymTerm    [CJG_CNT]          ;  /*   : 실납입기간             */
    varchar cjgpaymTermDvsn    [CJG_CNT] [ 10 + 1];  /*   : 납입기간구분           */
    double  cjglmitPyct        [CJG_CNT]          ;  /*   : 한정납회               */
    double  cjginsrTerm        [CJG_CNT]          ;  /*   : 보험기간               */
    double  cjgrealInsrTerm    [CJG_CNT]          ;  /*   : 실보험기간             */
    varchar cjginsrTermDvsn    [CJG_CNT] [ 10 + 1];  /*   : 보험기간구분           */
    varchar cjgcnttDate        [CJG_CNT] [  8 + 1];  /*   : 계약일자               */
    varchar cjgexprDate        [CJG_CNT] [  8 + 1];  /*   : 만기일자               */
    varchar cjgextnDate        [CJG_CNT] [  8 + 1];  /*   : 소멸일자               */
    double  cjginsrAmt         [CJG_CNT]          ;  /*   : 보험금(변경전)         */
    double  cjgorigPrem        [CJG_CNT]          ;  /*   : 원보험료(변경전)       */
    double  cjgprem            [CJG_CNT]          ;  /*   : 보험료(변경전)         */
    double  goodExtraPrem      [CJG_CNT]          ;  /*    할증보험료  할증_cho    */
    varchar cjggoodCodeName    [CJG_CNT] [255 + 1];  /*    상품코드_명             */
    varchar cjgpytrInqrCode    [CJG_CNT] [ 10 + 1];  /*    납입기간조회코드        */
    varchar cjgintrInqrCode    [CJG_CNT] [ 10 + 1];  /*    보험기간조회코드        */
    double  aftrGoodInsrAmt    [CJG_CNT]          ;  /* I : 변경후(입력,재산출)보험금  */
    double  aftrGoodOgpm       [CJG_CNT]          ;  /* I : 변경후(입력,재산출)원보험료*/
    double  aftrGoodPrem       [CJG_CNT]          ;  /*     변경후(입력,재산출)보험료  */
    double  retnPrem           [CJG_CNT]          ;  /*    보험료차액              */
    varchar cjgptpyYn          [CJG_CNT] [  1 + 1];  /* 전기납여부                 */
    double  cjgRepay           [CJG_CNT]          ;  /* 환급율                     */
    double  mainInsrAmt                            ;  /* 주보험금                   */
    double  mainPrem                               ;  /* 주보험료                   */
    double  sumPrem                                ;  /* 합계보험료                 */
    double  sumOrigPrem                            ;  /* 합계원보험료               */
    varchar irkdCodeDtal                  [  4 + 1];  /* 보험종류코드_세            */
    varchar irkdCodeItem                  [  3 + 1];  /* 보험종류코드_목            */
    double  paymTerm                               ;  /* 납입기간                   */
    double  realPaymTerm                           ;  /* 실납입기간                 */
    varchar paymTermDvsn                  [ 10 + 1];  /* 납입기간구분               */
    varchar paymCyclCode                  [ 10 + 1];  /* 납입주기코드               */
    varchar pytrInqrCode                  [ 10 + 1];  /* 납입기간조회코드           */
    varchar intrInqrCode                  [ 10 + 1];  /* 보험기간조회코드           */
    double  stddJoinAmt                            ;  /* 기준가입금액               */
    double  stddCamt                               ;  /* 기준계약고                 */
    double  t01Cvmf                                ;  /* 1회차환산월초              */
    double  t04Cvmf                                ;  /* 4회차환산월초              */
    double  t07Cvmf                                ;  /* 7회차환산월초              */
    double  t13Cvmf                                ;  /* 13회차환산월초             */
    double  t25Cvmf                                ;  /* 25회차환산월초             */
    double  frsyPrem                               ;  /* 초년도보험료               */
    double  seyrPrem                               ;  /* 2차년도보험료              */
    double  totCvmf                                ;  /* 총   환산월초              */
    double  fstiRrcvPrem                           ;  /* 초회실입금보험료           */
    double  addPaymPrem                            ;  /* 추가납입보험료             */
    double  lmitPyct                               ;  /* 한정납회                   */
    double  insrTerm                               ;  /* 보험기간                   */
    double  realInsrTerm                           ;  /* 실보험기간                 */
    varchar insrTermDvsn                  [ 10 + 1];  /* 보험기간구분               */
    double  sumExtraPrem                           ;  /* 할증보험료합계  할증_cho   */
    varchar premXtrcYn                    [  1 + 1];  /* 할증계약 여부 할증_cho     */
    double  paymCnt                                ;  /* 처리납회                   */
    varchar recpNo                        [ 16 + 1];  /* 영수증번호                 */
    /* 보험료할인                 */
    varchar premDsctKdcd                  [ 10 + 1];  /* 보험료할인종류코드         */
    double  premDsctRato                           ;  /* 보험료할인율               */
    double  dsctPrem                               ;  /* 할인보험료                 */
    double  sumDsctPrem                            ;  /* 합계할인보험료             */
    varchar premDsctYn                    [  1 + 1];  /* 보험료할인여부             */
    /* 초회보험료선소급정보       */
    varchar ppayRetrDvsn           [ARY2] [  1 + 1];  /* 선소급구분                 */
    double  ppayRetrCnt            [ARY2]          ;  /* 선소급횟수                 */
    double  ppayRetrPrem           [ARY2]          ;  /* 선소급보험료               */
    double  ppayRetrInte           [ARY2]          ;  /* 선소급이자                 */
    int     freePlanDvsn                           ;  /* 비자유설계:0, 자유설계:1   */
    /* 자유설계 : freePlanDvsn =1 */
    varchar scndPolyNo                    [ 12 + 1];  /* 자유설계증권번호           */
    double  fjgCnt                                 ;  /* 자유설계가입상품_건수      */
    varchar fjggoodCodeDtal    [CJG_CNT] [  4 + 1];  /* 자유설계상품코드_세        */
    varchar fjggoodCodeItem    [CJG_CNT] [  3 + 1];  /* 자유설계상품코드_목        */
    varchar fjggoodRelnCode    [CJG_CNT] [ 10 + 1];  /* 자유설계상품관계코드       */
    varchar fjgcnttStatCode    [CJG_CNT] [ 10 + 1];  /* 자유설계계약상태코드       */
    varchar fjgcnttStatDtcd    [CJG_CNT] [ 10 + 1];  /* 자유설계계약상태상세코드   */
    varchar fjgbefoCtsCode     [CJG_CNT] [ 10 + 1];  /* 자유설계직전계약상태코드   */
    varchar fjgbefoCtsDtcd     [CJG_CNT] [ 10 + 1];  /* 자유설계직전계약상태상세코 */
    varchar fjgpaymCyclCode    [CJG_CNT] [ 10 + 1];  /* 자유설계납입주기코드       */
    double  fjgpaymTerm        [CJG_CNT]          ;  /* 자유설계납입기간           */
    double  fjgrealPaymTerm    [CJG_CNT]          ;  /* 자유설계실납입기간         */
    varchar fjgpaymTermDvsn    [CJG_CNT] [ 10 + 1];  /* 자유설계납입기간구분       */
    double  fjginsrTerm        [CJG_CNT]          ;  /* 자유설계보험기간           */
    double  fjgrealInsrTerm    [CJG_CNT]          ;  /* 자유설계실보험기간         */
    varchar fjginsrTermDvsn    [CJG_CNT] [ 10 + 1];  /* 자유설계보험기간구분       */
    varchar fjgcnttDate        [CJG_CNT] [  8 + 1];  /* 자유설계계약일자           */
    varchar fjgexprDate        [CJG_CNT] [  8 + 1];  /* 자유설계만기일자           */
    varchar fjgextnDate        [CJG_CNT] [  8 + 1];  /* 자유설계소멸일자           */
    double  fjginsrAmt         [CJG_CNT]          ;  /* 자유설계보험금             */
    double  fjgorigPrem        [CJG_CNT]          ;  /* 자유설계원보험료           */
    double  fjgprem            [CJG_CNT]          ;  /* 자유설계보험료             */
    double  fgoodExtraPrem     [CJG_CNT]          ;  /* 자유설계할증보험료  할증_cho */
    varchar fjggoodCodeName    [CJG_CNT] [255 + 1];  /* 자유설계상품코드_명        */
    varchar fjgpytrInqrCode    [CJG_CNT] [ 10 + 1];  /* 자유설계납입기간조회코드   */
    varchar fjgintrInqrCode    [CJG_CNT] [ 10 + 1];  /* 자유설계보험기간조회코드   */
    double  frpmainInsrAmt                         ;  /* 자유설계주보험금           */
    double  frpmainPrem                            ;  /* 자유설계주보험료           */
    double  frpsumPrem                             ;  /* 자유설계합계보험료         */
    double  frpsumOrigPrem                         ;  /* 자유설계합계원보험료       */
    varchar frpirkdCodeDtal               [  4 + 1];  /* 보험종류코드_세            */
    varchar frpirkdCodeItem               [  3 + 1];  /* 보험종류코드_목            */
    double  frppaymTerm                            ;  /* 납입기간                   */
    double  frprealPaymTerm                        ;  /* 실납입기간                 */
    varchar frppaymTermDvsn               [ 10 + 1];  /* 납입기간구분               */
    varchar frppaymCyclCode               [ 10 + 1];  /* 납입주기코드               */
    varchar frppytrInqrCode               [ 10 + 1];  /* 납입기간조회코드           */
    varchar frpintrInqrCode               [ 10 + 1];  /* 보험기간조회코드           */
    double  fsumExtraPrem                          ;  /* 할증보험료합계  할증_cho   */
    varchar frpptpyYn                     [  1 + 1];  /* 전기납여부                 */
    double  frpstddJoinAmt                         ;  /* 기준가입금액               */
    double  frpstddCamt                            ;  /* 자유설계기준계약고         */
    double  ft01Cvmf                               ;  /* 자유설계 1회차환산월초     */
    double  ft04Cvmf                               ;  /* 자유설계 4회차환산월초     */
    double  ft07Cvmf                               ;  /* 자유설계 7회차환산월초     */
    double  ft13Cvmf                               ;  /* 자유설계 13회차환산월초    */
    double  ft25Cvmf                               ;  /* 자유설계 25회차환산월초    */
    double  frpfstiRrcvPrem                        ;  /* 자유설계초회실입금보험료   */
    double  frpaddPaymPrem                         ;  /* 자유설계추가납입보험료     */
    /* 건수 */
    double  cnttRelnCnt                            ;  /* 계약간관계건수             */
    double  custRoleCnt                            ;  /* 계약관계자건수             */
    double  goodCnt                                ;  /* 가입상품  건수             */
    double  acctCnt                                ;  /* 계좌 건수                  */
    /* 초과체크 리턴값 */
    varchar lmitSplsYn                   [  4 + 1] ;  /* O : 가입한도초과여부       */
    double  lmta                                   ;  /* O : 초과건수               */
    varchar excdCustid          [ARY200] [ 12 + 1] ;  /* O : 고객ID                 */
    varchar excdCustname        [ARY200] [ 56 + 1] ;  /* O : 고객명                 */
    varchar excdAssmCode        [ARY200] [ 10 + 1] ;  /* O : 사정항목코드           */
    varchar excdAssmName        [ARY200] [200 + 1] ;  /* O : 사정항목명약칭         */
    double  excdlmitRdex        [ARY200]           ;  /* O : 사정축소확대존재       */
    double  excdPossAmt         [ARY200]           ;  /* O : 초과금액               */
    varchar cnttClafDlyn                 [  4 + 1] ;  /* O : 계약마감후처리여부     */

    varchar jngdDlngDvcd       [CJG_CNT] [  1 + 1];  /* 가입상품별처리구분(예약가입:3) */

    /* 처리결과 */
    int     resultCode                             ;  /* O : 처리결과               */
    char    resultMsg                    [100 + 1] ;  /* O : 결과메시지             */
    CMNC_ModuleReturn  modRc;
}   CMNC_GamackSave;

/******************************************************************************/
/*  감액대상설정취소,결재취소 (CMNC_GamackCancle_CC)                          */
/*  2005.08.23 by 장선희                                                      */
/******************************************************************************/
typedef struct
{
    varchar gmakDlngDvsn        [  4 + 1];  /* I : 대상설정취소(2)/결재취소(4)*/
    varchar pynoBdctNo          [ 12 + 1];  /* I : 증권(일괄)번호         */
    varchar aprvDate            [  8 + 1];  /* I : 결재일자               */
    varchar cnclOrgnCode        [  8 + 1];  /* I : 취소기관코드           */
    varchar cnclManMpno         [ 12 + 1];  /* I : 취소자 사번            */
    varchar parsTdlgYn          [  4 + 1];  /* I : 전환처리여부           */
    varchar jugmBsnsDvsn        [ 12 + 1];  /* I : 심사업무구분           */
    varchar jugmObctStcd        [ 12 + 1];  /*   : 심사대상건상태코드     */
    varchar judgDlngTpcd        [ 12 + 1];  /*   : 심사자처리형태코드     */
    int     resultCode                   ;  /* O : 처리결과               */
    char    resultMsg          [100 + 1] ;  /* O : 결과메시지             */
    CMNC_ModuleReturn  modRc;
}   CMNC_GamackCancle;

/******************************************************************************
 즉시이체결과조회
 2004.07.01 by 장두원
 사용모듈 : CMNC_realTrnfResl_CC
 관련서비스 :
 ******************************************************************************/
typedef struct
{
    /* 입력 */
    char    bankCodeIn   [  3 + 1]; /* 은행코드         */
    char    telgSeqNoIn  [  6 + 1]; /* 전문번호         */

    varchar finaOrgnCode [  3 + 1]; /* 금융기관코드 */
    varchar oldBankCode  [  2 + 1]; /* 구금융기관   */
    char    ntprCode     [  8 + 1]; /* 업체코드     */
    varchar crntDate[8 + 1];         /* 현재(SYSTEM)일자 */
    varchar crntTime[14 + 1];        /* 현재(SYSTEM)시간 */

    /* 조회결과 */
    char    telgSeqNo    [  6 + 1]; /* 원거래 전문번호(Key) */
    char    paymAcctNo   [ 15 + 1]; /* 지급계좌번호         */
    char    recvAcctNo   [ 15 + 1]; /* 입금계좌번호         */
    char    amt          [ 13 + 1]; /* 금액                 */
    char    cmsn         [  9 + 1]; /* 수수료               */
    char    paymSeqNo    [ 15 + 1]; /* 지급번호             */
    char    trnfDate     [  8 + 1]; /* 이체일자             */
    char    trnfTime     [  6 + 1]; /* 이체시각             */
    char    dlngResl     [  4 + 1]; /* 처리결과             */
    char    bankCode     [  2 + 1]; /* 은행코드             */
    char    remark       [115 + 1]; /* 예비                 */
    char    aNswCd       [  4 + 1]; /* 응답코드             */
    char    baNswCd      [  4 + 1]; /* 은행응답코드         */

    /* 결과처리용 자료 */
    varchar imtrStcd     [ 12 + 1]; /* 즉시이체상태코드     */
    varchar reviDlngNo   [  4 + 1]; /* 부활처리번호         */
    varchar polyNo       [ 24 + 1]; /* 증권번호             */
    varchar dlngOrgnCode [  8 + 1]; /* 처리기관코드         */
    varchar dlngManMpno  [  8 + 1]; /* 처리자사번           */
    varchar dmndDate     [  8 + 1]; /* 청구일자             */
    double  seqNo                 ; /* 일련번호             */

    int     resultCode            ; /* 처리결과             */
    char    resultMsg    [256 + 1]; /* 결과메시지           */

}   CMNC_realTrnfResl;

/******************************************************************************
 즉시이체정상접수
 2004.07.01 by 장두원
 사용모듈 : CMNC_realTrnfRecp_CC
 관련서비스 :
 ******************************************************************************/
typedef struct
{
    char    polyNo        [ 9 + 1]; /* 증권번호           */
    char    orgnCode      [ 5 + 1]; /* 처리기관           */
    char    emplNo        [ 8 + 1]; /* 사용자ID           */
    char    dmndDate      [ 8 + 1]; /* 청구일자           */
    char    seqNo         [ 9 + 1]; /* 일련번호           */
    char    trnfDate      [ 8 + 1]; /* 이체일자           */
    char    trnfTime      [ 6 + 1]; /* 이체시각           */
    char    trnfCmsn      [ 9 + 1]; /* 수수료             */
    char    imtrNscd      [ 4 + 1]; /* 응답코드           */
    char    imtrBankNscd  [ 4 + 1]; /* 은행응답코드       */

    int     resultCode            ; /* 처리결과           */
    char    resultMsg    [256 + 1]; /* 결과메시지         */

    CMNC_ModuleReturn*    pmm;

}   CMNC_realTrnfRecp;

/******************************************************************************
 부속서류통합발행
 2005.01.03 by 장두원
 사용모듈 : CMNC_sudoPublAdmn
 관련서비스 :
 ******************************************************************************/
typedef struct
{
    /* in */
    char    polyNo           [ 12+1]; /* 증권번호             */

    /* 기본사항 */
    char    stddDate         [  8+1]; /* 기준일자             */
    char    cnttDate         [  8+1]; /* 계약일자             */
    char    goodClsfCode     [ 12+1]; /* 상품분류코드         */
    char    inkdName         [255+1]; /* 보종명               */
    char    ctorCustName     [ 50+1]; /* 계약자명             */
    char    scndPolyNo       [ 12+1]; /* 자유설계증권번호     */ /* 2005.11.14 장두원 */
    char    clltOrgnCode     [ 12+1]; /* 모집기관코드         */ /* 2008.06.27 김창완 */

    /* 부속서류 출력 */
    int     sudoCnt                 ; /* 부속서류건수         */
    char    sudoFormKdcd [50][ 12+1]; /* 부속서류양식종류코드 */
    char    sudoFormKdnm [50][255+1]; /* 부속서류양식종류명   */

    /* 건강진단제안서 출력 */
    int     mediCnt                 ; /* 건강진단제안서건수   */
    char    custId       [10][ 12+1]; /* 고객ID               */
    char    custName     [10][ 56+1]; /* 고객명               */
    char    mediKindCode [10][ 56+1]; /* 진단종류코드         */
    char    cnttDateM    [10][ 56+1]; /* 계약일자             */
    char    mdobXtrtRscd [10][ 12+1]; /* 진단발췌사유코드     */ /* 2006.06.13 장두원 */

    /* 비교안내문 출력 */
    int     compCnt                 ; /* 비교안내증번건수     */
    char    compPolyNo   [50][ 12+1]; /* 비교안내증번         */

    /* FP본인계약 부속서류 출력 */
    /*char    ctorCustName     [ 56+1]; /* 계약자성명     */ /* 기본사항과 중복 */
    char    ctorRsdnRgno     [ 16+1]; /* 계약자주민번호 */
    char    clltLpPrno       [  8+1]; /* 모집FP고유번호 */
    char    clltLpName       [ 24+1]; /* 모집FP성명     */
    char    clltRsdnRgno     [ 16+1]; /* 모집FP주민번호 */

    /* 투자성향 진단서 출력 */
    char    joinAge          [ 4 +1]; /* 가입연령       */
    char    lpName           [ 24+1]; /* 모집FP성명     */
    char    fundKind         [ 24+1]; /* 펀드종류       */
    int     fundCnt                 ; /* 펀드종류수     */

    /* AML 대상 고객거래확인서 출력(최대2명:계약자,만기수익자) */
    int     amlObjtCnt              ; /* AML대상고객수 */
    char    amlCustId    [10][ 12+1]; /* AML대상고객ID */
    char    amlCustRole  [10][ 10+1]; /* AML대상고객역할코드  */
    char    amlCustDvcd  [10][ 10+1]; /* AML대상고객구분 */

    /* 외국인 추가고지서 확인서 출력(피보험자) */
    int     frgnObjtCnt             ; /* 대상고객수 */
    char    frgnCustName [10][ 56+1]; /* 대상고객명 */

    /* 변액 적합성 고객 확인서 */
    char    stblNatrDgyn     [  4+1]; /* 적합성진단여부 */
    char    incgCnfmYn       [  4+1]; /* 부적합확인유무 */
    char    vrblStdgCode     [ 12+1]; /* 변액적합도코드 */
    char    goodStdgCode     [ 12+1]; /* 상품적합도코드 */
    char    riskDgreClcd     [ 12+1]; /* 위험도분류코드 */
    char    vrblGoodYn       [  4+1]; /* 변액상품여부   */
    char    selfCnttYn       [  4+1]; /* 본인계약여부   */

    /* 무장표 알릴의무사항 */
    char    nfrmNtdtObyn     [  4+1]; /* 무장표알릴의무사항대상 여부 */

    /* 특조서류 자동 미발행*/
    char    spcnMsgYn        [  4+1]; /* 특조서류 자동 미발행 사유문구 alert여부 */

    /* LTC 추가고지서 확인서 출력(피보험자) */
    int     ltcObjtCnt            ; /* LTC_대상건수 */
    char    ltcCustId   [10][10+1]; /* LTC_고객ID */
    char    ltcCustRlcd [10][10+1]; /* LTC_고객역할코드 */

    /* return */
    int     resultCode              ; /* 처리결과       */
    char    resultMsg        [255+1]; /* 결과메시지     */

    CMNC_ModuleReturn *pmm;

}   CMNC_sudoPublAdmn;

/******************************************************************************
 한도초과재정언더라이팅
 2005.09.20 by 장두원
 사용모듈 : CMNC_exLmitFinaUdwr_CC
 관련서비스 :
 ******************************************************************************/
typedef struct
{
    /* 입력변수 */

    varchar  custId       [ 12+1]; /* 주피고객ID        */
    varchar  occpCode     [ 10+1]; /* 직종코드          */
    varchar  drveCatpCode [ 10+1]; /* 운전차종코드      */
    varchar  riskGradCode [ 10+1]; /* 위험등급코드      */
    varchar  frnrDvsnCode [ 10+1]; /* 외국인구분코드    */
    varchar  stddDate     [  8+1]; /* 기준일자          */

    varchar  irkdCodeDtal [  4+1]; /* 보종세            */
    varchar  irkdCodeItem [  3+1]; /* 보종목            */
    varchar  clltLpPrno   [ 12+1]; /* 설계사번호        */
    varchar  clltOrgnCode [  5+1]; /* 모집기관          */
    varchar  ctorCustId   [ 12+1]; /* 계약자고객ID      */

    varchar  saleChnlCode [  2+1]; /* 판매채널코드      */
    varchar  ciInsrYn     [  2+1]; /* CI구분 (Y:일반CI K:전환CI) */

    char     lmspRcntStat [  4+1]; /* 한도초과승인상태  */
    char     workGubun    [  2+1]; /* 작업구분, 발행1, 접수2, 성립3, 160in 4 */

    CMNC_custSumCalc_Outp  *p_custSum_Out;
    CMNC_octmSumCalc_Outp  *p_octmSum_Out;
    CMNC_mediStddXtrt      *p_mediXtrt   ;

    /* 작업용 */
    varchar  v_mediKindCode[12+1]; /* 진단종류코드(한도초과발행용) */
    varchar  v_mediKindName[56+1]; /* 진단종류명  (한도초과발행용) */
    varchar  v_lmspRcntStat[ 4+1]; /* 승인상태코드                 */
    varchar  v_cedeObjtDvsn[ 4+1]; /* 출재대상구분                 */

    /* return */
    int     resultCode                   ; /* 처리결과             */
    char    resultMsg             [255+1]; /* 결과메시지           */

    CMNC_ModuleReturn *pmm;

}   CMNC_exLmitFinaUdwr;

/******************************************************************************/
/*  공통알림메세지                                                            */
/*  2005.11.11 by 김무근                                                      */
/******************************************************************************/
typedef struct
{
    varchar     polyNo          [ 12+1]; /* 증권번호        */
    varchar     orgnCode        [ 8 + 1]; /*알림메세지 수신기관코드                             */
    double      sndRecvDvsn             ; /*SND수신구분(0:개인,1:기관)                          */
    double      rcvRecvDvsn             ; /*RCV수신구분(0:개인,1:기관, 2:잡코드, 3:수신자그룹)  */
    varchar     titl            [80 + 1]; /*제목                                                */
    double      ctenGrad                ; /*내용등급(0:일반,1:긴급)                             */
    double      addDay                  ; /*종료추가일자                                        */
    varchar     url             [256+ 1]; /*URL                                                 */
    varchar     relvBsnsName    [112+ 1]; /*해당업무명                                          */
    varchar     url1            [256+ 1]; /*URL1                                                */
    varchar     relvBsnsNm1     [112+ 1]; /*해당업무명1                                         */
    varchar     input1          [48 + 1]; /*입력1                                               */
    varchar     input2          [48 + 1]; /*입력2                                               */
    varchar     input3          [48 + 1]; /*입력3                                               */
    varchar     input4          [48 + 1]; /*입력4                                               */
    varchar     input5          [48 + 1]; /*입력5                                               */
    varchar     input6          [48 + 1]; /*입력6                                               */
    varchar     input7          [48 + 1]; /*입력7                                               */
    varchar     input8          [48 + 1]; /*입력8                                               */
    varchar     input9          [48 + 1]; /*입력9                                               */
    varchar     input10         [48 + 1]; /*입력10                                              */
    varchar     msgDvsn         [ 4 + 1]; /*메세지구분(1:계약조사)                              */
     /* return */
    double    alrmSqno                   ;  /* 알림 일련번호 -20081208추가 */
    int     resultCode                   ; /* 처리결과             */
    char    resultMsg             [255+1]; /* 결과메시지           */

}   CMNC_alrimMsg;

/******************************************************************************/
/*  송금일자 산출                                                             */
/*  2005.11.14 by 장선희                                                      */
/******************************************************************************/
typedef struct
{
    varchar     bsnsDvsnCode        [10 + 1]; /*I :업무구분코드     */
    varchar     dlngDvsnCode        [10 + 1]; /*I :처리구분         */
    varchar     schdAdmnKdcd        [10 + 1]; /*I :일정관리종류코드 */
    varchar     retnRmtnRtdv        [10 + 1]; /*I :반환송금경로구분 */
    varchar     spclDvsnCode        [10 + 1]; /*I :특이사항구분코드 */
    varchar     rmtnDate            [ 8 + 1]; /*O :송금일자         */
     /* return */
    int     resultCode                   ; /* 처리결과             */
    char    resultMsg             [255+1]; /* 결과메시지           */

}   CMNC_GetRmtnDate;

typedef struct
{
    /* 소속센터반환(0)/I 입고(1)/출고(2)/의약품코드추가(3)삭제(4)구분   */
    varchar     procDvsn        [ 1 + 1];
    varchar     procYm          [ 6 + 1]; /* I 처리일자(yyyymm) */
    double      chexCntrAdno            ; /* I 종진센타관리번호 */
    varchar     drugCode        [10 + 1]; /* I 의약품코드       */
    double      rispCnt                 ; /* I 수검건수     */
    double      crmmEntgQnty            ; /* I 입고수량     */
    double      crmmUseQnty             ; /* I 사용수량     */
    double      crmmCnvsUsqt            ; /* I 환산사용수량 */
    varchar     procMpno        [ 7 + 1]; /* I 처리자사번   */
    varchar     procOrgn        [ 7 + 1]; /* I 처리기관     */
     /* return */
    varchar     endDate         [ 6 + 1]; /* O 마감년월     */
    double      stockAmt                ; /* O 재고잔량     */
    double      chexCntrAdnoO           ; /* O 종진센타관리번호 */
    varchar     rcntDvsn        [ 1 + 1]; /* O 승인구분     */
    int         resultCode              ; /* O 처리결과     */
    char        resultMsg       [255+1];  /* O 결과메시지   */

}   CMNC_procStock;

/******************************************************************************/
/*  신계약 약관대출 이자 구하기                                               */
/*  2006.06.14 by 양용현                                                      */
/******************************************************************************/
typedef struct
{
    varchar polyNo                 [ 9 + 1];  /* I 증권번호           */
    double  prem                           ;  /* I 상품별 보험료      */
    varchar strtDate               [ 8 + 1];  /* I 시작일자           */
    varchar endDate                [ 8 + 1];  /* I 종료일자           */
    varchar irkdCode               [10 + 1];  /* I 보험종류코드_세/목 */
    varchar goodCode               [10 + 1];  /* I 상품종류코드_세/목 */
    varchar cnvsDate               [ 8 + 1];  /* I 계약전환일자       */
    varchar anntDate               [ 8 + 1];  /* I 연금개시일자       */
    varchar cnttDate               [ 8 + 1];  /* I 계약일자           */
    double  joinGoodNo                     ;  /* I 가입상품번호       */
    double  mainGoodNo                     ;  /* I 가입상품번호(주계약) */


    double  goodInte                       ;  /* O 이자금액           */
    int     resultCode                     ;  /* O 처리결과           */
    varchar resultMsg              [255+1] ;  /* O 결과메시지         */
}   STR_calcIntSurn;

/******************************************************************************/
/*  SMS전송                                                                   */
/*  2006.06.21 장두원                                                         */
/******************************************************************************/
typedef struct
{
    /* 요청구분                                                            */
    /* 1:자동         - 수신자,송신자,내용,식별자를 입력하고 자동으로 전송 */
    /* 2:메타자료조회 - 전송을 위한 메타자료만 조회하고 전송은 하지 않음.  */
    /* 3:수동         - 메타자료를 직접 입력하여 전송만 수행함.            */
    char           inqrDvsn             [   2 + 1];     /* 요청구분 (1:자동 2:메타자료조회 3:수동) */

    /* 수신자                               */
    /* ※ 입력방법은 다음 세가지중 선택     */
    /*    고객ID                            */
    /*    사번                              */
    /*    전화번호와 성명                   */
    char           recvCustId           [  10 + 1];     /* 수신자고객ID       */
    char           recvMpno             [   8 + 1];     /* 수신자사번         */
    char           recvHpno             [  14 + 1];     /* 수신자전화번호     */
    char           recvName             [  50 + 1];     /* 수신자성명         */

    /* 송신자 */
    char           senderId             [  10 + 1];     /* 송신자사번         */
    char           sendTitle            [ 128 + 1];     /* 제목               */
    char           message              [  80 + 1];     /* 내용               */

    /* 식별자 (신규업무 추가시 새로 부여받아야 함. 문의:노영진대리) */
    char           formId               [ 128 + 1];     /* 폼아이디           */
    char           smsJobCode           [  10 + 1];     /* Job Code           */


    /* SMS전송용 메타자료 */
    /* 요청구분 1,2 의 경우 모듈내부에서 산출. 3 의 경우 직접입력해야 함. */
    char           reqId                [  16 + 1];     /* 요청번호           */
    char           reqDate              [   8 + 1];     /* 요청일자           */
    int            onLineOrBatch                  ;     /* 1:온라인,2:배치    */
    char           sendType             [   6 + 1];     /* 작업형태           */
  /*char           sendTitle            [ 128 + 1];     /* 제목               */
  /*char           senderId             [  10 + 1];     /* 송신자사번         */
    char           senderName           [  50 + 1];     /* 송신자이름         */
    char           senderDept           [  50 + 1];     /* 송신자부서이름     */
    char           senderDeptCode       [  10 + 1];     /* 송신자부서코드     */
    char           senderBrCode         [  10 + 1];     /* 송신자부서소속국   */
    char           senderPhone          [  16 + 1];     /* 송신자전화번호     */
    char           senderEmail          [ 128 + 1];     /* 송신자이메일주소   */
    int            recvCount                      ;     /* 수신자수           */
    char           sendDataType         [   6 + 1];     /* 전송형태           */
  /*char           formId               [ 128 + 1];     /* 폼아이디           */
    char           scheduleTime         [  12 + 1];     /* 예약시간           */
  /*char           message              [  80 + 1];     /* 전송msg(온라인만)  */
  /*char           smsJobCode           [  10 + 1];     /* Job Code           */
    char           errMsg               [2048 + 1];     /* err Message        */
    int            recvLen                        ;     /* 수신자 list length */
  	char           recvPhone            [ 100 + 1];
    char           pgmID                [  20 + 1];     /* 프로그램id         */
    char           comment              [1000 + 1];     /* 주석               */

    /* 처리결과 */
    int            resultCode                  ; /* 처리결과             */
    char           resultMsg           [255+1] ; /* 결과메시지           */

}   CMNC_sendSMS;

/******************************************************************************/
/*  영업외 시간 청약가능 시스템 구축                                          */
/*  2006.04.14 by 신진혁                                                      */
/******************************************************************************/
typedef struct
{
	  /* input */
	  varchar     rsdnRgstNo            [13 + 1]; /*I :주민번호           */
	  varchar     cnttDate              [ 8 + 1]; /*I :계약일자           */
	  varchar     recpDate              [ 8 + 1]; /*I :접수일자           */
	  varchar     clltOrgnCode          [ 5 + 1]; /*I :모집기관           */
	  varchar     spquTpdvCode          [ 5 + 1]; /*I :특성형태구분코드   */
	  varchar     fnlpPrno              [ 10 +1]; /*I :사원번호           */
	  varchar     inptPoss              [  4+1];  /*I :지연입력가능여부   */
	  varchar     retrYn                [  1+1];  /*I :소급여부           */
	  double      sumPrem                      ;  /*I :합계보험료         */
	  double      sumOrigPrem                  ;  /*I :합계원보험료       */
	  varchar		polyNo                [ 9 + 1]; /* I 증권번호           */


	  /* output */
	  varchar     cnttPossYn            [ 4 + 1]; /*O :가능여부           */
	  double		resultCode                    ; /*O :에러코드           */

}   CMNC_ArsTime;

/******************************************************************************/
/*  발행,접수 서비스 차단여부 검색                                            */
/*  2006.06.29                                                                */
/******************************************************************************/
typedef struct
{
	  varchar		hndcDate              [  8 + 1];   /* I:장애일자   */
	  varchar		onlSrvcName           [ 24 + 1];   /* I:서비스명   */
	  double		seqNo                          ;   /* I:일련번호   */
	  varchar		lastMpno              [ 24 + 1];   /* I:사원번호   */
	  varchar		pgmId                 [ 24 + 1];   /* I:pgm_id     */
	  varchar		saleChnl              [  4 + 1];   /* I:판매채널   */
	  varchar		currTime              [  6 + 1];   /* I:처리시간   */
	  varchar		clltOrgnCode          [  5 + 1];   /* I:모집기관   */

	  varchar		hndcSttm              [  6 + 1];   /* O:시작시간   */
	  varchar		hndcEntm              [  6 + 1];   /* O:종료시간   */
	  varchar		hndcMangYn            [  4 + 1];   /* O:조치여부   */
	  varchar		hndcGudeMsg           [256 + 1];   /* O:처리메세지 */
    int         resultCode                     ;   /* O:처리결과   */
    char        resultMsg             [256 + 1];   /* O:결과메시지 */

}   CMNC_acceptCutoff;

/******************************************************************************/
/*  상품분류 조회                                                             */
/*  2006.06.29                                                                */
/******************************************************************************/
typedef struct
{
	  varchar		irkdCodeDtal          [  8 + 1];   /* I:보험종류코드_세  */
	  varchar		irkdCodeItem          [  8 + 1];   /* I:보험종류코드_목  */
	  varchar		bsnsClsfCode          [ 20 + 1];   /* I:업무분류코드     */
	  varchar		strtDate              [  8 + 1];   /* I:시작일자         */

	  varchar		goodClsfCode          [  6 + 1];   /* O:상품분류코드     */
    int         resultCode                     ;   /* O:처리결과   */
    char        resultMsg             [256 + 1];   /* O:결과메시지 */

}   CMNC_mmnortypSrch;

/******************************************************************************/
/*  RT 처리모듈                                                               */
/*  2006.10.25                                                                */
/******************************************************************************/
typedef struct
{

	  varchar		pynoBdctNo          [ARYCNT_020][ 9 + 1];    /* I : 증권번호         */
	  varchar		reviDlngNo          [ARYCNT_020][ 4 + 1];    /* I : 부활처리번호     */
	  varchar		rwdtDvsn            [ARYCNT_020][ 4 + 1];    /* I : 반송철회해지구분 */
	  varchar               parsTdlgYn          [ARYCNT_020][ 2 + 1];    /* I : 전환처리여부     */
	  varchar               acctChckYn          [ARYCNT_020][ 4 + 1];    /* I : 계좌체크여부     */

    int         resultCode                  ;    /* O:처리결과           */
    char        resultMsg           [256 + 1];   /* O:결과메시지         */

    CMNC_ModuleReturn  modRc;

}   CMNC_RTchck;

/******************************************************************************/
/*  채널코드체크(CMNC_chckChnlCode)                                           */
/*  2008.05.08 이화진                                                         */
/******************************************************************************/
typedef struct
{
    varchar clltLpPrno              [  8+1];        /* I : 모집설계사고유번호 */
    varchar saleChnlCode            [ 10+1];        /* O : 판매채널코드       */
}   CMNC_chckChnlCode;

/******************************************************************************/
/*  일괄계약 승인코드 종류(CMNC_bdctSpclRcnt)                                 */
/*  2009.04.15 신진혁                                                         */
/******************************************************************************/
typedef struct
{
    varchar grpCustId                  [ 12+1];     /* I : 단체고객ID         */
    varchar irkdCodeDtal               [  4+1];     /* I : 보험종류_세        */
    varchar irkdCodeItem               [  4+1];     /* I : 보험종류_목        */
    varchar cnttDate                   [  8+1];     /* I : 계약일자           */

    int     spclCnt                           ;     /* O : 특별승인종류코드건수 */
    varchar spclRcntKdcd   [ARYCNT_020][ 10+1];     /* O : 특별승인종류코드   */
    varchar connDocuNo     [ARYCNT_020][ 20+1];     /* O : 관련서류번호       */
}   CMNC_bdctSpclRcnt;


/******************************************************************************
 부활청약 부속서류통합발행
 2018.05.01 by 강문홍
 사용모듈 : CMRV_sudoPublAdmn
 관련서비스 :
 ******************************************************************************/
typedef struct
{
    /* in */
    char    polyNo           [ 12+1]; /* 증권번호         */
    char    reviDlngNo       [  4+1]; /* 부활처리번호     */
    char    stddDate         [  8+1]; /* 기준일자         */

    /* out */

    /* 부속서류 출력 */
    int     sudoCnt                 ; /* 부속서류건수         */
    char    sudoFormKdcd [50][ 12+1]; /* 부속서류양식종류코드 */
    char    sudoFormKdnm [50][255+1]; /* 부속서류양식종류명   */

    /* 외국인 추가고지서 확인서 출력(피보험자만 존재) */
    int     frgnObjtCnt             ; /* 대상고객수 */
    char    frgnCustName [10][ 56+1]; /* 대상고객명 */

    /* AML 대상 고객거래확인서 출력(최대2명:계약자,만기수익자) */
    int     amlObjtCnt              ; /* AML대상고객수 */
    char    amlCustId    [10][ 12+1]; /* AML대상고객ID */
    char    amlCustRole  [10][ 10+1]; /* AML대상고객역할코드  */
    char    amlCustDvcd  [10][ 10+1]; /* AML대상고객구분 */

    /* LTC 추가고지서 확인서 출력(피보험자) */
    int     ltcObjtCnt            ; /* LTC_대상건수 */
    char    ltcCustId   [10][10+1]; /* LTC_고객ID */
    char    ltcCustRlcd [10][10+1]; /* LTC_고객역할코드 */

    /* return */
    int     resultCode              ; /* 처리결과       */
    char    resultMsg        [255+1]; /* 결과메시지     */

}   CMRV_sudoPublAdmn;

/******************************************************************************
 직종정보 조회
 2019.03.01 by 신계약
 사용모듈 : CMNC_occpBsnsSrch_CC
 관련서비스 :
 ******************************************************************************/
typedef struct
{
    varchar occpBsnsDvsn[  1+1];   /* I 직종_업종구분    */
    varchar occpBsnsCode[ 10+1];   /* I 직종_업종코드    */
    varchar drveCatpCode[ 10+1];   /* I 운전차종코드     */
    varchar stddDate    [  8+1];   /* I 기준일자         */

    varchar riskGradCode[ 12+1];   /* O 위험등급코드     */
    varchar occpBsnsName[160+1];   /* O 직종_업종명      */
    varchar injrOccpCode[ 12+1];   /* O 상해직종코드     */
    varchar injrRiskGrcd[ 12+1];   /* O 상해위험등급코드 */
    varchar injrOccpBnnm[160+1];   /* O 상해직종_업종명  */
    varchar hospGrcd    [ 12+1];   /* O 입원등급코드     */
    varchar riskIdx     [  4+1];   /* O 위험지수         */

    int     resultCode         ;   /* O 처리결과         */
    char    resultMsg   [256+1];   /* O 결과메시지       */

}   CMNC_occpBsnsSrch;


/******************************************************************************
  Function Prototype
*******************************************************************************/

/******************************************************************************/
/*  부활 Module 정의                                                          */
/******************************************************************************/

/* 부활가능조건체크                                                           */
extern  int  CMRV_buhwalGang_CC           (CMRV_buhwalGang *);

/* 부활일자체크                                                               */
extern  int  CMRV_buhwalIja_CC            (CMRV_buhwalIja *);

/* 부활연체이자산출                                                 */
extern  int  CMRV_buhwalYuncheIja_CC      (CMRV_buhwalYuncheIja *);

/* 부활연체보험료산출                                                   */
extern  int  CMRV_buhwalYuncheBohumryo_CC (CMRV_buhwalYuncheBohumryo *);

/* 연체기간산출                                                               */
extern  int  CMRV_buhwalYuncheGigan_CC    (CMRV_buhwalYuncheGigan *);

/******************************************************************************/
/*  반송/철회/해지 Module 정의                                                */
/******************************************************************************/

/* 반송/철회/해지 가능여부 체크                                               */
extern  int  CMNC_BanCheolHaeYn_CC        (CMNC_BanCheolHaeYn *);

/* 신계약 반송보험료산출                                                      */
extern  int  CMNC_NCBanSongBohumryo_CC    (CMNC_NCBanSongBohumryo *);

/* 부활 반송보험료산출                                                        */
extern  int  CMNC_RVBanSongBohumryo_CC    (CMNC_RVBanSongBohumryo *);

/* 중도부가 반송보험료산출                                                    */
extern  int  CMNC_JUBanCholBohumryo_CC    (CMNC_JUBanCholBohumryo *);

/* 상품별 부활연체이자산출                                                    */
extern  int  CMNC_GoodYuncheIja_CC        (CMNC_GoodYuncheIja *);

/* 청약철회보험료산출                                                         */
extern  int  CMNC_CholwhoiBohumryo_CC     (CMNC_CholwhoiBohumryo *);

/* 품질보증해지보험료산출                                                     */
extern  int  CMNC_HaeGiBohumryo_CC        (CMNC_HaeGiBohumryo *);

/* 요청자료저장                                                               */
extern  int  CMNC_OffStr_CC               (CMNC_OffStr *);

/* 요청자료취소                                                               */
extern  int  CMNC_OffCan_CC               (CMNC_OffCan *);

/* 결재자료저장                                                               */
extern  int  CMNC_DcsStr_CC               (CMNC_DcsStr *);

/* 결재자료취소                                                               */
extern  int  CMNC_DcsCan_CC               (CMNC_DcsCan *);

/******************************************************************************/
/*  변액보험 Module 정의                                                      */
/******************************************************************************/

/* 변액보험 계약기본정보                                                      */
extern  int  CMNC_vlnsCnttBaseSerch_CC    (CMNC_vlnsCnttBaseSerch *);

/******************************************************************************/
/*  기관마감 Module 정의                                                      */
/******************************************************************************/

/* 신계약마감자료집계                                                         */
extern  int  CMNC_SinGaeYakMagamSum_CC    (CMNC_GiganMagam *);

/* 부활마감자료집계                                                           */
extern  int  CMRV_buhwalMagamSum_CC       (CMNC_GiganMagam *);

/* 반송마감자료집계                                                           */
extern  int  CMNC_BanSongMagamSum_CC      (CMNC_GiganMagam *);

/* 심사철회마감자료집계                                                       */
extern  int  CMNC_SCholWhoiMagamSum_CC    (CMNC_GiganMagam *);

/* 현지철회마감자료집계                                                       */
extern  int  CMNC_HCholWhoiMagamSum_CC    (CMNC_GiganMagam *);

/* 해지마감자료집계                                                           */
extern  int  CMNC_HaeGiMagamSum_CC        (CMNC_GiganMagam *);

/* 신계약반송취소마감자료집계                                                 */
extern  int  CMNC_NCBanCMagamSum_CC       (CMNC_GiganMagam *);

/* 부활반송취소마감자료집계                                                   */
extern  int  CMNC_RVBanCMagamSum_CC       (CMNC_GiganMagam *);

/* 청약철회취소마감자료집계                                                   */
extern  int  CMNC_CholCMagamSum_CC        (CMNC_GiganMagam *);

/* 가수가불마감자료집계                                                       */
extern  int  CMNC_moreLessMagamSum_CC     (CMNC_GiganMagam *);

/* 품질보증해지취소마감자료집계                                               */
extern  int  CMNC_HaeCMagamSum_CC         (CMNC_GiganMagam *);

/* 해지감액반송취소마감자료집계                                               */
extern  int  CMNC_HaeGamCMagamSum_CC      (CMNC_GiganMagam *);

/* 가망갑을지 동기화 처리                                                     */
extern  int  CMNC_gmSyncPrs_CC            (CMNC_gmSyncPrs *);

/* 갑을지 동기화 처리                                                         */
extern  int  CMNC_gySyncPrs_CC            (CMNC_gySyncPrs *);

/* 일괄계약 발행처리                                                          */
extern  int  CMNC_chungyakBal_CC          (CMNC_chungyakBal *);


/******************************************************************************/
/*  청약서 발행/접수 Module 정의                                              */
/******************************************************************************/
/* 방문수금승인 조회                                                          */
int     CMNC_vistCollRcntSrch_CC        (CMNC_vistCollRcntSrch  *);

/* 부실계약 체크                                                              */
int     CMNC_insoCnttChck_CC            (CMNC_insoCnttChck      *);

/* 만기일자 산출                                                              */
int     CMNC_endDateSrch_CC             (CMNC_endDateSrch       *);

/* 실보험기간 산출                                                            */
int     CMNC_realInsrCalc_CC            (CMNC_realInsrCalc      *);

/* 실납입기간 산출                                                            */
int     CMNC_realPaymCalc_CC            (CMNC_realPaymCalc      *);

/* 설계사가족관계 체크                                                        */
int     CMNC_lpFmlyChck_CC              (CMNC_lpFmlyChck        *);

/* 보험연령산출                                                               */
int     CMNC_insrAgeCalc_CC             (CMNC_insrAgeCalc       *);

/* 보기납기체크                                                               */
int     CMNC_pytrIntrChck_CC            (CMNC_pytrIntrChck      *);

/* 보기개시연령체크                                                           */
int     CMNC_stintAgeChck_CC            (CMNC_stintAgeChck      *);

/* 납입주기체크                                                               */
int     CMNC_paymCyclChck_CC            (CMNC_paymCyclChck      *);

/* 가입연령체크                                                               */
int     CMNC_saleAgeChck_CC             (CMNC_saleAgeChck       *);

/* 가입가능연령체크                                                           */
int     CMNC_entAgeChck_CC              (CMNC_entAgeChck        *);

/* 영업자유설계체크                                                           */
int     CMNC_bussFrplChck_CC            (CMNC_bussFrplChck      *);

/* 최저보험료검색                                                             */
int     CMNC_lowtPremSrch_CC            (CMNC_lowtPremSrch      *);

/* 기준계약고검색                                                             */
int     CMNC_stddAmtSrch_CC             (CMNC_stddAmtSrch       *);

/* 소급 보험료 산출                                                           */
int     CMNC_retrPremCalc_CC            (CMNC_retrPremCalc      *);

/* 단체취급할인율 검색                                                        */
int     CMNC_dsctPremSrch_CC            (CMNC_dsctPremSrch      *);

/* 평균보험요율 산출                                                          */
int     CMNC_getAvgRate_CC              (CMNC_getAvgRate        *);

/* 평균보험료 산출                                                            */
int     CMNC_getAvgPrm_CC               (CMNC_getAvgPrm         *);

/* 평균연령 산출                                                              */
int     CMNC_getAvgAge_CC               (CMNC_getAvgAge         *);

/* 의무부가상품 조립                                                          */
int     CMNC_goodDutyAssm_CC            (CMNC_goodDutyAssm      *,
                                         CMNC_mmnorConSrch      *);

/* 가입한도(상품) 검색                                                        */
int     CMNC_joinLmitSrch_CC            (CMNC_joinLmitSrch      *joinLmitSrch,
                                         CMNC_joinLmitConn       joinLmitConn[]);

/* 보험종류/보험종류판매 검색                                                 */
int     CMNC_mmnorSubSslSrch_CC         (CMNC_mmnorSubSslSrch   *);

/* 보험종류/보험종류판매 검색                                                 */
int     CMNC_mmnorSubSslSrc1_CC         (CMNC_mmnorSubSslSrc1   *);

/* 상품 검색                                                                  */
int     CMNC_mmnorMatSrch_CC            (CMNC_mmnorMatSrch      *);

/* 상품구성 검색                                                              */
int     CMNC_mmnorConSrch_CC            (CMNC_mmnorConSrch      *);

/* 상품구성 검색                                                              */
int     CMNC_mmnorConSrc1_CC            (CMNC_mmnorConSrc1      *);

/* 상품구성 검색                                                              */
int     CMNC_mmnorConSrc2_CC            (CMNC_mmnorConSrc2      *);

/* 상품구성관계 검색                                                          */
int     CMNC_mmnorCol01Srch_CC          (CMNC_mmnorCol01Srch    *);

/* 상품구성관계(의무부가) 검색                                                */
int     CMNC_mmnorCol02Srch_CC          (CMNC_mmnorCol02Srch    *);

/* 상품구성관계 검색(보험종류로 검색)                                         */
int     CMNC_mmnorCol03Srch_CC          (CMNC_mmnorCol03Srch    *);

/* 상품피보험자 검색                                                          */
int     CMNC_mmnorInsSrch_CC            (CMNC_mmnorInsSrch      *);

/* 제도특약부가상품 검색                                                      */
int     CMNC_mmnorRidSrch_CC            (CMNC_mmnorRidSrch      *);

/* 제도특약부가상품(상품별) 검색                                              */
int     CMNC_mmnorRidSrc1_CC            (CMNC_mmnorRidSrc1      *);

/* 보험료유형 검색                                                            */
int     CMNC_mmnorPrtSrch_CC            (CMNC_mmnorPrtSrch      *);

/* 기관정보 검색                                                              */
int     CMNC_uvorg004Srch_CC            (CMNC_uvorg004Srch      *);

/* 사원정보 검색                                                              */
int     CMNC_uvorg010Srch_CC            (CMNC_uvorg010Srch      *);

/* 고객ID로 사원정보 검색                                                     */
int     CMNC_uvorg010Src1_CC            (CMNC_uvorg010Src1      *);

/* 내근사원정보 검색                                                          */
int     CMNC_uvorg006Srch_CC            (CMNC_uvorg006Srch      *);

/* 설계사 정보 검색                                                           */
int     CMNC_smppe001Srch_CC            (CMNC_smppe001Srch      *);

/* 공통통합코드 검색                                                          */
int     CMNC_uvcdm002Srch_CC            (CMNC_uvcdm002Srch      *);

/* 단체정보 검색                                                              */
int     CMNC_csscm060Srch_CC            (CMNC_csscm060Srch      *);

/* 고객가족관계 검색                                                          */
int     CMNC_csscm040Srch_CC            (CMNC_csscm040Srch      *);

/* 산재업종코드 검색                                                          */
int     CMNC_idacBntpCode_CC            (CMNC_idacBntpCode      *);

/* 산재업종코드 검색(단체고객ID로)                                            */
int     CMNC_idacBntpSrch_CC            (CMNC_idacBntpSrch      *);

/* 고객주소 검색                                                              */
int     CMNC_csscm030Srch_CC            (CMNC_csscm030Srch      *);

/* 고객주소 검색                                                              */
int     CMNC_uvmsgcodSrch_CC            (CMNC_uvmsgcodSrch      *);

/* 기계약 합산                                                                */
int     CMNC_custSumCalc_CC             (CMNC_custSumCalc_Inpt  *, \
                                         CMNC_custSumCalc_Outp  *);
int     CMNC_custSumCalcT_CC            (UvT **);

/* 가입한도 검색                                                              */
int     CMNC_octmSumCalc_CC             (CMNC_custSumCalc_Outp   *custSum,
                                         CMNC_octmSumCalc_Inpt   *inpt,
                                         CMNC_octmSumCalc_Outp   *outp   );
int     CMNC_octmSumCalcT_CC            (UvT **);

/* 진단기준 발췌                                                              */
int     CMNC_mediStddXtrt_CC            (CMNC_custSumCalc_Outp  *, \
                                         CMNC_octmSumCalc_Outp  *, \
                                         CMNC_mediStddXtrt      *);
int     CMNC_mediStddXtrtNew_CC         (CMNC_custSumCalc_Outp  *, \
                                         CMNC_octmSumCalc_Outp  *, \
                                         CMNC_mediStddXtrt      *);
/* 청약서 유효기간                                                            */
int     CMNC_srdoVlidTermChek_CC        (CMNC_SrdoVlidTermChek  *);

/* 이미지 스캔 여부 검색                                                      */
int     CMNC_imagScanYnSrch_CC          (CMNC_imagScanYnSrch *);

/* 심사자분배                                                                 */
int     CMNC_udwrDist_CC                (CMNC_udwrDist *);

/* 가입제한안내                                                               */
int     CMNC_joinLmitNotc_CC            (CMNC_joinLmitNotc *);

/* 심사시유의사항                                                             */
int     CMNC_udwrNotc_CC                (CMNC_udwrNotc *);

/* 계약전환확인                                                               */
int     CMNC_trsfCond_CC                (CMNC_trsfCond *);

/* 기관전결                                                                   */
int     CMNC_GikwanJeonkyeul_CC         (CMNC_GikwanJeonkyeul   *);

/******************************************************************************/
/*  기타             Module 정의                                              */
/******************************************************************************/
/* 입력된 문자열이 모두 숫자로 이루어졌는지 확인                              */
int     CMNC_isNumber_CC                (char                   *);

/* 입력된 문자열이 모두 ALPHA CHARACTER로 이루어졌는지 확인                   */
int     CMNC_isAlpha_CC                 (char                   *);

/*  위험대상판정입력                                                          */
int     CMNC_DangerousTargetIn_CC       (CMNC_DangerousTargetIn *);

/*  건진대상자정보조회                                                        */
int     CMMS_ChexTargetExtract_CC       (CMMS_ChexTargetExtract *);

/* VARCHAR2 문자열이 모두 숫자로 이루어졌는지 확인                            */
int     VERIFY_V                        (char                   *);

/* 데이터 Ownership 관리                                                      */
int     CMNC_ownershipChck_CC           (CMNC_ownershipChck     *);

/******************************************************************************/
/*  세금우대 관련    Module 정의                                              */
/******************************************************************************/
/*세금우대당사기계약합산및체크*/
int CMNC_TaxDangsaGigaeakCheck_CC    (CMNC_TaxDangsaGigaeakCheck  *);
/* 세우대응록                       */
int CMNC_taxPrctRgst_CC              (CMNC_taxPrctRgst         *);
/* 세우대삭제                       */
int CMNC_taxPrctRgstCncl_CC          (CMNC_taxPrctRgstCncl     *);

/******************************************************************************/
/*  저축성 비과세 관련    Module 정의                                         */
/******************************************************************************/
/* 저축성 비과세 전송 유형 조회 */
int CMNC_savingTaxFreeSrch_CC     (CMNC_savingTaxFreeSrch *stf);
/* 저축성 비과세 등록 전문 송수신 */
int CMNC_savingTxfrPrctRgst_CC    (CMNC_taxPrctRgst *tpr);
/* 저축성 비과세 등록 삭제 전문 송수신 */
int CMNC_savingTxfrPrctRgstCncl_CC(CMNC_taxPrctRgstCncl *tpr);

/******************************************************************************/
/*  성립 및 보완    Module 정의                                               */
/******************************************************************************/
/* 성립처리     */
int CMNC_sunglibModule_CC  (CMNC_sunglib *);
int CMNC_sunglibChuiso_CC  (CMNC_sunglib *);
/* 보완발췌처리 */
int CMNC_bowanBalche_CC    (CMNC_bowanBalche *);

/******************************************************************************/
/*  증권 발행 Module 정의                                                     */
/******************************************************************************/
/* 증권발행 공통출력 부분 조회                                                       */
int     CMNC_policyBalhaeng_CC         (CMNC_policyBalhaeng  *);

/******************************************************************************/
/* 금융정보조회제한                                                           */
/******************************************************************************/
int CMNC_finaInfoChck_CC (CMNC_finaInfoChck* st);

/******************************************************************************/
/* 청약서발행전환
/******************************************************************************/
int CMNC_srdoRecpCncl_CC (CMNC_srdoRecpCncl* st);


/******************************************************************************/
/*  즉시이체결과조회
/******************************************************************************/
int CMNC_realTrnfResl_CC (CMNC_realTrnfResl* st);

/******************************************************************************/
/*  즉시이체정상접수
/******************************************************************************/
int CMNC_realTrnfRecp_CC (CMNC_realTrnfRecp* st);

/******************************************************************************/
/*  부속서류통합발행
/******************************************************************************/
int CMNC_sudoPublAdmn_CC (CMNC_sudoPublAdmn* st);

/******************************************************************************/
/*  감액대상설정,결재처리 (CMNC_GamackSave_CC)                                */
/******************************************************************************/
int CMNC_GamackSave_CC (CMNC_GamackSave  *);

/******************************************************************************/
/*  감액대상설정취소,결재취소 (CMNC_GamackCancle_CC)                          */
/******************************************************************************/
int CMNC_GamackCancle_CC (CMNC_GamackCancle  *);

/******************************************************************************/
/*  공통알림메세지            (CMNC_alrimMsg_CC)                           */
/******************************************************************************/
int CMNC_alrimMsg_CC (CMNC_alrimMsg  *);

/******************************************************************************/
/*  반환시 송금일자 산출      (CMNC_GetRmtnDate_CC)                           */
/******************************************************************************/
int CMNC_GetRmtnDate_CC (CMNC_GetRmtnDate  *);

/******************************************************************************/
/*  한도초과재정언더라이팅 (CMNC_exLmitFinaUdwr_CC)                           */
/******************************************************************************/
int CMNC_exLmitFinaUdwr_CC (CMNC_exLmitFinaUdwr  *);

/******************************************************************************/
/*  입력값 VERIFY                                                             */
/******************************************************************************/
int VERIFY(char *);

/******************************************************************************/
/*  상품분류 조회                                                             */
/******************************************************************************/
int CMNC_mmnortypSrch_CC(CMNC_mmnortypSrch *);

/******************************************************************************/
/*  부활개별계약 성립처리                                                     */
/******************************************************************************/
int CMRV_sunglibModule_CC(CMRV_sunglib *sunglibModule);

/******************************************************************************/
/*  부활개별계약 성립처리 취소                                                */
/******************************************************************************/
int CMRV_sunglibChuiso_CC(CMRV_sunglib *sunglibChuiso);

/******************************************************************************/
/*  유니버셜 자유납입 여부 확인(보험료청구/입금 달때 사용)                    */
/******************************************************************************/
int CMNC_ulWlifYn_CC(char *, char *, double *, double *);

/******************************************************************************/
/*  유니버셜 자유납입 여부 확인2(보험료청구/입금 달때 사용)                    */
/******************************************************************************/
int CMNC_ulWlifYn2_CC(char *, char *);

/******************************************************************************/
/*  고객 가족관계를 신계약 가족관계로 Conversion                              */
/******************************************************************************/
int ncRenConv(varchar *, varchar *);

/******************************************************************************/
/*  유니버셜 종신계열 여부 확인, 부활보험료 계산시 사용                       */
/******************************************************************************/
int CMNC_ulWlifOk_CC(char *);

/******************************************************************************/
/*  재고관리            (CMNC_procStock_CC)                                   */
/******************************************************************************/
int CMNC_procStock_CC (CMNC_procStock  *);

/******************************************************************************/
/*  심사분배            (CMNC_judgDist_CC)                                    */
/******************************************************************************/
int CMNC_judgDist_CC (CMNC_judgDist  *);

/******************************************************************************/
/*  영업외 시간 청약가능 체크 (CMNC_ArsTime_CC)                               */
/******************************************************************************/
int CMNC_ArsTime_CC                (CMNC_ArsTime *);

/******************************************************************************/
/*  SMS전송 (CMNC_sendSMS_CC)                                                 */
/******************************************************************************/
int CMNC_sendSMS_CC                (CMNC_sendSMS *);

/******************************************************************************/
/*  상품별 약관대출이자산출 (CMNC_calcIntSurn_CC)                             */
/******************************************************************************/
int CMNC_calcIntSurn_CC (STR_calcIntSurn *);

/******************************************************************************/
/*  발행,접수 서비스 차단여부 검색 (CMNC_acceptCutoff_CC)                     */
/******************************************************************************/
int CMNC_acceptCutoff_CC                (CMNC_acceptCutoff *);

/******************************************************************************/
/*  고객접촉이력 로그 입력  (CMNC_csLogInsert)                                */
/******************************************************************************/
void CMNC_csLogInsert                (char *, char *);

/******************************************************************************/
/*  판매구분/채널코드 체크  (CMNC_chckChnlCode_CC)                            */
/******************************************************************************/
int  CMNC_chckChnlCode_CC          (CMNC_chckChnlCode *);

/******************************************************************************/
/*  특별승인종류코드건수 조회  (CMNC_bdctSpclRcnt_CC)                         */
/******************************************************************************/
int CMNC_bdctSpclRcnt_CC(CMNC_bdctSpclRcnt *) ;

/******************************************************************************/
/* 변액 계약 반환 처리 전 미이체 건 존재 여부 체크                            */
/******************************************************************************/
int CMNC_CheckVrblTrnfStat_CC (char * poly_no,int * resultCode,char * resultMsg);

/******************************************************************************/
/* 변액 보험여부 조회                                                         */
/******************************************************************************/
int CMNC_variInsrYn_CC(char * polyNo);

/******************************************************************************/
/* 계약공유메모리 Clear                                                       */
/******************************************************************************/
void   ncClsCnttRsr(void);

/******************************************************************************/
/* 고객 신용정보동의철회신청 정보 조회                                        */
/******************************************************************************/
int  CMNC_cscinwdrSrch_CC(char * cust_id, char * lmitType, char * refuseYn);

/******************************************************************************/
/* HOST NAME으로 SERVER 조회                                                  */
/******************************************************************************/
int hostNameToServer (char  * ipAddress, char  * serverDvsn);

char * ST_LTrim(char *s);
/******************************************************************************
  End of Code
 *****************************************************************************/

 
 ========================
 DENC_SNCUDWPUR_001_SP
 
 PACKAGE         DENC_SNCUDWPUR_001_SP AS
  procedure CALL(
    rqSize           IN OUT nocopy NUMBER,
    rpSize           IN OUT nocopy NUMBER,
    retCode          OUT nocopy NUMBER,
    retMsg           OUT nocopy VARCHAR2,
    flag             IN OUT nocopy NUMBER,
    befo_jugm_csno   OUT nocopy VARCHAR2,
    befo_jugm_sqno   OUT nocopy NUMBER,
    p_poly_no        IN VARCHAR2);
  procedure CLOSE;
END DENC_SNCUDWPUR_001_SP;
PACKAGE BODY         DENC_SNCUDWPUR_001_SP AS
  procedure CALL(
    rqSize           IN OUT nocopy NUMBER,
    rpSize           IN OUT nocopy NUMBER,
    retCode          OUT nocopy NUMBER,
    retMsg           OUT nocopy VARCHAR2,
    flag             IN OUT nocopy NUMBER,
    befo_jugm_csno   OUT nocopy VARCHAR2,
    befo_jugm_sqno   OUT nocopy NUMBER,
    p_poly_no        IN VARCHAR2)
  is begin
    retCode := 0;
    retMsg := 'DENC_SNCUDWPUR_001_SP';
select c.befo_jugm_csno,
         c.befo_jugm_sqno
  into
       befo_jugm_csno,
       befo_jugm_sqno
  from tb_ncaplci1 a
         ,tb_isaplcmr b
        ,tb_ncudwpur c
  where a.poly_no = p_poly_no
     and b.poly_no = a.poly_no
     and b.cust_role_code like '2%'
     and b.end_date = '99991231'
     and b.del_yn = 'N'
     and c.plan_no = a.plan_no
     and c.befo_jugm_csno = b.cust_id
     and c.cpmt_mang_code = 'W66'
     and c.cpmt_resn_code = 'BA15'
group by c.befo_jugm_csno,c.befo_jugm_sqno;
    rpSize := sql%rowcount;
    retCode := -sqlcode;
  exception
    when no_data_found then
      rpSize  := 0;
      retCode := 0;
    when others then
      rpSize  := sql%rowcount;
      retCode := -sqlcode;
      retMsg  :=  sqlerrm;
  end CALL;

  procedure CLOSE is begin
    null;
  end CLOSE;
END DENC_SNCUDWPUR_001_SP;

================================
svncapl100in_function

/*----------------------------------------------------------------------*
 * 내부 FUNCTION 선언부
 *----------------------------------------------------------------------*/
void SVncapl100in_initialValueSet(struct stp_SVncapl100in *stp);
void SVncapl100in_getValue(struct stp_SVncapl100in *stp);
void SVncapl100in_CMNC_acceptCutoff_CC(struct stp_SVncapl100in *stp);
void SVncapl100in_initSet(struct stp_SVncapl100in *stp);
void SVncapl100in_freePlanJudg(struct stp_SVncapl100in *stp);
void SVncapl100in_freePlanRsfn(struct stp_SVncapl100in *stp);
void SVncapl100in_CMNC_joinLmitNotc(struct stp_SVncapl100in *stp);
void SVncapl100in_CMNC_udwrNotc_CC(struct stp_SVncapl100in *stp);
void SVncapl100in_CMNC_judgMainChck(struct stp_SVncapl100in *stp, int freePlanDvsn);
void SVncapl100in_CMNC_cust_octm_med(struct stp_SVncapl100in *stp);
/* void SVncapl100in_GikwanJeonkyeul(struct stp_SVncapl100in *stp); */
void SVncapl100in_dcncApl100in07Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in17Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in02Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in05Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in12Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in04Sp(struct stp_SVncapl100in *stp, int frreePlanDvsn);
void SVncapl100in_dcncApl100in03Sp(struct stp_SVncapl100in *stp, int frreePlanDvsn);
void SVncapl100in_dcncApl100in09Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in14Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in18Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in01Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in10Sp(struct stp_SVncapl100in *stp, int idx, int freePlanDvsn);
void SVncapl100in_dcncApl100in11Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in15Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in69Sp(struct stp_SVncapl100in *stp, int gutmDvsn);
void SVncapl100in_dcncApl100in70Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in20Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in21Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in22Sp(struct stp_SVncapl100in *stp); /* 2006.09.28 박준현 */
void SVncapl100in_dcncApl102vw23Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in13Sp(struct stp_SVncapl100in *stp);
/* void SVncapl100in_chkConst1(struct stp_SVncapl100in *stp); */
void SVncapl100in_trsfCond(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncCmnctrcd02Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_srdoVlidTerm(struct stp_SVncapl100in *stp);
int  SVncapl100in_chckChnlCode(struct stp_SVncapl100in *stp, char *retMsg);
void SVncapl100in_chckSrdoForm(struct stp_SVncapl100in *stp);
void SVncapl100in_inqrLmitRqyn(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in25Sp(struct stp_SVncapl100in *stp); /* 2005.10.13 박준현 */
void SVncapl100in_ddpaCom310vw01Cc(struct stp_SVncapl100in *stp); /* 2006.12.15 이화진 */
void SVncapl100in_102vw25(struct stp_SVncapl100in *stp);
/*void SVncapl100in_setPolyTrnmRtdv(struct stp_SVncapl100in *stp);*/
void SVncapl100in_dencApl100in28Sp(struct stp_SVncapl100in *stp,ST_ANNTINFO *st_anntInfo);
void SVncapl100in_chkRsdn(struct stp_SVncapl100in *stp);
void SVncapl100in_highCust(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in29Sp(struct stp_SVncapl100in *stp); /* 2008.04.14 이화진 */
void SVncapl100in_dencApl100in30Sp(struct stp_SVncapl100in *stp); /* 2008.05.13 이화진 */
void SVncapl100in_dencApl100in33Sp(struct stp_SVncapl100in *stp); /* 2008.10.01 김정한 */
/*void SVncapl100in_crosEducChck(struct stp_SVncapl100in *stp);        2008.09.01 이화진 */
void SVncapl100in_dencSmmfncikg001Sp(struct stp_SVncapl100in *stp); /* 2008.10.01 이화진 */
void SVncapl100in_dencSmmfncikg002Sp(struct stp_SVncapl100in *stp); /* 2011.09.01 박준현 */
void SVncapl100in_dencApl100in34Sp(struct stp_SVncapl100in *stp, int frreePlanDvsn);
void SVncapl100in_dencApl100in35Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in36Sp(struct stp_SVncapl100in *stp);
/* void SVncapl100in_dencSmmentdsa006Sp(struct stp_SVncapl100in *stp); */
void SVncapl100in_dencSmmentdsa008Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_octmTransCntt(struct stp_SVncapl100in *stp); /* 타사 계약 인수 정보 입력 */
void SVncapl100in_dencUisocictt002Sp (struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in39Sp(struct stp_SVncapl100in *stp);/* 2013.03.04 김정한 */
int  SVncapl100in_procSkipYn (char *procDvsn, char *skipYn);
void SVncapl100in_savingTaxFreeSrch(struct stp_SVncapl100in *stp, CMNC_savingTaxFreeSrch *stf,int freePlanDvsn); /* 2008.08.18 김정한 */
void SVncapl100in_dencIncaplstf001Sp(struct stp_SVncapl100in *stp, CMNC_savingTaxFreeSrch *stf); /* 저축성 비과세 가입정보 저장 */
void SVncapl100in_dencApl100in40Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in41Sp(struct stp_SVncapl100in *stp); /* 적합성 유효일자 조회 */
void SVncapl100in_dencApl100in42Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_mdm_processPossCustSrdoPubl (struct stp_SVncapl100in *stp);  /*2013.04.19 mdm 추가*/
void SVncapl100in_dencApl100in44Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dcncApl100in45Sp(struct stp_SVncapl100in *stp);
int  SVncapl100in_asmtAgntSrch(struct stp_SVncapl100in *stp); /* 지정대리신청 대상 조회 */
int  SVncapl100in_incmGurSrch(struct stp_SVncapl100in *stp); /* 소득보장형 상품 대상 조회 */
int  SVncapl100in_setInfo(struct stp_SVncapl100in *stp, double *crntVal);
int  SVncapl100in_calcDate(char *stddDate,int termYear, char *cnvDate);
void SVncapl100in_dencIncamlinf001Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_hsmObjtYn(struct stp_SVncapl100in *stp);
void SVncapl100in_goodOccpYn(struct stp_SVncapl100in *stp);
void SVncapl100in_cpslOtsdFpYn(struct stp_SVncapl100in *stp);  /* 완전판매우수FP 대상건 여부 */

void SVncapl100in_pmmiCnttListSrchCall(struct stp_SVncapl100in *stp);
void SVncapl100in_sendAltkProc(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in52Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in57Sp(struct stp_SVncapl100in *stp, char *coupleYn) ; /* 부부CARE서비스 대상 여부 */
int  SVncapl100in_xcptCompIrkdYn (struct stp_SVncapl100in *stp, char *skipYn); /* 가입설계vs청약 비교 제외보종 여부 */
int  SVncapl100in_makeAnntInfo(struct stp_SVncapl100in *stp,
                              ST_ANNTINFO   *st_anntInfo);
/* 금리연동형 연금정보 조회 */
int  SVncapl100in_dencAnntinfo001Sp(struct _denc_anntinfo_001_sp_in *inSt
                                   ,struct _denc_anntinfo_001_sp_out outSt[]
                                   ,int *cnt);
/* 가입상품연금정보 Setting */
int  SVncapl100in_setAnntInfo  (struct stp_SVncapl100in *stp, ST_ANNTINFO  *st_anntInfo
                               ,struct _denc_anntinfo_001_sp_out outSt[],int  gIdx,int  aIdx,int  dbCnt,int  seqNo);
void SVncapl100in_lifeExpectChck(struct stp_SVncapl100in *stp); /* 보종별 기대여명 체크 */
static char *medMsg(char *mtpfVlutCode, char *custCrinMncd, char *saleChnlCode)  ;
void SVncapl100in_applRqstInfoSave(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in58Sp(struct stp_SVncapl100in *stp,ST_APLREQINF *st_aplreqinf);
int  SVncapl100in_txfrKindChck(struct stp_SVncapl100in *stp, CMNC_savingTaxFreeSrch *stf
                              ,int ii, char *rsltCode, char *rsltMsg); /* 저축성 비과세 유형별 체크 */
int  SVncapl100in_dntnSpctSrch(struct stp_SVncapl100in *stp); /* 기부특약 대상여부 체크 */
void SVncapl100in_getKcredit(struct stp_SVncapl100in *stp);
int SVncapl100in_callKcredit(int telgDvsn, int telgLeng, int mnthCntA,int mnthCntB, char *rsdnRgstNo, char *kciCallIrkdYn, struct stp_SVncapl100in *stp);
int  SVncapl100in_dencSncudwhps002Sp(struct stp_SVncapl100in *stp, int idx, char *cvbnJoinPsyn);
int  SVncapl100in_dencSncudwhps004Sp(struct stp_SVncapl100in *stp, int idx, char *befoFiuwRcyn, char *dvsn);
int  SVncapl100in_CMNC_smtUw(struct stp_SVncapl100in *stp, CMNC_smtUw *smtUw);
void SVncapl100in_dencIncCjgPxr001Sp(struct stp_SVncapl100in *stp);
int  SVncapl100in_CMNC_ImpvPrsnObjtChck(struct stp_SVncapl100in *stp);  /*20170919 고객정보 정비대상*/
void SVncapl100in_CMNC_ispcLmitObjtChck(struct stp_SVncapl100in *stp); /* 감사사항 관련 청약서 제한 대상 체크 */
int  SVncapl100in_dencApl100in60Sp(struct stp_SVncapl100in *stp);  /* 실손할증승인여부 체크 및 실손할증점수 조회 */
void SVncapl100in_cnvnTypeSrch(struct stp_SVncapl100in *stp); /* 간편가입상품분류 조회 */
void SVncapl100in_bigDataXtnsUpdt(struct stp_SVncapl100in *stp); /* 증번 채번 후 빅데이터 정보 설계번호 -> 증번 변경 */
void SVncapl100in_dencUncudwbgp002Sp(struct stp_SVncapl100in *stp, char *planNo);
void SVncapl100in_dencUncudwbgf002Sp(struct stp_SVncapl100in *stp, char *planNo);
void SVncapl100in_dencApl100in61Sp(struct stp_SVncapl100in *stp);
void SVncapl100in_dencApl100in62Sp(struct stp_SVncapl100in *stp, int idx);
int  SVncapl100in_dencApl100in63Sp(struct stp_SVncapl100in *stp, int idx); /* 실손질병형 여부 체크 */
void SVncapl100in_mdm_getPersonUpdate(struct stp_SVncapl100in *stp);
int  SVncapl100in_dencScsscm020_004Sp(struct stp_SVncapl100in *stp, int idx, char *occpBsnsCode);
int SVncapl100in_dencCmncjudg33Sp(struct stp_SVncapl100in *stp, int idx);


=========================
svncapl100in레이아웃

struct  stp_SVncapl100in {
varchar crntDate[8+1];                                  /* 현재(SYSTEM)일자 */
varchar crntCnttDate[8+1];                                  /* 적용계약일자 */
double  dlngCnt;                                                /* 처리건수 */

/* 관리번호채번               */
varchar admnNoDvsn[10+1];                                   /* 관리번호구분 */
double  lastAdmnNo;                                         /* 최종관리번호 */

/* 계약                       */
varchar polyNo[9+1];      /* 증권번호 */  개별청약등록결과DTO.증권번호
varchar irkdCodeDtal[4+1];  /* 보험종류코드_세 */ 
varchar irkdCodeItem[3+1];                               /* 보험종류코드_목 */
varchar cnttStatCode[10+1];                                 /* 계약상태코드 */
varchar cnttStatDtcd[10+1];                             /* 계약상태상세코드 */
varchar befoCtsCode[10+1];                              /* 직전계약상태코드 */
varchar befoCtsDtcd[10+1];                          /* 직전계약상태상세코드 */
varchar frstCnttDate[8+1];                                  /* 최초계약일자 */
varchar cnttDate[8+1];                                          /* 계약일자 */
varchar exprDate[8+1];                                          /* 만기일자 */
varchar extnDate[8+1];                                          /* 소멸일자 */
varchar lapsDate[8+1];                                          /* 실효일자 */
varchar ctorCustId[10+1];                                   /* 계약자고객ID */
varchar cnttGrpCtid[10+1];                              /* 계약시단체고객ID */
double  paymTerm;                                               /* 납입기간 */
double  realPaymTerm;                                         /* 실납입기간 */
varchar paymTermDvsn[10+1];                                 /* 납입기간구분 */
double  lmitPyct;                                               /* 한정납회 */
double  insrTerm;                                               /* 보험기간 */
double  realInsrTerm;                                         /* 실보험기간 */
varchar insrTermDvsn[10+1];                                 /* 보험기간구분 */
varchar paymCyclCode[10+1];                                 /* 납입주기코드 */
double  mainInsrAmt;                                            /* 주보험금 */
double  mainPrem;                                               /* 주보험료 */
double  sumPrem;                                              /* 합계보험료 */
double  sumOrigPrem;                                        /* 합계원보험료 */
double  stddJoinAmt;                                        /* 기준가입금액 */
varchar premDsctYn[1+1];                                  /* 보험료할인여부 */
varchar premApcnDvsn[10+1];                               /* 보험료적용구분 */
varchar cnttConcYm[6+1];                                    /* 계약체결년월 */
varchar prsnCoprSadv[10+1];                             /* 개인법인판매구분 */
varchar prsnCoprPmdv[10+1];                             /* 개인법인인가구분 */
double  anntPaymStag;                                   /* 연금지급개시연령 */
varchar anntPaymStdt[8+1];                              /* 연금지급개시일자 */
varchar clltOrgnCode[5+1];                                  /* 모집기관코드 */
varchar clltLpPrno[8+1];                              /* 모집설계사고유번호 */
varchar cnttUpdtDate[8+1];                                  /* 계약갱신일자 */
varchar pytrInqrCode[10+1];                             /* 납입기간조회코드 */
varchar intrInqrCode[10+1];                             /* 보험기간조회코드 */
varchar bsmnRgstNo[10+1];                                 /* 사업자등록번호 */
varchar saleChnlCode[10+1];                                 /* 판매채널코드 */
varchar ptpyYn[1+1];                                          /* 전기납여부 */
varchar savgInsrYn[1+1];                                  /* 저축성보험여부 */
varchar acdtInsrYn[1+1];                                    /* 상해보험여부 */
varchar ciInsrYn[1+1];                  /* 사랑모아ci보험 = 'Y', 전환ci='K' */
varchar joinStddCode[  1+1];                                /* 가입기준코드 */

/* 자유설계                   */
varchar frpirkdCodeDtal[4+1];                            /* 보험종류코드_세 */
varchar frpirkdCodeItem[3+1];                            /* 보험종류코드_목 */
double  frppaymTerm;                                            /* 납입기간 */
double  frprealPaymTerm;                                      /* 실납입기간 */
varchar frppaymTermDvsn[10+1];                              /* 납입기간구분 */
varchar frppaymCyclCode[10+1];                              /* 납입주기코드 */
double  frpmainInsrAmt;                                         /* 주보험금 */
double  frpmainPrem;                                            /* 주보험료 */
double  frpsumPrem;                                           /* 합계보험료 */
double  frpsumOrigPrem;                                     /* 합계원보험료 */
double  frpstddJoinAmt;                                     /* 기준가입금액 */
varchar frppytrInqrCode[10+1];                          /* 납입기간조회코드 */
varchar frpintrInqrCode[10+1];                          /* 보험기간조회코드 */
double  frpfstiRrcvPrem;                                /* 초회실입금보험료 */
double  frpaddPaymPrem;                                   /* 추가납입보험료 */
varchar frpptpyYn[1+1];                                       /* 전기납여부 */

/* 청약부속정보               */
varchar ftprRmtnDate[8+1];                            /* 초회보험료송금일자 */
varchar ftprRmtnTime[6+1];                            /* 초회보험료송금시각 */
varchar ftprRecvMdcd[10+1];                       /* 초회보험료입금방법코드 */
double  fstiRrcvPrem;                                   /* 초회실입금보험료 */
double  addPaymPrem;                                      /* 추가납입보험료 */
varchar fstiPpayYn[1+1];                                    /* 초회선납여부 */
varchar retrYn[1+1];                                            /* 소급여부 */
varchar lpCtisReln[10+1];                    /* 설계사와계약자/피보험자관계 */
varchar clltRoutDvsn[10+1];                                 /* 모집경로구분 */
varchar orgnArdcYn[1+1];                                    /* 기관전결여부 */
varchar srdoPublDate[8+1];                                /* 청약서발행일자 */
varchar lapsCtorYn[1+1];                                  /* 실효계약자여부 */
varchar prcdOrgnCode[5+1];                                  /* 상위기관코드 */
varchar insrJoinMotv[10+1];                                 /* 보험가입동기 */
varchar cnttConcDate[8+1];                                  /* 계약성립일자 */
varchar spclRcntYn[1+1];                                    /* 특별승인여부 */
varchar befoSrdoRvno[11+1];                           /* 과거청약서접수번호 */
double  mnthIncmAmt;                                          /* 월소득금액 */
varchar ctorDwelTpdv[10+1];                           /* 계약자주거형태구분 */
varchar bdctNo[9+1];                                        /* 일괄계약번호 */
varchar recpDate[8+1];                                          /* 접수일자 */
varchar recpTime[6+1];                                          /* 접수시각 */
varchar rmtnDate[8+1];                                          /* 송부일자 */
varchar arivDate[8+1];                                          /* 도착일자 */
varchar srdoRmtnRtdv[10+1];                           /* 청약서송부경로구분 */
varchar polyTrnmRtdv[10+1];                             /* 증권전달경로구분 */
varchar premIamtIpst[10+1];                        /* 보험료/보험금입력기준 */
varchar bussFrplYn[1+1];                                /* 영업자유설계여부 */
varchar bussClogYm[6+1];                                    /* 영업마감년월 */
varchar lpRlcd[10+1];                                 /* 설계사와의관계코드 */
double  embrPregMcnt;                                     /* 태아임신개월수 */
varchar ctorEdbnReln[10+1];                         /* 계약자만기수익자관계 */
varchar indvBndlDvsn[1+1];                                  /* 개별일괄구분 */
varchar bntpCode[10+1];                                         /* 업종코드 */
varchar grpRiskGrcd[10+1];                              /* 단체위험등급코드 */
varchar recpCnclDate[8+1];                                  /* 접수취소일자 */
varchar mchnCmpgCode[20+1];                                   /* 캠페인코드 */
varchar tmNotcYn[1+1];                                        /* TM고지유무 */
varchar conbObjtCtid[10+1];                               /* 기부대상고객ID */
varchar crosSaleYn[1+1];                                    /* 교차판매여부 */
varchar eddObdv[1+1];                                        /* EDD대상구분 */

/* 계약부속정보               */
varchar mcupCtcvYn[1+1];                                /* 부부계약전환여부 */
varchar anntCnscJnyn[1+1];                          /* 연금전환특약가입여부 */
varchar grttSpcdYn[1+1];                                /* 단체취급특약여부 */
varchar dfmtCnvsYn[1+1];                                    /* 거치전환여부 */
varchar pstpReviYn[1+1];                                    /* 순연부활여부 */
varchar deadPpayScyn[1+1];                        /* 사망선지급특약부가여부 */
varchar taxPrctYn[1+1];                                 /* 세금우대계약여부 */
varchar ctorCrpbYn[1+1];                                /* 계약자법인체여부 */
double  premCoprCgrt;                                   /* 보험료법인부담율 */
varchar psanCnvsDate[8+1];                              /* 개인연금전환일자 */
varchar freePlanYn[1+1];                                    /* 자유설계여부 */
varchar ctorRlnmCfyn[1+1];                            /* 계약자실명확인여부 */
varchar bnfcRlnmCfyn[1+1];                            /* 수익자실명확인여부 */
varchar lffdPaymStdt[8+1];                          /* 생활자금지급개시일자 */
varchar taxPrmnKind[10+1];                              /* 세금우대주체종류 */
varchar txprApcnVlyn[1+1];                          /* 세금우대적용유효여부 */
varchar txprApcnTmyn[1+1];                          /* 세금우대적용해지여부 */
varchar txfrGoodYn[1+1];                                  /* 비과세상품여부 */
varchar cnttCnvsDate[8+1];                                  /* 계약전환일자 */
varchar premXtrcYn[1+1];                                   /* 할증계약 여부 */
double  acatGurtTerm;                                     /* 적립금보증기간 */
double  extdInsrTerm;                                   /* 연장보험기간     */
varchar extdIntrDvsn[10+1];                             /* 연장보험기간구분 */
varchar bnfcAsmtAgyn[1+1];                            /* 수익자지정동의여부 */
double  iccoInsrTerm;                                   /* 증액보험기간     */
varchar iccoIntrDvsn[10+1];                             /* 증액보험기간구분 */

/* 보험료할인                 */
varchar premDsctKdcd[10+1];                           /* 보험료할인종류코드 */
double  premDsctRato;                                       /* 보험료할인율 */
double  dsctPrem;                                             /* 할인보험료 */

/* 보험료할인 추가            */
double  sumDsctPrem;                                      /* 합계할인보험료 */
double  mdsdDsctPrem;                             /* 의료수급권자할인보험료 */

varchar cttPremDsctKdcd      [DSCT_CNT][ 10 + 1]; /* O :할인종류코드      */
double  cttPremDsctRato      [DSCT_CNT]         ; /* O :할인율            */
double  cttDsctPrem          [DSCT_CNT]         ; /* O :할인보험료        */
char    cjgPrdcKdcd     [CJG_CNT][DSCT_CNT][ 10 + 1]; /* O :상품별할인종류코드*/
double  cjgPrdcRato     [CJG_CNT][DSCT_CNT]         ; /* O :상품별할인율      */
double  cjgDsctPrem     [CJG_CNT][DSCT_CNT]         ; /* O :상품별할인보험료  */

/* 초회보험료선소급정보       */
varchar ppayRetrDvsn[PRE][1+1];                               /* 선소급구분 */
double  ppayRetrCnt [PRE];                                    /* 선소급횟수 */
double  ppayRetrPrem[PRE];                                  /* 선소급보험료 */
double  ppayRetrInte[PRE];                                    /* 선소급이자 */

/* 계약간관계                 */
varchar cnttBwtnRlcd[10+1];                               /* 계약간관계코드 */
varchar mainPolyNo[9+1];                                      /* 주증권번호 */
varchar scndPolyNo[12+1];                                     /* 종증권번호 */
varchar udtkCmpnDvsn[1+1];                                  /* 인수회사구분 */

/* 계약관계자역할             */
/* 계약관계자                 */
double  crmCnt                 ;                         /* 계약관계자_건수 */
double  cnttPrtrNo  [CRM]      ;                          /* 계약관계자번호 */
double  insuNo      [CRM]      ;                            /* 피보험자번호 */
varchar custRoleCode[CRM][10+1];                            /* 고객역할코드 */
varchar custId      [CRM][10+1];                                  /* 고객ID */
varchar sex         [CRM][ 1+1];                                    /* 성별 */
double  joinAge     [CRM]      ;                                /* 가입연령 */
double  lfepYear    [CRM]      ;                                  /*기대여명*/
int     fullAge     [CRM]      ;                                    /*만연령*/

double  extraCharge_kind1_K[CRM];              /* 1-사망           할증지수 */
double  extraCharge_kind1_D[CRM];              /* 1-사망           위험지수 */
double  extraCharge_kind2_K[CRM];              /* 2-질병장해       할증지수 */
double  extraCharge_kind2_D[CRM];              /* 2-질병장해       위험지수 */
double  extraCharge_kind3_K[CRM];              /* 3-실손(질병입원) 할증지수 */
double  extraCharge_kind3_D[CRM];              /* 3-실손(질병입원) 위험지수 */
double  extraCharge_kind4_K[CRM];              /* 4-실손(질병통원) 할증지수 */
double  extraCharge_kind4_D[CRM];              /* 4-실손(질병통원) 위험지수 */
double  extraCharge_kind5_K[CRM];              /* 5-CI             할증지수 */
double  extraCharge_kind5_D[CRM];              /* 5-CI             위험지수 */
double  extraCharge_kind7_K[CRM];              /* 7-LTC            할증지수 */
double  extraCharge_kind7_D[CRM];              /* 7-LTC            위험지수 */
double  extraCharge_kind8_K[CRM];              /* 8-2대            할증지수 */
double  extraCharge_kind8_D[CRM];              /* 8-2대            위험지수 */
double  extraCharge_kind9_K[CRM];              /* 9-입원           할증지수 */
double  extraCharge_kind9_D[CRM];              /* 9-입원           위험지수 */

varchar minsRelnCode[CRM][10+1];                        /* 주피와의관계코드 */
varchar mediKindCode[CRM][10+1];                            /* 진단종류코드 */
varchar occpCode    [CRM][10+1];                                /* 직종코드 */
varchar idacBntpCode[CRM][10+1];                            /* 산재업종코드 */
varchar hobyCode    [CRM][10+1];                                /* 취미코드 */
varchar drveCatpCode[CRM][10+1];                            /* 운전차종코드 */
varchar riskGradCode[CRM][10+1];                            /* 위험등급코드 */
varchar wlisDtivObyn[CRM][1+1];                 /* 종신보험의무조사대상여부 */
varchar prevMediObyn[CRM][1+1];                           /* 선진단대상여부 */
varchar mdobXtrtRscd[CRM][10+1];                    /* 진단대상발췌사유코드 */
varchar spclRcntKdcd[CRM][10+1];                        /* 특별승인종류코드 */
double  premCalcApag[CRM];                            /* 보험료산출적용연령 */
varchar strtDate    [CRM][8+1];                                 /* 시작일자 */
varchar splsBodyYn  [CRM][1+1];                               /* 초과체여부 */
varchar frnrDvsnCode[CRM][10+1];                          /* 외국인구분코드 */
varchar hndrDvsnCode[CRM][10+1];                          /* 장애인구분코드 */
/* 계약관계자추가             */
varchar custRrno[CRM][13+1];                                /* 고객주민번호 */
double  jinMediAmt[CRM];                                 /* 진단a~f진단금액 */
varchar extraPerson[CRM][1+1];                               /* 할증체 여부 */
/* 계약관계자추가 - 외국인체류코드 2008.4.14 이화진 */
varchar frnrStayCode[CRM][10+1];                          /* 외국인체류코드 */
varchar frnrRcntYn[CRM][1+1];                         /* 외국인사전승인여부 */
/* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁            */
varchar injrOccpCode[CRM][10+1];                            /* 상해직종코드 */
varchar injrRiskGrcd[CRM][10+1];                        /* 상해위험등급코드 */
/* 2008.07.01 실손가입가능여부 추가, 이화진                                   */
varchar pmmiJoinYn  [CRM][ 1+1];                        /* 실손가입가능여부 */
varchar pmmiDoubJnyn  [CRM][ 1+1];                      /* 실손중복가입여부 */
varchar mediSadrPsyn  [CRM][ 1+1];                    /* 의료수급권보유여부 */

varchar retnPaymDvsn[CRM][10+1];              /* 반송지급구분 1=반송,2=지급 */
varchar retnPaymRscd[CRM][10+1];                        /* 반송지급사유코드 */
varchar stdbSbstKdcd[CRM][10+1];                 /* 표준체_표준하체종류코드 */
varchar b26DChecMediYn[CRM][1+1];               /* 26일이전종진선테진단여부 */
varchar prevPaymPrstYn[CRM][1+1];                       /* 기지급급부체여부 */
varchar mediOpinYn[CRM][1+1];                       /* 소견서첨부요여부(YN) */
varchar acciPratOcv[CRM][10+1];                        /* 가입불가 장해등급 */
varchar obstLmitNotc[CRM][10+1]; /* 신장해분류에 의한 가입제한안내 (2005.03.30 장두원) */
double  calcAmtA01[CRM];                         /* 사정항목코드A01합산금액 */
double  calcAmtC01[CRM];                         /* 사정항목코드C01합산금액 */
double  calcAmtF01[CRM];                         /* 사정항목코드F01합산금액 */
double  calcAmtD01[CRM];                         /* 사정항목코드D01합산금액 */
double  calcAmtG03[CRM];                         /* 사정항목코드G03합산금액 */
double  oocsAmtA08[CRM];                         /* 사정항목코드A08단건금액 */
/* 일반사망 단건합산 (2005.07.23 장두원) */

/*------------------------------------------------------------------------*/
/* 전결한도변경관련 추가항목 (2005.12.23 장두원) */
double  calcAmtD02[CRM];                                 /* 사정항목코드D02 */
double  calcAmtB12[CRM];                                 /* 사정항목코드B12 */
double  oocsAmtA01[CRM];                             /* 사정항목코드A01단건 */
double  oocsAmtD02[CRM];                             /* 사정항목코드D02단건 */
double  oocsAmtB12[CRM];                             /* 사정항목코드B12단건 */
double  assmLmitRdexA01[CRM];                        /* 사정항목축소확대A01 */
double  assmLmitRdexD02[CRM];                        /* 사정항목축소확대D02 */
double  assmLmitRdexB12[CRM];                        /* 사정항목축소확대B12 */
double  lmitAmtA01[CRM];                                     /* 한도금액A01 */
double  lmitAmtD02[CRM];                                     /* 한도금액D02 */
double  lmitAmtB12[CRM];                                     /* 한도금액B12 */
/*------------------------------------------------------------------------*/
varchar lastSlctGrad[CRM][10+1];                            /* 우수고객등급 */
varchar atntPublLmit[CRM][10+1];                 /* 재해저축가 유의고객여부 */

/* 수익자                     */
double  bnfCnt;                                                 /* 수익자수 */
double  deadCnt;                                        /* 사망복수수익자수 */
double  bnfcCnttPrtrNo[BNF];                             /* 계약관계자번호  */
varchar bnfccustRoleCode[BNF][10+1];                        /* 고객역할코드 */
varchar bnfccustId[BNF][10+1];                                    /* 고객ID */
varchar bnfcsex[BNF][1+1];                                          /* 성별 */
double  bnfcjoinAge[BNF];                                       /* 가입연령 */
double  bnfcPrioRank[BNF];                                /* 수익자우선순위 */
double  recvRato[BNF];                                          /* 수령비율 */
varchar bnfcminsRelnCode[BNF][10+1];                    /* 주피와의관계코드 */
varchar bnfccustRrno[BNF][13+1];                            /* 고객주민번호 */
varchar bnfcconbYn[BNF][1+1];                                   /* 기부여부 */
double  conbRato;                                               /* 기부비율 */

/* 가입상품                   */
double  cjgCnt;                                            /* 가입상품_건수 */
double  cjgJoinGoodNo[CJG_CNT];                                 /* 가입상품번호 */
varchar cjggoodCodeDtal[CJG_CNT][4+1];                           /* 상품코드_세 */
varchar cjggoodCodeItem[CJG_CNT][3+1];                           /* 상품코드_목 */
varchar cjggoodRelnCode[CJG_CNT][10+1];                         /* 상품관계코드 */
varchar cjgcnttStatCode[CJG_CNT][10+1];                         /* 계약상태코드 */
varchar cjgcnttStatDtcd[CJG_CNT][10+1];                     /* 계약상태상세코드 */
varchar cjgbefoCtsCode[CJG_CNT][10+1];                      /* 직전계약상태코드 */
varchar cjgbefoCtsDtcd[CJG_CNT][10+1];                  /* 직전계약상태상세코드 */
varchar cjgpaymCyclCode[CJG_CNT][10+1];                         /* 납입주기코드 */
double  cjgpaymTerm[CJG_CNT];                                       /* 납입기간 */
double  cjgrealPaymTerm[CJG_CNT];                                 /* 실납입기간 */
double  cjgLmitPyct[CJG_CNT];                                 /* 상품별한정납회 */
varchar cjgpaymTermDvsn[CJG_CNT][10+1];                         /* 납입기간구분 */
double  cjginsrTerm[CJG_CNT];                                       /* 보험기간 */
double  cjgrealInsrTerm[CJG_CNT];                                 /* 실보험기간 */
varchar cjginsrTermDvsn[CJG_CNT][10+1];                         /* 보험기간구분 */
varchar cjgcnttDate[CJG_CNT][8+1];                                  /* 계약일자 */
varchar cjgexprDate[CJG_CNT][8+1];                                  /* 만기일자 */
varchar cjgextnDate[CJG_CNT][8+1];                                  /* 소멸일자 */
double  cjginsrAmt[CJG_CNT];                                          /* 보험금 */
double  cjgorigPrem[CJG_CNT];                                       /* 원보험료 */
double  goodExtraPrem[CJG_CNT];                                   /* 할증보험료 */
double  fixdAddAmt[CJG_CNT];                                  /* 정액부가할인료 */
double  sumExtraPrem;                                     /* 할증보험료합계 */
double  cjgprem[CJG_CNT];                                             /* 보험료 */
double  cjgRepay[CJG_CNT];                                            /* 환급율 */
varchar cjgptpyYn[CJG_CNT][1+1];                                  /* 전기납여부 */
/* 가입상품추가               */
varchar cjggoodCodeName[CJG_CNT][255+1];                         /* 상품코드_명 */
varchar cjgpytrInqrCode[CJG_CNT][10+1];                     /* 납입기간조회코드 */
varchar cjgintrInqrCode[CJG_CNT][10+1];                     /* 보험기간조회코드 */
varchar cjgChldAgeStdd [CJG_CNT][10+1];                         /* 자녀연령기준 */
varchar maspDvdlYn     [CJG_CNT][1+1];                      /* 주특구분처리여부 */
varchar mascObjtGdyn   [CJG_CNT][1+1];              /* 중도부가특약대상상품여부 */
varchar cjgAnntYn      [CJG_CNT][1+1];                          /* 연금가입여부 */

/* 연금정보추가 */
/* 주계약 */
varchar sintStagIqcd[10+1];                      /* 제2보기개시연령조회코드 */
varchar tintStagIqcd[10+1];                      /* 제3보기개시연령조회코드 */
varchar sintStrtDvsn[10+1];                              /* 제2보기개시구분 */
double  sintStrtPrsn;                                    /* 제2보기개시시점 */
varchar tintStrtDvsn[10+1];                              /* 제3보기개시구분 */
double  tintStrtPrsn;                                    /* 제3보기개시시점 */
/* 특약 */
varchar cjgsintStagIqcd[10+1];                   /* 제2보기개시연령조회코드 */
varchar cjgtintStagIqcd[10+1];                   /* 제3보기개시연령조회코드 */
varchar cjgsintStrtDvsn[10+1];                           /* 제2보기개시구분 */
double  cjgsintStrtPrsn;                                 /* 제2보기개시시점 */
varchar cjgtintStrtDvsn[10+1];                           /* 제3보기개시구분 */
double  cjgtintStrtPrsn;                                 /* 제3보기개시시점 */
double  cjganntPaymStag;                                /* 연금지급개시연령 */
varchar cjganntPaymStdt[8+1];                           /* 연금지급개시일자 */

double  annCnt;                                            /* 복수연금 건수 */

double  mcntSpcdDvsn[DPS];                          /* 주.특구분(0:주,1:특) */
double  anntJoinGdno[DPS];                              /* 연금가입상품번호 */
varchar plrlAnpyCode[DPS][3+1];                         /* 복수연금지급코드 */
double  acatDvsnRato[DPS];                     /* 복수연금지급형태별 지급율 */
varchar anntTypeCode[DPS][10+1];                        /* 연금지급형태코드 */
varchar goodTypeDvcd[DPS][10+1];                        /* 상품유형구분코드 */
varchar dcsnGupyTmdv[DPS][10+1];                    /* 확정보증지급기간구분 */
double  gurtPaymTerm[DPS];                              /* 확정보증지급기간 */
double  frstCrtyAdpr[DPS];                          /* 초기집중형추가지급율 */
varchar scndAnpyIqcd[DPS][10+1];                     /* 제2연금지급조회코드 */
double  anntCtrlRato[DPS];                                  /* 연금조정비율 */
varchar anntCtrtYn  [DPS][10+1];                            /* 연금집중여부 */
varchar anntSptpDvsn[DPS][10+1];                        /* 연금특이유형구분 */
double  anntSptpInfo[DPS];                              /* 연금특이유형정보 */

double  anntCtrtTerm[2];                             /* 주특약_연금집중기간 */
double  mcscCtrlRato[2];                             /* 주특약_연금조정비율 */
double  anntLfepYear   ;                                    /* 연금기대여명 */

/* 할증 가입상품 */
char    xtrc_kind[CJG_CNT][ARY7][10+1];                          /* IO:할증종류 */
double  xtrc_indx[CJG_CNT][ARY7];                                /* I :할증지수 */

/* 자유설계가입상품           */
double  fjgCnt;                                    /* 자유설계가입상품_건수 */
varchar fjggoodCodeDtal[FRP_CNT][4+1];                   /* 자유설계상품코드_세 */
varchar fjggoodCodeItem[FRP_CNT][3+1];                   /* 자유설계상품코드_목 */
varchar fjggoodRelnCode[FRP_CNT][10+1];                 /* 자유설계상품관계코드 */
varchar fjgcnttStatCode[FRP_CNT][10+1];                 /* 자유설계계약상태코드 */
varchar fjgcnttStatDtcd[FRP_CNT][10+1];             /* 자유설계계약상태상세코드 */
varchar fjgbefoCtsCode[FRP_CNT][10+1];              /* 자유설계직전계약상태코드 */
varchar fjgbefoCtsDtcd[FRP_CNT][10+1];            /* 자유설계직전계약상태상세코 */
varchar fjgpaymCyclCode[FRP_CNT][10+1];                 /* 자유설계납입주기코드 */
double  fjgpaymTerm[FRP_CNT];                               /* 자유설계납입기간 */
double  fjgrealPaymTerm[FRP_CNT];                         /* 자유설계실납입기간 */
varchar fjgpaymTermDvsn[FRP_CNT][10+1];                 /* 자유설계납입기간구분 */
double  fjginsrTerm[FRP_CNT];                               /* 자유설계보험기간 */
double  fjgrealInsrTerm[FRP_CNT];                         /* 자유설계실보험기간 */
varchar fjginsrTermDvsn[FRP_CNT][10+1];                 /* 자유설계보험기간구분 */
varchar fjgcnttDate[FRP_CNT][8+1];                          /* 자유설계계약일자 */
varchar fjgexprDate[FRP_CNT][8+1];                          /* 자유설계만기일자 */
varchar fjgextnDate[FRP_CNT][8+1];                          /* 자유설계소멸일자 */
double  fjginsrAmt[FRP_CNT];                                  /* 자유설계보험금 */
double  fjgorigPrem[FRP_CNT];                               /* 자유설계원보험료 */
double  fgoodExtraPrem[FRP_CNT];                          /* 자유설계할증보험료 */
double  fjgprem[FRP_CNT];                                     /* 자유설계보험료 */
varchar fjgptpyYn[FRP_CNT][1+1];                                  /* 전기납여부 */
/* 자유설계가입상품추가       */
varchar fjggoodCodeName[FRP_CNT][255+1];                         /* 상품코드_명 */
varchar fjgpytrInqrCode[FRP_CNT][10+1];                     /* 납입기간조회코드 */
varchar fjgintrInqrCode[FRP_CNT][10+1];                     /* 보험기간조회코드 */

/* 보험검진대상               */
varchar mediObjtCtid[10+1];                               /* 검진대상고객ID */
varchar mediObjtStcd[10+1];                             /* 진단대상상태코드 */
varchar mediDate[8+1];                                          /* 진단일자 */
varchar prevMediYn[1+1];                                      /* 선진단여부 */
varchar lastPublDate[8+1];                                  /* 최종발행일자 */
double  pvctMediAmt;                                      /* 기계약진단금액 */
varchar bsnsDvsnCode[10+1];                                 /* 업무구분코드 */
varchar causPyno[9+1];                                      /* 원인증권번호 */
varchar mediExecYn[1+1];                                    /* 진단실시여부 */
double  ndsnMediCost;                                     /* 미확정진단비용 */
varchar vistMediExyn[1+1];                              /* 방문진단추출여부 */
double  medoPublCnt;                                      /* 진단서발행횟수 */
varchar rqstDate[8+1];                                          /* 요청일자 */
varchar mediTmltDate[8+1];                                  /* 진단시한일자 */
varchar chrgOffcCode[5+1];                                /* 담당영업소코드 */
double  mdorAdno;                                       /* 검진기관관리번호 */
varchar medoRmtnDate[8+1];                                /* 진단서송부일자 */
double  admnChecAdno;                               /* 관리종진센타관리번호 */
double  chafMdorAdno;                             /* 변경후검진기관관리번호 */
varchar medoRecpStcd[10+1];                           /* 진단서접수상태코드 */
varchar pmdoRecpStcd[10+1];                       /* 직전진단서접수상태코드 */
varchar othrCondName[200+1];                                  /* 기타조건명 */
varchar cnttPrrmYm[6+1];                                    /* 계약예정년월 */
double  etdrAdno;                                         /* 촉탁의관리번호 */

/* 계약입출금등록정보         */
varchar crwcustId[CRW][10+1];                                     /* 고객ID */
varchar finaOrgnCode[CRW][3+1];                             /* 금융기관코드 */
varchar finaOrgnDvsn[CRW][1+1];                             /* 금융기관구분 */
varchar acctCardNo[CRW][20+1];                             /* 계좌_카드번호 */
varchar cardVlidEdym[CRW][6+1];                         /* 카드유효만료년월 */
varchar bankBrchCode[CRW][10+1];                            /* 은행지점코드 */
varchar trnfHopeDd[CRW][2+1];                                 /* 이체희망일 */
varchar dlngOrgnCode[CRW][5+1];                             /* 처리기관코드 */
varchar cnttRcwcUsdv[4][2+1];                  /* 2회이후계약입출금사용구분 */
varchar dtorCtorReln[10+1];                      /* 예금주와계약자와의 관계 */
varchar acctCardRrno[CRW][13+1];                          /* 예금주주민번호 */

/* 보험료수금정보             */
varchar grpCnttAdno[12+1];                              /* 단체계약관리번호 */
varchar premPaymDvsn[1+1];                                /* 보험료납입구분 */
varchar collMetdCode[10+1];                                 /* 수금방법코드 */
varchar collOrgnCode[5+1];                                  /* 수금기관코드 */
varchar collLpPrno[8+1];                              /* 수금설계사고유번호 */
varchar addrKdcd[10+1];                                     /* 주소종류코드 */
varchar aupyOnceGryn[1+1];                          /* 자동납입일시유예여부 */
varchar paymGracYn[1+1];                                    /* 납입유예여부 */
varchar aulnPaymYn[1+1];                                /* 자동대출납입여부 */
varchar lastRecpDate[8+1];                                  /* 최종영수일자 */
double  lastPaymCnt;                                            /* 최종납회 */
varchar lastPaymYm[6+1];                                    /* 최종납입년월 */
varchar lastRecvDldt[8+1];                              /* 최종입금처리일자 */
/* 보험료수금정보추가         */
varchar zipNo1[3+1];                                     /* 수금지우편번호1 */
varchar zipNo2[3+1];                                     /* 수금지우편번호2 */
varchar zipNo3[3+1];                                     /* 수금지우편번호3 */

double  t01Cvmf;                                           /* 1회차환산월초 */
double  totCvmf;                                           /* 총   환산월초 */

varchar anntDvcd[10+1];                                     /* 연금구분코드 */

double  fndCnt;                                                 /* 펀드개수 */
varchar fundCode[FUN][5+1];                                     /* 펀드코드 */
double  joinRato[FUN];                                      /* 펀드가입비율 */
varchar autoRedvCycl[5+1];                                /* 자동재배분주기 */
varchar ofwkLp[1+1];                                  /* 내근설계사계약여부 */

double  gutmfndCnt;                                /* 보증기간이후 펀드개수 */
varchar gutmfundCode[FUN][5+1];                    /* 보증기간이후 펀드코드 */
double  gutmjoinRato[FUN];                     /* 보증기간이후 펀드가입비율 */

double  kospFndCnt;                                    /* Kospi연계펀드개수 */
varchar kospFundCode[FUN][5+1];                        /* Kospi연계펀드코드 */
double  kospJoinRato[FUN];                         /* Kospi연계펀드가입비율 */

varchar bobncDvsn[1+1];                        /* 방카슈랑스 Web, 전문 구분 */
varchar drtgEssnInyn[1+1];                              /* 사차필수조사여부 */
varchar srdoVlidTerm[8+1];                                /* 청약서유효기간 */

/* 계약전환 관련 */
int     oldPolyCnt;                                     /* O 전환전증번건수 */
varchar oldPolyNo[ARYCNT_200][9+1];                         /* O 전환전증번 */
double  nrdMcnt[ARYCNT_200];                                /* O 미상각월수 */
double  cnvsAmt[ARYCNT_200];                                  /* O 전환금액 */
double  stplLoanAmt[ARYCNT_200];                          /* O 약관대출금액 */
double  sum_stplAmt;                                    /* 약관대출금액합계 */

varchar inqrLmitRqyn[1+1];                         /* 금융정보조회 제한여부 */
varchar asmtOfdy[4+1];                                        /* 지정휴무일 */
varchar dutyDiscYn[1+1];                                 /* 효할인 대상여부 */
double  dutyDiscRato;                                           /* 효할인율 */
double  dutyDiscPrem;                                     /* 효할인대상금액 */
varchar dkidDiscYn[1+1];                         /* 두자녀계약할인 대상여부 */
double  dkidDiscRato;                                   /* 두자녀계약할인율 */
double  dkidDiscPrem;                             /* 두자녀계약할인대상금액 */
varchar ExtrDiscYn[1+1];                          /* 단체취급(위풍당당)여부 */
double  ExtrDiscRato;                           /* 단체취급(위풍당당)할인율 */
double  ExtrDiscPrem;                         /* 단체취급(위풍당당)할인금액 */
varchar healGoodYn[1+1];                     /* 건강피보 표준체상품가입여부 */
varchar idreGoodType[1+1];                              /* 지수연계상품형태 */
double  scidCnntTerm;                                   /* 주가지수연동기간 */
varchar vlnsYn[1+1];                                        /* 변액보험여부 */
int     pmmiXtrcScre;                                       /* 실손할증점수 */

int     pyxpGoodCnt;                             /* O : 납면상품건수        */
int     pyxpJngdNo  [PYXP_CNT];                  /* O : 납면가입상품번호    */
int     pyxpTagtGdno[PYXP_CNT][CJG_CNT];             /* O : 납면대상상품번호    */

int     hCustCnt ;
varchar hCustId     [10][10+1];
double  highAmt     [10] ;                                 /* 최고 초과금액 */
varchar highAssmItem [10][10+1];                  /* 최고 초과금액 사정코드 */
#ifdef CRDT_OPEN
/* 신용정보조회 관련 2006.05.02 신진혁 */
varchar crdtGrdv[4+1];                                      /* 신용등급구분 */
varchar gradRscdBec[4+1];  /* 신용평점사유(A는 신규조회, B는 기존테이블조회 */
#endif

varchar taxSkipYn[1+1];                                /* 세금우대 SKIP여부 */
varchar amMemberYn[1+1];                               /* AM채널 소속여부   */

varchar minInsTerm[1+1];                            /* 최저보증기간선택여부 */
varchar custCrinMncd[4+1];                          /* 고객신용정보조치코드 */
char custCrinMsg [120+1];                           /* 진단결과메세지       */

/* 전환전계약 비뇨기계질환보장여부 추가 (2010.01.08 김정한)                 */
varchar urinDsasGryn [1+1];                          /* 비뇨기질환 보장여부 */

/* 계약조사필수조사+뇨검사 추가 (2010.09.07 김정한)                         */
varchar urinMdobYn   [1+1];            /* 계약조사필수조사+뇨검사 대상 여부 */
double  autoCvotTgpr ;                             /*오토전환옵션목표수익률 */

varchar suitImagAdno [16+1];   /* 적합성 이미지 관리번호(2011.03.02 김정한) */

int     qlguTrmtCnt ;                                   /* 품질보증해지건수 */
varchar qlguTrmtMsg [100+1];                          /* 품질보증해지메세지 */

varchar compDocTagtYn [1+1];   /* 비교안내문 미발행 기간 중 신계약 존재여부 */
varchar premiumAccmYn [1+1];                            /* 고액적립선택여부 */
double  haacDiscPrem[2];                            /* 고액적립할인대상금액 */
double  embrPsct ;                                            /* 태아인원수 */
double  udtkDlngSqno;                                   /* 인수처리일련번호 */

varchar txfrSkipYn[1+1];                    /* 저축성 비과세 처리 SKIP 여부 */
varchar txfrYn[1+1];                             /* 저축성 비과세 대상 여부 */
varchar txfrBankDvcd[1+1];                  /* 저축성 비과세 은행 처리 구분 */

double  minGurtTerm;                                        /* 최저보증기간 */

double  mainOrigPrem;                        /* 주계약원보험료(president)   */
double  connMcntPrem;                        /* 관련주계약보험료(president) */

varchar rrfdCnvsRqyn[1+1];                          /* 양육자금전환신청여부 */
varchar asmtAgntRqyn[1+1];                            /* 지정대리인신청여부 */
varchar incmGurGdyn [1+1];                            /* 소득보장형상품여부 */
varchar hsmObjtYn   [1+1];                 /* 고액청약서발행 관리 대상 여부 */
varchar occpPossYn   [1+1];          /* 가입유의 직업 여부 */
varchar cpslOtsdFpYn[1+1];                      /* 완전판매우수FP 대상 여부 */
varchar scbcRoutDvsn[1+1];                           /* SC제일은행 경로구분 */

varchar finaUwDvsn[10+1];                            /* 재정질의서 발행구분 */
double  maxSumCalcAmt;                       /* 재정U/W - 일반사망합산 최대 */
double  maxOocsCalcAmt;                      /* 재정U/W - 일반사망합산 최대 */
double  maxOthrPrstTota;                     /* 재정U/W - 타사사망합산 최대 */
varchar preFinaUwyn[10+1];                          /* 사전재정U/W 대상구분 */

double  planNo;                                                 /* 설계번호 */
varchar callRoutDvsn[10+1];                                 /* 호출경로구분 */
varchar tablTtrxYn[10+1];                        /* 자필서명미이행 경로구분 */

varchar dntnSpctYn    [1+1];                            /* 기부특약대상여부 */
varchar dntnSpctSlctYn[1+1];                            /* 기부특약선택여부 */
varchar lvngMonyStag  [4+1];                            /* 생활자금개시나이 */
varchar lvngMonyRqyr  [4+1];                            /* 생활자금신청년수 */
varchar lvngMonyRdrt  [4+1];                            /* 가입금액감액비율 */
varchar connPolyNo    [9+1];                        /* 기계약 연계 증권번호 */

varchar gpmJoinPoss   [256+1];                    /* 단체실손 가입가능 체크 */
varchar gpmJudgPoss   [256+1];                    /* 단체실손 심사여부 체크 */
varchar rtmtDate      [  8+1];                                  /* 퇴직일자 */

varchar cnvnPmmiYn    [1+1];                            /* 간편실손여부 */
varchar cnvnWlifNonSpcd[1+1];

int  syncCnt;                                 /* 싱크아이디건수 :2013.07.05 */
varchar syncCustId[10][10+1];                 /* 싱크아이디     :2013.07.05 */

varchar pmmiDsasYn    [1+1];                             /* 실손질병형 여부 */

=========================
SVncapl300in1.pc

/************************************************************************
    파   일   명 : SVncapl300in1.pc
    작   성   일 : 2002.02.01
    작   성   자 : 조진학
    설        명 : 청약서 접수  (2003.07.28)
 ------------------------------------------------------------------------
    프로그램용도 : 개별 청약서 접수 서비스 프로그램
    사용 DB I/O  : 계약입출금등록정보저장               -   DCNC_APL100IN18_SP
                   계약입출금등록정보삭제               -   DCNC_APL100IN23_SP

                   보험검진대상저장                     -   DCNC_APL300IN01_SP
                   가입상품저장                         -   DCNC_APL300IN02_SP

                   계약고지정보입력                     -   DCNC_APL300IN04_SP(사용안함)
                   계약고지정보입력                     -   DCNC_APL300IN45_SP(EUS)

                   계약심사                             -   DCNC_APL300IN05_SP
                   금융기관송수신기초자료 조회          -   DCNC_APL300IN06_SP
                   계약조사수정                         -   DCNC_APL300IN07_SP
                   신계약일마감입력                     -   DCNC_APL300IN08_SP
                   신계약일정조회                       -   DCNC_APL300IN09_SP
                   지연입력조회                         -   DCNC_APL300IN10_SP
                   달력조회                             -   DCNC_APL300IN11_SP
                   계약관계자(피보험자)조회             -   DCNC_APL300IN12_SP
                   계약가능월조회                       -   DCNC_APL300IN13_SP
                   보험료수금정보저장                   -   DCNC_APL300IN14_SP
                   지연입력조회                         -   DCNC_APL300IN15_SP
                   선진단대상건조회                     -   DCNC_APL300IN17_SP
                   계약수정                             -   DCNC_APL300IN18_SP
                   계약관계자입력                       -   DCNC_APL300IN19_SP
                   운전차종고지정보입력                 -   DCNC_APL300IN20_SP
                   청약부속정보 수정                    -   DCNC_APL300IN21_SP
                   단체계약명세입력                     -   DCNC_APL300IN26_SP
                   영수증발행 수정                      -   DCNC_APL300IN27_SP
                   계약정보 조회                        -   DCNC_APL300IN28_SP
                   가입상품 조회                        -   DCNC_APL300IN29_SP
                   신계약일마감가입력                   -   DCNC_APL300IN35_SP
                   카드납입승인관리입력                 -   DCNC_APL300IN38_SP

                   영수증선발행처리                     -   DCNC_APL314IN02_SP
                   영수증번호채번조회                   -   DCNC_APL314IN04_SP

                   영수증폐기처리                       -   DCNC_APL374IN02_SP
                   영수증재발행및폐기조회               -   DCNC_APL374VW01_SP

                   실제송금일자조회                     -   DCNC_APL501IN02_SP

                   계약항목변경이력생성                 -   DCNC_CMNCSNLB08_SP

                   즉시이체 은행라인 이상시 미입금접수  -   DCNC_APL300IN22_SP 2003.12.12 신진혁

                   할인,입출금,관계,펀드관리 수정       -   DCNC_APL300IN39_SP 2004.11.02 신진혁

                   가족력      고지 입력                -   DCNC_APL300IN41_SP (EUS)
                   일상생활수행고지 입력                -   DCNC_APL300IN42_SP (EUS)
                   질병        고지 입력                -   DCNC_APL300IN43_SP (EUS)
                   장애        고지 입력                -   DCNC_APL300IN44_SP (EUS)

    사용 LIBRARY : libcommon.so
 ------------------------------------------------------------------------
    <수정내역>
    수정일자    수정자                   수정내용
 ************************************************************************/

/*----------------------------------------------------------------------*
   기본 HEADER FILES
 *----------------------------------------------------------------------*/
#include    <common.h>
#include    <anycomm.h>
#include    <svc_fml_nc.flds.h>       /* FML field header               */
#include    <svc_fml_mm.flds.h>       /* FML field header               */
#include    <mdm_api.h>                                    /* mdm서비스 */
#include    <uvcrypt.h>                     /* 암복호화에 필요한 header */

#define TAX_NEW
#define IPSL_DBCT
/*----------------------------------------------------------------------*
   업무 HEADER FILES
 *----------------------------------------------------------------------*/

EXEC SQL INCLUDE  nc/CMNC_lib_struct.h ;
EXEC SQL INCLUDE  nc/nc_aplstruct.h ;
EXEC SQL INCLUDE  cp/CMCP_lib_struct.h ;
EXEC SQL INCLUDE  nc/nc_compass_struct.h;
EXEC SQL INCLUDE  nc/nc_huros_struct.h ;
EXEC SQL INCLUDE  pa/libpabus1.h ;
EXEC SQL INCLUDE  nc/nc_credit_struct.h ;           /* 신계약 신용카드 header */
EXEC SQL INCLUDE  nc/CMNC_lib_struct2.h ;
EXEC SQL INCLUDE  nc/nc_kcredit_struct.h ;
EXEC SQL INCLUDE  nc/nc_altk_struct.h;

/*-----------------------------------------------------------------------
 * SQL Header file/SQL Variable 선언
 *----------------------------------------------------------------------*/
EXEC SQL INCLUDE  SQLCA;
/* DBIO 및 COM SP MODULE을 호출하기 위한 default parameter 및 macro선언 *
 * 된 Header file.                                                      */
EXEC SQL INCLUDE dbio_com.h;
EXEC SQL INCLUDE dbio_ddal.h;

/* DBIO STUB HEADER file                                                */
EXEC SQL INCLUDE   dbio/dcnc_apl100in18_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl100in23_sp.h ;

EXEC SQL INCLUDE   dbio/dcnc_apl300in01_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in02_sp.h ;
/*EXEC SQL INCLUDE "/dbio/dcnc_apl300in04_sp.h";*/
EXEC SQL INCLUDE   dbio/dcnc_apl300in45_sp.h ; /* EUS용 */
EXEC SQL INCLUDE   dbio/dcnc_apl300in05_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in06_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in07_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in08_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in09_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in10_sp.h ;
EXEC SQL INCLUDE   dbio/denc_apl300in10_sp.h ; /* 지연입력승인(증권번호) 여부 조회*/
EXEC SQL INCLUDE   dbio/dcnc_apl300in11_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in12_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in13_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in14_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in15_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in17_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in18_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in19_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in20_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in21_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in47_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in26_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in27_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in28_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in29_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in35_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in38_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl300in39_sp.h ; /* 할인,입출금,관계,펀드관리 수정 */

EXEC SQL INCLUDE   dbio/dcnc_apl300in41_sp.h ; /* 가족력      고지 입력 (EUS) */
EXEC SQL INCLUDE   dbio/dcnc_apl300in42_sp.h ; /* 일상생활수행고지 입력 (EUS) */
EXEC SQL INCLUDE   dbio/dcnc_apl300in43_sp.h ; /* 질병        고지 입력 (EUS) */
EXEC SQL INCLUDE   dbio/dcnc_apl300in44_sp.h ; /* 장애        고지 입력 (EUS) */
EXEC SQL INCLUDE   dbio/denc_incudwjug_001_sp.h ; /* COMPASS로그        (EUS) */
EXEC SQL INCLUDE   dbio/dcnc_apl305in01_sp.h ; /* 알림메세지 입력       (EUS) */

EXEC SQL INCLUDE   dbio/dcnc_apl314in02_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl314in04_sp.h ;

EXEC SQL INCLUDE   dbio/dcnc_apl374in02_sp.h ;
EXEC SQL INCLUDE   dbio/dcnc_apl374vw01_sp.h ;

EXEC SQL INCLUDE   dbio/dcnc_apl501in02_sp.h ;

EXEC SQL INCLUDE   dbio/dcnc_cmncsnlb08_sp.h ;

EXEC SQL INCLUDE   dbio/dcnc_cmncdcss20_sp.h ;  /* 설계사본인계약누적(개인,대리점) */
EXEC SQL INCLUDE   dbio/dcnc_cmncdcss24_sp.h ;  /* FP본인및가족계약누적(GFP) */
EXEC SQL INCLUDE   dbio/dcnc_cmncdcss25_sp.h ;  /* FP본인및가족계약누적(KLD) */

EXEC SQL INCLUDE   dbio/dcnc_apl300in22_sp.h ;
/* 즉시이체 미입금접수용 2003.12.12 신진혁 */

EXEC SQL INCLUDE   dbio/denc_apl300in47_sp.h ;  /* 종합일반심사구분용 조회 */

EXEC SQL INCLUDE   dbio/ddcs_sfmcredvw1_cc.h ;  /* 신용카드 전문추적번호 채번 */
EXEC SQL INCLUDE   dbio/dcnc_apl300in221_sp.h ; /* 즉시이체 청구중입금 입력 */

EXEC SQL INCLUDE   dbio/denc_apl300in48_sp.h ;  /* U/W 특이사항 입력 */
EXEC SQL INCLUDE   dbio/denc_apl300in49_sp.h ;  /* 장애인심사건여부 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300in50_sp.h ;  /* 교차판매여부 조회 */
EXEC SQL INCLUDE   dbio/denc_sncudwcje_003_sp.h ; /* 심사시유의사항 대상여부 조회 */
EXEC SQL INCLUDE   dbio/dccs_apl300in53_sp.h ;  /* 상품소개 및 고객분석 동의여부 입력 */
EXEC SQL INCLUDE   dbio/denc_uisocictt_003_sp.h ; /* 타사계약 인수 증권번호 저장 */
EXEC SQL INCLUDE   dbio/denc_uisocipat_001_sp.h ; /* 타사계약입금 증권번호 저장 */
EXEC SQL INCLUDE   dbio/denc_iisrcvprm001_sp.h ; /* 웰컴드림 초회보험료 입금정보 입력 저장 */
EXEC SQL INCLUDE   dbio/denc_uisaplctt_002_sp.h ; /* 계약 테이블 합계보험료,합계원보험료 수정 */

EXEC SQL INCLUDE   dbio/dcnc_apl214in14_sp.h ;   /* 세금우대 등록취소 */
EXEC SQL INCLUDE   dbio/denc_apl214in04_sp.h ;   /* 저축성 비과세 계약 정보 조회*/
EXEC SQL INCLUDE   dbio/denc_apl300vw21_sp.h ;   /* 저축성 비과세 정보 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300vw23_sp.h ;   /* 거치형 저축성 비과세 정보 조회 */
EXEC SQL INCLUDE   dbio/denc_uncaplstf002_sp.h ; /* 저축성 비과세 정보 수정 */

#ifdef IPSL_DBCT
EXEC SQL INCLUDE   dbio/denc_apl300in51_sp.h ; /* 상품별 사망보장금액 조회 */
#endif

EXEC SQL INCLUDE   dbio/dcnc_apl300in51_sp.h ; /* 적합성원칙 진단 고객승인 및 결과 만료처리 */
EXEC SQL INCLUDE   dbio/denc_apl300in56_sp.h ; /* 보종별 펀드보증 최신 펀드코드 반영 */
EXEC SQL INCLUDE   dbio/denc_apl300in57_sp.h ; /* 일마감초년도 차년도 보험료 반영 */
EXEC SQL INCLUDE   dbio/denc_apl300in58_sp.h ; /* 계약인수 처리 완료 여부 조회 */

EXEC SQL INCLUDE   dbio/dcnc_apl100in11_sp.h ; /* 계약간관계 저장(프레지던트 보종 전용) */
EXEC SQL INCLUDE   dbio/denc_apl300in59_sp.h ; /* 프레지던트 연계 계약 정보 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300in60_sp.h ; /* 과다송금 발생기관 여부 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300in61_sp.h ; /* 기관별 가상계좌 잔고 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300in62_sp.h; /* 육성센터 EP 알림메세지 발송(對 모집기관) */
EXEC SQL INCLUDE   dbio/dcuv_alrins001_sp.h ;

EXEC SQL INCLUDE   dbio/denc_iisaplrci001_sp.h ; /* 양육자금전환 저장 */
EXEC SQL INCLUDE   dbio/denc_iisaplaad001_sp.h ; /* 지정대리청구 저장 */
EXEC SQL INCLUDE   dbio/denc_cmncsudo29_sp.h;  /* 금융정보교환을 위한 본인확인서 조회 FATCA */
EXEC SQL INCLUDE   dbio/denc_apl300in63_sp.h;  /* 청약서 발행 접수 AML 변경 확인 조회(발행시 CDD, 접수시 EDD) */

EXEC SQL INCLUDE   dbio/denc_sncaplcim_004_sp.h; /* 신용정보조회 대상조회 */
EXEC SQL INCLUDE   dbio/denc_uiscompci_001_sp.h; /* 보험료수금정보수정(타사이전용) */

EXEC SQL INCLUDE   dbio/dcnc_apl300vw09_sp.h ;                       /* (EUS) */
EXEC SQL INCLUDE   dbio/dcnc_apl300vw04_sp.h ;
EXEC SQL INCLUDE   dbio/denc_apl300in64_sp.h;
EXEC SQL INCLUDE   dbio/denc_apl300in65_sp.h;
EXEC SQL INCLUDE   dbio/denc_apl300in66_sp.h;
EXEC SQL INCLUDE   dbio/denc_smmnortyp_009_sp.h ; /* 상품분류조회(사차손익유형분류) */

EXEC SQL INCLUDE   dbio/denc_unctbldsc001_sp.h ; /* TABLET 바로접수 여부 수정 */
EXEC SQL INCLUDE   dbio/denc_sisadmctt_003_sp.h ;

EXEC SQL INCLUDE   dbio/dcnc_apl300in24_sp.h; /* 간편가입 관련 정보 수정 */

EXEC SQL INCLUDE   dbio/denc_scsscm010_032_sp.h; /* 예금주실명번호종류 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300in67_sp.h; /* 연금정보 수정*/
EXEC SQL INCLUDE   dbio/denc_apl300vw24_sp.h; /* 제2연금개지연령 조회 */
EXEC SQL INCLUDE   dbio/dcnc_apl300vw25_sp.h; /* mdm 동기화 오류고객정보 저장 CDAL */
EXEC SQL INCLUDE   dbio/denc_apl300vw28_sp.h; /* 기대여명형 연금 보증기간 조회 */
EXEC SQL INCLUDE   dbio/denc_umascm020_004_sp.h; /* 가망고객상세 수정*/
EXEC SQL INCLUDE   dbio/denc_apl300in71_sp.h; /* 간편고지여부 정보 저장 */
EXEC SQL INCLUDE   dbio/denc_apl300in69_sp.h; /* 전자서명청약을위한피보험자서면동의서 스캔여부 조회 */
EXEC SQL INCLUDE   dbio/denc_apl100in57_sp.h ;  /* 부부CARE서비스 대상 여부 */
EXEC SQL INCLUDE   dbio/denc_cmncsudo52_sp.h ;  /* 양치서비스대상여부 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300in72_sp.h ;  /* 양치서비스 동의여부 저장 */
EXEC SQL INCLUDE   dbio/dcnc_apl300in54_sp.h ;  /* 장애인전용 세제전환특약 신청정보 저장 */
EXEC SQL INCLUDE   dbio/denc_apl300in75_sp.h ;  /* 초회보험료 수금방법 직접납입 시 초회가상계좌 정보 저장 */
EXEC SQL INCLUDE   dbio/denc_apl300in76_sp.h ;  /* 초회가상계좌 일련번호 채번 */
EXEC SQL INCLUDE   dbio/denc_apl300in77_sp.h ;  /* 초회가상계좌 알림톡 발송 대상건 조회(계약자) */
EXEC SQL INCLUDE   dbio/denc_apl300in78_sp.h ;  /* 초회가상계좌 알림톡 발송 대상건 조회(모집FP) */
EXEC SQL INCLUDE   dbio/denc_apl300in79_sp.h ;  /* 은행별 초회가상계좌번호 조회 */
EXEC SQL INCLUDE   dbio/denc_apl300in80_sp.h ;  /* 출생예정일자 저장 */
EXEC SQL INCLUDE   dbio/denc_cmncjudg26_sp.h ;  /* 간편무효처리대상 여부 조회 */


/* 1회 select하고자 하는 row size를 ARRAY_SIZE로 선언한다               */
#define ARRAY_SIZE  50                          /* ARRAY                건수  */
#define CRW          8                          /* 계약입출금등록정보   건수  */
#define CRM         15                          /* 계약관계자           건수  */
#define CMR         15                          /* 계약관계자역할       건수  */
/* #define CJG         35                          가입상품             건수  */
/* #define FRP         35                          자유설계가입상품     건수  */
#define PPD         11                          /* 보험료할인           건수  */
#define PRE          2                          /* 초회보험료선소급정보 건수  */
#define BNF          5                          /* 수익자               건수  */
#define CNI          4                          /* 계약고지정보         건수  */
#define DNI         12                          /* 운전차종고지정보     건수  */
#define HOT         30                          /* 입원기간             건수 (EUS) */
#define OBS         12                          /* 장애고지정보         건수 (EUS) */
#define DOR         40                          /* 질병고지             건수 (EUS) */
#define FHD         12                          /* 가족력고지           건수 (EUS) */
#define USI          4                          /* 일상생활고지         건수 (EUS) */

#define CVCRW       20                          /* 간편계약 입출금등록정보   건수  */

#define SHINHAN_ORGN "8866071204"
#define NONG_ORGN    "1105091"
#define GWANG_ORGN   "77700016"
#define KEB_ORGN     "6510200329"
#define KYUNG_ORGN   "FBS72032"

EXEC SQL BEGIN DECLARE SECTION;

/* 서비스 내에서 임의로 사용할 호스트 변수를 선언한다.                      */
struct  stp_SVncapl300in1_realTrnf {
  varchar    recvYn[1 + 1];                    /* o 수신여부(time out = n) */
  varchar    dmndDate[8 + 1];                  /* I 청구일자 */
  varchar    imtrNscd[4 + 1];                  /* o 응답코드 */
  varchar    imtrBankNscd[4 + 1];              /* o 은행응답코드 */
  varchar    bankCode[2 + 1];                  /* I 은행코드 */
  double     jNo;                              /* o 전문번호 */
  varchar    polyNo[9+1];                          /* 증권번호 */
  double     seqNo;

};

struct  stp_SVncapl300in1 {
  double  dlngCnt;                              /* 처리건수 */
  varchar crntDate[8+1];                        /* 현재일자 */
  varchar crntYm[6+1];                          /* 현재년월 */
  varchar crntTimeHh24[6+1];                    /* 현재시각 */
  varchar crntFrtDate[8+1];                     /* 현재일자||'01' */
  varchar hldyYn[4+1];                          /* 휴무여부 */
  varchar biwkOfdyYn[4+1];                      /* 격주휴무여부 */
  varchar day[4+1];                             /* 요일 */
  varchar stddDate[8+1];                        /* 청약서입력개시일자 */
  varchar stddTime[8+1];                        /* 청약서입력개시일시 */
  varchar lstmStddStdt[8+1];                    /* 전월청약서입력마감일자 */
  varchar satStddDate[8+1];                     /* 토요일입력마감연장일 */
  varchar satStddTime[8+1];                     /* 토요일입력마감연장시 */
  varchar inptPoss[4+1];                        /* 지연입력가능여부 */
  varchar inptPossPlno[4+1];                    /* 지연입력증번승인여부 */
  varchar cnttPossStdt[8+1];                    /* 계약가능시작일자 */
  varchar cnttPossEndt[8+1];                    /* 계약가능종료일자 */
  double  paymCnt;                              /* 입력납회 */
  varchar frstPaymMnth[6+1];                    /* 최초납월(소급) */
  varchar lastPaymMnth[6+1];                    /* 최종납월(선납) */
  varchar strtDate[8+1];                        /* 시작일자 */

  varchar srdoFormKind[10+1];                   /* 청약서양식종류       (EUS) */

  varchar recpNo[24+1];                         /* 영수증번호(내부처리용) */
  varchar recpNoScrn[24+1];                     /* 영수증번호(Client전송용) */
  varchar rcntNo[8+1];                          /* 승인번호(Client전송용) */

  varchar txprConnTpcd[10+1];                   /* 세금우대관련유형코드 */
  varchar spquTpdvCode[10+1];                   /* 특성형태구분코드 */
  varchar pstnOrgnCode[5+1];                    /* 소속기관코드 */

  /* 계약                       */
  varchar polyNo[9+1];                          /* 증권번호 */
  varchar irkdCodeDtal[4+1];                    /* 보험종류코드_세 */
  varchar irkdCodeItem[3+1];                    /* 보험종류코드_목 */
  varchar cnttStatCode[10+1];                   /* 계약상태코드 */
  varchar cnttStatDtcd[10+1];                   /* 계약상태상세코드 */
  varchar befoCtsCode[10+1];                    /* 직전계약상태코드 */
  varchar befoCtsDtcd[10+1];                    /* 직전계약상태상세코드 */
  varchar cnttDate[8+1];                        /* 계약일자 */
  varchar exprDate[8+1];                        /* 만기일자 */
  varchar extnDate[8+1];                        /* 소멸일자 */
  varchar lapsDate[8+1];                        /* 실효일자 */
  varchar ctorCustId[10+1];                     /* 계약자고객ID */
  varchar cnttGrpCtid[10+1];                    /* 계약시단체고객ID */
  double  paymTerm;                             /* 납입기간 */
  double  realPaymTerm;                         /* 실납입기간 */
  varchar paymTermDvsn[10+1];                   /* 납입기간구분 */
  double  lmitPyct;                             /* 한정납회 */
  double  insrTerm;                             /* 보험기간 */
  double  realInsrTerm;                         /* 실보험기간 */
  varchar insrTermDvsn[10+1];                   /* 보험기간구분 */
  varchar paymCyclCode[10+1];                   /* 납입주기코드 */
  double  mainInsrAmt;                          /* 주보험금 */
  double  mainPrem;                             /* 주보험료 */
  double  sumPrem;                              /* 합계보험료 */
  double  sumOrigPrem;                          /* 합계원보험료 */
  double  stddJoinAmt;                          /* 기준가입금액 */
  varchar premDsctYn[1+1];                      /* 보험료할인여부 */
  varchar premApcnDvsn[10+1];                   /* 보험료적용구분 */
  varchar cnttConcYm[6+1];                      /* 계약체결년월 */
  varchar prsnCoprSadv[10+1];                   /* 개인법인판매구분 */
  varchar prsnCoprPmdv[10+1];                   /* 개인법인인가구분 */
  double  anntPaymStag;                         /* 연금지급개시연령 */
  varchar anntPaymStdt[8+1];                    /* 연금지급개시일자 */
  double  anntLfepYear;                         /* 연금기대여명 */
  varchar insrAcctDvsn[10+1];                   /* 보험계정구분 */
  varchar clltOrgnCode[5+1];                    /* 모집기관코드 */
  varchar clltLpPrno[8+1];                      /* 모집설계사고유번호 */
  double  mmth;                                 /* 모집설계사차월 */
  varchar cnttUpdtDate[8+1];                    /* 계약갱신일자 */
  varchar pytrInqrCode[10+1];                   /* 납입기간조회코드 */
  varchar intrInqrCode[10+1];                   /* 보험기간조회코드 */
  varchar bsmnRgstNo[10+1];                     /* 사업자등록번호 */
  varchar publCnttDate[8+1];                    /* 발행시계약일자 */
  varchar publCnttDate2[8+1];                   /* 발행시계약일자 */

  double  stddCamt;                             /* 기준계약고 */
  varchar saleChnlCode[10+1];                   /* 판매채널코드 */
  varchar sintStagIqcd[10+1];                   /* 제2보기개시연령조회코드 */
  varchar tintStagIqcd[10+1];                   /* 제3보기개시연령조회코드 */
  varchar sintStrtDvsn[10+1];                   /* 제2보기개시구분 */
  double  sintStrtPrsn;                         /* 제2보기개시시점 */
  varchar tintStrtDvsn[10+1];                   /* 제3보기개시구분 */
  double  tintStrtPrsn;                         /* 제3보기개시시점 */
  varchar savgInsrYn[1+1];                      /* 저축성보험여부 */
  varchar acdtInsrYn[1+1];                      /* 상해보험여부 */
  varchar ciInsrYn[1+1];                        /* ci보험여부       조진학 */
  double  taxPrpsAmt;                           /* 주체별세금우대가능금액 */
  double  taxPrjnAmt;                           /* 연합회세금우대등록금액 */

  /* 자유설계                   */
  varchar frpirkdCodeDtal[4+1];                 /* 보험종류코드_세 */
  varchar frpirkdCodeItem[3+1];                 /* 보험종류코드_목 */
  double  frppaymTerm;                          /* 납입기간 */
  double  frprealPaymTerm;                      /* 실납입기간 */
  varchar frppaymTermDvsn[10+1];                /* 납입기간구분 */
  varchar frppaymCyclCode[10+1];                /* 납입주기코드 */
  double  frpmainInsrAmt;                       /* 주보험금 */
  double  frpmainPrem;                          /* 주보험료 */
  double  frpsumPrem;                           /* 합계보험료 */
  double  frpsumOrigPrem;                       /* 합계원보험료 */
  double  frpstddJoinAmt;                       /* 기준가입금액 */
  varchar frppytrInqrCode[10+1];                /* 납입기간조회코드 */
  varchar frpintrInqrCode[10+1];                /* 보험기간조회코드 */
  double  frpfstiRrcvPrem;                      /* 초회실입금보험료 */
  double  frpaddPaymPrem;                       /* 추가납입보험료 */
  double  frpstddCamt;                          /* 기준계약고 */
  double  frptaxPrpsAmt;                        /* 주체별세금우대가능금액 */
  double  frptaxPrjnAmt;                        /* 연합회세금우대등록금액 */

  double  ft01Cvmf;                              /* 자유설계 1회차환산월초 */
  double  ft04Cvmf;                              /* 자유설계 4회차환산월초 */
  double  ft07Cvmf;                              /* 자유설계 7회차환산월초 */
  double  ft13Cvmf;                              /* 자유설계 13회차환산월초 */
  double  ft25Cvmf;                              /* 자유설계 25회차환산월초 */
  double  flupyCvmf;                             /* 자유설계 일시납환산월초 */

  varchar orgirkdCodeDtal[4+1];                 /* 보험종류코드_세 */
  varchar orgirkdCodeItem[3+1];                 /* 보험종류코드_목 */
  varchar orgpaymCyclCode[10+1];                /* 납입주기코드 */
  double  orgsumOrigPrem;                       /* 합계원보험료 */

  double  orgpaymTerm;                          /* 납입기간 */
  double  orgrealPaymTerm;                      /* 실납입기간 */
  varchar orgpaymTermDvsn[10+1];                /* 납입기간구분 */
  double  orgmainInsrAmt;                       /* 주보험금 */
  double  orgmainPrem;                          /* 주보험료 */
  double  orgsumPrem;                           /* 합계보험료 */
  double  orgstddJoinAmt;                       /* 기준가입금액 */
  varchar orgpytrInqrCode[10+1];                /* 납입기간조회코드 */
  varchar orgintrInqrCode[10+1];                /* 보험기간조회코드 */
  double  orgfstiRrcvPrem;                      /* 초회실입금보험료 */
  double  orgaddPaymPrem;                       /* 추가납입보험료 */
  double  orgstddCamt;                          /* 기준계약고 */
  varchar orgftprRecvMdcd[10+1];                /* 초회보험료입금방법코드 */

  /* 청약부속정보               */
  varchar ftprRmtnDate[8+1];                    /* 초회보험료송금일자 */
  varchar ftprRmtnTime[6+1];                    /* 초회보험료송금시각 */
  varchar ftprRecvMdcd[10+1];                   /* 초회보험료입금방법코드 */
  double  fstiRrcvPrem;                         /* 초회실입금보험료 */
  double  addPaymPrem;                          /* 추가납입보험료 */
  varchar fstiPpayYn[1+1];                      /* 초회선납여부 */
  varchar retrYn[1+1];                          /* 소급여부 */
  varchar lpCtisReln[10+1];                     /* 설계사와계약자/피보험자관계 */
  varchar clltRoutDvsn[10+1];                   /* 모집경로구분 */
  varchar orgnArdcYn[1+1];                      /* 기관전결여부 */
  varchar lapsCtorYn[1+1];                      /* 실효계약자여부 */
  varchar prcdOrgnCode[5+1];                    /* 상위기관코드 */
  varchar insrJoinMotv[10+1];                   /* 보험가입동기 */
  varchar cnttConcDate[8+1];                    /* 계약성립일자 */
  varchar spclRcntYn[1+1];                      /* 특별승인여부 */
  varchar befoSrdoRvno[11+1];                   /* 과거청약서접수번호 */
  double  mnthIncmAmt;                          /* 월소득금액 */
  varchar cnvnJoinHlyn[1+1];                    /* 간편가입유지여부 */
  varchar ctorDwelTpdv[10+1];                   /* 계약자주거형태구분 */
  varchar bdctNo[9+1];                          /* 일괄계약번호 */
  varchar recpDate[8+1];                        /* 접수일자 */
  varchar recpTime[6+1];                        /* 접수시각 */
  varchar rmtnDate[8+1];                        /* 송부일자 */
  varchar arivDate[8+1];                        /* 도착일자 */
  varchar srdoRmtnRtdv[10+1];                   /* 청약서송부경로구분 */
  varchar polyTrnmRtdv[10+1];                   /* 증권전달경로구분 */
  varchar stplRecvDvsn[10+1];                   /* 약관전달경로구분 */
  varchar premIamtIpst[10+1];                   /* 보험료/보험금입력기준 */
  varchar bussFrplYn[1+1];                      /* 영업자유설계여부 */
  varchar bussClogYm[6+1];                      /* 영업마감년월 */
  varchar lpRlcd[10+1];                         /* 설계사와의관계코드 */
  double  embrPregMcnt;                         /* 태아임신개월수 */
  varchar ctorEdbnReln[10+1];                   /* 계약자만기수익자관계 */
  varchar indvBndlDvsn[1+1];                    /* 개별일괄구분 */
  varchar bntpCode[10+1];                       /* 업종코드 */
  varchar grpRiskGrcd[10+1];                    /* 단체위험등급코드 */
  varchar recpCnclDate[8+1];                    /* 접수취소일자 */
  varchar realFtprRmtnDate[8+1];                /* 초회보험료송금일자 */
  varchar mchnCmpgCode[20+1];                   /* 캠페인코드 */
  double  custIntrPsct;                         /* 고객소개인원수 */
  varchar conbObjtCtid[10+1];                   /* 기부대상고객ID */
  varchar srdoVlidTerm[8+1];                    /* 청약서유효기간 */
  varchar urinMdobYn  [1+1];                    /* 계약조사필수조사+뇨검사 추가 */
  varchar premiumAccmYn [1+1];                  /* 고액적립선택여부 */
  varchar rrfdCnvsRqyn[1+1];                    /* 양육자금전환신청여부 */
  double  cnvsRato  ;                           /* 전환비율 */
  double  cnvsEndAge;                           /* 전환종료나이 */
  varchar asmtAgntRqyn[1+1];                    /* 지정대리인신청여부   */
  varchar asmtAgntCtid[10+1];                   /* 지정대리인고객ID */
  varchar dumbYn[1+1];                          /* 청각언어장애여부 */
  varchar vrblHoloYn[1+1];                      /* 변액자필여부 */
  varchar recpDlmnMpno[10+1];                   /* 접수처리자사번 */
  varchar mntrDvcd[8+1];                        /* 모니터링방법구분 */

  /* 계약부속정보               */
  varchar mcupCtcvYn[1+1];                      /* 부부계약전환여부 */
  varchar anntCnscJnyn[1+1];                    /* 연금전환특약가입여부 */
  varchar grttSpcdYn[1+1];                      /* 단체취급특약여부 */
  varchar dfmtCnvsYn[1+1];                      /* 거치전환여부 */
  varchar pstpReviYn[1+1];                      /* 순연부활여부 */
  varchar deadPpayScyn[1+1];                    /* 사망선지급특약부가여부 */
  varchar taxPrctYn[1+1];                       /* 세금우대계약여부 */
  varchar ctorCrpbYn[1+1];                      /* 계약자법인체여부 */
  double  premCoprCgrt;                         /* 보험료법인부담율 */
  varchar psanCnvsDate[8+1];                    /* 개인연금전환일자 */
  varchar freePlanYn[1+1];                      /* 자유설계여부 */
  varchar ctorRlnmCfyn[1+1];                    /* 계약자실명확인여부 */
  varchar bnfcRlnmCfyn[1+1];                    /* 수익자실명확인여부 */
  varchar lffdPaymStdt[8+1];                    /* 생활자금지급개시일자 */
  varchar taxPrmnKind[10+1];                    /* 세금우대주체종류 */
  varchar txprApcnVlyn[1+1];                    /* 세금우대적용유효여부 */
  varchar txprApcnTmyn[1+1];                    /* 세금우대적용해지여부 */
  varchar txfrGoodYn[1+1];                      /* 비과세상품여부 */
  varchar cnttCnvsDate[8+1];                    /* 계약전환일자 */
  varchar premXtrcYn[1+1];                      /* 할증계약 여부 할증_cho */
  double  acatGurtTerm;                         /* 적립금보증기간 */
  varchar commTrmtRqyn[1+1];                    /* 통신해지신청여부 */
  varchar bnfcAsmtAgyn[1+1];                    /* 수익자지정동의여부 */
  varchar taxSelYn[1+1];                        /* 세금우대 과세 선택 여부 */
  varchar rejtMsgAgyn[1+1];                     /* 승낙거절LMS동의여부 */

  /* 보험료할인                 */
  varchar premDsctKdcd[10+1];                   /* 보험료할인종류코드 */
  double  premDsctRato;                         /* 보험료할인율 */
  double  dsctPrem;                             /* 할인보험료 */
  /* 보험료할인 추가            */
  double  sumDsctPrem;                          /* 합계할인보험료 */

  /* 초회보험료선소급정보       */
  varchar ppayRetrDvsn[PRE][1+1];               /* 선소급구분 */
  double  ppayRetrCnt[PRE];                     /* 선소급횟수 */
  double  ppayRetrPrem[PRE];                    /* 선소급보험료 */
  double  ppayRetrInte[PRE];                    /* 선소급이자 */

  /* 가입상품                   */
  double  cjgCnt;                               /* 가입상품_건수 */
  double  cjgjoinGoodNo[CJG_CNT];                   /* 가입상품번호  */
  varchar cjggoodCodeDtal[CJG_CNT][4+1];            /* 상품코드_세 */
  varchar cjggoodCodeItem[CJG_CNT][3+1];            /* 상품코드_목 */
  varchar cjggoodRelnCode[CJG_CNT][10+1];           /* 상품관계코드 */
  varchar cjgcnttStatCode[CJG_CNT][10+1];           /* 계약상태코드 */
  varchar cjgcnttStatDtcd[CJG_CNT][10+1];           /* 계약상태상세코드 */
  varchar cjgbefoCtsCode[CJG_CNT][10+1];            /* 직전계약상태코드 */
  varchar cjgbefoCtsDtcd[CJG_CNT][10+1];            /* 직전계약상태상세코드 */
  varchar cjgpaymCyclCode[CJG_CNT][10+1];           /* 납입주기코드 */
  double  cjgpaymTerm[CJG_CNT];                     /* 납입기간 */
  double  cjgrealPaymTerm[CJG_CNT];                 /* 실납입기간 */
  varchar cjgpaymTermDvsn[CJG_CNT][10+1];           /* 납입기간구분 */
  double  cjgLmitPyct[CJG_CNT];                     /* 상품별한정납회 */
  double  cjginsrTerm[CJG_CNT];                     /* 보험기간 */
  double  cjgrealInsrTerm[CJG_CNT];                 /* 실보험기간             --; */
  varchar cjginsrTermDvsn[CJG_CNT][10+1];           /* 보험기간구분 */
  varchar cjgcnttDate[CJG_CNT][8+1];                /* 계약일자 */
  varchar cjgexprDate[CJG_CNT][8+1];                /* 만기일자 */
  varchar cjgextnDate[CJG_CNT][8+1];                /* 소멸일자 */
  double  cjginsrAmt[CJG_CNT];                      /* 보험금 */
  double  cjgorigPrem[CJG_CNT];                     /* 원보험료 */
  double  cjgprem[CJG_CNT];                         /* 보험료 */
  double  cjgRepay[CJG_CNT];                        /* 환급율 */
  /* 가입상품추가               */
  varchar cjggoodCodeName[CJG_CNT][255+1];          /* 상품코드_명 */
  varchar cjgpytrInqrCode[CJG_CNT][10+1];           /* 납입기간조회코드 */
  varchar cjgintrInqrCode[CJG_CNT][10+1];           /* 보험기간조회코드 */

  /* 자유설계가입상품           */
  double  fjgCnt;                               /* 자유설계가입상품_건수 */
  varchar fjggoodCodeDtal[FRP_CNT][4+1];            /* 자유설계상품코드_세 */
  varchar fjggoodCodeItem[FRP_CNT][3+1];            /* 자유설계상품코드_목 */
  varchar fjggoodRelnCode[FRP_CNT][10+1];           /* 자유설계상품관계코드 */
  varchar fjgcnttStatCode[FRP_CNT][10+1];           /* 자유설계계약상태코드 */
  varchar fjgcnttStatDtcd[FRP_CNT][10+1];           /* 자유설계계약상태상세코드 */
  varchar fjgbefoCtsCode[FRP_CNT][10+1];            /* 자유설계직전계약상태코드 */
  varchar fjgbefoCtsDtcd[FRP_CNT][10+1];            /* 자유설계직전계약상태상세코 */
  varchar fjgpaymCyclCode[FRP_CNT][10+1];           /* 자유설계납입주기코드 */
  double  fjgpaymTerm[FRP_CNT];                     /* 자유설계납입기간 */
  double  fjgrealPaymTerm[FRP_CNT];                 /* 자유설계실납입기간 */
  varchar fjgpaymTermDvsn[FRP_CNT][10+1];           /* 자유설계납입기간구분 */
  double  fjginsrTerm[FRP_CNT];                     /* 자유설계보험기간 */
  double  fjgrealInsrTerm[FRP_CNT];                 /* 자유설계실보험기간 */
  varchar fjginsrTermDvsn[FRP_CNT][10+1];           /* 자유설계보험기간구분 */
  varchar fjgcnttDate[FRP_CNT][8+1];                /* 자유설계계약일자 */
  varchar fjgexprDate[FRP_CNT][8+1];                /* 자유설계만기일자 */
  varchar fjgextnDate[FRP_CNT][8+1];                /* 자유설계소멸일자 */
  double  fjginsrAmt[FRP_CNT];                      /* 자유설계보험금 */
  double  fjgorigPrem[FRP_CNT];                     /* 자유설계원보험료 */
  double  fjgprem[FRP_CNT];                         /* 자유설계보험료 */
  /* 자유설계가입상품추가       */
  varchar fjggoodCodeName[FRP_CNT][255+1];          /* 상품코드_명 */
  varchar fjgpytrInqrCode[FRP_CNT][10+1];           /* 납입기간조회코드 */
  varchar fjgintrInqrCode[FRP_CNT][10+1];           /* 보험기간조회코드 */

  /* 청약서발행이력             */
  varchar srdoPublDate[8+1];                    /* 발행일자 */

  /* 계약간관계                 */
  varchar cnttBwtnRlcd[10+1];                   /* 계약간관계코드 */
  varchar mainPolyNo[9+1];                      /* 주증권번호 */
  varchar scndPolyNo[12+1];                     /* 종증권번호 */
  varchar udtkCmpnDvsn[1+1];                    /* 인수회사구분 */

  /* 보험료수금정보             */
  varchar grpCnttAdno[12+1];                    /* 단체계약관리번호 */
  varchar premPaymDvsn[1+1];                    /* 보험료납입구분 */
  varchar collMetdCode[10+1];                   /* 수금방법코드 */
  varchar collOrgnCode[5+1];                    /* 수금기관코드 */
  varchar collLpPrno[8+1];                      /* 수금설계사고유번호 */
  varchar addrKdcd[10+1];                       /* 주소종류코드 */
  varchar aupyOnceGryn[1+1];                    /* 자동납입일시유예여부 */
  varchar paymGracYn[1+1];                      /* 납입유예여부 */
  varchar aulnPaymYn[1+1];                      /* 자동대출납입여부 */
  varchar lastRecpDate[8+1];                    /* 최종영수일자 */
  varchar lastPaymYm[6+1];                      /* 최종납입년월 */
  varchar lastRecvDldt[8+1];                    /* 최종입금처리일자 */
  /* 보험료수금정보추가         */
  varchar zipNo1[3+1];                          /* 수금지우편번호1 */
  varchar zipNo2[3+1];                          /* 수금지우편번호2 */
  varchar zipNo3[3+1];                          /* 수금지우편번호3 */

  varchar dtorCtorReln[10+1];                   /* 예금주와계약자와의 관계 */
  /* 계약입출금등록정보         */
  varchar crwcustId      [CRW][ 10 + 1];  /* 고객ID                    */
  varchar finaOrgnCode   [CRW][  3 + 1];  /* 금융기관코드              */
  varchar finaOrgnDvsn   [CRW][  1 + 1];  /* 금융기관구분              */
  varchar acctCardNo     [CRW][ 20 + 1];  /* 계좌_카드번호             */
  varchar cardVlidEdym   [CRW][  6 + 1];  /* 카드유효만료년월          */
  varchar bankBrchCode   [CRW][ 10 + 1];  /* 은행지점코드              */
  varchar trnfHopeDd     [CRW][  2 + 1];  /* 이체희망일                */
  varchar dlngOrgnCode   [CRW][  5 + 1];  /* 처리기관코드              */
  varchar cardOwnrName   [CRW][ 50 + 1];  /* 카드소유자명              */
  varchar cardOwnrRrno   [CRW][ 13 + 1];  /* 카드소유자주민등록번호    */
  varchar cnttRcwcUsdv   [CRW][  2 + 1];  /* 2회이후계약입출금사용구분 */
  varchar dpsrDvsn       [CRW][  1 + 1];  /* 예금주실명번호종류 : 0:개인 또는 외국인, 1:사업자, 2:여권번호     */
  varchar agreDataDvsn   [CRW][  1 + 1];  /* 동의자료구분 : 1:서면, 2:공인인증서, 3:일반인증서, 4:녹취, 5:ARS  */
  varchar agreDataAddr   [CRW][500 + 1];  /* 동의자료주소 : 각 서버로 부터 파일을 특정할 수 있는 식별 값       */
  varchar rqstSeqNo      [CRW][ 15 + 1];  /* 신청일련번호  */

  /* 간편계약입출금등록정보         */
  double  cnvnCnt;                              /* 간편계좌_건수 */
  varchar cnvnCrwcustId      [CVCRW][ 10 + 1];  /* 고객ID                    */
  varchar cnvnFinaOrgnCode   [CVCRW][  3 + 1];  /* 금융기관코드              */
  varchar cnvnFinaOrgnDvsn   [CVCRW][  1 + 1];  /* 금융기관구분              */
  varchar cnvnAcctCardNo     [CVCRW][ 20 + 1];  /* 계좌_카드번호             */
  varchar cnvnBankBrchCode   [CVCRW][ 10 + 1];  /* 은행지점코드              */

  varchar speaDivdAtSndYn[  1 + 1];  /* 분할/배당금자동송금여부   */
  /* 계약관계자역할             */
  /* 계약관계자                 */
  double  crmCnt;                               /* 계약관계자_건수 */
  double  cnttPrtrNo[CRM];                      /* 계약관계자번호  */
  double  insuNo[CRM];                          /* 피보험자번호   */
  varchar custRoleCode[CRM][10+1];              /* 고객역할코드 */
  varchar custId[CRM][10+1];                    /* 고객ID */
  varchar sex[CRM][1+1];                        /* 성별 */
  double  joinAge[CRM];                         /* 가입연령 */
  double  lfepYear    [CRM]      ;              /*기대여명*/
  int     fullAge     [CRM]      ;              /*만연령*/
  varchar minsRelnCode[CRM][10+1];              /* 주피와의관계코드 */
  varchar mediKindCode[CRM][10+1];              /* 진단종류코드 */
  varchar mediJugmExyn[CRM][4+1];               /* 의무판정존재여부 */
  /* 2004.05.17 */
  varchar occpCode[CRM][10+1];                  /* 직종코드 */
  varchar idacBntpCode[CRM][10+1];              /* 산재업종코드 */
  varchar hobyCode[CRM][10+1];                  /* 취미코드 */
  varchar drveCatpCode[CRM][10+1];              /* 운전차종코드 */
  varchar riskGradCode[CRM][10+1];              /* 위험등급코드 */
  varchar wlisDtivObyn[CRM][1+1];               /* 종신보험의무조사대상여부 */
  varchar prevMediObyn[CRM][1+1];               /* 선진단대상여부 */
  varchar mdobXtrtRscd[CRM][10+1];              /* 진단대상발췌사유코드 */
  varchar spclRcntKdcd[CRM][10+1];              /* 특별승인종류코드 */
  double  premCalcApag[CRM];                    /* 보험료산출적용연령 */
  varchar splsBodyYn[CRM][1+1];                 /* 초과체여부 */
  varchar prevPaymPrstYn[CRM][1+1];             /* 기지급급부체여부 */
  varchar frnrDvsnCode[CRM][10+1];              /* 외국인구분코드 */
  varchar frnrStayCode[CRM][10+1];              /* 외국인체류코드 */
  varchar hndrDvsnCode[CRM][10+1];              /* 장애인구분코드 */

  /* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁            */
  varchar injrOccpCode[CRM][10+1];              /* 상해직종코드 */
  varchar injrRiskGrcd[CRM][10+1];              /* 상해위험등급코드 */

  /* 계약관계자추가             */
  varchar custRrno[CRM][13+1];                  /* 고객주민번호 */
  varchar custName[CRM][50+1];                  /* 고객명 */
  double  spclMediAmt[CRM];                     /* 특별진단금액 */
  double  nrmlMediAmt[CRM];                     /* 보통진단금액 */
  varchar retnPaymDvsn[CRM][10+1];              /* 반송지급구분 1=반송,2=지급 */
  varchar retnPaymRscd[CRM][10+1];              /* 반송지급사유코드 */
  varchar stdbSbstKdcd[CRM][10+1];              /* 표준체_표준하체종류코드 */
  varchar b26DChecMediYn[CRM][1+1];             /* 26일이전종진선테진단여부 */
  double  calcAmtA01[CRM];                      /* 사정항목코드A01합산금액 */
  double  calcAmtC01[CRM];                      /* 사정항목코드C01합산금액 */
  double  calcAmtF01[CRM];                      /* 사정항목코드F01합산금액 */
  double  calcAmtD01[CRM];                      /* 사정항목코드D01합산금액 */
  double  calcAmtG03[CRM];                      /* 사정항목코드G03합산금액 */
  varchar extraPerson[CRM][1+1];                /* 할증체   여부 할증_cho */
  double  oocsAmtA08[CRM];                      /* 사정항목코드A08단건금액 */
  /* 2008.07.01 실손가입가능여부 추가, 이화진                                 */
  varchar pmmiJoinYn[CRM][1+1];                 /* 실손가입가능여부 */
  varchar pmmiDoubJnyn[CRM][1+1];               /* 실손중복여부 */
  /* 일반사망 단건합산 (2005.07.23 장두원) */

  /*------------------------------------------------------------------------*/
  /* 전결한도변경관련 추가항목 (2005.12.23 장두원) */
  double  calcAmtD02[CRM];                      /* 사정항목코드D02 */
  double  calcAmtB12[CRM];                      /* 사정항목코드B12 */
  double  oocsAmtA01[CRM];                      /* 사정항목코드A01단건 */
  double  oocsAmtD02[CRM];                      /* 사정항목코드D02단건 */
  double  oocsAmtB12[CRM];                      /* 사정항목코드B12단건 */
  double  assmLmitRdexA01[CRM];                 /* 사정항목축소확대A01 */
  double  assmLmitRdexD02[CRM];                 /* 사정항목축소확대D02 */
  double  assmLmitRdexB12[CRM];                 /* 사정항목축소확대B12 */
  double  lmitAmtA01[CRM];                      /* 한도금액A01 */
  double  lmitAmtD02[CRM];                      /* 한도금액D02 */
  double  lmitAmtB12[CRM];                      /* 한도금액B12 */
  /*------------------------------------------------------------------------*/

  /* 수익자                     */
  double  bnfCnt;                               /* 수익자수 */
  double  dedCnt;                               /* 사망복수수익자수 */
  double  bnfcCnttPrtrNo[CRM];                  /* 계약관계자번호  */
  varchar bnfccustRoleCode[BNF][10+1];          /* 고객역할코드 */
  varchar bnfccustId[BNF][10+1];                /* 고객ID */
  double  bnfcPrioRank[BNF];                    /* 수익자우선순위 */
  double  recvRato[BNF];                        /* 수령비율 */
  varchar bnfcminsRelnCode[BNF][10+1];          /* 주피와의관계코드 */
  varchar bnfccustRrno[BNF][13+1];              /* 고객주민번호 */
  varchar bnfcsex[BNF][1+1];                    /* 성별 */
  double  bnfcjoinAge[BNF];                     /* 가입연령 */

  /* 계약고지정보               */
  double  cniCnt;                               /* 계약고지고객건수 */
  varchar cniCustId[CNI][10+1];                 /* 고객ID */
  varchar dshsCnfmRtdv[CNI][10+1];              /* 병력확인경로구분 */
  double  notcSeqNo[CNI];                       /* 고지일련번호 */
  varchar notcCanoDvsn[CNI][10+1];              /* 고지원인번호구분 */
  varchar notcCano[CNI][16+1];                  /* 고지원인번호 */
  varchar notcYn[CNI][1+1];                     /* 고지유무 */
  double  wekyDrnkCnt[CNI];                     /* 주당음주횟수 */
  varchar drnkKdcd[CNI][10+1];                  /* 음주종류코드 */
  double  t01DrnkQnty[CNI];                     /* 1회음주량 */
  double  dalySmokQnty[CNI];                    /* 일당흡연량 */
  double  smokTerm[CNI];                        /* 흡연기간 */
  double  otcmInsrJnct[CNI];                    /* 타사보험가입건수 */
  double  otcmInsrJnpm[CNI];                    /* 타사보험가입보험료 */
  varchar ovseRkarDpyn[CNI][1+1];               /* 해외위험지역출국여부 */
  varchar hndlBsnsName[CNI][200+1];             /* 취급업무명 */
  varchar wkplDeptRknm[CNI][100+1];             /* 직장/부서/직위명 */
  varchar sdjbName[CNI][50+1];                  /* 부업명 */
  double  hght[CNI];                            /* 신장 */
  double  wght[CNI];                            /* 몸무게 */
  varchar cniDrveCatpCode[CNI][10+1];           /* 운전차종코드 */
  varchar cniOccpCode[CNI][10+1];               /* 직종코드 */
  varchar cniRiskGradCode[CNI][10+1];           /* 위험등급코드 */
  varchar cniHobyCode[CRM][10+1];               /* 취미코드 */
  varchar ry1WghtInyn[CNI][1+1];               /* 최근1년체중증감여부   (EUS) */
  varchar otcmIamtRcyn[CNI][1+1];              /* 타사보험금수령여부    (EUS) */
  varchar otcmSstdRgyn[CNI][1+1];              /* 타사표준하체등록여부  (EUS) */
  double  cniEmbrPregMcnt[CNI];                /* 태아임신개월수        (EUS) */
  varchar cniEmbrIspeOdyn[CNI][1+1];           /* 태아검사이상유무      (EUS) */

  /* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁            */
  varchar cniInjrOccpCode[CNI][10+1];           /* 상해직종코드 */
  varchar cniInjrRiskGrcd[CNI][10+1];           /* 상해위험등급코드 */

  /* 운전차종고지정보           */
  double  minsDniCnt;                           /* 주피운전차종건수 */
  double  scndDniCnt;                           /* 종피운전차종건수 */
  char    dniDrveCatpCode[CNI][DNI][10+1];      /* 운전차종코드 */

  int     disorderCnt;                         /* 질병   건수           (EUS) */
  double  disorderSeqNo[DOR];                  /* 질병   순번           (EUS) */
  varchar dorCustRoleCode[DOR][10+1];          /* 고객역할코드          (EUS) */
  varchar dorCustId[DOR][10+1];                /* 고객ID                (EUS) */
  varchar fromRmdy[DOR][8+1];                  /* 치료일수 FROM         (EUS) */
  varchar toRmdy[DOR][8+1];                    /* 치료일수 TO           (EUS) */
  varchar rmdyDays[DOR][4+1];                  /* 치료일수              (EUS) */
  varchar rmtmXpctYn[DOR][4+1];                /* 치료일수추산여부      (EUS) */
  varchar dorDsasName[DOR][56+1];              /* 질병명                (EUS) */
  varchar dorDsasCode[DOR][15+1];              /* 질병코드              (EUS) */
  varchar hospYn[DOR][1+1];                    /* 입원여부              (EUS) */
  varchar otpaRmdyYn[DOR][1+1];                /* 통원치료여부          (EUS) */
  varchar operYn[DOR][1+1];                    /* 수술여부              (EUS) */
  varchar mdctYn[DOR][1+1];                    /* 투약여부              (EUS) */
  varchar acrcIspeYn[DOR][1+1];                /* 정밀검사여부          (EUS) */
  varchar ctryYn[DOR][1+1];                    /* 완치여부              (EUS) */
  varchar rlpsXprcYn[DOR][1+1];                /* 재발경험여부          (EUS) */

  int     hostCnt;                             /* 입원기간 건수         (EUS) */
  double  hotDorSeqNo[HOT];                    /* 질병 순번             (EUS) */
  varchar hotCustId[HOT][10+1];                /* 고객ID                (EUS) */
  varchar hospStdt[HOT][8+1];                  /* 입원시작일자          (EUS) */
  varchar hospEndt[HOT][8+1];                  /* 입원종료일자          (EUS) */
  varchar hospTermXpyn[HOT][1+1];              /* 입원기간추산여부      (EUS) */
  varchar hospDays[HOT][4+1];                  /* 입원일수              (EUS) */

  int     obsCnt;                              /* 장애고지건수          (EUS) */
  varchar obsCustRoleCode[OBS][10+1];          /* 고객역할코드          (EUS) */
  varchar obsCustId[OBS][10+1];                /* 고객ID                (EUS) */
  varchar obstOcdt[OBS][8+1];                  /* 장애발생일자          (EUS) */
  varchar obstCten[OBS][200+1];                /* 장애내용              (EUS) */
  varchar acciYn[OBS][4+1];                    /* 재해여부              (EUS) */
  varchar inbrDsasYn[OBS][4+1];                /* 선천적질병여부        (EUS) */
  varchar acqrDsasYn[OBS][4+1];                /* 후천적질병여부        (EUS) */
  /*varchar obstResn           [OBS][300+1];     장애사유              (EUS)*/

  int     fhdCnt;                              /* 가족력 건수           (EUS) */
  varchar fhdCustRoleCode[FHD][10+1];          /* 고객역할코드          (EUS) */
  varchar fhdCustId[FHD][10+1];                /* 고객ID                (EUS) */
  varchar fhdFmlyRelnCode[FHD][2+1];           /* 가족관계코드          (EUS) */
  varchar fhdDsasCode[FHD][15+1];              /* 질병코드              (EUS) */
  varchar fhdDsasCten[FHD][192+1];             /* 질병내용              (EUS) */
  double  attkTimeAge[FHD];                    /* 발병시연령            (EUS) */
  double  deadTimeAge[FHD];                    /* 사망시연령            (EUS) */

  int     usiCnt;                              /* 일상생활고지 건수     (EUS) */
  varchar usiCustRoleCode[USI][10+1];          /* 고객역할코드          (EUS) */
  varchar usiCustId[USI][10+1];                /* 고객ID                (EUS) */
  varchar moveAsst[USI][1+1];           /* 타인도움종류/이동(보행)하기  (EUS) */
  varchar mealAsst[USI][1+1];           /* 타인도움종류/식사하기        (EUS) */
  varchar bthrUseAsst[USI][1+1];        /* 타인도움종류/화장실사용하기  (EUS) */
  varchar bathAsst[USI][1+1];           /* 타인도움종류/목욕하기        (EUS) */
  varchar clotPtonAsst[USI][1+1];       /* 타인도움종류/옷입기          (EUS) */
  varchar whchUseYn[USI][1+1];  /* 기구장비종류/휠체어(보조이동장치포함)(EUS) */
  varchar wdftCaneUsyn[USI][1+1];       /* 기구장비종류/목발ㆍ지팡이    (EUS) */
  varchar aaUsyn[USI][1+1];             /* 기구장비종류/도뇨관          (EUS) */
  varchar oxbtEqmtUsyn[USI][1+1];       /* 기구장비종류/산소호흡장비    (EUS) */
  varchar atbtEqmtUsyn[USI][1+1];       /* 기구장비종류/인공호흡장비    (EUS) */
  varchar ftdvUsyn[USI][1+1];           /* 기구장비종류/투석장치        (EUS) */
  varchar othrAsdvUsyn[USI][1+1];       /* 기구장비종류/기타보조장구    (EUS) */
  varchar mditXprcYn[USI][1+1];         /* 의료요양시설경험유무         (EUS) */
  varchar fmlyLvtgYn[USI][1+1];         /* 가족유무                     (EUS) */

  int     compassYn;                           /* COMPASS심사 대상여부  (EUS) */
  varchar resultLevelId[10+1];
  int     cpmtDocuCnt;                         /* 보완서류건수          (EUS) */
  varchar cpmtDocuCode[ARRAY_SIZE][12+1];      /* 보완서류코드          (EUS) */
  varchar cpmtResnCode[ARRAY_SIZE][12+1];      /* 보완사유코드          (EUS) */
  varchar cpmtCustId[ARRAY_SIZE][12+1];        /* 보완대상고객ID        (EUS) */

  /* 보험검진대상               */
  varchar mediObjtCtid[10+1];                   /* 검진대상고객ID */
  varchar mediObjtStcd[10+1];                   /* 진단대상상태코드 */
  varchar mediDate[8+1];                        /* 진단일자 */
  varchar prevMediYn[1+1];                      /* 선진단여부 */
  varchar lastPublDate[8+1];                    /* 최종발행일자 */
  double  pvctMediAmt;                          /* 기계약진단금액 */
  varchar bsnsDvsnCode[10+1];                   /* 업무구분코드 */
  varchar causPyno[9+1];                        /* 원인증권번호 */
  varchar mediExecYn[1+1];                      /* 진단실시여부 */
  double  ndsnMediCost;                         /* 미확정진단비용 */
  varchar vistMediExyn[1+1];                    /* 방문진단추출여부 */
  double  medoPublCnt;                          /* 진단서발행횟수 */
  varchar rqstDate[8+1];                        /* 요청일자 */
  varchar mediTmltDate[8+1];                    /* 진단시한일자 */
  varchar chrgOffcCode[5+1];                    /* 담당영업소코드 */
  double  mdorAdno;                             /* 검진기관관리번호 */
  varchar medoRmtnDate[8+1];                    /* 진단서송부일자 */
  double  admnChecAdno;                         /* 관리종진센타관리번호 */
  double  chafMdorAdno;                         /* 변경후검진기관관리번호 */
  varchar medoRecpStcd[10+1];                   /* 진단서접수상태코드 */
  varchar pmdoRecpStcd[10+1];                   /* 직전진단서접수상태코드 */
  varchar othrCondName[200+1];                  /* 기타조건명 */
  varchar cnttPrrmYm[6+1];                      /* 계약예정년월 */
  double  etdrAdno;                             /* 촉탁의관리번호 */

  /* 계약심사                   */
  varchar relnJudgDvsn[10+1];                   /* 관계심사업무구분 */
  /* 2004.05.17 */
  varchar ardcLmitDvsn[10+1];                   /* 전결한도구분 */
  varchar frstJudgMpno[8+1];                    /* 1차심사자사번 */
  varchar scndJudgMpno[8+1];                    /* 2차심사자사번 */
  varchar thrdJudgMpno[8+1];                    /* 3차심사자사번 */
  varchar crntJudgMpno[8+1];                    /* 현재심사자사번 */

  /* 신계약일마감               */
  double  t01Cvmf;                              /* 1회차환산월초 */
  double  t04Cvmf;                              /* 4회차환산월초 */
  double  t07Cvmf;                              /* 7회차환산월초 */
  double  t13Cvmf;                              /* 13회차환산월초 */
  double  t25Cvmf;                              /* 25회차환산월초 */
  double  lupyCvmf;                             /* 일시납환산월초 */
  double  frsyPrem;                             /* 초년도보험료 */
  double  seyrPrem;                             /* 2차년도보험료 */


  double  totCvmf;                              /* 총   환산월초 */

  varchar vlnsYn[1+1];                          /* 변액보험여부 */

  /* 계약전환 관련 */
  int     oldPolyCnt;                           /* O 전환전증번건수 */
  varchar oldPolyNo[ARYCNT_200][9+1];           /* O 전환전증번 */
  double  nrdMcnt[ARYCNT_200];                  /* O 미상각월수 */
  double  cnvsAmt[ARYCNT_200];                  /* O 전환금액 */
  double  stplLoanAmt[ARYCNT_200];              /* O 약관대출금액 */
  double  sum_stplAmt;                          /* 약관대출금액합계 */
  varchar asmtOfdy[4+1];                        /* 지정휴무일 */

  /* 2006.06 진단변경관련 (2006.06.19) */
  char srdoRecpYn[10+1];     /* 진단서입력여부 */

  varchar arsCnttYn[4+1];                    /* I 영업외 청약 가능건 여부 */
  varchar memoCten[400+1];                      /* U/W특이사항 메모 */

  /* 2008.08 U/W특이사항 관련 (2006.08.19) */
  varchar memoCode[10+1];                    /* U/W특이사항 메모코드 */

  /* 2008.04.01 양용현 추가 */
  varchar hndrYn[4+1];                        /* 장애심사대상여부 */

  /* 2008.05.19 이화진 추가 */
  varchar finaYn[4+1];                        /* 재정UW대상여부 */

  /* 기관전결 상품별 단건합산금액 처리하기 위한 변수*/
  double tempAmt[8];

#ifdef IPSL_DBCT
  /* 2009.02.20 불완전판매의심계약발췌시스템을 위한 사망보험금(일시납제외) */
  double deadAmt[8];
#endif

  /* 2008.09.18 교차판매여부 추가 */
  varchar crosSaleYn[4+1];                     /* 교차판매여부 */
  varchar custCrinMncd[4+1];                   /* 고객신용정보조치코드 */

  /* 2015.01.01 고객정보조회 동의 고객입력(TB_CSCIN200) -> 2017.05.01 상품소개 및 고객분석 수집이용/제공 동의여부(TB_CSCIN010/020)*/
  double  cinCustCnt;                         /* 동의 대상건 입력건수 */
  varchar cinCustId   [9][10+1];              /* 동의 대상고객id      */
  varchar cinAgreYn   [9][ 1+1];              /* 상품소개 수집이용 동의여부 */
  varchar cntaMetdDvsn[9][10+1];              /* 상품소개 연락방식구분         */
  double  agreRqstTerm[9]      ;              /* 상품소개 동의기간(개월)       */

  varchar cinOferAgreYn [9][ 1+1];            /* 상품소개 제공 동의여부 */
  varchar AnalAgreYn    [9][ 1+1];            /* 고객분석 수집이용 동의여부 */
  double  AnalRqstTerm  [9]      ;            /* 고객분석 동의신청기간  */
  varchar AnalOferAgreYn[9][ 1+1];            /* 고객분석 제공 동의여부 */

  varchar AgreSmsAgYn   [9][ 1+1];            /* 문자 수신 동의여부 */
  varchar AgreEmailAgYn [9][ 1+1];            /* 이메일 수신 동의여부 */

  varchar clltLpCtid  [10+1];                          /* 모집FP 고객ID */

  /* 2012.02.17 자필녹취여부 추가 */
  varchar holoRecYn[4+1];                /* 자필녹취여부(자필:N,녹취:Y) */

  varchar savnTxfrYn[1+1];                      /* 저축성비과세선택여부 */
  varchar frplSavnTxfrYn[1+1];          /* 자유설계저축성비과세선택여부 */

  double  connMcntPrem;                  /* 관련주계약보험료(president) */
  varchar connPolyNo[9+1];                   /* 연계증권번호(president) */

  varchar srvcRoutDvsn[10+1];                       /* 서비스 호출 경로 */
  varchar ftcaObjtYn[1+1]; /* 금융정보교환을 위한 본인확인(ftca) 대상여부 */
  varchar spprAuwdPyot[1+1];                    /* 특약보험료자동인출납입옵션 */
  varchar autoRejnAgyn[1+1];                    /* 자동재가입동의여부 */
  varchar cddEddYn[1+1];                        /* AML변경여부 */
  varchar tablCnfmYn[1+1];                      /* 전자서명청약을위한피보험자서면동의서 스캔여부 */

  varchar imtyRecpYn[1+1];             /* 바로접수여부 */
  varchar finaUwDvsn[10+1];                            /* 재정질의서 발행구분 */
  double  maxSumCalcAmt;                       /* 재정U/W - 일반사망합산 최대 */
  double  maxOocsCalcAmt;                      /* 재정U/W - 일반사망합산 최대 */
  double  maxOthrPrstTota;                     /* 재정U/W - 타사사망합산 최대 */
  varchar dntnSpctSlctYn[1+1];                            /* 기부특약선택여부 */
  varchar crdtGrdv  [4+1];                     /* 신용등급  */

  int     syncCnt;                        /* 싱크아이디건수 :2013.07.05 */
  varchar syncCustId[10][10+1];           /* 싱크아이디     :2013.07.05 */

  /* 펀드가입정보 */
  double  fndCnt                            ; /* I :펀드개수                */
  varchar joinFundCode     [FUN][5+1]       ; /* I :펀드코드                */
  double  joinRato         [FUN]            ; /* I :펀드가입비율            */

  varchar billNo[24+1];                       /* 결재대행 시 어음번호 */

  varchar cnvnNotcYn1[1+1];         /* 간편가입 고지여부1 */
  varchar cnvnNotcYn2[1+1];         /* 간편가입 고지여부2 */
  varchar cnvnNotcYn3[1+1];         /* 간편가입 고지여부3 */

  varchar brshCnfmYn[1+1];         /* 양치습관서비스 대상여부 */
  varchar bsthSvagYn[1+1];         /* 양치습관서비스 동의여부 */

  varchar brthExpcDate[8+1];         /* 출생예정일자 */

  varchar cnvnGoodCscd[12+1];         /* 간편상품분류코드 */

  /* 장애인 세제전환특약 신청정보         */
  double  dsabTxcvCnt;                        /* 신청고객_건수  */
  varchar dsabCustRqstDvsn    [CRM][10 + 1];  /* 고객신청구분   */
  varchar dsabCustRoleCode    [CRM][10 + 1];  /* 고객역할코드   */
  varchar dsabCustId          [CRM][10 + 1];  /* 고객ID         */
  varchar dsabDvcd            [CRM][ 2 + 1];  /* 장애구분       */
  varchar dsabStrtTerm        [CRM][ 8 + 1];  /* 장애시작일자   */
  varchar dsabEndTerm         [CRM][ 8 + 1];  /* 장애종료일자   */

  /* 은행별 초회가상계좌 조회를 위한 일련번호 */
  double  fsvtSeqNo;
  varchar imagAcctNo[16+1];         /* 초회계좌번호 */
};

EXEC SQL END DECLARE SECTION;

/*----------------------------------------------------------------------*
 * Tuxedo Queue 선언부
 *----------------------------------------------------------------------*/
/* TPQCTL  qctl; */

/*----------------------------------------------------------------------*
 * DATA 선언부
 * 용도 : FML 및 Database 관련 데이타 변수를 선언한다.
 *----------------------------------------------------------------------*/

/*----------------------------------------------------------------------*
 * Working 변수 선언부
 * 용도 : 내부/외부 사용 임시 변수를 선언한다.
 *----------------------------------------------------------------------*/
static  char    *fnName =   "SVncapl300in1";
static  char dmsg[500+1];

/*----------------------------------------------------------------------*
 * 외부 FUNCTION 선언부
 * 용도 : 소스 외부 사용 함수를 선언한다.
 *----------------------------------------------------------------------*/
extern int  CMNC_judgMainChck_CC(ST_APL100_INOUT *stj, ST_ERRCONTENT *err);
extern int  CMNC_CityChungyak_CC(char *poly_no);
extern int  CMNC_growupCenterSrch_CC(char *lpPrno, char *stddDate,char *origPstnOgcd, char *workPstnOgcd);
extern void CMNC_srdoRecpCncl_sf(char* src, char* mask);
extern int  CMCP_AutoLoanRequest_CC(CMCP_AutoLoanRequest *stp);
extern int  CMNC_imtrTrnfClac_CC(CMNC_imtrTrnfClac *itc, ST_ERRCONTENT     *st_errcontent);
extern int  CMCP_PremiumInputProc_CC(UvT *tyCP);
extern int  CMCP_EDWRealSync_CC(char* chr1, char chr2, char* chr3);
extern char * ST_Trim(char *s);
extern int  CMNC_fatcaInptChck_CC(char *srchDvsn, char *admnNo);
extern int  ST_SubstrTo(char *output, char *input, int i_begin, int i_end);
extern int  NC_onLineChck(char *orgnCode, char *onLineYn);
extern int  CMNC_finaUwexSrch(CMNC_finaUdwr_Inpt *fui);
extern int  CMNC_finaUdwrChck(CMNC_finaUdwr_Inpt *fui, CMNC_finaUdwr_Outp *fuo);
extern int  CMNC_finaUwdtSave(char * polyNo,  char * joltCalcDvsn,
                             double maxSumCalcAmt,
                             double maxOocsCalcAmt,
                             double maxOthrPrstTota);
extern int  NC_goodsSpecTypeSrch(char          *goodCodeDtal,
                                 char          *goodCodeItem,
                                 char          *spclTypeDvcd,
                                 char          *stddDate    ,
                                 char          *spclTypeDtdv,
                                 char          *spclTypeSmry,
                                 char          *spclTypeYn  ,
                                 ST_ERRCONTENT *st_errcontent); /* 상품특이유형조회 */
extern  int  CMNC_altkMsg_CC(ST_altk *altkMsg);

/*----------------------------------------------------------------------*
 * 내부 FUNCTION 선언부
 *----------------------------------------------------------------------*/
void SVncapl300in1_initialValueSet (struct stp_SVncapl300in1 *stp);
void SVncapl300in1_getValue(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMNC_acceptCutoff_CC(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_initSet(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMAC_com113vw_CC(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in11Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in09Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_setValue(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_freePlanRsfn(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_cnttStatCode(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_recpDate_stddDate_inptPoss(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_cnttDate(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in10Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300in10Sp(struct stp_SVncapl300in1 *stp); /* 증번별 지연입력승인 여부조회 */
void SVncapl300in1_dcncApl300in18Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in21Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in47Sp(struct stp_SVncapl300in1 *stp); /* 계약부속정보 update */
void SVncapl300in1_dcncApl300in02Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl100in23Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl100in18Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in19Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in01Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in07Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in14Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in04Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in20Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in05Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in12Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_srdoVlidTermChek(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in17Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_ftprRmtnDate(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in26Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_spclDateTrnf(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_card(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_realTime(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_aplcni(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in28Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in29Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMNC_insoCnttChck(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_freePlanJudg(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMNC_judgMainChck(struct stp_SVncapl300in1 *stp, int freePlanDvsn);
void SVncapl300in1_recp_auto(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMNC_cust_octm_med(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_bussClogYm(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_recp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_AutoLoanRequest(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncCmncsnlb08Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMNC_udwrNotc_CC(struct stp_SVncapl300in1 *stp);
/* void SVncapl300in1_bowanBalche(struct stp_SVncapl300in1 *stp); */
void SVncapl300in1_imtyTrnf(struct stp_SVncapl300in1 *stp, struct stp_SVncapl300in1_realTrnf *stp_real);
void SVncapl300in1_dcncApl300in08Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_frsy_seyr_prem(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in35Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_PremiumDemandCreate_CC(struct stp_SVncapl300in1 *stp, int freePlanDvsn);
void SVncapl300in1_PremiumInputProc_CC(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMNC_taxPrctRgst(struct stp_SVncapl300in1 *stp,int ii);
void SVncapl300in1_CMNC_savingtxfrPrctRgst(struct stp_SVncapl300in1 *stp,int ii);
void SVncapl300in1_dencApl300vw21Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300vw23Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencUncaplstf002Sp(char *polyNo);
void SVncapl300in1_dcncCmncdcss20Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncCmncdcss24Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncCmncdcss25Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_chkConst1(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_chkConst2(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_trsfCond(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_CMPA_procTransCtt(struct stp_SVncapl300in1 *stp);
/* void SVncapl300in1_setRelnJudgDvsn(struct stp_SVncapl300in1 *stp); */ /* 2004.05.17 */
void SVncapl300in1_dcncApl300in39Sp(struct stp_SVncapl300in1 *stp);

void SVncapl300in1_freePlanRetu(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_realTime2(struct stp_SVncapl300in1 *stp);

void SVncapl300in1_custInfoChck(struct stp_SVncapl300in1 *stp); /* 청약서발행후 고객정보 변경확인 (2005.03.04 장두원) */
void SVncapl300in1_cardRcnt2(struct stp_SVncapl300in1 *stp);

void SVncapl300in1_edwCall(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in22Sp(struct stp_SVncapl300in1_realTrnf *stp_real);
void SVncapl300in1_arsTime(struct stp_SVncapl300in1 *stp);
/* int  SVncapl300in1_chckCso(CMNC_custSumCalc_Outp* cso); */
void SVncapl300in1_CMNC_ErpHub2(struct stp_SVncapl300in1 *stp); /* 2006.11.29 김무근 */
void SVncapl300in1_dencapl300in48Sp(struct stp_SVncapl300in1 *stp); /* 2007.4.16 이화진 */
void SVncapl300in1_dencApl300in49Sp(struct stp_SVncapl300in1 *stp); /* 2008.4.1  양용현 */
void SVncapl300in1_dencSncudwcje003Sp(struct stp_SVncapl300in1 *stp); /* 2008.5.19 이화진 */
void SVncapl300in1_dencApl300in50Sp(struct stp_SVncapl300in1 *stp); /* 교차판매여부 */
/*void SVncapl300in1_klessChck(struct stp_SVncapl300in1 *stp);  전자청약 관련 체크 */
void SVncapl300in1_dccsApl300in53Sp(struct stp_SVncapl300in1 *stp); /* 상품소개 및 고객분석 동의여부 입력 */
void SVncapl300in1_dencApl300in56Sp(struct stp_SVncapl300in1 *stp); /* 보종별 펀드보증 최신 펀드코드 반영 */
/*int  SVncapl300in1_stblPrcpApplyYn_CC (char *stblPrcpApplyYn, struct stp_SVncapl300in1 *stp);  적합성 적용여부 */
void SVncapl300in1_dencUisocictt003Sp(struct stp_SVncapl300in1 *stp); /* 타사계약 인수 증권번호 저장 */
void SVncapl300in1_dencUisocipat001Sp(struct stp_SVncapl300in1 *stp); /* 타사계약 인수 증권번호 저장 */
void SVncapl300in1_welcomeDreamPremiumInputProc(struct stp_SVncapl300in1 *stp); /* 웰컴드림 입금 정보 생성 */
void SVncapl300in1_dencIisrcvprm001Sp(struct stp_SVncapl300in1 *stp, double *diff, int *lupyYn, int *nlpyYn); /* 웰컴드림(계약이전상품) 이전 금액 입금 생성 */
void SVncapl300in1_dencUisaplctt002Sp(struct stp_SVncapl300in1 *stp); /* 계약 테이블 합계보험료,합계원보험료 수정 */
void SVncapl300in1_dencApl300in58Sp(struct stp_SVncapl300in1 *stp); /* 계약인수 상품 웰컴드립 청약시 기 처리여부 체크 */
void SVncapl300in1_presidentChck(struct stp_SVncapl300in1 *stp); /* 프레지던트 제한 사항 체크 */
void SVncapl300in1_dencApl300in59Sp(struct stp_SVncapl300in1 *stp, int *retCnt); /* 프레지던트 연계계약 정보 조회 */
void SVncapl300in1_dcncApl100in11Sp(struct stp_SVncapl300in1 *stp); /* 계약간관계 저장(프레지던트 보종 전용) */
void SVncapl300in1_imtrAnntJoinLmitChck(struct stp_SVncapl300in1 *stp); /* 방카제휴기관별 바로연금 가입한도금액 초과여부 체크 */
void SVncapl300in1_mdm_getPersonUpdate (struct stp_SVncapl300in1 *stp);  /*2013.05.31 mdm 추가*/
void SVncapl300in1_onLineChck (void);  /*2014.12.31 Tablet 추가*/
void SVncapl300in1_readData (struct stp_SVncapl300in1 *stp);  /*2014.12.31 Tablet 추가*/

int SVncapl300in_dcncApl214in14Sp (struct stp_SVncapl300in1 *stp); /* 2008.8.1 신진혁 */
int SVncapl300in_dencApl214in04Sp (struct stp_SVncapl300in1 *stp); /* 2015.4.1 이  경 */

#ifdef IPSL_DBCT
void SVncapl300in1_dencApl300in51Sp(struct stp_SVncapl300in1 *stp); /* 2009.2.20 이화진 */
#endif

/* 적합성원칙 진단 고객승인 및 결과 만료처리
void SVncapl300in1_stblPrcpExprProc_CC (struct stp_SVncapl300in1 *stp);
*/
int  SVncapl300in1_growupChck(char *lpPrno, char *cnttDate);
int  SVncapl300in1_kNet_ProcReport(char *polyNo);
int  SVncapl300in1_DENC_APL300IN62(struct _denc_apl300in62_sp_in  *in_st,
                                   struct _denc_apl300in62_sp_out out_st[]);
void SVncapl300in1_DCUV_ALRINS001    (struct _dcuv_alrins001_sp_in *in_st);
void SVncapl300in1_dencIisaplrci001Sp(struct stp_SVncapl300in1 *stp); /* 양육전환자금 신청시 정보저장 */
void SVncapl300in1_dencIisaplaad001Sp(struct stp_SVncapl300in1 *stp); /* 지정대리인 신청시 정보저장 */
void SVncapl300in1_dencCmncsudo29Sp  (struct stp_SVncapl300in1 *stp); /* FATCA 확인 대상 여부 조회 */

void SVncapl300in1_dencApl300in63Sp  (struct stp_SVncapl300in1 *stp); /* 청약서 발행 접수 AML 변경 확인 조회 */
void SVncapl300in1_dencApl300in69Sp  (struct stp_SVncapl300in1 *stp); /* 전자서명청약을위한피보험자서면동의서 스캔여부 조회 */

void SVncapl300in1_crdtView          (struct stp_SVncapl300in1 *stp);  /* 신용등급 사전조회 */
void SVncapl300in1_dencUnctbldsc001Sp(char *polyNo); /* TABLET 바로접수 여부 수정 */
void ncDebug(char *fmt,...);
void ncFprint(void);

int  SVncapl300in1_callSVncudw160in(struct stp_SVncapl300in1 *stp);
int  SVncapl300in1_xtrmOccrChck    (struct stp_SVncapl300in1 *stp);
int  SVncapl300in1_virtualAcctChck (struct stp_SVncapl300in1 *stp);
int  SVncapl300in1_procSkip (char * skipYn);

void SVncapl300in1_ftprVtRvCntrYn(struct stp_SVncapl300in1 *stp);

void SVncapl300in1_dencSisadmctt003Sp(struct stp_SVncapl300in1 *stp);

void SVncapl300in1_dcncApl300in24Sp(struct stp_SVncapl300in1 *stp); /* 간편가입 관련 정보 update */
void SVncapl300in1_CMCP_CreateAcctRequest_CC(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencScsscm010032Sp(struct stp_SVncapl300in1 *stp, int ii) ;

void SVncapl300in1_dencApl300in67Sp(struct stp_SVncapl300in1 *stp);
int  SVncapl300in1_dencApl300vw24Sp(struct stp_SVncapl300in1 *stp, double *scndAnpyStag);
int  SVncapl300in1_scndAnpyStdt(struct stp_SVncapl300in1 *stp,int ageCha, char *scndAnpyStdt);
int  SVncapl300in1_dcncApl300vw25Sp(struct stp_SVncapl300in1 *stp, char **ids, int countIds);
int  SVncapl300in1_dencApl300vw28Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencUmascm020004Sp(struct stp_SVncapl300in1 *stp, int ii);
void SVncapl300in1_CMCP_kcredit_CC(int telgDvsn, int telgLeng, int mnthCntA,int mnthCntB,struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300in71Sp (struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl100in57Sp(struct stp_SVncapl300in1 *stp, char *coupleYn);
void SVncapl300in1_cnvnTypeSrch(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300in72Sp (struct stp_SVncapl300in1 *stp);
int SVncapl300in1_brshCnfmYnChk(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dcncApl300in54Sp(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300in75Sp (struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300in76Sp (struct stp_SVncapl300in1 *stp);
void SVncapl300in1_sendAltkProc(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_sendAltkProc2(struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300in79Sp (struct stp_SVncapl300in1 *stp);
void SVncapl300in1_virtAcctDateChck (struct stp_SVncapl300in1 *stp);
void SVncapl300in1_dencApl300in80Sp (struct stp_SVncapl300in1 *stp);
int  SVncapl300in1_cnvnInvdYn(struct stp_SVncapl300in1 *stp);
void   SVncapl300in1_brthExpcDateChck(struct stp_SVncapl300in1 *stp);

/************************************************************************
  Function Name : SVncapl300in1()
  Note          : SVncapl300in1 Service main module
  Parameters    : (TPSVCINFO*)transb
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1(TPSVCINFO *transb) {
  /*------------------------------------------------------------------*
   * 내부 사용 변수 선언부
   *------------------------------------------------------------------*/
  /* DBIO module 호출에 사용할 지역 변수                              */
  /* fnName변수에는 DBIO module을 호출하는 함수명을 설정한다.         *
   * 본 Template에서는 service main에서 DBIO module을 호출하기 때문에 *
   * service name을 function name으로 setting하였음                   */
  int     ii;
  int     sc = 0;                           /* in_occurcnce 첨자 */
  int     syncYn;

  /* 즉시이체 미입금 접수시는 cptMsgCode = 5872 로 넘김 2004.04.13 신진혁 */
  int cptMsgCode;
  cptMsgCode = 0;

  char skipYn[1+1];
  char fatcDvsn[1+1];

  struct  stp_SVncapl300in1          stp;
  struct  stp_SVncapl300in1_realTrnf stp_real;

  memset(skipYn     , 0x00, sizeof(skipYn));
  memset(fatcDvsn   , 0x00, sizeof(fatcDvsn));

  memset(&stp_real  , 0x00, sizeof(stp_real));

  /*------------------------------------------------------------------*
   * 서비스 초기화 기술부
   *------------------------------------------------------------------*/
  SVC_INIT(NC_DEBUG_DIR);

  /*  EXEC SQL alter session set timed_statistics=true;
      EXEC SQL alter session set sql_trace=true;
      EXEC SQL alter session set events '10046 trace name context forever, level 8';  */

  /*------------------------------------------------------------------*
   * FML buffer 크기 조정 (클라이언트로 다건의 data 반환 시에만 사용)
   *------------------------------------------------------------------*/
  if ((transf = (FBFR32*) tprealloc((char*) transf, 75000))
      == (FBFR32*) NULL) {
    transf = (FBFR32*) transb->data;
    uvDebug("tprealloc()::%s", tpstrerror(tperrno));
    SVC_CLOSE(TUXERR, 10, tperrno, \
        tpstrerror(tperrno), "SVncapl300in1");
  }

  /* 계약공유메모리 CLEAR : 타업무호출시 필히 사용해야함 */
  ncClsCnttRsr();

  uvDebug("SVncapl300in1 Start");

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  SVncapl300in1_initialValueSet(&stp);

  /* FML Buffer Move                              */
  SVncapl300in1_getValue(&stp);

  /* 장애로 등록되어 있는지를 확인한다        */
  SVncapl300in1_CMNC_acceptCutoff_CC(&stp);

  /* 초기값 Setting Set                           */
  SVncapl300in1_initSet(&stp);

  /* 계약조회 및 상태체크                          */
  SVncapl300in1_dcncApl300in28Sp(&stp);

  /* 스마트플래너 바로접수 처리시 온라인 시간 체크 */
  /* 영업포털 시스템의 온라인시간 체크 기능 부재로 시스템 반영(2017.01.01) */
  /* [채널별 청약처리 가능 시간]                                               */
  /* 개인/법인 FP,대리점 : 당사 온라인 시간내에만 처리 가능(스마트플래너 포함) */
  /* CM:온슈어 채널 24/365 지원.                                               */
  /* TM: TM채널도 시스템은 24/365 지원하나, 실제 사용자는 없음                 */
  /* 방카: K뱅크 등 비대면 채널 업무 지원을 위해 24/365 서비스 지원            */
  /* ※ 즉시이체 처리는 23:30~24:00까지 재처리 업무 시간 확보를 위해 제한됨.   */
  if(strncmp((char *) stp.saleChnlCode.arr, "3", 1) == 0 ||
     strncmp((char *) stp.saleChnlCode.arr, "4", 1) == 0 ||
     strncmp((char *) stp.saleChnlCode.arr, "5", 1) == 0) {
    uvDebug("온라인 시간 적용 외 기관 입니다.");
  } else {
    SVncapl300in1_onLineChck();
  }

  /* 즉시이체 접수 건에 대한 처리 시간 제한 23:30.00~24:00.00 */
  if (atoi((char *) stp.crntTimeHh24.arr) > 233000 &&
      strcmp((char *) stp.ftprRecvMdcd.arr, "83") == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("즉시이체 접수 제한 시간(23:30~24:00) 입니다.");
    appReturnCode = 8975;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "즉시이체 접수 제한 시간(23:30~24:00) 입니다.", "SVncapl300in1");
  }

  /* 청약서발행 및 접수제한 (2004.01.09 장두원) */
  SVncapl300in1_chkConst1(&stp);

  /* 청약서 접수제한(2018.01.01 이경) */
  if (strcmp ((char *) stp.clltLpPrno.arr,"88808061" ) != 0) {
    SVncapl300in1_chkConst2(&stp);
  }

  /* 2014.07.01 시행 */
  if (strcmp((char *) stp.cnttDate.arr, "20140701") >= 0) {

    /* FATCA 대상여부 조회 */
    SVncapl300in1_dencCmncsudo29Sp(&stp);

    /* FATCA 입력 제외 조건 */
    if(strcmp((char *) stp.ftcaObjtYn.arr, "N") == 0) {
      uvDebug("FATCA 입력 대상 아님");
    }
    /* CM채널 HFS 접수외 제외(단, 온슈어는 포함) */
    else if (strncmp((char *) stp.saleChnlCode.arr, "3"  , 1) == 0 &&
             strncmp((char *) stp.srvcRoutDvsn.arr, "HFS", 3) != 0 &&
             strcmp ((char *) stp.clltLpPrno.arr,"88808061" ) != 0) {
      uvDebug("CM채널 HFS 접수외 제외(단, 온슈어는 포함)");
    }
    /* TM채널 HFS 접수외 제외 */
    else if (strncmp((char *) stp.saleChnlCode.arr, "4"  , 1) == 0 &&
             strncmp((char *) stp.srvcRoutDvsn.arr, "HFS", 3) != 0) {
      uvDebug("TM채널 HFS Call 외 대상 제외");
    }
    /* FATCA 입력여부 방카 제외(2014.06.30) */
    else if (strncmp((char *) stp.saleChnlCode.arr, "5", 1) == 0) {
      uvDebug("방카슈랑스 채널은 FATCA 시행 시점 차이로 제외-향후 Open시 제거");
    }
    /* FATCA 입력 대상 체크 */
    else {
      strcpy(fatcDvsn,"1"); /* 개별증번 조회 */

      /* FATCA 입력여부 조회 */
      if (CMNC_fatcaInptChck_CC(fatcDvsn, (char *) stp.polyNo.arr) == FAIL) {
        EXEC SQL ROLLBACK;
        uvDebug("FATCA 정보 미입력 오류");
        SVC_CLOSE(APPERR, 8977, 0, "FATCA 정보 미입력 오류", fnName);
      }
    }
  } else {
    uvDebug("FATCA 시행 기간 전-[%s]",(char *) stp.cnttDate.arr);
  }

  /* 세금우대저축(10)인 경우 접수시 과세로 변경 가능 */
  if  (strncmp((char *)stp.taxSelYn .arr, "N", 1) == 0)  {
    COPYVAR(stp.taxPrctYn , stp.taxSelYn);
  }

  /* T.CM 및 방카 계약은 저축성 비과세 선택여부를 DB(TB_NCAPLSTF)에서 조회 */
  if (strncmp((char *) stp.saleChnlCode.arr, "3", 1) == 0 ||
      strncmp((char *) stp.saleChnlCode.arr, "4", 1) == 0 ||
      strncmp((char *) stp.saleChnlCode.arr, "5", 1) == 0) {

    /* CM 채널 중 온슈어 모집건은 화면상 선택값 적용 */
    if(strcmp((char *) stp.clltLpPrno.arr,"88806621")==0 || strcmp((char *) stp.clltLpPrno.arr,"88808061")==0) {
      uvDebug("사이버지점(88806621-향후삭제),온슈어점(88808061) 비과세 여부 고객선택값 적용");
    } else {
      /* 월납증번 */
      SVncapl300in1_dencApl300vw21Sp(&stp);
      /* 비월납증번 */
      if (strncmp((char *) stp.freePlanYn.arr, "Y", 1) == 0) {
        SVncapl300in1_dencApl300vw23Sp(&stp);
      }

    }
  }

  /* 계약인수 상품 웰컴드림 청약시 기 처리여부 체크 */
  if (strcmp((char *) stp.irkdCodeDtal.arr, "1745") == 0) {
    SVncapl300in1_dencApl300in58Sp(&stp);
  }

  /* 태아가입 보종인 경우 출생예정일자 체크 */
  SVncapl300in1_brthExpcDateChck(&stp);

  /* 격주휴무 접수불가 체크   */
  SVncapl300in1_dcncApl300in11Sp(&stp);

  /* 신계약 월별 일정 조회                        */
  SVncapl300in1_dcncApl300in09Sp(&stp);

  /* 지연입력 조회                                */
  SVncapl300in1_dcncApl300in10Sp(&stp);

  if(strncmp((char *) stp.inptPoss.arr, "Y", 1) != 0) {
    /* 증번별 지연입력승인 여부조회 */
    SVncapl300in1_dencApl300in10Sp(&stp);
  }

  /* 접수일자, 입력마감일자, 지연입력간 관계 체크 */
  SVncapl300in1_recpDate_stddDate_inptPoss(&stp);

  /* 계약관계자조회                               */
  SVncapl300in1_dcncApl300in12Sp(&stp);

  /* 영업외시간 청약가능여부 체크, 2006.6.21 신진혁 */
  SVncapl300in1_arsTime(&stp);

  /* 전자청약 제한 사항 체크(전자청약 제도 폐지 2011.05)
  if (strncmp((char *) stp.clltRoutDvsn.arr, "10", 2) == 0) {
    SVncapl300in1_klessChck(&stp);
  }
  */

  /* 초회보험료 수금방법 방문시 초회방문승인 체크*/
  if (strncmp((char *) stp.ftprRecvMdcd.arr, "82", 2) == 0 && strncmp((char *) stp.saleChnlCode.arr, "5", 1) != 0) {

    /* 초회보험료 수금방법을 방문수금으로 선택 시 초회 방문 미승인건일 경우 접수 불가 */
    SVncapl300in1_ftprVtRvCntrYn(&stp);

    /* 가상계좌잔고체크 Skip 여부 */
    if (SVncapl300in1_procSkip(skipYn) == FAIL) {
      EXEC SQL ROLLBACK;
      uvDebug("(NC_procSkip) 룰호출 오류");
      SVC_CLOSE(APPERR, 4899, 0, "(NC_procSkip) 룰호출 오류", fnName);
    }

    /* 상품별 판매 교육 체크 SKIP 여부가 'Y'이면 체크 안함 */
    if (strncmp(skipYn, "Y",1) == 0) {
      uvDebug("============ 과부족 발생기관 여부 체크 제외 처리 ============");
    } else {
      /* 과부족 발생기관 여부 체크(2013.09.05) */
      if(SVncapl300in1_xtrmOccrChck(&stp) == TRUE) {
        /* ERP 가상계좌 잔고확인 - 잔고>=실입금액 처리가능 */
        if (SVncapl300in1_virtualAcctChck(&stp) == FAIL) {
          EXEC SQL ROLLBACK;
          uvDebug("초회보험료 실제 입금여부 확인 불가, 방문수금 선택 불가");
          appReturnCode = 8952;
          /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
          SVC_CLOSE(APPERR, appReturnCode, 0, \
            "초회보험료 실제 입금여부 확인 불가, 방문수금 선택 불가", "SVncapl300in1");
        }
      }
    }

    /* 송금일자 체크 */
    SVncapl300in1_ftprRmtnDate(&stp);
  }

  /* 초회보험료 수금방법 지정일이체시 체크        */
  if (strncmp((char *) stp.ftprRecvMdcd.arr, "81", 2) == 0) {
    SVncapl300in1_spclDateTrnf(&stp);
  }

  /* 초회보험료 수금방법 카드납시 체크            */
  if (strncmp((char *) stp.ftprRecvMdcd.arr, "84", 2) == 0) {
    SVncapl300in1_card(&stp);
  }

  /* 초회보험료 수금방법 즉시이체 체크            1 */
  if (strncmp((char *) stp.ftprRecvMdcd.arr, "83", 2) == 0) {
    SVncapl300in1_realTime(&stp);
  }

  /* 선진단 대상, 진단서입력 조회                 */
  if (strncmp((char *) stp.saleChnlCode.arr, "5", 1) != 0) {
    SVncapl300in1_dcncApl300in17Sp(&stp);
  }

  /* 경리일일마감 확인                            */
  SVncapl300in1_CMAC_com113vw_CC(&stp);

  /* 계약일자,시작일자,계약체결년월 체크          */
  SVncapl300in1_cnttDate(&stp);

  /* 고지사항 체크                                */
  SVncapl300in1_aplcni(&stp);

  /* 청약서 유효기간 체크                         */
  SVncapl300in1_srdoVlidTermChek(&stp);

  /* 가입상품 조회                                */
  SVncapl300in1_dcncApl300in29Sp(&stp);

  /* 방카제휴기관별 바로연금 가입한도금액 초과여부 체크 - 추후 제휴기관별 보종별 한도로 변경 필요 */
  if (strncmp((char *) stp.saleChnlCode.arr, "5", 1) == 0) {
    SVncapl300in1_imtrAnntJoinLmitChck(&stp);
  }

  /* 부실계약                                     */
  SVncapl300in1_CMNC_insoCnttChck(&stp);

  /* 프레지던트 부부형 계약간 관계 저장 - 보종코드(1755,1769) 특별처리 */
  SVncapl300in1_presidentChck(&stp);

  /*******************************************************/
  /* 신용등급 및 소득추정지수 조회 -                     */
  /*******************************************************/
  /* COMMIT 포함 주의~~!                                 */
  /* 이전 DB 변경 사항 반영시 주의 요망~!!!              */
  /*******************************************************/
  SVncapl300in1_crdtView(&stp);

  /* 자유설계 처리 준비                           */
  if (strncmp((char *) stp.freePlanYn.arr, "Y", 1) == 0) {
    SVncapl300in1_freePlanJudg(&stp);
  }

  /* 증번별 펀드가입 정보 조회                   */
  SVncapl300in1_dencSisadmctt003Sp(&stp);

  /* 청약서 발행 MAIN                            */
  for (ii = 0; ii < stp.dlngCnt; ii++) {
    SVncapl300in1_CMNC_judgMainChck(&stp, ii);
  }

  /* 기대여명형 연금 보증기간 조회 */
  SVncapl300in1_dencApl300vw28Sp(&stp);

  /* 계약전환확인 (2003.12.26 장두원,조진학) */
  if (strcmp((char*) stp.ciInsrYn.arr,"K") == 0) {
    SVncapl300in1_trsfCond(&stp);
  }

  /* 초회보험료 수금방법 즉시이체 체크            */
  /* 2004.12.13 전환CI 즉시이체 체크때문에 계약전환확인 이후로 위치변경     */
  if (strncmp((char *) stp.ftprRecvMdcd.arr, "83", 2) == 0) {
    SVncapl300in1_realTime2(&stp);
  }


  /* 영수증번호 채번  20030730 방카 영수증 인쇄 안함 조진학 */
  /*                  20090320 컬러풀보험 영수증 인쇄 안함 신진혁 */
  if (strncmp((char *) stp.saleChnlCode.arr, "5", 1) != 0 && CMNC_colorYn_CC((char *)stp.polyNo.arr) == 0  ) {
    SVncapl300in1_recp_auto(&stp);
  }

  /* 기계약합산, 가입한도 및 진단기준 발췌        */
  SVncapl300in1_CMNC_cust_octm_med(&stp);


  /* 영업마감년월                                 */
  SVncapl300in1_bussClogYm(&stp);

  /* 장애인심사여부조회                           */
  SVncapl300in1_dencApl300in49Sp(&stp);

  /* 교차판매여부조회                             */
  SVncapl300in1_dencApl300in50Sp(&stp);


#ifdef IPSL_DBCT
  /* 상품별 사망보장금액 조회                     */
  SVncapl300in1_dencApl300in51Sp(&stp);
#endif

  /* 초회보험료 수금방법 직접납입 시 초회가상계좌 채번 및 정보 저장 */
  if (strncmp((char *) stp.ftprRecvMdcd.arr, "86", 2) == 0) {
    /* 송금일자 체크 */
    SVncapl300in1_virtAcctDateChck(&stp);
    /* 초회가상계좌 일련번호 채번 */
    SVncapl300in1_dencApl300in76Sp(&stp);
    /* 초회가상계좌 정보 저장*/
    SVncapl300in1_dencApl300in75Sp(&stp);
    /* 초회가상계좌 정보 조회*/
    SVncapl300in1_dencApl300in79Sp(&stp);
  }

  for (ii = 0; ii < stp.dlngCnt; ii++) {

    /* 자유설계 준비                            */
    if (ii == 1) {
      SVncapl300in1_freePlanRsfn(&stp);
    }

    /* 계약입출금등록정보                       */
    SVncapl300in1_dcncApl100in23Sp(&stp);
    SVncapl300in1_dcncApl100in18Sp(&stp);

    /* 심사시유의사항                           */
    SVncapl300in1_CMNC_udwrNotc_CC(&stp);

    /* 보완발췌처리                             */
    /* 삭제 (2005.07.04 장두원)
    SVncapl300in1_bowanBalche(&stp);
    */

    /* 계약상태코드                             */
    SVncapl300in1_cnttStatCode(&stp);

    /* 계약항목변경관리                         */
    SVncapl300in1_dcncCmncsnlb08Sp(&stp);

    /* 계약         update                      */
    SVncapl300in1_dcncApl300in18Sp(&stp);

    /* 청약부속정보 update                      */
    SVncapl300in1_dcncApl300in21Sp(&stp);

    /* 간편가입 관련 정보 update */
    SVncapl300in1_dcncApl300in24Sp(&stp);

    /* 간편가입 상품분류코드 조회 */
    SVncapl300in1_cnvnTypeSrch(&stp);

    /* 간편가입상품(간편실손 제외)일 경우에만 저장 */
    if (strncmp((char *) stp.cnvnGoodCscd.arr, "CV", 2) == 0 &&
        strcmp((char *) stp.cnvnGoodCscd.arr, "CV4") != 0) {
      /* 간편고지여부 정보 저장 */
      SVncapl300in1_dencApl300in71Sp(&stp);
    }

    /* 양치습관서비스동의서 발행 대상 여부 조회 */
    SVncapl300in1_brshCnfmYnChk(&stp);

    /* 양치습관서비스 동의대상일 경우 동의여부 정보 TB_ISAPLRQI에 저장  */
    if (strcmp((char *) stp.brshCnfmYn.arr, "Y") == 0) {
      SVncapl300in1_dencApl300in72Sp(&stp);
    }

    /* 장애인 세제전환특약 신청정보 존재 시*/
    if(stp.dsabTxcvCnt > 0) {
      /* 장애인 세제전환특약 신청정보 저장 */
      SVncapl300in1_dcncApl300in54Sp(&stp);
    }

    /* 계약부속정보 update                      */
    SVncapl300in1_dcncApl300in47Sp(&stp);

    /* 가입상품     update                      */
    SVncapl300in1_dcncApl300in02Sp(&stp);

    /* 계약관계자   update                      */
    SVncapl300in1_dcncApl300in19Sp(&stp);

    /* 연금정보   update                      */
    SVncapl300in1_dencApl300in67Sp(&stp);

    /* 보험검진대상 Insert                      */
    SVncapl300in1_dcncApl300in01Sp(&stp);

    /* 계약조사 update                          */
    SVncapl300in1_dcncApl300in07Sp(&stp);

    /* 보험료수금정보                           */
    SVncapl300in1_dcncApl300in14Sp(&stp);

    /* 자동납입대출신청                         */
    if (ii == 0) {
      if ((strncmp((char *) stp.aulnPaymYn  .arr, "Y", 1) == 0) &&
          (strncmp((char *) stp.collMetdCode.arr, "05", 2) != 0)) {
        SVncapl300in1_AutoLoanRequest(&stp);
      }
    }

    /* 계약자 고지 정보 Insert                  */
    SVncapl300in1_dcncApl300in04Sp(&stp);

    /* 운전차종 고지 정보 Insert                */
    SVncapl300in1_dcncApl300in20Sp(&stp);

    /* 계약심사                                 */
    SVncapl300in1_dcncApl300in05Sp(&stp);


    /* 양육자금전환 신청시 정보저장(사망수익자가 복수인 경우 제외) */
    if (stp.dedCnt == 0 && strcmp((char *) stp.rrfdCnvsRqyn.arr, "Y") == 0) {
      SVncapl300in1_dencIisaplrci001Sp(&stp); /* TB_ISAPLRCI 에 증권번호 저장 */
    }

    /* 지정대리인 신청시 정보저장 */
    if (strcmp((char *) stp.asmtAgntRqyn.arr, "Y") == 0) {
      SVncapl300in1_dencIisaplaad001Sp(&stp); /* TB_ISAPLAAD 에 증권번호 저장 */
    }

    /* 단체계약명세입력                         */
    if (ii == 0) {
      /* 보험료수금정보.단체계약관리번호가 존재하는 경우에만 입력 */
      if (strlen((char *) stp.cnttGrpCtid.arr) > 0) {
        SVncapl300in1_dcncApl300in26Sp(&stp);
      }
    }

    /* 영수증발행                               */
    if ((ii == 0) && ((char *) stp.recpNoScrn.arr[0] != 0x00)) {
      SVncapl300in1_recp(&stp);
    }

    /* 웰컴드림 적립형의 경우 보험료청구 생성전 계약테이블 합계보험료,합계원보험료 일시납 부분 차감 */
    /* ∵입금모듈에서 데이터 생성시 이전계약 환급금을 합계보험료에서 차감놓아야 적립부분만 생성됨 */
    if (strcmp((char *) stp.irkdCodeDtal.arr, "1745") == 0 && strcmp((char *) stp.paymCyclCode.arr, "0") != 0) {
      SVncapl300in1_dencUisaplctt002Sp(&stp);
    }

    /* 요금 보험료청구 생성                     */
    SVncapl300in1_PremiumDemandCreate_CC(&stp, ii);

    /* 요금 보험료입금 처리                     */
    /* 2004.12.13 전환CI 즉시이체는 보험료 입금을 즉시이체 이후에 단다    */
    /* stp.orgftprRecvMdcd -> 자유설계시 월납의 초회보험료 입금방법코드   */
    /* 2006.01.23 신용카드건도 입력시 보험료입금을 단다 */
    if (((strncmp((char *) stp.ftprRecvMdcd.arr, "82", 2) == 0) ||
         (strncmp((char *) stp.ftprRecvMdcd.arr, "84", 2) == 0) ||
         (strncmp((char *) stp.ftprRecvMdcd.arr, "92", 2) == 0)) &&
        (strncmp((char *) stp.orgftprRecvMdcd.arr, "83", 2) != 0)) {

      /* 이전 금액 입금정보 생성 */
      if (strcmp((char *) stp.irkdCodeDtal.arr, "1745") == 0) {
        SVncapl300in1_welcomeDreamPremiumInputProc(&stp);
      } else {
        SVncapl300in1_PremiumInputProc_CC(&stp);
      }
    }

    /* 초년도보험료, 2차년도보험료              */
    SVncapl300in1_frsy_seyr_prem(&stp);

    /* 신계약 일마감                            */
    SVncapl300in1_dcncApl300in08Sp(&stp);

    /* 신계약일마감가입상품,계약관계자,보험료할인*/
    SVncapl300in1_dcncApl300in35Sp(&stp);

    /* 할인,입출금,관계,펀드관리 수정 2004.11.1 신진혁  */
    /* 발행시 계약일자와 현재 계약일자가 틀린경우 수정  */
    if ((strncmp((char *) stp.cnttDate.arr, (char *) stp.publCnttDate.arr, 8) != 0) ||
        (strncmp((char *) stp.cnttDate.arr, (char *) stp.publCnttDate2.arr, 8) != 0)) {

      SVncapl300in1_dcncApl300in39Sp(&stp);
    }
  }

  /*****************************************************************/
  /* 주의~! 현재 위치에는 stp 정보가 자유설계 정보로 셋팅되어 있음 */
  /*****************************************************************/


  /* 보종별 펀드보증 최신 펀드코드 반영 */
  SVncapl300in1_dencApl300in56Sp(&stp);

  if (strcmp((char*) stp.ciInsrYn.arr,"K") == 0) {
    SVncapl300in1_CMPA_procTransCtt(&stp);
  }

  /* 2008.08 U/W특이사항 관련 (2006.08.19) */
  /* U/W 특이사항 메모입력시 */
  if (strcmp((char*) stp.memoCode.arr,"") != 0 || strlen((char*) stp.memoCten.arr) > 0) {
    SVncapl300in1_dencapl300in48Sp(&stp);
  }

  /*  접수처리시 세금우대테스트할때 사용
    if  (strncmp((char *)stp.taxPrctYn .arr, "Y", 1) == 0)  {
      COPY(stp.orgnArdcYn ,   "Y");
    }
  */

  /* FP본인 및 가족계약 기관별,개인별 누적 */
  if (strcmp((char*) stp.saleChnlCode.arr, "1") == 0 ||
      strcmp((char*) stp.saleChnlCode.arr, "7") == 0) { /* 개인,대리점 */
    /* 설계사본인계약누적 입력 (2003.12.08 장두원) */

    SVncapl300in1_dcncCmncdcss20Sp(&stp);

  } else if (strcmp((char*) stp.saleChnlCode.arr, "2") == 0) { /* GFP */

    /* FP본인 및 가족계약누적 입력 (2008.04.25 이화진) */
    SVncapl300in1_dcncCmncdcss24Sp(&stp);

  } else if (strcmp((char*) stp.saleChnlCode.arr, "6") == 0) { /* KLD */
    SVncapl300in1_dcncCmncdcss25Sp(&stp);
  }

  /* 재정UW 대상여부 조회 (2008.05.19 이화진) */
  SVncapl300in1_dencSncudwcje003Sp(&stp);

  /* 청약서발행후 고객정보변경 확인 (2005.03.04 장두원) */
  if (strcmp((char*) stp.saleChnlCode.arr, "5") != 0) { /* 방카제외 */
    SVncapl300in1_custInfoChck(&stp);
  }

  /* 상품소개 및 고객분석 동의여부 체크 */
  SVncapl300in1_dccsApl300in53Sp(&stp);

  /* 타사인수계약 - 보종코드(1745) 특별처리 */
  if (strcmp((char *) stp.irkdCodeDtal.arr, "1745") == 0) {
    /* TB_ISOCICTT 에 증권번호 저장 */
    SVncapl300in1_dencUisocictt003Sp(&stp);

    /* TB_ISOCIPAT 에 증권번호 저장 */
    SVncapl300in1_dencUisocipat001Sp(&stp);
  }

  /* 육성센터 처리자 여부 체크 */
  if(SVncapl300in1_growupChck((char *) stp.clltLpPrno.arr
                             ,(char *) stp.cnttDate  .arr )==SUCCESS) {
    uvDebug("육성센터 처리자 인 경우 알림메세지 발송");

    /* 육성센터 처리자 인 경우 알림메세지 발송 */
    if(SVncapl300in1_kNet_ProcReport((char *) stp.polyNo.arr )==FALSE) {
      uvDebug("육성센터 처리자 인 경우 알림메세지 발송 Error..SKIP");
    }
  }

  /* AML변경여부 체크(방카제외) */
  if (strcmp((char*) stp.saleChnlCode.arr, "5") != 0) {
    SVncapl300in1_dencApl300in63Sp(&stp);
  }

  /* 전자서명청약을위한피보험자서면동의서 스캔여부 조회 */
  if (strncmp((char *) stp.clltRoutDvsn.arr, "11", 2) == 0) {
    SVncapl300in1_dencApl300in69Sp(&stp);
  }


#ifdef STBL_PROC_SKIP
//  /**************************************************************************/
//  /*  적합성원칙 다건발행 적용으로 만료 처리 삭제(2011.05.01 시행)          */
//  /**************************************************************************/
//  /*  적합성원칙 진단 체크(2011.01.24 시행)                                 */
//  /**************************************************************************/
//  uvDebug("▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽");
//  uvDebug("▽ 적합성원칙 진단 체크(2011.01.24시행) START ▽");
//  uvDebug("▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽▽");
//
//  char stblPrcpApplyYn[MAX_VALUE_LEN];
//
//  memset(stblPrcpApplyYn, 0x00, sizeof(stblPrcpApplyYn));
//
//  strncpy(stblPrcpApplyYn, "Y",1); /* 적합성 적용으로 초기화 */
//
//  /* 적합성 원칙 적용 제외 여부 조회 */
//  if (SVncapl300in1_stblPrcpApplyYn_CC(stblPrcpApplyYn, &stp) == FAIL) {
//    EXEC SQL ROLLBACK;
//    uvDebug("적합성 원칙 적용 제외 여부 조회시 오류가 발생하였습니다.");
//    appReturnCode = 10;
//    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
//    SVC_CLOSE(APPERR, appReturnCode, 0, \
//      "적합성 원칙 적용 제외 여부 조회시 오류가 발생하였습니다.", "SVncapl300in1");
//  }
//
//  /* 청약서 접수시 : 적합성원칙 정보 만료처리(방카 제외) */
//  if (strcmp((char*) stp.saleChnlCode.arr, "5") == 0) { /* 방카제외 */
//    strncpy(stblPrcpApplyYn, "N",1);
//    uvDebug("방카채널 청약서 접수시 적합성원칙 별도 처리");
//  }
//  /* 변액보험 외 체크 제외 */
//  else if (strcmp((char*) stp.vlnsYn.arr, "Y") != 0) {
//    strncpy(stblPrcpApplyYn, "N",1);
//    uvDebug("변액보험 외 체크 제외");
//  }
//  /* 내근 및 FP가 계약자인 경우 적합성 원칙 적용 제외 */
//  else if (strcmp((char*) stp.clltLpCtid.arr, (char*) stp.ctorCustId.arr) == 0) {
//    strncpy(stblPrcpApplyYn, "N",1);
//    uvDebug("내근 및 FP가 계약자인 경우 적합성 원칙 적용 제외");
//  }
//  /* 전환일시납 및 자유설계 일시납 제외 */
//  else if (strncmp((char *) stp.freePlanYn  .arr,"Y",1) == 0 &&
//             strncmp((char *) stp.paymCyclCode.arr,"0",1) == 0) {
//    strncpy(stblPrcpApplyYn, "N",1);
//    uvDebug("전환일시납 및 자유설계 일시납 제외");
//  }
//  /* 해당 사항없을시 적합성 체크 적용 */
//  else {
//    uvDebug("★★★ 적합성 원칙 적용 ★★★");
//  }
//
//  /* 적합성 원칙 적용 여부(N)이면 체크 제외 */
//  if (strcmp(stblPrcpApplyYn, "N") == 0) {
//    uvDebug("★★★ 적합성 원칙 적용 여부 조회 결과 적합성 원칙적용 제외 ★★★");
//  } else {
//    /* Update. 적합성원칙 진단 고객승인 및 결과 만료처리 */
//    SVncapl300in1_stblPrcpExprProc_CC(&stp);
//  }
#endif

  /* mdm_addPerson 처리(계약고객으로 상태 update) */
  if ((strcmp((char *) stp.saleChnlCode.arr, "3") == 0 &&
       (strcmp((char *) stp.clltOrgnCode.arr, "06621") == 0 ||
        strcmp((char *) stp.clltOrgnCode.arr, "08061") == 0)) ||
      (strcmp((char *) stp.saleChnlCode.arr, "5") == 0)) {
    /* 온슈어 , 방카 인 경우는 통합고객 선 등록으로 인한 통합고객 이관 처리 제외 */
    uvDebug("온슈어 , 방카 인 경우는 통합고객 선 등록으로 인한 통합고객 이관 처리 제외");
  } else {

    SVncapl300in1_mdm_getPersonUpdate(&stp);     /* 계약고객 상태코드(20) 수정 */

    /* 동기화 */
    char *ids[stp.syncCnt];
    int countIds= 0;
    int skipFlag = 0;

    memset(ids, 0x00, sizeof(ids));

    uvDebug("stp.syncCnt : [%d]", stp.syncCnt);

    for (sc = 0; sc < stp.syncCnt; sc++) {
      uvDebug("1.stp.syncCustId[%d] ===== [%s]", sc, (char*)stp.syncCustId[sc].arr);

      skipFlag = 0;

      for (ii = 0; ii < countIds; ii++) {
        if ((strcmp(ids[ii], (char*)stp.syncCustId[sc].arr)) == 0) {
          skipFlag = 1;
          break;
        }
      }

      if(skipFlag==1) {
        uvDebug("이미 셋팅된 고객ID = [%s]", (char*)stp.syncCustId[sc].arr);
        continue;
      }

      uvDebug("skipFlag : [%d]", skipFlag);

      ids[countIds] = (char*)stp.syncCustId[sc].arr;
      uvDebug("2.stp.syncCustId[%d] ===== [%s]", sc, (char*)stp.syncCustId[sc].arr);
      uvDebug("ids[%d]", countIds);
      countIds++;
    }

    ids[countIds] = 0;

    uvDebug("mdm_assertPartySynchronized before ===[%d]", countIds);

    syncYn = mdm_assertPartySynchronized(ids, "HFS", countIds);

    uvDebug("mdm_assertPartySynchronized after  ===[%d]", countIds);

    /* 주의!!!!! 에러시 이전 처리 Rollback 처리 후 commit 처리~!! */
    if (syncYn == -1) {

      EXEC SQL ROLLBACK;

      SVncapl300in1_dcncApl300vw25Sp(&stp, ids, countIds);

      EXEC SQL COMMIT ;

      appReturnCode = 4899;
      uvDebug("mdm_assertPartySynchronized 동기화 실패");
      SVC_CLOSE(APPERR, appReturnCode, 0, \
      "고객 동기화에 실패하였습니다.", "SVncapl300in1");
    }

    mdm_close();
  }

  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */
  /* 이하 대외계 시스템 처리 부분으로 처리 오류 발생시 Rollback 처리 안됨   */
  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */

  /* 세금우대 및 비과세 등록 */

  /* 계약자와 단체계약자가 같은 경우 비과세 대상 제외 처리 */
  if (strcmp((char *) stp.ctorCustId.arr, (char *) stp.cnttGrpCtid.arr) == 0) {
    uvDebug("계약자와 단체계약자가 같은 경우 비과세 대상 제외 처리"); /* 방카사업부 김민규 과장 확인 */
  } else {

    /* 자유설계 계약에 대한 처리 추가(2014.09.15) - U/W 김혜진 */
    for (ii = 0; ii < stp.dlngCnt; ii++) {
      /* 세금우대 모듈 호출                                                     */
      /* 2008.8.1 접수시 전건 세금우대 등록으로 인하여 위치이동                 */
      SVncapl300in1_CMNC_taxPrctRgst(&stp,ii);

      /* 저축성 비과세 모듈 호출 */
      SVncapl300in1_CMNC_savingtxfrPrctRgst(&stp,ii);
    }
  }

  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */
  /* ERP HUB TABLE 입력                                                     */
  /* 수금방법이 방문수금,지정일이체,카드납입, 계약대행은 여기서 입력한다
  /*            즉시이체는 보험료입금함수와 동일하게 처리한다.
                즉, 즉시이체 처리결과가 정상인 경우는 바로 ERP HUB 입력을 하고
                    처리중인 경우에는 재조회모듈에서 정상인 경우에만 입력을 한다\
      단 방카는 HUB 테이블 입력 안한다(함수안에서 처리한다)
  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */

  if ((strncmp((char *) stp.ftprRecvMdcd.arr, "81", 2) == 0)  ||
      (strncmp((char *) stp.ftprRecvMdcd.arr, "82", 2) == 0)  ||
      (strncmp((char *) stp.ftprRecvMdcd.arr, "84", 2) == 0)  ||
      (strncmp((char *) stp.ftprRecvMdcd.arr, "92", 2) == 0)) {

    SVncapl300in1_CMNC_ErpHub2(&stp);
  }

  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */
  /* 지정일이체 , 신용카드, 즉시이체 모듈 호출                              */
  /* 이 부분은 청약서 접수시 항상 맨 마지막에 있어야 함                     */
  /* 신규 추가업무 발생시 이부분 위에 작성할것                              */
  /* 이유는 신용카드/즉시이체 모듈 후에는 다른 rollback 이 발생해서는 안됨  */
  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */

  if (strncmp((char *) stp.freePlanYn.arr, "Y", 1) != 0) {
    /* 초회보험료 수금방법 카드납시 카드승인        */
    if (strncmp((char *) stp.ftprRecvMdcd.arr, "84", 2) == 0) {
        SVncapl300in1_cardRcnt2(&stp);
    }
  }

  /* 자유설계 원복처리                                  */
  /* 전환CI 즉시이체 처리를 위하여 자유설계 원복처리 함 */
  if ((strncmp((char *) stp.freePlanYn.arr, "Y", 1) == 0) &&
      (strncmp((char *) stp.orgftprRecvMdcd.arr, "83", 2) == 0)) {
    SVncapl300in1_freePlanRetu(&stp);
  }


  char imtrBankYn [2+1];

  if ( strcmp((char *)stp.saleChnlCode.arr,"5") == 0 && strcmp((char *)stp.ftprRecvMdcd.arr,"83") == 0 )
  {
    strcpy(imtrBankYn,"Y");
  } else
  {
    strcpy(imtrBankYn,"N");
  }

  /* 초회보험료 수금방법 즉시이체                 */
  if (strncmp((char *) stp.ftprRecvMdcd.arr, "83", 2) == 0 && strcmp(imtrBankYn,"Y") != 0 ) {

    /* 즉시이체 모듈 호출 */
    SVncapl300in1_imtyTrnf(&stp,&stp_real);

    /********************************************************
    즉시이체 결과시 정상인경우(타임아웃 포함) EXEC SQL COMMIT
                  비정상인경우(잔고부족     ) 함수에서 SVC CLOSE
     ********************************************************/
    EXEC SQL COMMIT ;

    /* 요금 보험료입금 처리                     */
    /* 미입금 접수는 보험료입금을 추후에 결과재조회후에 넣음  */
    /* 전환 경우는 월납, 일시납 모두 여기서 보험료입금을 넣어줌 */
    if (strcmp((char *) stp_real.recvYn.arr,"Y") == 0) {

      /* ERP HUB 호출     */
      SVncapl300in1_CMNC_ErpHub2(&stp);

      for (ii = 0; ii < stp.dlngCnt; ii++) {
        /* 자유설계 준비                            */
        if (ii == 1) {
          SVncapl300in1_freePlanRsfn(&stp);
        }
        /* 보험료 입금 호출 */
        SVncapl300in1_PremiumInputProc_CC(&stp);
      }       /* end for */

      /********************************************
       즉시이체 결과가 정상이면 71로 업데이트후 즉시이체 청구중 삭제
                       비정상이면 현행유지
      ********************************************/
      SVncapl300in1_dcncApl300in22Sp(&stp_real);

      /* 즉시이체 결과가 정상이므로 상태상세 71로 변경 */
      COPY(stp.cnttStatDtcd, "71");
    }

    /* 즉시이체시 미입금인 경우 미입금접수 메세지 출력         */
    /* 2004.04.13 신진혁 수정                                  */
    if ((strncmp((char *) stp.ftprRecvMdcd.arr, "83", 2) == 0) &&
        (strncmp((char *) stp.cnttStatDtcd.arr, "73", 2) == 0)) {
      /* 미입금인 경우는 클라이언트에 미입금접수 메세지 출력 */
      cptMsgCode = 5872;
    }
  }    /* end if - 즉시이체 */

  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */
  /* 방카 씨티은행일경우 초회입금을 접수시 처리함.                          */
  /* 방카 즉시이체는 접수때 제외이므로 마지막으로 세금우대이전에 반영함  .  */
  /* 20100302 씨티 4차 오픈 운영기 테스트에 따라 일자처리함                 */
  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */

  uvDebug("*** uvGetUserOrgCode() ==========> [%s]", uvGetUserOrgCode());
  uvDebug("*** crntDate           ==========> [%s]", (char *) stp.crntDate.arr);


  if(strcmp(uvGetUserOrgCode(), "03741") == 0 && strcmp((char *) stp.crntDate.arr, "20100223") == 0){
    EXEC SQL ROLLBACK;
      uvDebug("씨티은행 20100223 운영기 테스트 신계약접수 불가");
      appReturnCode = 10;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, 8747, 0, \
        "씨티은행 20100223 운영기 테스트 신계약접수 불가", "SVncapl300in1");
  }

  if(strcmp(uvGetUserOrgCode(), "03741") == 0 &&
       (strcmp((char *) stp.crntDate.arr, "20100222") >= 0 &&
        strcmp((char *) stp.crntDate.arr, "20100226") <= 0)) {
    if (CMNC_CityChungyak_CC((char *) stp.polyNo.arr) != SUCCESS) {
      EXEC SQL ROLLBACK;
      uvDebug("씨티은행 초회입금처리시 오류가 발생하였습니다");
      appReturnCode = 10;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
        "씨티은행 초회입금처리시 오류가 발생하였습니다", "SVncapl300in1");
    }
  }

  /*-----------------------------------------------------------------------*/
  /* 계속보험료입력시 계좌등록신청 데이터 생성 (2016.06.24)                */
  /*-----------------------------------------------------------------------*/
  if (strncmp((char *) stp.cnttRcwcUsdv[0].arr, "Y", 1) == 0) {
    SVncapl300in1_CMCP_CreateAcctRequest_CC(&stp);
  }

  /*-----------------------------------------------------------------------*/
  /* iCIS지급이력 전기간(99) / 5년(60) 조회 (2018.04.09)                */
  /*-----------------------------------------------------------------------*/
  SVncapl300in1_CMCP_kcredit_CC(T352_NO, IN_LEN_352, 60,99,&stp);

  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */
  /* 신규업무 발생시 여기서부터는 추가하면 안됨(위쪽으로 올라가세요         */
  /* ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ */

  /* 직접납입(86:가상계좌) & 미입금인 경우 알림톡 메세지 출력         */
  if ((strncmp((char *) stp.ftprRecvMdcd.arr, "86", 2) == 0) &&
      (strncmp((char *) stp.cnttStatDtcd.arr, "73", 2) == 0)) {

    /* 초회가상계좌 알림톡 대상건 전송(계약자) */
    SVncapl300in1_sendAltkProc(&stp);

    /* 초회가상계좌 알림톡 대상건 전송(모집FP) */
    SVncapl300in1_sendAltkProc2(&stp);

  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */

  EXEC SQL COMMIT;     /* 필요한 경우에만 COMMIT처리한다. */
  /* EXEC SQL ROLLBACK;   */


  /*------------------------------------------------------------------*
   * 클라이언트로 전송할 값을 FML Buffer로 MOVE
   *------------------------------------------------------------------*/
  SVncapl300in1_setValue(&stp);

  /*------------------------------------------------------------------*
     EDW TO EAI 호출 START (신진혁, 2005.11.29, 요금 정해원 대리 모듈 호출)
  -------------------------------------------------------------------*/
  SVncapl300in1_edwCall(&stp);


  /*------------------------------------------------------------------*
   * HUROS심사 SERVICE TPA CALL (EUS)   2013.05.28
   *------------------------------------------------------------------*/
  int ret = 0;
  ret = SVncapl300in1_callSVncudw160in(&stp);
  if (ret < 0)
  {
      uvDebug("HUROS심사 SERVICE(SVncudw160in) TPA CALL Failure.ret[%d]", ret);
  }

  /*------------------------------------------------------------------*
   * 서비스 종료 처리 기술부
   *------------------------------------------------------------------*/
  uvDebug("SVncapl300in1 End");

  /*  EXEC SQL ALTER SESSION SET SQL_TRACE=FALSE; */

  SVC_CLOSE(SUCC, 0, cptMsgCode, "SUCCESS", "SVncapl300in1");
}

/************************************************************************
  Function Name : SVncapl300in1_initialValueSet(void)
  Note          : 사용할 데이터 변수 초기화
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_initialValueSet(struct stp_SVncapl300in1 *stp) {
  memset(stp,     0x00,       sizeof(struct  stp_SVncapl300in1));

}
/************************************************************************
  Function Name : SVncapl300in1_getValue()
  Note          : 청약서 접수내역 Get
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_getValue(struct stp_SVncapl300in1 *stp) {
  int     ii;

  /* DB 데이터로 접수처리 여부 */
  GETVAR(NC_STR_010,  0,  stp->imtyRecpYn);             /* 바로접수여부 */

  /* 계약                     */
  GETVAR(NC_STR_001,  0,  stp->polyNo);                     /* 증권번호 */

  uvDebug("imtyRecpYn             =   [%s]",  (char *) stp->imtyRecpYn     .arr);

  /* TABLET 청약 등 DB DATA READ 처리 */
  if (strcmp((char *) stp->imtyRecpYn.arr, "Y") == 0) {

    uvDebug("바로접수 증권번호 =   [%s]",  (char *) stp->polyNo.arr);

    SVncapl300in1_readData(stp);

    if (strcmp((char *) stp->cnvnJoinHlyn.arr, "N") == 0) {
      EXEC SQL ROLLBACK;
      uvDebug("바로접수의 경우 간편가입유지여부가 N일 경우 접수 불가처리");
      appReturnCode = 4899;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "바로접수 불가대상, 일반접수 하시기바랍니다", "SVncapl300in1");
    }

    GETVAR(NC_STR_019,  0,  stp->vrblHoloYn  );                 /* 변액자필여부 (바로접수의 경우 값 따로 받음) */
    GETVAR(NC_STR_180,  0,  stp->bsthSvagYn);         /* 양치서비스동의여부 */

    if(SVncapl300in1_cnvnInvdYn(stp) == FAIL) {
      EXEC SQL ROLLBACK;
      uvDebug("바로접수의 경우 간편무효처리 대상 존재 시 접수 불가처리");
      appReturnCode = 4899;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "바로접수불가(간편무효대상) 일반접수로진행바랍니다", "SVncapl300in1");
    }
  } else {

    /* 계약                     */
    GETVAR(NC_STR_002,  0,  stp->cnttDate);                   /* 계약일자 */

    /* 청약부속정보             */
    GETVAR(NC_STR_003,  0,  stp->ftprRmtnDate);           /* 초회보험료송금일자 */
    GETVAR(NC_STR_004,  0,  stp->ftprRecvMdcd);       /* 초회보험료입금방법코드 */
    GET(NC_DOU_005,  0,  stp->mnthIncmAmt);                   /* 월소득금액 */

    /* 보험료수금정보           */
    GETVAR(NC_STR_006,  0,  stp->collMetdCode);               /* 수금방법코드 */
    GETVAR(NC_STR_007,  0,  stp->aulnPaymYn);               /* 자동대출납입여부 */

    /* 계약                     */
    GETVAR(NC_STR_008,  0,  stp->prsnCoprSadv);             /* 개인법인판매구분 */
    GETVAR(NC_STR_009,  0,  stp->dtorCtorReln);       /* 예금주와계약자와의관계 */

    /* GETVAR(NC_STR_097,  0,  stp->srdoFormKind);     청약서양식종류      (EUS) */

    /* 계약입출금등록정보       */
    GETVAR(NC_STR_011,  0,  stp->crwcustId[0]);               /* 고객ID */
    GETVAR(NC_STR_012,  0,  stp->finaOrgnCode[0]);            /* 금융기관코드 */
    GETVAR(NC_STR_013,  0,  stp->finaOrgnDvsn[0]);            /* 금융기관구분 */
    GETVAR(NC_STR_014,  0,  stp->acctCardNo[0]);              /* 계좌_카드번호 */
    GETVAR(NC_STR_015,  0,  stp->cardVlidEdym[0]);          /* 카드유효만료년월 */
    GETVAR(NC_STR_016,  0,  stp->bankBrchCode[0]);            /* 은행지점코드 */
    GETVAR(NC_STR_017,  0,  stp->cardOwnrName[0]);            /* 카드소유자명 */
    GETVAR(NC_STR_018,  0,  stp->cardOwnrRrno[0]);    /* 카드소유자주민등록번호 */

    GETVAR(NC_STR_021,  0,  stp->crwcustId[1]);               /* 고객ID */
    GETVAR(NC_STR_022,  0,  stp->finaOrgnCode[1]);            /* 금융기관코드 */
    GETVAR(NC_STR_023,  0,  stp->finaOrgnDvsn[1]);            /* 금융기관구분 */
    GETVAR(NC_STR_024,  0,  stp->acctCardNo[1]);              /* 계좌_카드번호 */
    GETVAR(NC_STR_025,  0,  stp->cardVlidEdym[1]);          /* 카드유효만료년월 */
    GETVAR(NC_STR_026,  0,  stp->bankBrchCode[1]);            /* 은행지점코드 */
    GETVAR(NC_STR_027,  0,  stp->trnfHopeDd[1]);              /* 이체희망일 */

    /* 자동송금서비스 계좌 */
    GETVAR(NC_STR_213,  0,  stp->crwcustId[4]);               /* 고객ID */
    GETVAR(NC_STR_214,  0,  stp->finaOrgnCode[4]);            /* 금융기관코드 */
    GETVAR(NC_STR_215,  0,  stp->finaOrgnDvsn[4]);            /* 금융기관구분 */
    GETVAR(NC_STR_216,  0,  stp->acctCardNo[4]);              /* 계좌_카드번호 */
    GETVAR(NC_STR_217,  0,  stp->bankBrchCode[4]);            /* 은행지점코드 */

    /* 생활자금지급 계좌 */
    GETVAR(NC_STR_218,  0,  stp->crwcustId[5]);               /* 고객ID */
    GETVAR(NC_STR_219,  0,  stp->finaOrgnCode[5]);            /* 금융기관코드 */
    GETVAR(NC_STR_220,  0,  stp->finaOrgnDvsn[5]);            /* 금융기관구분 */
    GETVAR(NC_STR_221,  0,  stp->acctCardNo[5]);              /* 계좌_카드번호 */
    GETVAR(NC_STR_222,  0,  stp->bankBrchCode[5]);            /* 은행지점코드 */

    stp->cnvnCnt = Foccur32(transf, NC_STR_245);      /* 간편계좌 건수 */

    uvDebug("stp->cnvnCnt   = [%f]",  stp->cnvnCnt);

    for(ii = 0; ii < stp->cnvnCnt; ii++) {
      GETVAR(NC_STR_245,  ii,  stp->cnvnCrwcustId[ii]);               /* 고객ID */
      GETVAR(NC_STR_246,  ii,  stp->cnvnFinaOrgnCode[ii]);            /* 금융기관코드 */
      GETVAR(NC_STR_247,  ii,  stp->cnvnFinaOrgnDvsn[ii]);            /* 금융기관구분 */
      GETVAR(NC_STR_248,  ii,  stp->cnvnAcctCardNo[ii]);              /* 계좌_카드번호 */
      GETVAR(NC_STR_249,  ii,  stp->cnvnBankBrchCode[ii]);            /* 은행지점코드 */

      uvDebug("[%d]간편무효처리 고객ID          = [%s]",  ii, (char *) stp->cnvnCrwcustId   [ii].arr);
      uvDebug("[%d]간편무효처리 금융기관코드    = [%s]",  ii, (char *) stp->cnvnFinaOrgnCode[ii].arr);
      uvDebug("[%d]간편무효처리 금융기관구분    = [%s]",  ii, (char *) stp->cnvnFinaOrgnDvsn[ii].arr);
      uvDebug("[%d]간편무효처리 계좌_카드번호   = [%s]",  ii, (char *) stp->cnvnAcctCardNo  [ii].arr);
      uvDebug("[%d]간편무효처리 은행지점코드    = [%s]",  ii, (char *) stp->cnvnBankBrchCode[ii].arr);

    }

    for (ii = 0; ii < 3; ii++) {
      GETVAR(NC_STR_028,  ii, stp->cnttRcwcUsdv[ii]); /* 2회이후계약입출금사용구분 */
      GETVAR(NC_STR_063,  ii, stp->dpsrDvsn    [ii]); /* 예금주실명번호종류        */
      GETVAR(NC_STR_053,  ii, stp->agreDataDvsn[ii]); /* 동의자료구분              */
      GETVAR(NC_STR_054,  ii, stp->agreDataAddr[ii]); /* 동의자료주소              */
    }

    GETVAR(NC_STR_033,  0,  stp->speaDivdAtSndYn);   /* 분할/배당금자동송금여부 */

    GETVAR(NC_STR_029,  0,  stp->cardOwnrName[1]);            /* 카드소유자명 */
    GETVAR(NC_STR_030,  0,  stp->cardOwnrRrno[1]);    /* 카드소유자주민등록번호 */

    /* 계약고지정보             */
    stp->cniCnt = Foccur32(transf, NC_STR_041);             /* 계약고지고객건수 */
    for (ii = 0; ii < stp->cniCnt; ii++) {
      GETVAR(NC_STR_041,  ii, stp->cniCustId      [ii]); /* 고객ID */
      GETVAR(NC_STR_042,  ii, stp->notcYn         [ii]); /* 고지유무 */
      GET   (NC_DOU_043,  ii, stp->wekyDrnkCnt    [ii]); /* 주당음주횟수 */
      GETVAR(NC_STR_044,  ii, stp->drnkKdcd       [ii]); /* 음주종류코드 */
      GET   (NC_DOU_045,  ii, stp->t01DrnkQnty    [ii]); /* 1회음주량 */
      GET   (NC_DOU_046,  ii, stp->dalySmokQnty   [ii]); /* 일당흡연량 */
      GET   (NC_DOU_047,  ii, stp->otcmInsrJnct   [ii]); /* 타사보험가입건수 */
      GET   (NC_DOU_048,  ii, stp->otcmInsrJnpm   [ii]); /* 타사보험가입보험료 */
      GETVAR(NC_STR_049,  ii, stp->ovseRkarDpyn   [ii]); /* 해외위험지역출국여부 */
      GETVAR(NC_STR_050,  ii, stp->hndlBsnsName   [ii]); /* 취급업무명 */
      GETVAR(NC_STR_051,  ii, stp->wkplDeptRknm   [ii]); /* 직장/부서/직위명 */
      GETVAR(NC_STR_052,  ii, stp->sdjbName       [ii]); /* 부업명 */
      GET   (NC_DOU_053,  ii, stp->hght           [ii]); /* 신장 */
      GET   (NC_DOU_054,  ii, stp->wght           [ii]); /* 몸무게 */
      GETVAR(NC_STR_055,  ii, stp->cniHobyCode    [ii]); /* 취미코드 */
      GETVAR(NC_STR_056,  ii, stp->cniRiskGradCode[ii]); /* MAX위험등급코드 */
      GETVAR(NC_STR_057,  ii, stp->cniDrveCatpCode[ii]); /* MAX운전차종코드 */
      GETVAR(NC_STR_040,  ii, stp->cniOccpCode    [ii]); /* MAX직종코드 */
      GETVAR(NC_STR_064,  ii, stp->ry1WghtInyn    [ii]); /* 최근1년체중증감여부 (EUS) */
      GETVAR(NC_STR_065,  ii, stp->otcmIamtRcyn   [ii]); /* 타사보험금수령여부  (EUS) */
      GETVAR(NC_STR_066,  ii, stp->otcmSstdRgyn   [ii]); /* 타사표준하체등록여부(EUS) */
      GET   (NC_DOU_128,  ii, stp->cniEmbrPregMcnt[ii]); /* 태아임신개월수      (EUS) */
      GETVAR(NC_STR_129,  ii, stp->cniEmbrIspeOdyn[ii]); /* 태아검사이상유무    (EUS) */
      GETVAR(NC_STR_250,  ii, stp->cniInjrOccpCode[ii]); /* 상해직종코드 */
      GETVAR(NC_STR_251,  ii, stp->cniInjrRiskGrcd[ii]); /* 상해위험등급코드 */
    }

    /* stp->fhdCnt = Foccur32(transf, NC_STR_086);     가족력 고객건수 */
    /*
    for (ii = 0; ii < stp->fhdCnt; ii++) {
      GETVAR(NC_STR_086,  ii, stp->fhdCustRoleCode[ii]); / * 고객역할코드        (EUS) * /
      GETVAR(NC_STR_087,  ii, stp->fhdCustId      [ii]); / * 고객ID              (EUS) * /
      GETVAR(NC_STR_088,  ii, stp->fhdFmlyRelnCode[ii]); / * 가족관계코드        (EUS) * /
      GETVAR(NC_STR_089,  ii, stp->fhdDsasCode    [ii]); / * 질병코드            (EUS) * /
      GETVAR(NC_STR_122,  ii, stp->fhdDsasCten    [ii]); / * 질병내용            (EUS) * /
      GET   (NC_DOU_090,  ii, stp->attkTimeAge    [ii]); / * 발병시연령          (EUS) * /
      GET   (NC_DOU_121,  ii, stp->deadTimeAge    [ii]); / * 사망시연령          (EUS) * /
    }
    */

    /* stp->usiCnt = Foccur32(transf, NC_STR_091);     일상생활고지 고객건수 */
    /*
    for (ii = 0; ii < stp->usiCnt; ii++) {
      GETVAR(NC_STR_091,  ii, stp->usiCustRoleCode[ii]); / * 고객역할코드                         (EUS) * /
      GETVAR(NC_STR_092,  ii, stp->usiCustId      [ii]); / * 고객ID                               (EUS) * /
      GETVAR(NC_STR_093,  ii, stp->moveAsst       [ii]); / * 타인도움종류/이동(보행)하기          (EUS) * /
      GETVAR(NC_STR_094,  ii, stp->mealAsst       [ii]); / * 타인도움종류/식사하기                (EUS) * /
      GETVAR(NC_STR_131,  ii, stp->bthrUseAsst    [ii]); / * 타인도움종류/화장실사용하기          (EUS) * /
      GETVAR(NC_STR_132,  ii, stp->bathAsst       [ii]); / * 타인도움종류/목욕하기                (EUS) * /
      GETVAR(NC_STR_133,  ii, stp->clotPtonAsst   [ii]); / * 타인도움종류/옷입기                  (EUS) * /
      GETVAR(NC_STR_134,  ii, stp->whchUseYn      [ii]); / * 기구장비종류/휠체어(보조이동장치포함)(EUS) * /
      GETVAR(NC_STR_135,  ii, stp->wdftCaneUsyn   [ii]); / * 기구장비종류/목발ㆍ지팡이            (EUS) * /
      GETVAR(NC_STR_136,  ii, stp->aaUsyn         [ii]); / * 기구장비종류/도뇨관                  (EUS) * /
      GETVAR(NC_STR_137,  ii, stp->oxbtEqmtUsyn   [ii]); / * 기구장비종류/산소호흡장비            (EUS) * /
      GETVAR(NC_STR_138,  ii, stp->atbtEqmtUsyn   [ii]); / * 기구장비종류/인공호흡장비            (EUS) * /
      GETVAR(NC_STR_139,  ii, stp->ftdvUsyn       [ii]); / * 기구장비종류/투석장치                (EUS) * /
      GETVAR(NC_STR_140,  ii, stp->othrAsdvUsyn   [ii]); / * 기구장비종류/기타보조장구            (EUS) * /
      GETVAR(NC_STR_095,  ii, stp->mditXprcYn     [ii]); / * 의료요양시설경험유무                 (EUS) * /
      GETVAR(NC_STR_096,  ii, stp->fmlyLvtgYn     [ii]); / * 가족유무                             (EUS) * /
    }
    */

    /* 2004.08.04 신진혁 클라이언트에서 lpCtisReln 을 NC_STR_059 로 , insrJoinMotv 은     */
    /*                                                                NC_STR_058 로 넘김  */
    /* 수정함  */
    /*  GETVAR(NC_STR_058,  0,  stp->lpCtisReln     );           설계사와계약자/피보험자관계*/
    /*  GETVAR(NC_STR_059,  0,  stp->insrJoinMotv   );           보험가입동기             */
    GETVAR(NC_STR_059,  0,  stp->lpCtisReln);    /* 설계사와계약자/피보험자관계 */
    GETVAR(NC_STR_058,  0,  stp->insrJoinMotv);               /* 보험가입동기 */

    /* 운전차종고지정보         */
    stp->minsDniCnt = Foccur32(transf, NC_STR_061);         /* 주피운전차종건수 */
    uvDebug("*** stp->minsDniCnt [%f]", stp->minsDniCnt);
    for (ii = 0; ii < stp->minsDniCnt; ii++) {
      GETSTR(NC_STR_061,  ii, stp->dniDrveCatpCode[0][ii]); /* 주피운전차종코드 */
      uvDebug("*** stp->dniDrveCatpCode [%s]", stp->dniDrveCatpCode[0][ii]);
    }
    stp->scndDniCnt = Foccur32(transf, NC_STR_062);         /* 종피운전차종건수 */
    uvDebug("*** stp->scndDniCnt [%f]", stp->scndDniCnt);
    for (ii = 0; ii < stp->scndDniCnt; ii++) {
      GETSTR(NC_STR_062,  ii, stp->dniDrveCatpCode[1][ii]); /* 종피운전차종코드 */
      uvDebug("*** stp->dniDrveCatpCode [%s]", stp->dniDrveCatpCode[1][ii]);
    }

    GET(NC_DOU_063,  0,  stp->custIntrPsct);                  /* 고객소개인원수 */

    GETVAR(NC_STR_252,  0,  stp->memoCten);                 /* U/W특이사항 메모 */
    /* 2008.08 U/W특이사항 관련 (2006.08.19) */
    GETVAR(NC_STR_253,  0,  stp->memoCode);                   /* 계약별메모코드 */

    GETVAR(NC_STR_032,  0,  stp->commTrmtRqyn);           /* 통신해지신청여부   */
    GETVAR(NC_STR_034,  0,  stp->bnfcAsmtAgyn);           /* 수익자지정동의여부 */
    GETVAR(NC_STR_036,  0,  stp->taxSelYn    );           /* 세금우대선택여부   */
    GETVAR(NC_STR_037,  0,  stp->stplRecvDvsn);           /* 약관전달경로구분   */
    GETVAR(NC_STR_038,  0,  stp->asmtAgntRqyn);           /* 지정대리인신청여부 */
    GETVAR(NC_STR_039,  0,  stp->asmtAgntCtid);           /* 지정대리인고객ID   */
    GETVAR(NC_STR_109,  0,  stp->rejtMsgAgyn);            /* 승낙거절LMS동의여부*/

    GETVAR(NC_STR_045,  0,  stp->rrfdCnvsRqyn);         /* 양육자금전환신청여부 */
    GET   (NC_DOU_040,  0,  stp->cnvsRato    );                     /* 전환비율 */
    GET   (NC_DOU_041,  0,  stp->cnvsEndAge  );                 /* 전환종료나이 */

    GETVAR(NC_STR_060,  0,  stp->dumbYn      );             /* 청각언어장애여부 */
    GETVAR(NC_STR_019,  0,  stp->vrblHoloYn  );                 /* 변액자필여부 */
    GETVAR(NC_STR_031,  0,  stp->polyTrnmRtdv);             /* 증권전달경로구분 */
    GETVAR(NC_STR_069,  0,  stp->mntrDvcd    );             /* 모니터링방법구분 */

    /* 고객정보조회 고객 */
    stp->cinCustCnt = Foccur32(transf, NC_STR_210); /* 고객정보조회 고객건수 */

    for (ii = 0; ii < stp->cinCustCnt; ii++) {
      GETVAR(NC_STR_210,  ii, stp->cinCustId   [ii]);   /* 동의대상고객id             */
      GETVAR(NC_STR_212,  ii, stp->cinAgreYn   [ii]);   /* 상품소개 수집이용 동의여부 */
      GETVAR(NC_STR_020,  ii, stp->cntaMetdDvsn[ii]);   /* 상품소개 연락방식구분      */
      GET   (NC_DOU_019,  ii, stp->agreRqstTerm[ii]);   /* 상품소개 동의신청기간      */

      GETVAR(NC_STR_070,  ii, stp->cinOferAgreYn [ii]);   /* 상품소개 제공 동의여부    */
      GETVAR(NC_STR_107,  ii, stp->AnalAgreYn    [ii]);   /* 고객분석 수집이용 동의여부*/
      GET   (NC_DOU_070,  ii, stp->AnalRqstTerm  [ii]);   /* 고객분석 동의신청기간     */
      GETVAR(NC_STR_108,  ii, stp->AnalOferAgreYn[ii]);   /* 고객분석 제공 동의여부    */

      GETVAR(NC_STR_234,  ii, stp->AgreSmsAgYn   [ii]);   /* 문자 수신 동의여부        */
      GETVAR(NC_STR_235,  ii, stp->AgreEmailAgYn [ii]);   /* 이메일 수신 동의여부      */
    }

    uvDebug("증권번호               =   [%s]",  (char *) stp->polyNo         .arr);
    uvDebug("계약일자               =   [%s]",  (char *) stp->cnttDate       .arr);
    uvDebug("개인법인판매구분       =   [%s]",  (char *) stp->prsnCoprSadv   .arr);

    uvDebug("청약부속정보                   ");
    uvDebug("초회보험료송금일자     =   [%s]",  (char *) stp->ftprRmtnDate   .arr);
    uvDebug("초회보험료입금방법코드 =   [%s]",  (char *) stp->ftprRecvMdcd   .arr);
    uvDebug("월소득금액             =   [%f]",           stp->mnthIncmAmt        );

    uvDebug("보험료수금정보                 ");
    uvDebug("수금방법코드           =   [%s]",  (char *) stp->collMetdCode   .arr);
    uvDebug("자동대출납입여부       =   [%s]",  (char *) stp->aulnPaymYn     .arr);

    uvDebug("계약입출금등록정보             ");
    uvDebug("고객ID                 =   [%s]",  (char *) stp->crwcustId   [0].arr);
    uvDebug("금융기관코드           =   [%s]",  (char *) stp->finaOrgnCode[0].arr);
    uvDebug("금융기관구분           =   [%s]",  (char *) stp->finaOrgnDvsn[0].arr);
    uvDebug("계좌_카드번호          =   [%s]",  (char *) stp->acctCardNo  [0].arr);
    uvDebug("카드유효만료년월       =   [%s]",  (char *) stp->cardVlidEdym[0].arr);
    uvDebug("은행지점코드           =   [%s]",  (char *) stp->bankBrchCode[0].arr);
    uvDebug("카드소유자명           =   [%s]",  (char *) stp->cardOwnrName[0].arr);
    uvDebug("카드소유자주민등록번호 =   [%s]",  (char *) stp->cardOwnrRrno[0].arr);

    uvDebug("고객ID                 =   [%s]",  (char *) stp->crwcustId   [1].arr);
    uvDebug("금융기관코드           =   [%s]",  (char *) stp->finaOrgnCode[1].arr);
    uvDebug("금융기관구분           =   [%s]",  (char *) stp->finaOrgnDvsn[1].arr);
    uvDebug("계좌_카드번호          =   [%s]",  (char *) stp->acctCardNo  [1].arr);
    uvDebug("카드유효만료년월       =   [%s]",  (char *) stp->cardVlidEdym[1].arr);
    uvDebug("은행지점코드           =   [%s]",  (char *) stp->bankBrchCode[1].arr);
    uvDebug("이체희망일             =   [%s]",  (char *) stp->trnfHopeDd  [1].arr);
    uvDebug("카드소유자명           =   [%s]",  (char *) stp->cardOwnrName[1].arr);
    uvDebug("카드소유자주민등록번호 =   [%s]",  (char *) stp->cardOwnrRrno[1].arr);

    uvDebug("자동송금서비스계좌 고객ID        = [%s]",  (char *) stp->crwcustId   [4].arr);
    uvDebug("자동송금서비스계좌 금융기관코드  = [%s]",  (char *) stp->finaOrgnCode[4].arr);
    uvDebug("자동송금서비스계좌 금융기관구분  = [%s]",  (char *) stp->finaOrgnDvsn[4].arr);
    uvDebug("자동송금서비스계좌 계좌_카드번호 = [%s]",  (char *) stp->acctCardNo  [4].arr);
    uvDebug("자동송금서비스계좌 은행지점코드  = [%s]",  (char *) stp->bankBrchCode[4].arr);

    uvDebug("생활자금지급계좌 고객ID          = [%s]",  (char *) stp->crwcustId   [5].arr);
    uvDebug("생활자금지급계좌 금융기관코드    = [%s]",  (char *) stp->finaOrgnCode[5].arr);
    uvDebug("생활자금지급계좌 금융기관구분    = [%s]",  (char *) stp->finaOrgnDvsn[5].arr);
    uvDebug("생활자금지급계좌 계좌_카드번호   = [%s]",  (char *) stp->acctCardNo  [5].arr);
    uvDebug("생활자금지급계좌 은행지점코드    = [%s]",  (char *) stp->bankBrchCode[5].arr);

    for (ii = 0; ii < 3; ii++) {
      uvDebug("2회이후계약입출금사용구분  =   [%s]",  (char *) stp->cnttRcwcUsdv[ii].arr);
    }
    uvDebug("분할/배당금자동송금여부 =   [%s]",  (char *) stp->speaDivdAtSndYn.arr);

    for (ii = 0; ii < stp->cniCnt; ii++) {
      uvDebug("고객ID                 =   [%s]",  (char *) stp->cniCustId[ii].arr);
      uvDebug("고지유무               =   [%s]",  (char *) stp->notcYn[ii].arr);
      uvDebug("주당음주횟수           =   [%f]",          stp->wekyDrnkCnt[ii]);
      uvDebug("음주종류코드           =   [%s]",  (char *) stp->drnkKdcd[ii].arr);
      uvDebug("1회음주량              =   [%f]",          stp->t01DrnkQnty[ii]);
      uvDebug("일당흡연량             =   [%f]",          stp->dalySmokQnty[ii]);
      uvDebug("흡연기간               =   [%f]",          stp->smokTerm[ii]);
      uvDebug("타사보험가입건수       =   [%f]",          stp->otcmInsrJnct[ii]);
      uvDebug("타사보험가입보험료     =   [%f]",          stp->otcmInsrJnpm[ii]);
      uvDebug("해외위험지역출국여부   =   [%s]",  (char *) stp->ovseRkarDpyn[ii].arr);
      uvDebug("취급업무명             =   [%s]",  (char *) stp->hndlBsnsName[ii].arr);
      uvDebug("직장/부서/직위명       =   [%s]",  (char *) stp->wkplDeptRknm[ii].arr);
      uvDebug("부업명                 =   [%s]",  (char *) stp->sdjbName[ii].arr);
      uvDebug("신장                   =   [%f]",          stp->hght[ii]);
      uvDebug("몸무게                 =   [%f]",          stp->wght[ii]);
      uvDebug("MAX위험등급코드        =   [%s]",  (char *) stp->cniRiskGradCode[ii].arr);
      uvDebug("MAX직종코드            =   [%s]",  (char *) stp->cniOccpCode[ii].arr);
      uvDebug("MAX운전차종코드        =   [%s]",  (char *) stp->cniDrveCatpCode[ii].arr);

      /* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁            */
      uvDebug("MAX상해직종코드        =   [%s]",  (char *) stp->cniInjrOccpCode[ii].arr);
      uvDebug("MAX상해위험등급코드    =   [%s]",  (char *) stp->cniInjrRiskGrcd[ii].arr);

      uvDebug("최근1년체중증감여부 (EUS)= [%s]",  (char *) stp->ry1WghtInyn[ii].arr);
      uvDebug("타사보험금수령여부  (EUS)= [%s]",  (char *) stp->otcmIamtRcyn[ii].arr);
      uvDebug("타사표준하체등록여부(EUS)= [%s]",  (char *) stp->otcmSstdRgyn[ii].arr);
      uvDebug("태아임신개월수      (EUS)= [%f]",          stp->cniEmbrPregMcnt[ii]);
      uvDebug("태아검사이상유무    (EUS)= [%s]",  (char *) stp->cniEmbrIspeOdyn[ii].arr);
    }
/*
    for (ii = 0; ii < stp->disorderCnt; ii++) {
      uvDebug("질병순번     (EUS)[%d] = [%f]", ii,         stp->disorderSeqNo[ii]);
      uvDebug("고객역할코드 (EUS)[%d] = [%s]", ii, (char *) stp->dorCustRoleCode[ii].arr);
      uvDebug("고객ID       (EUS)[%d] = [%s]", ii, (char *) stp->dorCustId[ii].arr);
      uvDebug("치료일수 FROM(EUS)[%d] = [%s]", ii, (char *) stp->fromRmdy[ii].arr);
      uvDebug("치료일수 TO  (EUS)[%d] = [%s]", ii, (char *) stp->toRmdy[ii].arr);
      uvDebug("치료일수     (EUS)[%d] = [%s]", ii, (char *) stp->rmdyDays[ii].arr);
      uvDebug("질병코드     (EUS)[%d] = [%s]", ii, (char *) stp->dorDsasCode[ii].arr);
      uvDebug("입원여부     (EUS)[%d] = [%s]", ii, (char *) stp->hospYn[ii].arr);
      uvDebug("통원치료여부 (EUS)[%d] = [%s]", ii, (char *) stp->otpaRmdyYn[ii].arr);
      uvDebug("수술여부     (EUS)[%d] = [%s]", ii, (char *) stp->operYn[ii].arr);
      uvDebug("투약여부     (EUS)[%d] = [%s]", ii, (char *) stp->mdctYn[ii].arr);
      uvDebug("정밀검사여부 (EUS)[%d] = [%s]", ii, (char *) stp->acrcIspeYn[ii].arr);
      uvDebug("완치여부     (EUS)[%d] = [%s]", ii, (char *) stp->ctryYn[ii].arr);
      uvDebug("재발경험여부 (EUS)[%d] = [%s]", ii, (char *) stp->rlpsXprcYn[ii].arr);
    }

    for (ii = 0; ii < stp->hostCnt; ii++) {
      uvDebug("질병 순번       (EUS)[%d] = [%f]", ii,         stp->hotDorSeqNo[ii]);
      uvDebug("고객ID          (EUS)[%d] = [%s]", ii, (char *) stp->hotCustId[ii].arr);
      uvDebug("입원시작일자    (EUS)[%d] = [%s]", ii, (char *) stp->hospStdt[ii].arr);
      uvDebug("입원종료일자    (EUS)[%d] = [%s]", ii, (char *) stp->hospEndt[ii].arr);
      uvDebug("입원기간추산여부(EUS)[%d] = [%s]", ii, (char *) stp->hospTermXpyn[ii].arr);
      uvDebug("입원일수        (EUS)[%d] = [%s]", ii, (char *) stp->hospDays[ii].arr);
    }

    for (ii = 0; ii < stp->obsCnt; ii++) {
      uvDebug("고객역할코드  (EUS)[%d] = [%s]", ii, (char *) stp->obsCustRoleCode[ii].arr);
      uvDebug("고객ID        (EUS)[%d] = [%s]", ii, (char *) stp->obsCustId[ii].arr);
      uvDebug("장애발생일자  (EUS)[%d] = [%s]", ii, (char *) stp->obstOcdt[ii].arr);
      uvDebug("장애내용      (EUS)[%d] = [%s]", ii, (char *) stp->obstCten[ii].arr);
      uvDebug("재해여부      (EUS)[%d] = [%s]", ii, (char *) stp->acciYn[ii].arr);
      uvDebug("선천적질병여부(EUS)[%d] = [%s]", ii, (char *) stp->inbrDsasYn[ii].arr);
      uvDebug("후천적질병여부(EUS)[%d] = [%s]", ii, (char *) stp->acqrDsasYn[ii].arr);
    }

    for (ii = 0; ii < stp->fhdCnt; ii++) {
      uvDebug("고객역할코드(EUS)[%d] = [%s]", ii, (char *) stp->fhdCustRoleCode[ii].arr);
      uvDebug("고객ID      (EUS)[%d] = [%s]", ii, (char *) stp->fhdCustId[ii].arr);
      uvDebug("가족관계코드(EUS)[%d] = [%s]", ii, (char *) stp->fhdFmlyRelnCode[ii].arr);
      uvDebug("질병코드    (EUS)[%d] = [%s]", ii, (char *) stp->fhdDsasCode[ii].arr);
      uvDebug("발병시연령  (EUS)[%d] = [%f]", ii,         stp->attkTimeAge[ii]);
      uvDebug("사망시연령  (EUS)[%d] = [%f]", ii,         stp->deadTimeAge[ii]);
    }

    for (ii = 0; ii < stp->usiCnt; ii++) {
      uvDebug("고객역할코드        (EUS)[%d] = [%s]", ii, (char *) stp->usiCustRoleCode[ii].arr);
      uvDebug("고객ID              (EUS)[%d] = [%s]", ii, (char *) stp->usiCustId[ii].arr);
      uvDebug("타인도움종류/이동(보행)하기  (EUS)[%d] = [%s]",  ii, (char *) stp->moveAsst[ii].arr);
      uvDebug("타인도움종류/식사하기        (EUS)[%d] = [%s]",  ii, (char *) stp->mealAsst[ii].arr);
      uvDebug("타인도움종류/화장실사용하기  (EUS)[%d] = [%s]",  ii, (char *) stp->bthrUseAsst[ii].arr);
      uvDebug("타인도움종류/목욕하기        (EUS)[%d] = [%s]",  ii, (char *) stp->bathAsst[ii].arr);
      uvDebug("타인도움종류/옷입기          (EUS)[%d] = [%s]",  ii, (char *) stp->clotPtonAsst[ii].arr);
    uvDebug("기구장비종류/휠체어(보조이동장치포함)(EUS)[%d] = [%s]",  ii, (char *) stp->whchUseYn[ii].arr);
      uvDebug("기구장비종류/목발ㆍ지팡이    (EUS)[%d] = [%s]",  ii, (char *) stp->wdftCaneUsyn[ii].arr);
      uvDebug("기구장비종류/도뇨관          (EUS)[%d] = [%s]",  ii, (char *) stp->aaUsyn[ii].arr);
      uvDebug("기구장비종류/산소호흡장비    (EUS)[%d] = [%s]",  ii, (char *) stp->oxbtEqmtUsyn[ii].arr);
      uvDebug("기구장비종류/인공호흡장비    (EUS)[%d] = [%s]",  ii, (char *) stp->atbtEqmtUsyn[ii].arr);
      uvDebug("기구장비종류/투석장치        (EUS)[%d] = [%s]",  ii, (char *) stp->ftdvUsyn[ii].arr);
      uvDebug("기구장비종류/기타보조장구    (EUS)[%d] = [%s]",  ii, (char *) stp->othrAsdvUsyn[ii].arr);
      uvDebug("의료요양시설경험유무         (EUS)[%d] = [%f]",  ii,          stp->mditXprcYn[ii]    );
      uvDebug("가족유무                     (EUS)[%d] = [%f]",  ii,          stp->fmlyLvtgYn[ii]    );
    }
*/
    uvDebug("설계사와계약자/피보험자관계=   [%s]",  (char *) stp->lpCtisReln  .arr);
    uvDebug("보험가입동기               =   [%s]",  (char *) stp->insrJoinMotv.arr);

    for (ii = 0; ii < stp->minsDniCnt; ii++) {
      uvDebug("주피운전차종코드       =   [%s]",          stp->dniDrveCatpCode[0][ii]);
    }
    for (ii = 0; ii < stp->scndDniCnt; ii++) {
      uvDebug("주피운전차종코드       =   [%s]",          stp->dniDrveCatpCode[1][ii]);
    }

    uvDebug("고객소개인원수           =   [%f]",          stp->custIntrPsct);

    uvDebug("U/W특이사항 메모 = [%s]", (char *) stp->memoCten.arr);

    /* 2008.08 U/W특이사항 관련 (2006.08.19) */
    uvDebug("계약별메모코드   = [%s]", (char *) stp->memoCode.arr);

    uvDebug("통신해지신청여부     = [%s]", (char *) stp->commTrmtRqyn.arr);
    uvDebug("수익자지정동의여부   = [%s]", (char *) stp->bnfcAsmtAgyn.arr);
    uvDebug("세금우대선택여부     = [%s]", (char *) stp->taxSelYn    .arr);
    uvDebug("약관전달경로구분     = [%s]", (char *) stp->stplRecvDvsn.arr);

    uvDebug("양육자금전환신청여부 = [%s]", (char *) stp->rrfdCnvsRqyn.arr);
    uvDebug("전환비율             = [%f]",          stp->cnvsRato        );
    uvDebug("전환종료나이         = [%f]",          stp->cnvsEndAge      );

    uvDebug("지정대리인신청여부   = [%s]", (char *) stp->asmtAgntRqyn.arr);
    uvDebug("지정대리인고객ID     = [%s]", (char *) stp->asmtAgntCtid.arr);

    uvDebug("승낙거절LMS동의여부  = [%s]", (char *) stp->rejtMsgAgyn .arr);
    uvDebug("청각언어장애여부     = [%s]", (char *) stp->dumbYn      .arr);
    uvDebug("변액자필여부         = [%s]", (char *) stp->vrblHoloYn  .arr);
    uvDebug("증권전달경로구분     = [%s]", (char *) stp->polyTrnmRtdv.arr);
    uvDebug("모니터링방법구분     = [%s]", (char *) stp->mntrDvcd    .arr);

    /* 지정대리인 ID가 없을 경우 'N'로 일괄변경(2014.05.31 언더라이팅 김혜진) */
    if (strlen((char *) stp->asmtAgntCtid.arr) == 0) {
      COPY(stp->asmtAgntRqyn,"N");
      uvDebug("[변경]지정대리인신청여부   = [%s]", (char *) stp->asmtAgntRqyn.arr);
    }

    for (ii = 0; ii < stp->cinCustCnt; ii++) {
      uvDebug("동의대상고객id                =   [%s]",  (char *) stp->cinCustId   [ii].arr);
      uvDebug("상품소개 수집이용 동의여부    =   [%s]",  (char *) stp->cinAgreYn   [ii].arr);
      uvDebug("상품소개 연락방식구분         =   [%s]",  (char *) stp->cntaMetdDvsn[ii].arr);
      uvDebug("상품소개 동의신청기간         =   [%f]",           stp->agreRqstTerm[ii]    );

      uvDebug("상품소개 제공 동의여부        =   [%s]",  (char *) stp->cinOferAgreYn [ii].arr);
      uvDebug("고객분석 수집이용 동의여부    =   [%s]",  (char *) stp->AnalAgreYn    [ii].arr);
      uvDebug("고객분석 동의신청기간         =   [%f]",           stp->AnalRqstTerm  [ii]    );
      uvDebug("고객분석 제공 동의여부        =   [%s]",  (char *) stp->AnalOferAgreYn[ii].arr);

      uvDebug("문자 수신 동의여부            =   [%s]",  (char *) stp->AgreSmsAgYn   [ii].arr);
      uvDebug("이메일 수신 동의여부          =   [%s]",  (char *) stp->AgreEmailAgYn [ii].arr);
    }

    /* TCM 자필녹취여부 (2012.02.17) */
    GETVAR(NC_STR_211,  0,  stp->holoRecYn ); /* 자필녹취여부         */

    GETVAR(NC_STR_005,  0,  stp->savnTxfrYn); /* 저축성비과세선택여부 */
    GETVAR(NC_STR_043,  0,  stp->frplSavnTxfrYn); /* 자유설계 저축성비과세선택여부 */

    uvDebug("자필녹취여부                 =[%s]",(char *) stp->holoRecYn .arr);
    uvDebug("저축성비과세선택여부         =[%s]",(char *) stp->savnTxfrYn.arr);
    uvDebug("자유설계 저축성비과세선택여부=[%s]",(char *) stp->frplSavnTxfrYn.arr);

    /* 프레지던트 가입정보 (2013.04.29) */
    GET   (NC_DOU_007,  0,  stp->connMcntPrem);     /* 관련주계약보험료(president) */
    GETVAR(NC_STR_035,  0,  stp->connPolyNo  );     /* 연계증권번호    (president) */

    uvDebug("관련주계약보험료(president) = [%f]",          stp->connMcntPrem    );
    uvDebug("연계증권번호    (president) = [%s]", (char *) stp->connPolyNo  .arr);

    GETVAR(NC_STR_046,  0,  stp->srvcRoutDvsn);    /* 서비스 호출 경로 */
    uvDebug("서비스 호출 경로 = [%s]", (char *) stp->srvcRoutDvsn  .arr);

    GETVAR(NC_STR_047,  0,  stp->spprAuwdPyot);    /* 특약보험료자동인출납입옵션 */
    uvDebug("특약보험료자동인출납입옵션 = [%s]", (char *) stp->spprAuwdPyot.arr);

    GETVAR(NC_STR_048,  0,  stp->autoRejnAgyn);    /* 자동재가입동의여부 */
    uvDebug("자동재가입동의여부 = [%s]", (char *) stp->autoRejnAgyn.arr);

    GETVAR(NC_STR_223,  0,  stp->dntnSpctSlctYn);            /* 기부특약선택여부 */
    uvDebug("기부특약선택여부 = [%s]", (char *) stp->dntnSpctSlctYn.arr);

    GETVAR(NC_STR_100,  0,  stp->billNo);          /* 결재대행 시 어음번호 */
    uvDebug("결재대행 시 어음번호 = [%s]", (char *) stp->billNo.arr);

    GETVAR(NC_STR_166,  0,  stp->cnvnNotcYn1);         /* 간편가입 고지여부1 */
    GETVAR(NC_STR_167,  0,  stp->cnvnNotcYn2);         /* 간편가입 고지여부2 */
    GETVAR(NC_STR_168,  0,  stp->cnvnNotcYn3);         /* 간편가입 고지여부3 */

    uvDebug("간편가입 고지여부1   =[%s]",(char *) stp->cnvnNotcYn1.arr);
    uvDebug("간편가입 고지여부2   =[%s]",(char *) stp->cnvnNotcYn2.arr);
    uvDebug("간편가입 고지여부3   =[%s]",(char *) stp->cnvnNotcYn3.arr);

    GETVAR(NC_STR_180,  0,  stp->bsthSvagYn);         /* 양치서비스동의여부 */
    uvDebug("양치서비스동의여부   =[%s]",(char *) stp->bsthSvagYn.arr);

    GETVAR(NC_STR_084,  0,  stp->brthExpcDate);         /* 출생예정일자 */
    uvDebug("출생예정일자   =[%s]",(char *) stp->brthExpcDate.arr);

    stp->dsabTxcvCnt = Foccur32(transf, NC_STR_175);      /* 장애인전용 세제전환특약신청 고객 건수 */

    uvDebug("stp->dsabTxcvCnt   = [%f]",  stp->dsabTxcvCnt);

    for(ii = 0; ii < stp->dsabTxcvCnt; ii++) {
      GETVAR(NC_STR_174,  ii,  stp->dsabCustRqstDvsn[ii]);  /* 고객신청구분 */
      GETVAR(NC_STR_175,  ii,  stp->dsabCustRoleCode[ii]);  /* 고객역할코드 */
      GETVAR(NC_STR_176,  ii,  stp->dsabCustId[ii]);        /* 고객ID */
      GETVAR(NC_STR_177,  ii,  stp->dsabDvcd[ii]);          /* 장애구분 */
      GETVAR(NC_STR_178,  ii,  stp->dsabStrtTerm[ii]);      /* 장애시작일자 */
      GETVAR(NC_STR_179,  ii,  stp->dsabEndTerm[ii]);       /* 장애종료일자 */

      uvDebug("[%d]장애인전용 세제전환특약신청 고객신청구분   = [%s]",  ii, (char *) stp->dsabCustRqstDvsn[ii].arr);
      uvDebug("[%d]장애인전용 세제전환특약신청 고객역할코드   = [%s]",  ii, (char *) stp->dsabCustRoleCode[ii].arr);
      uvDebug("[%d]장애인전용 세제전환특약신청 고객ID         = [%s]",  ii, (char *) stp->dsabCustId      [ii].arr);
      uvDebug("[%d]장애인전용 세제전환특약신청 장애구분       = [%s]",  ii, (char *) stp->dsabDvcd        [ii].arr);
      uvDebug("[%d]장애인전용 세제전환특약신청 장애시작일자   = [%s]",  ii, (char *) stp->dsabStrtTerm    [ii].arr);
      uvDebug("[%d]장애인전용 세제전환특약신청 장애종료일자   = [%s]",  ii, (char *) stp->dsabEndTerm     [ii].arr);
    }
  }
}

/************************************************************************
  Function Name : SVncapl300in1_setValue()
  Note          : 클라이언트로 전송할 값을 FML buffer로 MOVE
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_setValue(struct stp_SVncapl300in1 *stp) {
  PUTVAR(NC_STR_101,  0,  stp->recpNoScrn);     /* 영수증번호 */
  PUTVAR(NC_STR_105,  0,  stp->rcntNo);         /* 승인번호 */
  PUTVAR(NC_STR_106,  0,  stp->cnttDate);       /* 계약일자 */
  PUTVAR(NC_STR_205,  0,  stp->orgnArdcYn);     /* 기관전결여부 */
  PUTVAR(NC_STR_206,  0,  stp->finaYn);         /* 재정UW여부 */

  uvDebug("영수증번호   =   [%s]",  (char *) stp->recpNoScrn.arr);
  uvDebug("승인번호     =   [%s]",  (char *) stp->rcntNo    .arr);
  uvDebug("계약일자     =   [%s]",  (char *) stp->cnttDate  .arr);
  uvDebug("기관전결여부 =   [%s]",  (char *) stp->orgnArdcYn.arr);
  uvDebug("재정UW여부   =   [%s]",  (char *) stp->finaYn    .arr);

  int ii = 0;
  for (ii=0; ii<CRW; ii++) {
    PUTVAR(NC_STR_103,  ii,  stp->rqstSeqNo[ii]);         /* 계좌신청일련번호 */

    uvDebug("[%d] 계좌사용구분[%s] = 계좌신청일련번호[%s]", ii, (char *) stp->cnttRcwcUsdv[ii].arr, (char *) stp->rqstSeqNo[ii].arr);
  }

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_initSet()
  Note          : 초기값 setting
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void    SVncapl300in1_initSet(struct stp_SVncapl300in1 *stp) {
  int     ii;

  /* 시스템일자       */
  uvGetTime(13, (char *) stp->crntDate.arr);
  stp->crntDate.len = strlen((char *) stp->crntDate.arr);

  /* 시스템시간       */
  uvGetTime(8,  (char *) stp->crntTimeHh24.arr);
  stp->crntTimeHh24.len = strlen((char *) stp->crntTimeHh24.arr);

  /* 현재년월         */
  NCOPYVAR(stp->crntYm,   stp->crntDate,  6);

  /* 현재일자||'01'   */
  NCOPYVAR(stp->crntFrtDate,  stp->crntDate,  6);
  CAT(stp->crntFrtDate,  "01");

  /* 월소득금액원처리 */
  stp->mnthIncmAmt    =   stp->mnthIncmAmt    *   10000;

  /* 타사가입보험료   */
  for (ii = 0; ii < stp->cniCnt; ii++) {
    stp->otcmInsrJnpm[ii] = stp->otcmInsrJnpm[ii] * 10000;
  }

  uvDebug("시스템일자                     =   [%s]",  (char *) stp->crntDate    .arr);
  uvDebug("시스템시간                     =   [%s]",  (char *) stp->crntTimeHh24.arr);
  uvDebug("현재년월                       =   [%s]",  (char *) stp->crntYm      .arr);
  uvDebug("현재월+01                      =   [%s]",  (char *) stp->crntFrtDate .arr);

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencApl300vw21Sp()
  Note          : 저축성 비과세 여부 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300vw21Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_apl300vw21_sp_in  dencApl300vw21SpIn;
  struct _denc_apl300vw21_sp_out dencApl300vw21SpOut;

  uvDebug("SVncapl300in1_dencApl300vw21Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300vw21SpInClear(&dencApl300vw21SpIn);

  COPYVAR(dencApl300vw21SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencApl300vw21SpOutClear(&dencApl300vw21SpOut);

  /* DBIO module 호출                                             */

  dencApl300vw21Sp(&basicParam,&dencApl300vw21SpIn,&dencApl300vw21SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300VW21_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300VW21_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  COPYVAR(stp->savnTxfrYn,dencApl300vw21SpOut.txfrAplyYn);

  uvDebug("비과세여부 = [%s]", (char *) stp->savnTxfrYn.arr);

  uvDebug("SVncapl300in1_dencApl300vw21Sp  End");

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_dencApl300vw23Sp()
  Note          : 저축성 비과세 여부 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300vw23Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_apl300vw23_sp_in  dencApl300vw23SpIn;
  struct _denc_apl300vw23_sp_out dencApl300vw23SpOut;

  uvDebug("SVncapl300in1_dencApl300vw23Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300vw23SpInClear(&dencApl300vw23SpIn);

  COPYVAR(dencApl300vw23SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencApl300vw23SpOutClear(&dencApl300vw23SpOut);

  /* DBIO module 호출                                             */

  dencApl300vw23Sp(&basicParam,&dencApl300vw23SpIn,&dencApl300vw23SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300VW23_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300VW23_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  COPYVAR(stp->frplSavnTxfrYn,dencApl300vw23SpOut.txfrAplyYn);

  uvDebug("거치형 비과세여부 = [%s]", (char *) stp->frplSavnTxfrYn.arr);

  uvDebug("SVncapl300in1_dencApl300vw23Sp  End");

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_CMAC_com113vw_CC()
  Note          : 기관 일일마감 여부 확인
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMAC_com113vw_CC(struct stp_SVncapl300in1 *stp) {
  char    clog_yn[1+1];
  char    monthfirst[8+1];
  char    monthEnd[8+1];

  memset(clog_yn,   0x00,   sizeof(clog_yn));
  memset(monthfirst,   0x00,   sizeof(monthfirst));
  memset(monthEnd,   0x00,   sizeof(monthEnd));

  uvDebug("SVncapl300in1_CMAC_com113vw_CC  Start");

  /* 이체일자 31 이상인 경우 말일 산출                            */
  /* 2008.3.3 언더라이팅센터 요청, 접수일자로 마감여부 체크함     */
  /* 단, 월말 지연입력은 전달말일의 일마감을 체크함               */

  /* 송금일자가 전달이면 ERP 마감여부 기준일자를 송금일자로 셋팅함  */
  if (uvAtoi((char *) stp->crntDate.arr,0,6) > uvAtoi((char *) stp->ftprRmtnDate.arr,0,6)) {
    strncpy(monthEnd,   (char *) stp->ftprRmtnDate.arr, 8);
    if (strlen((char *) stp->ftprRmtnDate.arr) == 0) {
      strncpy(monthEnd,   (char *) stp->crntDate.arr, 8);
    }
  } else {
    strncpy(monthEnd,   (char *) stp->crntDate.arr,  8);
  }

  uvDebug("기준일자 : [%s]",monthEnd);
/*
  if (CMAC_com113vw_CC(monthEnd, \
      (char *) stp->clltOrgnCode.arr, \
      clog_yn) != SUCCESS) {
    EXEC SQL ROLLBACK;
    uvDebug("경리 기관마감여부 체크시 오류가 발생하였습니다");
    appReturnCode = 3114;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         * /
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "경리 기관마감여부 체크시 오류가 발생하였습니다", "SVncapl300in1");
  } */

  if (strncmp(clog_yn, "1", 1) == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("경리 기관 일일마감 상태-접수불가합니다.");
    appReturnCode = 4433;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "경리 기관 일일마감 상태-접수불가합니다.", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_CMAC_com113vw_CC  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in11Sp()
  Note          : 격주휴무 접수불가 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in11Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in11_sp_out dcncApl300in11SpOut;
  struct _dcnc_apl300in11_sp_in  dcncApl300in11SpIn;

  uvDebug("SVncapl300in1_dcncApl300in11Sp  Start");
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in11SpInClear(&dcncApl300in11SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in11SpIn.ymd,     stp->crntDate);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in11SpOutClear(&dcncApl300in11SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in11Sp(&basicParam,&dcncApl300in11SpIn,&dcncApl300in11SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN11_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN11_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  COPYVAR(stp->hldyYn,   dcncApl300in11SpOut.hldyYn);
  COPYVAR(stp->biwkOfdyYn,   dcncApl300in11SpOut.biwkOfdyYn);
  COPYVAR(stp->day,   dcncApl300in11SpOut.day);

  /*  7월 19일부터 격주휴무제 폐지 주5일근무제 도입
  if (strncmp((char *)stp->biwkOfdyYn.arr, "Y", 1) == 0) {
      EXEC SQL ROLLBACK;
      uvDebug("격주토요일은 입력이 불가합니다.");
      appReturnCode = 273;
      SVC_CLOSE(APPERR, appReturnCode, 0, \
      "격주토요일은 입력이 불가합니다.", "SVncapl300in1");
  }
  */

  uvDebug("SVncapl300in1_dcncApl300in11Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in09Sp()
  Note          : 신계약 월별 일정 관리 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void    SVncapl300in1_dcncApl300in09Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in09_sp_out dcncApl300in09SpOut;
  struct _dcnc_apl300in09_sp_in  dcncApl300in09SpIn;

  uvDebug("SVncapl300in1_dcncApl300in09Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in09SpInClear(&dcncApl300in09SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl300in09SpIn.bsnsDvsnCode,   "NC");              /* 업무구분코드 */
  if (strncmp((char *) stp->prsnCoprSadv.arr, "1", 1) == 0) {       /* 개인 */
    COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCP01");   /* 개인청약서입력개시 */
  } else {
    COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCG01");   /* 법인청약서입력개시 */
  }
  COPYVAR(dcncApl300in09SpIn.clogYm,   stp->crntYm);              /* 마감년월 */

  uvDebug("dcncApl300in09SpIn.bsnsDvsnCode [%s]",(char *) dcncApl300in09SpIn.bsnsDvsnCode.arr);
  uvDebug("dcncApl300in09SpIn.schdAdmnKdcd [%s]",(char *) dcncApl300in09SpIn.schdAdmnKdcd.arr);
  uvDebug("dcncApl300in09SpIn.clogYm       [%s]",(char *) dcncApl300in09SpIn.clogYm.arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in09SpOutClear(&dcncApl300in09SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in09Sp(&basicParam,&dcncApl300in09SpIn,&dcncApl300in09SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN09_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN09_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("월별 일정관리 확인");
    appReturnCode = 4413;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "월별 일정관리 확인", "SVncapl300in1");
  }

  /* 현재월 청약서 입력개시일자   */
  COPYVAR(stp->stddDate,  dcncApl300in09SpOut.stddDate);
  COPYVAR(stp->stddTime,  dcncApl300in09SpOut.stddTime);
  /* 입력개시시간 비교하기위해 초를 더함   */
  NCOPYVAR(stp->stddTime,  stp->stddTime,  4);
  CAT(stp->stddTime,  "00");

  /*------------------------------*/
  /* 전월 청약서 입력 마감일시    */
  /*------------------------------*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in09SpInClear(&dcncApl300in09SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl300in09SpIn.bsnsDvsnCode,   "NC");              /* 업무구분코드 */
  if (strncmp((char *) stp->prsnCoprSadv.arr, "1", 1) == 0) {       /* 개인 */
    COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCP02");   /* 개인청약서입력마감 */
  } else {
    COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCG02");   /* 법인청약서입력마감 */
  }
  COPYVAR(dcncApl300in09SpIn.clogYm,   stp->crntYm);          /* 전월마감년월 */

  /* 송금일자가 없는 경우 계약일자로 감 */
  if (strlen((char *) stp->ftprRmtnDate.arr) == 0) {
    NCOPYVAR(dcncApl300in09SpIn.clogYm,   stp->cnttDate, 6);  /* 영업마감년월 */
  } else
      NCOPYVAR(dcncApl300in09SpIn.clogYm,   stp->ftprRmtnDate, 6); /* 영업마감년월 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in09SpOutClear(&dcncApl300in09SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in09Sp(&basicParam,&dcncApl300in09SpIn,&dcncApl300in09SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN09_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN09_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("월별 일정관리 확인");
    appReturnCode = 4413;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "월별 일정관리 확인", "SVncapl300in1");
  }

  COPYVAR(stp->lstmStddStdt,   dcncApl300in09SpOut.stddDate);
  uvDebug("입력마감일자 [%s]",(char *) stp->lstmStddStdt.arr);

  /* 격주휴무 폐지 (2003.07.19)
      *------------------------------*
      * 토요일 청약서 입력 마감연장  *
      *------------------------------*
      if  (strncmp((char *)stp->day.arr, "7", 1) == 0) {
          * Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      *
          dcncApl300in09SpInClear(&dcncApl300in09SpIn);

          * DBIO module 호출하기전 FML -> input 변수 setting                 *
          COPY(dcncApl300in09SpIn.bsnsDvsnCode    ,   "NC"         );     * 업무구분코드     *
          if  (strncmp((char *)stp->prsnCoprSadv.arr, "1", 1) == 0) {     * 개인             *
              COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCP20"      );     * 개인청약서입력마감*
                      }
          else {
              COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCG20"      );     * 법인청약서입력마감 *
          }
          COPYVAR(dcncApl300in09SpIn.clogYm       ,   stp->crntYm  );     * 전월마감년월     *

          *------------------------------------------------------------------*
           * 비지니스 로직 기술부
           *------------------------------------------------------------------*

          setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

          * DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
             OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              *
          dcncApl300in09SpOutClear(&dcncApl300in09SpOut);

          * DBIO module 호출                                             *

          dcncApl300in09Sp(&basicParam ,&dcncApl300in09SpIn ,&dcncApl300in09SpOut );

          * DBIO module 호출 결과 확인                                   *
          if  (getCDALResult() != SQL_OK){
               * DBIO Error Message 에 Function name을 add한다.           *
               setDBIOErrMsg(fnName);
               * 필요한 경우에만 ROOLBACK 처리한다.                       *
               EXEC SQL ROLLBACK;

               uvDebug("DBIO(DCNC_APL300IN09_SP) 호출 Error[%d], %s",\
                              cptReturnCode,getCDALErrMsg());
               * SVC_CLOSE()를 호출함으로써 service를 return한다.         *
               SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                                "DBIO(DCNC_APL300IN09_SP) 호출 Error.",  \
                                getCDALErrMsg());
          }

           DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  *
          COPYVAR(stp->satStddDate    ,   dcncApl300in09SpOut.stddDate);
          COPYVAR(stp->satStddTime    ,   dcncApl300in09SpOut.stddTime);
      }
      */

  uvDebug("SVncapl300in1_dcncApl300in09Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in10Sp()
  Note          : 지연입력 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void    SVncapl300in1_dcncApl300in10Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in10_sp_out dcncApl300in10SpOut;
  struct _dcnc_apl300in10_sp_in  dcncApl300in10SpIn;

  uvDebug("SVncapl300in1_dcncApl300in10Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in10SpInClear(&dcncApl300in10SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl300in10SpIn.orgnCode,   uvGetUserOrgCode());
  COPYVAR(dcncApl300in10SpIn.inptPossDate,   stp->crntDate);  /* 입력가능일자 */
  COPY(dcncApl300in10SpIn.dlayBsnsDvsn,   "01");

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in10SpOutClear(&dcncApl300in10SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in10Sp(&basicParam,&dcncApl300in10SpIn,&dcncApl300in10SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN10_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN10_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  COPYVAR(stp->inptPoss    ,   dcncApl300in10SpOut.inptPoss);
  COPYVAR(stp->cnttPossStdt,   dcncApl300in10SpOut.cnttPossStdt);
  COPYVAR(stp->cnttPossEndt,   dcncApl300in10SpOut.cnttPossEndt);

  uvDebug("SVncapl300in1_dcncApl300in10Sp  End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencApl300in10Sp()
  Note          : 증번별 지연입력승인 여부조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300in10Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_apl300in10_sp_in  dencApl300in10SpIn;
  struct _denc_apl300in10_sp_out dencApl300in10SpOut;

  uvDebug("SVncapl300in1_dencApl300vw21Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300in10SpInClear(&dencApl300in10SpIn);

  COPYVAR(dencApl300in10SpIn.polyNo,  stp->polyNo);
  COPYVAR(dencApl300in10SpIn.stddDate,  stp->crntDate);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencApl300in10SpOutClear(&dencApl300in10SpOut);

  /* DBIO module 호출                                             */

  dencApl300in10Sp(&basicParam,&dencApl300in10SpIn,&dencApl300in10SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300IN10_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300IN10_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  COPYVAR(stp->inptPoss    ,dencApl300in10SpOut.aprvYn);
  COPYVAR(stp->inptPossPlno,dencApl300in10SpOut.aprvYn);

  uvDebug("지연입력증번승인여부 = [%s]", (char *) stp->inptPossPlno.arr);

  uvDebug("SVncapl300in1_dencApl300in10Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_recpDate_stddDate_inptPoss()
  Note          : 접수일자, 입력마감일자, 지연입력간 관계 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_recpDate_stddDate_inptPoss(struct stp_SVncapl300in1 *stp) {
  uvDebug("SVncapl300in1_recpDate_stddDate_inptPoss    Start");

  /* 격주휴무제 폐지(2003.07.19) 주5일 근무제 도입
   if  (strncmp((char *)stp->day.arr, "7", 1) == 0) {
       if      ((strncmp((char *)stp->crntDate.arr, (char *)stp->lstmStddStdt.arr, 8) == 0) \
       ||       (strncmp((char *)stp->inptPoss.arr, "Y", 1) == 0)) {     마감일, 지연입력 예외
           ;
       }
       else if (strncmp((char *)stp->crntDate.arr, (char *)stp->satStddDate.arr, 8) == 0) {
               if  (atoi((char *)stp->crntTimeHh24.arr) > atoi((char *)stp->satStddTime.arr)) {
                   EXEC SQL ROLLBACK;
                   uvDebug("토요일 연장 입력 마감 입니다.");
                   appReturnCode = 4893;
                   SVC_CLOSE(APPERR, appReturnCode, 0, \
                   "토요일 연장 입력 마감 입니다.", "SVncapl300in1");
               }
       }
       else if (uvAtoi((char *)stp->crntTimeHh24.arr, 0, 2) > 14) {
               EXEC SQL ROLLBACK;
               uvDebug("토요일 입력마감 14시입니다.");
               appReturnCode = 461;
               SVC_CLOSE(APPERR, appReturnCode, 0, \
               "토요일 입력마감 14시입니다.", "SVncapl300in1");
       }
   }
   */

  if ((strncmp((char *) stp->hldyYn.arr, "Y", 1) == 0) ||
      (strncmp((char *) stp->day.arr, "7", 1) == 0)) {     /* 휴무일 , 토요일 */

    if (strncmp((char *) stp->inptPoss.arr, "Y", 1) == 0 ||
        strncmp(uvGetUserOrgCode(), "08061", 5) == 0 ||
        strncmp((char *) stp->clltRoutDvsn.arr, "12", 2) == 0) {
        uvDebug("지연입력 승인 or 온슈어,방카비대면채널은 휴무일은 입력가능"); /* 지연입력 예외 */
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("휴무일은 입력이 불가합니다.");
      appReturnCode = 476;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "휴무일은 입력이 불가합니다.", "SVncapl300in1");
    }
  }
  uvDebug("SVncapl300in1_recpDate_stddDate_inptPoss    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in28Sp()
  Note          : 계약조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in28Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in28_sp_out dcncApl300in28SpOut;
  struct _dcnc_apl300in28_sp_in  dcncApl300in28SpIn;

  uvDebug("SVncapl300in1_dcncApl300in28Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in28SpInClear(&dcncApl300in28SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in28SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in28SpOutClear(&dcncApl300in28SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in28Sp(&basicParam,&dcncApl300in28SpIn,&dcncApl300in28SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN28_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN28_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() == SQL_NOT_FOUND) {
    EXEC SQL ROLLBACK;
    uvDebug("계약 정보가 없습니다.");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "계약 정보가 없습니다.", "SVncapl300in1");
  }

  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("계약 정보 조회 실패");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "계약 정보 조회를 실패 했습니다.", "SVncapl300in1");
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (strncmp((char *) dcncApl300in28SpOut.cnttStatCode.arr, "6", 1) == 0) {
    uvDebug("접수 가능 계약입니다.");
  } else if (strncmp((char *) dcncApl300in28SpOut.cnttStatCode.arr, "7", 1) == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("기 접수 완료된 계약입니다.");
    appReturnCode = 4375;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "기 접수 완료된 계약입니다.", "SVncapl300in1");
  } else {
    EXEC SQL ROLLBACK;
    uvDebug("접수 완료 이후 상태입니다, 접수불가.");
    appReturnCode = 4376;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "접수 완료 이후 상태입니다, 접수불가.", "SVncapl300in1");
  }

  COPYVAR(stp->irkdCodeDtal,   dcncApl300in28SpOut.irkdCodeDtal); /* 보험종류코드_세 */
  COPYVAR(stp->irkdCodeItem,   dcncApl300in28SpOut.irkdCodeItem); /* 보험종류코드_목 */
  COPYVAR(stp->ctorCustId,   dcncApl300in28SpOut.ctorCustId); /* 계약자고객ID */
  COPYVAR(stp->cnttGrpCtid,   dcncApl300in28SpOut.cnttGrpCtid); /* 계약시단체고객ID */
  COPYVAR(stp->clltOrgnCode,   dcncApl300in28SpOut.clltOrgnCode); /* 모집기관코드 */
  COPYVAR(stp->clltLpPrno,   dcncApl300in28SpOut.clltLpPrno); /* 모집설계사고유번호 */
  stp->mmth           =   dcncApl300in28SpOut.mmth;         /* 모집설계사차월 */
  COPYVAR(stp->exprDate,   dcncApl300in28SpOut.exprDate);         /* 만기일자 */
  stp->paymTerm       =   dcncApl300in28SpOut.paymTerm;           /* 납입기간 */
  stp->realPaymTerm   =   dcncApl300in28SpOut.realPaymTerm;     /* 실납입기간 */
  COPYVAR(stp->paymTermDvsn,   dcncApl300in28SpOut.paymTermDvsn); /* 납입기간구분 */
  stp->insrTerm       =   dcncApl300in28SpOut.insrTerm;           /* 보험기간 */
  stp->realInsrTerm   =   dcncApl300in28SpOut.realInsrTerm;     /* 실보험기간 */
  COPYVAR(stp->insrTermDvsn,   dcncApl300in28SpOut.insrTermDvsn); /* 보험기간구분 */
  COPYVAR(stp->paymCyclCode,   dcncApl300in28SpOut.paymCyclCode); /* 납입주기코드 */
  stp->mainInsrAmt    =   dcncApl300in28SpOut.mainInsrAmt;        /* 주보험금 */
  stp->sumPrem        =   dcncApl300in28SpOut.sumPrem;          /* 합계보험료 */
  stp->sumOrigPrem    =   dcncApl300in28SpOut.sumOrigPrem;    /* 합계원보험료 */
  stp->anntPaymStag   =   dcncApl300in28SpOut.anntPaymStag; /* 연금지급개시연령 */
  COPYVAR(stp->anntPaymStdt,   dcncApl300in28SpOut.anntPaymStdt); /* 연금지급개시일자 */
  stp->stddJoinAmt    =   dcncApl300in28SpOut.stddJoinAmt;    /* 기준가입금액 */
  COPYVAR(stp->cnttConcYm,   dcncApl300in28SpOut.cnttConcYm); /* 계약체결년월 */
  COPYVAR(stp->collOrgnCode,   dcncApl300in28SpOut.collOrgnCode); /* 수금기관코드 */
  COPYVAR(stp->collLpPrno,   dcncApl300in28SpOut.collLpPrno); /* 수금설계사고유번호 */
  COPYVAR(stp->addrKdcd,   dcncApl300in28SpOut.addrKdcd);     /* 주소종류코드 */
  COPYVAR(stp->premPaymDvsn,   dcncApl300in28SpOut.premPaymDvsn); /* 보험료납입구분 */
  COPYVAR(stp->zipNo1,   dcncApl300in28SpOut.zipNo1);            /* 우편번호1 */
  COPYVAR(stp->zipNo2,   dcncApl300in28SpOut.zipNo2);            /* 우편번호2 */
  COPYVAR(stp->zipNo3,   dcncApl300in28SpOut.zipNo3);            /* 우편번호3 */
  COPYVAR(stp->grpCnttAdno,   dcncApl300in28SpOut.grpCnttAdno); /* 계약시단체고객-수금정보 */
  COPYVAR(stp->grttSpcdYn,   dcncApl300in28SpOut.grttSpcdYn); /* 단체취급특약여부 */
  COPYVAR(stp->taxPrctYn,   dcncApl300in28SpOut.taxPrctYn); /* 세금우대계약여부 */
  COPYVAR(stp->taxPrmnKind,   dcncApl300in28SpOut.taxPrmnKind); /* 세금우대주체종류 */
  stp->premCoprCgrt   =   dcncApl300in28SpOut.premCoprCgrt; /* 보험료법인부담율 */
  COPYVAR(stp->freePlanYn,   dcncApl300in28SpOut.freePlanYn); /* 자유설계여부 */
  COPYVAR(stp->ctorCrpbYn,   dcncApl300in28SpOut.ctorCrpbYn); /* 계약자법인체여부 */
  stp->fstiRrcvPrem   =   dcncApl300in28SpOut.fstiRrcvPrem; /* 초회실입금보험료 */
  stp->addPaymPrem    =   dcncApl300in28SpOut.addPaymPrem;  /* 추가납입보험료 */
  COPYVAR(stp->fstiPpayYn,   dcncApl300in28SpOut.fstiPpayYn); /* 초회선납여부 */
  COPYVAR(stp->retrYn,   dcncApl300in28SpOut.retrYn);             /* 소급여부 */
  COPYVAR(stp->clltRoutDvsn,   dcncApl300in28SpOut.clltRoutDvsn); /* 모집경로구분 */

  /* TABLET 청약 등 기입력 데이터 우선 적용 */
  if (strcmp((char *) stp->imtyRecpYn.arr, "Y") == 0 && strlen((char *) stp->polyTrnmRtdv.arr) > 0) {
    uvDebug("Tablet stp->polyTrnmRtdv   [%s]",   (char *) stp->polyTrnmRtdv .arr); /* 증권전달경로구분 */
  }
  /*else {
    COPYVAR(stp->polyTrnmRtdv,   dcncApl300in28SpOut.polyTrnmRtdv); / * 증권전달경로구분 * /
  }*/

  COPYVAR(stp->bussFrplYn,   dcncApl300in28SpOut.bussFrplYn); /* 영업자유설계여부 */
  COPYVAR(stp->srdoPublDate,   dcncApl300in28SpOut.publDate);     /* 발행일자 */
  COPYVAR(stp->premIamtIpst,   dcncApl300in28SpOut.premIamtIpst); /* 보험료/보험금입력기준 */
  COPYVAR(stp->premApcnDvsn,   dcncApl300in28SpOut.premApcnDvsn); /* 보험료적용구분 */
  COPYVAR(stp->ctorEdbnReln,   dcncApl300in28SpOut.ctorEdbnReln); /* 만기퇴직계약자관계 */
  COPYVAR(stp->lpRlcd,   dcncApl300in28SpOut.lpRlcd);   /* 설계사와의관계코드 */
  COPYVAR(stp->publCnttDate,   dcncApl300in28SpOut.publCnttDate); /* 청약서발행시 계약일자 */
  COPYVAR(stp->publCnttDate2,   dcncApl300in28SpOut.cnttDate); /* 청약서발행시 계약일자 */
  stp->lmitPyct       =   dcncApl300in28SpOut.lmitPyct;           /* 한정납회 */
  stp->ppayRetrCnt[0] =   dcncApl300in28SpOut.ppayCnt;            /* 선납횟수 */
  stp->ppayRetrPrem[0] =   dcncApl300in28SpOut.ppayPrem;        /* 선납보험료 */
  stp->ppayRetrInte[0] =   dcncApl300in28SpOut.ppayInte;          /* 선납이자 */
  stp->ppayRetrCnt[1] =   dcncApl300in28SpOut.retrCnt;            /* 소급횟수 */
  stp->ppayRetrPrem[1] =   dcncApl300in28SpOut.retrPrem;        /* 소급보험료 */
  stp->ppayRetrInte[1] =   dcncApl300in28SpOut.retrInte;          /* 소급이자 */
  COPYVAR(stp->saleChnlCode,   dcncApl300in28SpOut.saleChnlCode); /* 판매채널코드 */
  COPYVAR(stp->sintStagIqcd,   dcncApl300in28SpOut.sintStagIqcd); /* 제2보기개시연령조회코드 */
  COPYVAR(stp->sintStrtDvsn,   dcncApl300in28SpOut.sintStrtDvsn); /* 제2보기개시구분 */
  stp->sintStrtPrsn   =   dcncApl300in28SpOut.sintStrtPrsn; /* 제2보기개시시점 */
  COPYVAR(stp->tintStagIqcd,   dcncApl300in28SpOut.tintStagIqcd); /* 제3보기개시연령조회코드 */
  COPYVAR(stp->tintStrtDvsn,   dcncApl300in28SpOut.tintStrtDvsn); /* 제3보기개시구분 */
  stp->tintStrtPrsn   =   dcncApl300in28SpOut.tintStrtPrsn; /* 제3보기개시시점 */
  COPYVAR(stp->prsnCoprSadv,   dcncApl300in28SpOut.prsnCoprSadv); /* 개인법인판매구분 */
  COPYVAR(stp->prsnCoprPmdv,   dcncApl300in28SpOut.prsnCoprPmdv); /* 개인법인인가구분 */
  COPYVAR(stp->scndPolyNo,   dcncApl300in28SpOut.frplPolyNo); /* 자유설계증권번호 */
  stp->dsctPrem       =   dcncApl300in28SpOut.dsctPrem;         /* 할인보험료 */
  COPYVAR(stp->vlnsYn,   dcncApl300in28SpOut.vlnsYn);             /* 변액여부 */
  COPYVAR(stp->mchnCmpgCode,   dcncApl300in28SpOut.mchnCmpgCode); /* 다채널캠페인코드 */
  COPYVAR(stp->arivDate,   dcncApl300in28SpOut.arivDate);         /* 도착일자 */
  COPYVAR(stp->insrAcctDvsn,   dcncApl300in28SpOut.insrAcctDvsn); /* 보험계정구분 */
  COPYVAR(stp->txprConnTpcd,   dcncApl300in28SpOut.txprConnTpcd); /* 세금우대저축종류 */
  COPYVAR(stp->pstnOrgnCode,   dcncApl300in28SpOut.pstnOrgnCode); /* 소속기관코드 */
  COPYVAR(stp->conbObjtCtid,   dcncApl300in28SpOut.conbObjtCtid); /* 기부대상고객ID */
  stp->acatGurtTerm   =   dcncApl300in28SpOut.acatGurtTerm  ;     /* 적립금보증기간 */
  COPYVAR(stp->srdoVlidTerm,   dcncApl300in28SpOut.srdoVlidTerm); /* 기부대상고객ID */
  COPYVAR(stp->premiumAccmYn,  dcncApl300in28SpOut.haacDsctYn);   /* 고액적립할인여부 */

  if ((char *) stp->scndPolyNo.arr[0] == 0x00) {
    stp->dlngCnt = 1;
  } else {
    stp->dlngCnt = 2;
  }

  uvDebug("stp->irkdCodeDtal   [%s]",   (char *) dcncApl300in28SpOut.irkdCodeDtal.arr); /* 보험종류코드_세 */
  uvDebug("stp->irkdCodeItem   [%s]",   (char *) dcncApl300in28SpOut.irkdCodeItem.arr); /* 보험종류코드_목 */
  uvDebug("stp->ctorCustId     [%s]",   (char *) dcncApl300in28SpOut.ctorCustId  .arr); /* 계약자고객ID */
  uvDebug("stp->cnttGrpCtid    [%s]",   (char *) dcncApl300in28SpOut.cnttGrpCtid .arr); /* 계약시단체고객ID */
  uvDebug("stp->clltOrgnCode   [%s]",   (char *) dcncApl300in28SpOut.clltOrgnCode.arr); /* 모집기관코드 */
  uvDebug("stp->clltLpPrno     [%s]",   (char *) dcncApl300in28SpOut.clltLpPrno  .arr); /* 모집설계사고유번호 */
  uvDebug("stp->mmth           [%f]",   dcncApl300in28SpOut.mmth); /* 모집설계사차월 */
  uvDebug("stp->exprDate       [%s]",   (char *) dcncApl300in28SpOut.exprDate    .arr); /* 만기일자 */
  uvDebug("stp->paymTerm       [%f]",   dcncApl300in28SpOut.paymTerm); /* 납입기간 */
  uvDebug("stp->realPaymTerm   [%f]",   dcncApl300in28SpOut.realPaymTerm); /* 실납입기간 */
  uvDebug("stp->paymTermDvsn   [%s]",   (char *) dcncApl300in28SpOut.paymTermDvsn.arr); /* 납입기간구분 */
  uvDebug("stp->insrTerm       [%f]",   dcncApl300in28SpOut.insrTerm); /* 보험기간 */
  uvDebug("stp->realInsrTerm   [%f]",   dcncApl300in28SpOut.realInsrTerm); /* 실보험기간 */
  uvDebug("stp->insrTermDvsn   [%s]",   (char *) dcncApl300in28SpOut.insrTermDvsn.arr); /* 보험기간구분 */
  uvDebug("stp->paymCyclCode   [%s]",   (char *) dcncApl300in28SpOut.paymCyclCode.arr); /* 납입주기코드 */
  uvDebug("stp->mainInsrAmt    [%f]",   dcncApl300in28SpOut.mainInsrAmt); /* 주보험금 */
  uvDebug("stp->sumPrem        [%f]",   dcncApl300in28SpOut.sumPrem); /* 합계보험료 */
  uvDebug("stp->sumOrigPrem    [%f]",   dcncApl300in28SpOut.sumOrigPrem); /* 합계원보험료 */
  uvDebug("stp->anntPaymStag   [%f]",   dcncApl300in28SpOut.anntPaymStag); /* 연금지급개시연령 */
  uvDebug("stp->anntPaymStdt   [%s]",   (char *) dcncApl300in28SpOut.anntPaymStdt.arr); /* 연금지급개시일자 */
  uvDebug("stp->stddJoinAmt    [%f]",   dcncApl300in28SpOut.stddJoinAmt); /* 기준가입금액 */
  uvDebug("stp->cnttConcYm     [%s]",   (char *) dcncApl300in28SpOut.cnttConcYm  .arr); /* 계약체결년월 */
  uvDebug("stp->collOrgnCode   [%s]",   (char *) dcncApl300in28SpOut.collOrgnCode.arr); /* 수금기관코드 */
  uvDebug("stp->collLpPrno     [%s]",   (char *) dcncApl300in28SpOut.collLpPrno  .arr); /* 수금설계사고유번호 */
  uvDebug("stp->addrKdcd       [%s]",   (char *) dcncApl300in28SpOut.addrKdcd    .arr); /* 주소종류코드 */
  uvDebug("stp->premPaymDvsn   [%s]",   (char *) dcncApl300in28SpOut.premPaymDvsn.arr); /* 보험료납입구분 */
  uvDebug("stp->zipNo1         [%s]",   (char *) dcncApl300in28SpOut.zipNo1      .arr); /* 우편번호1 */
  uvDebug("stp->zipNo2         [%s]",   (char *) dcncApl300in28SpOut.zipNo2      .arr); /* 우편번호2 */
  uvDebug("stp->zipNo3         [%s]",   (char *) dcncApl300in28SpOut.zipNo3      .arr); /* 우편번호3 */
  uvDebug("stp->grpCnttAdno    [%s]",   (char *) dcncApl300in28SpOut.grpCnttAdno .arr); /* 계약시단체고객-수금정보 */
  uvDebug("stp->grttSpcdYn     [%s]",   (char *) dcncApl300in28SpOut.grttSpcdYn  .arr); /* 단체취급특약여부 */
  uvDebug("stp->taxPrctYn      [%s]",   (char *) dcncApl300in28SpOut.taxPrctYn   .arr); /* 세금우대계약여부 */
  uvDebug("stp->taxPrmnKind    [%s]",   (char *) dcncApl300in28SpOut.taxPrmnKind .arr); /* 세금우대주체종류 */
  uvDebug("stp->premCoprCgrt   [%f]",   dcncApl300in28SpOut.premCoprCgrt); /* 보험료법인부담율 */
  uvDebug("stp->freePlanYn     [%s]",   (char *) dcncApl300in28SpOut.freePlanYn  .arr); /* 자유설계여부 */
  uvDebug("stp->ctorCrpbYn     [%s]",   (char *) dcncApl300in28SpOut.ctorCrpbYn  .arr); /* 계약자법인체여부 */
  uvDebug("stp->fstiRrcvPrem   [%f]",   dcncApl300in28SpOut.fstiRrcvPrem); /* 초회실입금보험료 */
  uvDebug("stp->addPaymPrem    [%f]",   dcncApl300in28SpOut.addPaymPrem); /* 추가납입보험료 */
  uvDebug("stp->fstiPpayYn     [%s]",   (char *) dcncApl300in28SpOut.fstiPpayYn   .arr); /* 초회선납여부 */
  uvDebug("stp->retrYn         [%s]",   (char *) dcncApl300in28SpOut.retrYn       .arr); /* 소급여부 */
  uvDebug("stp->clltRoutDvsn   [%s]",   (char *) dcncApl300in28SpOut.clltRoutDvsn .arr); /* 모집경로구분 */
  uvDebug("stp->polyTrnmRtdv   [%s]",   (char *) dcncApl300in28SpOut.polyTrnmRtdv .arr); /* 증권전달경로구분 */
  uvDebug("stp->bussFrplYn     [%s]",   (char *) dcncApl300in28SpOut.bussFrplYn   .arr); /* 영업자유설계여부 */
  uvDebug("stp->srdoPublDate   [%s]",   (char *) dcncApl300in28SpOut.publDate     .arr); /* 발행일자 */
  uvDebug("stp->premIamtIpst   [%s]",   (char *) dcncApl300in28SpOut.premIamtIpst .arr); /* 보험료/보험금입력기준 */
  uvDebug("stp->premApcnDvsn   [%s]",   (char *) dcncApl300in28SpOut.premApcnDvsn .arr); /* 보험료적용구분 */
  uvDebug("stp->ctorEdbnReln   [%s]",   (char *) dcncApl300in28SpOut.ctorEdbnReln .arr); /* 만기퇴직계약자관계 */
  uvDebug("stp->lpRlcd         [%s]",   (char *) dcncApl300in28SpOut.lpRlcd       .arr); /* 설계사와의관계코드 */
  uvDebug("stp->publCnttDate   [%s]",   (char *) dcncApl300in28SpOut.publCnttDate .arr); /* 청약서발행시 계약일자 */
  uvDebug("stp->publCnttDate2  [%s]",   (char *) dcncApl300in28SpOut.cnttDate     .arr); /* 청약서발행시 계약일자 */
  uvDebug("stp->lmitPyct       [%f]",   dcncApl300in28SpOut.lmitPyct); /* 한정납회 */
  uvDebug("stp->ppayRetrCnt [0][%f]",   dcncApl300in28SpOut.ppayCnt); /* 선납횟수 */
  uvDebug("stp->ppayRetrPrem[0][%f]",   dcncApl300in28SpOut.ppayPrem); /* 선납보험료 */
  uvDebug("stp->ppayRetrInte[0][%f]",   dcncApl300in28SpOut.ppayInte); /* 선납이자 */
  uvDebug("stp->ppayRetrCnt [1][%f]",   dcncApl300in28SpOut.retrCnt); /* 소급횟수 */
  uvDebug("stp->ppayRetrPrem[1][%f]",   dcncApl300in28SpOut.retrPrem); /* 소급보험료 */
  uvDebug("stp->ppayRetrInte[1][%f]",   dcncApl300in28SpOut.retrInte); /* 소급이자 */
  uvDebug("stp->saleChnlCode   [%s]",   (char *) dcncApl300in28SpOut.saleChnlCode .arr); /* 판매채널코드 */
  uvDebug("stp->sintStagIqcd   [%s]",   (char *) dcncApl300in28SpOut.sintStagIqcd .arr); /* 제2보기개시연령조회코드 */
  uvDebug("stp->sintStrtDvsn   [%s]",   (char *) dcncApl300in28SpOut.sintStrtDvsn .arr); /* 제2보기개시구분 */
  uvDebug("stp->sintStrtPrsn   [%f]",   dcncApl300in28SpOut.sintStrtPrsn); /* 제2보기개시시점 */
  uvDebug("stp->tintStagIqcd   [%s]",   (char *) dcncApl300in28SpOut.tintStagIqcd .arr); /* 제3보기개시연령조회코드 */
  uvDebug("stp->tintStrtDvsn   [%s]",   (char *) dcncApl300in28SpOut.tintStrtDvsn .arr); /* 제3보기개시구분 */
  uvDebug("stp->tintStrtPrsn   [%f]",   dcncApl300in28SpOut.tintStrtPrsn); /* 제3보기개시시점 */
  uvDebug("stp->prsnCoprSadv   [%s]",   (char *) dcncApl300in28SpOut.prsnCoprSadv .arr); /* 개인법인판매구분 */
  uvDebug("stp->prsnCoprPmdv   [%s]",   (char *) dcncApl300in28SpOut.prsnCoprPmdv .arr); /* 개인법인인가구분 */
  uvDebug("stp->scndPolyNo     [%s]",   (char *) dcncApl300in28SpOut.frplPolyNo   .arr); /* 자유설계증권번호 */
  uvDebug("stp->dsctPrem       [%f]",   dcncApl300in28SpOut.dsctPrem); /* 할인보험료 */
  uvDebug("stp->vlnsYn         [%s]",   (char *) dcncApl300in28SpOut.vlnsYn       .arr); /* 변액여부 */
  uvDebug("stp->mchnCmpgCode   [%s]",   (char *) dcncApl300in28SpOut.mchnCmpgCode .arr); /* 다채널캠페인코드 */
  uvDebug("stp->arivDate       [%s]",   (char *) dcncApl300in28SpOut.arivDate     .arr); /* 도착일자 */
  uvDebug("stp->insrAcctDvsn   [%s]",   (char *) dcncApl300in28SpOut.insrAcctDvsn .arr); /* 보험계정구분 */
  uvDebug("stp->txprConnTpcd   [%s]",   (char *) dcncApl300in28SpOut.txprConnTpcd .arr); /* 세금우대저축종류 */
  uvDebug("stp->pstnOrgnCode   [%s]",   (char *) dcncApl300in28SpOut.pstnOrgnCode .arr); /* 소속기관코드 */
  uvDebug("stp->conbObjtCtid   [%s]",   (char *) dcncApl300in28SpOut.conbObjtCtid .arr); /* 기부대상고객ID */
  uvDebug("stp->acatGurtTerm   [%f]",   dcncApl300in28SpOut.acatGurtTerm              ); /* 적립금보증기간 */
  uvDebug("stp->haacDsctYn     [%s]",   (char *) dcncApl300in28SpOut.haacDsctYn   .arr); /* 고액적립할인여부 */
  uvDebug("stp->dlngCnt        [%f]",   stp->dlngCnt);        /* 처리건수 */

  uvDebug("SVncapl300in1_dcncApl300in28Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in29Sp()
  Note          : 가입상품 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in29Sp(struct stp_SVncapl300in1 *stp) {
  int     ii;
  struct _dcnc_apl300in29_sp_out dcncApl300in29SpOut[DCNC_APL300IN29_SP_RQSIZE];
  struct _dcnc_apl300in29_sp_in  dcncApl300in29SpIn;

  uvDebug("SVncapl300in1_dcncApl300in29Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in29SpInClear(&dcncApl300in29SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in29SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(DCNC_APL300IN29_SP_RQSIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in29SpOutClear(dcncApl300in29SpOut,DCNC_APL300IN29_SP_RQSIZE);

  /* DBIO module 호출                                             */

  dcncApl300in29Sp(&basicParam,&dcncApl300in29SpIn,dcncApl300in29SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN29_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN29_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  stp->cjgCnt = basicParam.rpSize;
  for (ii = 0; ii < stp->cjgCnt; ii++) {
            stp->cjgjoinGoodNo  [ii]=  dcncApl300in29SpOut[ii].joinGoodNo   ;
    COPYVAR(stp->cjggoodCodeDtal[ii],  dcncApl300in29SpOut[ii].goodCodeDtal);
    COPYVAR(stp->cjggoodCodeItem[ii],  dcncApl300in29SpOut[ii].goodCodeItem);
    COPYVAR(stp->cjggoodCodeName[ii],  dcncApl300in29SpOut[ii].goodCodeName); /* 상품업무명          (C) */
    COPYVAR(stp->cjggoodRelnCode[ii],  dcncApl300in29SpOut[ii].goodRelnCode);
    COPYVAR(stp->cjgpytrInqrCode[ii],  dcncApl300in29SpOut[ii].pytrInqrCode); /* 납입기간조회코드    (C) */
    COPYVAR(stp->cjgintrInqrCode[ii],  dcncApl300in29SpOut[ii].intrInqrCode); /* 보험기간조회코드    (C) */
    stp->cjginsrAmt[ii] =  dcncApl300in29SpOut[ii].insrAmt;
    stp->cjgorigPrem[ii] =  dcncApl300in29SpOut[ii].origPrem;
    stp->cjgprem[ii] =  dcncApl300in29SpOut[ii].prem;
    stp->cjgRepay[ii] =  dcncApl300in29SpOut[ii].exprRetnRato;  /* 만기환급율 */
    stp->cjgLmitPyct[ii] =  dcncApl300in29SpOut[ii].lmitPyct ; /* 한정납회 */
  }

  uvDebug("SVncapl300in1_dcncApl300in29Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in12Sp()
  Note          : 계약관계자(피보험자)조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in12Sp(struct stp_SVncapl300in1 *stp) {
  int     ii;
  int     jj;
  int     kk;
  struct _dcnc_apl300in12_sp_out dcncApl300in12SpOut[DCNC_APL300IN12_SP_RQSIZE];
  struct _dcnc_apl300in12_sp_in  dcncApl300in12SpIn;

  uvDebug("SVncapl300in1_dcncApl300in12Sp  Start");

  ii = 0;
  jj = 0;
  kk = 0;

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in12SpInClear(&dcncApl300in12SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in12SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(DCNC_APL300IN12_SP_RQSIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in12SpOutClear(dcncApl300in12SpOut,DCNC_APL300IN12_SP_RQSIZE);

  /* DBIO module 호출                                             */

  dcncApl300in12Sp(&basicParam,&dcncApl300in12SpIn,dcncApl300in12SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN12_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN12_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  for (ii = 0; ii < basicParam.rpSize; ii++) {
    if ((strncmp((char *) dcncApl300in12SpOut[ii].custRoleCode.arr, "1", 1) == 0) ||
        (strncmp((char *) dcncApl300in12SpOut[ii].custRoleCode.arr, "2", 1) == 0)) {

              stp->cnttPrtrNo  [jj] = dcncApl300in12SpOut[ii].cnttPrtrNo   ; /* 계약관계자번호       */
              stp->insuNo      [jj] = dcncApl300in12SpOut[ii].insuNo       ; /* 피보험자번호         */
      COPYVAR(stp->custRoleCode[jj] , dcncApl300in12SpOut[ii].custRoleCode); /* 고객역할코드         */
      COPYVAR(stp->custId      [jj] , dcncApl300in12SpOut[ii].custId      ); /* 고객ID               */
              stp->joinAge     [jj] = dcncApl300in12SpOut[ii].joinAge      ; /* 가입연령             */
      COPYVAR(stp->minsRelnCode[jj] , dcncApl300in12SpOut[ii].minsRelnCode); /* 주피와의관계코드     */
      COPYVAR(stp->occpCode    [jj] , dcncApl300in12SpOut[ii].occpCode    ); /* 직종코드             */
      COPYVAR(stp->drveCatpCode[jj] , dcncApl300in12SpOut[ii].drveCatpCode); /* 운전차종코드         */
      COPYVAR(stp->riskGradCode[jj] , dcncApl300in12SpOut[ii].riskGradCode); /* 위험등급코드         */
      COPYVAR(stp->frnrDvsnCode[jj] , dcncApl300in12SpOut[ii].frnrDvsnCode); /* 외국인구분코드       */
      COPYVAR(stp->frnrStayCode[jj] , dcncApl300in12SpOut[ii].frnrStayCode); /* 외국인구분코드       */
      COPYVAR(stp->hndrDvsnCode[jj] , dcncApl300in12SpOut[ii].hndrDvsnCode); /* 장애인구분코드       */
      COPYVAR(stp->custRrno    [jj] , dcncApl300in12SpOut[ii].rsdnRgstNo  ); /* 고객주민번호         */
      COPYVAR(stp->sex         [jj] , dcncApl300in12SpOut[ii].sex         ); /* 성별                 */
      COPYVAR(stp->mediKindCode[jj] , dcncApl300in12SpOut[ii].mediKindCode); /* 진단코드             */
      COPYVAR(stp->mediJugmExyn[jj] , dcncApl300in12SpOut[ii].mediJugmExyn); /* 의무판정존재여부     */
      COPYVAR(stp->prevMediObyn[jj] , dcncApl300in12SpOut[ii].prevMediObyn); /* 선진단대상여부       */
      COPYVAR(stp->mdobXtrtRscd[jj] , dcncApl300in12SpOut[ii].mdobXtrtRscd); /* 진단대상발췌사유코드 */
      COPYVAR(stp->injrOccpCode[jj],  dcncApl300in12SpOut[ii].injrOccpCode); /* 상해직종코드         */
      COPYVAR(stp->injrRiskGrcd[jj],  dcncApl300in12SpOut[ii].injrRiskGrcd); /* 상해위험등급코드     */

      jj++;

    } else {
      stp->bnfcCnttPrtrNo[kk]   =   dcncApl300in12SpOut[ii].cnttPrtrNo; /* 계약관계자번호  */
      COPYVAR(stp->bnfccustRoleCode[kk],   dcncApl300in12SpOut[ii].custRoleCode); /* 고객역할코드 */
      COPYVAR(stp->bnfccustId[kk],   dcncApl300in12SpOut[ii].custId); /* 고객ID */
      stp->bnfcPrioRank[kk]   =   dcncApl300in12SpOut[ii].bnfcPrioRank; /* 수익자우선순위 */
      stp->recvRato[kk]   =   dcncApl300in12SpOut[ii].recvRato;   /* 수령비율 */
      COPYVAR(stp->bnfcminsRelnCode[kk],   dcncApl300in12SpOut[ii].minsRelnCode); /* 주피와의관계코드 */
      COPYVAR(stp->bnfccustRrno[kk],   dcncApl300in12SpOut[ii].rsdnRgstNo); /* 고객주민번호 */
      COPYVAR(stp->bnfcsex[kk],   dcncApl300in12SpOut[ii].sex);       /* 성별 */
      stp->bnfcjoinAge[kk]   =   dcncApl300in12SpOut[ii].joinAge; /* 가입연령 */
      kk++;
      if ((strncmp((char *) dcncApl300in12SpOut[ii].custRoleCode.arr, "52", 2) == 0)  \
          ||  (strncmp((char *) dcncApl300in12SpOut[ii].custRoleCode.arr, "53", 2) == 0)) {
        stp->dedCnt++;
      }
    }
  }
  stp->crmCnt = jj;
  stp->bnfCnt = kk;

  for (ii = 0; ii < stp->crmCnt; ii++) {
    if (strncmp((char *) stp->custRoleCode[ii].arr, "21", 2) == 0) {
      COPYVAR(stp->occpCode[ii],  stp->cniOccpCode[0]);           /* 직종코드 */
      COPYVAR(stp->drveCatpCode[ii],  stp->cniDrveCatpCode[0]); /* 운전차종코드 */
      COPYVAR(stp->riskGradCode[ii],  stp->cniRiskGradCode[0]); /* 위험등급코드 */
      COPYVAR(stp->hobyCode[ii],  stp->cniHobyCode[0]);           /* 취미코드 */

      /* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁            */
      COPYVAR(stp->injrOccpCode[ii],  stp->cniInjrOccpCode[0]); /* 상해직종코드 */
      COPYVAR(stp->injrRiskGrcd[ii],  stp->cniInjrRiskGrcd[0]); /* 상해위험등급코드 */
    }
    if (strncmp((char *) stp->custRoleCode[ii].arr, "22", 2) == 0) {
      COPYVAR(stp->occpCode[ii],  stp->cniOccpCode[1]);           /* 직종코드 */
      COPYVAR(stp->drveCatpCode[ii],  stp->cniDrveCatpCode[1]); /* 운전차종코드 */
      COPYVAR(stp->riskGradCode[ii],  stp->cniRiskGradCode[1]); /* 위험등급코드 */
      COPYVAR(stp->hobyCode[ii],  stp->cniHobyCode[1]);           /* 취미코드 */

      /* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁            */
      COPYVAR(stp->injrOccpCode[ii],  stp->cniInjrOccpCode[1]); /* 상해직종코드 */
      COPYVAR(stp->injrRiskGrcd[ii],  stp->cniInjrRiskGrcd[1]); /* 상해위험등급코드 */
    }
    /* 주니어UL 부모반영 */
    if (strncmp((char *) stp->custRoleCode[ii].arr, "28", 2) == 0) {
      COPYVAR(stp->occpCode    [ii],  stp->cniOccpCode    [1]); /* 직종코드 */
      COPYVAR(stp->drveCatpCode[ii],  stp->cniDrveCatpCode[1]); /* 운전차종코드 */
      COPYVAR(stp->riskGradCode[ii],  stp->cniRiskGradCode[1]); /* 위험등급코드 */
      COPYVAR(stp->hobyCode    [ii],  stp->cniHobyCode    [1]); /* 취미코드 */
      COPYVAR(stp->injrOccpCode[ii],  stp->cniInjrOccpCode[1]); /* 상해직종코드 */
      COPYVAR(stp->injrRiskGrcd[ii],  stp->cniInjrRiskGrcd[1]); /* 상해위험등급코드 */
    }
  }

  uvDebug("SVncapl300in1_dcncApl300in12Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_srdoVlidTermChek()
  Note          : 청약서 유효기간 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_srdoVlidTermChek(struct stp_SVncapl300in1 *stp) {
  int     ii;
  CMNC_SrdoVlidTermChek   srdoVlidTermChek;

  uvDebug("SVncapl300in1_srdoVlidTermChek    Start");

  for (ii = 0; ii < stp->crmCnt; ii++) {
    if (strncmp((char *) stp->custRoleCode[ii].arr, "2", 1) != 0) {
      continue;
    }
    if (strncmp((char *) stp->custId[ii].arr, "8009999998", 10) == 0) {
      continue;
    }
    memset(&srdoVlidTermChek,   0x00,   sizeof(CMNC_SrdoVlidTermChek));

    COPYVAR(srdoVlidTermChek.cnttDate,  stp->publCnttDate); /* 청약서발행시 계약일자(계약일자 없을시 발행일자) */
    COPYVAR(srdoVlidTermChek.insuBrth,  stp->custRrno[ii]);
    COPY   (srdoVlidTermChek.pgmGubun,  "P");                /* 개별/일괄구분 */

    uvDebug("srdoVlidTermChek.cnttDate  =   [%s]",  (char *) srdoVlidTermChek.cnttDate.arr);
    uvDebug("srdoVlidTermChek.insuBrth  =   [%s]",  (char *) srdoVlidTermChek.insuBrth.arr);

    CMNC_srdoVlidTermChek_CC(&srdoVlidTermChek);

    uvDebug("srdoVlidTermChek.srdoVlidTerm  =   [%s]",  (char *) srdoVlidTermChek.srdoVlidTerm.arr);
    uvDebug("stp->srdoVlidTerm              =   [%s]",  (char *) stp->srdoVlidTerm.arr);

    /* 2009.07.07 청약서 유효기간 변경(1개월) : 접수시 기존 발행건 예외처리   */
    /* 청약서 발행 및 재발행시 청약부속정보 청약서 유효기간 업데이트          */
    /* 청약서 접수시에는 청약부속정보 청약서 유효기간 내에 접수가능           */
    if (atoi((char *) stp->cnttDate.arr) > atoi((char *) stp->srdoVlidTerm.arr)) {
      EXEC SQL ROLLBACK;
      uvDebug("청약서유효기간 경과 접수 불가.");
      appReturnCode = 3403;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "청약서유효기간 경과 접수 불가.", "SVncapl300in1");
    }
  }

  uvDebug("SVncapl300in1_srdoVlidTermChek    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in17Sp()
  Note          : 선진단 대상건 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void    SVncapl300in1_dcncApl300in17Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in17_sp_out dcncApl300in17SpOut;
  struct _dcnc_apl300in17_sp_in  dcncApl300in17SpIn;

  uvDebug("SVncapl300in1_dcncApl300in17Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in17SpInClear(&dcncApl300in17SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in17SpIn.polyNo,   stp->polyNo);
  COPYVAR(dcncApl300in17SpIn.cnttDate,   stp->cnttDate);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in17SpOutClear(&dcncApl300in17SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in17Sp(&basicParam,&dcncApl300in17SpIn,&dcncApl300in17SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN17_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN17_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (dcncApl300in17SpOut.mediCnt > 0) {
    /* 2006.06 진단관련 - 여기서 서비스를 종료하지 않고 합산 및 진단발췌까지 진행 (2006.06.19) */
    strcpy(stp->srdoRecpYn, "N");     /* 진단서미입력 */

    /*
    EXEC SQL ROLLBACK;
    uvDebug("선진단 대상-진단서가 입력 되지 않았습니다.");
    appReturnCode = 3407;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
    "선진단 대상-진단서가 입력 되지 않았습니다.", "SVncapl300in1");
    */
  }

  uvDebug("SVncapl300in1_dcncApl300in17Sp  End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_cnttDate()
  Note          : 계약일자 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_cnttDate(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in13_sp_out dcncApl300in13SpOut;
  struct _dcnc_apl300in13_sp_in  dcncApl300in13SpIn;

  uvDebug("SVncapl300in1_cnttDate  Start");

  if ((atoi((char *) stp->crntDate.arr) < atoi((char *) stp->stddDate.arr))
      &&  ((strncmp((char *) stp->saleChnlCode.arr, "1", 1) == 0)
      ||   (strncmp((char *) stp->saleChnlCode.arr, "2", 1) == 0)
      ||   (strncmp((char *) stp->saleChnlCode.arr, "4", 1) == 0)
      ||   (strncmp((char *) stp->saleChnlCode.arr, "6", 1) == 0)
      ||   (strncmp((char *) stp->saleChnlCode.arr, "7", 1) == 0))) {
    /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
    dcncApl300in13SpInClear(&dcncApl300in13SpIn);

    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dcncApl300in13SpIn.cnttDate,    stp->crntDate);

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/
    setInitDBIO(1,DBCURSOR_CLOSE);

    /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
       OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
    dcncApl300in13SpOutClear(&dcncApl300in13SpOut);

    /* DBIO module 호출                                             */

    dcncApl300in13Sp(&basicParam,&dcncApl300in13SpIn,&dcncApl300in13SpOut);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL300IN13_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DCNC_APL300IN13_SP) 호출 Error.",  \
          getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
    if (strncmp((char *) dcncApl300in13SpOut.cnttYymm.arr, (char *) stp->cnttDate.arr, 6) == 0) {;
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("유효하지 않는 계약일자 입니다.");
      appReturnCode = 401;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "유효하지 않는 계약일자 입니다.", "SVncapl300in1");
    }
  }

  /* 시작일자 setting */
  /* if  (atoi((char *)stp->crntDate.arr) < atoi((char *)stp->cnttDate.arr)) { */
  /*     COPYVAR(stp->strtDate   ,   stp->crntDate);                           */
  /* }                                                                         */
  /* else {                                                                    */
  /*     COPYVAR(stp->strtDate   ,   stp->cnttDate);                           */
  /* }                                                                         */

  COPYVAR(stp->strtDate,   stp->cnttDate);

  uvDebug("SVncapl300in1_cnttDate  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_ftprRmtnDate()
  Note          : 송금일자 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void    SVncapl300in1_ftprRmtnDate(struct stp_SVncapl300in1 *stp) {
  char    before_date[8+1];
  char    after_date[8+1];

  struct _dcnc_apl501in02_sp_out dcncApl501in02SpOut;
  struct _dcnc_apl501in02_sp_in  dcncApl501in02SpIn;

  struct _dcnc_apl300in11_sp_out dcncApl300in11SpOut;
  struct _dcnc_apl300in11_sp_in  dcncApl300in11SpIn;

  struct _dcnc_apl300in15_sp_out dcncApl300in15SpOut;
  struct _dcnc_apl300in15_sp_in  dcncApl300in15SpIn;

  uvDebug("SVncapl300in1_ftprRmtnDate  Start");

  memset(before_date,     0x00,     sizeof(before_date));
  memset(after_date,     0x00,     sizeof(after_date));

  if (uvAtoi((char *) stp->ftprRmtnDate.arr, 6, 2) > 31) {
    /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
    dcncApl501in02SpInClear(&dcncApl501in02SpIn);

    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dcncApl501in02SpIn.ftprRmtnDate,    stp->ftprRmtnDate);

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(ARRAY_SIZE, DBCURSOR_CLOSE);

    /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
       OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
    dcncApl501in02SpOutClear(&dcncApl501in02SpOut);

    /* DBIO module 호출                                             */

    dcncApl501in02Sp(&basicParam,&dcncApl501in02SpIn,&dcncApl501in02SpOut);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL501IN02_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DCNC_APL501IN02_SP) 호출 Error.",  \
          getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
    COPYVAR(stp->realFtprRmtnDate,  dcncApl501in02SpOut.realFtprRmtnDate);
  } else {
    COPYVAR(stp->realFtprRmtnDate,  stp->ftprRmtnDate);
  }

  uvDebug("stp->realFtprRmtnDate=[%s]",(char*) stp->realFtprRmtnDate.arr);

  /* 발행시 계약일자가 없을 경우 실제송금일자 move */
  if ((char *) stp->cnttDate.arr[0] == 0x00) {
    COPYVAR(stp->cnttDate,  stp->realFtprRmtnDate);
  }

  /*----------------------*/
  /* 송금일자 휴무일 조회 */
  /*----------------------*/

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in11SpInClear(&dcncApl300in11SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in11SpIn.ymd,     stp->realFtprRmtnDate);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in11SpOutClear(&dcncApl300in11SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in11Sp(&basicParam,&dcncApl300in11SpIn,&dcncApl300in11SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN11_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN11_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  if (strncmp((char *) dcncApl300in11SpOut.hldyYn.arr, "Y", 1) == 0) {
    if (strncmp(uvGetUserOrgCode(), "08061", 5) == 0 ||
        strncmp((char *) stp->clltRoutDvsn.arr, "12", 2) == 0) {
      uvDebug("온슈어, 방카비대면채널은 휴무일은 입력가능");
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자 휴무일 입력은 불가합니다.");
      appReturnCode = 363;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자 휴무일 입력은 불가합니다.", "SVncapl300in1");
    }
  }

  if (strncmp((char *) dcncApl300in11SpOut.biwkOfdyYn.arr, "Y", 1) == 0) {

    if (strncmp(uvGetUserOrgCode(), "08061", 5) == 0 ||
        strncmp((char *) stp->clltRoutDvsn.arr, "12", 2) == 0) {
      uvDebug("온슈어, 방카비대면채널은 휴무일은 입력가능");

    } else {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자 격주토요일 입력은 불가합니다.");
      appReturnCode = 363;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자 격주토요일 입력은 불가합니다.", "SVncapl300in1");
    }
  }

  /*----------------------------------*/
  /* 송금일자 지연입력 가능여부 조회  */
  /*----------------------------------*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in15SpInClear(&dcncApl300in15SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl300in15SpIn.orgnCode,   uvGetUserOrgCode());        /* 기관코드 */
  COPYVAR(dcncApl300in15SpIn.inptPossDate,   stp->crntDate);  /* 입력가능일자 */
  COPY(dcncApl300in15SpIn.dlayBsnsDvsn,   "01");              /* 지연업무구분 */
  COPYVAR(dcncApl300in15SpIn.cnttPossDate,   stp->realFtprRmtnDate); /* 지연입력송금일자 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in15SpOutClear(&dcncApl300in15SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in15Sp(&basicParam,&dcncApl300in15SpIn,&dcncApl300in15SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN15_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN15_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* 기본 input 사항 debug START */
  uvDebug("stp->realFtprRmtnDate    [%s]",(char *) stp->realFtprRmtnDate.arr);
  uvDebug("stp->crntDate            [%s]",(char *) stp->crntDate        .arr);
  uvDebug("stp->stddDate            [%s]",(char *) stp->stddDate        .arr);
  uvDebug("ftprRmtnPoss             [%s]",(char *) dcncApl300in15SpOut.ftprRmtnPoss.arr);
  uvDebug("saleChnlCode             [%s]",(char *) stp->saleChnlCode    .arr);

  /* 기본 input 사항 debug END   */

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (strncmp((char *) stp->realFtprRmtnDate.arr, (char *) stp->crntDate.arr, 8) != 0) {
    if ((strncmp((char *) dcncApl300in15SpOut.ftprRmtnPoss.arr, "Y", 1) == 0) ||
        (strncmp((char *) stp->inptPossPlno.arr, "Y", 1) == 0) ||
        (strncmp((char *) stp->crntDate.arr, (char *) stp->stddDate.arr, 8) == 0)) {;
      /* 지연입력이거나, 입력개시일에는 송금일자 = 현재일자 check skip */
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자 지연입력 불가1.");
      appReturnCode = 3404;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자 지연입력 불가1.", "SVncapl300in1");
    }
  }

  if ((atoi((char *) stp->crntDate.arr) < atoi((char *) stp->stddDate.arr)) &&
      ((strncmp((char *) stp->saleChnlCode.arr, "1", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "2", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "4", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "6", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "7", 1) == 0))) {
    if (strncmp((char *) dcncApl300in15SpOut.ftprRmtnPoss.arr, "Y", 1) == 0 ||
        strncmp((char *) stp->inptPossPlno.arr, "Y", 1) == 0) {;
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자 지연입력 불가2.");
      appReturnCode = 3404;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자 지연입력 불가2.", "SVncapl300in1");
    }
  }

  /* 청약서입력개시 시간 체크                                         */
  uvDebug("시스템일자333                  =   [%s]",  (char *) stp->crntDate    .arr);
  uvDebug("시스템시간333                  =   [%s]",  (char *) stp->crntTimeHh24.arr);
  uvDebug("청약서입력개시일자             =   [%s]",  (char *) stp->stddDate    .arr);
  uvDebug("청약서입력개시시간             =   [%s]",  (char *) stp->stddTime    .arr);

  if ((strncmp((char *) stp->crntDate.arr, (char *) stp->stddDate.arr, 8) == 0) &&
      ((strncmp((char *) stp->saleChnlCode.arr, "1", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "2", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "4", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "6", 1) == 0) ||
       (strncmp((char *) stp->saleChnlCode.arr, "7", 1) == 0))) {
    if (atoi((char *) stp->crntTimeHh24.arr) < atoi((char *) stp->stddTime.arr) &&
        (strncmp((char *) dcncApl300in15SpOut.ftprRmtnPoss.arr, "Y", 1) != 0 &&
         strncmp((char *) stp->inptPossPlno.arr, "Y", 1) != 0)) {
      EXEC SQL ROLLBACK;
      uvDebug("현재시간이 청약서입력개시 시간 이전입니다.");
      appReturnCode = 6198;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "현재시간이 청약서입력개시 시간 이전입니다.", "SVncapl300in1");
    } else {;
    }
  }

  if ((atoi((char *) stp->crntDate.arr) <  atoi((char *) stp->stddDate.arr))
      &&  (atoi((char *) stp->realFtprRmtnDate.arr) >= atoi((char *) stp->crntFrtDate.arr))
      &&  ((strncmp((char *) stp->saleChnlCode.arr, "1", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "2", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "4", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "6", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "7", 1) == 0))) {
    EXEC SQL ROLLBACK;
    uvDebug("송금일자를 확인 바랍니다1.");
    appReturnCode = 5333;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "송금일자를 확인 바랍니다1.", "SVncapl300in1");
  }

  if ((strncmp((char *) stp->crntDate.arr, (char *) stp->stddDate.arr, 8) == 0)
      &&  (atoi((char *) stp->ftprRmtnDate.arr) < atoi((char *) stp->crntFrtDate.arr))
      &&  (strncmp((char *) dcncApl300in15SpOut.ftprRmtnPoss.arr, "Y", 1) != 0 &&
           strncmp((char *) stp->inptPossPlno.arr, "Y", 1) != 0)) {
    EXEC SQL ROLLBACK;
    uvDebug("송금일자를 확인 바랍니다2.");
    appReturnCode = 5333;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "송금일자를 확인 바랍니다2.", "SVncapl300in1");
  }

  if (atoi((char *) stp->realFtprRmtnDate.arr) < atoi((char *) stp->srdoPublDate.arr)) {
    /* 지연입력승인시 청약서 발행일이 송금일보다 큰경우에도 접수가능  (2003.07.01) 언더팅 유창진대리 요청*/
    if (strncmp((char *) dcncApl300in15SpOut.ftprRmtnPoss.arr, "Y", 1) == 0 ||
        strncmp((char *) stp->inptPossPlno.arr, "Y", 1) == 0) {;
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자를 확인 바랍니다3.");
      appReturnCode = 5333;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자를 확인 바랍니다3.", "SVncapl300in1");
    }
  }

  if ((strncmp((char *) stp->crntDate.arr, (char *) stp->ftprRmtnDate.arr, 8) == 0)
      ||   (strncmp((char *) stp->crntDate.arr, (char *) stp->realFtprRmtnDate.arr, 8) == 0)
      ||   (strncmp((char *) stp->crntDate.arr, (char *) stp->stddDate.arr, 8) == 0)) {;
  } else {
    if (strncmp((char *) dcncApl300in15SpOut.ftprRmtnPoss.arr, "Y", 1) == 0 ||
        strncmp((char *) stp->inptPossPlno.arr, "Y", 1) == 0) {;
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자를 확인 바랍니다4.");
      appReturnCode = 5333;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자를 확인 바랍니다4.", "SVncapl300in1");
    }
  }

  /* 마감후 접수(소급계약이 아닌 경우) */
  if ((strncmp((char *) stp->cnttDate.arr, (char *) stp->ftprRmtnDate.arr, 8) != 0) \
      &&  (strncmp((char *) stp->retrYn.arr, "N", 1) == 0)) {
    appReturnCode = CMUV_getBizDay_CC((char *) stp->cnttDate.arr, 4, before_date, after_date);
    if (appReturnCode != SUCCESS) {
      EXEC SQL ROLLBACK;
      uvDebug("전후영업일산출시 오류가 발생하였습니다..");
      appReturnCode = 1800;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "전후영업일산출시 오류가 발생하였습니다..", "SVncapl300in1");
    }

    uvDebug("after_date = [%s]",after_date);
    uvDebug("after_date = [%s]",(char *) stp->realFtprRmtnDate.arr);

    if (strncmp((char *) stp->realFtprRmtnDate.arr, after_date, 8) != 0) {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자를 확인 바랍니다5.");
      appReturnCode = 5333;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자를 확인 바랍니다5.", "SVncapl300in1");
    }
  }

  /* 계약월도와 송금월도가 틀린경우 입력불가, 단 소급은 제외 */
  if ((strncmp((char *) stp->cnttDate.arr, (char *) stp->ftprRmtnDate.arr, 6) != 0)) {
    if (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0) {; /* 소급의 경우는 skip */
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("송금일자를 확인 바랍니다6.");
      appReturnCode = 5333;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "송금일자를 확인 바랍니다6.", "SVncapl300in1");
    }
  }

  /* 입력 마감일자 이후는 입력 못함 */
  if (strcmp((char *) stp->lstmStddStdt.arr, (char *) stp->crntDate.arr) < 0) {
    EXEC SQL ROLLBACK;
    uvDebug("해당월 입력 마감일자가 종료되었습니다. 업무에 참고하시기 바랍니다.");
    appReturnCode = 8499;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "해당월 입력 마감일자가 종료되었습니다. 업무에 참고하시기 바랍니다.", "SVncapl300in1");
  }

  uvDebug("ARS 입력계약건 여부 = [%s]",(char *) stp->arsCnttYn.arr);

  /* 계약일자가 청약서 발행일자보다 빠를 경우 접수불가, 단 소급과 지연입력, ARS입력일 경우 제외 */
  if ((strncmp((char *) stp->cnttDate.arr, (char *) stp->srdoPublDate.arr, 8) < 0)) {
    if ((strncmp((char *) stp->retrYn.arr, "Y", 1) == 0) || /* 소급의 경우 skip */
        (strncmp((char *) stp->inptPoss.arr, "Y", 1) == 0) || /* 지연입력 경우 skip */
        (strncmp((char *) stp->arsCnttYn.arr, "Y", 1) == 0)) {; /* ARS입력 경우 skip */
    } else {
      EXEC SQL ROLLBACK;
      uvDebug("계약일자가 청약서 발행일보다 빠릅니다. 계약일자를 확인하세요.");
      appReturnCode = 8543;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "계약일자가 청약서 발행일보다 빠릅니다. 계약일자를 확인하세요.", "SVncapl300in1");
    }
  }

  uvDebug("SVncapl300in1_ftprRmtnDate  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_spclDateTrnf()
  Note          : 지정일이체시 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_spclDateTrnf(struct stp_SVncapl300in1 *stp) {
  int     ii      =   0;
  int     days    =   0;
  int     hldy_yn =   0;
  int     loopCnt =   0;
  char    before_date[8+1];
  char    after_date[8+1];
  char    trnf_date[8+1];
  char    monthfirst[8+1];
  char    monthEnd[8+1];

  struct _dcnc_apl300in06_sp_out dcncApl300in06SpOut;
  struct _dcnc_apl300in06_sp_in  dcncApl300in06SpIn;

  uvDebug("SVncapl300in1_spclDateTrnf    Start");

  memset(before_date,     0x00,     sizeof(before_date));
  memset(after_date,     0x00,     sizeof(after_date));
  memset(trnf_date,     0x00,     sizeof(trnf_date));
  memset(monthfirst,     0x00,     sizeof(monthfirst));
  memset(monthEnd,     0x00,     sizeof(monthEnd));

  /* 이체일자 30일인경우 말일 산출                                    */
  if (atoi(((char *) stp->ftprRmtnDate.arr + 6)) == 30) {

    memset(monthfirst,     0x00,     sizeof(monthfirst));
    memset(monthEnd  ,     0x00,     sizeof(monthEnd));

    strncpy(monthfirst, (char *) stp->ftprRmtnDate.arr,  6);
    strncat(monthfirst, "01",                            2);
    CMUV_getEndDateOfMonth_CC(monthfirst, monthEnd);
    COPY(stp->ftprRmtnDate,   monthEnd);
  }

  /* 발행일로부터 이체가능일자 최대 30일까지(계산결과는 단편계산)  */
  uvDebug("stp->srdoPublDate  =   [%s]",  (char *) stp->srdoPublDate.arr);
  uvDebug("stp->ftprRmtnDate  =   [%s]",  (char *) stp->ftprRmtnDate.arr);
  days = CMUV_getDayDiff_CC((char *) stp->srdoPublDate.arr, (char *) stp->ftprRmtnDate.arr);
  uvDebug("days   =   [%d]",  days);
  if ((days > 0) && (days < 30)) {;
  } else {
    EXEC SQL ROLLBACK;
    uvDebug("발행일로부터 이체가능일자 최대 30일까지.");
    appReturnCode = 5464;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "발행일로부터 이체가능일자 최대 30일까지.", "SVncapl300in1");
  }

  /* 접수일로부터 이체가능일자 최대 20일까지(계산결과는 단편계산)  */
  days = CMUV_getDayDiff_CC((char *) stp->crntDate.arr, (char *) stp->ftprRmtnDate.arr);
  if ((days > 0) && (days < 20)) {;
  } else {
    EXEC SQL ROLLBACK;
    uvDebug("접수일로부터 이체가능일자 최대 20일까지.");
    appReturnCode = 5465;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "접수일로부터 이체가능일자 최대 20일까지.", "SVncapl300in1");
  }

  /* 접수일대비 자동이체(우체국포함) 4영업일후, 자동결재 2영업일후 일자 산출*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in06SpInClear(&dcncApl300in06SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in06SpIn.finaOrgnDvsn,    stp->finaOrgnDvsn[0]); /* 금융기관구분 */
  COPYVAR(dcncApl300in06SpIn.finaOrgnCode,    stp->finaOrgnCode[0]); /* 금융기관코드 */

  uvDebug("dcncApl300in06SpIn.finaOrgnDvsn    =   [%s]",  (char *) dcncApl300in06SpIn.finaOrgnDvsn.arr);
  uvDebug("dcncApl300in06SpIn.finaOrgnCode    =   [%s]",  (char *) dcncApl300in06SpIn.finaOrgnCode.arr);
  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in06SpOutClear(&dcncApl300in06SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in06Sp(&basicParam,&dcncApl300in06SpIn,&dcncApl300in06SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN06_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN06_SP) 호출 Error.",  \
        getCDALErrMsg());
  }
  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("dcncApl300in06SpOut.aupyDvsn   =   [%s]",  (char *) dcncApl300in06SpOut.aupyDvsn.arr);
  if (strncmp((char *) dcncApl300in06SpOut.aupyDvsn.arr, "1", 1) == 0) {
    loopCnt     =   2;
  } else {
    loopCnt     =   4;
  }
  strncpy(trnf_date,  (char *) stp->crntDate.arr,  8);
  for (ii = 0; ii < loopCnt; ii++) {
    appReturnCode = CMUV_getBizDay_CC(trnf_date, 4, before_date, after_date);
    if (appReturnCode != SUCCESS) {
      EXEC SQL ROLLBACK;
      uvDebug("전후일자산출시 오류가 발생하였습니다.");
      appReturnCode = 1800;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "전후일자산출시 오류가 발생하였습니다.", "SVncapl300in1");
    }
    strncpy(trnf_date,  after_date, 8);
    uvDebug("trnf_date =   [%s]",  trnf_date);
  }

  /* 산출일자가 이체일자보다 작은경우 정상    */
  if (atoi(trnf_date) < atoi((char *) stp->ftprRmtnDate.arr)) {
    ;
  } else {
    EXEC SQL ROLLBACK;
    uvDebug("접수일기준 자동이체 5일전, 자동결재 3일전이후 선택 가능");
    appReturnCode = 5466;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "접수일기준 자동이체 5일전, 자동결재 3일전이후 선택 가능.", "SVncapl300in1");
  }

  /* 이체일자 휴무시 익영업이체일자 산출      */
  appReturnCode = CMUV_isValidHoliday_CC((char *) stp->ftprRmtnDate.arr, 4, &hldy_yn);
  if (hldy_yn == 1) {
    appReturnCode = CMUV_getBizDay_CC((char *) stp->ftprRmtnDate.arr, 4, before_date, after_date);
    COPY(stp->ftprRmtnDate, after_date);
  }

  /* 실제이체일자 Setting */
  COPYVAR(stp->realFtprRmtnDate,   stp->ftprRmtnDate);

  uvDebug("지정일이체 = [%s][%s][%s] ", stp->retrYn.arr, stp->ftprRmtnDate.arr, stp->cnttDate.arr);

  /* 계약일자와 비교 체크 */
  if ((char *) stp->cnttDate.arr[0] == 0x00) {
    COPYVAR(stp->cnttDate,  stp->ftprRmtnDate);
  } else {
    if ((strncmp((char *) stp->cnttDate.arr, (char *) stp->ftprRmtnDate.arr,  8) != 0) \
        &&  (strncmp((char *) stp->retrYn.arr, "N", 1) == 0)) {
      EXEC SQL ROLLBACK;
      uvDebug("계약일자와 지정일이체일자 상이로 입력이 불가합니다.");
      appReturnCode = 287;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "계약일자와 지정일이체일자 상이로 입력이 불가합니다.", "SVncapl300in1");
    }
  }

  /*  카드납/지정일이체는 선/소급 불가합니다. 즉시이체는 소급 불가합니다.                       */
  if ((strncmp((char *) stp->fstiPpayYn.arr, "Y", 1) == 0) ||
      (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0)) {
    EXEC SQL ROLLBACK;
    uvDebug("카드납/지정일이체는 선/소급 불가합니다. 즉시이체는 소급 불가합니다.");
    appReturnCode = 5950;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "카드납/지정일이체는 선/소급 불가합니다. 즉시이체는 소급 불가합니다.", "SVncapl300in1");
  }

  /* 2004.09.30 추석연휴 대비 25일 이체가 없으므로, 25일 이체건은 30일로 유도 */
  if (strncmp((char *) stp->ftprRecvMdcd.arr, "81", 2) == 0) {
    /* 설계사 본인명의 신계약 제한 제외보종 확인 */
    char retValt[MAX_VALUE_LEN];
    memset(retValt, 0x00, sizeof(retValt));

    uvDebug("추석맞이 계약일자 [%s]",(char *) stp->cnttDate.arr);
    uvDebug("추석맞이 이체일자 [%s]",(char *) stp->trnfHopeDd[0].arr);

    int retCodet = uvRuleBase("NC_recpChck", "",
        (char *) stp->cnttDate.arr,
        (char *) stp->trnfHopeDd[0].arr,
        retValt);
    if (retCodet != 0) {
      EXEC SQL ROLLBACK;
      uvDebug("(NC_recpChck) 룰호출 오류[%d]", retCodet);
      SVC_CLOSE(APPERR, 4899, 0, "(NC_recpChck) 룰호출 오류", fnName);
    }

    /* 가능여부 */
    if (strcmp(retValt, "N") == 0) {
      EXEC SQL ROLLBACK;
      uvDebug("2004년 9월 25일은 추석관계로 이체일이 없습니다. 30일자로 이체일자 조정하세요");
      SVC_CLOSE(APPERR, 6252, 2, "2004년 9월 25일은 추석관계로 이체안됩니다", fnName);
    }
  }

  /*  지정일이체는 자유설계 불가 합니다                                 */
  if (strncmp((char *) stp->freePlanYn.arr, "Y", 1) == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("자유설계건은 카드납/즉시이체 불가능 합니다.");
    appReturnCode = 5949;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "자유설계건은 카드납/즉시이체 불가능 합니다.", "SVncapl300in1");
  }

  /* 한화증권,HSBC은행은 지정일이체 안됨 */
  if (strcmp((char *)stp->finaOrgnCode[0].arr,"269") == 0 )
  {
    EXEC SQL ROLLBACK;
    uvDebug("한화증권 지정일이체 불가(즉시이체 이용)");
    appReturnCode = 4899;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "한화증권 지정일이체 불가(즉시이체 이용)", "SVncapl300in1");
  } else if (strcmp((char *)stp->finaOrgnCode[0].arr,"054") == 0 ||
             strcmp((char *)stp->finaOrgnCode[0].arr,"54")  == 0)
  {
    EXEC SQL ROLLBACK;
    uvDebug("HSBC은행 지정일,즉시이체 불가(방문수금 이용)");
    appReturnCode = 4899;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "HSBC은행 지정일,즉시이체 불가(방문수금 이용", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_spclDateTrnf    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_card()
  Note          : 초회 보험료 카드납시 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_card(struct stp_SVncapl300in1 *stp) {
  uvDebug("SVncapl300in1_card    Start");

  COPYVAR(stp->ftprRmtnDate,   stp->crntDate);
  COPYVAR(stp->ftprRmtnTime,   stp->crntTimeHh24);
  COPYVAR(stp->realFtprRmtnDate,   stp->ftprRmtnDate);

  /* 카드납입 가능회사 = BC, 국민, LG, 삼성, 외환, 동양 , 신한, 현대 8개사         */
  if ((strncmp((char *) stp->finaOrgnCode[0].arr,   "61",   2)  ==  0)  \
      ||  (strncmp((char *) stp->finaOrgnCode[0].arr,   "62",   2)  ==  0)  \
      ||  (strncmp((char *) stp->finaOrgnCode[0].arr,   "66",   2)  ==  0)  \
      ||  (strncmp((char *) stp->finaOrgnCode[0].arr,   "65",   2)  ==  0)  \
      ||  (strncmp((char *) stp->finaOrgnCode[0].arr,   "63",   2)  ==  0)  \
      ||  (strncmp((char *) stp->finaOrgnCode[0].arr,   "68",   2)  ==  0)  \
      ||  (strncmp((char *) stp->finaOrgnCode[0].arr,   "26",   2)  ==  0)  \
      ||  (strncmp((char *) stp->finaOrgnCode[0].arr,   "67",   2)  ==  0)) {;
  } else {
    EXEC SQL ROLLBACK;
    uvDebug("초회보험료 카드이체납 대상 카드사가 아니거나 카드사가 입력되지 않았습니다..");
    appReturnCode = 5961;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "초회보험료 카드이체납 대상 카드사가 아니거나 카드사가 입력되지 않았습니다..", "SVncapl300in1");
  }

  strncpy((char *) stp->trnfHopeDd[0].arr, (char *) stp->crntDate.arr + 6, 2);
  stp->trnfHopeDd[0].len  =   strlen((char *) stp->trnfHopeDd[0].arr);

  /* 계약일자와 비교 체크 */
  if ((char *) stp->cnttDate.arr[0] == 0x00) {
    COPYVAR(stp->cnttDate,  stp->ftprRmtnDate);
  } else {
    if ((strncmp((char *) stp->cnttDate.arr, (char *) stp->ftprRmtnDate.arr,  8) != 0) \
        &&  (strncmp((char *) stp->retrYn.arr, "N", 1) == 0)) {
      EXEC SQL ROLLBACK;
      uvDebug("계약일자와 카드승인일자 상이로 입력이 불가합니다.");
      appReturnCode = 3419;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "계약일자와 카드승인일자 상이로 입력이 불가합니다.", "SVncapl300in1");
    }
  }

  /* 카드납 유효일자 체크 */
  if (uvAtoi((char *) stp->cnttDate.arr, 0, 6) >= atoi((char *) stp->cardVlidEdym[0].arr)) {
    EXEC SQL ROLLBACK;
    uvDebug("카드유효일자 - 1개월 이내만 카드납 가능합니다.");
    appReturnCode = 5611;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "카드유효일자 - 1개월 이내만 카드납 가능합니다.", "SVncapl300in1");
  }

  /*  카드납입은 선납 / 소급 불가 합니다                                 */
  if ((strncmp((char *) stp->fstiPpayYn.arr, "Y", 1) == 0) ||
      (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0)) {
    EXEC SQL ROLLBACK;
    uvDebug("카드납입은 선/소급 불가합니다.");
    appReturnCode = 5950;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "카드납입은 선/소급 불가합니다.", "SVncapl300in1");
  }

  /*  카드납입은 자유설계 불가 합니다                                 */
  if (strncmp((char *) stp->freePlanYn.arr, "Y", 1) == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("자유설계건은 카드납/즉시이체 불가능 합니다.");
    appReturnCode = 5949;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "자유설계건은 카드납/즉시이체 불가능 합니다.", "SVncapl300in1");
  }

  /* 청약서입력개시 시간 체크                                         */
  uvDebug("시스템일자                     =   [%s]",  (char *) stp->crntDate    .arr);
  uvDebug("시스템시간                     =   [%s]",  (char *) stp->crntTimeHh24.arr);
  uvDebug("청약서입력개시일자             =   [%s]",  (char *) stp->stddDate    .arr);
  uvDebug("청약서입력개시시간             =   [%s]",  (char *) stp->stddTime    .arr);

  if ((strncmp((char *) stp->crntDate.arr, (char *) stp->stddDate.arr, 8) == 0)
      &&   ((strncmp((char *) stp->saleChnlCode.arr, "1", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "2", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "4", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "6", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "7", 1) == 0))) {
    if (atoi((char *) stp->crntTimeHh24.arr) < atoi((char *) stp->stddTime.arr)) {
      EXEC SQL ROLLBACK;
      uvDebug("현재시간이 청약서입력개시 시간 이전입니다.");
      appReturnCode = 6198;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "현재시간이 청약서입력개시 시간 이전입니다.", "SVncapl300in1");
    } else {;
    }
  }

  uvDebug("SVncapl300in1_card    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_realTime()
  Note          : 초회 보험료 즉시이체 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_realTime(struct stp_SVncapl300in1 *stp) {
  uvDebug("SVncapl300in1_realTime    Start");

  COPYVAR(stp->ftprRmtnDate,   stp->crntDate);
  COPYVAR(stp->ftprRmtnTime,   stp->crntTimeHh24);
  COPYVAR(stp->realFtprRmtnDate,   stp->ftprRmtnDate);

  strncpy((char *) stp->trnfHopeDd[0].arr, (char *) stp->crntDate.arr + 6, 2);
  stp->trnfHopeDd[0].len  =   strlen((char *) stp->trnfHopeDd[0].arr);

  /* 계약일자와 비교 체크 */
  if ((char *) stp->cnttDate.arr[0] == 0x00) {
    COPYVAR(stp->cnttDate,  stp->ftprRmtnDate);
  } else {
    if ((strncmp((char *) stp->cnttDate.arr, (char *) stp->ftprRmtnDate.arr,  8) != 0) \
        &&  (strncmp((char *) stp->retrYn.arr, "N", 1) == 0)) {
      EXEC SQL ROLLBACK;
      uvDebug("계약일자와 이체일자 상이로 입력이 불가합니다.");
      appReturnCode = 3571;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "계약일자와 이체일자 상이로 입력이 불가합니다.", "SVncapl300in1");
    }
  }

  /*------------------------------------------------------------------*
   * 즉시이체가능기관 확인
   *------------------------------------------------------------------*/
  char retVal[MAX_VALUE_LEN];
  memset(retVal, 0x00, sizeof(retVal));

  int retCode = uvRuleBase("realTrnfOrgn", "",
      (char *) stp->clltOrgnCode.arr,
      retVal);
  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(realTrnfOrgn) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(realTrnfOrgn) 룰호출 오류", fnName);
  } else if (strcmp(retVal, "Y") != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("초회보험료 즉시이체 가능 기관이 아닙니다.");
    SVC_CLOSE(APPERR, 6310, 0, "초회보험료 즉시이체 가능 기관이 아닙니다.", fnName);
  }

  /*  카드납/지정일이체는 선/소급 불가합니다. 즉시이체는 소급 불가합니다.           */
  /*  선납즉시이체 시행(2009.12.18)                             */
  /*if ((strncmp((char *) stp->fstiPpayYn.arr, "Y", 1) == 0) || */
  /*    (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0)) {     */
  if (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("카드납/지정일이체는 선/소급 불가합니다. 즉시이체는 소급 불가합니다.");
    appReturnCode = 5950;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "카드납/지정일이체는 선/소급 불가합니다. 즉시이체는 소급 불가합니다.", "SVncapl300in1");
  }

  /* 청약서입력개시 시간 체크                                         */
  uvDebug("시스템일자                     =   [%s]",  (char *) stp->crntDate    .arr);
  uvDebug("시스템시간                     =   [%s]",  (char *) stp->crntTimeHh24.arr);
  uvDebug("청약서입력개시일자             =   [%s]",  (char *) stp->stddDate    .arr);
  uvDebug("청약서입력개시시간             =   [%s]",  (char *) stp->stddTime    .arr);

  if ((strncmp((char *) stp->crntDate.arr, (char *) stp->stddDate.arr, 8) == 0)
      &&   ((strncmp((char *) stp->saleChnlCode.arr, "1", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "2", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "4", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "6", 1) == 0)
      ||    (strncmp((char *) stp->saleChnlCode.arr, "7", 1) == 0))) {
    if (atoi((char *) stp->crntTimeHh24.arr) < atoi((char *) stp->stddTime.arr)) {
      EXEC SQL ROLLBACK;
      uvDebug("현재시간이 청약서입력개시 시간 이전입니다.");
      appReturnCode = 6198;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "현재시간이 청약서입력개시 시간 이전입니다.", "SVncapl300in1");
    } else {;
    }
  }

  uvDebug("SVncapl300in1_realTime    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_realTime2()
  Note          : 초회 보험료 즉시이체 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_realTime2(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_realTime2    Start");

  /*  즉시이체는 자유설계 불가 합니다                                 */
  /*  2004.12.1 신진혁, 전환CI(ciInsrYn = K) 는 가능                  */
  if ((strncmp((char *) stp->freePlanYn.arr, "Y", 1) == 0) &&
      (strcmp((char*) stp->ciInsrYn.arr,"K") != 0)) {
    EXEC SQL ROLLBACK;
    uvDebug("자유설계건은 즉시이체 불가능 합니다.");
    appReturnCode = 5949;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "자유설계건은 즉시이체 불가능 합니다.", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_realTime2    End");

  return;
}
/************************************************************************
  Function Name :SVncapl300in1_aplcni()
  Note          : 고지사항 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_aplcni(struct stp_SVncapl300in1 *stp) {
  int ii;

  uvDebug("SVncapl300in1_aplcni    Start");

  for (ii = 0; ii < stp->cniCnt; ii++) {                     /* 피보험자 건수 */
    if (strncmp((char *) stp->ovseRkarDpyn[ii].arr, "Y", 1) == 0) { /* 피보험자위험지출국 */
      EXEC SQL ROLLBACK;
      uvDebug("해외위험지역 출국예정시 청약서 접수가 불가합니다..");
      appReturnCode = 473;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "해외위험지역 출국예정시 청약서 접수가 불가합니다..", "SVncapl300in1");
    }
  }
  uvDebug("SVncapl300in1_aplcni    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_CMNC_insoCnttChck()
  Note          : 부실계약
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_insoCnttChck(struct stp_SVncapl300in1 *stp) {
  int     ii;
  CMNC_insoCnttChck       insoCnttChck;

  uvDebug("SVncapl300in1_CMNC_insoCnttChck    Start");

  memset(&insoCnttChck,   0x00,   sizeof(CMNC_insoCnttChck));

  for (ii = 0; ii < stp->crmCnt; ii++) {
    if (strncmp((char *) stp->custRoleCode[ii].arr, "11", 2) == 0) {
      COPYVAR(insoCnttChck.custId[0], stp->custId[ii]);         /* 계약자 */
    }
    if (strncmp((char *) stp->custRoleCode[ii].arr, "21", 2) == 0) {
      COPYVAR(insoCnttChck.custId[1], stp->custId[ii]);         /* 주피 */
    }
    if (strncmp((char *) stp->custRoleCode[ii].arr, "22", 2) == 0) {
      COPYVAR(insoCnttChck.custId[2], stp->custId[ii]);         /* 종피 */
    }
    if (strncmp((char *) stp->custRoleCode[ii].arr, "23", 2) == 0) {
      COPYVAR(insoCnttChck.custId[3], stp->custId[ii]);         /* 자녀1 */
    }
    if (strncmp((char *) stp->custRoleCode[ii].arr, "24", 2) == 0) {
      COPYVAR(insoCnttChck.custId[4], stp->custId[ii]);         /* 자녀2 */
    }
    /* 주니어 UL플랜에서 종피역할코드는 '22'가 아니고 '28' array size 때문에 임시처리 */
    if (strncmp((char *) stp->custRoleCode[ii].arr, "28", 2) == 0) {
      COPYVAR(insoCnttChck.custId[2], stp->custId[ii]);         /* 부모 */
    }
  }

  if (strncmp((char *) stp->ctorCrpbYn.arr, "Y", 1) == 0) {  /* 계약자 법인체 */
    if (stp->premCoprCgrt == 0) {
      COPYVAR(insoCnttChck.custId[5], insoCnttChck.custId[1]); /* 보험료법인부담율 0%->납부자 주피 */
    } else {
      COPYVAR(insoCnttChck.custId[5], insoCnttChck.custId[0]); /* 보험료법인부담율 0%이상 납부자 계약자 */
    }
  } else {                                                     /* 계약자 개인 */
    COPYVAR(insoCnttChck.custId[5], insoCnttChck.custId[0]); /* 보험료법인부담율 0%->납부자 계약자 */
  }

  COPYVAR(insoCnttChck.orgnCode    , stp->clltOrgnCode); /* 기관코드           */
  COPYVAR(insoCnttChck.clltLpPrno  , stp->clltLpPrno  ); /* 모집설계사고유번호 */
  COPYVAR(insoCnttChck.clplAddrKdcd, stp->addrKdcd    ); /* 수금지주소종류코드 */
  NCOPYVAR(insoCnttChck.clogYm     , stp->crntDate,  6); /* 마감년월           */
  COPYVAR(insoCnttChck.irkdCodeDtal, stp->irkdCodeDtal); /* 보험종류코드_세    */
  COPYVAR(insoCnttChck.irkdCodeItem, stp->irkdCodeItem); /* 보험종류코드_목    */

  if (CMNC_insoCnttChck_CC(&insoCnttChck) == FAIL) {
    EXEC SQL ROLLBACK;
    uvDebug("부실계약 호출 오류");
    appReturnCode = 3095;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "부실계약 호출 오류", "SVncapl300in1");
  }

  if (insoCnttChck.resl != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("부실계약 = [%d]", insoCnttChck.resl);
    appReturnCode = insoCnttChck.resl;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "부실계약", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_CMNC_insoCnttChck    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_freePlanJudg()
  Note          : 자유설계 처리 준비
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_freePlanJudg(struct stp_SVncapl300in1 *stp) {
  int     ii;

  struct _dcnc_apl300in28_sp_out dcncApl300in28SpOut;
  struct _dcnc_apl300in28_sp_in  dcncApl300in28SpIn;

  struct _dcnc_apl300in29_sp_out dcncApl300in29SpOut[DCNC_APL300IN29_SP_RQSIZE];
  struct _dcnc_apl300in29_sp_in  dcncApl300in29SpIn;

  uvDebug("SVncapl300in1_freePlanJudg  Start");

  /*--------------------------*/
  /* 자유설계 계약사항 조회   */
  /*--------------------------*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in28SpInClear(&dcncApl300in28SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in28SpIn.polyNo,  stp->scndPolyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in28SpOutClear(&dcncApl300in28SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in28Sp(&basicParam,&dcncApl300in28SpIn,&dcncApl300in28SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN28_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN28_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  COPYVAR(stp->frpirkdCodeDtal,   dcncApl300in28SpOut.irkdCodeDtal); /* 보험종류코드_세 */
  COPYVAR(stp->frpirkdCodeItem,   dcncApl300in28SpOut.irkdCodeItem); /* 보험종류코드_목 */

  stp->frppaymTerm    =   dcncApl300in28SpOut.paymTerm;           /* 납입기간 */
  stp->frprealPaymTerm =   dcncApl300in28SpOut.realPaymTerm;    /* 실납입기간 */
  COPYVAR(stp->frppaymTermDvsn,   dcncApl300in28SpOut.paymTermDvsn); /* 납입기간구분 */

  COPYVAR(stp->frppytrInqrCode,   dcncApl300in28SpOut.pytrInqrCode); /* 납입기간조회코드 */
  COPYVAR(stp->frppaymCyclCode,   dcncApl300in28SpOut.paymCyclCode); /* 납입주기코드 */

  stp->frpmainInsrAmt =   dcncApl300in28SpOut.mainInsrAmt;        /* 주보험금 */
  stp->frpsumPrem     =   dcncApl300in28SpOut.sumPrem;          /* 합계보험료 */
  stp->frpsumOrigPrem =   dcncApl300in28SpOut.sumOrigPrem;    /* 합계원보험료 */
  stp->frpfstiRrcvPrem =   dcncApl300in28SpOut.fstiRrcvPrem; /* 초회실입금보험료 */
  stp->frpaddPaymPrem =   dcncApl300in28SpOut.addPaymPrem;  /* 추가납입보험료 */

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in29SpInClear(&dcncApl300in29SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in29SpIn.polyNo,  stp->scndPolyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(DCNC_APL300IN29_SP_RQSIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in29SpOutClear(dcncApl300in29SpOut,DCNC_APL300IN29_SP_RQSIZE);

  /* DBIO module 호출                                             */

  dcncApl300in29Sp(&basicParam,&dcncApl300in29SpIn,dcncApl300in29SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN29_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN29_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  stp->fjgCnt = basicParam.rpSize;
  for (ii = 0; ii < stp->fjgCnt; ii++) {
    COPYVAR(stp->fjggoodCodeDtal[ii],  dcncApl300in29SpOut[ii].goodCodeDtal);
    COPYVAR(stp->fjggoodCodeItem[ii],  dcncApl300in29SpOut[ii].goodCodeItem);
    COPYVAR(stp->fjggoodCodeName[ii],  dcncApl300in29SpOut[ii].goodCodeName); /* 상품업무명          (C) */
    COPYVAR(stp->fjggoodRelnCode[ii],  dcncApl300in29SpOut[ii].goodRelnCode);
    COPYVAR(stp->fjgpytrInqrCode[ii],  dcncApl300in29SpOut[ii].pytrInqrCode); /* 납입기간조회코드    (C) */
    COPYVAR(stp->fjgintrInqrCode[ii],  dcncApl300in29SpOut[ii].intrInqrCode); /* 보험기간조회코드    (C) */
    stp->fjginsrAmt[ii] =  dcncApl300in29SpOut[ii].insrAmt;
    stp->fjgorigPrem[ii] =  dcncApl300in29SpOut[ii].origPrem;
    stp->fjgprem[ii] =  dcncApl300in29SpOut[ii].prem;
  }

  uvDebug("SVncapl300in1_freePlanJudg  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_CMNC_judgMainChck()
  Note          : 청약서 발행 MAIN
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_judgMainChck(struct stp_SVncapl300in1 *stp,  int freePlanDvsn) {
  int ii, kk;
  varchar   insName[10+1];
  ST_APL100_INOUT     stj;
  ST_ERRCONTENT       err;

  char     spclTypeDtdv [  12+1]; /* 특이유형상세구분 */
  char     spclTypeSmry [1024+1]; /* 특이유형적요 */
  char     spclTypeDvcd [  10+1]; /* 특이유형구분코드 */
  char     spclTypeYn   [   1+1]; /* 특이유형구분코드 */

  double tRsjnSumPrem  = 0;

  char selfYn[MAX_VALUE_LEN];

  int retCode = 0;

  uvDebug("SVncapl300in1_CMNC_judgMainChck Start");

  INITVAR(insName);
  memset(&stj,    0x00,   sizeof(ST_APL100_INOUT));
  memset(&err,    0x00,   sizeof(ST_ERRCONTENT));

  stj.freeSaeCnt      =   freePlanDvsn;                     /* 자유설계제어 */
  COPY(stj.procGubun,   "NC");                     /* 업무구분            (C) */
  COPY(stj.workGubun,   "2");                      /* 작업구분            (C) */
  COPY(stj.pgmGubun,   "P");                       /* 개별/일괄구분       (C) */
  COPYVAR(stj.systemDate,   stp->crntDate);                 /* SYSTEM DATE */
  /*공통사항 --------------------------------------------------------------*/
  if (freePlanDvsn == 0) {
    COPYVAR(stj.irkdCodeDtal,   stp->irkdCodeDtal); /* 보험종류코드_세     (C) */
    COPYVAR(stj.irkdCodeItem,   stp->irkdCodeItem); /* 보험종류코드_목     (C) */
    COPYVAR(stj.polyNo,   stp->polyNo);                     /* 증권번호 */
  } else {
    COPYVAR(stj.irkdCodeDtal,   stp->frpirkdCodeDtal); /* 보험종류코드_세     (C) */
    COPYVAR(stj.irkdCodeItem,   stp->frpirkdCodeItem); /* 보험종류코드_목     (C) */
    COPYVAR(stj.polyNo,   stp->scndPolyNo);               /* 자유설계증권번호 */
  }
  COPYVAR(stj.clltLpPrno,   stp->clltLpPrno);      /* 모집설계사고유번호  (C) */
  COPYVAR(stj.clltOrgnCode,   stp->clltOrgnCode);  /* 모집기관코드        (C) */
  COPYVAR(stj.saleChnlCode,   stp->saleChnlCode);  /* 판매채널코드        (C) */
  COPYVAR(stj.saleChnlGubn,   stp->prsnCoprPmdv);  /* 개인법인인가구분    (C) */
  COPYVAR(stj.mchnCmpgCode,   stp->mchnCmpgCode);         /* 다채널캠페인코드 */

  COPYVAR(stj.collLpPrno,   stp->collLpPrno);      /* 수금설계사고유번호  (C) */
  COPYVAR(stj.collOrgnCode,   stp->collOrgnCode);  /* 수금기관코드        (C) */
  COPYVAR(stj.cnttDate,   stp->cnttDate);          /* 계약일자            (C) */
  COPYVAR(stj.grpCustId,   stp->cnttGrpCtid);      /* 단체고객번호        (C) */
  COPYVAR(stj.ctorCrpbYn,   stp->ctorCrpbYn);      /* 계약자법인체여부    (C) */
  COPYVAR(stj.grttSpcdYn,   stp->grttSpcdYn);      /* 단체취급할인여부    (C) */

  stj.premCoprCgrt    =   stp->premCoprCgrt;       /* 보험료단체부담율    (C) */
  COPYVAR(stj.premIamtIpst,   stp->premIamtIpst); /* 보험료/보험금입력기준(C) */

  /* 전환CI 의 경우 즉시이체 용 송금일자는 현재일자 */
  if (strncmp((char *) stp->ftprRecvMdcd.arr, "83", 2) == 0) {
    COPYVAR(stj.ftprRmtnDate,   stp->crntDate);
  } else {
    COPYVAR(stj.ftprRmtnDate,   stp->ftprRmtnDate); /* 초회송금일자(접수)  (C) */
  }

  if (freePlanDvsn == 0) {
    COPY(stj.freeJoinYn,   "N");                   /* 자유설계가입여부    (C) */
  } else {
    COPY(stj.freeJoinYn,   "Y");                   /* 자유설계가입여부    (C) */
  }

  COPYVAR(stj.premiumAccmYn,  stp->premiumAccmYn);        /* 고액적립선택여부 */

  /*피보험자 사항 ----------------------------------------------------------*/
  for (ii = 0; ii < stp->crmCnt; ii++) {
    if (strncmp((char *) stp->custRoleCode[ii].arr, "11", 2) == 0) {
      kk  =   0;
    }
    if (strncmp((char *) stp->custRoleCode[ii].arr, "13", 2) == 0) {
      kk  =   5;
    } else if (strncmp((char *) stp->custRoleCode[ii].arr, "21", 2) == 0) {
      kk  =   1;
    } else if (strncmp((char *) stp->custRoleCode[ii].arr, "22", 2) == 0) {
      kk  =   2;
    } else if (strncmp((char *) stp->custRoleCode[ii].arr, "23", 2) == 0) {
      kk  =   3;
    } else if (strncmp((char *) stp->custRoleCode[ii].arr, "24", 2) == 0) {
      kk  =   4;
    } else if (strncmp((char *) stp->custRoleCode[ii].arr, "25", 2) == 0) {
      kk  =   6;
    } else if (strncmp((char *) stp->custRoleCode[ii].arr, "26", 2) == 0) {
      kk  =   7;
    } else if (strncmp((char *) stp->custRoleCode[ii].arr, "28", 2) == 0) {
      kk  =   7;
    }

    COPYVAR(stj.custId[kk],   stp->custId[ii]);    /* 피보험자고객ID      (C) */
    COPYVAR(stj.rsdnRgstNo[kk],   stp->custRrno[ii]); /* 주민번호            (C) */
    COPYVAR(stj.sex[kk],   stp->sex[ii]);          /* 성별                (C) */
    stj.joinAge[kk] =   stp->joinAge[ii];                        /* 가입연령 */
    COPYVAR(stj.custRoleCode[kk],   stp->custRoleCode[ii]); /* 고객역할코드        (C) */
    /* jcs */
    COPYVAR(stj.minsRelnCode[kk],   stp->minsRelnCode[ii]); /* 주피와의 관계코드   (C) */
    COPYVAR(stj.occpCode[kk],   stp->occpCode[ii]); /* 직종코드            (C) */
    COPYVAR(stj.riskGradCode[kk],   stp->riskGradCode[ii]); /* 위험등급코드        (C) */
    COPYVAR(stj.mediKindCode[kk],   stp->mediKindCode[ii]); /* 진단코드            (C) */
    COPYVAR(stj.hndrDvsnCode[kk],   stp->hndrDvsnCode[ii]); /* 장애인구분코드      (C) */
    COPYVAR(stj.frnrDvsnCode[kk],   stp->frnrDvsnCode[ii]); /* 외국인구분코드      (C) */
    COPYVAR(stj.drveCatpCode[kk],   stp->drveCatpCode[ii]); /* 운전차종코드        (C) */

    /* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁            */
    COPYVAR(stj.injrOccpCode[kk],   stp->injrOccpCode[ii]); /* 상해직종코드        (C) */
    COPYVAR(stj.injrRiskGrcd[kk],   stp->injrRiskGrcd[ii]); /* 상해위험등급코드    (C) */
  }

  /*수익자 사항 ------------------------------------------------------------*/
  for (ii = 0; ii < stp->bnfCnt - stp->dedCnt; ii++) {
    if (strncmp((char *) stp->bnfccustRoleCode[ii].arr, "3",  1) == 0) {
      /*--만기퇴직수익자--*/
      COPYVAR(stj.endCustId,   stp->bnfccustId[ii]); /* 만기퇴직고객ID      (C) */
      COPYVAR(stj.endRetnRsdnNo,   stp->bnfccustRrno[ii]); /* 만기퇴직주민번호    (C) */
      COPYVAR(stj.ctorReln,   stp->ctorEdbnReln);  /* 만기퇴직계약자관계  (C) */
      COPYVAR(stj.endInsuReln,   stp->bnfcminsRelnCode[ii]); /* 만기퇴직주피보자관계(C) */
    } else if (strncmp((char *) stp->bnfccustRoleCode[ii].arr, "4",  1) == 0) {
      /*--입원장해수익자--*/
      COPYVAR(stj.accCustId,   stp->bnfccustId[ii]); /* 입원장해고객ID      (C) */
      COPYVAR(stj.acciHospRsdnNo,   stp->bnfccustRrno[ii]); /* 입원장해주민번호    (C) */
      COPYVAR(stj.acciInsuReln,   stp->bnfcminsRelnCode[ii]); /* 입원장해주피보자관계(C) */
    } else if (strncmp((char *) stp->bnfccustRoleCode[ii].arr, "51", 2) == 0) {
      /*--사망수익자   --*/
      COPYVAR(stj.minCustId,   stp->bnfccustId[ii]);   /* 사망고객ID      (C) */
      COPYVAR(stj.minsDeadRsdnNo,   stp->bnfccustRrno[ii]); /* 사망주민번호    (C) */
      COPYVAR(stj.minsInsuReln,   stp->bnfcminsRelnCode[ii]); /* 사망주피보자관계(C) */
      if (strcmp((char *) stp->bnfccustId[ii].arr,
          (char *) stp->conbObjtCtid    .arr) == 0) {
        COPY(stj.minsconbYn,     "Y");                 /* 사망기부보험여부(C) */
        stj.conbRato = stp->recvRato[ii];                /* 기부비율      (C) */
      }
    }
  }
  stj.minsCnt         =   stp->dedCnt;                   /* 사망복수자수  (C) */

  /*청약 사항 --------------------------------------------------------------*/
  /*--기본사항--*/
  if (freePlanDvsn == 0) {
    COPYVAR(stj.paymCyclCode,   stp->paymCyclCode); /* 납입주기코드        (C) */
  } else {
    COPYVAR(stj.paymCyclCode2,   stp->paymCyclCode); /* 납입주기코드        (C) */
    COPYVAR(stj.paymCyclCode,   stp->frppaymCyclCode); /* 납입주기코드        (C) */
  }
  COPYVAR(stj.premApcnDvsn,   stp->premApcnDvsn);  /* 보험료적용구분      (C) */
  COPYVAR(stj.polyTrnmRtdv,   stp->polyTrnmRtdv);  /* 증권전달경로구분    (C) */
  COPYVAR(stj.ftprRecvMdcd,   stp->ftprRecvMdcd);  /* 초회보험료입금방법  (C) */
  COPYVAR(stj.collMetdCode,   stp->collMetdCode); /* (2회이후)수금방법코드(C) */
  COPYVAR(stj.addrKdcd,   stp->addrKdcd);          /* 수금지주소종류      (C) */

  COPYVAR(stj.fstFinaOrgnCode   , stp->finaOrgnCode[0]); /* 초회금융기관코드(추가)    */
  COPYVAR(stj.fstAcctCardNo,   stp->acctCardNo[0]); /* 초회납입계좌(카드번호)(C) */
  COPYVAR(stj.fstAcctCardCustId,   stp->crwcustId[0]); /* 초회납입고객(카드고객)(C) */
  COPYVAR(stj.fstAcctRsdnNo,   stp->cardOwnrRrno[0]); /* 초회납입고객주민번호  (C) */

  COPYVAR(stj.sncFinaOrgnCode   , stp->finaOrgnCode[1]); /* 2회후금융기관코드(추가)    */
  COPYVAR(stj.sncAcctCardNo,   stp->acctCardNo[1]); /* 2회후납입계좌(카드번호)(C) */
  COPYVAR(stj.sncAcctCardCustId,   stp->crwcustId[1]); /* 2회후납입고객(카드고객)(C) */
  COPYVAR(stj.sncAcctRsdnNo,   stp->cardOwnrRrno[1]); /* 2회회납입고객주민번호(C) */
  COPYVAR(stj.cnttRcwcUsdvYn[0],   stp->cnttRcwcUsdv[0]); /* 계좌용도선택여부    (C) */
  COPYVAR(stj.cnttRcwcUsdvYn[1],   stp->cnttRcwcUsdv[1]); /* 계좌용도선택여부    (C) */
  COPYVAR(stj.cnttRcwcUsdvYn[2],   stp->cnttRcwcUsdv[2]); /* 계좌용도선택여부    (C) */
  COPYVAR(stj.taxSelYn,   stp->taxPrctYn);         /* 세금우대선택여부    (C) */
  COPYVAR(stj.taxPrmnKind,   stp->taxPrmnKind);    /* 세금우대주체종류    (C) */
  if (freePlanDvsn == 0) {
    stj.ppayCnt             =   stp->ppayRetrCnt[0]; /* 선납횟수            (C) */
    stj.retrCnt             =   stp->ppayRetrCnt[1]; /* 소급횟수            (C) */
  } else {
    stj.ppayCnt             =   0;                 /* 선납횟수            (C) */
    stj.retrCnt             =   0;                 /* 소급횟수            (C) */
  }
  COPYVAR(stj.sintStagIqcd,   stp->sintStagIqcd);  /* 제2보기개시연령조회코드 */
  COPYVAR(stj.tintStagIqcd,   stp->tintStagIqcd);  /* 제3보기개시연령조회코드 */

  /*--입력 계약사항--*/
  if (freePlanDvsn == 0) {
    for (ii = 0; ii < stp->cjgCnt; ii++) {
      COPYVAR(stj.goodRelnCode[ii],  stp->cjggoodRelnCode[ii]); /* 상품관계코드        (C) */
      COPYVAR(stj.goodCodeDtal[ii],  stp->cjggoodCodeDtal[ii]); /* 상품코드_세         (C) */
      COPYVAR(stj.goodCodeItem[ii],  stp->cjggoodCodeItem[ii]); /* 상품코드_목         (C) */
      COPYVAR(stj.goodCodeName[ii],  stp->cjggoodCodeName[ii]); /* 상품업무명          (C) */
      stj.goodInsrAmt[ii] =  stp->cjginsrAmt[ii];  /* 보험금              (C) */
      stj.goodPrem[ii] =  stp->cjgorigPrem[ii];    /* 원보험료            (C) */
      stj.goodRepay[ii] =  stp->cjgRepay[ii];      /* 환급율              (C) */
      COPYVAR(stj.goodPaymTermCode[ii],  stp->cjgpytrInqrCode[ii]); /* 납입기간조회코드    (C) */
      COPYVAR(stj.goodInsrTermCode[ii],  stp->cjgintrInqrCode[ii]); /* 보험기간조회코드    (C) */
    }
    stj.sumPrem              =  stp->sumPrem - stp->frpsumPrem; /* 합계보험료     (C) */
    stj.sumOrigPrem          =  stp->sumOrigPrem;             /* 합계원보험료 */
    stj.frplInsrAmt          =  stp->fjginsrAmt[0]; /* 자유설계가입금액    (C) */
    stj.frplInsrPrem         =  stp->fjgorigPrem[0]; /* 자유설계주보험료    (C) */
    stj.frplInsrPremSum      =  stp->frpsumPrem;   /* 자유설계합계보험료  (C) */
    stj.addPaymPrem          =  stp->addPaymPrem;           /* 추가납입보험료 */
  } else {
    for (ii = 0; ii < stp->fjgCnt; ii++) {
      COPYVAR(stj.goodRelnCode[ii],  stp->fjggoodRelnCode[ii]); /* 상품관계코드        (C) */
      COPYVAR(stj.goodCodeDtal[ii],  stp->fjggoodCodeDtal[ii]); /* 상품코드_세         (C) */
      COPYVAR(stj.goodCodeItem[ii],  stp->fjggoodCodeItem[ii]); /* 상품코드_목         (C) */
      COPYVAR(stj.goodCodeName[ii],  stp->fjggoodCodeName[ii]); /* 상품업무명          (C) */
      stj.goodInsrAmt[ii] =  stp->fjginsrAmt[ii];  /* 보험금              (C) */
      stj.goodPrem[ii] =  stp->fjgorigPrem[ii];    /* 원보험료            (C) */
      COPYVAR(stj.goodPaymTermCode[ii],  stp->fjgpytrInqrCode[ii]); /* 납입기간조회코드    (C) */
      COPYVAR(stj.goodInsrTermCode[ii],  stp->fjgintrInqrCode[ii]); /* 보험기간조회코드    (C) */
    }
    stj.sumPrem              =  stp->frpsumPrem;       /* 합계보험료          (C) */
    stj.sumOrigPrem          =  stp->frpsumOrigPrem;   /* 합계원보험료 */

    stj.frplInsrAmt          =  stp->fjginsrAmt[0]; /* 자유설계가입금액    (C) */
    stj.frplInsrPrem         =  stp->fjgorigPrem[0]; /* 자유설계주보험료    (C) */
    stj.frplInsrPremSum      =  stp->frpsumPrem;   /* 자유설계합계보험료  (C) */
    stj.addPaymPrem          =  stp->frpaddPaymPrem;        /* 추가납입보험료 */
  }

  /*추가사항 ---------------------------------------------------------------*/
  /*--사망시 다수 수익자--*/
  for (ii = (int) (stp->bnfCnt - stp->dedCnt); ii < stp->bnfCnt; ii++) {
    COPYVAR(stj.bnfcMinsDeadRsdnNo[ii], stp->bnfccustRrno[ii]); /* 수익자주민등록번호  (C) */
    COPYVAR(stj.bnfcMinsReln[ii], stp->bnfcminsRelnCode[ii]); /* 주피보험자관계      (C) */
    if (strcmp((char *) stp->bnfccustId[ii].arr,
        (char *) stp->conbObjtCtid    .arr) == 0) {
      COPY(stj.bnfcconbYn[ii],     "Y");               /* 사망기부보험여부(C) */
      stj.conbRato = stp->recvRato[ii];                /* 기부비율        (C) */
    }
  }

  /*데이터 건수-------------------------------------------------------------*/
  stj.insCustCnt          =   stp->crmCnt;         /* 계약관계자수        (C) */
  if (freePlanDvsn == 0) {
    stj.goodCnt             =   stp->cjgCnt;       /* 상품가입갯수        (C) */
  } else {
    stj.goodCnt             =   stp->fjgCnt;       /* 상품가입갯수        (C) */
  }
  COPYVAR(stj.arivDate,   stp->arivDate);                         /* 도착일자 */
  COPYVAR(stj.clltRoutDvsn,   stp->clltRoutDvsn);             /* 모집경로구분 */
  stj.mnthIncmAmt     =   stp->mnthIncmAmt;                     /* 월소득금액 */
  COPYVAR(stj.recpDate,   stp->crntDate);                         /* 접수일자 */

  for (ii = 0; ii < stp->cniCnt; ii++) {
    COPYVAR(stj.notcYn[ii],   stp->notcYn[ii]);                   /* 고지유무 */
    stj.wekyDrnkCnt[ii]    =   stp->wekyDrnkCnt[ii];          /* 주당음주횟수 */
    COPYVAR(stj.drnkKdcd[ii],   stp->drnkKdcd[ii]);           /* 음주종류코드 */
    stj.t01DrnkQnty[ii]    =   stp->t01DrnkQnty[ii];             /* 1회음주량 */
    stj.dalySmokQnty[ii]    =   stp->dalySmokQnty[ii];          /* 일당흡연량 */
    stj.smokTerm[ii]    =   stp->smokTerm[ii];                    /* 흡연기간 */
    stj.otcmInsrJnct[ii]    =   stp->otcmInsrJnct[ii];    /* 타사보험가입건수 */
    stj.otcmInsrJnpm[ii]    =   stp->otcmInsrJnpm[ii];  /* 타사보험가입보험료 */
    COPYVAR(stj.ovseRkarDpyn[ii],   stp->ovseRkarDpyn[ii]); /* 해외위험지역출국여부 */
    COPYVAR(stj.hndlBsnsName[ii],   stp->hndlBsnsName[ii]);     /* 취급업무명 */
    COPYVAR(stj.wkplDeptRknm[ii],   stp->wkplDeptRknm[ii]); /* 직장/부서/직위명 */
    COPYVAR(stj.sdjbName[ii],   stp->sdjbName[ii]);                 /* 부업명 */
    stj.hght[ii]    =   stp->hght[ii];                                /* 신장 */
    stj.wght[ii]    =   stp->wght[ii];                              /* 몸무게 */
  }
  COPYVAR(stj.fundCode,   stp->vlnsYn);     /* 변액여부를 펀드코드로 판단전환 */

  /* 펀드가입정보 */
  (       stj.fndCnt       = stp->fndCnt      ); /* 가입펀드갯수        (C) */

  for (ii = 0; ii < stp->fndCnt; ii++) {
    COPYVAR(stj.joinFundCode[ii] , stp->joinFundCode[ii] ); /* 펀드코드 */
    (       stj.joinRato    [ii] = stp->joinRato    [ii] ); /* 펀드비율 */
  }

  stj.acatGurtTerm        =   stp->acatGurtTerm;   /* 적립금보증기간      (C) */

  /* 프레지던트 연금 고액할인 적용 */
  stj.connMcntPrem = stp->connMcntPrem;
  uvDebug("프레지던트 연금 고액할인 적용=>[%f] ", stj.connMcntPrem     );

  char  ipAddress [15+1];
  char  serverDvsn[ 1+1];

  if (strcmp ((char *) stp->clltLpPrno.arr,"88808061" ) == 0) {

    memset(ipAddress  , 0x00 ,sizeof(ipAddress ));
    memset(serverDvsn , 0x00 ,sizeof(serverDvsn));

    /* serverDvsn - R(운영),Q(QA),D(DEV),E(ERROR) */
    if(hostNameToServer (ipAddress, serverDvsn)==FAIL) {
      uvDebug("hostNameToServer 함수 호출 에러");
    }

    if (strncmp(serverDvsn, "K", 1) == 0) {
      COPY   (stj.eaSysCode , "OSDEV"); /* 호출경로구분 */
    } else if (strncmp(serverDvsn, "Q", 1) == 0) {
      COPY   (stj.eaSysCode , "OSQA"); /* 호출경로구분 */
    } else if (strncmp(serverDvsn, "R", 1) == 0) {
      COPY   (stj.eaSysCode , "ONSURE"); /* 호출경로구분 */
    }
  } else if (strncmp((char *) stp->clltRoutDvsn.arr, "11", 2) == 0) {
    COPY   (stj.eaSysCode , "11"); /* 호출경로구분 */
  }

  uvDebug("호출경로구분(eaSysCode)     =>[%s] ",(char *) stj.eaSysCode.arr);

  COPYVAR(stj.dntnSpctSlctYn,  stp->dntnSpctSlctYn); /* 기부특약선택여부 */

  CMNC_judgMainChck_CC(&stj, &err);

  for (ii = 0; ii < err.errNo + 1; ii++) {
    if ((err.errKind[ii] == 2) || (err.errKind[ii] == 3)) {
      EXEC SQL ROLLBACK;
      uvDebug("err.errCode[ii]    =   [%d]", err.errCode[ii]);
      uvDebug("err.errMsg [ii]    =   [%s]", err.errMsg[ii]);
      appReturnCode = (int) err.errCode[ii];
      SVC_CLOSE(APPERR, appReturnCode, 0, err.errMsg[ii], \
          "SVncapl300in1");
    }
  }

  if (freePlanDvsn == 0) {
    COPYVAR(stp->exprDate,   stj.exprDate[0]);                    /* 만기일자 */
    COPYVAR(stp->anntPaymStdt,   stj.anntPaymStdt);       /* 연금지급개시일자 */
    COPYVAR(stp->spquTpdvCode,   stj.spquTpdvCode);       /* 특성형태구분코드 */
    COPYVAR(stp->savgInsrYn,   stj.savgInsrYn);             /* 저축성보험여부 */
    COPYVAR(stp->ciInsrYn,   stj.ciInsrYn);         /* ci보험여부      조진학 */
    COPYVAR(stp->premXtrcYn,   stj.premXtrcYn);   /* 할증계약 여부   할증_cho */
    for (ii = 0; ii < stp->crmCnt; ii++) {
      COPYVAR(stp->extraPerson[ii], stj.extraPerson[ii]); /* 할증체   여부   할증_cho */

      if (strncmp((char *) stp->custRoleCode[ii].arr, "11", 2) == 0) {
        kk  =   0;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "21", 2) == 0) {
        kk  =   1;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "22", 2) == 0) {
        kk  =   2;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "23", 2) == 0) {
        kk  =   3;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "24", 2) == 0) {
        kk  =   4;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "13", 2) == 0) {
        kk  =   5;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "25", 2) == 0) {
        kk  =   6;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "26", 2) == 0) {
        kk  =   7;
      } else if (strncmp((char *) stp->custRoleCode[ii].arr, "28", 2) == 0) {
        kk  =   7;
      }

      COPYVAR(stp->sex                [ii] , stj.sex                [kk]); /* 성별 */
      (       stp->joinAge            [ii] = stj.joinAge            [kk]); /* 가입연령 */
      (       stp->lfepYear           [ii] = stj.lfepYear           [kk]); /* 기대여명 */
      (       stp->fullAge            [ii] = stj.fullAge            [kk]); /* 만연령   */

      /* 방카 무직코드 변경 */
      if (strncmp((char *) stp->saleChnlCode.arr, "5", 1) == 0) {
        COPYVAR(stp->occpCode    [ii] , stj.occpCode    [kk]); /* 직종코드         */
        COPYVAR(stp->riskGradCode[ii] , stj.riskGradCode[kk]); /* 위험등급코드     */
        COPYVAR(stp->injrOccpCode[ii] , stj.injrOccpCode[kk]); /* 상해직종코드     */
        COPYVAR(stp->injrRiskGrcd[ii] , stj.injrRiskGrcd[kk]); /* 상해위험등급코드 */
      }

      COPYVAR(stp->pmmiJoinYn[ii]  , stj.pmmiJoinYn[kk]);     /* 실손가입여부 */
      COPYVAR(stp->pmmiDoubJnyn[ii], stj.pmmiDoubJnyn[kk]);   /* 실손중복여부 */
      uvDebug("stp->pmmiJoinYn [%d][%s] = [%s]", ii,
          (char *) stp->custRoleCode[ii].arr,
          (char *) stp->pmmiJoinYn[ii].arr);
      uvDebug("stp->pmmiDoubJnyn [%d][%s] = [%s]", ii,
          (char *) stp->custRoleCode[ii].arr,
          (char *) stp->pmmiDoubJnyn[ii].arr);

      if ((strncmp((char *) stp->pmmiJoinYn[ii].arr, "Y", 1) == 0)  \
            &&  (strncmp((char *) stp->pmmiDoubJnyn[ii].arr, "Y", 1) == 0)) {
        PUTSTR(NC_STR_209, 0, "Y");                      /* 실손관련 팝업여부 */
        uvDebug("타사실손중복 관련 보완처리 알림");
      }
    }
    COPYVAR(stp->acdtInsrYn,   stj.acdtInsrYn);               /* 상해보험여부 */
    stp->t01Cvmf        =   stj.cnvsMfrt[0];                 /* 1회차환산월초 */
    stp->t04Cvmf        =   stj.cnvsMfrt[1];                 /* 4회차환산월초 */
    stp->t07Cvmf        =   stj.cnvsMfrt[2];                 /* 7회차환산월초 */
    stp->t13Cvmf        =   stj.cnvsMfrt[3];                /* 13회차환산월초 */
    stp->t25Cvmf        =   stj.cnvsMfrt[4];                /* 25회차환산월초 */
    stp->lupyCvmf       =   stj.cnvsMfrt[5];                /* 일시납환산월초 */
    stp->stddCamt       =   stj.stddAmt;                        /* 기준계약고 */
    stp->taxPrpsAmt     =   stj.taxPrpsAmt;         /* 주체별세금우대가능금액 */
    stp->taxPrjnAmt     =   stj.taxPrjnAmt;         /* 연합회세금우대등록금액 */

    /* 만기일자                 */
    /* 보험금이 바뀌는 경우 접수 불가 */
    if (stp->cjginsrAmt[0] !=  stj.goodInsrAmt[0]) {

      /* CI추가보장 합계보험료 입력방식 보험금 상이로 예외처리 */
      memset(selfYn, 0x00, sizeof(selfYn));

      retCode = uvRuleBase("NC_selfPoly_Yn", "", (char *) stp->polyNo.arr, selfYn);

      uvDebug("stp->polyNo.arr = [%s]", (char *) stp->polyNo.arr);
      uvDebug("selfYn          = [%s]", selfYn);

      if (retCode != 0) {
        EXEC SQL ROLLBACK;
        uvDebug("(NC_selfPoly_Yn) 룰호출 오류[%d]", retCode);
        SVC_CLOSE(APPERR, 4899, 0, "(NC_selfPoly_Yn) 룰호출 오류", fnName);
      }

      if (strcmp(selfYn, "Y") != 0) {
        EXEC SQL ROLLBACK;

        uvDebug("====================================");
        uvDebug("stp->cjginsrAmt[0]= [%16.16f]:stj.goodInsrAmt[0]= [%16.16f]",stp->cjginsrAmt[0],stj.goodInsrAmt[0]);
        uvDebug("stp->cjgprem[0]   = [%16.16f]:stj.goodPrem[0]   = [%16.16f]",stp->cjgprem   [0],stj.goodPrem   [0]);
        uvDebug("stp->sumPrem      = [%16.16f]:stj.sumPrem       = [%16.16f]",stp->sumPrem      ,stj.sumPrem       );
        uvDebug("stp->fstiRrcvPrem = [%16.16f]:stj.fstiRrcvPrem  = [%16.16f]",stp->fstiRrcvPrem ,stj.fstiRrcvPrem  );
        uvDebug("====================================");
        uvDebug("청약서발행시와 보험금 상이 접수불가.");

        appReturnCode = 4899;
        SVC_CLOSE(APPERR, appReturnCode, 0, \
            "청약서발행시와 보험금이 틀립니다(직종변경확인)", "SVncapl300in1");
      }
    }

    for (ii = 0; ii < stp->cjgCnt; ii++) {
      COPYVAR(stp->cjggoodCodeDtal[ii],  stj.goodCodeDtal[ii]); /* 상품코드_세 */
      COPYVAR(stp->cjggoodCodeItem[ii],  stj.goodCodeItem[ii]); /* 상품코드_목 */
      COPYVAR(stp->cjggoodRelnCode[ii],  stj.goodRelnCode[ii]); /* 상품관계코드 */
      stp->cjgpaymTerm[ii] =  stj.paymTerm[ii];                   /* 납입기간 */
      stp->cjgrealPaymTerm[ii] =  stj.realPaymTerm[ii];         /* 실납입기간 */
      COPYVAR(stp->cjgpaymTermDvsn[ii],  stj.paymTermDvsn[ii]); /* 납입기간구분 */
      stp->cjginsrTerm[ii] =  stj.insrTerm[ii];                   /* 보험기간 */
      stp->cjgrealInsrTerm[ii] =  stj.realInsrTerm[ii];         /* 실보험기간 */
      COPYVAR(stp->cjginsrTermDvsn[ii],  stj.insrTermDvsn[ii]); /* 보험기간구분 */
      COPYVAR(stp->cjgexprDate[ii],  stj.exprDate[ii]);           /* 만기일자 */
      stp->cjginsrAmt[ii] =  stj.goodInsrAmt[ii];                   /* 보험금 */
      stp->cjgorigPrem[ii] =  stj.goodOrigPrem[ii];               /* 원보험료 */
      stp->cjgprem[ii] =  stj.goodPrem[ii];                         /* 보험료 */
      /* 가입상품추가           */
      COPYVAR(stp->cjggoodCodeName[ii],  stj.goodCodeName[ii]); /* 상품코드_명 */
      COPYVAR(stp->cjgpytrInqrCode[ii],  stj.goodPaymTermCode[ii]); /* 납입기간조회코드 */
      COPYVAR(stp->cjgintrInqrCode[ii],  stj.goodInsrTermCode[ii]); /* 보험기간조회코드 */

      memset(spclTypeDvcd, 0x00, sizeof(spclTypeDvcd)); /* 특이유형구분코드 */
      memset(spclTypeDtdv, 0x00, sizeof(spclTypeDtdv)); /* 특이유형상세구분 */
      memset(spclTypeSmry, 0x00, sizeof(spclTypeSmry)); /* 특이유형적요 */
      memset(spclTypeYn  , 0x00, sizeof(spclTypeYn  )); /* 특이유형적요 */
      memset(&err,    0x00,   sizeof(ST_ERRCONTENT));

      strcpy(spclTypeDvcd,"SPT_103");

      /* 상품 특이유형 조회 모듈 호출 */
      if (NC_goodsSpecTypeSrch((char *) stp->cjggoodCodeDtal[ii].arr
                              ,(char *) stp->cjggoodCodeItem[ii].arr
                              ,spclTypeDvcd
                              ,(char *) stp->cnttDate.arr
                              ,spclTypeDtdv
                              ,spclTypeSmry
                              ,spclTypeYn
                              ,&err) == FAIL) {
        EXEC SQL ROLLBACK;
        uvDebug("가입상품 특이유형 조회 오류");
        appReturnCode = 4899;
        SVC_CLOSE(APPERR, appReturnCode, 0, \
            "가입상품 특이유형 조회 오류", "SVncapl100in");
      }

      if(strcmp(spclTypeDtdv, "X2") == 0 || strcmp(spclTypeDtdv, "X5") == 0 || strcmp(spclTypeDtdv, "X6") == 0) {
        tRsjnSumPrem += stp->cjgprem[ii];         /* 합계보험료 */

        uvDebug("tRsjnSumPrem[%d] = [%.0f]", ii, tRsjnSumPrem);
      }
    }
    /* 예약가입상품일 경우 합계보험료에서 뺀 후에 비교함 */
    if ((stp->cjginsrAmt[0] !=  stj.goodInsrAmt[0]) ||
        (stp->cjgprem[0]    !=  stj.goodPrem[0])    ||
        (stp->sumPrem       !=  stj.sumPrem - tRsjnSumPrem)        ||
        (stp->fstiRrcvPrem  !=  stj.fstiRrcvPrem)) {

      /* 셀프플랜 수술보장특약 사용항목 착오반영에 따른 한시적 예외처리 */
      memset(selfYn, 0x00, sizeof(selfYn));

      retCode = uvRuleBase("NC_selfPoly_Yn", "", (char *) stp->polyNo.arr, selfYn);

      uvDebug("stp->polyNo.arr = [%s]", (char *) stp->polyNo.arr);
      uvDebug("selfYn          = [%s]", selfYn);

      if (retCode != 0) {
        EXEC SQL ROLLBACK;
        uvDebug("(NC_selfPoly_Yn) 룰호출 오류[%d]", retCode);
        SVC_CLOSE(APPERR, 4899, 0, "(NC_selfPoly_Yn) 룰호출 오류", fnName);
      }

      if (strcmp(selfYn, "Y") != 0) {
        EXEC SQL ROLLBACK;

        uvDebug("====================================");
        uvDebug("stp->cjginsrAmt[0]= [%f] : stj.goodInsrAmt[0]= [%f]", stp->cjginsrAmt[0], stj.goodInsrAmt[0]);
        uvDebug("stp->cjgprem[0]   = [%f] : stj.goodPrem[0]   = [%f]", stp->cjgprem   [0], stj.goodPrem   [0]);
        uvDebug("stp->sumPrem      = [%f] : stj.sumPrem       = [%f]", stp->sumPrem      , stj.sumPrem       );
        uvDebug("stp->fstiRrcvPrem = [%f] : stj.fstiRrcvPrem  = [%f]", stp->fstiRrcvPrem , stj.fstiRrcvPrem  );
        uvDebug("====================================");
        uvDebug("청약서발행시와 보험료 상이 접수불가.");

        if (strcmp(selfYn, "P") == 0) {
          appReturnCode = 7857;
          SVC_CLOSE(APPERR, appReturnCode, 0, \
              "발행된 청약서가 고액할인이 적용되지 않았습니다. 청약서를 재발행 하시기 바랍니다.", "SVncapl300in1");
        } else {
          appReturnCode = 4535;
          SVC_CLOSE(APPERR, appReturnCode, 0, \
              "청약서발행시와 보험료 상이 접수불가.", "SVncapl300in1");
        }
      }
    }
  } else {
    stp->frpstddCamt            =   stj.stddAmt;                /* 기준계약고 */
    stp->frptaxPrpsAmt          =   stj.taxPrpsAmt; /* 주체별세금우대가능금액 */
    stp->frptaxPrjnAmt          =   stj.taxPrjnAmt; /* 연합회세금우대등록금액 */
    for (ii = 0; ii < stp->fjgCnt; ii++) {
      COPYVAR(stp->fjggoodCodeDtal[ii],  stj.goodCodeDtal[ii]); /* 상품코드_세 */
      COPYVAR(stp->fjggoodCodeItem[ii],  stj.goodCodeItem[ii]); /* 상품코드_목 */
      COPYVAR(stp->fjggoodRelnCode[ii],  stj.goodRelnCode[ii]); /* 상품관계코드 */
      stp->fjgpaymTerm[ii] =  stj.paymTerm[ii];                   /* 납입기간 */
      stp->fjgrealPaymTerm[ii] =  stj.realPaymTerm[ii];         /* 실납입기간 */
      COPYVAR(stp->fjgpaymTermDvsn[ii],  stj.paymTermDvsn[ii]); /* 납입기간구분 */
      stp->fjginsrTerm[ii] =  stj.insrTerm[ii];                   /* 보험기간 */
      stp->fjgrealInsrTerm[ii] =  stj.realInsrTerm[ii];         /* 실보험기간 */
      COPYVAR(stp->fjginsrTermDvsn[ii],  stj.insrTermDvsn[ii]); /* 보험기간구분 */
      COPYVAR(stp->fjgexprDate[ii],  stj.exprDate[ii]);           /* 만기일자 */
      stp->fjginsrAmt[ii] =  stj.goodInsrAmt[ii];                   /* 보험금 */
      stp->fjgorigPrem[ii] =  stj.goodOrigPrem[ii];               /* 원보험료 */
      stp->fjgprem[ii] =  stj.goodPrem[ii];                         /* 보험료 */
      /* 가입상품추가         */
      COPYVAR(stp->fjggoodCodeName[ii],  stj.goodCodeName[ii]); /* 상품코드_명 */
      COPYVAR(stp->fjgpytrInqrCode[ii],  stj.goodPaymTermCode[ii]); /* 납입기간조회코드 */
      COPYVAR(stp->fjgintrInqrCode[ii],  stj.goodInsrTermCode[ii]); /* 보험기간조회코드 */
    }

    stp->ft01Cvmf        =   stj.cnvsMfrt[0];                /* 1회차환산월초 */
    stp->ft04Cvmf        =   stj.cnvsMfrt[1];                /* 4회차환산월초 */
    stp->ft07Cvmf        =   stj.cnvsMfrt[2];                /* 7회차환산월초 */
    stp->ft13Cvmf        =   stj.cnvsMfrt[3];               /* 13회차환산월초 */
    stp->ft25Cvmf        =   stj.cnvsMfrt[4];               /* 25회차환산월초 */
    stp->flupyCvmf       =   stj.cnvsMfrt[5];                /* 일시납환산월초 */

    uvDebug("stp->fjginsrAmt[0]   =[%f]",  stp->fjginsrAmt[0]);
    uvDebug("stp->goodInsrAmt[0]  =[%f]",  stj.goodInsrAmt[0]);
    uvDebug("stp->fjgprem    [0]  =[%f]",  stp->fjgprem[0]);
    uvDebug("stj.goodPrem[0]      =[%f]",  stj.goodPrem[0]);
    uvDebug("stp->frpfstiRrcvPrem =[%f]",  stp->frpfstiRrcvPrem);
    uvDebug("stj.fstiRrcvPrem     =[%f]",  stj.fstiRrcvPrem);

    if ((stp->fjginsrAmt[0]     !=  stj.goodInsrAmt[0])  \
        ||  (stp->fjgprem[0]     !=  stj.goodPrem[0])  \
        ||  (stp->frpfstiRrcvPrem   !=  stj.fstiRrcvPrem)) {
      EXEC SQL ROLLBACK;
      uvDebug("청약서발행시와 보험료 상이 접수불가2.");
      appReturnCode = 4535;
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "청약서발행시와 보험료 상이 접수불가.", "SVncapl300in1");
    }
  }

  stp->anntLfepYear = stj.anntLfepYear;                 /* 연금개시기대여명 */
  uvDebug("연금개시기대여명         = [%f]", stp->anntLfepYear);

  COPYVAR(stp->clltLpCtid,  stj.clltLpCtid); /* 모집FP의 고객ID 저장 */

  /*  계약관계자의 연령이 발행시와 접수시 동일한지 비교                     */
  /*  청약서입력시보험연령과 발행시 보험연령을 비교 2003년 07월 01일        */
  /*    for (ii=0;ii<stp->crmCnt;ii++)
      {
          if  (stp->joinAge[ii] != stj.joinAge[ii])
          {
              if  (ii == 0)
              {
                  COPY(insName, "계약자");
              }
              else
              if  (ii == 1)
              {
                  COPY(insName, "주피");
              }
              else
              if  (ii == 2)
              {
                  COPY(insName, "종피");
              }
              else
              if  (ii == 3)
              {
                  COPY(insName, "자녀1");
              }
              else
              if  (ii == 4)
              {
                  COPY(insName, "자녀2");
              }
              else
              if  (ii == 5)
              {
                  COPY(insName, "단체");
              }
              else
              if  (ii == 6)
              {
                  COPY(insName, "피부양자");
              }

              uvDebug("%s %s", (char *)insName.arr, "발행시 보험연령과 접수시 보험연령이 상이합니다");
              appReturnCode = 5697;
              SVC_CLOSE(APPERR, appReturnCode, 0, (char *)insName.arr, "SVncapl300in1");
          }
      }
  */
  uvDebug("SVncapl300in1_CMNC_judgMainChck End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_recp_auto()
  Note          : 영수증 번호 채번
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_recp_auto(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl374vw01_sp_out dcncApl374vw01SpOut[1];
  struct _dcnc_apl374vw01_sp_in  dcncApl374vw01SpIn;

  struct _dcnc_apl314in04_sp_out dcncApl314in04SpOut;
  struct _dcnc_apl314in04_sp_in  dcncApl314in04SpIn;

  struct _dcnc_apl374in02_sp_in  dcncApl374in02SpIn;

  struct _dcnc_apl300in27_sp_in  dcncApl300in27SpIn;

  uvDebug("SVncapl300in1_recp_auto Start");

  /*--------------------------*/
  /* 영수증선발행 여부 조회   */
  /*--------------------------*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl374vw01SpInClear(&dcncApl374vw01SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl374vw01SpIn.bsnsDvsnCode,   "1");                 /* 업무구분 */
  COPYVAR(dcncApl374vw01SpIn.polyNo,   stp->polyNo);            /* 증권번호 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl374vw01SpOutClear(dcncApl374vw01SpOut,1);

  /* DBIO module 호출                                             */

  dcncApl374vw01Sp(&basicParam,&dcncApl374vw01SpIn,dcncApl374vw01SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL374VW01_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL374VW01_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if ((basicParam.rpSize == 0) && (strncmp((char *) stp->ftprRecvMdcd.arr, "82", 2) == 0)) { /* 방문, 선발행없슴 */
    /*--------------*/
    /* 영수증 채번  */
    /*--------------*/
    /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
    dcncApl314in04SpInClear(&dcncApl314in04SpIn);

    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPY(dcncApl314in04SpIn.inqrDvsn,   "1");
    COPYVAR(dcncApl314in04SpIn.admnNo,   stp->polyNo);
    COPYVAR(dcncApl314in04SpIn.cnttDate,   stp->cnttDate);

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(1,DBCURSOR_CLOSE);

    /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
    OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
    dcncApl314in04SpOutClear(&dcncApl314in04SpOut);

    /* DBIO module 호출                                             */

    dcncApl314in04Sp(&basicParam,&dcncApl314in04SpIn,&dcncApl314in04SpOut);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL314IN04_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DCNC_APL314IN04_SP) 호출 Error.",  \
          getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
    uvDebug("dcncApl314in04SpOut.recpNo =   [%s]",  (char *) dcncApl314in04SpOut.recpNo.arr);
    COPYVAR(stp->recpNo,    dcncApl314in04SpOut.recpNo);
    COPYVAR(stp->recpNoScrn,    dcncApl314in04SpOut.recpNo);

    EXEC SQL COMMIT;     /* 필요한 경우에만 COMMIT처리한다. */
  } else if ((basicParam.rpSize != 0) && (strncmp((char *) stp->ftprRecvMdcd.arr, "82", 2) != 0)) { /* 방문아님, 선발행 */
    /*--------------*/
    /* 영수증 폐기  */
    /*--------------*/
    /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
    dcncApl374in02SpInClear(&dcncApl374in02SpIn);

    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dcncApl374in02SpIn.recpNo,   dcncApl374vw01SpOut[0].recpNo); /* 영수증번호 */
    COPY(dcncApl374in02SpIn.recpWastRscd,   "02"); /* 영수증폐기사유코드(수방변경) */

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(1,DBCURSOR_CLOSE);

    /* DBIO module 호출                                             */

    dcncApl374in02Sp(&basicParam,&dcncApl374in02SpIn);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL374IN02_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DCNC_APL374IN02_SP) 호출 Error.",  \
          getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  } else if ((basicParam.rpSize != 0) && (strncmp((char *) stp->ftprRecvMdcd.arr, "82", 2) == 0)) { /* 방문, 선발행 */
    /* 영수증번호   */
    COPYVAR(stp->recpNo,    dcncApl374vw01SpOut[0].recpNo);
    /*---------------------------------------------*/
    /* 영수증 수정(영수증사용내역코드;발행=>입금)  */
    /*---------------------------------------------*/

    /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
    dcncApl300in27SpInClear(&dcncApl300in27SpIn);

    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPY(dcncApl300in27SpIn.recpUsitCode,   "03");      /* 영수증사용내역코드 */
    COPYVAR(dcncApl300in27SpIn.recpNo,   dcncApl374vw01SpOut[0].recpNo); /* 영수증번호 */

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(1,DBCURSOR_CLOSE);

    /* DBIO module 호출                                             */

    dcncApl300in27Sp(&basicParam,&dcncApl300in27SpIn);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL300IN27_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DCNC_APL300IN27_SP) 호출 Error.",  \
          getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  }
  uvDebug("SVncapl300in1_recp_auto End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_CMNC_cust_octm_med()
  Note          : 기계약합산, 가입한도 및 진단기준 발췌
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_cust_octm_med(struct stp_SVncapl300in1 *stp) {
  int     ii;
  int     jj;
  int     kk = 0;
  int     ret;
  double  medret      =   0;
  int     medi        =   0;                    /* 진단종류     occurce */
  int     assm        =   0;                    /* 기계약합산   occurce */
  int     lmta        =   0;                    /* 사정한도초과 occurce */
  int     good        =   0;                    /* 사정한도상품 occurce */
  int     lmtr        =   0;                    /* 대표개별초과 occurce */
  double  joinPossAmt =   0;                    /* 가입여력 */
  varchar lmitSplsYn[1+1];                      /* 한도초과여부 */
  double  dLmitAmt    =   0;
  double  dSumCalcAmt =   0;

  int     i_retCode;                                           /* return code */
  int     i_recordCnt;                                            /* 조회건수 */

  char    c_codeValue[100][16+1];                        /* 코드값_getUniCode */
  char    c_codeName [100][224+1];                                 /* 코드내용 */

  char    errMsg     [45+1];                                 /* 에러메세지 */

  /* char    exResultMsg[255+1]; */

  CMNC_custSumCalc_Inpt   csi;
  CMNC_custSumCalc_Outp   cso;
  CMNC_octmSumCalc_Inpt   oci;
  CMNC_octmSumCalc_Outp   oco;
  CMNC_mediStddXtrt       med;
  CMNC_finaUdwr_Inpt      fui;
  CMNC_finaUdwr_Outp      fuo;

  uvDebug("SVncapl300in1_CMNC_cust_octm_med    Start");

  INITVAR(lmitSplsYn);

  for (ii = 0; ii < stp->crmCnt; ii++) {
    if (strncmp((char *) stp->custRoleCode[ii].arr, "2", 1) != 0) {
      continue;
    }

    memset(&csi,    0x00,   sizeof(CMNC_custSumCalc_Inpt));
    memset(&cso,    0x00,   sizeof(CMNC_custSumCalc_Outp));
    memset(&oci,    0x00,   sizeof(CMNC_octmSumCalc_Inpt));
    memset(&oco,    0x00,   sizeof(CMNC_octmSumCalc_Outp));
    memset(&med,    0x00,   sizeof(CMNC_mediStddXtrt));
    memset(&fui,    0x00,   sizeof(CMNC_finaUdwr_Inpt));
    memset(&fuo,    0x00,   sizeof(CMNC_finaUdwr_Outp));

    /* 기계약합산        */
    COPYVAR(csi.custId,   stp->custId[ii]);             /* 고객ID   mandatory */
    if (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0) {
      COPYVAR(csi.cnttDate,   stp->realFtprRmtnDate);   /* 계약일자 mandatory */
    } else {
      COPYVAR(csi.cnttDate,   stp->cnttDate);           /* 계약일자 mandatory */
    }
    COPYVAR(csi.polyNo,   stp->polyNo);                           /* 증권번호 */
    COPYVAR(csi.custRoleCode,   stp->custRoleCode[ii]);           /* 고객역할 */
    /* COPYVAR(csi.mediKindCode    ,   stp->mediKindCode[ii]);             /* 진단종류코드      */

    /* 진단발췌사유코드가 F 는 6개월내 진단건 있는 건 이므로 무진단 처리 */
    if (strncmp((char *) stp->mdobXtrtRscd[ii].arr,"F",1) == 0) {
      uvDebug("6개월내 진단건으로 인한 기계약합산 진단종류코드 무진단 변경");
      COPY(csi.mediKindCode,   "00");;                        /* 진단종류코드 */
    } else {
      uvDebug("6개월내 진단건 아님");
      COPYVAR(csi.mediKindCode,   stp->mediKindCode[ii]);     /* 진단종류코드 */
    }
    /* 0;월납            */
    csi.paymTerm[0] =   stp->paymTerm;                            /* 납입기간 */
    COPYVAR(csi.paymTermDvsn[0],   stp->paymTermDvsn);        /* 납입기간구분 */
    COPYVAR(csi.irkdCodeDtal[0],   stp->irkdCodeDtal);     /* 보험종류코드_세 */
    COPYVAR(csi.irkdCodeItem[0],   stp->irkdCodeItem);     /* 보험종류코드_목 */
    csi.sumOrigPrem[0] =   stp->sumOrigPrem;                  /* 합계원보험료 */

    for (jj = 0; jj < stp->cjgCnt; jj++) {
      VAR2STR(csi.goodCodeDtal[0][jj] , stp->cjggoodCodeDtal[jj]); /* 상품코드세 */
      VAR2STR(csi.goodCodeItem[0][jj] , stp->cjggoodCodeItem[jj]); /* 상품코드목 */
      VAR2STR(csi.goodCodeName[0][jj] , stp->cjggoodCodeName[jj]); /* 상품코드명 */
      VAR2STR(csi.goodRelnCode[0][jj] , stp->cjggoodRelnCode[jj]); /* 상품관계코드 */
      (       csi.insrAmt     [0][jj] = stp->cjginsrAmt     [jj]); /* 가입보험금 */
      (       csi.origPrem    [0][jj] = stp->cjgorigPrem    [jj]); /* 가입원보험료 */
      (       csi.lmitPyct    [0][jj] = stp->cjgLmitPyct    [jj]); /* 한정납회 */
      (       csi.realPaymTerm[0][jj] = stp->cjgrealPaymTerm[jj]); /* 실납입기간 */
      (       csi.realInsrTerm[0][jj] = stp->cjgrealInsrTerm[jj]); /* 실보험기간 */
    }

    /* 0;월납            */
    csi.paymTerm[1] =   stp->frppaymTerm;                         /* 납입기간 */
    COPYVAR(csi.paymTermDvsn[1],   stp->frppaymTermDvsn);     /* 납입기간구분 */
    COPYVAR(csi.irkdCodeDtal[1],   stp->frpirkdCodeDtal);  /* 보험종류코드_세 */
    COPYVAR(csi.irkdCodeItem[1],   stp->frpirkdCodeItem);  /* 보험종류코드_목 */
    csi.sumOrigPrem[1] =   stp->frpsumOrigPrem;               /* 합계원보험료 */

    for (jj = 0; jj < stp->fjgCnt; jj++) {                      /* 1:자유설계 */
      VAR2STR(csi.goodCodeDtal[1][jj] , stp->fjggoodCodeDtal[jj]); /* 상품코드세 */
      VAR2STR(csi.goodCodeItem[1][jj] , stp->fjggoodCodeItem[jj]); /* 상품코드목 */
      VAR2STR(csi.goodCodeName[1][jj] , stp->fjggoodCodeName[jj]); /* 상품코드명 */
      VAR2STR(csi.goodRelnCode[1][jj] , stp->fjggoodRelnCode[jj]); /* 상품관계코드 */
      (       csi.insrAmt     [1][jj] = stp->fjginsrAmt     [jj]); /* 가입보험금 */
      (       csi.origPrem    [1][jj] = stp->fjgorigPrem    [jj]); /* 가입원보험료 */
      (       csi.lmitPyct    [1][jj] = 1                       ); /* 한정납회 */
      (       csi.realPaymTerm[1][jj] = stp->fjgrealPaymTerm[jj]); /* 실납입기간 */
      (       csi.realInsrTerm[1][jj] = stp->fjgrealInsrTerm[jj]); /* 실보험기간 */
    }

    for (jj = 0; jj < stp->oldPolyCnt; jj++) {
      COPYVAR(csi.xcptPolyNo[jj], stp->oldPolyNo[jj]);
      uvDebug("csi->xcptPolyNo[%d][%s]", jj, csi.xcptPolyNo[jj].arr);
    }

    /* 태아가 주피(21) 이면 부모(28)의 고객ID 를 주고객ID 로 넘긴다 */
    if ((strncmp((char *) stp->custId[ii]      .arr, "8009999998", 10) == 0) &&
        (strncmp((char *) stp->custRoleCode[ii].arr, "21",  2) == 0)) {
      for (jj = 0; jj < stp->crmCnt; jj++) {
        if (strncmp((char *) stp->custRoleCode[jj].arr, "28", 2) == 0) { /* 부모 */
          COPYVAR(csi.ctrlCustRoleCode[0],stp->custId[jj]);
        }
      }
    }

    /* 태아가 자녀1(23) 이면 부모(21)의 고객ID 를 주고객ID 로 넘긴다 */
    if ((strncmp((char *) stp->custId[ii]      .arr, "8009999998", 10) == 0) &&
        (strncmp((char *) stp->custRoleCode[ii].arr, "23",  2) == 0)) {
      for (jj = 0; jj < stp->crmCnt; jj++) {
        if (strncmp((char *) stp->custRoleCode[jj].arr, "21", 2) == 0) { /* 주피 */
          COPYVAR(csi.ctrlCustRoleCode[0],stp->custId[jj]);
        }
      }
    }

    ret = CMNC_custSumCalc_CC(&csi, &cso);
    if (ret != SUCCESS) {
      EXEC SQL ROLLBACK;
      uvDebug("ret    =   [%d]",  ret);
      uvDebug("기계약 합산정보 오류 입니다.");
      if (ret == 5549) {
        appReturnCode = ret;
      } else {
        appReturnCode = 299;
      }
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "기계약 합산정보 오류 입니다.", "SVncapl300in1");
    }
    /* 가입한도          */
    COPY(oci.joltCalcDvsn,   "02");                       /* 가입한도산출구분 */
    if (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0) {
      COPYVAR(oci.cnttDate,   stp->realFtprRmtnDate);   /* 계약일자 mandatory */
    } else {
      COPYVAR(oci.cnttDate,   stp->cnttDate);           /* 계약일자 mandatory */
    }

    /* 2006.7.14 신진혁, B11, B12 직종별 사정기준 변경으로 인하여
       2006.7.13 이전 발행분은 계약일자 대신에 발행일자를 입력한다 */
    if (atoi((char *) stp->srdoPublDate.arr) < 20060714) {
      COPYVAR(oci.cnttDate,   stp->srdoPublDate);       /* 계약일자 mandatory */
      uvDebug("청약서 2006.7.14 이전 발행분");
    }

    COPYVAR(oci.prsnCoprSadv,   stp->prsnCoprSadv);       /* 개인법인판매구분 */
    COPYVAR(oci.riskGradCode,   stp->riskGradCode[ii]);       /* 위험등급코드 */
    /* 가입한도 축소확대 */
    COPYVAR(oci.occpCode,   stp->occpCode[ii]);                   /* 직종코드 */
    COPYVAR(oci.clltOrgnCode,   stp->clltOrgnCode);           /* 모집기관코드 */
    COPYVAR(oci.drveCatpCode,   stp->drveCatpCode[ii]);       /* 운전차종코드 */
    /* 계약등급그룹      */
    COPYVAR(oci.zipNo1,   stp->zipNo1);                    /* 수금지우편번호1 */
    COPYVAR(oci.zipNo2,   stp->zipNo2);                    /* 수금지우편번호2 */
    COPYVAR(oci.zipNo3,   stp->zipNo3);                    /* 수금지우편번호3 */
    /* 설계사그룹        */
    COPYVAR(oci.polyNo,   stp->polyNo);                           /* 증권번호 */
    COPY(oci.reviDlngNo,   "0000");                           /* 부활처리번호 */
    COPYVAR(oci.grpCustId,   stp->cnttGrpCtid);                   /* 단체코드 */
    COPYVAR(oci.irkdCodeDtal,   stp->irkdCodeDtal);        /* 보험종류코드_세 */
    COPYVAR(oci.irkdCodeItem,   stp->irkdCodeItem);        /* 보험종류코드_목 */
    oci.joinAge         =   stp->joinAge[ii];                     /* 가입연령 */
    COPYVAR(oci.custId,   stp->custId[ii]);                       /* 고객코드 */
    COPYVAR(oci.clltLpPrno,   stp->clltLpPrno);         /* 모집설계사고유번호 */

    COPYVAR(oci.paymCyclCode,   stp->paymCyclCode);           /* 납입주기코드 */
    COPYVAR(oci.frnrDvsnCode,   stp->frnrDvsnCode[ii]);     /* 외국인구분코드 */
    COPYVAR(oci.frnrStayCode,   stp->frnrStayCode[ii]);     /* 외국인체류코드 */

    /* 2008.07.01 실손의료비보장특약, 이화진 */
    COPYVAR(oci.addParams[0],   stp->pmmiJoinYn[ii]);     /* 실손가입가능여부 */

    uvDebug("stp->clltOrgnCode  =   [%s]",  (char *) stp->clltOrgnCode.arr);
    uvDebug("stp->clltLpPrno    =   [%s]",  (char *) stp->clltLpPrno.arr);
    uvDebug("stp->ardcLmitDvsn  =   [%s]",  (char *) stp->ardcLmitDvsn.arr);
    uvDebug("stp->crntDate      =   [%s]",  (char *) stp->crntDate.arr);

    if (CMNC_octmSumCalc_CC(&cso, &oci, &oco) == FAIL) {

      uvDebug("가입한도 메세지=[%d][%s]",oco.resultCode,oco.resultMsg);

      EXEC SQL ROLLBACK;

      if(oco.resultCode == 4899 || oco.resultCode == 4533 ||
         oco.resultCode == 8341 || oco.resultCode == 8595 ||
         oco.resultCode == 8596 || oco.resultCode == 8683) {
        uvDebug("가입한도 산출 오류=[%s]",oco.resultMsg);
        appReturnCode = oco.resultCode;
        SVC_CLOSE(APPERR, appReturnCode, 0, oco.resultMsg, "SVncapl300in1");
      } else {
        uvDebug("가입한도 산출 정보 오류입니다.");
        appReturnCode = 3096;
        SVC_CLOSE(APPERR, appReturnCode, cptReturnCode, \
            "가입한도 산출 정보 오류입니다.", "SVncapl300in1");
      }
    }

    /* 진단기준발췌      */
    COPYVAR(med.custId,   stp->custId[ii]);                         /* 고객ID */
    COPYVAR(med.custRoleCode,   stp->custRoleCode[ii]);           /* 고객역할 */
    COPY(med.joltCalcDvsn,   "02");                       /* 가입한도산출구분 */
    med.joinAge         =   stp->joinAge[ii];                     /* 가입연령 */
    if (strncmp((char *) stp->retrYn.arr, "Y", 1) == 0) {
      COPYVAR(med.cnttDate,   stp->realFtprRmtnDate);   /* 계약일자 mandatory */
    } else {
      COPYVAR(med.cnttDate,   stp->cnttDate);           /* 계약일자 mandatory */
    }
    COPYVAR(med.insrKindDtal,   stp->irkdCodeDtal);             /* 보험종류세 */
    COPYVAR(med.insrKindItem,   stp->irkdCodeItem);             /* 보험종류목 */
    COPYVAR(med.extraPerson,   stp->extraPerson[ii]); /* 할증체  여부 할증_cho */
    for (jj = 0; jj < stp->cjgCnt; jj++) {
      COPYVAR(med.goodCodeDtal[jj],   stp->cjggoodCodeDtal[jj]); /* 상품코드세 */
      COPYVAR(med.goodCodeItem[jj],   stp->cjggoodCodeItem[jj]); /* 상품코드목 */
      COPYVAR(med.goodRelnCode[jj],   stp->cjggoodRelnCode[jj]); /* 상품관계코드 */
      med.insrAmt[jj] =  stp->cjginsrAmt[jj];                     /* 가입금액 */
      /* 2005.10.31 장두원 */
    }
    COPYVAR(med.hndrDvsnCode,   stp->hndrDvsnCode[ii]);     /* 장애인구분코드 */

    if (strncmp((char *) stp->custRoleCode[ii].arr, "21", 2) == 0) {
      med.wekyDrnkCnt     =   stp->wekyDrnkCnt[0];            /* 주당음주횟수 */
      COPYVAR(med.drnkKdcd,   stp->drnkKdcd[0]);              /* 음주종류코드 */
      med.t01DrnkQnty     =   stp->t01DrnkQnty[0];               /* 1회음주량 */
      med.dalySmokQnty    =   stp->dalySmokQnty[0];             /* 일당흡연량 */
      med.hght            =   stp->hght[0];                           /* 신장 */
      med.wght            =   stp->wght[0];                         /* 몸무게 */
    } else {
      med.wekyDrnkCnt     =   stp->wekyDrnkCnt[1];            /* 주당음주횟수 */
      COPYVAR(med.drnkKdcd,   stp->drnkKdcd[1]);              /* 음주종류코드 */
      med.t01DrnkQnty     =   stp->t01DrnkQnty[1];               /* 1회음주량 */
      med.dalySmokQnty    =   stp->dalySmokQnty[1];             /* 일당흡연량 */
      med.hght            =   stp->hght[1];                           /* 신장 */
      med.wght            =   stp->wght[1];                         /* 몸무게 */
    }

    /* 후진단 여부 : 특정기관인 경우 후진단으로 처리하여야 함    */
    /* 2005.02.14 신진혁                                         */
    COPYVAR(med.addtParams[0], stp->clltOrgnCode);  /* temp에 모집기관 입력 */
    COPY   (med.addtParams[1], "NC"             );  /* temp에 신계약   입력 */
    COPYVAR(med.addtParams[4], stp->clltLpPrno  );  /* temp에 모집FP   입력 */
    /* 2008.05.22 진단기준 금액관련 무진단 상품 기준변경         */
    COPYVAR(med.addtParams[5], stp->paymCyclCode);  /* temp에 납입주기 입력 */
    COPYVAR(med.addtParams[6], stp->saleChnlCode);  /* temp에 판매채널 입력 */
    COPYVAR(med.addtParams[7], stp->polyNo      );  /* temp에 증권번호 입력 */

    /* 2010.03.17 신진혁 반영 */
    COPYVAR(med.addtParams[8], stp->occpCode    [ii]); /* temp에 직업코드 입력 */
    COPYVAR(med.addtParams[9], stp->riskGradCode[ii]); /* temp에 위험등급코드 입력 */

    /* 2009.07.01 FP별 U/W세분화제도, 이화진 */
    COPYVAR(med.pmmiJoinYn  ,  stp->pmmiJoinYn  [ii]); /* 실손가입가능여부 */
    COPYVAR(med.prevMediKncd,  stp->mediKindCode[ii]); /* 이전_진단종류코드         */
    COPYVAR(med.prevXtrtRscd,  stp->mdobXtrtRscd[ii]); /* 이전_진단대상발췌사유코드 */

    uvDebug("stp->clltOrgnCode  =   [%s]",  (char *) stp->clltOrgnCode.arr);
    uvDebug("stp->clltLpPrno    =   [%s]",  (char *) stp->clltLpPrno.arr);
    uvDebug("stp->ardcLmitDvsn  =   [%s]",  (char *) stp->ardcLmitDvsn.arr);
    uvDebug("stp->crntDate      =   [%s]",  (char *) stp->crntDate.arr);

    uvDebug("med.addtParams[0]  =   [%s]",  (char *) med.addtParams[0].arr);
    uvDebug("med.addtParams[1]  =   [%s]",  (char *) med.addtParams[1].arr);
    uvDebug("med.addtParams[4]  =   [%s]",  (char *) med.addtParams[4].arr);
    uvDebug("med.addtParams[5]  =   [%s]",  (char *) med.addtParams[5].arr);
    uvDebug("med.addtParams[6]  =   [%s]",  (char *) med.addtParams[6].arr);
    uvDebug("med.addtParams[7]  =   [%s]",  (char *) med.addtParams[7].arr);
    uvDebug("med.addtParams[8]  =   [%s]",  (char *) med.addtParams[8].arr);
    uvDebug("med.addtParams[9]  =   [%s]",  (char *) med.addtParams[9].arr);

    uvDebug("med.pmmiJoinYn     =   [%s]",  (char *) med.pmmiJoinYn  .arr);
    uvDebug("med.prevMediKncd   =   [%s]",  (char *) med.prevMediKncd.arr);
    uvDebug("med.prevXtrtRscd   =   [%s]",  (char *) med.prevXtrtRscd.arr);

    ret = CMNC_mediStddXtrt_CC(&cso, &oco, &med);

    if (ret != SUCCESS) {
      /* 방카채널 진단 발췌 오류 SKIP 대상 return value */
      if ((strncmp((char *) stp->saleChnlCode.arr, "5", 1) == 0) &&
          ((ret == 4802) ||  /* 가입거절(연기체),청약서입력/접수 불가 (U0804) */
           (ret == 4808) ||  /* (과거반송/지급건)선진단 대상 계약입니다  ERROR 처리 (U0729) */
           (ret == 4809) ||  /* 음주관련선진단 보통진단+간기능 ERROR 처리 'U0723' */
           (ret == 4810) ||  /* 흡연관련선진단으로 보통진단 ERROR 처리 'U0724' */
           (ret == 4811) ||  /* 체격관련선진단으로 보통진단 ERROR 처리 'U0725' */
           (ret == 4812) ||  /* 선진단건 진단처리후 접수ci,ltc */
           (ret == 5509))) { /* 선진단 대상건, 당월 진단필증 입력기간 경과,  진단처리후 접수요 */
        medret  =   (double) ret;
        PUTVAR(NC_STR_194,  medi,   stp->custRoleCode[ii]);
        PUT(NC_DOU_194,  medi,   medret);
      }
      /* 선진단건 진단서 미입력시 안내팝업에 진단발췌사유 추가(2018.04.25 U/W 오민규) */
      else if(ret == 4812) {

        uvDebug("선진단 진단서 미입력.사유=[%s]",(char *) med.mdobXtrtRscd.arr);

        /* 통합코드 검색 : 진단발췌코드 CLIENT로 전송 */
        i_retCode = CMUV_getUniCode_CC("MDOB_XTRT_RSCD", (char *) med.mdobXtrtRscd.arr
                                                       , &i_recordCnt, c_codeValue, c_codeName);

        if (i_retCode < 0 || i_recordCnt != 1) {
          uvDebug("진단발췌코드 조회 실패=[%s]",(char *) med.mdobXtrtRscd.arr);
        }

        sprintf(errMsg,"[%s]",c_codeName[0]);

        strcat(errMsg,"선진단 대상-진단서가 미입력");

        uvDebug("errMsg=[%s]",errMsg);

        /* 통합코드 검색 : 진단발췌코드 CLIENT로 전송 */
        i_retCode = CMUV_getUniCode_CC("MDOB_XTRT_RSCD", (char *) med.mdobXtrtRscd.arr
                                                       , &i_recordCnt, c_codeValue, c_codeName);

        if (i_retCode < 0 || i_recordCnt != 1) {
          uvDebug("진단발췌코드 조회 실패=[%s]",(char *) med.mdobXtrtRscd.arr);
        }

        sprintf(errMsg,"[%s]",c_codeName[0]);

        uvDebug("errMsg=[%s]",errMsg);

        EXEC SQL ROLLBACK;
        appReturnCode = 4801;
        SVC_CLOSE(APPERR, appReturnCode, 0, errMsg, "SVncapl300in1");
      } else {
        EXEC SQL ROLLBACK;
        uvDebug("ret    =   [%d]",  ret);
        uvDebug("진단기준 발췌 오류 입니다.");
        appReturnCode = ret;
        SVC_CLOSE(APPERR, appReturnCode, 0, \
            "진단기준 발췌 오류 입니다.", "SVncapl300in1");
      }

      COPY(med.prevMediObyn,   "Y");                      /* 선진단대상여부 */

      if (ret == 4802) {
        COPY(med.mediKindCode,   "02");                     /* 진단종류코드 */
        COPY(med.mdobXtrtRscd,   "A2");         /* 종신보험의무조사대상여부 */
      }
    }

    /* 2006.06 진단보완 , 2016.08 30일이내 사의진단예약건 예외처리*/
    uvDebug("* stp->srdoRecpYn [%s], med.resultCode=[%d]", stp->srdoRecpYn, med.resultCode);
    uvDebug("* med.prevMediObyn [%s]", (char *) med.prevMediObyn.arr);

    memset(errMsg     , 0x00, sizeof(errMsg));

    /* 선진단인 경우에만 진단서 입력 여부 확인(2017.06.23 오민규 요청) */
    if (strcmp((char *) med.prevMediObyn.arr, "Y") == 0) {

      /* 통합코드 검색 : 진단발췌코드 CLIENT로 전송 */
      i_retCode = CMUV_getUniCode_CC("MDOB_XTRT_RSCD", (char *) med.mdobXtrtRscd.arr
                                                     , &i_recordCnt, c_codeValue, c_codeName);

      if (i_retCode < 0 || i_recordCnt != 1) {
        uvDebug("진단발췌코드 조회 실패=[%s]",(char *) med.mdobXtrtRscd.arr);
      }

      sprintf(errMsg,"[%s]",c_codeName[0]);

      strcat(errMsg,"선진단 대상-진단서가 미입력");

      uvDebug("errMsg=[%s]",errMsg);

      if (strcmp(stp->srdoRecpYn, "N") == 0) {
        EXEC SQL ROLLBACK;
        uvDebug("선진단 대상-진단서가 입력 되지 않았습니다.");
        appReturnCode = 3407;
        SVC_CLOSE(APPERR, appReturnCode, 0, errMsg, "SVncapl300in1");
      }
    } else {

      /* 통합코드 검색 : 진단발췌코드 CLIENT로 전송 */
      i_retCode = CMUV_getUniCode_CC("MDOB_XTRT_RSCD", (char *) med.mdobXtrtRscd.arr
                                                     , &i_recordCnt, c_codeValue, c_codeName);
      uvDebug("[%d]후진단 진단코드[%s],진단발췌사유[%s]", medi, (char *) med.mdobXtrtRscd.arr,c_codeName[0]);

      if (i_retCode < 0 || i_recordCnt != 1) {
        uvDebug("진단발췌코드 조회 실패=[%s]",(char *) med.mdobXtrtRscd.arr);
      } else {
        PUTVAR(NC_STR_114,  medi, med.mdobXtrtRscd);                /* 진단발췌코드   */
        PUTSTR(NC_STR_115,  medi, c_codeName[0]   );                /* 진단발췌코드명 */
      }
    }

    uvDebug("뇨검사대상여부 =   [%s]",  (char *) med.addtParams[2].arr);

    /* 계약필수조사+뇨검사는 주피인 경우에만 대상 발췌 2010.09.01 */
    if  (strncmp((char *)stp->custRoleCode[ii].arr, "21",  2) == 0)
    {
      COPYVAR(stp->urinMdobYn,   med.addtParams[2]);    /* 비뇨기검진대상여부 */
    }

    uvDebug("★★★★★★★ 진단종류코드 셋팅 start ★★★★★★★");
    uvDebug("stp->mediKindCode  =   [%s]",  (char *) stp->mediKindCode[ii].arr);
    uvDebug("stp->prevMediObyn  =   [%s]",  (char *) stp->prevMediObyn[ii].arr);
    uvDebug("stp->mdobXtrtRscd  =   [%s]",  (char *) stp->mdobXtrtRscd[ii].arr);

    COPYVAR(stp->mediKindCode[ii],   med.mediKindCode);       /* 진단종류코드 */
    COPYVAR(stp->wlisDtivObyn[ii],   med.wlisDtivObyn); /* 종신보험의무조사대상여부 */
    /* COPYVAR(stp->prevMediObyn  [ii] ,   med.prevMediObyn    );      /* 선진단대상여부           */
    /* COPYVAR(stp->mdobXtrtRscd  [ii] ,   med.mdobXtrtRscd    );      /* 진단대상발췌사유코드     */

    /* 6개월 내에 진단받은 경우에는 진단발췌사유코드가 F1, F2 임   */
    if (strncmp((char *) med.mdobXtrtRscd.arr,"F",1) == 0) {
      uvDebug("6개월내 진단건으로 인한 진단종류코드 변경 없음");
    } else {
      uvDebug("진단종류코드 변경 시작");
      COPYVAR(stp->mdobXtrtRscd[ii],   med.mdobXtrtRscd); /* 진단대상발췌사유코드 */
      COPYVAR(stp->prevMediObyn[ii],   med.prevMediObyn); /* 선진단대상여부 */
    }

    uvDebug("★★★★★★★ 진단종류코드 셋팅 end ★★★★★★★");
    uvDebug("stp->mediKindCode  =   [%s]",  (char *) stp->mediKindCode[ii].arr);
    uvDebug("stp->prevMediObyn  =   [%s]",  (char *) stp->prevMediObyn[ii].arr);
    uvDebug("stp->mdobXtrtRscd  =   [%s]",  (char *) stp->mdobXtrtRscd[ii].arr);

    COPYVAR(stp->retnPaymDvsn  [ii],   med.retnPaymDvsn  ); /* 반송지급구분 1=반송,2=지급 */
    COPYVAR(stp->retnPaymRscd  [ii],   med.retnPaymRscd  ); /* 반송지급사유코드 */
    COPYVAR(stp->stdbSbstKdcd  [ii],   med.stdbSbstKdcd  ); /* 표준체_표준하체종류코드 */
    COPYVAR(stp->b26DChecMediYn[ii],   med.b26DChecMediYn); /* 26일이전종진선테진단여부 */
    COPYVAR(stp->prevPaymPrstYn[ii],   med.prevPaymPrstYn); /* 기지급급부체여부 */

    /* 고객신용정보조치코드 */
    if (strlen((char *) med.custCrinMncd.arr) == 0) {
      COPY   (stp->custCrinMncd,     "0");
    } else {
      COPYVAR(stp->custCrinMncd,     med.custCrinMncd);
    }

    uvDebug("조치사유코드   =   [%s]",  (char *) med.mtpfVlutCode.arr);
    uvDebug("고객신용정보조치코드 =   [%s]",  (char *) stp->custCrinMncd.arr);

    PUTVAR(NC_STR_207,  0,   med.mtpfVlutCode);               /* 조치사유코드 */
    PUTVAR(NC_STR_208,  0,   stp->custCrinMncd);      /* 고객신용정보조치코드 */

    /* 피보험자 진단종류        CLIENT로 전송   */
    /* 진단발췌코드가 F1, F2(6개월내 진단건존재) 인 경우에는 클라이언트로 무진단 전송 */
    if (strncmp((char *) med.mdobXtrtRscd.arr,"F",1) == 0) {
      PUTSTR(NC_STR_111,  medi,   "00"    );                /* 진단종류코드   */
      PUTSTR(NC_STR_112,  medi,   "무진단");                /* 진단종류코드명 */

    } else {
      PUTVAR(NC_STR_111,  medi,   stp->mediKindCode[ii]);       /* 진단종류코드 */
      PUTVAR(NC_STR_112,  medi,   med.mediKindName);          /* 진단종류코드명 */
    }

    PUTVAR(NC_STR_113,  medi,   med.prevMediObyn);          /* 선진단대상여부 */

    medi++;

    /* 기계약합산(사정항목)     CLIENT로 전송   */
    for (jj = 0; jj < ASSM_ITEM_CNT; jj++) {
      if (strncmp((char *) cso.assmItemCode[jj].arr, "A01", 3) == 0) {
        stp->calcAmtA01[ii]    =   cso.sumCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "C01", 3) == 0) {
        stp->calcAmtC01[ii]    =   cso.sumCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "F01", 3) == 0) {
        stp->calcAmtF01[ii]    =   cso.sumCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "D01", 3) == 0) {
        stp->calcAmtD01[ii]    =   cso.sumCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "A01", 3) == 0) {
        stp->calcAmtA01[ii]    =   cso.sumCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "G02", 3) == 0) {
        stp->nrmlMediAmt[ii]    =   cso.sumCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "G03", 3) == 0) {
        stp->spclMediAmt[ii]    =   cso.sumCalcAmt[jj];
        stp->calcAmtG03[ii]    =   cso.sumCalcAmt[jj];
      }

      /* 일반사망 단건합산 추가 (2005.07.23 장두원) */
      if (strncmp((char *) cso.assmItemCode[jj].arr, "A08", 3) == 0) {
        stp->oocsAmtA08[ii]    =   cso.oocsCalcAmt[jj];
      }

      /* 기관전결 여부를 판단하기 위한 사정항목 합산금액 변수이동 */
      if ((strncmp((char *) cso.assmItemCode[jj].arr, "A01", 3) == 0 ||
           strncmp((char *) cso.assmItemCode[jj].arr, "A02", 3) == 0 ||
           strncmp((char *) cso.assmItemCode[jj].arr, "A03", 3) == 0 ||
           strncmp((char *) cso.assmItemCode[jj].arr, "A04", 3) == 0 ||
           strncmp((char *) cso.assmItemCode[jj].arr, "A05", 3) == 0 ||
           strncmp((char *) cso.assmItemCode[jj].arr, "A06", 3) == 0 ||
           strncmp((char *) cso.assmItemCode[jj].arr, "A07", 3) == 0 ||
           strncmp((char *) cso.assmItemCode[jj].arr, "A08", 3) == 0)
          &&
          (strncmp((char *) stp->custRoleCode[ii].arr, "21", 2) == 0)) {
        uvDebug("단건금액 [%.f]",cso.oocsCalcAmt[jj]);
        stp->tempAmt[kk]    =   cso.oocsCalcAmt[jj];
        uvDebug("tempAmt  [%.f]",stp->tempAmt[kk]);
        kk++;
      }

      /*----------------------------------------------------------------*/
      /* 전결한도변경관련 추가항목 (2005.12.23 장두원) */
      if (strncmp((char *) cso.assmItemCode[jj].arr, "A01", 3) == 0) {
        stp->assmLmitRdexA01[ii]    =   oco.assmItemlmitRdex[jj];
        stp->lmitAmtA01[ii]    =   oco.lmitAmt[jj];
        stp->oocsAmtA01[ii]    =   cso.oocsCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "D02", 3) == 0) {
        stp->calcAmtD02[ii]    =   cso.sumCalcAmt[jj];
        stp->assmLmitRdexD02[ii]    =   oco.assmItemlmitRdex[jj];
        stp->lmitAmtD02[ii]    =   oco.lmitAmt[jj];
        stp->oocsAmtD02[ii]    =   cso.oocsCalcAmt[jj];
      }
      if (strncmp((char *) cso.assmItemCode[jj].arr, "B12", 3) == 0) {
        stp->calcAmtB12[ii]    =   cso.sumCalcAmt[jj];
        stp->assmLmitRdexB12[ii]    =   oco.assmItemlmitRdex[jj];
        stp->lmitAmtB12[ii]    =   oco.lmitAmt[jj];
        stp->oocsAmtB12[ii]    =   cso.oocsCalcAmt[jj];
      }
      /*----------------------------------------------------------------*/
      dLmitAmt    =   0;
      dSumCalcAmt =   0;

      dLmitAmt    =   oco.lmitAmt[jj] / 1000;
      dSumCalcAmt =   cso.sumCalcAmt[jj] / 1000;

      joinPossAmt = dLmitAmt - dSumCalcAmt;
      PUTVAR(NC_STR_141,  assm,   stp->custId      [ii]); /* 고객ID         */
      PUTVAR(NC_STR_142,  assm,   stp->custRoleCode[ii]); /* 고객역할       */
      PUTVAR(NC_STR_143,  assm,   cso.assmItemCode [jj]); /* 사정항목코드   */
      PUTVAR(NC_STR_144,  assm,   cso.assmItnmAbrv [jj]); /* 사정항목명약칭 */
      PUT   (NC_DOU_145,  assm,   dLmitAmt             ); /* 가입한도       */
      PUT   (NC_DOU_146,  assm,   dSumCalcAmt          ); /* 기계약합산금액 */
      PUT   (NC_DOU_147,  assm,   joinPossAmt          ); /* 가입여력       */

      if (cso.othrPrstTota[jj] > 0) {
        uvDebug("** 타사급부합계금액 [%s][%f]", cso.assmItemCode[jj].arr, cso.othrPrstTota[jj]);
        PUTSTR(NC_STR_204, 0, "타사에 가입된 내용이 있습니다.");
      }

      uvDebug("고객ID        [%s]", (char *) stp->custId      [ii].arr);
      uvDebug("고객역할      [%s]", (char *) stp->custRoleCode[ii].arr);
      uvDebug("사정항목코드  [%s]", (char *) cso.assmItemCode [jj].arr);
      uvDebug("사정항목명약칭[%s]", (char *) cso.assmItnmAbrv [jj].arr);
      uvDebug("가입한도      [%f]",          dLmitAmt                 );
      uvDebug("기계약합산금액[%f]",          dSumCalcAmt              );
      uvDebug("가입여력      [%f]",          joinPossAmt              );

      assm++;
    }

    /* 가입한도초과(사정항목)   CLIENT로 전송   */
    for (jj = 0; jj < ASSM_ITEM_CNT; jj++) {
      if (((int) oco.assmItemEr[jj] == 0)
          ||  (strncmp((char *) cso.assmItemCode[jj].arr, "G", 1) == 0)) {
        continue;
      }
      joinPossAmt = cso.sumCalcAmt[jj] - oco.lmitAmt[jj];
      PUTVAR(NC_STR_151,  lmta,   stp->custId         [ii]); /* 고객ID           */
      PUTVAR(NC_STR_152,  lmta,   stp->custRoleCode   [ii]); /* 고객역할         */
      PUTVAR(NC_STR_153,  lmta,   cso.assmItemCode    [jj]); /* 사정항목코드     */
      PUTVAR(NC_STR_154,  lmta,   cso.assmItnmAbrv    [jj]); /* 사정항목명약칭   */
      PUT   (NC_DOU_155,  lmta,   oco.assmItemlmitRdex[jj]); /* 사정축소확대존재 */
      PUT   (NC_DOU_156,  lmta,   joinPossAmt             ); /* 초과금액         */

      if (cso.othrPrstTota[jj] > 0) {
        uvDebug("** 타사급부합계금액 [%s][%f]", cso.assmItemCode[jj].arr, cso.othrPrstTota[jj]);
        PUTSTR(NC_STR_204, 0, "타사에 가입된 내용이 있습니다.");
      }

      uvDebug("고객ID          [%s]", (char *) stp->custId         [ii].arr);
      uvDebug("고객역할        [%s]", (char *) stp->custRoleCode   [ii].arr);
      uvDebug("사정항목코드    [%s]", (char *) cso.assmItemCode    [jj].arr);
      uvDebug("사정항목명약칭  [%s]", (char *) cso.assmItnmAbrv    [jj].arr);
      uvDebug("사정축소확대존재[%f]",          oco.assmItemlmitRdex[jj]    );
      uvDebug("초과금액        [%f]",          joinPossAmt                 );

      lmta++;
    }

    /* 가입한도초과(대표보종)   CLIENT로 전송   */
    for (jj = 0; jj < CJG_CNT; jj++) {
      if (((int) oco.rprsIrkdEr[jj] == 0)
          ||  (strncmp((char *) cso.assmItemCode[jj].arr, "G", 1) == 0)) {
        continue;
      }
      oco.rprsJoinPossAmt[jj] =   oco.rprsJoinPossAmt[jj] / 1000;
      PUTVAR(NC_STR_161,  lmtr,   stp->custId         [ii]); /* 고객ID            */
      PUTVAR(NC_STR_162,  lmtr,   stp->custRoleCode   [ii]); /* 고객역할          */
      PUTVAR(NC_STR_163,  lmtr,   oco.rprsGoodCodeName[jj]); /* 대표 상품코드_명  */
      PUT   (NC_DOU_164,  lmtr,   oco.rprsIrkdlmitRdex[jj]); /* 대표 축소확대존재 */
      PUT   (NC_DOU_165,  lmtr,   oco.rprsJoinPossAmt [jj]); /* 초과금액          */

      uvDebug("고객ID           [%s]", (char *) stp->custId         [ii].arr);
      uvDebug("고객역할         [%s]", (char *) stp->custRoleCode   [ii].arr);
      uvDebug("대표 상품코드_명 [%s]", (char *) oco.rprsGoodCodeName[jj].arr);
      uvDebug("대표 축소확대존재[%f]",          oco.rprsIrkdlmitRdex[jj]    );
      uvDebug("초과금액         [%f]",          oco.rprsJoinPossAmt [jj]    );

      lmtr++;
    }

    /* 가입한도초과(개별보종)   CLIENT로 전송   */
    for (jj = 0; jj < CJG_CNT; jj++) {
      if (((int) oco.irkdCodeEr[jj] == 0)
          ||  (strncmp((char *) cso.assmItemCode[jj].arr, "G", 1) == 0)) {
        continue;
      }
      oco.irkdJoinPossAmt[jj] =   oco.irkdJoinPossAmt[jj] / 1000;
      PUTVAR(NC_STR_161,  lmtr,   stp->custId         [ii]); /* 고객ID            */
      PUTVAR(NC_STR_162,  lmtr,   stp->custRoleCode   [ii]); /* 고객역할          */
      PUTVAR(NC_STR_163,  lmtr,   oco.irkdGoodCodeName[jj]); /* 보험 상품코드_명  */
      PUT   (NC_DOU_164,  lmtr,   oco.irkdCodelmitRdex[jj]); /* 보험 축소확대존재 */
      PUT   (NC_DOU_165,  lmtr,   oco.irkdJoinPossAmt [jj]); /* 초과금액          */

      uvDebug("고객ID           [%s]", (char *) stp->custId         [ii].arr);
      uvDebug("고객역할         [%s]", (char *) stp->custRoleCode   [ii].arr);
      uvDebug("보험 상품코드_명 [%s]", (char *) oco.irkdGoodCodeName[jj].arr);
      uvDebug("보험 축소확대존재[%f]",          oco.irkdCodelmitRdex[jj]    );
      uvDebug("초과금액         [%f]",          oco.irkdJoinPossAmt [jj]    );

      lmtr++;
    }

    /* 가입한도초과(사정항목)상품 CLIENT로 전송 */
    for (jj = 0; jj < ASSM_ITEM_CNT; jj++) {
      if (((int) oco.assmItemEr[jj] == 0)
          ||  (strncmp((char *) cso.assmItemCode[jj].arr, "G", 1) == 0)) {
        continue;
      }
      for (kk = 0; kk < CJG_CNT; kk++) {
        if (oco.goodCodeDtal[jj][kk][0] == 0x00) {
          break;
        }
        PUTVAR(NC_STR_181,  good,   stp->custId[ii]);               /* 고객ID */
        PUTVAR(NC_STR_182,  good,   cso.assmItemCode[jj]);    /* 사정항목코드 */
        PUTSTR(NC_STR_183,  good,   oco.goodCodeDtal[jj][kk]); /* 상품코드_세 */
        PUTSTR(NC_STR_184,  good,   oco.goodCodeItem[jj][kk]); /* 상품코드_목 */
        PUTSTR(NC_STR_185,  good,   oco.goodBsnsName[jj][kk]); /* 상품코드_명 */
        PUTSTR(NC_STR_186,  good,   oco.goodRelnCode[jj][kk]); /* 상품관계코드 */
        if (strncmp((char *) stp->premIamtIpst.arr, "01", 2) == 0) {
          PUT(NC_DOU_187,  good,   oco.insrAmt[jj][kk]);          /* 가입금액 */
        } else if (strncmp((char *) stp->premIamtIpst.arr, "00", 2) == 0) {
          PUT(NC_DOU_187,  good,   oco.origPrem[jj][kk]);     /* 가입원보험료 */
        }
        PUTSTR(NC_STR_189,  good,   oco.amtSumName[jj][kk]);    /* 금액합산명 */
        PUT(NC_DOU_190,  good,   oco.calcAmtMult[jj][kk]);   /* 산출배수/금액 */

        if (cso.othrPrstTota[jj] > 0) {
          uvDebug("** 타사급부합계금액 [%s][%f]", cso.assmItemCode[jj].arr, cso.othrPrstTota[jj]);
          PUTSTR(NC_STR_204, 0, "타사에 가입된 내용이 있습니다.");
        }
        good++;
      }
    }

    uvDebug("(char *)stp->custId[%d].arr = [%s]", ii,(char *)stp->custId[ii].arr);
    uvDebug("(char *)stp->custRoleCode[%d].arr = [%s]",ii, (char *)stp->custRoleCode[ii].arr);

    /* procCallGubun - "1":가입여력, "2":발행, "3":접수 */
    COPY   (fui.procCallGubun , "3"                   ); /* 업무호출구분 */
    COPYVAR(fui.custRoleCode  , stp->custRoleCode[ii] ); /* 고객역할코드 */
    COPYVAR(fui.custId        , stp->custId[ii]       ); /* 고객ID       */
    COPYVAR(fui.paymCyclCode  , stp->paymCyclCode     ); /* 납입주기코드 */
    if (strncmp((char *) stp->freePlanYn.arr, "Y", 1) != 0) {
      fui.realPaymTerm  = stp->cjgrealPaymTerm[0];  /* 실납입기간   */
    } else {
      fui.realPaymTerm  = stp->fjgrealPaymTerm[0];  /* 실납입기간   */
    }
    COPYVAR(fui.irkdCodeDtal  , stp->irkdCodeDtal     ); /* 보종코드_세  */
    COPYVAR(fui.irkdCodeItem  , stp->irkdCodeItem     ); /* 보종코드_목  */
    COPYVAR(fui.cnttDate      , stp->cnttDate         ); /* 기준일자     */
    COPYVAR(fui.saleChnlCode  , stp->saleChnlCode     ); /* 판매채널코드 */
            fui.mainInsrAmt   = stp->mainInsrAmt;        /* 주보험금     */
    COPYVAR(fui.crdtGrdv      , stp->crdtGrdv         ); /* 신용등급     */

    uvDebug("(char *)stp->paymCyclCode.arr = [%s]", (char *)stp->paymCyclCode.arr );
    uvDebug("        stp->realPaymTerm     = [%f]",         stp->realPaymTerm     );
    uvDebug("(char *)stp->irkdCodeDtal.arr = [%s]", (char *)stp->irkdCodeDtal.arr );
    uvDebug("(char *)stp->irkdCodeItem.arr = [%s]", (char *)stp->irkdCodeItem.arr );
    uvDebug("(char *)stp->cnttDate.arr     = [%s]", (char *)stp->cnttDate.arr     );
    uvDebug("(char *)stp->saleChnlCode.arr = [%s]", (char *)stp->saleChnlCode.arr );
    uvDebug("        stp->mainInsrAmt      = [%f]",         stp->mainInsrAmt      );
    uvDebug("(char *)stp->crdtGrdv.arr     = [%s]", (char *)stp->crdtGrdv.arr     );

    /* 재정 U/W 제외 대상 체크 */
    if (CMNC_finaUwexSrch(&fui) == FAIL) {

      for(jj = 0; jj < ASSM_ITEM_CNT; jj++) {
        uvDebug("타사급부합계금액[%f]",  cso.othrPrstTota[jj]);

        COPYVAR(fui.assmItemCode[jj]  , cso.assmItemCode[jj]) ; /* 사정항목코드     */
                fui.oocsCalcAmt [jj]  = cso.oocsCalcAmt [jj]  ; /* 단건산출금액     */
                fui.sumCalcAmt  [jj]  = cso.sumCalcAmt  [jj]  ; /* 합산산출금액     */
                fui.othrPrstTota[jj]  = cso.othrPrstTota[jj]  ; /* 타사급부합계금액 */
      }

      if (CMNC_finaUdwrChck(&fui, &fuo) == FAIL) {
        EXEC SQL ROLLBACK;
        uvDebug("재정 U/W 체크 오류");
        SVC_CLOSE(APPERR, 4899, 0, "재정 U/W 체크 오류", fnName);
      }

      COPYVAR(stp->finaUwDvsn       , fuo.finaUwDvsn     ); /* 재정질의서 발행구분 */
              stp->maxSumCalcAmt    = fuo.maxSumCalcAmt   ; /* 재정U/W - 합산사망급부 최대 */
              stp->maxOocsCalcAmt   = fuo.maxOocsCalcAmt  ; /* 재정U/W - 단건사망급부 최대 */
              stp->maxOthrPrstTota  = fuo.maxOthrPrstTota ; /* 재정U/W - 타사사망급부 최대 */
      uvDebug("(char *)stp->finaUwDvsn.arr  = [%s]", (char *)stp->finaUwDvsn.arr);
      uvDebug("stp->maxSumCalcAmt           = [%f]", stp->maxSumCalcAmt);
      uvDebug("stp->maxOocsCalcAmt          = [%f]", stp->maxOocsCalcAmt);
      uvDebug("stp->maxOthrPrstTota         = [%f]", stp->maxOthrPrstTota);

      if (fuo.preFinaUwrs != SUCCESS) {
        EXEC SQL ROLLBACK;
        uvDebug("fuo.preFinaUwrs    =   [%d]",  fuo.preFinaUwrs);
        uvDebug("고액계약 청약서 발행불가");
        appReturnCode = 4899;
        SVC_CLOSE(APPERR, appReturnCode, 0, \
            "고액계약 H-PUSS사전 재정U/W 실시 후 접수 요망", "SVncapl300in1");
      }
    } else {
      uvDebug("재정U/W 제외 대상으로 체크 종료");
    }
  }

  /*  [ 2004.01.28,  문서번호:보험RM파트-00066 ] - 양용현 : START
      1. 보험료법인부담율이 100%으로 보험기간이 1년이내인 상품 제외
      2. 단 실손보상부문은 기게약합산 한다.                           */
  uvDebug("*** 보험기간   = [%.0f]", stp->insrTerm);
  uvDebug("*** 법인부담율 = [%f]", stp->premCoprCgrt);
  uvDebug("*** 실손여부   = [%s]", stp->ciInsrYn.arr);
  if (stp->insrTerm == 1 && stp->premCoprCgrt == 100 && strncmp((char *) stp->ciInsrYn.arr, "S", 1) != 0) {
    lmta = 0;
    lmtr = 0;
    uvDebug("*** 보험료법인부담율=100% && 보험기간 = 1 ==> 기계약합산 제외(단 실손은 합산) !!!!");
    uvDebug("*** 가입한도초과유무=N  ==> 변경완료");
    if (strncmp((char *) med.mediKindCode.arr, "00", 2) != 0 &&
        strncmp((char *) med.mdobXtrtRscd.arr, "A1", 2) == 0) {
      COPY(med.mediKindCode,  "00");                          /* 진단종류코드 */
      COPY(med.mediKindName,  "무진단");                    /* 진단종류코드명 */
      COPY(med.mdobXtrtRscd,  "ZZ");                  /* 진단대상발췌사유코드 */
      COPYVAR(stp->mediKindCode[ii],  med.mediKindCode);      /* 진단종류코드 */
      COPYVAR(stp->mdobXtrtRscd[ii],  med.mdobXtrtRscd); /* 진단대상발췌사유코드 */

      /* 피보험자가 1명일 경우만 medi-1이 유효함 */
      PUTVAR(NC_STR_111,  medi-1,   stp->mediKindCode[ii]);   /* 진단종류코드 */
      PUTVAR(NC_STR_112,  medi-1,   med.mediKindName);      /* 진단종류코드명 */

      uvDebug("*** 진단종류코드=00, 진단종류코드명=무진단, 진단대상발췌사유코드=ZZ ==> 변경완료");
    }
  }         /* [ 2004.01.28,  문서번호:보험RM파트-00066 ] - 양용현 : END */

  /* Client로 한도초과 여부 전송      */
  if ((lmta > 0) || (lmtr > 0)) {
    COPY(lmitSplsYn,   "Y");
    PUTVAR(NC_STR_150,  0,  lmitSplsYn);
    EXEC SQL ROLLBACK;
    uvDebug("가입한도 초과");
    appReturnCode = 3099;
    SVC_CLOSE(SUCC, 0, appReturnCode, \
        "가입한도 초과", "SVncapl300in1");
  } else {
    COPY(lmitSplsYn,   "N");
    PUTVAR(NC_STR_150,  0,  lmitSplsYn);
  }

  uvDebug("stp->clltOrgnCode  =   [%s]",  (char *) stp->clltOrgnCode.arr);
  uvDebug("stp->clltLpPrno    =   [%s]",  (char *) stp->clltLpPrno.arr);
  uvDebug("stp->ardcLmitDvsn  =   [%s]",  (char *) stp->ardcLmitDvsn.arr);
  uvDebug("stp->crntDate      =   [%s]",  (char *) stp->crntDate.arr);

  uvDebug("SVncapl300in1_CMNC_cust_octm_med    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_bussClogYm()
  Note          : 영업마감년월 산출
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_bussClogYm(struct stp_SVncapl300in1 *stp) {
  char    crmmYymm[6+1];                                            /* 당월 */
  char    crfwYymm[6+1];                                            /* 익전월 */

  struct _dcnc_apl300in09_sp_out dcncApl300in09SpOut;
  struct _dcnc_apl300in09_sp_in  dcncApl300in09SpIn;

  uvDebug("SVncapl300in1_bussClogYm    Start");

  memset(crmmYymm,    0x00,   sizeof(crmmYymm));
  memset(crfwYymm,    0x00,   sizeof(crfwYymm));

  strncpy(crmmYymm,   (char *) stp->crntDate.arr,  6);
  CMUV_getDateByMonth_CC(crmmYymm,  1, crfwYymm);

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in09SpInClear(&dcncApl300in09SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl300in09SpIn.bsnsDvsnCode,   "NC");              /* 업무구분코드 */
  if (strncmp((char *) stp->prsnCoprSadv.arr, "1", 1) == 0) {       /* 개인 */
    COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCP02");       /* 청약서입력마감 */
  } else {
    COPY(dcncApl300in09SpIn.schdAdmnKdcd,   "NCG02");       /* 청약서입력마감 */
  }
  COPY(dcncApl300in09SpIn.clogYm,   crfwYymm);                  /* 계약월+1월 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in09SpOutClear(&dcncApl300in09SpOut);

  /* DBIO module 호출                                             */

  dcncApl300in09Sp(&basicParam,&dcncApl300in09SpIn,&dcncApl300in09SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN09_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN09_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (atoi((char *) dcncApl300in09SpOut.stddDate.arr) < atoi((char *) stp->cnttDate.arr)) {
    COPY(stp->bussClogYm,   crfwYymm);
  } else {
    COPY(stp->bussClogYm,   crmmYymm);
  }

  /* 현재는 영업마감년월과 계약체결년월은 동일화, 추후 변동가능성 있음. 2004.03.22 */
  NCOPYVAR(stp->bussClogYm,   stp->ftprRmtnDate, 6);         /* 영업마감년월 */

  uvDebug("stp->clltOrgnCode  =   [%s]",  (char *) stp->clltOrgnCode.arr);
  uvDebug("stp->clltLpPrno    =   [%s]",  (char *) stp->clltLpPrno.arr);
  uvDebug("stp->ardcLmitDvsn  =   [%s]",  (char *) stp->ardcLmitDvsn.arr);
  uvDebug("stp->crntDate      =   [%s]",  (char *) stp->crntDate.arr);

  uvDebug("SVncapl300in1_bussClogYm    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_freePlanRsfn()
  Note          : 자유설계 처리 준비
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_freePlanRsfn(struct stp_SVncapl300in1 *stp) {
  int     ii;

  uvDebug("SVncapl300in1_freePlanRsfn    Start");

  /* 세금우대 처리용 정보 보관    */
  COPYVAR(stp->orgirkdCodeDtal,   stp->irkdCodeDtal);      /* 보험종류코드_세 */
  COPYVAR(stp->orgirkdCodeItem,   stp->irkdCodeItem);      /* 보험종류코드_목 */
  COPYVAR(stp->orgpaymCyclCode,   stp->paymCyclCode);       /* 납입주기코드 */
  (       stp->orgsumOrigPrem =   stp->sumOrigPrem ); /* 합계원보험료 */

  (       stp->orgpaymTerm    =   stp->paymTerm    ); /* 납입기간 */
  (       stp->orgrealPaymTerm=   stp->realPaymTerm); /* 실납입기간 */
  COPYVAR(stp->orgpaymTermDvsn,   stp->paymTermDvsn);       /* 납입기간구분 */
  (       stp->orgmainInsrAmt =   stp->mainInsrAmt ); /* 주보험금 */
  (       stp->orgmainPrem    =   stp->mainPrem    ); /* 주보험료 */
  (       stp->orgsumPrem     =   stp->sumPrem     ); /* 합계보험료 */
  (       stp->orgstddJoinAmt =   stp->stddJoinAmt ); /* 기준가입금액 */
  COPYVAR(stp->orgpytrInqrCode,   stp->pytrInqrCode);     /* 납입기간조회코드 */
  COPYVAR(stp->orgintrInqrCode,   stp->intrInqrCode);     /* 보험기간조회코드 */
  (       stp->orgfstiRrcvPrem=   stp->fstiRrcvPrem); /* 초회실입금보험료 */
  (       stp->orgaddPaymPrem =   stp->addPaymPrem ); /* 추가납입보험료 */
  (       stp->orgstddCamt    =   stp->stddCamt    ); /* 기준계약고 */
  COPYVAR(stp->orgftprRecvMdcd,   stp->ftprRecvMdcd);   /* 초회보험료입금방법 */


  /* 자유설계 정보 셋팅 */
  COPYVAR(stp->mainPolyNo,   stp->polyNo);                  /* 주증권번호 */
  COPYVAR(stp->polyNo,   stp->scndPolyNo);                  /* 증권번호 */
  COPYVAR(stp->scndPolyNo,   stp->mainPolyNo);              /* 종증권번호 */

  COPYVAR(stp->irkdCodeDtal,   stp->frpirkdCodeDtal);      /* 보험종류코드_세 */
  COPYVAR(stp->irkdCodeItem,   stp->frpirkdCodeItem);      /* 보험종류코드_목 */
  (       stp->paymTerm       =   stp->frppaymTerm    ); /* 납입기간 */
  (       stp->realPaymTerm   =   stp->frprealPaymTerm); /* 실납입기간 */
  COPYVAR(stp->paymTermDvsn,   stp->frppaymTermDvsn);       /* 납입기간구분 */
  COPYVAR(stp->paymCyclCode,   stp->frppaymCyclCode);       /* 납입주기코드 */
  (       stp->mainInsrAmt    =   stp->frpmainInsrAmt ); /* 주보험금 */
  (       stp->sumPrem        =   stp->frpsumPrem     ); /* 합계보험료 */
  (       stp->sumOrigPrem    =   stp->frpsumOrigPrem ); /* 합계원보험료 */
  (       stp->stddCamt       =   stp->frpstddCamt    ); /* 기준계약고 */
  (       stp->fstiRrcvPrem   =   stp->frpfstiRrcvPrem); /* 초회실입금보험료 */
  (       stp->addPaymPrem    =   stp->frpaddPaymPrem ); /* 추가납입보험료 */
  COPY(stp->premDsctYn,   "N");                             /* 보험료할인여부 */
  COPY(stp->grttSpcdYn,   "N"); /* 단체취급특약여부 2004년 1월 28일 조진학 추가 */

  /* 전환CI 즉시이체시 월납은 즉시이체, 일시납은 방문수금(82)로 체크함      */
  /* 전환CI 즉시이체는 수금방법 동일하게 가기로 함(2004.12.20 남후자)       */
  /* if (  ( strncmp((char *)stp->orgftprRecvMdcd.arr ,"83",2) == 0 ) &&    */
  /*       ( strncmp((char *)stp->ciInsrYn    .arr ,"K" ,1) == 0 ) ) {      */
  /* 초회보험료입금방법 -> 일시납은 82(방문수금)                            */
  /* COPY   (stp->ftprRecvMdcd   ,    "82"                );                */
  /* }                                                                      */

  stp->cjgCnt =   stp->fjgCnt;

  for (ii = 0; ii < stp->cjgCnt; ii++) {
    COPYVAR(stp->cjggoodCodeDtal[ii],   stp->fjggoodCodeDtal[ii]);
    COPYVAR(stp->cjggoodCodeItem[ii],   stp->fjggoodCodeItem[ii]);
    COPYVAR(stp->cjggoodCodeName[ii],   stp->fjggoodCodeName[ii]); /* 상품업무명          (C) */
    COPYVAR(stp->cjggoodRelnCode[ii],   stp->fjggoodRelnCode[ii]);
    COPYVAR(stp->cjgexprDate[ii],   stp->fjgexprDate[ii]); /* 만기일자            (C) */
    COPYVAR(stp->cjgpytrInqrCode[ii],   stp->fjgpytrInqrCode[ii]); /* 납입기간조회코드    (C) */
    COPYVAR(stp->cjgintrInqrCode[ii],   stp->fjgintrInqrCode[ii]); /* 보험기간조회코드    (C) */
    (       stp->cjgpaymTerm    [ii] =  stp->fjgpaymTerm    [ii]); /* 납입기간     */
    (       stp->cjgrealPaymTerm[ii] =  stp->fjgrealPaymTerm[ii]); /* 실납입기간   */
    COPYVAR(stp->cjgpaymTermDvsn[ii],   stp->fjgpaymTermDvsn[ii]); /* 납입기간구분 */
    (       stp->cjginsrTerm    [ii] =  stp->fjginsrTerm    [ii]); /* 보험기간     */
    (       stp->cjgrealInsrTerm[ii] =  stp->fjgrealInsrTerm[ii]); /* 실보험기간   */
    COPYVAR(stp->cjginsrTermDvsn[ii],   stp->fjginsrTermDvsn[ii]); /* 보험기간구분 */
    (       stp->cjginsrAmt     [ii] =  stp->fjginsrAmt     [ii]);
    (       stp->cjgorigPrem    [ii] =  stp->fjgorigPrem    [ii]);
    (       stp->cjgprem        [ii] =  stp->fjgprem        [ii]);
  }

  stp->t01Cvmf         =  stp->ft01Cvmf;                     /* 1회차환산월초 */
  stp->t04Cvmf         =  stp->ft04Cvmf;                     /* 4회차환산월초 */
  stp->t07Cvmf         =  stp->ft07Cvmf;                     /* 7회차환산월초 */
  stp->t13Cvmf         =  stp->ft13Cvmf;                    /* 13회차환산월초 */
  stp->t25Cvmf         =  stp->ft25Cvmf;                    /* 25회차환산월초 */
  stp->lupyCvmf        =  stp->flupyCvmf;                   /* 일시납환산월초 */

  uvDebug("SVncapl300in1_freePlanRsfn    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_cnttStatCode()
  Note          : 계약상태코드
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_cnttStatCode(struct stp_SVncapl300in1 *stp) {
  uvDebug("SVncapl300in1_cnttStatCode    Start");

  COPY(stp->cnttStatCode,     "7");             /* 계약상태코드 */

  /* 초회보험료 수금방법 방문시       */
  /* 초회보험료 수금방법 계약대행시       */
  if (strncmp((char *) stp->ftprRecvMdcd.arr, "82", 2) == 0 ||
      strncmp((char *) stp->ftprRecvMdcd.arr, "92", 2) == 0) {
    COPY(stp->cnttStatDtcd, "71");              /* 신계약 정상 접수 */
  }

  /* 초회보험료 수금방법 지정일이체시 */
  if (strncmp((char *) stp->ftprRecvMdcd.arr, "81", 2) == 0) {
    COPY(stp->cnttStatDtcd, "73");              /* 신계약 미입금접수 */
  }

  /* 초회보험료 수금방법 즉시이체     */
  if (strncmp((char *) stp->ftprRecvMdcd.arr, "83", 2) == 0) {
    COPY(stp->cnttStatDtcd, "73");              /* 신계약 정상 접수 */
  }

  /* 초회보험료 수금방법 카드납시     */
  if (strncmp((char *) stp->ftprRecvMdcd.arr, "84", 2) == 0) {
    COPY(stp->cnttStatDtcd, "71");              /* 신계약 청구 접수 */
  }

  if (strncmp((char *) stp->saleChnlCode.arr, "5", 1) == 0) {
    COPY(stp->cnttStatDtcd, "73");        /* 신계약 미입금접수 (방카모집계약) */
  }

  /* 초회보험료 수금방법 직접납입시 */
  if (strncmp((char *) stp->ftprRecvMdcd.arr, "86", 2) == 0) {
    COPY(stp->cnttStatDtcd, "73");              /* 신계약 미입금접수 */
  }


  uvDebug("SVncapl300in1_cnttStatCode    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in18Sp()
  Note          : 계약 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in18Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in18_sp_in  dcncApl300in18SpIn;

  uvDebug("SVncapl300in1_dcncApl300in18Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in18SpInClear(&dcncApl300in18SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in18SpIn.cnttStatCode,   stp->cnttStatCode); /* 계약상태코드 */
  COPYVAR(dcncApl300in18SpIn.cnttStatDtcd,   stp->cnttStatDtcd); /* 계약상태상세코드 */
  COPYVAR(dcncApl300in18SpIn.cnttDate,   stp->cnttDate);          /* 계약일자 */
  /* NCOPYVAR(dcncApl300in18SpIn.cnttConcYm  ,   stp->cnttDate,  6); /* 계약체결년월     */
  NCOPYVAR(dcncApl300in18SpIn.cnttConcYm,   stp->ftprRmtnDate, 6); /* 계약체결년월 */
  COPYVAR(dcncApl300in18SpIn.polyNo,   stp->polyNo);              /* 증권번호 */
  COPYVAR(dcncApl300in18SpIn.exprDate,   stp->exprDate);          /* 만기일자 */
  COPYVAR(dcncApl300in18SpIn.cnttAnpyStdt,   stp->anntPaymStdt); /* 연금지급개시일자 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in18Sp(&basicParam,&dcncApl300in18SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN18_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN18_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("다시 조회후 접수하십시요");
    appReturnCode = 3425;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "다시 조회후 접수하십시요", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_dcncApl300in18Sp End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in21Sp()
  Note          : 청약부속정보 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in21Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in21_sp_in  dcncApl300in21SpIn;

  uvDebug("SVncapl300in1_dcncApl300in21Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in21SpInClear(&dcncApl300in21SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in21SpIn.ftprRmtnDate , stp->ftprRmtnDate); /* 초회보험료송금일자          */
  COPYVAR(dcncApl300in21SpIn.ftprRmtnTime , stp->crntTimeHh24); /* 초회보험료송금시각          */
  COPYVAR(dcncApl300in21SpIn.ftprRecvMdcd , stp->ftprRecvMdcd); /* 초회보험료입금방법코드      */
  COPYVAR(dcncApl300in21SpIn.lpCtisReln   , stp->lpCtisReln  ); /* 설계사와계약자/피보험자관계 */
  COPYVAR(dcncApl300in21SpIn.insrJoinMotv , stp->insrJoinMotv); /* 보험가입동기                */
  COPYVAR(dcncApl300in21SpIn.orgnArdcYn   , stp->orgnArdcYn  ); /* 기관전결여부                */
  (       dcncApl300in21SpIn.mnthIncmAmt  = stp->mnthIncmAmt ); /* 월소득금액                  */
  COPYVAR(dcncApl300in21SpIn.ctorDwelTpdv , stp->ctorDwelTpdv); /* 계약자주거형태구분          */
  COPYVAR(dcncApl300in21SpIn.recpDate     , stp->crntDate    ); /* 접수일자                    */
  COPYVAR(dcncApl300in21SpIn.recpTime     , stp->crntTimeHh24); /* 접수시각                    */
  COPYVAR(dcncApl300in21SpIn.bussClogYm   , stp->bussClogYm  ); /* 영업마감년월                */
  COPYVAR(dcncApl300in21SpIn.polyNo       , stp->polyNo      ); /* 증권번호                    */
  (       dcncApl300in21SpIn.custIntrPsct = stp->custIntrPsct); /* 고객소개인원수              */
  COPYVAR(dcncApl300in21SpIn.urinMdobYn   , stp->urinMdobYn  ); /* 비뇨기검진대상여부          */
  COPYVAR(dcncApl300in21SpIn.holoRecYn    , stp->holoRecYn   ); /* 자필녹취여부                */
  COPYVAR(dcncApl300in21SpIn.stplRecvDvsn , stp->stplRecvDvsn); /* 약관전달경로구분            */
  COPYVAR(dcncApl300in21SpIn.rrfdCnvsRqyn , stp->rrfdCnvsRqyn); /* 양육자금전환신청여부        */
  COPYVAR(dcncApl300in21SpIn.asmtAgntRqyn , stp->asmtAgntRqyn); /* 지정대리인신청여부          */
  COPYVAR(dcncApl300in21SpIn.dumbYn       , stp->dumbYn      ); /* 청각언어장애여부            */
  COPYVAR(dcncApl300in21SpIn.polyTrnmRtdv , stp->polyTrnmRtdv); /* 증권전달경로구분            */
  COPYVAR(dcncApl300in21SpIn.vrblHoloYn   , stp->vrblHoloYn  ); /* 변액자필여부                */
  COPY   (dcncApl300in21SpIn.recpDlmnMpno , uvGetUserID()    ); /* 접수처리자사번              */
  COPYVAR(dcncApl300in21SpIn.mntrDvcd     , stp->mntrDvcd  );   /* 모니터링방법구분            */


  uvDebug("초회보험료송금일자         =[%s]", dcncApl300in21SpIn.ftprRmtnDate.arr);
  uvDebug("초회보험료송금시각         =[%s]", dcncApl300in21SpIn.ftprRmtnTime.arr);
  uvDebug("초회보험료입금방법코드     =[%s]", dcncApl300in21SpIn.ftprRecvMdcd.arr);
  uvDebug("설계사와계약자/피보험자관계=[%s]", dcncApl300in21SpIn.lpCtisReln  .arr);
  uvDebug("보험가입동기               =[%s]", dcncApl300in21SpIn.insrJoinMotv.arr);
  uvDebug("기관전결여부               =[%s]", dcncApl300in21SpIn.orgnArdcYn  .arr);
  uvDebug("월소득금액                 =[%f]", dcncApl300in21SpIn.mnthIncmAmt     );
  uvDebug("계약자주거형태구분         =[%s]", dcncApl300in21SpIn.ctorDwelTpdv.arr);
  uvDebug("접수일자                   =[%s]", dcncApl300in21SpIn.recpDate    .arr);
  uvDebug("접수시각                   =[%s]", dcncApl300in21SpIn.recpTime    .arr);
  uvDebug("영업마감년월               =[%s]", dcncApl300in21SpIn.bussClogYm  .arr);
  uvDebug("증권번호                   =[%s]", dcncApl300in21SpIn.polyNo      .arr);
  uvDebug("고객소개인원수             =[%f]", dcncApl300in21SpIn.custIntrPsct    );
  uvDebug("비뇨기검진대상여부         =[%s]", dcncApl300in21SpIn.urinMdobYn  .arr);
  uvDebug("자필녹취여부               =[%s]", dcncApl300in21SpIn.holoRecYn   .arr);
  uvDebug("약관전달경로구분           =[%s]", dcncApl300in21SpIn.stplRecvDvsn.arr);
  uvDebug("양육자금전환신청여부       =[%s]", dcncApl300in21SpIn.rrfdCnvsRqyn.arr);
  uvDebug("지정대리인신청여부         =[%s]", dcncApl300in21SpIn.asmtAgntRqyn.arr);
  uvDebug("청각언어장애여부           =[%s]", dcncApl300in21SpIn.dumbYn      .arr);
  uvDebug("증권전달경로구분           =[%s]", dcncApl300in21SpIn.polyTrnmRtdv.arr);
  uvDebug("변액자필여부               =[%s]", dcncApl300in21SpIn.vrblHoloYn  .arr);
  uvDebug("접수처리자사번             =[%s]", dcncApl300in21SpIn.recpDlmnMpno.arr);
  uvDebug("모니터링방법구분           =[%s]", dcncApl300in21SpIn.mntrDvcd    .arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in21Sp(&basicParam,&dcncApl300in21SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN21_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN21_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("다시 조회후 접수하십시요");
    appReturnCode = 3425;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "다시 조회후 접수하십시요", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_dcncApl300in21Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in24Sp()
  Note          : 간편가입 관련 정보 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in24Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in24_sp_in  dcncApl300in24SpIn[(int) stp->cnvnCnt];

  int     ii  =   0;
  int     kk  =   0;

  uvDebug("SVncapl300in1_dcncApl300in24Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in24SpInClear(dcncApl300in24SpIn,(int) stp->cnvnCnt);

  for (ii = 0; ii < (int) stp->cnvnCnt; ii++) {
    if (strcmp((char*) stp->cnvnCrwcustId[ii].arr,"") != 0 || strlen((char*) stp->cnvnCrwcustId[ii].arr) > 0) {
      /* DBIO module 호출하기전 FML -> input 변수 setting                 */
      COPYVAR(dcncApl300in24SpIn[kk].polyNo       , stp->polyNo       );        /* 증권번호           */
      COPY   (dcncApl300in24SpIn[kk].admnNoDvsn   , "1"               );        /* 관리번호구분       */
      COPY   (dcncApl300in24SpIn[kk].cnttRcwcUsdv , "02"              );        /* 계약입출금사용구분 */
      COPYVAR(dcncApl300in24SpIn[kk].custId       , stp->cnvnCrwcustId[ii] );   /* 고객ID             */
      COPYVAR(dcncApl300in24SpIn[kk].finaOrgnCode , stp->cnvnFinaOrgnCode[ii]); /* 금융기관코드     */
      COPYVAR(dcncApl300in24SpIn[kk].finaOrgnDvsn , stp->cnvnFinaOrgnDvsn[ii]); /* 금융기관구분     */
      COPYVAR(dcncApl300in24SpIn[kk].acctCardNo   , stp->cnvnAcctCardNo[ii]);   /* 계좌_카드번호    */
      COPYVAR(dcncApl300in24SpIn[kk].bankBrchCode , stp->cnvnBankBrchCode[ii]); /* 은행지점코드     */
      COPYVAR(dcncApl300in24SpIn[kk].strtDate     , stp->strtDate);             /* 시작일자         */
      COPYVAR(dcncApl300in24SpIn[kk].dlngOrgnCode , stp->collOrgnCode);         /* 처리기관코드     */
      COPYVAR(dcncApl300in24SpIn[kk].rqstDate     , stp->crntDate);             /* 신청일자         */

      uvDebug("증권번호                   =[%s]", dcncApl300in24SpIn[kk].polyNo            .arr);
      uvDebug("고객ID                     =[%s]", dcncApl300in24SpIn[kk].custId            .arr);
      uvDebug("관리번호구분               =[%s]", dcncApl300in24SpIn[kk].admnNoDvsn        .arr);
      uvDebug("계약입출금사용구분         =[%s]", dcncApl300in24SpIn[kk].cnttRcwcUsdv      .arr);
      uvDebug("금융기관코드               =[%s]", dcncApl300in24SpIn[kk].finaOrgnCode      .arr);
      uvDebug("금융기관구분               =[%s]", dcncApl300in24SpIn[kk].finaOrgnDvsn      .arr);
      uvDebug("계좌_카드번호              =[%s]", dcncApl300in24SpIn[kk].acctCardNo        .arr);
      uvDebug("은행지점코드               =[%s]", dcncApl300in24SpIn[kk].bankBrchCode      .arr);
      uvDebug("시작일자                   =[%s]", dcncApl300in24SpIn[kk].strtDate          .arr);
      uvDebug("처리기관코드               =[%s]", dcncApl300in24SpIn[kk].dlngOrgnCode      .arr);
      uvDebug("신청일자                   =[%s]", dcncApl300in24SpIn[kk].rqstDate          .arr);

      kk++;
    }
  }

  if(kk == 0) {
    uvDebug("간편가입 무효계좌 존재하지 않음");
    uvDebug("SVncapl300in1_dcncApl300in24Sp End");
    return;
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(kk,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in24Sp(&basicParam,dcncApl300in24SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN24_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN24_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    uvDebug("간편가입증번 미존재");
  }

  uvDebug("SVncapl300in1_dcncApl300in24Sp End");

  return;
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in71Sp ()
  Note          : 간편고지여부 정보 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in71Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in71Sp";

  struct _denc_apl300in71_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in71SpInClear (&inSt );

  COPYVAR(inSt.polyNo      , stp->polyNo         ); /* 증권번호       */
  COPY   (inSt.lastChmnMpno, uvGetUserID()       ); /* 최종변경자사번 */
  COPY   (inSt.pgmId       , uvGetServiceName()  ); /* 프로그램ID     */
  COPYVAR(inSt.cnvnNotcYn1 , stp->cnvnNotcYn1    ); /* 간편고지여부1  */
  COPYVAR(inSt.cnvnNotcYn2 , stp->cnvnNotcYn2    ); /* 간편고지여부2  */
  COPYVAR(inSt.cnvnNotcYn3 , stp->cnvnNotcYn3    ); /* 간편고지여부3  */
  COPYVAR(inSt.strtDate    , stp->strtDate       ); /* 시작일자       */

  uvDebug("증권번호             = [%s]",(char *) inSt.polyNo      .arr);
  uvDebug("최종변경자사번       = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID           = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("간편고지여부1        = [%s]",(char *) inSt.cnvnNotcYn1 .arr);
  uvDebug("간편고지여부2        = [%s]",(char *) inSt.cnvnNotcYn2 .arr);
  uvDebug("간편고지여부3        = [%s]",(char *) inSt.cnvnNotcYn3 .arr);
  uvDebug("시작일자             = [%s]",(char *) inSt.strtDate    .arr);

  dencApl300in71Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN71_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN71_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

  return;

}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in47Sp()
  Note          : 계약부속정보 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in47Sp(struct stp_SVncapl300in1 *stp) {

  struct _dcnc_apl300in47_sp_in  dcncApl300in47SpIn;

  uvDebug("SVncapl300in1_dcncApl300in47Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in47SpInClear(&dcncApl300in47SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in47SpIn.commTrmtRqyn , stp->commTrmtRqyn); /* 통신해지신청여부   */
  COPYVAR(dcncApl300in47SpIn.bnfcAsmtAgyn , stp->bnfcAsmtAgyn); /* 수익자지정동의여부 */
  COPYVAR(dcncApl300in47SpIn.taxPrctYn    , stp->taxSelYn    ); /* 세금우대계약여부   */
  COPYVAR(dcncApl300in47SpIn.polyNo       , stp->polyNo      ); /* 증권번호           */
  COPYVAR(dcncApl300in47SpIn.spprAuwdPyot , stp->spprAuwdPyot); /* 특약보험료자동인출납입옵션 */
  COPYVAR(dcncApl300in47SpIn.autoRejnAgyn , stp->autoRejnAgyn); /* 오토전환옵션목표수익률 */
  COPYVAR(dcncApl300in47SpIn.rejtMsgAgyn  , stp->rejtMsgAgyn ); /* 승낙거절LMS동의여부 */

  uvDebug("통신해지신청여부          =[%s]", dcncApl300in47SpIn.commTrmtRqyn.arr);
  uvDebug("수익자지정동의여부        =[%s]", dcncApl300in47SpIn.bnfcAsmtAgyn.arr);
  uvDebug("과세여부                  =[%s]", dcncApl300in47SpIn.taxPrctYn   .arr);
  uvDebug("증권번호                  =[%s]", dcncApl300in47SpIn.polyNo      .arr);
  uvDebug("특약보험료자동인출납입옵션=[%s]", dcncApl300in47SpIn.spprAuwdPyot.arr);
  uvDebug("오토전환옵션목표수익률    =[%s]", dcncApl300in47SpIn.autoRejnAgyn.arr);
  uvDebug("승낙거절LMS동의여부       =[%s]", dcncApl300in47SpIn.rejtMsgAgyn .arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in47Sp(&basicParam,&dcncApl300in47SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN47_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN47_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("다시 조회후 접수하십시요");
    appReturnCode = 3425;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "다시 조회후 접수하십시요", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_dcncApl300in47Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in02Sp()
  Note          : 가입상품 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in02Sp(struct stp_SVncapl300in1 *stp) {
  int ii = 0;

  struct _dcnc_apl300in02_sp_in  dcncApl300in02SpIn[DCNC_APL300IN02_SP_RQSIZE];

  uvDebug("SVncapl300in1_dcncApl300in02Sp Start");
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in02SpInClear(dcncApl300in02SpIn, DCNC_APL300IN02_SP_RQSIZE);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  for (ii = 0; ii < stp->cjgCnt; ii++) {
    COPYVAR(dcncApl300in02SpIn[ii].polyNo      , stp->polyNo             ); /* 증권번호         */
    /* CMNC_judgMainChck_CC에서 가입상품의 순서가 변경될 수 있어 상품코드_세,목으로 변경 2013.02.05 */
    /*      dcncApl300in02SpIn[ii].joinGoodNo  = stp->cjgjoinGoodNo  [ii] ;    가입상품번호     */
    COPYVAR(dcncApl300in02SpIn[ii].goodCodeDtal, stp->cjggoodCodeDtal[ii]); /* 상품코드_세      */
    COPYVAR(dcncApl300in02SpIn[ii].goodCodeItem, stp->cjggoodCodeItem[ii]); /* 상품코드_목      */

    COPY   (dcncApl300in02SpIn[ii].lastChmnMpno, uvGetUserID()           ); /* 최종변경자사번   */
    COPY   (dcncApl300in02SpIn[ii].pgmIdI      , "SVncapl300in1"         ); /* 프로그램ID       */
    COPYVAR(dcncApl300in02SpIn[ii].cnttDate    , stp->cnttDate           ); /* 계약일자         */
    COPYVAR(dcncApl300in02SpIn[ii].exprDate    , stp->cjgexprDate    [ii]); /* 만기일자         */
    COPYVAR(dcncApl300in02SpIn[ii].strtDate    , stp->strtDate           ); /* 시작일자         */
    COPYVAR(dcncApl300in02SpIn[ii].cnttStatCode, stp->cnttStatCode       ); /* 계약상태코드     */
    COPYVAR(dcncApl300in02SpIn[ii].cnttStatDtcd, stp->cnttStatDtcd       ); /* 계약상태상세코드 */

    if(strcmp((char *)stp->cjggoodRelnCode[ii].arr, "1") ==0) {
      COPYVAR(dcncApl300in02SpIn[ii].anntPaymStdt,   stp->anntPaymStdt); /* 연금지급개시일자 */
    }
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  setInitDBIO((int) stp->cjgCnt,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in02Sp(&basicParam,dcncApl300in02SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN02_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN02_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl300in02Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl100in23Sp()
  Note          : 계약입출금등록정보
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl100in23Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl100in23_sp_in  dcncApl100in23SpIn;

  uvDebug("SVncapl300in1_dcncApl100in23Sp Start");
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl100in23SpInClear(&dcncApl100in23SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl100in23SpIn.admnNo,  stp->polyNo);          /* 관리번호 */
  COPY(dcncApl100in23SpIn.admnNoDvsn,  "1");                 /* 관리번호구분 */
  COPYVAR(dcncApl100in23SpIn.stddDate,  stp->strtDate);      /* 기준일자 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl100in23Sp(&basicParam,&dcncApl100in23SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL100IN23_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL100IN23_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl100in23Sp End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl100in18Sp()
  Note          : 계약입출금등록정보
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl100in18Sp(struct stp_SVncapl300in1 *stp) {
  int     ii  =   0;
  int     kk  =   0;

  struct _dcnc_apl100in18_sp_in  dcncApl100in18SpIn[5];

  uvDebug("SVncapl300in1_dcncApl100in18Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl100in18SpInClear(dcncApl100in18SpIn,5);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */

  /* 초회 계약입출금 보험료납입                                       */
  if ((strncmp((char *) stp->ftprRecvMdcd.arr, "81", 2) == 0)  ||
      (strncmp((char *) stp->ftprRecvMdcd.arr, "83", 2) == 0)  ||
      (strncmp((char *) stp->ftprRecvMdcd.arr, "84", 2) == 0)) {
    COPY(dcncApl100in18SpIn[kk].admnNoDvsn,   "1");           /* 관리번호구분 */
    COPYVAR(dcncApl100in18SpIn[kk].admnNo,   stp->polyNo);        /* 관리번호 */
    COPY(dcncApl100in18SpIn[kk].cnttRcwcUsdv,   "01");  /* 계약입출금사용구분 */
    COPY(dcncApl100in18SpIn[kk].lastChmnMpno,   uvGetUserID()); /* 최종변경자사번 */
    COPY(dcncApl100in18SpIn[kk].pgmIdI,   "SVncapl300in1");     /* 프로그램ID */
    COPYVAR(dcncApl100in18SpIn[kk].custId,   stp->crwcustId[0]);    /* 고객ID */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnCode,   stp->finaOrgnCode[0]); /* 금융기관코드 */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnDvsn,   stp->finaOrgnDvsn[0]); /* 금융기관구분 */
    COPYVAR(dcncApl100in18SpIn[kk].acctCardNo,   stp->acctCardNo[0]); /* 계좌_카드번호 */
    COPYVAR(dcncApl100in18SpIn[kk].cardVlidEdym,   stp->cardVlidEdym[0]); /* 카드유효만료년월 */
    COPYVAR(dcncApl100in18SpIn[kk].bankBrchCode,   stp->bankBrchCode[0]); /* 은행지점코드 */
    COPYVAR(dcncApl100in18SpIn[kk].strtDate,   stp->strtDate);    /* 시작일자 */
    COPY(dcncApl100in18SpIn[kk].endDate,   "99991231");           /* 종료일자 */
    COPY(dcncApl100in18SpIn[kk].delYn,   "N");                    /* 삭제여부 */
    COPYVAR(dcncApl100in18SpIn[kk].trnfHopeDd,   stp->trnfHopeDd[0]); /* 이체희망일 */
    COPYVAR(dcncApl100in18SpIn[kk].dlngOrgnCode,   stp->collOrgnCode); /* 처리기관코드 */
    COPYVAR(dcncApl100in18SpIn[kk].rqstDate,   stp->crntDate);    /* 신청일자 */
    kk++;
  }

  /* 초회 계약입출금 보험료반환                                       */
  if ((strncmp((char *) stp->ftprRecvMdcd.arr, "81", 2) == 0)  \
      ||  (strncmp((char *) stp->ftprRecvMdcd.arr, "83", 2) == 0)) {
    COPY(dcncApl100in18SpIn[kk].admnNoDvsn,   "1");           /* 관리번호구분 */
    COPYVAR(dcncApl100in18SpIn[kk].admnNo,   stp->polyNo);        /* 관리번호 */
    COPY(dcncApl100in18SpIn[kk].cnttRcwcUsdv,   "02");  /* 계약입출금사용구분 */
    COPY(dcncApl100in18SpIn[kk].lastChmnMpno,   uvGetUserID()); /* 최종변경자사번 */
    COPY(dcncApl100in18SpIn[kk].pgmIdI,   "SVncapl300in1");     /* 프로그램ID */
    COPYVAR(dcncApl100in18SpIn[kk].custId,   stp->crwcustId[0]);    /* 고객ID */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnCode,   stp->finaOrgnCode[0]); /* 금융기관코드 */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnDvsn,   stp->finaOrgnDvsn[0]); /* 금융기관구분 */
    COPYVAR(dcncApl100in18SpIn[kk].acctCardNo,   stp->acctCardNo[0]); /* 계좌_카드번호 */
    COPYVAR(dcncApl100in18SpIn[kk].cardVlidEdym,   stp->cardVlidEdym[0]); /* 카드유효만료년월 */
    COPYVAR(dcncApl100in18SpIn[kk].bankBrchCode,   stp->bankBrchCode[0]); /* 은행지점코드 */
    COPYVAR(dcncApl100in18SpIn[kk].strtDate,   stp->strtDate);    /* 시작일자 */
    COPY(dcncApl100in18SpIn[kk].endDate,   "99991231");           /* 종료일자 */
    COPY(dcncApl100in18SpIn[kk].delYn,   "N");                    /* 삭제여부 */
    COPYVAR(dcncApl100in18SpIn[kk].trnfHopeDd,   stp->trnfHopeDd[0]); /* 이체희망일 */
    COPYVAR(dcncApl100in18SpIn[kk].dlngOrgnCode,   stp->collOrgnCode); /* 처리기관코드 */
    COPYVAR(dcncApl100in18SpIn[kk].rqstDate,   stp->crntDate);    /* 신청일자 */
    kk++;
  }

  /* 계속 계약입출금 등록정보                                         */
  if (((strncmp((char *) stp->collMetdCode.arr, "01", 2) == 0) ||
       (strncmp((char *) stp->collMetdCode.arr, "04", 2) == 0)) &&
      ((char *) stp->acctCardNo[1].arr[0] != 0x00)) {

    for (ii = 0; ii < 3; ii++) {
      if (strncmp((char *) stp->cnttRcwcUsdv[ii].arr, "Y", 1) != 0) {
        continue;
      }
      COPY(dcncApl100in18SpIn[kk].admnNoDvsn,   "1");         /* 관리번호구분 */
      COPYVAR(dcncApl100in18SpIn[kk].admnNo,   stp->polyNo);      /* 관리번호 */
      if (ii == 0) {
        COPY(dcncApl100in18SpIn[kk].cnttRcwcUsdv,   "03"); /* 계약입출금사용구분 */
      } else if (ii == 1) {
        COPY(dcncApl100in18SpIn[kk].cnttRcwcUsdv,   "05"); /* 계약입출금사용구분 */
      } else {
        COPY(dcncApl100in18SpIn[kk].cnttRcwcUsdv,   "02"); /* 계약입출금사용구분 */
      }
      COPY(dcncApl100in18SpIn[kk].lastChmnMpno,   uvGetUserID()); /* 최종변경자사번 */
      COPY(dcncApl100in18SpIn[kk].pgmIdI,   "SVncapl300in1");   /* 프로그램ID */
      COPYVAR(dcncApl100in18SpIn[kk].custId,   stp->crwcustId[1]);  /* 고객ID */
      COPYVAR(dcncApl100in18SpIn[kk].finaOrgnCode,   stp->finaOrgnCode[1]); /* 금융기관코드 */
      COPYVAR(dcncApl100in18SpIn[kk].finaOrgnDvsn,   stp->finaOrgnDvsn[1]); /* 금융기관구분 */
      COPYVAR(dcncApl100in18SpIn[kk].acctCardNo,   stp->acctCardNo[1]); /* 계좌_카드번호 */
      COPYVAR(dcncApl100in18SpIn[kk].cardVlidEdym,   stp->cardVlidEdym[1]); /* 카드유효만료년월 */
      COPYVAR(dcncApl100in18SpIn[kk].bankBrchCode,   stp->bankBrchCode[1]); /* 은행지점코드 */
      COPYVAR(dcncApl100in18SpIn[kk].strtDate,   stp->strtDate);  /* 시작일자 */
      COPY(dcncApl100in18SpIn[kk].endDate,   "99991231");         /* 종료일자 */
      COPY(dcncApl100in18SpIn[kk].delYn,   "N");                  /* 삭제여부 */
      COPYVAR(dcncApl100in18SpIn[kk].trnfHopeDd,   stp->trnfHopeDd[1]); /* 이체희망일 */
      COPYVAR(dcncApl100in18SpIn[kk].dlngOrgnCode,   stp->collOrgnCode); /* 처리기관코드 */
      COPYVAR(dcncApl100in18SpIn[kk].rqstDate,   stp->crntDate);  /* 신청일자 */

      kk++;
    }

    /* 분할/배당금 자동송금 신청시 송금계좌 자동 등록   */
    if (strncmp((char *) stp->speaDivdAtSndYn.arr, "Y", 1) == 0) {
      COPY(dcncApl100in18SpIn[kk].admnNoDvsn,   "1");         /* 관리번호구분 */
      COPYVAR(dcncApl100in18SpIn[kk].admnNo,   stp->polyNo);      /* 관리번호 */
      COPY(dcncApl100in18SpIn[kk].cnttRcwcUsdv,   "08"); /* 계약입출금사용구분 */
      COPY(dcncApl100in18SpIn[kk].lastChmnMpno,   uvGetUserID()); /* 최종변경자사번 */
      COPY(dcncApl100in18SpIn[kk].pgmIdI,   "SVncapl300in1");   /* 프로그램ID */
      COPYVAR(dcncApl100in18SpIn[kk].custId,   stp->crwcustId[1]);  /* 고객ID */
      COPYVAR(dcncApl100in18SpIn[kk].finaOrgnCode,   stp->finaOrgnCode[1]); /* 금융기관코드 */
      COPYVAR(dcncApl100in18SpIn[kk].finaOrgnDvsn,   stp->finaOrgnDvsn[1]); /* 금융기관구분 */
      COPYVAR(dcncApl100in18SpIn[kk].acctCardNo,   stp->acctCardNo[1]); /* 계좌_카드번호 */
      COPYVAR(dcncApl100in18SpIn[kk].cardVlidEdym,   stp->cardVlidEdym[1]); /* 카드유효만료년월 */
      COPYVAR(dcncApl100in18SpIn[kk].bankBrchCode,   stp->bankBrchCode[1]); /* 은행지점코드 */
      COPYVAR(dcncApl100in18SpIn[kk].strtDate,   stp->strtDate);  /* 시작일자 */
      COPY(dcncApl100in18SpIn[kk].endDate,   "99991231");         /* 종료일자 */
      COPY(dcncApl100in18SpIn[kk].delYn,   "N");                  /* 삭제여부 */
      COPYVAR(dcncApl100in18SpIn[kk].trnfHopeDd,   stp->trnfHopeDd[1]); /* 이체희망일 */
      COPYVAR(dcncApl100in18SpIn[kk].dlngOrgnCode,   stp->collOrgnCode); /* 처리기관코드 */
      COPYVAR(dcncApl100in18SpIn[kk].rqstDate,   stp->crntDate);  /* 신청일자 */

      kk++;
    }
  }

  if (strcmp((char*) stp->crwcustId[4].arr,"") != 0 || strlen((char*) stp->crwcustId[4].arr) > 0) {
    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dcncApl100in18SpIn[kk].admnNo       , stp->polyNo         );  /* 증권번호          */
    COPY   (dcncApl100in18SpIn[kk].admnNoDvsn   , "1"                 );  /* 관리번호구분      */
    COPY   (dcncApl100in18SpIn[kk].cnttRcwcUsdv , "06"                );  /* 계약입출금사용구분*/
    COPY   (dcncApl100in18SpIn[kk].lastChmnMpno , uvGetUserID()       );  /* 최종변경자사번    */
    COPY   (dcncApl100in18SpIn[kk].pgmIdI       , "SVncapl300in1"     );  /* 프로그램ID        */
    COPYVAR(dcncApl100in18SpIn[kk].custId       , stp->crwcustId[4]   );  /* 고객ID            */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnCode , stp->finaOrgnCode[4]);  /* 금융기관코드      */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnDvsn , stp->finaOrgnDvsn[4]);  /* 금융기관구분      */
    COPYVAR(dcncApl100in18SpIn[kk].acctCardNo   , stp->acctCardNo[4]  );  /* 계좌_카드번호     */
    COPYVAR(dcncApl100in18SpIn[kk].bankBrchCode , stp->bankBrchCode[4]);  /* 은행지점코드      */
    COPYVAR(dcncApl100in18SpIn[kk].strtDate     , stp->strtDate       );  /* 시작일자          */
    COPY   (dcncApl100in18SpIn[kk].endDate      , "99991231"          );  /* 종료일자          */
    COPY   (dcncApl100in18SpIn[kk].delYn        , "N"                 );  /* 삭제여부          */
    COPY   (dcncApl100in18SpIn[kk].trnfHopeDd   , ""                  );  /* 이체희망일        */
    COPYVAR(dcncApl100in18SpIn[kk].dlngOrgnCode , stp->collOrgnCode   );  /* 처리기관코드      */
    COPYVAR(dcncApl100in18SpIn[kk].rqstDate     , stp->crntDate       );  /* 신청일자          */

    uvDebug("증권번호                   =[%s]", dcncApl100in18SpIn[kk].admnNo            .arr);
    uvDebug("고객ID                     =[%s]", dcncApl100in18SpIn[kk].custId            .arr);
    uvDebug("관리번호구분               =[%s]", dcncApl100in18SpIn[kk].admnNoDvsn        .arr);
    uvDebug("계약입출금사용구분         =[%s]", dcncApl100in18SpIn[kk].cnttRcwcUsdv      .arr);
    uvDebug("금융기관코드               =[%s]", dcncApl100in18SpIn[kk].finaOrgnCode      .arr);
    uvDebug("금융기관구분               =[%s]", dcncApl100in18SpIn[kk].finaOrgnDvsn      .arr);
    uvDebug("계좌_카드번호              =[%s]", dcncApl100in18SpIn[kk].acctCardNo        .arr);
    uvDebug("은행지점코드               =[%s]", dcncApl100in18SpIn[kk].bankBrchCode      .arr);
    uvDebug("시작일자                   =[%s]", dcncApl100in18SpIn[kk].strtDate          .arr);
    uvDebug("처리기관코드               =[%s]", dcncApl100in18SpIn[kk].dlngOrgnCode      .arr);
    uvDebug("신청일자                   =[%s]", dcncApl100in18SpIn[kk].rqstDate          .arr);

    kk++;
  }

  if (strcmp((char*) stp->acctCardNo[5].arr,"") != 0 || strlen((char*) stp->acctCardNo[5].arr) > 0) {
    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dcncApl100in18SpIn[kk].admnNo       , stp->polyNo         );  /* 증권번호          */
    COPY   (dcncApl100in18SpIn[kk].admnNoDvsn   , "1"                 );  /* 관리번호구분      */
    COPY   (dcncApl100in18SpIn[kk].cnttRcwcUsdv , "06"                );  /* 계약입출금사용구분*/
    COPY   (dcncApl100in18SpIn[kk].lastChmnMpno , uvGetUserID()       );  /* 최종변경자사번    */
    COPY   (dcncApl100in18SpIn[kk].pgmIdI       , "SVncapl300in1"     );  /* 프로그램ID        */
    COPYVAR(dcncApl100in18SpIn[kk].custId       , stp->crwcustId[5]   );  /* 고객ID            */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnCode , stp->finaOrgnCode[5]);  /* 금융기관코드      */
    COPYVAR(dcncApl100in18SpIn[kk].finaOrgnDvsn , stp->finaOrgnDvsn[5]);  /* 금융기관구분      */
    COPYVAR(dcncApl100in18SpIn[kk].acctCardNo   , stp->acctCardNo[5]  );  /* 계좌_카드번호     */
    COPYVAR(dcncApl100in18SpIn[kk].bankBrchCode , stp->bankBrchCode[5]);  /* 은행지점코드      */
    COPYVAR(dcncApl100in18SpIn[kk].strtDate     , stp->strtDate       );  /* 시작일자          */
    COPY   (dcncApl100in18SpIn[kk].endDate      , "99991231"          );  /* 종료일자          */
    COPY   (dcncApl100in18SpIn[kk].delYn        , "N"                 );  /* 삭제여부          */
    COPY   (dcncApl100in18SpIn[kk].trnfHopeDd   , ""                  );  /* 이체희망일        */
    COPYVAR(dcncApl100in18SpIn[kk].dlngOrgnCode , stp->collOrgnCode   );  /* 처리기관코드      */
    COPYVAR(dcncApl100in18SpIn[kk].rqstDate     , stp->crntDate       );  /* 신청일자          */

    uvDebug("증권번호                   =[%s]", dcncApl100in18SpIn[kk].admnNo            .arr);
    uvDebug("고객ID                     =[%s]", dcncApl100in18SpIn[kk].custId            .arr);
    uvDebug("관리번호구분               =[%s]", dcncApl100in18SpIn[kk].admnNoDvsn        .arr);
    uvDebug("계약입출금사용구분         =[%s]", dcncApl100in18SpIn[kk].cnttRcwcUsdv      .arr);
    uvDebug("금융기관코드               =[%s]", dcncApl100in18SpIn[kk].finaOrgnCode      .arr);
    uvDebug("금융기관구분               =[%s]", dcncApl100in18SpIn[kk].finaOrgnDvsn      .arr);
    uvDebug("계좌_카드번호              =[%s]", dcncApl100in18SpIn[kk].acctCardNo        .arr);
    uvDebug("은행지점코드               =[%s]", dcncApl100in18SpIn[kk].bankBrchCode      .arr);
    uvDebug("시작일자                   =[%s]", dcncApl100in18SpIn[kk].strtDate          .arr);
    uvDebug("처리기관코드               =[%s]", dcncApl100in18SpIn[kk].dlngOrgnCode      .arr);
    uvDebug("신청일자                   =[%s]", dcncApl100in18SpIn[kk].rqstDate          .arr);

    kk++;
  }


  if (kk != 0) {
    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(kk,DBCURSOR_CLOSE);

    /* DBIO module 호출                                             */

    dcncApl100in18Sp(&basicParam,dcncApl100in18SpIn);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL100IN18_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DCNC_APL100IN18_SP) 호출 Error.",  \
          getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  }

  uvDebug("SVncapl300in1_dcncApl100in18Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in19Sp()
  Note          : 계약관계자수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in19Sp(struct stp_SVncapl300in1 *stp) {
  int     ii  =   0;
  int     kk  =   0;
  struct _dcnc_apl300in19_sp_in  dcncApl300in19SpIn[15];

  uvDebug("SVncapl300in1_dcncApl300in19Sp    Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in19SpInClear(dcncApl300in19SpIn,15);

  for (ii = 0; ii < stp->crmCnt; ii++) {
    /* 2004.11.01 신진혁 수정, 계약관계자 모두 수정함                     */
    /* if ((strncmp((char *)stp->custRoleCode[ii].arr, "21", 2) != 0)  \  */
    /* &&  (strncmp((char *)stp->custRoleCode[ii].arr, "22", 2) != 0)) {  */
    /*     continue;                                                      */
    /* }                                                                  */
    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
            dcncApl300in19SpIn[kk].cnttPrtrNo   =  stp->cnttPrtrNo   [ii] ; /* 계약관계자번호 */
            dcncApl300in19SpIn[kk].insuNo       =  stp->insuNo       [ii] ; /* 피보험자번호 */
    COPY   (dcncApl300in19SpIn[kk].lastChmnMpno ,   uvGetUserID()        ); /* 최종변경자사번 */
    COPY   (dcncApl300in19SpIn[kk].pgmIdI       ,   "SVncapl300in1"      ); /* 프로그램ID */
    COPYVAR(dcncApl300in19SpIn[kk].mediKindCode ,   stp->mediKindCode[ii]); /* 진단종류코드 */
    COPYVAR(dcncApl300in19SpIn[kk].occpCode     ,   stp->occpCode    [ii]); /* 직종코드 */
    COPYVAR(dcncApl300in19SpIn[kk].hobyCode     ,   stp->hobyCode    [ii]); /* 취미코드 */
    COPYVAR(dcncApl300in19SpIn[kk].drveCatpCode ,   stp->drveCatpCode[ii]); /* 운전차종코드 */
    COPYVAR(dcncApl300in19SpIn[kk].riskGradCode ,   stp->riskGradCode[ii]); /* 위험등급코드 */
    COPYVAR(dcncApl300in19SpIn[kk].wlisDtivObyn ,   stp->wlisDtivObyn[ii]); /* 종신보험의무조사대상여부 */
    COPYVAR(dcncApl300in19SpIn[kk].prevMediObyn ,   stp->prevMediObyn[ii]); /* 선진단대상여부 */
    COPYVAR(dcncApl300in19SpIn[kk].mdobXtrtRscd ,   stp->mdobXtrtRscd[ii]); /* 진단대상발췌사유코드 */
    COPYVAR(dcncApl300in19SpIn[kk].strtDate     ,   stp->strtDate        ); /* 시작일자 */
    COPYVAR(dcncApl300in19SpIn[kk].splsBodyYn   ,   stp->splsBodyYn  [ii]); /* 초과체여부 */
    COPYVAR(dcncApl300in19SpIn[kk].polyNo       ,   stp->polyNo          ); /* 증권번호 */
    COPYVAR(dcncApl300in19SpIn[kk].custId       ,   stp->custId      [ii]); /* 고객ID */
    /* 2005.09.20 상해보험 관련 상해직종,상해위험등급 신설, 신진혁           */
    COPYVAR(dcncApl300in19SpIn[kk].injrOccpCode ,   stp->injrOccpCode[ii]); /* 상해직종코드        (C) */
    COPYVAR(dcncApl300in19SpIn[kk].injrRiskGrcd ,   stp->injrRiskGrcd[ii]); /* 상해위험등급코드    (C) */
    kk++;
  }
  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(kk,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in19Sp(&basicParam,dcncApl300in19SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN19_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN19_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  uvDebug("SVncapl300in1_dcncApl300in19Sp    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in01Sp()
  Note          : 보험검진대상
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in01Sp(struct stp_SVncapl300in1 *stp) {
  int     ii  =   0;
  int     kk  =   0;

  struct _dcnc_apl300in01_sp_in  dcncApl300in01SpIn[DCNC_APL300IN01_SP_RQSIZE];

  uvDebug("SVncapl300in1_dcncApl300in01Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in01SpInClear(dcncApl300in01SpIn,DCNC_APL300IN01_SP_RQSIZE);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  /* 계약관계자가 피보험자가 아니거나, 무진단이거나,
     발췌사유코드가 F1, F2 (6개월내 진단건존재) 인 경우에는 SKIP
     2004.11.22 신진혁                                                  */

  for (ii = 0; ii < stp->crmCnt; ii++) {
    if ((strncmp((char *) stp->custRoleCode[ii].arr, "2", 1) != 0) \
        ||  (strncmp((char *) stp->mediKindCode[ii].arr, "00", 2) == 0) \
        ||  (strncmp((char *) stp->mdobXtrtRscd[ii].arr, "F",  1) == 0)
        ||  ((char *) stp->mediKindCode[ii].arr[0] == 0x00)) {
      continue;
    }

    COPYVAR(dcncApl300in01SpIn[kk].mediObjtCtid,   stp->custId[ii]); /* 검진대상고객ID */
    COPY(dcncApl300in01SpIn[kk].lastChmnMpno,   uvGetUserID()); /* 최종변경자사번 */
    COPY(dcncApl300in01SpIn[kk].pgmIdI,   "SVncapl300in1");     /* 프로그램ID */
    COPY(dcncApl300in01SpIn[kk].mediObjtStcd,   "01");    /* 진단대상상태코드 */
    COPYVAR(dcncApl300in01SpIn[kk].mdobXtrtRscd,   stp->mdobXtrtRscd[ii]); /* 진단대상발췌사유코드 */
    COPYVAR(dcncApl300in01SpIn[kk].prevMediYn,   stp->prevMediObyn[ii]); /* 선진단여부 */
    COPYVAR(dcncApl300in01SpIn[kk].custRoleCode,   stp->custRoleCode[ii]); /* 고객역할코드 */

    if (strncmp((char *) stp->mediKindCode[ii].arr, "02", 2) == 0) {
      dcncApl300in01SpIn[kk].pvctMediAmt  =   stp->nrmlMediAmt[ii]; /* 기계약진단금액(보통) */
    } else if (strncmp((char *) stp->mediKindCode[ii].arr, "03", 2) == 0) {
      dcncApl300in01SpIn[kk].pvctMediAmt  =   stp->spclMediAmt[ii]; /* 기계약진단금액(특별) */
    } else {
      dcncApl300in01SpIn[kk].pvctMediAmt  =   0;      /* 기계약진단금액(그외) */
    }

    COPYVAR(dcncApl300in01SpIn[kk].mediKindCode,   stp->mediKindCode[ii]); /* 진단종류코드 */
    COPY(dcncApl300in01SpIn[kk].bsnsDvcdNc,   "11");   /* 업무구분코드_신계약 */
    COPYVAR(dcncApl300in01SpIn[kk].causPyno,   stp->polyNo);      /* 증권번호 */
    COPY(dcncApl300in01SpIn[kk].mediExecYn,   "N");           /* 진단실시여부 */
    dcncApl300in01SpIn[kk].ndsnMediCost =   0;              /* 미확정진단비용 */
    COPY(dcncApl300in01SpIn[kk].vistMediExyn,   "N");     /* 방문진단추출여부 */
    dcncApl300in01SpIn[kk].medoPublCnt  =   0;              /* 진단서발행횟수 */
    COPYVAR(dcncApl300in01SpIn[kk].rqstDate,   stp->crntDate);    /* 요청일자 */
    COPYVAR(dcncApl300in01SpIn[kk].chrgOffcCode,   stp->clltOrgnCode); /* 담당영업소코드 */
    COPY(dcncApl300in01SpIn[kk].medoRecpStcd,   "00");  /* 진단서접수상태코드 */
    NCOPYVAR(dcncApl300in01SpIn[kk].cnttPrrmYm,   stp->cnttDate,      6); /* 계약예정년월 */
    COPYVAR(dcncApl300in01SpIn[kk].rispObjtOgcd,   stp->clltOrgnCode); /* 담당영업소코드 */

    kk++;
  }

  if (kk != 0) {
    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(kk,DBCURSOR_CLOSE);

    /* DBIO module 호출                                             */

    dcncApl300in01Sp(&basicParam,dcncApl300in01SpIn);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() == SQL_NOT_FOUND) {
      EXEC SQL ROLLBACK;
      uvDebug("해당 기관의 검진기관관련 정보가 없습니다.");
      appReturnCode = 3890;
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "해당 기관의 검진기관관련 정보가 없습니다.", "SVncapl300in1");
    }
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL300IN01_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DCNC_APL300IN01_SP) 호출 Error.",  \
          getCDALErrMsg());
    }
    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  }

  uvDebug("SVncapl300in1_dcncApl300in01Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in07Sp()
  Note          : 계약조사수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in07Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in07_sp_in  dcncApl300in07SpIn;

  uvDebug("SVncapl300in1_dcncApl300in07Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in07SpInClear(&dcncApl300in07SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in07SpIn.cnttReviDate,   stp->cnttDate); /* 계약_부활일자 */
  COPYVAR(dcncApl300in07SpIn.polyNo,   stp->polyNo);              /* 증권번호 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in07Sp(&basicParam,&dcncApl300in07SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN07_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN07_SP) 호출 Error.",  \
        getCDALErrMsg());
  }
  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */

  uvDebug("SVncapl300in1_dcncApl300in07Sp  End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in14Sp()
  Note          : 보험료수금정보
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in14Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in14_sp_in  dcncApl300in14SpIn;

  uvDebug("SVncapl300in1_dcncApl300in14Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in14SpInClear(&dcncApl300in14SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in14SpIn.polyNo,   stp->polyNo);              /* 증권번호 */
  COPYVAR(dcncApl300in14SpIn.collMetdCode,   stp->collMetdCode); /* 수금방법코드 */
  if ((strncmp((char *) stp->ftprRecvMdcd.arr, "81", 2) == 0) ||
      (strncmp((char *) stp->ftprRecvMdcd.arr, "84", 2) == 0)) {
    dcncApl300in14SpIn.lastPaymCnt =   1;                         /* 최종납회 */
    NCOPYVAR(dcncApl300in14SpIn.lastPaymYm,   stp->cnttDate,  6); /* 최종납입년월 */
  }

  uvDebug("dcncApl300in14SpIn.polyNo      [%s] ",(char *) dcncApl300in14SpIn.polyNo      .arr);
  uvDebug("dcncApl300in14SpIn.collMetdCode[%s] ",(char *) dcncApl300in14SpIn.collMetdCode.arr);
  uvDebug("dcncApl300in14SpIn.lastPaymCnt [%.f]",dcncApl300in14SpIn.lastPaymCnt);
  uvDebug("dcncApl300in14SpIn.lastPaymYm  [%.f]",dcncApl300in14SpIn.lastPaymYm);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in14Sp(&basicParam,&dcncApl300in14SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN14_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN14_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  uvDebug("SVncapl300in1_dcncApl300in14Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencUiscompci001Sp()
  Note          : 보험료수금정보 수정(타사이전용)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencUiscompci001Sp(struct stp_SVncapl300in1 *stp) {
  struct _denc_uiscompci_001_sp_in  dencUiscompci001SpIn;

  uvDebug("SVncapl300in1_dencUiscompci001Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencUiscompci001SpInClear(&dencUiscompci001SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dencUiscompci001SpIn.polyNo,   stp->polyNo);              /* 증권번호 */

  uvDebug("dencUiscompci001SpIn.polyNo      [%s] ",(char *) dencUiscompci001SpIn.polyNo      .arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dencUiscompci001Sp(&basicParam,&dencUiscompci001SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_UISCOMPCI_001_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DENC_UISCOMPCI_001_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  uvDebug("SVncapl300in1_dencUiscompci001Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_AutoLoanRequest()
  Note          : 자동대출납입신청
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_AutoLoanRequest(struct stp_SVncapl300in1 *stp) {
  CMCP_AutoLoanRequest    alr;

  uvDebug("SVncapl300in1_AutoLoanRequest    Start");

  memset(&alr,    0x00,   sizeof(CMCP_AutoLoanRequest));

  COPYVAR(alr.polyNo,   stp->polyNo);                   /* IN  증권번호 */
  COPY(alr.recpTypeCode,   "99");                 /* IN  납입신청접수유형코드 */
  COPY(alr.rqstChncDvsn,   "1");                        /* IN  신청시기구분 */
  COPYVAR(alr.dlngManMpno,   stp->collLpPrno);          /* IN  처리자사번 */
  COPYVAR(alr.dlngOrgnCode,   stp->collOrgnCode);       /* IN  처리기관코드 */

  if (CMCP_AutoLoanRequest_CC(&alr) == FAIL) {
    EXEC SQL ROLLBACK;
    uvDebug("자동대출납입신청 함수 호출 오류");
    appReturnCode = 4416;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "자동대출납입신청 함수 호출 오류", "SVncapl300in1");
  }
  uvDebug("SVncapl300in1_AutoLoanRequest    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in04Sp()
  Note          : 계약고지정보입력
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in04Sp(struct stp_SVncapl300in1 *stp) {
  int     ii = 0;
  int     jj = 0;

  struct _dcnc_apl300in45_sp_out dcncApl300in45SpOut[4];
  struct _dcnc_apl300in45_sp_in  dcncApl300in45SpIn[DCNC_APL300IN45_SP_RQSIZE];

  uvDebug("SVncapl300in1_dcncApl300in45Sp Start  1 ");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  /* dcncApl300in45SpInClear(dcncApl300in45SpIn,(int)stp->cniCnt); */
  dcncApl300in45SpInClear(dcncApl300in45SpIn,DCNC_APL300IN45_SP_RQSIZE);

  for (ii = 0; ii < (int) stp->cniCnt; ii++) {
    uvDebug("고객ID [%s] [%d]",(char *) stp->cniCustId[ii].arr, strlen((char *) stp->cniCustId[ii].arr));
    /* 주니어CI,UL 태아인 경우 고지정보 skip */
    if ((strlen((char *) stp->cniCustId[ii].arr) == 0)            ||
        (strcmp((char *) stp->cniCustId[ii].arr,"8009999998") == 0)) {
      continue;
    }

    uvDebug("고객ID [%s] [%d]",(char *) stp->cniCustId[ii].arr, strlen((char *) stp->cniCustId[ii].arr));
    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dcncApl300in45SpIn[jj].custId,   stp->cniCustId[ii]);
    COPY(dcncApl300in45SpIn[jj].dshsCnfmRtdv,   "01");
    COPY(dcncApl300in45SpIn[jj].notcCanoDvsn,   "1");
    COPYVAR(dcncApl300in45SpIn[jj].notcCano,   stp->polyNo);
    COPYVAR(dcncApl300in45SpIn[jj].notcYn,   stp->notcYn[ii]);
    dcncApl300in45SpIn[jj].wekyDrnkCnt  =   stp->wekyDrnkCnt[ii];
    COPYVAR(dcncApl300in45SpIn[jj].drnkKdcd,   stp->drnkKdcd[ii]);
    dcncApl300in45SpIn[jj].t01DrnkQnty  =   stp->t01DrnkQnty[ii];
    dcncApl300in45SpIn[jj].dalySmokQnty =   stp->dalySmokQnty[ii];
    dcncApl300in45SpIn[jj].smokTerm     =   stp->smokTerm[ii];
    dcncApl300in45SpIn[jj].otcmInsrJnct =   stp->otcmInsrJnct[ii];
    dcncApl300in45SpIn[jj].otcmInsrJnpm =   stp->otcmInsrJnpm[ii];
    COPYVAR(dcncApl300in45SpIn[jj].ovseRkarDpyn,   stp->ovseRkarDpyn[ii]);
    COPYVAR(dcncApl300in45SpIn[jj].hndlBsnsName,   stp->hndlBsnsName[ii]);
    COPYVAR(dcncApl300in45SpIn[jj].wkplDeptRknm,   stp->wkplDeptRknm[ii]);
    COPYVAR(dcncApl300in45SpIn[jj].sdjbName,   stp->sdjbName[ii]);
    dcncApl300in45SpIn[jj].hght         =   stp->hght[ii];
    dcncApl300in45SpIn[jj].wght         =   stp->wght[ii];
    COPYVAR(dcncApl300in45SpIn[jj].notcInptDate,   stp->crntDate);

    COPYVAR(dcncApl300in45SpIn[jj].ry1WghtInyn,   stp->ry1WghtInyn[ii]); /* 최근1년체중증감여부   (EUS) */
    COPYVAR(dcncApl300in45SpIn[jj].otcmIamtRcyn,   stp->otcmIamtRcyn[ii]); /* 타사보험금수령여부    (EUS) */
    COPYVAR(dcncApl300in45SpIn[jj].otcmSstdRgyn,   stp->otcmSstdRgyn[ii]); /* 타사표준하체등록여부  (EUS) */
    dcncApl300in45SpIn[jj].embrPregMcnt    =   stp->cniEmbrPregMcnt[ii]; /* 태아임신개월수        (EUS) */
    COPYVAR(dcncApl300in45SpIn[jj].embrIspeOdyn,   stp->cniEmbrIspeOdyn[ii]); /* 태아검사이상유무      (EUS) */
    jj++;
  }

  uvDebug("jj 값 [%d]",jj);
  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(jj,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300in45SpOutClear(dcncApl300in45SpOut,4);

  /* DBIO module 호출                                             */

  dcncApl300in45Sp(&basicParam,dcncApl300in45SpIn,  dcncApl300in45SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN45_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN45_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  for (ii = 0; ii < (int) stp->cniCnt; ii++) {

    if ((strlen((char *) stp->cniCustId[ii].arr) == 0)            ||
        (strcmp((char *) stp->cniCustId[ii].arr,"8009999998") == 0)) {
      stp->notcSeqNo[1] = dcncApl300in45SpOut[0].notcSeqNo;
      uvDebug("stp->notcSeqNo[1] =   [%f]",  stp->notcSeqNo[1]);
      break;
    } else {
      stp->notcSeqNo[ii] = dcncApl300in45SpOut[ii].notcSeqNo;
    }

    uvDebug("stp->notcSeqNo[ii] =   [%f]",  stp->notcSeqNo[ii]);
  }

  uvDebug("SVncapl300in1_dcncApl300in45Sp End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in20Sp()
  Note          : 운전차종고지정보입력
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in20Sp(struct stp_SVncapl300in1 *stp) {
  int     ii = 0;
  int     kk  =   0;

  struct _dcnc_apl300in20_sp_in  dcncApl300in20SpIn[(int) stp->minsDniCnt + (int) stp->scndDniCnt];

  uvDebug("SVncapl300in1_dcncApl300in20Sp    Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in20SpInClear(dcncApl300in20SpIn,(int) stp->minsDniCnt + (int) stp->scndDniCnt);

  for (ii = 0; ii < (int) stp->minsDniCnt; ii++) {

    /* 주니어CI,UL 태아인 경우 고지정보 skip */
    if ((strlen((char *) stp->cniCustId[ii].arr) == 0)            ||
        (strcmp((char *) stp->cniCustId[ii].arr,"8009999998") == 0)) {
      continue;
    }

    COPYVAR(dcncApl300in20SpIn[kk].custId,   stp->cniCustId[0]);
    COPY(dcncApl300in20SpIn[kk].dshsCnfmRtdv,   "01");
    dcncApl300in20SpIn[kk].notcSeqNo    =   stp->notcSeqNo[0];
    COPY(dcncApl300in20SpIn[kk].drveCatpCode,   stp->dniDrveCatpCode[0][ii]);
    COPY(dcncApl300in20SpIn[kk].lastChmnMpno,   uvGetUserID());
    COPY(dcncApl300in20SpIn[kk].pgmIdI,   "SVncapl300in1");
    uvDebug("1 dcncApl300in20SpIn[kk].custId      =   [%s]",  dcncApl300in20SpIn[kk].custId.arr);
    uvDebug("1 dcncApl300in20SpIn[kk].notcSeqNo   =   [%f]",  dcncApl300in20SpIn[kk].notcSeqNo);
    kk++;
  }

  for (ii = 0; ii < (int) stp->scndDniCnt; ii++) {
    COPYVAR(dcncApl300in20SpIn[kk].custId,   stp->cniCustId[1]);
    COPY(dcncApl300in20SpIn[kk].dshsCnfmRtdv,   "01");
    dcncApl300in20SpIn[kk].notcSeqNo    =   stp->notcSeqNo[1];
    COPY(dcncApl300in20SpIn[kk].drveCatpCode,   stp->dniDrveCatpCode[1][ii]);
    COPY(dcncApl300in20SpIn[kk].lastChmnMpno,   uvGetUserID());
    COPY(dcncApl300in20SpIn[kk].pgmIdI,   "SVncapl300in1");
    uvDebug("2 dcncApl300in20SpIn[kk].custId      =   [%s]",  dcncApl300in20SpIn[kk].custId.arr);
    uvDebug("2 dcncApl300in20SpIn[kk].notcSeqNo   =   [%f]",  dcncApl300in20SpIn[kk].notcSeqNo);
    kk++;
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(kk,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in20Sp(&basicParam,dcncApl300in20SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN20_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN20_SP) 호출 Error.",  \
        getCDALErrMsg());
  }
  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl300in20Sp    End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in05Sp()
  Note          : 계약심사
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in05Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in05_sp_in  dcncApl300in05SpIn;

#ifdef IPSL_DBCT
  double maxDeadAmt  = 0;
  double mpaySumPrem = 0;
  int    kk;
#endif

  uvDebug("SVncapl300in1_dcncApl300in05Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in05SpInClear(&dcncApl300in05SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in05SpIn.pynoBdctNo,   stp->polyNo); /* 증권번호_일괄계약번호 */
  COPY(dcncApl300in05SpIn.jugmBsnsDvsn,   "US");              /* 심사업무구분 */
  COPY(dcncApl300in05SpIn.jugmOccrCano,   "0000");        /* 심사발생원인번호 */
  dcncApl300in05SpIn.jugmDlngNo       =   1;                  /* 심사처리번호 */
  COPY(dcncApl300in05SpIn.jugmObctStcd,   "000");       /* 심사대상건상태코드 */
  COPYVAR(dcncApl300in05SpIn.orgnArdcYn,   stp->orgnArdcYn);  /* 기관전결여부 */
  COPYVAR(dcncApl300in05SpIn.ardcLmitDvsn,   stp->ardcLmitDvsn); /* 전결한도구분 */

  if (stp->mmth == 1) {
    dcncApl300in05SpIn.prioJugmRqrk     =   0;         /* 심사요청순위 조진학 */
  } else {
    if (strncmp((char *) stp->vlnsYn.arr,    "Y",    1)  == 0) {
      dcncApl300in05SpIn.prioJugmRqrk     =   1;          /* 우선심사요청순위 */
    } else {
      dcncApl300in05SpIn.prioJugmRqrk     =   5;          /* 우선심사요청순위 */
    }
  }
  COPYVAR(dcncApl300in05SpIn.recpDate,   stp->crntDate);          /* 접수일자 */
  COPYVAR(dcncApl300in05SpIn.relnJudgDvsn,   stp->relnJudgDvsn); /* 관계심사업무구분 */
  /* 2004.05.17 */
  COPY(dcncApl300in05SpIn.bndlJugmDlyn,   "N");           /* 일괄심사처리여부 */
  COPYVAR(dcncApl300in05SpIn.frstJudgMpno,   stp->frstJudgMpno); /* 1차심사자사번 */
  COPYVAR(dcncApl300in05SpIn.scndJudgMpno,   stp->scndJudgMpno); /* 2차심사자사번 */
  COPYVAR(dcncApl300in05SpIn.thrdJudgMpno,   stp->thrdJudgMpno); /* 3차심사자사번 */

  /* 전결한도와 관계없이 전건 1차심사자를 현재심사자로 지정 (2004.06.11) 언더라이팅-00710 */
  /*COPYVAR(dcncApl300in05SpIn.crntJudgMpno     ,   stp->frstJudgMpno);         /* 현재심사자사번       */

  /* 전결한도에 따른 심사자 지정 (2005.12.29) 언더라이팅-04426 */
  COPYVAR(dcncApl300in05SpIn.crntJudgMpno,   stp->crntJudgMpno); /* 현재심사자사번 */

  COPYVAR(dcncApl300in05SpIn.jugmBsnsDate,   stp->cnttDate);  /* 심사업무일자 */

#ifdef IPSL_DBCT
  /* 불완전판매 의심계약 발췌 */
  for (kk = 0; kk< 8; kk++) {
    uvDebug("불판 사망금액[%d] =   [%f][%f]",  kk,stp->tempAmt[kk], stp->deadAmt[kk]);

    if(maxDeadAmt < stp->deadAmt[kk]) {
      maxDeadAmt = stp->deadAmt[kk];
    }
  }

  if (strcmp((char *) stp->paymCyclCode.arr, "1") == 0) {        /* 납입주기 = 월납 */
    mpaySumPrem = stp->sumOrigPrem;
  } else if (strcmp((char *) stp->paymCyclCode.arr, "3") == 0) { /* 납입주기 = 3월납 */
    mpaySumPrem = stp->sumOrigPrem * 0.3364;
  } else if (strcmp((char *) stp->paymCyclCode.arr, "6") == 0) { /* 납입주기 = 6월납 */
    mpaySumPrem = stp->sumOrigPrem * 0.1703;
  } else if (strcmp((char *) stp->paymCyclCode.arr, "12") == 0) { /* 납입주기 = 년납 */
    mpaySumPrem = stp->sumOrigPrem * 0.0870;
  }

  uvDebug("불판 납입주기        =   [%s]",  (char *) stp->paymCyclCode.arr);
  uvDebug("불판 계약자법인체여부=   [%s]",  (char *) stp->ctorCrpbYn.arr);
  uvDebug("불판 진단종류코드    =   [%s]",  (char *) stp->mediKindCode[1].arr);
  uvDebug("불판 계약자/주피관계 =   [%s]",  (char *) stp->minsRelnCode[0].arr);
  uvDebug("불판 월납환산보험료  =   [%f]",  mpaySumPrem);
  uvDebug("불판 최대사망금액    =   [%f]",  maxDeadAmt);

  /* 계약자 법인체, 일시납 제외. 무진단(주피), 월납 기준 */
  if ((strncmp((char *) stp->ctorCrpbYn.arr, "Y", 1) != 0) &&
      (strcmp ((char *) stp->paymCyclCode.arr,  "0") != 0) &&
      (strncmp((char *) stp->mediKindCode[1].arr, "00", 2) == 0)) {
    /* 사망보험금 3억이상 && 합계원보험료 70만원 미만 && 계약자/주피관계 배우자/기타 */
    /* 사망보험금 5억이상 && 합계원보험료 100만원 미만                        */
    if((maxDeadAmt >= 300000000 && mpaySumPrem < 700000 &&
        (strcmp((char *) stp->minsRelnCode[0].arr,"02") == 0    ||
         strcmp((char *) stp->minsRelnCode[0].arr,"99") == 0) ) ||
       (maxDeadAmt >= 500000000 && mpaySumPrem < 1000000)) {

      COPY(dcncApl300in05SpIn.ipslDbctYn,   "Y");  /* 불완전판매의심계약여부 */

      uvDebug("불판 불완전판매의심계약여부    =   [%s]",
                                     (char *)dcncApl300in05SpIn.ipslDbctYn.arr);
    }
  }
#endif

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in05Sp(&basicParam,&dcncApl300in05SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN05_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN05_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl300in05Sp End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_recp()
  Note          : 영수증
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_recp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl314in02_sp_in  dcncApl314in02SpIn;

  uvDebug("SVncapl300in1_recp Start");

  /*--------------*/
  /* 영수증 발행  */
  /*--------------*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl314in02SpInClear(&dcncApl314in02SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl314in02SpIn.inqrDvsn,   "1");
  COPYVAR(dcncApl314in02SpIn.admnNo,   stp->polyNo);
  COPY(dcncApl314in02SpIn.recpDvsn,   "2");
  COPYVAR(dcncApl314in02SpIn.recpNo,   stp->recpNoScrn);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl314in02Sp(&basicParam,&dcncApl314in02SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL314IN02_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL314IN02_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */

  uvDebug("SVncapl300in1_recp End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in26Sp()
  Note          : 단체계약명세입력
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in26Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in26_sp_in  dcncApl300in26SpIn;

  uvDebug("SVncapl300in1_dcncApl300in26Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in26SpInClear(&dcncApl300in26SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in26SpIn.polyNo,   stp->polyNo);              /* 증권번호 */
  COPYVAR(dcncApl300in26SpIn.grpCnttAdno,   stp->grpCnttAdno); /* 단체계약관리번호-수금정보테이블값 */
  COPYVAR(dcncApl300in26SpIn.grpCustId,   stp->cnttGrpCtid);    /* 단체고객ID */
  if ((char *) stp->grpCnttAdno.arr[0] != 0x00) {
    /*
    dcncApl300in26SpIn.grpCnttTpcd.len = strncpy((char*)dcncApl300in26SpIn.grpCnttTpcd.arr
                                                ,((char*)stp->grpCnttAdno.arr)+10, 2);
    */
    STR2VAR(dcncApl300in26SpIn.grpCnttTpcd, ((char*) stp->grpCnttAdno.arr)+10);
  } else {                                                /* 단체계약유형코드 */
    COPY(dcncApl300in26SpIn.grpCnttTpcd,   "03");         /* 단체계약유형코드 */
  }
  COPY(dcncApl300in26SpIn.rcntYn,   "Y");                         /* 승인여부 */
  COPYVAR(dcncApl300in26SpIn.rcntDate,   stp->cnttDate);          /* 승인일자 */
  COPY(dcncApl300in26SpIn.tmctDlngRscd,   "1"); /* 단체계약처리사유코드(신규) */
  COPYVAR(dcncApl300in26SpIn.prsnProrNo,   stp->cnttGrpCtid); /* 개인고유번호 */
  COPYVAR(dcncApl300in26SpIn.dlngOrgnCode,   stp->collOrgnCode); /* 처리기관코드 */
  COPYVAR(dcncApl300in26SpIn.strtDate,   stp->strtDate);          /* 시작일자 */
  COPY(dcncApl300in26SpIn.endDate,   "99991231");                 /* 종료일자 */
  COPY(dcncApl300in26SpIn.delYn,   "N");                          /* 삭제여부 */

  uvDebug("dcncApl300in26SpIn.grpCnttTpcd    =   [%s]",  (char *) dcncApl300in26SpIn.grpCnttTpcd.arr);
  uvDebug("dcncApl300in26SpIn.grpCnttAdno    =   [%s]",  (char *) dcncApl300in26SpIn.grpCnttAdno.arr);
  uvDebug("dcncApl300in26SpIn.grpCustId    =   [%s]",  (char *) dcncApl300in26SpIn.grpCustId.arr);
  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in26Sp(&basicParam,&dcncApl300in26SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN26_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN26_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl300in26Sp End");

  return;
}
/************************************************************************
  Function Name : SVncapl300in1_frsy_seyr_prem()
  Note          : 초년도, 2차년도 보험료 계산
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_frsy_seyr_prem(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_frsy_seyr_prem    Start");

  /* 변수선언 */
  struct _denc_apl300in57_sp_in  dencApl300in57SpIn;
  struct _denc_apl300in57_sp_out dencApl300in57SpOut;

  dencApl300in57SpInClear(&dencApl300in57SpIn);
  dencApl300in57SpOutClear(&dencApl300in57SpOut);

  setInitDBIO(1, DBCURSOR_CLOSE);

  COPYVAR(dencApl300in57SpIn.polyNo,   stp->polyNo);
          dencApl300in57SpIn.paymCnt = stp->paymCnt;

  uvDebug("-------------------------------------");
  uvDebug("증권번호 = [%s]"  , (char *)dencApl300in57SpIn.polyNo.arr);
  uvDebug("최종납회 = [%.0f]",         dencApl300in57SpIn.paymCnt   );
  uvDebug("-------------------------------------");

  dencApl300in57Sp(&basicParam, &dencApl300in57SpIn, &dencApl300in57SpOut);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName);
    EXEC SQL ROLLBACK;
    dencApl300in49SpClose();
    uvDebug("DBIO(DENC_APL300IN57_SP) 호출 Error[%d], %s",cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN57_SP) 호출 Error.", getCDALErrMsg());
  }

  stp->frsyPrem = dencApl300in57SpOut.frsyPrem;  /* 초년도보험료 */
  stp->seyrPrem = dencApl300in57SpOut.seyrPrem;  /* 차년도보험료 */

  uvDebug("초년도보험료 = [%.0f]", dencApl300in57SpOut.frsyPrem);
  uvDebug("차년도보험료 = [%.0f]", dencApl300in57SpOut.seyrPrem);

  uvDebug("SVncapl300in1_frsy_seyr_prem    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in08Sp()
  Note          : 신계약일마감입력
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in08Sp(struct stp_SVncapl300in1 *stp) {

  struct _dcnc_apl300in08_sp_in  dcncApl300in08SpIn;

  int ii;

  double  mpayPrem    = 0.0;            /* 월납보험료 */
  double  nonMpayPrem = 0.0;            /* 비월납보험료 */

  ST_ERRCONTENT       err;

  char     spclTypeDtdv [  12+1]; /* 특이유형상세구분 */
  char     spclTypeSmry [1024+1]; /* 특이유형적요 */
  char     spclTypeDvcd [  10+1]; /* 특이유형구분코드 */
  char     spclTypeYn   [   1+1]; /* 특이유형구분코드 */

  uvDebug("SVncapl300in1_dcncApl300in08Sp    Start");

  for (ii = 0; ii < stp->cjgCnt; ii++) {
    memset(spclTypeDvcd, 0x00, sizeof(spclTypeDvcd)); /* 특이유형구분코드 */
    memset(spclTypeDtdv, 0x00, sizeof(spclTypeDtdv)); /* 특이유형상세구분 */
    memset(spclTypeSmry, 0x00, sizeof(spclTypeSmry)); /* 특이유형적요 */
    memset(spclTypeYn  , 0x00, sizeof(spclTypeYn  )); /* 특이유형적요 */
    memset(&err,    0x00,   sizeof(ST_ERRCONTENT));

    strcpy(spclTypeDvcd,"SPT_103");

    /* 상품 특이유형 조회 모듈 호출 */
    if (NC_goodsSpecTypeSrch((char *) stp->cjggoodCodeDtal[ii].arr
                            ,(char *) stp->cjggoodCodeItem[ii].arr
                            ,spclTypeDvcd
                            ,(char *) stp->cnttDate.arr
                            ,spclTypeDtdv
                            ,spclTypeSmry
                            ,spclTypeYn
                            ,&err) == FAIL) {
      EXEC SQL ROLLBACK;
      uvDebug("가입상품 특이유형 조회 오류");
      appReturnCode = 4899;
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "가입상품 특이유형 조회 오류", "SVncapl100in");
    }

    /* ○ 신계약일마감 테이블 컬럼 추가(2018.05.25 CPC 김미라 과장)         */
    /*   -> 월납보험료 : 주계약 및 특약 중 납입주기가 ‘1’인 보험료        */
    /*   -> 비월납보험료 : 주계약 및 특약 중 납입주기가 ‘1’이 아닌 보험료 */
    /* ==>납입주기는 계약단위로 존재하므로, 납입주기가 월납이고, 실납기가 일시납이 아닌 건만   */
    /*    월납보험료로 합산함(현재 계약납입주기와 상품의 납입주기가 다른 경우는                */
    /*    신계약 시점 일시납 특약만 허용하므로, 납입주기가 1이고, 실납입기간이 0이 아닌 경우만 */
    /*    1개월 납에 해당됨.                                                                   */
    /*    예약가입상품일 경우 월납보험료 합산 제외                                             */
    if(strcmp(spclTypeDtdv, "X2") != 0 && strcmp(spclTypeDtdv, "X5") != 0 && strcmp(spclTypeDtdv, "X6") != 0) {
      if((strcmp((char *) stp->paymCyclCode.arr, "1") == 0) && stp->cjgrealPaymTerm[ii] != 0){
        mpayPrem += stp->cjgorigPrem[ii]; /* 월납보험료(1개월납 보험료) */
      }else{
        nonMpayPrem += stp->cjgorigPrem[ii]; /* 비월납보험료 */
      }
    }
  }

  uvDebug("월납보험료  =[%f]", mpayPrem);
  uvDebug("비월납보험료=[%f]", nonMpayPrem);

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in08SpInClear(&dcncApl300in08SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in08SpIn.polyNo,   stp->polyNo);              /* 증권번호 */
  COPY(dcncApl300in08SpIn.newCnttYn,   "Y");                  /* 신규계약여부 */
  COPYVAR(dcncApl300in08SpIn.irkdCodeDtal,   stp->irkdCodeDtal); /* 보험종류코드_세 */
  COPYVAR(dcncApl300in08SpIn.irkdCodeItem,   stp->irkdCodeItem); /* 보험종류코드_목 */
  COPYVAR(dcncApl300in08SpIn.cnttStatCode,   stp->cnttStatCode); /* 계약상태코드 */
  COPYVAR(dcncApl300in08SpIn.cnttStatDtcd,   stp->cnttStatDtcd); /* 계약상태상세코드 */
  COPY(dcncApl300in08SpIn.befoCtsCode,   "6");            /* 직전계약상태코드 */
  COPY(dcncApl300in08SpIn.befoCtsDtcd,   "61");       /* 직전계약상태상세코드 */
  COPYVAR(dcncApl300in08SpIn.cnttDate,   stp->cnttDate);          /* 계약일자 */
  COPYVAR(dcncApl300in08SpIn.exprDate,   stp->exprDate);          /* 만기일자 */
  dcncApl300in08SpIn.paymTerm     =   stp->paymTerm;              /* 납입기간 */
  dcncApl300in08SpIn.realPaymTerm =   stp->realPaymTerm;        /* 실납입기간 */
  COPYVAR(dcncApl300in08SpIn.paymTermDvsn,   stp->paymTermDvsn); /* 납입기간구분 */
  dcncApl300in08SpIn.insrTerm     =   stp->insrTerm;              /* 보험기간 */
  dcncApl300in08SpIn.realInsrTerm =   stp->realInsrTerm;        /* 실보험기간 */
  COPYVAR(dcncApl300in08SpIn.insrTermDvsn,   stp->insrTermDvsn); /* 보험기간구분 */
  COPYVAR(dcncApl300in08SpIn.paymCyclCode,   stp->paymCyclCode); /* 납입주기코드 */
  dcncApl300in08SpIn.mainInsrAmt  =   stp->mainInsrAmt;           /* 주보험금 */
  dcncApl300in08SpIn.sumPrem      =   stp->sumPrem;          /* 합계보험료 */
  dcncApl300in08SpIn.sumOrigPrem  =   stp->sumOrigPrem;  /* 합계원보험료 */
  dcncApl300in08SpIn.frsyPrem     =   stp->frsyPrem;          /* 초년도보험료 */
  dcncApl300in08SpIn.seyrPrem     =   stp->seyrPrem;         /* 2차년도보험료 */
  NCOPYVAR(dcncApl300in08SpIn.cnttConcYm,   stp->ftprRmtnDate, 6); /* 계약체결년월 */
  COPYVAR(dcncApl300in08SpIn.prsnCoprSadv,   stp->prsnCoprSadv); /* 개인법인판매구분 */
  COPYVAR(dcncApl300in08SpIn.prsnCoprPmdv,   stp->prsnCoprPmdv); /* 개인법인인가구분 */
  dcncApl300in08SpIn.anntPaymStag =   stp->anntPaymStag;  /* 연금지급개시연령 */
  COPYVAR(dcncApl300in08SpIn.anntPaymStdt,   stp->anntPaymStdt); /* 연금지급개시일자 */
  COPYVAR(dcncApl300in08SpIn.insrAcctDvsn,   stp->insrAcctDvsn); /* 보험계정구분 */
  COPYVAR(dcncApl300in08SpIn.clltOrgnCode,   stp->clltOrgnCode); /* 모집기관코드 */
  COPYVAR(dcncApl300in08SpIn.clltLpPrno,   stp->clltLpPrno); /* 모집설계사고유번호 */
  COPYVAR(dcncApl300in08SpIn.ftprRmtnDate,   stp->ftprRmtnDate); /* 초회보험료송금일자 */
  COPYVAR(dcncApl300in08SpIn.ftprRmtnTime,   stp->crntTimeHh24); /* 초회보험료송금시각 */
  COPYVAR(dcncApl300in08SpIn.ftprRecvMdcd,   stp->ftprRecvMdcd); /* 초회보험료입금방법코드 */
  dcncApl300in08SpIn.fstiRrcvPrem =   stp->fstiRrcvPrem;  /* 초회실입금보험료 */
  COPYVAR(dcncApl300in08SpIn.fstiPpayYn,   stp->fstiPpayYn);  /* 초회선납여부 */
  COPYVAR(dcncApl300in08SpIn.retrYn,   stp->retrYn);              /* 소급여부 */
  COPYVAR(dcncApl300in08SpIn.lpCtisReln,   stp->lpCtisReln); /* 설계사와계약자/피보험자관계 */
  COPYVAR(dcncApl300in08SpIn.clltRoutDvsn,   stp->clltRoutDvsn); /* 모집경로구분 */
  COPYVAR(dcncApl300in08SpIn.srdoPublDate,   stp->srdoPublDate); /* 청약서발행일자 */
  COPYVAR(dcncApl300in08SpIn.srdoRecpDate,   stp->crntDate); /* 청약서접수일자 */
  COPYVAR(dcncApl300in08SpIn.srdoRecpTime,   stp->crntTimeHh24); /* 청약서접수시각 */
  COPYVAR(dcncApl300in08SpIn.polyTrnmRtdv,   stp->polyTrnmRtdv); /* 증권전달경로구분 */
  COPYVAR(dcncApl300in08SpIn.bussFrplYn,   stp->bussFrplYn); /* 영업자유설계여부 */
  COPYVAR(dcncApl300in08SpIn.grttSpcdYn,   stp->grttSpcdYn); /* 단체취급특약여부 */
  dcncApl300in08SpIn.premCoprCgrt =   stp->premCoprCgrt;  /* 보험료법인부담율 */
  COPYVAR(dcncApl300in08SpIn.freePlanYn,   stp->freePlanYn);  /* 자유설계여부 */
  COPYVAR(dcncApl300in08SpIn.frplPyno,   stp->scndPolyNo); /* 자유설계증권번호 */
  COPYVAR(dcncApl300in08SpIn.collMetdCode,   stp->collMetdCode); /* 수금방법코드 */
  COPYVAR(dcncApl300in08SpIn.recpNo,   stp->recpNo);            /* 영수증번호 */
  dcncApl300in08SpIn.addPaymPrem  =   stp->addPaymPrem;     /* 추가납입보험료 */
  dcncApl300in08SpIn.stddCamt     =   stp->stddCamt;            /* 기준계약고 */

  /* 2007.1.2일 환산월초 기준 변경에 따라 1회차환산월초에 총환산월초를 대입한다       */
  /* dcncApl300in08SpIn.t01Cvmf      =   stp->t01Cvmf;          1회차환산월초 */
  /* dcncApl300in08SpIn.t04Cvmf      =   0;                     4회차환산월초 */
  /* dcncApl300in08SpIn.t07Cvmf      =   0;                     7회차환산월초 */
  /* dcncApl300in08SpIn.t13Cvmf      =   0;                    13회차환산월초 */
  /* dcncApl300in08SpIn.t25Cvmf      =   0;                    25회차환산월초 */

  /* 2018.05.24 민소영 과장 요청 */
  /* 2018.05.28일자로 기존 버퍼값 셋팅으로 변경(현재 0값 return중이므로 영향 없음) */
  dcncApl300in08SpIn.t01Cvmf      =   stp->t01Cvmf      /*  1회차환산월초 */
                                  +   stp->t04Cvmf      /*  4회차환산월초 */
                                  +   stp->t07Cvmf      /*  7회차환산월초 */
                                  +   stp->t13Cvmf      /* 13회차환산월초 */
                                  +   stp->t25Cvmf      /* 25회차환산월초 */
                                  +   stp->lupyCvmf;    /* 일시납환산월초 */

  dcncApl300in08SpIn.t04Cvmf      =   stp->t04Cvmf         ;  /* 4회차환산월초  */
  dcncApl300in08SpIn.t07Cvmf      =   stp->t07Cvmf         ;  /* 7회차환산월초  */
  dcncApl300in08SpIn.t13Cvmf      =   stp->t13Cvmf         ;  /* 13회차환산월초 */
  dcncApl300in08SpIn.t25Cvmf      =   stp->t25Cvmf         ;  /* 25회차환산월초 */
  dcncApl300in08SpIn.lupyCvmf     =   stp->lupyCvmf        ;  /* 일시납환산월초 */

  COPYVAR(dcncApl300in08SpIn.lpRlcd,   stp->lpRlcd);    /* 설계사와의관계코드 */
  COPYVAR(dcncApl300in08SpIn.ctorCustId,   stp->ctorCustId);  /* 계약자고객ID */
  COPYVAR(dcncApl300in08SpIn.cnttGrpCtid,   stp->cnttGrpCtid); /* 계약시단체고객ID */
  dcncApl300in08SpIn.custIntrPsct =   stp->custIntrPsct;    /* 고객소개인원수 */
  dcncApl300in08SpIn.mpayPrem    =   mpayPrem   ;    /* 월납보험료   */
  dcncApl300in08SpIn.nonMpayPrem =   nonMpayPrem;    /* 비월납보험료 */

  /* 현재는 계약체결년월과 영업마감년월은 동일, 추후에는 변경 가능성 있음. 2004.03.22         */
  COPYVAR(dcncApl300in08SpIn.bussClogYm,   stp->bussClogYm);  /* 영업마감년월 */

  if ((strncmp((char *) stp->ftprRecvMdcd.arr,  "82",   2) == 0) ||
      (strncmp((char *) stp->ftprRecvMdcd.arr,  "83",   2) == 0) ||
      (strncmp((char *) stp->ftprRecvMdcd.arr,  "84",   2) == 0) ||
      (strncmp((char *) stp->ftprRecvMdcd.arr,  "86",   2) == 0)) {
    COPYVAR(dcncApl300in08SpIn.accgCldtRecv,   stp->crntDate); /* 경리마감일자_입금 */
    COPYVAR(dcncApl300in08SpIn.accgCltmRecv,   stp->crntTimeHh24); /* 경리마감시각_입금 */
  }
  COPYVAR(dcncApl300in08SpIn.saleChnlCode,   stp->saleChnlCode); /* 판매채널코드 */
  if (strncmp((char *) stp->spquTpdvCode.arr, "16", 2) == 0) {
    COPYVAR(dcncApl300in08SpIn.achvOrgnCode,   stp->pstnOrgnCode); /* 실적기관코드 */
  } else {
    COPYVAR(dcncApl300in08SpIn.achvOrgnCode,   stp->clltOrgnCode); /* 실적기관코드 */
  }


  uvDebug("증권번호                   [%s]", dcncApl300in08SpIn.polyNo      .arr);
  uvDebug("신규계약여부               [%s]", dcncApl300in08SpIn.newCnttYn   .arr);
  uvDebug("보험종류코드_세            [%s]", dcncApl300in08SpIn.irkdCodeDtal.arr);
  uvDebug("보험종류코드_목            [%s]", dcncApl300in08SpIn.irkdCodeItem.arr);
  uvDebug("계약상태코드               [%s]", dcncApl300in08SpIn.cnttStatCode.arr);
  uvDebug("계약상태상세코드           [%s]", dcncApl300in08SpIn.cnttStatDtcd.arr);
  uvDebug("직전계약상태코드           [%s]", dcncApl300in08SpIn.befoCtsCode .arr);
  uvDebug("직전계약상태상세코드       [%s]", dcncApl300in08SpIn.befoCtsDtcd .arr);
  uvDebug("계약일자                   [%s]", dcncApl300in08SpIn.cnttDate    .arr);
  uvDebug("만기일자                   [%s]", dcncApl300in08SpIn.exprDate    .arr);
  uvDebug("납입기간                   [%f]", dcncApl300in08SpIn.paymTerm        );
  uvDebug("실납입기간                 [%f]", dcncApl300in08SpIn.realPaymTerm    );
  uvDebug("납입기간구분               [%s]", dcncApl300in08SpIn.paymTermDvsn.arr);
  uvDebug("보험기간                   [%f]", dcncApl300in08SpIn.insrTerm        );
  uvDebug("실보험기간                 [%f]", dcncApl300in08SpIn.realInsrTerm    );
  uvDebug("보험기간구분               [%s]", dcncApl300in08SpIn.insrTermDvsn.arr);
  uvDebug("납입주기코드               [%s]", dcncApl300in08SpIn.paymCyclCode.arr);
  uvDebug("주보험금                   [%f]", dcncApl300in08SpIn.mainInsrAmt     );
  uvDebug("합계보험료                 [%f]", dcncApl300in08SpIn.sumPrem         );
  uvDebug("합계원보험료               [%f]", dcncApl300in08SpIn.sumOrigPrem     );
  uvDebug("초년도보험료               [%f]", dcncApl300in08SpIn.frsyPrem        );
  uvDebug("2차년도보험료              [%f]", dcncApl300in08SpIn.seyrPrem        );
  uvDebug("계약체결년월               [%s]", dcncApl300in08SpIn.cnttConcYm  .arr);
  uvDebug("개인법인판매구분           [%s]", dcncApl300in08SpIn.prsnCoprSadv.arr);
  uvDebug("개인법인인가구분           [%s]", dcncApl300in08SpIn.prsnCoprPmdv.arr);
  uvDebug("연금지급개시연령           [%f]", dcncApl300in08SpIn.anntPaymStag    );
  uvDebug("연금지급개시일자           [%s]", dcncApl300in08SpIn.anntPaymStdt.arr);
  uvDebug("보험계정구분               [%s]", dcncApl300in08SpIn.insrAcctDvsn.arr);
  uvDebug("모집기관코드               [%s]", dcncApl300in08SpIn.clltOrgnCode.arr);
  uvDebug("모집설계사고유번호         [%s]", dcncApl300in08SpIn.clltLpPrno  .arr);
  uvDebug("초회보험료송금일자         [%s]", dcncApl300in08SpIn.ftprRmtnDate.arr);
  uvDebug("초회보험료송금시각         [%s]", dcncApl300in08SpIn.ftprRmtnTime.arr);
  uvDebug("초회보험료입금방법코드     [%s]", dcncApl300in08SpIn.ftprRecvMdcd.arr);
  uvDebug("초회실입금보험료           [%f]", dcncApl300in08SpIn.fstiRrcvPrem    );
  uvDebug("초회선납여부               [%s]", dcncApl300in08SpIn.fstiPpayYn  .arr);
  uvDebug("소급여부                   [%s]", dcncApl300in08SpIn.retrYn      .arr);
  uvDebug("설계사와계약자/피보험자관계[%s]", dcncApl300in08SpIn.lpCtisReln  .arr);
  uvDebug("모집경로구분               [%s]", dcncApl300in08SpIn.clltRoutDvsn.arr);
  uvDebug("계약성립일자               [%s]", dcncApl300in08SpIn.cnttConcDate.arr);
  uvDebug("일괄계약번호               [%s]", dcncApl300in08SpIn.bdctNo      .arr);
  uvDebug("청약서발행일자             [%s]", dcncApl300in08SpIn.srdoPublDate.arr);
  uvDebug("청약서접수일자             [%s]", dcncApl300in08SpIn.srdoRecpDate.arr);
  uvDebug("청약서접수시각             [%s]", dcncApl300in08SpIn.srdoRecpTime.arr);
  uvDebug("증권전달경로구분           [%s]", dcncApl300in08SpIn.polyTrnmRtdv.arr);
  uvDebug("영업자유설계여부           [%s]", dcncApl300in08SpIn.bussFrplYn  .arr);
  uvDebug("단체취급특약여부           [%s]", dcncApl300in08SpIn.grttSpcdYn  .arr);
  uvDebug("보험료법인부담율           [%f]", dcncApl300in08SpIn.premCoprCgrt    );
  uvDebug("자유설계여부               [%s]", dcncApl300in08SpIn.freePlanYn  .arr);
  uvDebug("자유설계증권번호           [%s]", dcncApl300in08SpIn.frplPyno    .arr);
  uvDebug("수금방법코드               [%s]", dcncApl300in08SpIn.collMetdCode.arr);
  uvDebug("영수증번호                 [%s]", dcncApl300in08SpIn.recpNo      .arr);
  uvDebug("추가납입보험료             [%f]", dcncApl300in08SpIn.addPaymPrem     );
  uvDebug("기타보험료                 [%f]", dcncApl300in08SpIn.othrPrem        );
  uvDebug("모집수당                   [%f]", dcncApl300in08SpIn.clltAllw        );
  uvDebug("기준계약고                 [%f]", dcncApl300in08SpIn.stddCamt        );
  uvDebug("1회차환산월초              [%f]", dcncApl300in08SpIn.t01Cvmf         );
  uvDebug("4회차환산월초              [%f]", dcncApl300in08SpIn.t04Cvmf         );
  uvDebug("7회차환산월초              [%f]", dcncApl300in08SpIn.t07Cvmf         );
  uvDebug("13회차환산월초             [%f]", dcncApl300in08SpIn.t13Cvmf         );
  uvDebug("25회차환산월초             [%f]", dcncApl300in08SpIn.t25Cvmf         );
  uvDebug("일시납환산월초             [%f]", dcncApl300in08SpIn.lupyCvmf        );
  uvDebug("설계사와의관계코드         [%s]", dcncApl300in08SpIn.lpRlcd      .arr);
  uvDebug("계약자고객ID               [%s]", dcncApl300in08SpIn.ctorCustId  .arr);
  uvDebug("계약시단체고객ID           [%s]", dcncApl300in08SpIn.cnttGrpCtid .arr);
  uvDebug("영업마감년월               [%s]", dcncApl300in08SpIn.bussClogYm  .arr);
  uvDebug("경리마감일자_접수          [%s]", dcncApl300in08SpIn.accgCldtRecp.arr);
  uvDebug("경리마감시각_접수          [%s]", dcncApl300in08SpIn.accgCltmRecp.arr);
  uvDebug("RT경리송금관리번호         [%f]", dcncApl300in08SpIn.rtAcrmAdno      );
  uvDebug("접수취소일자               [%s]", dcncApl300in08SpIn.recpCnclDate.arr);
  uvDebug("경리마감일자_입금          [%s]", dcncApl300in08SpIn.accgCldtRecv.arr);
  uvDebug("경리마감시각_입금          [%s]", dcncApl300in08SpIn.accgCltmRecv.arr);
  uvDebug("판매채널코드               [%s]", dcncApl300in08SpIn.saleChnlCode.arr);
  uvDebug("실적기관코드               [%s]", dcncApl300in08SpIn.achvOrgnCode.arr);
  uvDebug("고객소개인원수             [%f]", dcncApl300in08SpIn.custIntrPsct    );
  uvDebug("월납보험료                 [%f]", dcncApl300in08SpIn.mpayPrem        );
  uvDebug("비월납보험료               [%f]", dcncApl300in08SpIn.nonMpayPrem     );

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in08Sp(&basicParam,&dcncApl300in08SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN08_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN08_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl300in08Sp    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in35Sp()
  Note          : 신계약일마감가입상품입력
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in35Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in35_sp_in  dcncApl300in35SpIn;

  uvDebug("SVncapl300in1_dcncApl300in35Sp    Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in35SpInClear(&dcncApl300in35SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in35SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in35Sp(&basicParam,&dcncApl300in35SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN35_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN35_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl300in35Sp    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_imtyTrnf()
  Note          : 초회보험료 수금방법 즉시이체
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_imtyTrnf(struct stp_SVncapl300in1 *stp, struct stp_SVncapl300in1_realTrnf *stp_real) {

  char    date[30];
  char    retVal3[MAX_VALUE_LEN];
  int     retCode3 = 0;

  int                         ret;
  CMNC_imtrTrnfClac           st_itc;   /* 즉시이체집 모듈 */
  ST_ERRCONTENT               err;

  /*============start 수정일자::20050304  수정자::이충열 수정내용::즉시이체 미입금 사유 룰반영 start===========*/
  char* fnName1  = "SVncapl300in_imtyTrnf";
  int   retVal   = 0;
  /*============end   수정일자::20050304  수정자::이충열 수정내용::즉시이체 미입금 사유 룰반영   end===========*/

  uvDebug("SVncapl300in1_imtyTrnf   Start");

  memset(retVal3,    0x00,   sizeof(retVal3));
  memset(&st_itc,    0x00,   sizeof(CMNC_imtrTrnfClac));
  memset(&err,       0x00,   sizeof(ST_ERRCONTENT));

  retCode3 = uvRuleBase("NC_imtrLogYn", "", retVal3);

  if (retCode3 != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(NC_imtrLogYn) 룰호출 오류[%d]", retCode3);
    SVC_CLOSE(APPERR, 4899, 0, "(NC_imtrLogYn) 룰호출 오류", fnName);
  }

  uvDebug("룰결과 [%s]",retVal3);

  COPYVAR(st_itc.dmndDate     , stp->crntDate       ); /* I 처리일자 */
  COPY   (st_itc.dlngManMpno  , uvGetUserID()       ); /* I 처리자사번 */
  COPYVAR(st_itc.dlngOrgnCode , stp->clltOrgnCode   ); /* I 처리기관코드 */
  COPYVAR(st_itc.admnNo       , stp->polyNo         ); /* I 관리번호(증권번호) */
  COPY   (st_itc.admnNoDvsn   , "1"                 ); /* I 관리번호구분 */
  COPY   (st_itc.bsnsDvsnCode , "NC"                ); /* I 업무구분코드 */
  COPYVAR(st_itc.bankCode     , stp->finaOrgnCode[0]); /* I 금융기관코드(은행코드) */
  COPYVAR(st_itc.acctNo       , stp->acctCardNo  [0]); /* I 계좌_카드번호 */
  COPYVAR(st_itc.dpsrName     , stp->cardOwnrName[0]); /* I 예금주명 */
  COPYVAR(st_itc.dpsrRrno     , stp->cardOwnrRrno[0]); /* I 예금주주민등록번호 */
  (       st_itc.recvAmt      = stp->fstiRrcvPrem   ); /* I 송금액 */
  COPY   (st_itc.batchPgm     , "BTncapl300"        ); /* I onbatch pgm 명 */
  COPY   (st_itc.cmsCode      , "99999"             ); /* I cmsCode     명 */
  COPY   (st_itc.wdrcName     , "한화생명초회"      ); /* I 출금인 성명 */

  if (strcmp((char *) stp->dpsrDvsn[0].arr,"")==0) {
    SVncapl300in1_dencScsscm010032Sp(stp, 0); /* 계속보험료 예금주고객 */
  }
  COPYVAR(st_itc.dpsrDvsn   , stp->dpsrDvsn    [0]); /* I 예금주실명번호종류 */

  if (strcmp((char *) stp->imtyRecpYn.arr, "Y") == 0) {  /* TABLET 청약 */
    COPY(st_itc.agreDataDvsn , "3"); /* I 동의자료구분 = '일반인증서' */
  } else if (strcmp((char *) stp->agreDataDvsn[0].arr, "")==0) {
    COPY(st_itc.agreDataDvsn , "1"); /* I 동의자료구분 = '서면' */
  } else {
    COPYVAR(st_itc.agreDataDvsn , stp->agreDataDvsn[0]); /* I 동의자료구분 */
  }

  if (strcmp((char *) stp->agreDataAddr[0].arr,"")==0) {
    COPYVAR(st_itc.agreDataAddr , stp->polyNo); /* I 동의자료주소 */
  } else {
    COPYVAR(st_itc.agreDataAddr , stp->agreDataAddr[0]); /* I 동의자료주소 */
  }

  uvDebug("st_itc.dmndDate     = [%s]",  (char *) st_itc.dmndDate    .arr);
  uvDebug("st_itc.dlngManMpno  = [%s]",  (char *) st_itc.dlngManMpno .arr);
  uvDebug("st_itc.dlngOrgnCode = [%s]",  (char *) st_itc.dlngOrgnCode.arr);
  uvDebug("st_itc.admnNo       = [%s]",  (char *) st_itc.admnNo      .arr);
  uvDebug("st_itc.admnNoDvsn   = [%s]",  (char *) st_itc.admnNoDvsn  .arr);
  uvDebug("st_itc.bsnsDvsnCode = [%s]",  (char *) st_itc.bsnsDvsnCode.arr);
  uvDebug("st_itc.bankCode     = [%s]",  (char *) st_itc.bankCode    .arr);
  uvDebug("st_itc.acctNo       = [%s]",  (char *) st_itc.acctNo      .arr);
  uvDebug("st_itc.dpsrName     = [%s]",  (char *) st_itc.dpsrName    .arr);
  uvDebug("st_itc.dpsrRrno     = [%s]",  (char *) st_itc.dpsrRrno    .arr);
  uvDebug("st_itc.recvAmt      = [%f]",           st_itc.recvAmt         );
  uvDebug("st_itc.batchPgm     = [%s]",  (char *) st_itc.batchPgm    .arr);
  uvDebug("st_itc.cmsCode      = [%s]",  (char *) st_itc.cmsCode     .arr);
  uvDebug("st_itc.wdrcName     = [%s]",  (char *) st_itc.wdrcName    .arr);
  uvDebug("st_itc.dpsrDvsn     = [%s]",  (char *) st_itc.dpsrDvsn    .arr);
  uvDebug("st_itc.agreDataDvsn = [%s]",  (char *) st_itc.agreDataDvsn.arr);
  uvDebug("st_itc.agreDataAddr = [%s]",  (char *) st_itc.agreDataAddr.arr);

  memset(dmsg, 0x00, sizeof(dmsg));

  if (strcmp(retVal3,"Y") == 0) {
    (void) uvGetTime(10, date);
    ncDebug("\n");
    ncDebug("증번[%s] start[%s]",(char *) stp->polyNo.arr,date);
  }

  ret = (CMNC_imtrTrnfClac_CC(&st_itc, &err));

  if (strcmp(retVal3,"Y") == 0) {
    (void) uvGetTime(10, date);
    ncDebug(" end[%s] ret[%d] recvYn[%s] jNo[%.0f] imtrNscd[%s] imtrBankNscd[%s]"
            ,date,ret,(char *) st_itc.recvYn.arr,st_itc.jNo
            ,(char *) st_itc.imtrNscd     .arr
            ,(char *) st_itc.imtrBankNscd .arr);
    ncFprint();
  }

  uvDebug("즉시이체 결과");
  uvDebug("st_itc.recvYn          =  [%s]",  (char *) st_itc.recvYn       .arr);
  uvDebug("st_itc.jNo             =  [%f]",           st_itc.jNo);
  uvDebug("st_itc.imtrNscd        =  [%s]",  (char *) st_itc.imtrNscd     .arr);
  uvDebug("st_itc.imtrBankNscd    =  [%s]",  (char *) st_itc.imtrBankNscd .arr);
  uvDebug("st_itc.rqstSeqNo       =  [%s]",  (char *) st_itc.rqstSeqNo    .arr);

  COPYVAR(stp->rqstSeqNo[0] , st_itc.rqstSeqNo);

  /*******************************************************************/
  /* 즉시이체의 결과를 사용하기 위하여 중간 스트럭쳐에 값을 넣어놓는다
  /* 2006.2.27 신진혁
  /*******************************************************************/
  COPYVAR(stp_real->recvYn       , st_itc.recvYn);
  COPYVAR(stp_real->dmndDate     , st_itc.dmndDate);
  COPYVAR(stp_real->imtrNscd     , st_itc.imtrNscd);
  COPYVAR(stp_real->imtrBankNscd , st_itc.imtrBankNscd);
  COPYVAR(stp_real->bankCode     , st_itc.bankCode);
  COPYVAR(stp_real->polyNo       , st_itc.admnNo);
  (       stp_real->jNo          = st_itc.jNo);


  /*============start 수정일자::20050304  수정자::이충열 수정내용::즉시이체 미입금 사유 룰반영 start===========*/
  if (ret != SUCCESS ||
      ((strncmp((char *) st_itc.recvYn.arr,   "Y", 1) == 0) &&
       (strncmp((char *) st_itc.imtrBankNscd.arr, "0000", 4) != 0))) {

    /* 세금우대 등록취소 */
    if ( SVncapl300in_dcncApl214in14Sp(stp)  == FAIL ) {
      uvDebug("세금우대 등록삭제 실패");
    }

    /* 저축성 비과세 등록 취소    */
    if (SVncapl300in_dencApl214in04Sp(stp) == FAIL) {
      uvDebug("저축성 비과세 등록삭제 실패");
    }

    EXEC SQL ROLLBACK;
    uvDebug("즉시이체 모듈 에러 ");
    uvDebug("CMNC_imtrTrnfClac_CC  err.errCode  =   [%d]", err.errCode[0]);
    uvDebug("CMNC_imtrTrnfClac_CC  err.errMsg   =   [%s]", err.errMsg[0]);

    int retCode = uvRuleBase("imtrTrnf_errMsg", "",
        (char *) st_itc.bankCode.arr,
        (char *) st_itc.imtrBankNscd.arr,
        &retVal);

    if (retCode != 0) {
      EXEC SQL ROLLBACK;
      uvDebug("(imtrTrnf_errMsg) 룰호출 오류[%d]", retCode);
      SVC_CLOSE(APPERR, 6772, 0, "(imtrTrnf_errMsg) 룰호출 오류", fnName1);
    }

    if (retVal == 9999) {
      err.errCode[0] = 5894;

      sprintf(err.errFld[0], "%s", "즉시이체모듈에러");
      err.errKind[0] = 2;
      appReturnCode = (int) err.errCode[0];

      uvDebug("===============start 9999 즉시이체 미이체사유 룰처리 start ==================");
      uvDebug("retCode        :  [%d]", retCode);
      uvDebug("미이체사유코드 :  [%d]", retVal);
      uvDebug("===============end   9999 즉시이체 미이체사유 룰처리 end   ==================");

      SVC_CLOSE(APPERR, appReturnCode, 0, err.errMsg[0],"SVncapl300in");
    } else {
      err.errCode[0] = retVal;
      sprintf(err.errFld[0], "%s", "즉시이체모듈에러");
      err.errKind[0] = 2;
      appReturnCode = (int) err.errCode[0];

      uvDebug("===============start 즉시이체 미이체사유 룰처리 start ==================");
      uvDebug("retCode        :  [%d]", retCode);
      uvDebug("미이체사유코드 :  [%d]", retVal);
      uvDebug("===============end   즉시이체 미이체사유 룰처리 end   ==================");

      SVC_CLOSE(APPERR, appReturnCode, 0, "즉시이체 미처리 사유 발생","SVncapl300in");
    }
  }

  /******************************************************************************/
  /* 미입금접수 테스트용 코드 (운영기반영시 반드시 삭제할 것)                   */
  /* (룰에 해당증번이 있으면 무조건 미입금접수)                                 */
  /******************************************************************************/
  /*
  char retVal_1[MAX_VALUE_LEN];
  memset(retVal_1, 0x00, sizeof(retVal_1));

  int retCode = uvRuleBase("real_trnf_test", "",
                            (char*)stp->polyNo.arr,
                            retVal_1);

  if  (retCode != 0)
  {
    EXEC SQL ROLLBACK;
    uvDebug("(real_trnf_test) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(real_trnf_test) 룰호출 오류", fnName);
  }

  uvDebug("***** real trnf test [%s]", retVal_1);

  if (strlen(retVal_1) > 0)
  {
    STR2VAR(stp_real->recvYn, "N");
  }
  */
  /******************************************************************************/

  /* 즉시이체 중간관리 테이블에 insert 시킨다. 후에 정상건은 delete 시킨다 */

  uvDebug("=== 즉시이체 중간관리 테이블 insert Start ===");

  struct _dcnc_apl300in221_sp_in  dcncApl300in221SpIn;

  setInitDBIO(1, DBCURSOR_CLOSE);

  dcncApl300in221SpInClear(&dcncApl300in221SpIn);

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  /* COPYVAR(dcncApl300in22SpIn.cnttStatDtcd ,   stp_real->cnttStatDtcd   ); /* 계약상태상세코드 */
  COPYVAR(dcncApl300in221SpIn.dmndDate,   stp_real->dmndDate);    /* 이체일자 */
  COPY(dcncApl300in221SpIn.imtrStcd,   "1");              /* 즉시이체상태코드 */
  COPYVAR(dcncApl300in221SpIn.imtrNscd,   stp_real->imtrNscd); /* 즉시이체응답코드 */
  COPY(dcncApl300in221SpIn.imtrBankNscd,   "XXXX");   /* 즉시이체은행응답코드 */
  COPY(dcncApl300in221SpIn.imtrRtcd,   "0");              /* 즉시이체결과코드 */
  COPYVAR(dcncApl300in221SpIn.bankCode,   stp_real->bankCode);    /* 은행코드 */
  dcncApl300in221SpIn.telgSeqNo    =   stp_real->jNo;             /* 전문번호 */

  uvDebug("dcncApl300in221SpIn.dmndDate     [%s]",(char *) dcncApl300in221SpIn.dmndDate    .arr);
  uvDebug("dcncApl300in221SpIn.imtrStcd     [%s]",(char *) dcncApl300in221SpIn.imtrStcd    .arr);
  uvDebug("dcncApl300in221SpIn.imtrNscd     [%s]",(char *) dcncApl300in221SpIn.imtrNscd    .arr);
  uvDebug("dcncApl300in221SpIn.imtrBankNscd [%s]",(char *) dcncApl300in221SpIn.imtrBankNscd.arr);
  uvDebug("dcncApl300in221SpIn.bankCode     [%s]",(char *) dcncApl300in221SpIn.bankCode    .arr);
  uvDebug("dcncApl300in221SpIn.telgSeqNo    [%f]",        dcncApl300in221SpIn.telgSeqNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  /* DBIO module 호출                                             */

  dcncApl300in221Sp(&basicParam,&dcncApl300in221SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN_221_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN_221_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */

  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("DCNC_APL300IN_221_SP 호출에러");
    appReturnCode = 3425;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "다시 조회후 접수하십시요", "SVncapl300in1");
  }

  uvDebug("=== 즉시이체 중간관리 테이블 insert End ===");

  uvDebug("SVncapl300in1_imtyTrnf    End");

  if (strcmp(retVal3,"Y") == 0) {
    memset(dmsg, 0x00, sizeof(dmsg));
    ncDebug(" COMMIT");
    ncFprint();
  }

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_CMNC_udwrNotc_CC()
  Note          : 심사시유의사항
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_udwrNotc_CC(struct stp_SVncapl300in1 *stp) {
  int             ii;
  int             jj;
  CMNC_udwrNotc   udn;

  memset(&udn,    0x00,   sizeof(CMNC_udwrNotc));

  VAR2STR(udn.polyNo,   stp->polyNo);                           /* I 증권번호 */
  strncpy(udn.reviDlngNo,   "0000", 4);                     /* I 부활처리번호 */
  strncpy(udn.joltCalcDvsn,   "02",   2);               /* I 가입한도산출구분 */
  strncpy(udn.spclSplsYn,   "N",   1);                      /* I 특별초과여부 */
  VAR2STR(udn.apcnDate,   stp->cnttDate);             /* I 적용일자(계약일자) */
  VAR2STR(udn.irkdCodeDtal,   stp->irkdCodeDtal);            /* I 보종코드_세 */
  VAR2STR(udn.irkdCodeItem,   stp->irkdCodeItem);            /* I 보종코드_목 */
  VAR2STR(udn.acctRlcd,   stp->dtorCtorReln);                 /* I 예금주관계 */
  VAR2STR(udn.taxPrctYn,   stp->taxPrctYn);                 /* I 세금우대여부 */
  VAR2STR(udn.taxPrmnKind,   stp->taxPrmnKind);         /* I 세금우대주체종류 */
  VAR2STR(udn.orgnArdcYn,   stp->orgnArdcYn);           /* I 기관전결대상여부 */
  VAR2STR(udn.grttSpcdYn,   stp->grttSpcdYn);       /* I 단체취급특약부가여부 */
  udn.premCoprCgrt    =   stp->premCoprCgrt;            /* I 보험료법인부담율 */
  VAR2STR(udn.ctorEdbnReln,   stp->ctorEdbnReln);   /* I 계약자만기수익자관계 */
  VAR2STR(udn.arsCnttYn,   stp->arsCnttYn);           /* I 영업외 청약건 여부 */

  if ((strncmp((char *) stp->insrAcctDvsn.arr, "21", 2) == 0)  \
      ||  (strncmp((char *) stp->insrAcctDvsn.arr, "22", 2) == 0)  \
      ||  (strncmp((char *) stp->insrAcctDvsn.arr, "23", 2) == 0)) {
    strncpy(udn.vlnsYn,   "Y",    1);                   /* I 변액보험여부(YN) */
  } else {
    strncpy(udn.vlnsYn,   "N",    1);                   /* I 변액보험여부(YN) */
  }

  for (ii = 0; ii < stp->cjgCnt; ii++) {
    VAR2STR(udn.goodCodeDtal[ii],   stp->cjggoodCodeDtal[ii]); /* I 상품코드_세 */
    VAR2STR(udn.goodCodeItem[ii],   stp->cjggoodCodeItem[ii]); /* I 상품코드_목 */
    udn.spcdPrem[ii]    =   stp->cjgorigPrem[ii];             /* I 특약보험료 */
  }

  for (ii = 0; ii < stp->crmCnt; ii++) {
    VAR2STR(udn.custId[ii],   stp->custId[ii]);          /* I 고객ID        ] */
    VAR2STR(udn.rsdnRgstNo[ii],   stp->custRrno[ii]);    /* I 주민번호      ] */
    VAR2STR(udn.custRoleCode[ii],   stp->custRoleCode[ii]); /* I 고객역할코드 */
    VAR2STR(udn.minsRelnCode[ii],   stp->minsRelnCode[ii]); /* I 주피와의관계코드 */
    udn.age[ii]    =   (int) stp->joinAge[ii];                      /* I 연령 */
    VAR2STR(udn.occpCode[ii],   stp->occpCode[ii]);             /* I 직종코드 */
    VAR2STR(udn.riskGradCode[ii],   stp->riskGradCode[ii]);     /* I 위험등급 */
    VAR2STR(udn.mediKindCode[ii],   stp->mediKindCode[ii]);     /* I 진단종류 */
    VAR2STR(udn.prevMediObyn[ii],   stp->prevMediObyn[ii]); /* I 선진단대상여부 */
    VAR2STR(udn.mdobXtrtRscd[ii],   stp->mdobXtrtRscd[ii]); /* I 진단대상발췌사유코드 */
    VAR2STR(udn.exYn[ii],   stp->splsBodyYn[ii]);             /* I 초과체여부 */
    VAR2STR(udn.apYn[ii],   stp->prevPaymPrstYn[ii]);   /* I 기지급급부체여부 */
    VAR2STR(udn.mdivObjtDvsn[ii],   stp->wlisDtivObyn[ii]); /* I 의무조사대상여부(YN) */
    VAR2STR(udn.resnCode[ii],   stp->retnPaymRscd[ii]); /* I 반송지급사유코드 */
    VAR2STR(udn.stdbSbstKdcd[ii],   stp->stdbSbstKdcd[ii]); /* I 표준하체종류코드 */
    if ((strncmp((char *) stp->frnrDvsnCode[ii].arr, "1", 1) == 0)  \
        ||     (strncmp((char *) stp->frnrDvsnCode[ii].arr, "2", 1) == 0)  \
        ||     (strncmp((char *) stp->frnrDvsnCode[ii].arr, "3", 1) == 0)) {
      strncpy(udn.frnrManYn[ii],  "Y",    1);                 /* I 외국인여부 */
    } else {
      strncpy(udn.frnrManYn[ii],  "N",    1);                 /* I 외국인여부 */
    }
    if ((strncmp((char *) stp->hndrDvsnCode[ii].arr, "1", 1) == 0)  \
        ||     (strncmp((char *) stp->hndrDvsnCode[ii].arr, "2", 1) == 0)  \
        ||     (strncmp((char *) stp->hndrDvsnCode[ii].arr, "3", 1) == 0)) {
      strncpy(udn.hndcManYn[ii],  "Y",    1);                 /* I 장애인여부 */
    } else {
      strncpy(udn.hndcManYn[ii],  "N",    1);                 /* I 장애인여부 */
    }
  }

  for (jj = 0; jj < stp->bnfCnt; jj++) {
    VAR2STR(udn.custId[ii],   stp->bnfccustId[jj]);      /* I 고객ID        ] */
    VAR2STR(udn.rsdnRgstNo[ii],   stp->bnfccustRrno[jj]); /* I 주민번호      ] */
    VAR2STR(udn.custRoleCode[ii],   stp->bnfccustRoleCode[jj]); /* I 고객역할코드 */
    VAR2STR(udn.minsRelnCode[ii],   stp->bnfcminsRelnCode[jj]); /* I 주피와의관계코드 */
    udn.age[ii]    =   (int) stp->bnfcjoinAge[jj];                  /* I 연령 */
    strncpy(udn.frnrManYn[ii],   "N",    1);                  /* I 외국인여부 */
    strncpy(udn.hndcManYn[ii],   "N",    1);                  /* I 장애인여부 */
    ii++;
  }

  strcpy(udn.resr4Yn, (char *) stp->finaUwDvsn.arr);

  uvDebug("재정질의서   구분 = [%s]",  udn.resr4Yn);

  VAR2STR(udn.ctorCustId,   stp->ctorCustId);   /* I 계약자ID */
  VAR2STR(udn.cnttGrpCtid,  stp->cnttGrpCtid);  /* I 계약자단체고객ID */
  VAR2STR(udn.bdctNo,   stp->bdctNo);           /* I 일괄계약번호 */
  VAR2STR(udn.paymCyclCode, stp->paymCyclCode); /* I 납입주기코드 */
  udn.sumOrigPrem        =  stp->sumOrigPrem;   /* I 합계원보험료 */
  strcpy(udn.workGubun,    "2");                /* I 작업구분 : 발행 */
  VAR2STR(udn.custCrinMncd, stp->custCrinMncd); /* I 고객신용정보조치코드     */

  /* 청약서 발행/접수시, 판매채널코드(개인,법인,KLD,대리점),    */
  /* 개별계약, 비일시납의 경우만 재정U/W 여부 체크              */
  if ((strcmp((char *) stp->saleChnlCode.arr, "3") != 0)  &&
      (strcmp((char *) stp->saleChnlCode.arr, "4") != 0)  &&
      (strcmp((char *) stp->saleChnlCode.arr, "5") != 0)  &&
      (strlen((char *) stp->bdctNo.arr) ==  0) && (strcmp((char *) stp->paymCyclCode.arr, "0") != 0)) {
    if (CMNC_finaUwdtSave((char *) stp->polyNo.arr,
                          udn.joltCalcDvsn,
                          stp->maxSumCalcAmt,
                          stp->maxOocsCalcAmt,
                          stp->maxOthrPrstTota) == FAIL) {
      appReturnCode = 4899;
      SVC_CLOSE(APPERR, appReturnCode, 0,"재정U/W 상세정보 저장 오류", "SVncapl300in1");
    }
  }

  if (CMNC_udwrNotc_CC(&udn) != TRUE) {
    EXEC SQL ROLLBACK;
    uvDebug("심사시유의사항(CMNC_udwrNotc_CC) 호출 오류");
    appReturnCode = 4746;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "심사시유의사항(CMNC_udwrNotc_CC) 호출 오류", "SVncapl300in1");
  }

  if (udn.resultCode !=  0) {
    EXEC SQL ROLLBACK;
    uvDebug("심사시유의사항(CMNC_udwrNotc_CC) 호출 오류");
    appReturnCode = 4746;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "심사시유의사항(CMNC_udwrNotc_CC) 호출 오류", "SVncapl300in1");
  }

  return;
}

#ifdef CP_SWEEP
/************************************************************************
  Function Name : SVncapl300in1_bowanBalche()
  Note          : 보완발췌처리
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
//void SVncapl300in1_bowanBalche(struct stp_SVncapl300in1 *stp) {
//  int ii;
//
//  CMNC_bowanBalche    bbc;
//
//  uvDebug("SVncapl300in1_bowanBalche    Start");
//
//  memset(&bbc,    0x00,   sizeof(CMNC_bowanBalche));
//
//  strncpy(bbc.dvsn,   "1",            1);         /* I : 구분(1:신계약2:부활) */
//  VAR2STR(bbc.admnNo,   stp->polyNo);            /* I : 관리번호(증번,부활번) */
//  VAR2STR(bbc.apcnDate,   stp->crntDate);          /* I : 적용일자(계약,부활) */
//  VAR2STR(bbc.irkdCodeDtal,   stp->irkdCodeDtal);          /* I : 보험종류_세 */
//  VAR2STR(bbc.irkdCodeItem,   stp->irkdCodeItem);          /* I : 보험종류_목 */
//
//  for (ii = 0; ii < stp->cjgCnt; ii++) {
//    VAR2STR(bbc.goodCodeDtal[ii],   stp->cjggoodCodeDtal[ii]); /* I : 상품종류_세 */
//    VAR2STR(bbc.goodCodeItem[ii],   stp->cjggoodCodeItem[ii]); /* I : 상품종류_목 */
//  }
//
//  VAR2STR(bbc.txprSavgKind,   stp->txprConnTpcd);     /* I : 세금우대저축종류 */
//  VAR2STR(bbc.taxPrmnKind ,   stp->taxPrmnKind );     /* I : 세금우대주체종류 */
//  VAR2STR(bbc.dtorCtorReln,   stp->dtorCtorReln); /* I : 예금주계약자관계코드 */
//  VAR2STR(bbc.minsCtorReln,   stp->minsRelnCode[0]); /* I : 주피계약자관계코드 */
//  VAR2STR(bbc.minsEdbnReln,   stp->bnfcminsRelnCode[0]); /* I : 주피만기수익자관계 */
//
//  for (ii = 0; ii < stp->crmCnt; ii++) {
//    VAR2STR(bbc.custRoleCode[ii],   stp->custRoleCode[ii]); /* I : 고객역할코드 */
//    VAR2STR(bbc.rsdnRgstNo[ii],   stp->custRrno[ii]);     /* I : 주민등록번호 */
//    VAR2STR(bbc.mediKindCode[ii],   stp->mediKindCode[ii]); /* I : 진단종류코드 */
//    VAR2STR(bbc.prevMediObyn[ii],   stp->prevMediObyn[ii]); /* I : 선진단대상진단여부 */
//  }
//
//  CMNC_bowanBalche_CC(&bbc);
//
//  for (ii = 0; ii < bbc.cpmtCnt; ii++) {
//    PUTSTR(NC_STR_102,  ii, bbc.cpmtResnCode[ii]);        /* O : 보완사유코드 */
//    PUT(NC_DOU_103,  ii, bbc.cpmtSqno[ii]);               /* O : 보완일련번호 */
//    PUTSTR(NC_STR_104,  ii, bbc.cpmtDocuCode[ii]);        /* O : 보완서류코드 */
//  }
//  uvDebug("SVncapl300in1_bowanBalche    End");
//
//  return;
//}
#endif

/************************************************************************
  Function Name : SVncapl300in1_dcncCmncsnlb08Sp()
  Note          : 계약항목변경관리입력
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncCmncsnlb08Sp(struct stp_SVncapl300in1 *stp) {

  struct _dcnc_cmncsnlb08_sp_in  dcncCmncsnlb08SpIn[2];

  uvDebug("SVncapl300in1_dcncCmncsnlb08Sp    Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncCmncsnlb08SpInClear(dcncCmncsnlb08SpIn,2);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncCmncsnlb08SpIn[0].pgmIdI,   "SVncapl300in1");            /* PGM_ID */
  COPY(dcncCmncsnlb08SpIn[0].lastMpnoI,   uvGetUserID());          /* USER_ID */
  COPYVAR(dcncCmncsnlb08SpIn[0].admnNo,   stp->polyNo);           /* 관리번호 */
  COPY(dcncCmncsnlb08SpIn[0].admnNoDvsn,   "1");              /* 관리번호구분 */
  COPY(dcncCmncsnlb08SpIn[0].tablId,   "TB_NCAPLCTT");            /* 테이블ID */
  COPYVAR(dcncCmncsnlb08SpIn[0].pk,   stp->polyNo);                 /* 기본키 */
  COPY(dcncCmncsnlb08SpIn[0].clmnId,   "CNTT_STAT_CODE");           /* 컬럼ID */
  COPY(dcncCmncsnlb08SpIn[0].chngAttrDvsn,   "C");            /* 변경속성구분 */
  COPY(dcncCmncsnlb08SpIn[0].chbfValChr,   "6");             /* 변경전값_문자 */
  COPYVAR(dcncCmncsnlb08SpIn[0].chafValChr,   stp->cnttStatCode); /* 변경후값_문자 */

  COPY(dcncCmncsnlb08SpIn[1].pgmIdI,   "SVncapl300in1");            /* PGM_ID */
  COPY(dcncCmncsnlb08SpIn[1].lastMpnoI,   uvGetUserID());          /* USER_ID */
  COPYVAR(dcncCmncsnlb08SpIn[1].admnNo,   stp->polyNo);           /* 관리번호 */
  COPY(dcncCmncsnlb08SpIn[1].admnNoDvsn,   "1");              /* 관리번호구분 */
  COPY(dcncCmncsnlb08SpIn[1].tablId,   "TB_NCAPLCTT");            /* 테이블ID */
  COPYVAR(dcncCmncsnlb08SpIn[1].pk,   stp->polyNo);                 /* 기본키 */
  COPY(dcncCmncsnlb08SpIn[1].clmnId,   "CNTT_STAT_DTCD");           /* 컬럼ID */
  COPY(dcncCmncsnlb08SpIn[1].chngAttrDvsn,   "C");            /* 변경속성구분 */
  COPY(dcncCmncsnlb08SpIn[1].chbfValChr,   "61");            /* 변경전값_문자 */
  COPYVAR(dcncCmncsnlb08SpIn[1].chafValChr,   stp->cnttStatDtcd); /* 변경후값_문자 */
  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(2,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncCmncsnlb08Sp(&basicParam,dcncCmncsnlb08SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_CMNCSNLB08_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_CMNCSNLB08_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */

  uvDebug("SVncapl300in1_dcncCmncsnlb08Sp    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_PremiumDemandCreate_CC()
  Note          : 보험료 청구체크생성
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_PremiumDemandCreate_CC(struct stp_SVncapl300in1 *stp,  int freePlanDvsn) {
  int     ii;
  int     kk;
  char    frstPaymMnth[6+1];                    /* 최초납월(소급) */
  char    lastPaymMnth[6+1];                    /* 최종납월(선납) */
  char    nextPaymMnth[6+1];                    /* 익월납월 */

  uvDebug("SVncapl300in1_PremiumDemandCreate_CC   Start");

  ii      = 0;
  kk      = 0;
  stp->paymCnt = 0;

  memset(frstPaymMnth,   0x00,   sizeof(frstPaymMnth));
  memset(lastPaymMnth,   0x00,   sizeof(lastPaymMnth));
  memset(nextPaymMnth,   0x00,   sizeof(nextPaymMnth));

  UvT *tyCP = uvTNewO("PREM_DMND_CRT",1,0);
  /* 보험료청구생성   */
  TRY {
    uvTSetS("1",                           &tyCP, 0, "premDvsn");
    uvTSetS((char *)stp->polyNo.arr,       &tyCP, 0, "polyNo");
    uvTSetS((char *)stp->ftprRmtnDate.arr, &tyCP, 0, "recpDate");
    uvTSetI((int) stp->addPaymPrem,        &tyCP, 0, "addPrem" );

    /* 소급             */
    if (((int) stp->ppayRetrCnt[1] != 0) && (freePlanDvsn == 0)) {
      CMUV_getDateByMonth_CC((char *) stp->ftprRmtnDate.arr
                            ,(int) (stp->ppayRetrCnt[1] * atoi((char *) stp->paymCyclCode.arr) * -1), frstPaymMnth);
      COPY(stp->frstPaymMnth, frstPaymMnth);

      for (ii = 0; ii < (int) stp->ppayRetrCnt[1]; ii++) {

        stp->paymCnt++;

        uvTSetS((char *)frstPaymMnth,      &tyCP, 0, "paymYm#"  , kk   ); /* I 입력납월 */
        uvTSetI((int) stp->paymCnt,        &tyCP, 0, "paymCnt#" , kk   ); /* I 입력납회 */
        uvTSetL((long) 0,                  &tyCP, 0, "ppayInte#", kk   ); /* I 선납이자 */
        uvTSetL((long) (stp->ppayRetrInte[1]/stp->ppayRetrCnt[1]), &tyCP, 0, "arreInte#", kk); /* I 소급이자 */

        CMUV_getDateByMonth_CC(frstPaymMnth, atoi((char *) stp->paymCyclCode.arr), nextPaymMnth);
        strncpy(frstPaymMnth,   nextPaymMnth,   6);

        kk++;
      }
    } else {
      NCOPYVAR(stp->frstPaymMnth,   stp->ftprRmtnDate,  6);
    }

    /* 현재월           */
    stp->paymCnt++;
    NCOPYVAR(stp->lastPaymMnth,   stp->ftprRmtnDate,  6);
    VAR2STR(lastPaymMnth,   stp->lastPaymMnth);

    uvTSetS((char *)lastPaymMnth,   &tyCP, 0, "paymYm#" , kk);
    uvTSetD((double) stp->paymCnt,  &tyCP, 0, "paymCnt#", kk);
    uvTSetI(0, &tyCP, 0, "ppayInte#", kk );
    uvTSetI(0, &tyCP, 0, "arreInte#", kk );
    kk++;

    /* 선납             */
    if (((int) stp->ppayRetrCnt[0] != 0) && (freePlanDvsn == 0)) {
      for (ii = 0; ii < (int) stp->ppayRetrCnt[0]; ii++) {
        CMUV_getDateByMonth_CC(lastPaymMnth, atoi((char *) stp->paymCyclCode.arr), nextPaymMnth);
        strncpy(lastPaymMnth,   nextPaymMnth,   6);
        stp->paymCnt++;

        uvTSetS(lastPaymMnth        ,          &tyCP, 0, "paymYm#"  , kk );    /* I 입력납월 */
        uvTSetI((int) stp->paymCnt,            &tyCP, 0, "paymCnt#" , kk );   /* I 입력납회 */
        uvTSetL((long)(stp->ppayRetrInte[0]/stp->ppayRetrCnt[0]), &tyCP, 0, "ppayInte#", kk ); /* I 선납이자 */
        uvTSetL(0,                             &tyCP, 0, "arreInte#", kk );  /* I 연체이자 */

        kk++;
      }
    }
    COPY(stp->lastPaymMnth,   lastPaymMnth);
  } CATCH {
    uvDebug("[%s][%d] : [%s]", "SVncapl300in1", __LINE__, uvTGetMessage());
    EXEC SQL ROLLBACK;
    uvDebug("보험료청구생성 호출 오류");
    appReturnCode = 4649;
    CMIS_deleteAll_CC();
    SVC_CLOSE(APPERR, appReturnCode, 0, "보험료청구생성 함수 호출 오류", "SVncapl300in1");
  }

  if (CMCP_PremiumDemandCreate_CC(tyCP) != SUCCESS) {
    EXEC SQL ROLLBACK;
    uvDebug("보험료청구생성 호출 오류");
    appReturnCode = 4649;
    CMIS_deleteAll_CC();
    SVC_CLOSE(APPERR, appReturnCode, 0, "보험료청구생성 함수 호출 오류", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_PremiumDemandCreate_CC   End");

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_PremiumInputProc_CC()
  Note          : 보험료 입금처리
  Parameters    : (none)
  Return Value  : (none)
                  bsnsDvsn : 1 은 방문수금, 카드납
                             2 는 즉시이체(즉시이체시는 요금함수 호출 오류시 return success)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_PremiumInputProc_CC(struct stp_SVncapl300in1 *stp) {

 uvDebug("SVncapl300in1_PremiumInputProc_CC   Start");

  ncClsCnttRsr();

  UvT *tyCp = uvTNewO("PREM_INPT_DLNG",1,0);

  varchar addpaymMnth [6+1];
  INITVAR(addpaymMnth);
  NCOPYVAR(addpaymMnth,   stp->ftprRmtnDate,     6); /* I_추가납입년월 */

  TRY {
    /*  입금처리        */
    uvTSetS("0"    , &tyCp,   0, "workDvsn#", 0          );  /* I_작업구분 */
    uvTSetS((char *)stp->collOrgnCode.arr , &tyCp,  0, "collOrgnCode#", 0      );  /* I_수금기관 */
    uvTSetS((char *)uvGetUserOrgCode()    , &tyCp,  0, "dlngOrgnCode#", 0      );  /* I_처리기관 */
    uvTSetS((char *)uvGetUserOrgCode()    , &tyCp,  0, "rvrsOrgnCode#", 0      );  /* I_경리귀속기관 */
    uvTSetS((char *)stp->ftprRmtnDate.arr , &tyCp,  0, "rmtnDate#", 0          );  /* I_송금일자 */
    uvTSetS((char *)stp->ftprRmtnDate.arr , &tyCp,  0, "dlngDate#", 0          );  /* I_처리일자 */

    /* 초회보험료영수일자 입력기준 변경 (보험RM파트-00043, 2004.01.15 장두원) */
    if (strcmp((char*) stp->retrYn.arr,"Y") == 0) { /* 소급계약 */
      uvTSetS((char*)stp->realFtprRmtnDate.arr, &tyCp,  0, "recpDate#", 0          ); /* I_영수일자 = 초회보험료송금일자 */
    } else {
      uvTSetS((char*)stp->cnttDate.arr        , &tyCp,  0, "recpDate#", 0          ); /* I_영수일자 = 계약일자 */
    }

    uvTSetS((char*)stp->crntDate.arr    , &tyCp, 0, "inptDate#", 0          );
    uvTSetS((char*)addpaymMnth.arr      , &tyCp, 0, "achvYm#", 0            );  /* I_실적산정월 */
    uvTSetS((char*)stp->collLpPrno.arr  , &tyCp, 0, "lpPrno#", 0            );  /* I_처리설계사고유번호 */
    uvTSetS("1"                         , &tyCp, 0, "premAdmnDvsn#", 0      );  /* I_보험료관리구분 */
    uvTSetS((char*)stp->ftprRecvMdcd.arr, &tyCp, 0, "rcwcMetdDvsn#", 0      );  /* I_입출금방법 */
    uvTSetS("1"                         , &tyCp, 0, "prsnGrpDvsn#" , 0      );  /* I_개별/단체구분 */
    uvTSetS("N"                         , &tyCp, 0, "errDlngYn#"   , 0      );  /* I_착오처리구분 */
    uvTSetS("0"                         , &tyCp, 0, "spclRecvCode#", 0      );  /* I_특별입금코드 */
    uvTSetS((char*)stp->recpNo.arr      , &tyCp, 0, "recpNo#"      , 0      );  /* I_영수증번호 */
    uvTSetS((char*)stp->polyNo.arr      , &tyCp, 0, "polyNo#"      , 0      );  /* I_증권번호 */
    uvTSetI(1                           , &tyCp, 0, "frstPyct#"    , 0      );  /* I_초납회 */
    uvTSetI((int)stp->paymCnt           , &tyCp, 0, "itemPyct#"    , 0      );  /* I_종납회 */
    uvTSetS((char*)stp->frstPaymMnth.arr, &tyCp, 0, "paymMnth#"    , 0      );  /* I_납입년월 */
    uvTSetI(1                           , &tyCp, 0, "dmndSeqNo#"   , 0      );  /* I_청구일련번호 */
    uvTSetI(0                           , &tyCp, 0, "addRmtnPrem#" , 0      );  /* I_추가송금보험료 */
    uvTSetI((int   )stp->fstiRrcvPrem   , &tyCp, 0, "recvPrem#"    , 0      );  /* I_실입금액 */
    uvTSetS((char*)addpaymMnth.arr      , &tyCp, 0, "addpaymMnth#" , 0      );  /* I_추가납입년월 */
    uvTSetI((int   )stp->addPaymPrem    , &tyCp, 0, "addPaymPrem#" , 0      );  /* I_추가납입보험료 */

    uvDebug("I_초납회 = [%d] ", uvTGetI(tyCp, 0, "frstPyct#"    , 0    )  );
    uvDebug("I_종납회 = [%d] ", uvTGetI(tyCp, 0, "itemPyct#"    , 0    )  );
  } CATCH {
    uvDebug("[%s][%d] : [%s]", "SVncapl300in1", __LINE__, uvTGetMessage());
    EXEC SQL ROLLBACK;
    uvDebug("보험료입금처리 함수 호출 오류");
    appReturnCode = 4650;
    CMIS_deleteAll_CC();
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "보험료입금처리 함수 호출 오류", "SVncapl300in1");
  }

  if (CMCP_PremiumInputProc_CC(tyCp) != SUCCESS) {
    EXEC SQL ROLLBACK;
    uvDebug("보험료입금처리 함수 호출 오류");
    appReturnCode = 4650;
    CMIS_deleteAll_CC();
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "보험료입금처리 함수 호출 오류", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_PremiumInputProc_CC   End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_CMNC_taxPrctRgst()
  Note          : 세금우대 등록
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_taxPrctRgst(struct stp_SVncapl300in1 *stp, int ii) {

  int                         ret;

  CMNC_taxPrctRgst            tpr;   /* 세금우대등록 모듈 */

  char  ipAddress [15+1];
  char  serverDvsn[ 1+1];

  uvDebug("SVncapl300in1_CMNC_taxPrctRgst   Start [%d]",ii);

  memset(&tpr,    0x00,   sizeof(CMNC_taxPrctRgst));

  /* 세금우대의 경우 지정일이체는 접수불가 */
  if ( strcmp( (char *)stp->ftprRecvMdcd.arr,"81" ) == 0 )
  {
    uvDebug("세금우대의 경우 지정일이체는 처리불가합니다.");
    EXEC SQL ROLLBACK;
    SVC_CLOSE(APPERR, 4899, 0, "세금우대의 경우 지정일이체는 처리불가합니다.","SVncapl300in1");
  }

  if (strncmp((char *) stp->taxPrctYn.arr, "Y", 1) != 0) {
    uvDebug("세금우대 대상계약 아님",(char *) stp->taxPrctYn   .arr);
    return;
  }

  /* 세금우대 은행연합회 등록         */
  COPY(tpr.txprOccrCadv,   "01");                     /* 세금우대발생원인구분 */

  /* 월납(적립형) - 자유설계계약 stp->scndPolyNo 이 월납증번 */
  if(ii==0) {
    if (strncmp((char *) stp->freePlanYn.arr, "Y", 1) == 0) {
      COPYVAR(tpr.polyNo,   stp->scndPolyNo);                       /* 증권번호 */
    } else {
      COPYVAR(tpr.polyNo,   stp->polyNo);                           /* 증권번호 */
    }
    tpr.histNo          =   0;                                      /* 이력번호 */
    tpr.taxPrpsAmt      =   stp->taxPrpsAmt;          /* 주체별세금우대가능금액 */
    tpr.taxPrjnAmt      =   stp->taxPrjnAmt;          /* 연합회세금우대등록금액 */
  }
  /* 일시납(거치형) - 자유설계계약 stp->polyNo 이 일시납증번 */
  else {
    COPYVAR(tpr.polyNo,   stp->polyNo);                           /* 증권번호 */
    tpr.histNo          =   0;                                    /* 이력번호 */
    tpr.taxPrpsAmt      =   stp->frptaxPrpsAmt;     /* 주체별세금우대가능금액 */
    tpr.taxPrjnAmt      =   stp->frptaxPrjnAmt;     /* 연합회세금우대등록금액 */
  }

  uvDebug(" === stp->taxPrjnAmt [%.f]",stp->taxPrjnAmt);
  uvDebug(" === tpr->taxPrjnAmt [%.f]",tpr.taxPrjnAmt);

  memset(ipAddress  , 0x00 ,sizeof(ipAddress ));
  memset(serverDvsn , 0x00 ,sizeof(serverDvsn));

  /* serverDvsn - R(운영),Q(QA),D(DEV),E(ERROR) */
  if(hostNameToServer (ipAddress, serverDvsn)==FAIL) {
    uvDebug("hostNameToServer 함수 호출 에러");
  }

  if (strncmp(serverDvsn, "K", 1) == 0 || strncmp(serverDvsn, "Q", 1) == 0) {
    uvDebug("방카사업부의 간곡한 요청으로 세금우대등록처리 예외");
    return;
  }

  ret =   CMNC_taxPrctRgst_CC(&tpr);

  uvDebug("세금우대결과 [%d], 세금우대결과코드[%s]",ret,(char *) tpr.txprAnswCode .arr);

  if (ret != SUCCESS || strcmp((char *) tpr.txprAnswCode .arr, "000") != 0 ) {

    EXEC SQL ROLLBACK;

    char txprAnswCdnm[MAX_VALUE_LEN];
    memset(txprAnswCdnm, 0x00, sizeof(txprAnswCdnm));
    uvDebug("NC_txprAnsw_Mapp 룰 호출");

    int retCode = uvRuleBase("NC_txprAnsw_Mapp",
        "",
        (char *) tpr.txprAnswCode .arr,
        txprAnswCdnm);
    if (retCode != 0) {
      SVC_CLOSE(APPERR, 4899, 0, "세금우대 등록 및 NC_txprAnsw_Mapp 룰 호출오류","SVncapl300in1");
    }

    SVC_CLOSE(APPERR, 4899, uvAtoi((char *) tpr.txprAnswCode.arr,0,3), txprAnswCdnm,"SVncapl300in1");
  }

  uvDebug("SVncapl300in1_CMNC_taxPrctRgst   End [%d]",ii);

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_CMNC_savingtxfrPrctRgst()
  Note          : 저축성 비과세 등록
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_savingtxfrPrctRgst(struct stp_SVncapl300in1 *stp, int ii) {

  int                         ret;

  CMNC_taxPrctRgst            tpr;   /* 비과세등록 모듈 */

  char  polyNo[9+1];                          /* 증권번호 */
  char  ipAddress [15+1];
  char  serverDvsn[ 1+1];

  uvDebug("SVncapl300in1_CMNC_savingtxfrPrctRgst   Start [%d]",ii);

  memset(&tpr,    0x00,   sizeof(CMNC_taxPrctRgst));
  memset(polyNo,  0x00,   sizeof(polyNo));

  /* 비과세의 경우 지정일이체는 접수불가 */
  if ( strcmp( (char *)stp->ftprRecvMdcd.arr,"81" ) == 0 )
  {
    uvDebug("비과세의 경우 지정일이체는 처리불가합니다.");
    EXEC SQL ROLLBACK;
    SVC_CLOSE(APPERR, 4899, 0, "비과세의 경우 지정일이체는 처리불가합니다.","SVncapl300in1");
  }

  /* 월납(적립형) 저축성 비과세 대상 정보 존재시 txfr_yn여부 'N'으로 변경 */
  if (ii==0 && strncmp((char *) stp->savnTxfrYn.arr, "N", 1) == 0) {

    if (strncmp((char *) stp->freePlanYn.arr, "Y", 1) == 0) {
      strcpy(polyNo,   (char *) stp->scndPolyNo.arr);                       /* 증권번호 */
    } else {
      strcpy(polyNo,   (char *) stp->polyNo.arr);                           /* 증권번호 */
    }

    SVncapl300in1_dencUncaplstf002Sp(polyNo);
    return;
  }
  /* 일시납(거치형) 저축성 비과세 대상 정보 존재시 txfr_yn여부 'N'으로 변경 */
  else if (ii==1 && strncmp((char *) stp->frplSavnTxfrYn.arr, "N", 1) == 0) {

    strcpy(polyNo,  (char *) stp->polyNo.arr);                           /* 증권번호 */

    SVncapl300in1_dencUncaplstf002Sp(polyNo);
    return;
  }

  /* 비과세 은행연합회 등록         */
  COPY(tpr.txprOccrCadv,   "01");                     /* 비과세발생원인구분 */

  /* 월납(적립형) - 자유설계계약 stp->scndPolyNo 이 월납증번 */
  if(ii==0) {
    if (strncmp((char *) stp->freePlanYn.arr, "Y", 1) == 0) {
      COPYVAR(tpr.polyNo,   stp->scndPolyNo);                       /* 증권번호 */
    } else {
      COPYVAR(tpr.polyNo,   stp->polyNo);                           /* 증권번호 */
    }
    tpr.histNo          =   0;                                      /* 이력번호 */
    tpr.taxPrpsAmt      =   stp->taxPrpsAmt;          /* 주체별비과세가능금액 */
    tpr.taxPrjnAmt      =   stp->taxPrjnAmt;          /* 연합회비과세등록금액 */
  }
  /* 일시납(거치형) - 자유설계계약 stp->polyNo 이 일시납증번 */
  else {
    COPYVAR(tpr.polyNo,   stp->polyNo);                           /* 증권번호 */
    tpr.histNo          =   0;                                    /* 이력번호 */
    tpr.taxPrpsAmt      =   stp->frptaxPrpsAmt;     /* 주체별비과세가능금액 */
    tpr.taxPrjnAmt      =   stp->frptaxPrjnAmt;     /* 연합회비과세등록금액 */
  }

  uvDebug(" === stp->taxPrjnAmt [%.f]",stp->taxPrjnAmt);
  uvDebug(" === tpr->taxPrjnAmt [%.f]",tpr.taxPrjnAmt);

  memset(ipAddress  , 0x00 ,sizeof(ipAddress ));
  memset(serverDvsn , 0x00 ,sizeof(serverDvsn));

  /* serverDvsn - R(운영),Q(QA),D(DEV),E(ERROR) */
  if(hostNameToServer (ipAddress, serverDvsn)==FAIL) {
    uvDebug("hostNameToServer 함수 호출 에러");
  }

  if (strncmp(serverDvsn, "K", 1) == 0 || strncmp(serverDvsn, "Q", 1) == 0) {
    uvDebug("방카사업부의 간곡한 요청으로 비과세등록처리 예외");
    return;
  }

  ret =   CMNC_savingTxfrPrctRgst_CC(&tpr);

  uvDebug("비과세결과 [%d], 비과세결과코드[%s]",ret,(char *) tpr.txprAnswCode .arr);

  /* 비과세 등록 대상건이 아님 */
  if (ret == 5338) {
    uvDebug("비과세 등록 대상건이 아님");
  } else if (ret != SUCCESS || strcmp((char *) tpr.txprAnswCode .arr, "000") != 0 ) {

    EXEC SQL ROLLBACK;

    char txprAnswCdnm[MAX_VALUE_LEN];
    memset(txprAnswCdnm, 0x00, sizeof(txprAnswCdnm));
    uvDebug("NC_txprAnsw_Mapp 룰 호출");

    int retCode = uvRuleBase("NC_txprAnsw_Mapp",
        "",
        (char *) tpr.txprAnswCode .arr,
        txprAnswCdnm);
    if (retCode != 0) {
      SVC_CLOSE(APPERR, 4899, 0, "비과세 등록 및 NC_txprAnsw_Mapp 룰 호출오류","SVncapl300in1");
    }

    SVC_CLOSE(APPERR, 4899, uvAtoi((char *) tpr.txprAnswCode.arr,0,3), txprAnswCdnm,"SVncapl300in1");
  }

  uvDebug("SVncapl300in1_CMNC_savingtxfrPrctRgst   End [%d]",ii);

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencUncaplstf002Sp()
  Note          : 저축성 비과세 정보 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencUncaplstf002Sp(char *polyNo) {

  struct _denc_uncaplstf002_sp_in  dencUncaplstf002SpIn;

  uvDebug("SVncapl300in1_dencUncaplstf002Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencUncaplstf002SpInClear(&dencUncaplstf002SpIn);

  COPY(dencUncaplstf002SpIn.txprApcnVlyn, "N"            ); /* 세금우대적용유효여부 */
  COPY(dencUncaplstf002SpIn.txfrYn      , "N"            ); /* 비과세여부           */
  COPY(dencUncaplstf002SpIn.lastChmnMpno, uvGetUserID()  ); /* 최종변경자사번       */
  COPY(dencUncaplstf002SpIn.pgmId       , "SVncapl300in1"); /* 프로그램ID           */
  COPY(dencUncaplstf002SpIn.polyNo      , polyNo         ); /* 증권번호             */

  uvDebug("세금우대적용유효여부=[%s]", (char *) dencUncaplstf002SpIn.txprApcnVlyn.arr);
  uvDebug("비과세여부          =[%s]", (char *) dencUncaplstf002SpIn.txfrYn      .arr);
  uvDebug("최종변경자사번      =[%s]", (char *) dencUncaplstf002SpIn.lastChmnMpno.arr);
  uvDebug("프로그램ID          =[%s]", (char *) dencUncaplstf002SpIn.pgmId       .arr);
  uvDebug("증권번호            =[%s]", (char *) dencUncaplstf002SpIn.polyNo      .arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dencUncaplstf002Sp(&basicParam,&dencUncaplstf002SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_UNCAPLSTF002_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DENC_UNCAPLSTF002_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    uvDebug("저축성 비과세 대상 정보 없음");
  } else {
    uvDebug("저축성 비과세 대상 정보 취소=[%d]건",basicParam.rpSize);
  }

  uvDebug("SVncapl300in1_dencUncaplstf002Sp End");

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_dcncCmncdcss20Sp
  Note          : 설계사본인계약누적 입력
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >> 2003.12.08 장두원 추가
*************************************************************************/
void SVncapl300in1_dcncCmncdcss20Sp(struct stp_SVncapl300in1 *stp) {

  char* fnName1 = "SVncapl300in1_dcncCmncdcss20Sp";

  /* 변수선언 */
  struct _dcnc_cmncdcss20_sp_in  dcncCmncdcss20SpIn;

  /* 설계사 본인명의 신계약 제한 제외보종 확인 */
  char retVal[MAX_VALUE_LEN];

  int retCode = 0;

  memset(retVal, 0x00, sizeof(retVal));

  retCode = uvRuleBase("lpCnttExcl", "",(char *) stp->irkdCodeDtal.arr
                                       ,(char *) stp->irkdCodeItem.arr
                                       ,retVal);

  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(lpCnttExcl) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(lpCnttExcl) 룰호출 오류", fnName1);
  }

  /* 제외보종 */
  if (strcmp(retVal, "Y") == 0) {
    return;
  }

  /* 초기화 */
  setInitDBIO(ARRAY_SIZE, DBCURSOR_CLOSE);
  dcncCmncdcss20SpInClear(&dcncCmncdcss20SpIn);

  /* 변수입력 */
  if (strncmp((char*) stp->freePlanYn.arr, "Y", 1) == 0) {
    COPYVAR(dcncCmncdcss20SpIn.polyNo, stp->mainPolyNo);   /* 자유설계 주증번 */
  } else {
    COPYVAR(dcncCmncdcss20SpIn.polyNo, stp->polyNo);
  }
  STR2VAR(dcncCmncdcss20SpIn.saveCnclDvsn, "C");

  uvDebug("** [%s]", dcncCmncdcss20SpIn.polyNo      .arr);
  uvDebug("** [%s]", dcncCmncdcss20SpIn.saveCnclDvsn.arr);

  /* CDAL호출 */
  dcncCmncdcss20Sp(&basicParam,&dcncCmncdcss20SpIn);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  /* 결과확인 */
  if (getCDALResult() != SQL_OK || basicParam.rpSize <= 0) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(dcncCmncdcss20Sp) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(dcncCmncdcss20Sp) 호출 Error.",  \
        getCDALErrMsg());
  }

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncCmncdcss24Sp
  Note          : FP본인 및 가족계약누적 입력
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >> 2008.04.25 이화진 추가
*************************************************************************/
void SVncapl300in1_dcncCmncdcss24Sp(struct stp_SVncapl300in1 *stp) {

  char* fnName1 = "SVncapl300in1_dcncCmncdcss24Sp";

  /* 변수선언 */
  struct _dcnc_cmncdcss24_sp_in  dcncCmncdcss24SpIn;

  /* 설계사 본인명의 신계약 제한 제외보종 확인 */
  char retVal[MAX_VALUE_LEN];

  int retCode = 0;

  uvDebug("%s Start",fnName1);

  memset(retVal, 0x00, sizeof(retVal));

  retCode = uvRuleBase("lpCnttExcl", "",(char *) stp->irkdCodeDtal.arr
                                       ,(char *) stp->irkdCodeItem.arr
                                       ,retVal);
  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(lpCnttExcl) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(lpCnttExcl) 룰호출 오류", fnName1);
  }

  /* 제외보종 */
  if (strcmp(retVal, "Y") == 0) {
    return;
  }

  /* 초기화 */
  setInitDBIO(ARRAY_SIZE, DBCURSOR_CLOSE);
  dcncCmncdcss24SpInClear(&dcncCmncdcss24SpIn);

  /* 변수입력 */
  if (strncmp((char*) stp->freePlanYn.arr, "Y", 1) == 0) {
    COPYVAR(dcncCmncdcss24SpIn.polyNo, stp->mainPolyNo);   /* 자유설계 주증번 */
  } else {
    COPYVAR(dcncCmncdcss24SpIn.polyNo, stp->polyNo);
  }
  STR2VAR(dcncCmncdcss24SpIn.saveCnclDvsn, "C");

  uvDebug("** [%s]", dcncCmncdcss24SpIn.polyNo      .arr);
  uvDebug("** [%s]", dcncCmncdcss24SpIn.saveCnclDvsn.arr);

  /* CDAL호출 */
  dcncCmncdcss24Sp(&basicParam,&dcncCmncdcss24SpIn);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  /* 결과확인 */
  if (getCDALResult() != SQL_OK || basicParam.rpSize <= 0) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(dcncCmncdcss24Sp) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(dcncCmncdcss24Sp) 호출 Error.",  \
        getCDALErrMsg());
  }

  uvDebug("%s End",fnName1);

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncCmncdcss25Sp
  Note          : FP본인 및 가족계약누적 입력
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >> 2008.04.25 이화진 추가
*************************************************************************/
void SVncapl300in1_dcncCmncdcss25Sp(struct stp_SVncapl300in1 *stp) {
  char* fnName1 = "SVncapl300in1_dcncCmncdcss25Sp";

  uvDebug("%s Start",fnName1);
  /* 설계사 본인명의 신계약 제한 제외보종 확인 */
  char retVal[MAX_VALUE_LEN];
  memset(retVal, 0x00, sizeof(retVal));

  int retCode = uvRuleBase("lpCnttExcl", "",
      (char *) stp->irkdCodeDtal.arr,
      (char *) stp->irkdCodeItem.arr,
      retVal);
  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(lpCnttExcl) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(lpCnttExcl) 룰호출 오류", fnName1);
  }

  /* 제외보종 */
  if (strcmp(retVal, "Y") == 0) {
    return;
  }

  /* 변수선언 */
  struct _dcnc_cmncdcss25_sp_in  dcncCmncdcss25SpIn;

  /* 초기화 */
  setInitDBIO(ARRAY_SIZE, DBCURSOR_CLOSE);
  dcncCmncdcss25SpInClear(&dcncCmncdcss25SpIn);

  /* 변수입력 */
  if (strncmp((char*) stp->freePlanYn.arr, "Y", 1) == 0) {
    COPYVAR(dcncCmncdcss25SpIn.polyNo, stp->mainPolyNo);   /* 자유설계 주증번 */
  } else {
    COPYVAR(dcncCmncdcss25SpIn.polyNo, stp->polyNo);
  }
  STR2VAR(dcncCmncdcss25SpIn.saveCnclDvsn, "C");

  uvDebug("** [%s]", dcncCmncdcss25SpIn.polyNo      .arr);
  uvDebug("** [%s]", dcncCmncdcss25SpIn.saveCnclDvsn.arr);

  /* CDAL호출 */
  dcncCmncdcss25Sp(&basicParam,&dcncCmncdcss25SpIn);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  /* 결과확인 */
  if (getCDALResult() != SQL_OK || basicParam.rpSize <= 0) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(dcncCmncdcss25Sp) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(dcncCmncdcss25Sp) 호출 Error.",  \
        getCDALErrMsg());
  }

  uvDebug("%s End",fnName1);

  return;
}

/******************************************************************************
  Function Name : SVncapl300in1_CMPA_procTransCtt()
  Note          : 1. 전환계약을 처리하는 모듈 호출
                  2. 신계약접수시 호출한다.
                  3. 구증번에 대한 해약처리를 하며
                     넘겨받은 구증번에 대한 미상각월수와 전환금액을 비교한다.
                  4. 신증번 및 구증번에 대한 정보를 전환처리TB, 전환처리상세TB에 생성시킨다.
                  5. 즉시이체시 trnfYn 에 'Y' 를 넘겨준다.
  Parameters    :

    typedef struct
    {
        VARCHAR dlngDvsn         [  1 + 1];    IN:  처리구분(0:조회,1:처리)
        VARCHAR newPynoLupy      [  9 + 1];    IN:  신증번(일시납)
        VARCHAR newPynoNot       [  9 + 1];    IN:  신증번(비일시납)
        VARCHAR oldPolyNo   [200][  9 + 1];    IN:  구증번
        int     oldPolyCnt                ;    IN:  구증번건수
        VARCHAR pgmId            [ 50 + 1];    IN:  프로그램id
        VARCHAR dlngDate         [  8 + 1];    IN:  처리일자
        VARCHAR dlngMpno         [  8 + 1];    IN:  처리자사번
        VARCHAR dlngOrgnCode     [  5 + 1];    IN:  처리기관
        double  nrdMcnt     [200]         ;    IN:  미상각월수
        double  cnvsAmt     [200]         ;    IN:  전환금액
        VARCHAR trnfYn           [  1 + 1];    IN:  즉시이체 여부
        VARCHAR procAbleYn       [  1 + 1];    OUT: 처리가능 여부
        VARCHAR errMsg           [256 + 1];    OUT: 에러메세지
    }   STR_procCnttTrans;   계약전환 처리 입력 구조체


    Return Value  :  0  -   정상
                    -1  -   비정상
 ------------------------------------------------------------------------
  Remarks >> 2003.12.24 조진학 추가
 ******************************************************************************/
void SVncapl300in1_CMPA_procTransCtt(struct stp_SVncapl300in1 *stp) {

  int             ii;

  uvDebug("SVncapl300in1_CMPA_procTransCtt    Start");

  UvT *tyCnttTrnas  = 0;
  UvT **tyTrnsItem = 0;


  tyCnttTrnas     = uvTNewO("CNTT_TRNS",1,0     );
  tyTrnsItem  = uvTRealloc(1, 1, &tyCnttTrnas, 0, "trnsItem");
  uvTSetS("1",                       &tyCnttTrnas, 0, "dlngDvsn");
  uvTSetS((char *)stp->polyNo.arr,    &tyCnttTrnas, 0, "newPynoLupy");
  uvTSetS((char *)stp->scndPolyNo.arr,&tyCnttTrnas, 0, "newPynoNot");
  uvTSetI(        stp->oldPolyCnt,    &tyCnttTrnas, 0, "oldPolyCnt");
  uvTSetS("SVncapl300in1",            &tyCnttTrnas, 0, "pgmId");
  uvTSetS((char *)stp->cnttDate.arr,  &tyCnttTrnas, 0, "dlngDate");
  uvTSetS(uvGetUserID(),              &tyCnttTrnas, 0, "dlngMpno");
  uvTSetS((char *)stp->clltOrgnCode.arr,&tyCnttTrnas, 0, "dlngOrgnCode");

  /* 즉시이체의 경우는 trnfYn 에 Y, 방문수금은 N 을 넘겨준다 */
  if (strncmp((char*) stp->orgftprRecvMdcd.arr,"83",2) == 0) {
    uvTSetS("Y",&tyCnttTrnas, 0, "trnfYn");
  } else {
    uvTSetS("N",&tyCnttTrnas, 0, "trnfYn");
  }

  for (ii = 0; ii < stp->oldPolyCnt; ii++) {
    /*COPYVAR(proct.oldPolyNo[ii],     stp->oldPolyNo[ii]);
    proct.nrdMcnt[ii]      = stp->nrdMcnt[ii];
    proct.cnvsAmt[ii]      = stp->cnvsAmt[ii];*/
    uvTSetS((char *)stp->oldPolyNo[ii].arr,      tyTrnsItem, ii, "oldPolyNo");
    uvTSetD((double)stp->nrdMcnt[ii],            tyTrnsItem, ii, "nrdMcnt");
    uvTSetD((double)stp->cnvsAmt[ii],tyTrnsItem, ii, "cnvsAmt");
  }

  /* 보전성능개선 모듈교체 2005.6.2 */
  /*
  if  (CMPA_procTransCtt_CC(&proct) !=  0) {
  */
  if (CMPA_procCnttTrans_CC(tyCnttTrnas) !=  0) {
    EXEC SQL ROLLBACK;
    uvDebug("계약전환확인(CMPA_procCnttTrans_CC) 호출 오류");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, "", "SVncapl300in1");
  }
  uvDebug("SVncapl300in1_CMPA_procTransCtt    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_chkConst1()
  Note          : 발행/접수제한1
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >> 2004.02.02 시행예정인 직종코드 및 위험등급 변경 대비
             청약서발행 및 접수 제한
*************************************************************************/
void SVncapl300in1_chkConst1(struct stp_SVncapl300in1 *stp) {

  char* fnName1 = "SVncapl300in1_chkConst1";

  char sysDvsn  [MAX_VALUE_LEN]; /* 제도구분 */
  char stddDate [MAX_VALUE_LEN]; /* 기준일자 */
  char sysExpl  [MAX_VALUE_LEN]; /* 제도설명 */

  uvDebug("SVncapl300in1_chkConst1 Start");

  memset(sysDvsn , 0x00, sizeof(sysDvsn ));
  memset(stddDate, 0x00, sizeof(stddDate));
  memset(sysExpl , 0x00, sizeof(sysExpl ));

  strcpy(sysDvsn,"VRBL_INFO"); /* 변액부속서류발행기준일자 */

  /* 업무별 제도 시행 기준일자 조회 */
  int retCode = uvRuleBase("NC_sysOperStddDate", "", sysDvsn, stddDate, sysExpl);

  /* 호출결과 확인 */
  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(NC_sysOperStddDate) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(NC_sysOperStddDate) 룰호출 오류", fnName1);
  }

  uvDebug("NC_sysOperStddDate stddDate[%s],sysExpl[%s]", stddDate, sysExpl);

  /* 2004.02.02 시행예정인 직종코드 및 위험등급 변경 대비 */
  /* 청약서발행 및 접수제한 (2004.01.09 장두원)
  if ((strlen((char*) stp->cnttDate.arr) > 0) &&
      (strncmp((char*) stp->srdoPublDate.arr, "200401", 6) == 0) &&
      (strncmp((char*) stp->cnttDate.arr, "200401", 6) > 0)) {
    EXEC SQL ROLLBACK;
    uvDebug("2004년 1월 발행 청약서의 계약일자는 당월만 가능");
    SVC_CLOSE(APPERR, 4899, 0, "2004년 1월 발행 청약서의 계약일자는 당월만 가능", fnName1);
  }
  */

  /* 2017.04.01 시행예정인 56,58 비과세 유형 일몰 처리로 */
  /* 청약서 접수제한 (2017.04.01 U/W 김성진)
  if ((strncmp((char*) stp->srdoPublDate.arr, "201703", 6) == 0) &&
      (strncmp((char*) stp->cnttDate.arr, "201704", 6) >= 0)) {
    EXEC SQL ROLLBACK;
    uvDebug("'17.3월 발행 청약서 접수 불가");
    SVC_CLOSE(APPERR, 4899, 0, "'17.3월 발행 청약서 접수 불가", fnName1);
  }
  */

  /* 2017.07.01 상품설명서 개정에 따라 이전 발행 서류 폐기 */
  /* 청약서 접수제한 (2017.07.01 U/W 김성진)      */
  if(strcmp((char *) stp->crntDate.arr, stddDate ) < 0){
    uvDebug("[%s]제도 시행 이전.현재[%s]vs시행[%s]", sysExpl, (char *) stp->crntDate.arr, stddDate);
  } else {
    if ((strncmp((char*) stp->cnttConcYm  .arr, "201707", 6) <  0) &&
        (strncmp((char*) stp->cnttDate    .arr, "201707", 6) >= 0)) {
      EXEC SQL ROLLBACK;
      uvDebug("'17.6월 발행 청약서 접수 불가");
      SVC_CLOSE(APPERR, 4899, 0, "'17.6월 발행 청약서 접수 불가", fnName1);
    }
  }

  /* 이체희망일 Seting    */
  strncpy((char *) stp->trnfHopeDd[0].arr, (char *) stp->ftprRmtnDate.arr + 6, 2);
  stp->trnfHopeDd[0].len = strlen((char *) stp->trnfHopeDd[0].arr);

  uvDebug("초회 이체희망일 = [%s]",  (char *) stp->trnfHopeDd[0].arr);

  /* 2017.12.01 지정일이체 초회납입방법 폐지(U/W 나현주) */
  if(strcmp((char *) stp->cnttDate.arr, "20171201") >= 0 &&
     strcmp((char *) stp->ftprRecvMdcd.arr, "81") == 0) {
    uvDebug("2017.12.01 이후 초회보험료납입방법 지정일이체 불가");
    appReturnCode = 5568;
    SVC_CLOSE(APPERR, appReturnCode, 0,"2017.12.01 이후 초회보험료납입방법 지정일이체 불가", "SVncapl300in1");
  }

  /* 고객지원팀 요청에 따라 초회보험료 지정일이체 말일자 선택 제한(2017.12.01 고객지원팀 허정민) */
  if (strcmp((char *) stp->ftprRecvMdcd .arr, "81") == 0 &&
      strcmp((char *) stp->trnfHopeDd[0].arr, "30") == 0) {
    uvDebug("초회보험료 말일자 지정 오류");
    appReturnCode = 5568;
    SVC_CLOSE(APPERR, appReturnCode, 0,"말일자 지정일이체 불가", "SVncapl300in1");
  }

  uvDebug("자동납입 이체희망일 = [%s]",  (char *) stp->trnfHopeDd[1].arr);

  /* 고객지원팀 요청에 따라 계속보험료 지정일이체 말일자 선택 제한(2017.12.01 고객지원팀 허정민) */
  /* 방카슈랑스는 제외요청(2017.11.23 송경환 차장) */
  /* 방카슈랑스 말일자 제한 시행(2018.09.01 송경환 차장) */
  if (strcmp((char *) stp->collMetdCode .arr, "01") == 0 &&
      strcmp((char *) stp->trnfHopeDd[1].arr, "30") == 0) {
    uvDebug("계속보험료 이체일자 말일자 지정 불가");
    appReturnCode = 9154;
    SVC_CLOSE(APPERR, appReturnCode, 0,"계속보험료 이체일자 말일자 지정 불가", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_chkConst1 End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_chkConst2()
  Note          : 발행/접수제한2
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >> 청약서발행 및 접수 제한
*************************************************************************/
void SVncapl300in1_chkConst2(struct stp_SVncapl300in1 *stp) {


  char* fnName1 = "SVncapl300in1_chkConst2";

  char sysDvsn  [MAX_VALUE_LEN]; /* 제도구분 */
  char stddDate [MAX_VALUE_LEN]; /* 기준일자 */
  char sysExpl  [MAX_VALUE_LEN]; /* 제도설명 */
  char limtYn   [MAX_VALUE_LEN]; /* 제한여부 */
  char limtResn [MAX_VALUE_LEN]; /* 제한사유 */
  char resultMsg[255+1];

  uvDebug("SVncapl300in1_chkConst2 Start");

  memset(sysDvsn , 0x00, sizeof(sysDvsn ));
  memset(stddDate, 0x00, sizeof(stddDate));
  memset(sysExpl , 0x00, sizeof(sysExpl ));
  memset(limtYn  , 0x00, sizeof(limtYn  ));
  memset(limtResn , 0x00, sizeof(limtResn));
  memset(resultMsg , 0x00, sizeof(resultMsg ));

  strcpy(sysDvsn,"RECP_LMIT"); /* 전년도 발행건 청약서 접수 불가 */

  /* 업무별 제도 시행 기준일자 조회 */
  int retCode = uvRuleBase("NC_sysOperIrkdSddt", ""
                         ,(char *) stp->irkdCodeDtal.arr
                         ,(char *) stp->irkdCodeItem.arr
                         , sysDvsn, stddDate, sysExpl);

  /* 호출결과 확인 */
  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(NC_sysOperIrkdSddt) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(NC_sysOperIrkdSddt) 룰호출 오류", fnName1);
  }

  uvDebug("NC_sysOperIrkdSddt stddDate[%s],sysExpl[%s]", stddDate, sysExpl);

  /* 기준일 이전 발행 청약서인 경우 기준일 이후 계약일자로 접수 불가 제한 */
  if(strcmp((char *) stp->srdoPublDate.arr, stddDate ) < 0 &&
     strcmp((char *) stp->cnttDate.arr    , stddDate) >= 0) {
    uvDebug("[%s] 발행일자[%s]vs계약일자[%s]", sysExpl, (char *) stp->srdoPublDate.arr, (char *) stp->cnttDate.arr);

    sprintf(resultMsg,"%s 이전 발행 청약서 접수 불가", stddDate);

    EXEC SQL ROLLBACK;
    SVC_CLOSE(APPERR, 4899, 0, resultMsg, fnName1);
  } 
  
  /* 업무별 제도 시행 기준일자 조회 */
  retCode = uvRuleBase("NC_polyLmitChck", ""
                         ,(char *) stp->polyNo.arr
                         , limtYn, limtResn);

  /* 호출결과 확인 */
  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(NC_polyLmitChck) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(NC_polyLmitChck) 룰호출 오류", fnName1);
  }
  
  if(strcmp(limtYn, "Y" ) == 0){
    EXEC SQL ROLLBACK;
    uvDebug("제한 사유 : [%s]", limtResn);
    SVC_CLOSE(APPERR, 4899, 0, limtResn, fnName1);
  }

  uvDebug("SVncapl300in1_chkConst2 End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_trsfCond()
  Note          : 전환계약확인
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_trsfCond(struct stp_SVncapl300in1 *stp) {

  int             ii;

  CMNC_trsfCond   tcd;

  memset(&tcd,    0x00,   sizeof(CMNC_trsfCond));

  /* 전환 CI 는 당일발행 당일접수 당일송금일자                         */
#ifdef SHIN
  if (strcmp((char *) stp->cnttDate.arr,(char *) stp->srdoPublDate.arr) != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("전환보종은 계약일자와 발행일자 동일해야합니다.");
    appReturnCode = 6390;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "전환보종은 계약일자와 발행일자 동일해야합니다.", "SVncapl300in1");
  }
#endif

  /* 변수입력 */
  STR2VAR(tcd.procGubun, "NC");        /* I 업무구분 */
  STR2VAR(tcd.workGubun, "2");         /* I 작업구분 */
  STR2VAR(tcd.pgmGubun, "P");          /* I 개별일괄구분 */

  COPYVAR(tcd.polyNo, stp->polyNo);                 /* I 증권번호 */

  COPYVAR(tcd.cnttDate, stp->cnttDate);             /* I 계약일자 */
  COPYVAR(tcd.saleChnlCode, stp->saleChnlCode);     /* I 판매채널코드 */
  COPYVAR(tcd.paymCyclCode, stp->paymCyclCode);     /* I 납입주기코드 */
  COPYVAR(tcd.irkdCodeDtal, stp->irkdCodeDtal);     /* I 보종코드_세 */
  COPYVAR(tcd.irkdCodeItem, stp->irkdCodeItem);     /* I 보종코드_목 */
  COPYVAR(tcd.clltLpPrno, stp->clltLpPrno);         /* I 모집FP고유번호 */

  for (ii = 0; ii < stp->fjgCnt; ii++) {
    if (strcmp((char*) stp->fjggoodRelnCode[ii].arr, "1") == 0) {
      tcd.frpmainPrem  = stp->fjgorigPrem[ii];       /* I 자유설계주보험료 */
    }
  }

  for (ii = 0; ii < stp->cjgCnt; ii++) {
    COPYVAR(tcd.goodRelnCode[ii], stp->cjggoodRelnCode[ii]); /* I 상품관계코드 */
    COPYVAR(tcd.goodCodeDtal[ii], stp->cjggoodCodeDtal[ii]); /* I 상품코드_세 */
    COPYVAR(tcd.goodCodeItem[ii], stp->cjggoodCodeItem[ii]); /* I 상품코드_목 */
    tcd.origPrem[ii] = stp->cjgorigPrem[ii];                      /* I 보험료 */
  }

  for (ii = 0; ii < stp->crmCnt; ii++) {
    COPYVAR(tcd.custId[ii], stp->custId[ii]);                     /* I 고객ID */
    COPYVAR(tcd.custRoleCode[ii], stp->custRoleCode[ii]);   /* I 고객역할코드 */
  }

  /* 모듈호출 */
  if (CMNC_trsfCond_CC(&tcd) != TRUE) {
    EXEC SQL ROLLBACK;
    uvDebug("계약전환확인(CMNC_trsfCond_CC) 호출 오류");
    appReturnCode = 5907;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "계약전환확인(CMNC_trsfCond_CC) 호출 오류", "SVncapl300in1");
  }

  /* 결과출력 */
  stp->oldPolyCnt  = tcd.oldPolyCnt;
  stp->sum_stplAmt = 0;
  for (ii = 0; ii < stp->oldPolyCnt; ii++) {
    COPYVAR(stp->oldPolyNo[ii], tcd.oldPolyNo[ii]);
    stp->nrdMcnt[ii]     = tcd.nrdMcnt[ii];
    stp->cnvsAmt[ii]     = tcd.cnvsAmt[ii];
    stp->stplLoanAmt[ii]     = tcd.stplLoanAmt[ii];
    stp->sum_stplAmt        += tcd.stplLoanAmt[ii];

    uvDebug("stp->oldPolyNo  [%d][%s]", ii, stp->oldPolyNo[ii].arr);
    uvDebug("stp->nrdMcnt    [%d][%f]", ii, stp->nrdMcnt[ii]);
    uvDebug("stp->cnvsAmt    [%d][%f]", ii, stp->cnvsAmt[ii]);
    uvDebug("stp->stplLoanAmt[%d][%f]", ii, stp->stplLoanAmt[ii]);
  }

  /* 모듈호출결과 */
  if (tcd.resultCode !=  0) {
    EXEC SQL ROLLBACK;
    uvDebug(tcd.resultMsg);
    appReturnCode = tcd.resultCode;
    SVC_CLOSE(APPERR, appReturnCode, 0,
        tcd.resultMsg, "CMNC_trsfCond_CC");
  }

  return;
}

#ifdef CP_SWEEP
/************************************************************************
  Function Name : SVncapl300in1_setRelnJudgDvsn()
  Note          : 관계심사업무구분 산출
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >> 2004.05.17 추가
             종합U/W대상 검색
             1.고지유
             2.선진단대상   (2004.06.04 삭제)
             3.의무판정존재 (2004.06.04 삭제)
             4.기지급급부체 (2004.06.04 삭제)
             5.특정보종지원단 일반분배 (2004.12.17 추가) -> (2005.08.04 삭제, 언더라이팅-00393)
*************************************************************************/
//void SVncapl300in1_setRelnJudgDvsn(struct stp_SVncapl300in1 *stp) {
//  char* fnName1 = "SVncapl300in1_setRelnJudgDvsn";
//
//  uvDebug("※ [%s] begin...", fnName1);
//
//  /* 변수선언 */
//  struct _denc_apl300in47_sp_in   dencApl300in47SpIn;
//  struct _denc_apl300in47_sp_out  dencApl300in47SpOut;
//
//  /* 초기화 */
//  setInitDBIO(ARRAY_SIZE, DBCURSOR_CLOSE);
//  dencApl300in47SpInClear(&dencApl300in47SpIn);
//  dencApl300in47SpOutClear(&dencApl300in47SpOut);
//
//  /* 변수입력 */
//  COPYVAR(dencApl300in47SpIn.irkdCodeDtal, stp->irkdCodeDtal);
//  COPYVAR(dencApl300in47SpIn.stddDate, stp->crntDate);
//  COPYVAR(dencApl300in47SpIn.orgnCode, stp->clltOrgnCode);
//
//  uvDebug("irkdCodeDtal [%s]", dencApl300in47SpIn.irkdCodeDtal.arr);
//  uvDebug("stddDate     [%s]", dencApl300in47SpIn.stddDate    .arr);
//  uvDebug("orgnCode     [%s]", dencApl300in47SpIn.orgnCode    .arr);
//
//  /* CDAL호출 */
//  dencApl300in47Sp(&basicParam,&dencApl300in47SpIn, &dencApl300in47SpOut);
//
//  uvDebug("** rpSize [%d]", basicParam.rpSize);
//
//  /* 결과확인 */
//  if (getCDALResult() != SQL_OK) {
//    setDBIOErrMsg(fnName1);
//    EXEC SQL ROLLBACK;
//    uvDebug("DBIO(dencApl300in47Sp) 호출 Error[%d], %s",\
//        cptReturnCode,getCDALErrMsg());
//    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
//        "DBIO(dencApl300in47Sp) 호출 Error.",  \
//        getCDALErrMsg());
//  }
//
//  uvDebug("judgMpno [%s]", dencApl300in47SpOut.judgMpno.arr);
//  uvDebug("hdqtCode [%s]", dencApl300in47SpOut.hdqtCode.arr);
//
//  /* 고지사항 검색 */
//  int  i;
//  for (i = 0; i < stp->cniCnt; i++) {
//    uvDebug("* 고지유무     [%s]", (char *) stp->notcYn[i].arr);
//    if (strncmp((char *) stp->notcYn[i].arr, "Y", 1) == 0) {  /* 고지유무 */
//      STR2VAR(stp->relnJudgDvsn, "C1");
//      break;
//    }
//  }
//
//  uvDebug("※ [%s] ended...", fnName1);
//
//  return;
//}
#endif

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in39Sp()
  Note          : 접수시 할인,입출금,관계,펀드관리 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in39Sp(struct stp_SVncapl300in1 *stp) {

  struct _dcnc_apl300in39_sp_in  dcncApl300in39SpIn;

  uvDebug("SVncapl300in1_dcncApl300in39Sp Start");
  uvDebug("발행시 계약일자  : [%s]",(char *) stp->publCnttDate.arr);
  uvDebug("발행시 계약일자2 : [%s]",(char *) stp->publCnttDate2.arr);
  uvDebug("현재   계약일자  : [%s]",(char *) stp->cnttDate.arr);
  uvDebug("       시작일자  : [%s]",(char *) stp->strtDate.arr);

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in39SpInClear(&dcncApl300in39SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in39SpIn.polyNo,   stp->polyNo);              /* 증권번호 */
  COPY(dcncApl300in39SpIn.lastChmnMpno,   uvGetUserID());   /* 최종변경자사번 */
  COPY(dcncApl300in39SpIn.pgmIdI,   "SVncapl300in1");           /* 프로그램ID */
  COPYVAR(dcncApl300in39SpIn.strtDate,   stp->strtDate);          /* 시작일자 */

  /*-------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                                 */
  dcncApl300in39Sp(&basicParam,&dcncApl300in39SpIn);

  /* DBIO module 호출 결과 확인                                       */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.              */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                          */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN39_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.            */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN39_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl300in39Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_freePlanRetu()
  Note          : 자유설계 처리 준비 => 원복처리
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_freePlanRetu(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_freePlanRetu(원복처리)    Start");

  COPYVAR(stp->scndPolyNo,   stp->polyNo);                /* 종증권번호 */
  COPYVAR(stp->polyNo,   stp->mainPolyNo);                /* 증권번호 */

  COPYVAR(stp->irkdCodeDtal,   stp->orgirkdCodeDtal);      /* 보험종류코드_세 */
  COPYVAR(stp->irkdCodeItem,   stp->orgirkdCodeItem);      /* 보험종류코드_목 */
  stp->paymTerm       =   stp->orgpaymTerm;                 /* 납입기간 */
  stp->realPaymTerm   =   stp->orgrealPaymTerm;             /* 실납입기간 */
  COPYVAR(stp->paymTermDvsn,   stp->orgpaymTermDvsn);       /* 납입기간구분 */
  COPYVAR(stp->paymCyclCode,   stp->orgpaymCyclCode);       /* 납입주기코드 */
  stp->mainInsrAmt    =   stp->orgmainInsrAmt;              /* 주보험금 */
  stp->sumPrem        =   stp->orgsumPrem;                  /* 합계보험료 */
  stp->sumOrigPrem    =   stp->orgsumOrigPrem;              /* 합계원보험료 */
  stp->stddCamt       =   stp->orgstddCamt;                 /* 기준계약고 */
  stp->fstiRrcvPrem   =   stp->orgfstiRrcvPrem;           /* 초회실입금보험료 */
  stp->addPaymPrem    =   stp->orgaddPaymPrem;              /* 추가납입보험료 */
  COPY(stp->premDsctYn,   "N");                             /* 보험료할인여부 */
  COPY(stp->grttSpcdYn,   "N"); /* 단체취금특약여부 2004년 1월 28일 조진학 추가 */
  COPYVAR(stp->ftprRecvMdcd,   stp->orgftprRecvMdcd); /* 초회보험료입금방법 -> 월납은 83(즉시이체) */

  uvDebug("SVncapl300in1_freePlanRetu(원복처리)    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_custInfoChck
  Note          : 청약서발행후 고객정보변경 확인
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >> 2005.03.04 장두원 추가
  * 청약서발행후 고객정보(성명,주민번호)를 변경한 경우 접수제한
*************************************************************************/
void SVncapl300in1_custInfoChck(struct stp_SVncapl300in1 *stp) {
  char* fnName1 = "SVncapl300in1_custInfoChck";

  uvDebug("※ [%s] begin", fnName1);

  int  retValue = 0;
  char custId[MAX_VALUE_LEN];         /* 고객ID */
  char custNamePubl[MAX_VALUE_LEN];   /* 고객성명_발행 */
  char rsdnRgstPubl[MAX_VALUE_LEN];   /* 주민번호_발행 */
  char custNameCrnt[MAX_VALUE_LEN];   /* 고객성명_현재 */
  char rsdnRgstCrnt[MAX_VALUE_LEN];   /* 주민번호_현재 */

  memset(custId, 0x00, sizeof(custId));
  memset(custNamePubl, 0x00, sizeof(custNamePubl));
  memset(rsdnRgstPubl, 0x00, sizeof(rsdnRgstPubl));
  memset(custNameCrnt, 0x00, sizeof(custNameCrnt));
  memset(rsdnRgstCrnt, 0x00, sizeof(rsdnRgstCrnt));

  /* 청약서발행후 고객정보변경 확인 */
  int retCode = uvRuleBase("custInfoChck", "",
      (char *) stp->polyNo.arr,
      custId,
      custNamePubl,
      rsdnRgstPubl,
      custNameCrnt,
      rsdnRgstCrnt,
      &retValue);

  /* 호출결과 확인 */
  if (retCode != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(custInfoChck) 룰호출 오류[%d]", retCode);
    SVC_CLOSE(APPERR, 4899, 0, "(custInfoChck) 룰호출 오류", fnName1);
  }

  uvDebug("* [%d][%s][%s][%s][%s]", retValue,custNamePubl,rsdnRgstPubl,custNameCrnt,rsdnRgstCrnt);

  /* 반환값 확인 */
  if (retValue != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("(custInfoChck) 룰호출 오류 : 반환값[%d]", retValue);
    SVC_CLOSE(APPERR, 4899, 0, "(custInfoChck) 룰호출 오류", fnName1);
  }

  /* 변경사항이 존재하는 경우 */
  if (strlen(custNamePubl) > 0) {
    EXEC SQL ROLLBACK;

    char userMsg[50];
    memset(userMsg, 0x00, sizeof(userMsg));
    snprintf(userMsg, sizeof(userMsg),
        "%s:%s ▶ %s:%s",
        custNamePubl,
        rsdnRgstPubl,
        custNameCrnt,
        rsdnRgstCrnt);

    uvDebug("오류메시지 : [%s]", userMsg);

    SVC_CLOSE(APPERR, 6432, 0, userMsg, fnName1);
  }

  uvDebug("※ [%s] ended", fnName1);

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_cardRcnt()
  Note          : 초회보험료 수금방법 카드납시 카드승인
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_cardRcnt2(struct stp_SVncapl300in1 *stp) {

  struct _dcnc_apl300in38_sp_in  dcncApl300in38SpIn;

  uvDebug("SVncapl300in1_cardRcnt2    Start");

  char chno[6 +1];
  struct _basic_bdal_param ddalParam;

  /* 전문추적번호 채번 */
  struct _ddcs_sfmcredvw1_cc_out ddcsSfmcredvw1CcOut;

  /* 초기화 */
  ddcsSfmcredvw1CcOutClear(&ddcsSfmcredvw1CcOut);
  setBdalInitSelect(ddalParam, 1, DBCURSOR_CLOSE);

  /* DBIO 실행 */
  ddcsSfmcredvw1Cc(&ddalParam, &ddcsSfmcredvw1CcOut);

  /* DBIO 실행결과 확인 */
  if (checkSqlCode() != SQL_OK) {

    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DDCS_SFMCREDVW1_CC) 호출 Error[%d], %s",
        cptReturnCode, getCDALErrMsg());
    appReturnCode = 4845;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, "DBIO(DDCS_SFMCREDVW1_CC) 호출 Error", "SVncapl300in1");
  }

  uvDebug("전문추적번호 [%s]", (char *) ddcsSfmcredvw1CcOut.ptel_chno.arr);

  CMUV_removeGarbage_CC((char *) ddcsSfmcredvw1CcOut.ptel_chno.arr, chno, 2);

  uvDebug("전문추적번호 [%s]", chno);

  /* 초기화           */

  char        sndBuf[SND_0190+1];                     /* SEND BUFFER */
  char        rcvBuf[RCV_0238+1];                     /* RECEIVE BUFFER */

  char        msData[39+1];                           /* 카드자료 */
  char        mmdd[4 +1];                             /* mmdd   시간 */
  char        hhmmss[6 +1];                           /* yymmdd 시간 */
  char        MMssms[16 +1];                          /* MMssms 시간 */

  char        errMsg[40+1];                           /* 되돌림변수 */
  char        rcntAnswCode[4+1];                      /* 응답코드 */
  char        rcntNo[15+1];                           /* 승인번호 */
  char        rrcntNo[8+1];                           /* 승인번호 */

  char        frstPaymMnth[6+1];                      /* 최초납월(소급) */
  char        finaOrgnCode[2+1];                      /* 매입사코드 */
  char        cmbstNo[15+1];                          /* 가맹점번호 */
  char         mbstNo[15+1];                          /* 가맹점번호 */

  creditAdmn cAd;                                   /* 신용카드 정보부 Struct */

  memset(&cAd,   0x00,   sizeof(creditAdmn));
  memset(msData,   0x00,   sizeof(msData));
  memset(mmdd,   0x00,   sizeof(mmdd));
  memset(hhmmss,   0x00,   sizeof(hhmmss));
  memset(MMssms,   0x00,   sizeof(MMssms));

  memset(errMsg,   0x00,   sizeof(errMsg));
  memset(rcntAnswCode,   0x00,   sizeof(rcntAnswCode));
  memset(rcntNo,   0x00,   sizeof(rcntNo));
  memset(rrcntNo,   0x00,   sizeof(rrcntNo));

  memset(frstPaymMnth,   0x00,   sizeof(frstPaymMnth));
  memset(cmbstNo,   0x00,   sizeof(cmbstNo));
  memset(finaOrgnCode,   0x00,   sizeof(finaOrgnCode));
  memset(mbstNo,   0x00,   sizeof(mbstNo));

  uvGetTime(7, mmdd);
  uvGetTime(8, hhmmss);
  uvGetTime(9, MMssms);

  uvDebug("mmdd [%s], hhmmss [%s]",mmdd,hhmmss);

  /*--------------------------------------*/
  /* 신용카드 등록 정보부 Setting         */
  /*--------------------------------------*/
  strncpy(cAd.textStart,   "ISO",  3);                     /* 텍스트 개시문자 */
  strncpy(cAd.telgHeader,   "023400052",  9);             /* ISO TYPD 의 헤더 */
  strncpy(cAd.telgType,   "0200",  4);                            /* 전문타입 */
  strncpy(cAd.praimaryBitmap,   "3238040120209200",  16);   /* PRIMARY BITMAP */
  strncpy(cAd.dvsnCode,   "000030",  6);                      /* 거래구분코드 */
  sprintf(cAd.dvsnAmt,   "%012.0f", stp->fstiRrcvPrem);           /* 거래금액 */
  /* 테스트시는 1004원
  sprintf(cAd.dvsnAmt         ,   "%012.0f"     , 999999999.0 );     /* 거래금액          */

  strncpy(cAd.telgDate,   mmdd,  4);                          /* 전문전송일시 */
  strncat(cAd.telgDate,   hhmmss,  6);                        /* 전문전송일시 */

  strncpy(cAd.telgChno,   chno,  6);                          /* 전문추적번호 */

  strncpy(cAd.dlgsTime,   hhmmss,  6);                        /* 거래개시시간 */
  strncpy(cAd.dlgsDate,   mmdd,  4);                            /* 거래개시일 */

  strncpy(cAd.dlgsType,   "010",  3);                         /* 거래입력유형 */
  strncpy(cAd.orgnCode,   "06901600",  8);                    /* 취급기관코드 */

  strncat(msData,  "37", 2);                            /* 카드자료(카드번호) */
  strcat(msData,  (char *) stp->acctCardNo[0].arr);     /* 카드자료(카드번호) */
  strncat(msData,   "=",               1);                     /* 카드자료(=) */
  strncat(msData,   (char *) stp->cardVlidEdym[0].arr + 2,   4); /* 카드자료(유효년월) */
  strncat(msData,   "                ",  16);               /* 카드자료(공백) */

  uvDebug("msdata [%s][%d]",msData,strlen(msData));

  /* 카드중에서 16자리가 아닌 카드(삼성아맥스카드)가 있어서 전문길이 맞춰줌 */
  while (strlen(msData)<39) {
    strcat(msData," ");
  }

  strcpy(cAd.trackData,   msData);                           /* TRACK II DATA */
  strncpy(cAd.rsdnRgstNo,   "                                        ",  40); /* 주민번호 */
  strncpy(cAd.tcacCode,   "410",  3);                             /* 통화코드 */
  strncpy(cAd.passWord,   "                ",  16);               /* 통화코드 */
  strncpy(cAd.halbu,   "00200",  5);                            /* 할부개월수 */

  uvDebug("cAd.textStart       [%3.3s]",(char *) cAd.textStart);
  uvDebug("cAd.telgHeader      [%9.9s]",(char *) cAd.telgHeader);
  uvDebug("cAd.telgType        [%4.4s]",(char *) cAd.telgType);
  uvDebug("cAd.praimaryBitmap  [%16.16s]",(char *) cAd.praimaryBitmap);
  uvDebug("cAd.dvsnCode        [%6.6s]",(char *) cAd.dvsnCode);
  uvDebug("cAd.dvsnAmt         [%12.12s]",(char *) cAd.dvsnAmt);
  uvDebug("cAd.telgDate        [%10.10s]",(char *) cAd.telgDate);
  uvDebug("cAd.telgChno        [%6.6s]",(char *) cAd.telgChno);
  uvDebug("cAd.dlgsTime        [%6.6s]",(char *) cAd.dlgsTime);
  uvDebug("cAd.dlgsDate        [%4.4s]",(char *) cAd.dlgsDate);
  uvDebug("cAd.dlgsType        [%3.3s]",(char *) cAd.dlgsType);
  uvDebug("cAd.orgnCode        [%8.8s]",(char *) cAd.orgnCode);
  uvDebug("cAd.trackData       [%39.39s]",(char *) cAd.trackData);
  uvDebug("cAd.rsdnRgstNo      [%40.40s]",(char *) cAd.rsdnRgstNo);
  uvDebug("cAd.tcacCode        [%3.3s]",(char *) cAd.tcacCode);
  uvDebug("cAd.passWord        [%16.16s]",(char *) cAd.passWord);
  uvDebug("cAd.halbu           [%5.5s]",(char *) cAd.halbu);

  /*--------------------------------------*/
  /* 신용카드 등록 전문 전송              */
  /*--------------------------------------*/
  memset(sndBuf,   0x00,   sizeof(sndBuf));
  memcpy(sndBuf,   &cAd,   sizeof(creditAdmn));
  uvDebug("sndBuf         =   [%s]",  sndBuf);

  _callAnylink(16,sndBuf,SND_0190,rcvBuf,RCV_0238);

  uvDebug("rcvBuf         =   [%s]",  rcvBuf);

  strncpy(rcntAnswCode,   rcvBuf + 115,     2);             /* 응답코드 */
  uvDebug("rcntAnswCode    =   [%s]",  rcntAnswCode);

  strncpy(mbstNo,   rcvBuf + 117,    15);                   /* 가맹점번호 */
  uvDebug("mbstNo         =   [%s]",   mbstNo);
  CMUV_removeGarbage_CC(mbstNo, cmbstNo, 2);

  strncpy(rcntNo,   rcvBuf + 140,    15);                   /* 승인번호 */
  uvDebug("rcntNo          =   [%s]",  rcntNo);
  strncpy(rrcntNo, rcntNo+3, 8);

  strncpy(finaOrgnCode,   rcvBuf + 160,    2);              /* 카드사코드 */
  uvDebug("finaOrgnCode    =   [%s]",  finaOrgnCode);

  /* 97로 넘어오는 거는 롯데카드이므로 이거는 동양카드로 함 */
  /* 35 제주는 신한(26)로 넘김 */
  if (strncmp(finaOrgnCode,"97",2) == 0) strncpy(finaOrgnCode,"68",2);

  if (strncmp(finaOrgnCode,"35",2) == 0) strncpy(finaOrgnCode,"26",2);

  strncpy(errMsg,   rcvBuf + 186,    40);                   /* 에러메세지 */
  uvDebug("errMsg          =   [%s]",  errMsg);

  if (strncmp(rcntAnswCode, "00", 2) != 0) {

    /* 세금우대 등록취소 */
    if ( SVncapl300in_dcncApl214in14Sp(stp)  == FAIL )
    {
      uvDebug("세금우대 등록삭제 실패");
    }

    EXEC SQL ROLLBACK;
    uvDebug("신용카드 승인 불가로 청약서 접수 불가");
    appReturnCode = 4845;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, errMsg, "SVncapl300in1");
  }

  /* 카드승인번호 Set     */
  COPY(stp->rcntNo,   rrcntNo);

  /* 소급                 */
  if ((int) stp->ppayRetrCnt[1] != 0) {
    CMUV_getDateByMonth_CC((char *) stp->ftprRmtnDate.arr, (int) (stp->ppayRetrCnt[1] * -1), frstPaymMnth);
    COPY(stp->frstPaymMnth, frstPaymMnth);
  } else {
    NCOPYVAR(stp->frstPaymMnth, stp->ftprRmtnDate,  6);
  }

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in38SpInClear(&dcncApl300in38SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300in38SpIn.admnNo,   stp->polyNo);              /* 관리번호 */
  COPY(dcncApl300in38SpIn.admnNoDvsn,   "1");                 /* 관리번호구분 */
  COPY(dcncApl300in38SpIn.bsnsDvsnCode,   "NC");              /* 업무구분코드 */
  COPY(dcncApl300in38SpIn.rcntRqruDvsn,   "1");           /* 승인요청경로구분 */
  COPY(dcncApl300in38SpIn.rcntStatCode,   "2");               /* 승인상태코드 */
  dcncApl300in38SpIn.rcntAmt      =   stp->fstiRrcvPrem;          /* 승인금액 */
  COPYVAR(dcncApl300in38SpIn.frstPyym,   stp->frstPaymMnth);    /* 초납입년월 */
  COPYVAR(dcncApl300in38SpIn.endPyym,   stp->lastPaymMnth);     /* 종납입년월 */
  dcncApl300in38SpIn.frstPyct     =   1;                            /* 초납회 */
  dcncApl300in38SpIn.lastPyct     =   stp->paymCnt;                 /* 종납회 */
  dcncApl300in38SpIn.cmsn         =   0;                            /* 수수료 */
  COPYVAR(dcncApl300in38SpIn.dlngDate,   stp->crntDate);          /* 처리일자 */
  COPYVAR(dcncApl300in38SpIn.rcntDate,   stp->crntDate);          /* 승인일자 */
  COPYVAR(dcncApl300in38SpIn.rcntTime,   stp->crntTimeHh24);      /* 승인시각 */
  COPYVAR(dcncApl300in38SpIn.rcntNo,   stp->rcntNo);              /* 승인번호 */
  COPY(dcncApl300in38SpIn.rcntAnswCode,   rcntAnswCode);      /* 승인응답코드 */
  COPY(dcncApl300in38SpIn.cardCmpnCode,   finaOrgnCode);        /* 카드사코드 */
  COPY(dcncApl300in38SpIn.prsnGrpDvsn,   "1");                /* 개인단체구분 */
  COPYVAR(dcncApl300in38SpIn.cardDtalInfo,   stp->acctCardNo[0]); /* 카드상세정보 */
  CAT(dcncApl300in38SpIn.cardDtalInfo,   "=");                /* 카드상세정보 */
  CATVAR(dcncApl300in38SpIn.cardDtalInfo,   stp->cardVlidEdym[0]); /* 카드상세정보 */
  COPYVAR(dcncApl300in38SpIn.cardNo,   stp->acctCardNo[0]);       /* 카드번호 */
  COPYVAR(dcncApl300in38SpIn.cardOwnrName,   stp->cardOwnrName[0]); /* 카드소유자명 */
  if (strncmp((char *) stp->prsnCoprPmdv.arr, "2", 1) == 0) {
    if ((int) stp->premCoprCgrt == 0) {
      COPYVAR(dcncApl300in38SpIn.cardOwnrRrno,    stp->cardOwnrRrno[0]); /* 카드소유자주민등록번호 */
    } else {
      COPYVAR(dcncApl300in38SpIn.cardBsmnRgno,    stp->cardOwnrRrno[0]); /* 카드사업자등록번호 */
    }
  } else {
    COPYVAR(dcncApl300in38SpIn.cardOwnrRrno,    stp->cardOwnrRrno[0]); /* 카드소유자주민등록번호 */
  }
  COPYVAR(dcncApl300in38SpIn.cardVlidEdym,   stp->cardVlidEdym[0]); /* 카드유효만료년월 */
  COPY(dcncApl300in38SpIn.mbstTrmnNo,   "901600");        /* 가맹점단말기번호 */
  COPY(dcncApl300in38SpIn.cardInptDvsn,   "2");               /* 카드입력구분 */
  COPY(dcncApl300in38SpIn.mbstNo,   cmbstNo);                   /* 가맹점번호 */
  COPY(dcncApl300in38SpIn.rcntCnclYn,   "N");                 /* 승인취소여부 */
  COPY(dcncApl300in38SpIn.reviDlngNo,   "0000");              /* 부활처리번호 */
  COPYVAR(dcncApl300in38SpIn.paymCyclCode,   stp->paymCyclCode); /* 납입주기코드 */
  COPYVAR(dcncApl300in38SpIn.collMetdCode,   stp->collMetdCode); /* 수금방법코드 */
  dcncApl300in38SpIn.sumOrigPrem  =   stp->sumOrigPrem;       /* 합계원보험료 */
  dcncApl300in38SpIn.sumPrem      =   stp->sumPrem;             /* 합계보험료 */
  dcncApl300in38SpIn.induOpreGurt =   0;           /* 소득공제대상보험료_보장 */
  dcncApl300in38SpIn.induOpreAnnt =   0;           /* 소득공제대상보험료_연금 */
  COPYVAR(dcncApl300in38SpIn.collOrgnCode,   stp->collOrgnCode); /* 수금기관코드 */
  COPYVAR(dcncApl300in38SpIn.collLpPrno,   stp->collLpPrno); /* 수금설계사고유번호 */
  dcncApl300in38SpIn.ppayDsctPrem =   stp->ppayRetrPrem[0] - stp->ppayRetrInte[0];
  /* 선납할인보험료           */

  uvDebug("dcncApl300in38SpIn.admnNo       =  [%s]",  (char *) dcncApl300in38SpIn.admnNo      .arr);
  uvDebug("dcncApl300in38SpIn.admnNoDvsn   =  [%s]",  (char *) dcncApl300in38SpIn.admnNoDvsn  .arr);
  uvDebug("dcncApl300in38SpIn.bsnsDvsnCode =  [%s]",  (char *) dcncApl300in38SpIn.bsnsDvsnCode.arr);
  uvDebug("dcncApl300in38SpIn.rcntRqruDvsn =  [%s]",  (char *) dcncApl300in38SpIn.rcntRqruDvsn.arr);
  uvDebug("dcncApl300in38SpIn.rcntStatCode =  [%s]",  (char *) dcncApl300in38SpIn.rcntStatCode.arr);
  uvDebug("dcncApl300in38SpIn.rcntAmt      =  [%f]",          dcncApl300in38SpIn.rcntAmt);
  uvDebug("dcncApl300in38SpIn.frstPyym     =  [%s]",  (char *) dcncApl300in38SpIn.frstPyym    .arr);
  uvDebug("dcncApl300in38SpIn.endPyym      =  [%s]",  (char *) dcncApl300in38SpIn.endPyym     .arr);
  uvDebug("dcncApl300in38SpIn.frstPyct     =  [%f]",          dcncApl300in38SpIn.frstPyct);
  uvDebug("dcncApl300in38SpIn.lastPyct     =  [%f]",          dcncApl300in38SpIn.lastPyct);
  uvDebug("dcncApl300in38SpIn.cmsn         =  [%f]",          dcncApl300in38SpIn.cmsn);
  uvDebug("dcncApl300in38SpIn.dlngDate     =  [%s]",  (char *) dcncApl300in38SpIn.dlngDate    .arr);
  uvDebug("dcncApl300in38SpIn.rcntDate     =  [%s]",  (char *) dcncApl300in38SpIn.rcntDate    .arr);
  uvDebug("dcncApl300in38SpIn.rcntTime     =  [%s]",  (char *) dcncApl300in38SpIn.rcntTime    .arr);
  uvDebug("dcncApl300in38SpIn.rcntNo       =  [%s]",  (char *) dcncApl300in38SpIn.rcntNo      .arr);
  uvDebug("dcncApl300in38SpIn.rcntAnswCode =  [%s]",  (char *) dcncApl300in38SpIn.rcntAnswCode.arr);
  uvDebug("dcncApl300in38SpIn.cardCmpnCode =  [%s]",  (char *) dcncApl300in38SpIn.cardCmpnCode.arr);
  uvDebug("dcncApl300in38SpIn.prsnGrpDvsn  =  [%s]",  (char *) dcncApl300in38SpIn.prsnGrpDvsn .arr);
  uvDebug("dcncApl300in38SpIn.cardDtalInfo =  [%s]",  (char *) dcncApl300in38SpIn.cardDtalInfo.arr);
  uvDebug("dcncApl300in38SpIn.cardDtalInfo =  [%s]",  (char *) dcncApl300in38SpIn.cardDtalInfo.arr);
  uvDebug("dcncApl300in38SpIn.cardDtalInfo =  [%s]",  (char *) dcncApl300in38SpIn.cardDtalInfo.arr);
  uvDebug("dcncApl300in38SpIn.cardNo       =  [%s]",  (char *) dcncApl300in38SpIn.cardNo      .arr);
  uvDebug("dcncApl300in38SpIn.cardOwnrName =  [%s]",  (char *) dcncApl300in38SpIn.cardOwnrName.arr);
  uvDebug("dcncApl300in38SpIn.cardOwnrRrno =  [%s]",  (char *) dcncApl300in38SpIn.cardOwnrRrno.arr);
  uvDebug("dcncApl300in38SpIn.cardVlidEdym =  [%s]",  (char *) dcncApl300in38SpIn.cardVlidEdym.arr);
  uvDebug("dcncApl300in38SpIn.mbstTrmnNo   =  [%s]",  (char *) dcncApl300in38SpIn.mbstTrmnNo  .arr);
  uvDebug("dcncApl300in38SpIn.cardInptDvsn =  [%s]",  (char *) dcncApl300in38SpIn.cardInptDvsn.arr);
  uvDebug("dcncApl300in38SpIn.mbstNo       =  [%s]",  (char *) dcncApl300in38SpIn.mbstNo      .arr);
  uvDebug("dcncApl300in38SpIn.rcntCnclYn   =  [%s]",  (char *) dcncApl300in38SpIn.rcntCnclYn  .arr);
  uvDebug("dcncApl300in38SpIn.reviDlngNo   =  [%s]",  (char *) dcncApl300in38SpIn.reviDlngNo  .arr);
  uvDebug("dcncApl300in38SpIn.paymCyclCode =  [%s]",  (char *) dcncApl300in38SpIn.paymCyclCode.arr);
  uvDebug("dcncApl300in38SpIn.collMetdCode =  [%s]",  (char *) dcncApl300in38SpIn.collMetdCode.arr);
  uvDebug("dcncApl300in38SpIn.sumOrigPrem  =  [%f]",          dcncApl300in38SpIn.sumOrigPrem);
  uvDebug("dcncApl300in38SpIn.sumPrem      =  [%f]",          dcncApl300in38SpIn.sumPrem);
  uvDebug("dcncApl300in38SpIn.induOpreGurt =  [%f]",          dcncApl300in38SpIn.induOpreGurt);
  uvDebug("dcncApl300in38SpIn.induOpreAnnt =  [%f]",          dcncApl300in38SpIn.induOpreAnnt);
  uvDebug("dcncApl300in38SpIn.collOrgnCode =  [%s]",  (char *) dcncApl300in38SpIn.collOrgnCode.arr);
  uvDebug("dcncApl300in38SpIn.collLpPrno   =  [%s]",  (char *) dcncApl300in38SpIn.collLpPrno  .arr);
  uvDebug("dcncApl300in38SpIn.ppayDsctPrem =  [%f]",          dcncApl300in38SpIn.ppayDsctPrem);
  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in38Sp(&basicParam,&dcncApl300in38SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN38_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN38_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_cardRcnt    End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_edwCall()
  Note          : EDW 로 EAI 통하여서 넘김
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_edwCall(struct stp_SVncapl300in1 *stp) {
  /*------------------------------------------------------------------*
    EDW 로 넘김(신진혁, 2005.11.29, 요금 정해원 대리 모듈 호출
  -------------------------------------------------------------------*/
  uvDebug("SVncapl300in1_edwCall start");

  char sqlStat[1024 * 10];
  memset(sqlStat, 0x00, sizeof(sqlStat));

  /* EDW 호출여부 결정 */
  char retVal[MAX_VALUE_LEN];
  memset(retVal, 0x00, sizeof(retVal));

  int retCode = uvRuleBase("NC_toEdwChck", "","SVncapl300in1", retVal);

  if (retCode != 0) {
    uvDebug("(NC_toEdwChck) 룰호출 오류[%d]", retCode);
  }

  uvDebug("■■■ EDW 호출여부 [%s] ■■■",retVal);

  if (strcmp(retVal,"Y") == 0) {
    /* 반드시 키를 만들어서 SELECT 문을 작성 */
    sprintf(sqlStat,
        "SELECT *                      \n"
        "  FROM TB_NCCLONCD            \n"
        " WHERE poly_no in ( '%s','%s' )  \n",
        (char *) stp->polyNo.arr,
        (char *) stp->scndPolyNo.arr);

    uvDebug(" SQL 문 : [%s]",sqlStat);

    /* 테이블명, I/U(INSERT/UPDATE), SQL문 */
    CMCP_EDWRealSync_CC("TB_NCCLONCD", 'I', sqlStat);
  }

  uvDebug("SVncapl300in1_edwCall end");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in22Sp
  Note          : 계약상태코드 미입금접수로 변경
  Parameters    : 아래참조
  Return Value  : int
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in22Sp(struct stp_SVncapl300in1_realTrnf *stp_real) {
  uvDebug("=== SVncapl300in1_dcncApl300in22Sp Start ===");
  uvDebug("즉시이체 결과 [%s]",(char *) stp_real->recvYn.arr);

  struct _dcnc_apl300in22_sp_in  dcncApl300in22SpIn;

  dcncApl300in22SpInClear(&dcncApl300in22SpIn);

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  /* COPYVAR(dcncApl300in22SpIn.cnttStatDtcd ,   stp_real->cnttStatDtcd   ); /* 계약상태상세코드 */
  COPY(dcncApl300in22SpIn.cnttStatDtcd,   "71");

  COPYVAR(dcncApl300in22SpIn.polyNo,   stp_real->polyNo);         /* 증권번호 */
  COPYVAR(dcncApl300in22SpIn.dmndDate,   stp_real->dmndDate);     /* 이체일자 */
  COPY(dcncApl300in22SpIn.imtrStcd,   "1");               /* 즉시이체상태코드 */
  COPY(dcncApl300in22SpIn.imtrRtcd,   "1");               /* 즉시이체결과코드 */
  COPYVAR(dcncApl300in22SpIn.imtrNscd,   stp_real->imtrNscd); /* 즉시이체응답코드 */
  COPYVAR(dcncApl300in22SpIn.imtrBankNscd,   stp_real->imtrBankNscd); /* 즉시이체은행응답코드 */
  COPYVAR(dcncApl300in22SpIn.bankCode,   stp_real->bankCode);     /* 은행코드 */
  dcncApl300in22SpIn.telgSeqNo    =   stp_real->jNo;              /* 전문번호 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in22Sp(&basicParam,&dcncApl300in22SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN22_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN22_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */

  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("DCNC_APL300IN22_SP 호출에러");
    appReturnCode = 3425;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "다시 조회후 접수하십시요", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_dcncApl300in22Sp End");

  return;
}

#ifdef CP_SWEEP
/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in23Sp
  Note          : 계약상태코드 미입금접수로 변경
  Parameters    : 아래참조
  Return Value  : int
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
//void SVncapl300in1_dcncApl300in23Sp(struct stp_SVncapl300in1_realTrnf *stp_real) {
//  uvDebug("=== SVncapl300in1_dcncApl300in23Sp Start ===");
//  uvDebug("즉시이체 결과 [%s]",(char *) stp_real->recvYn.arr);
//
//  struct _dcnc_apl300in22_sp_in  dcncApl300in22SpIn;
//
//  dcncApl300in22SpInClear(&dcncApl300in22SpIn);
//
//  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
//
//  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
//  /* COPYVAR(dcncApl300in22SpIn.cnttStatDtcd ,   stp_real->cnttStatDtcd   ); /* 계약상태상세코드 */
//  COPY(dcncApl300in22SpIn.cnttStatDtcd,   "71");
//
//  COPYVAR(dcncApl300in22SpIn.polyNo,   stp_real->polyNo);         /* 증권번호 */
//  COPYVAR(dcncApl300in22SpIn.dmndDate,   stp_real->dmndDate);     /* 이체일자 */
//  COPY(dcncApl300in22SpIn.imtrStcd,   "1");               /* 즉시이체상태코드 */
//  COPYVAR(dcncApl300in22SpIn.imtrNscd,   stp_real->imtrNscd); /* 즉시이체응답코드 */
//  COPYVAR(dcncApl300in22SpIn.imtrBankNscd,   stp_real->imtrBankNscd); /* 즉시이체은행응답코드 */
//  COPYVAR(dcncApl300in22SpIn.bankCode,   stp_real->bankCode);     /* 은행코드 */
//  dcncApl300in22SpIn.telgSeqNo    =   stp_real->jNo;              /* 전문번호 */
//
//  /*------------------------------------------------------------------*
//   * 비지니스 로직 기술부
//   *------------------------------------------------------------------*/
//
//  setInitDBIO(1,DBCURSOR_CLOSE);
//
//  /* DBIO module 호출                                             */
//
//  dcncApl300in22Sp(&basicParam,&dcncApl300in22SpIn);
//
//  /* DBIO module 호출 결과 확인                                   */
//  if (getCDALResult() != SQL_OK) {
//    /* DBIO Error Message 에 Function name을 add한다.           */
//    setDBIOErrMsg(fnName);
//    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
//    EXEC SQL ROLLBACK;
//
//    uvDebug("DBIO(DCNC_APL300IN22_SP) 호출 Error[%d], %s",\
//        cptReturnCode,getCDALErrMsg());
//    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
//    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
//        "DBIO(DCNC_APL300IN22_SP) 호출 Error.",  \
//        getCDALErrMsg());
//  }
//
//  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
//
//  if (basicParam.rpSize == 0) {
//    EXEC SQL ROLLBACK;
//    uvDebug("DCNC_APL300IN22_SP 호출에러");
//    appReturnCode = 3425;
//    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
//    SVC_CLOSE(APPERR, appReturnCode, 0, \
//        "다시 조회후 접수하십시요", "SVncapl300in1");
//  }
//
//  uvDebug("SVncapl300in1_dcncApl300in23Sp End");
//
//  return;
//}


/************************************************************************
  Function Name : SVncapl300in1_chckCso
  Note          : A진단합산이 10,000,000 이하인지 확인
  Parameters    :
  Return Value  : TRUE/FALSE
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
//int SVncapl300in1_chckCso(CMNC_custSumCalc_Outp* cso) {
//  int  i;
//  for (i = 0; i < ASSM_ITEM_CNT; i++) {
//    uvDebug("*-*- [%s][%f]", cso->assmItemCode[i].arr, cso->sumCalcAmt[i]);
//    if (strlen((char*) cso->assmItemCode[i].arr) == 0) {
//      return FALSE;
//    }
//    if ((strcmp((char*) cso->assmItemCode[i].arr,"G11") == 0) &&
//        (cso->sumCalcAmt[i] <= 10000000)) {
//      return TRUE;
//    }
//  }
//
//  return FALSE;
//}
#endif

/************************************************************************
  Function Name : SVncapl300in1_arsTime()
  Note          : 영업외 청약가능여부 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_arsTime(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_arsTime  Start");

  uvDebug("초회보험료 입금방법 [%s]",(char *) stp->ftprRecvMdcd.arr);

  /* 초회보험료 입금방법이 즉시이체, 카드납입, 지정이이체는 체크조건 제외 */
  if ((strcmp((char *) stp->ftprRecvMdcd.arr,"81") == 0) ||
      (strcmp((char *) stp->ftprRecvMdcd.arr,"83") == 0) ||
      (strcmp((char *) stp->ftprRecvMdcd.arr,"84") == 0)) {
    uvDebug("초회보험료 비방문수금 제외");
    return;
  }

  CMNC_ArsTime ArsTime;

  memset(&ArsTime,   0x00,   sizeof(CMNC_ArsTime));

  COPYVAR(ArsTime.rsdnRgstNo,   stp->custRrno[1]);
  COPYVAR(ArsTime.cnttDate,   stp->cnttDate);
  COPYVAR(ArsTime.recpDate,   stp->crntDate);
  COPYVAR(ArsTime.clltOrgnCode,   stp->clltOrgnCode);
  COPYVAR(ArsTime.fnlpPrno,   stp->clltLpPrno);
  COPYVAR(ArsTime.inptPoss,   stp->inptPoss);
  COPYVAR(ArsTime.retrYn,   stp->retrYn);
  ArsTime.sumOrigPrem    =   stp->sumOrigPrem;
  ArsTime.sumPrem        =   stp->sumPrem;
  COPYVAR(ArsTime.polyNo,   stp->polyNo);
  /* 보험료는 가입설계서상의 보험료이므로 합계원보험료 적용함       */

  if (CMNC_ArsTime_CC(&ArsTime) == FAIL) {
    EXEC SQL ROLLBACK;
    uvDebug("CMNC_ArsTime 모듈 호출오류 ");
    appReturnCode = 7731;
    SVC_CLOSE(APPERR, appReturnCode, 0, "CMNC_ArsTime 모듈 호출오류", "SVncapl300in1");
  }

  uvDebug("영업시간외 청약가능여부 [%s]",(char *) ArsTime.cnttPossYn.arr);

  if (strcmp((char *) ArsTime.cnttPossYn.arr, "N") == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("영업시간외 청약 불가 ");
    appReturnCode = 7731;
    SVC_CLOSE(APPERR, appReturnCode, 0, "영업외 시간 청약불가", "SVncapl300in1");
  }

  /* 심사시 유의사항 입력건 위해 변수 옮김 */
  if (strcmp((char *) ArsTime.cnttPossYn.arr, "Y") == 0) {
    COPYVAR(stp->arsCnttYn, ArsTime.cnttPossYn);
    uvDebug("심사시유의사항 생성 [%s]",(char *) stp->arsCnttYn.arr);
  }

  uvDebug("SVncapl300in1_arsTime  End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_CMNC_acceptCutoff_CC()
  Note          : 장애로 등록되어 있는지를 확인한다
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_acceptCutoff_CC(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_CMNC_acceptCutoff_CC  Start");

  /* 모집기관으로 개인,KLD, 대리점 판매채널을 산출한다 */
  /* 1:개인, 6:대리점, 7:KLD 고능률 브랜치             */

  char workYn[1+1];

  memset(workYn, 0x00, sizeof(workYn));

  uvDebug("NC_acceptCutoff_Check 룰 호출");

  int retCode = uvRuleBase("NC_acceptCutoff_Check",
      "",
      uvGetServiceName(),
      workYn);

  if (retCode != 0) {
    uvDebug("(NC_acceptCutoff_Check) 룰 호출오류");
    return;
  }

  if (strcmp(workYn, "N") == 0) {
    uvDebug("발행,접수 장애차단시스템 기동안됨");
    return;
  }

  uvDebug("발행,접수 장애처리 차단시스템 기동여부 = [%s]",  workYn);

  CMNC_acceptCutoff   cutOff;

  memset(&cutOff,    0x00,   sizeof(CMNC_acceptCutoff));

  COPYVAR(cutOff.saleChnl, stp->saleChnlCode);         /* I 판매채널 */
  COPYVAR(cutOff.clltOrgnCode, stp->clltOrgnCode);     /* I 모집기관 */
  COPY(cutOff.onlSrvcName, uvGetServiceName());        /* I 서비스명 */

  uvDebug("cutOff.saleChnl     = [%s]", (char *) cutOff.saleChnl    .arr);
  uvDebug("cutOff.clltOrgnCode = [%s]", (char *) cutOff.clltOrgnCode.arr);
  uvDebug("cutOff.onlSrvcName  = [%s]", (char *) cutOff.onlSrvcName .arr);

  if (CMNC_acceptCutoff_CC(&cutOff) != TRUE) {
    EXEC SQL ROLLBACK;
    uvDebug("발행,접수 서비스 차단여부 검색(CMNC_acceptCutoff_CC) 호출 오류");
    appReturnCode = 7742;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "발행,접수 서비스 차단여부 검색(CMNC_acceptCutoff_CC) 호출 오류", "SVncapl300in1");
  }

  if (strlen((char *) cutOff.hndcMangYn.arr) > 0) {
    EXEC SQL ROLLBACK;
    uvDebug("발행,접수 서비스 차단");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0,(char *) cutOff.hndcGudeMsg.arr, "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_CMNC_acceptCutoff_CC  End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_CMNC_ErpHub()
  Note          : ERP HUB테이블 입력
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMNC_ErpHub2(struct stp_SVncapl300in1 *stp) {

  char *fnName1 = "SVncapl300in1_CMNC_ErpHub2";
  int i = 0;

  /* 모듈에서 사용할 구조체 선언 */
  CMNC_erpHubComm ErpHubComm;

  uvDebug("%s Start",fnName1);

  /* 방카는 제외한다 */
  if (strcmp((char *) stp->saleChnlCode.arr,"5") == 0) {
    return;
  }

  /* ERP HUB 에 입력할때 자유설계는 두번 태워야 함 */
  for (i = 0; i<2; i++) {
    uvDebug("ERP HUP 모듈 호출 시작");

    memset(&ErpHubComm,   0x00,   sizeof(CMNC_erpHubComm));

    COPY(ErpHubComm.workDvsn, "01");                              /* 업무구분 */
    COPY(ErpHubComm.dlgsTypeCode, "NC001");                   /* 거래유형코드 */

    if (i == 0) {
      COPYVAR(ErpHubComm.erpPolyLnnu, stp->polyNo);               /* 증권번호 */
    } else {
      COPYVAR(ErpHubComm.erpPolyLnnu, stp->scndPolyNo);           /* 증권번호 */
    }

    if (CMNC_erpHubComm_CC(&ErpHubComm) == FAIL) {
      EXEC SQL ROLLBACK;
      uvDebug("CMNC_erpHubComm_CC 모듈 호출오류 ");
      appReturnCode = 4899;
      SVC_CLOSE(APPERR, appReturnCode, 0, "CMNC_erpHubComm_CC 모듈 호출오류", "SVncapl300in1");
    }

    /* 자유설계시 종증번의 정보를 입력하기 위하여 한번더 loop, 비자유설계시 break */
    if ((char *) stp->scndPolyNo.arr[0] == 0x00) break;

  }   /* end for */

  uvDebug("%s  End",fnName1);

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncapl300in48Sp()
  Note          : U/W관련 특이사항 입력(메모)
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencapl300in48Sp(struct stp_SVncapl300in1 *stp) {

  char* fnName1 = "SVncapl300in1_dencapl300in48Sp";

  /* 변수선언 */
  struct _denc_apl300in48_sp_in   dencApl300in48SpIn;


  uvDebug("※ [%s] begin...", fnName1);

  /* 초기화 */
  setInitDBIO(ARRAY_SIZE, DBCURSOR_CLOSE);
  dencApl300in48SpInClear(&dencApl300in48SpIn);

  /* 변수입력 */
  COPYVAR(dencApl300in48SpIn.polyNo, stp->polyNo);             /* 증권번호 */
  COPY(dencApl300in48SpIn.cnttBsnsDvcd, "01");          /* 계약별업무구분코드 */
  COPY(dencApl300in48SpIn.lastChmnMpno, uvGetUserID());     /* 최종변경자사번 */
  COPY(dencApl300in48SpIn.pgmId, "SVncapl300in1");             /* 프로그램ID */
  COPY(dencApl300in48SpIn.inptManMpno, uvGetUserID());         /* 입력자사번 */
  COPYVAR(dencApl300in48SpIn.inptOrgnCode, stp->clltOrgnCode); /* 입력기관코드 */
  COPYVAR(dencApl300in48SpIn.memoCten, stp->memoCten);         /* 메모내용 */
  /* 2008.08 U/W특이사항 관련 (2006.08.19) */
  COPYVAR(dencApl300in48SpIn.cnttMemoCode, stp->memoCode);  /* 계약별메모코드 */

  uvDebug(" 증권번호          (polyNo      ) = [%s]", dencApl300in48SpIn.polyNo      .arr);
  uvDebug(" 계약별업무구분코드(cnttBsnsDvcd) = [%s]", dencApl300in48SpIn.cnttBsnsDvcd.arr);
  uvDebug(" 최종변경자사번    (lastChmnMpno) = [%s]", dencApl300in48SpIn.lastChmnMpno.arr);
  uvDebug(" 프로그램ID        (pgmId       ) = [%s]", dencApl300in48SpIn.pgmId       .arr);
  uvDebug(" 입력자사번        (inptManMpno ) = [%s]", dencApl300in48SpIn.inptManMpno .arr);
  uvDebug(" 입력기관코드      (inptOrgnCode) = [%s]", dencApl300in48SpIn.inptOrgnCode.arr);
  uvDebug(" 메모내용          (memoCten    ) = [%s]", dencApl300in48SpIn.memoCten    .arr);
  /* 2008.08 U/W특이사항 관련 (2006.08.19) */
  uvDebug(" 계약별메모코드    (cnttMemoCode) = [%s]", dencApl300in48SpIn.cnttMemoCode.arr);

  /* EDAL호출 */
  dencApl300in48Sp(&basicParam,&dencApl300in48SpIn);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  /* 결과확인 */
  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(dencApl300in48Sp) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(dencApl300in48Sp) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dcncApl100in48Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencApl300in49Sp()
  Note          : 장애인심사여부 조회
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300in49Sp(struct stp_SVncapl300in1 *stp) {

  char* fnName1 = "SVncapl300in1_dencApl300in49Sp";

  /* 변수선언 */
  struct _denc_apl300in49_sp_in  ist;
  struct _denc_apl300in49_sp_out ost;

  dencApl300in49SpInClear(&ist);
  dencApl300in49SpOutClear(&ost);
  setInitDBIO(1, DBCURSOR_CLOSE);

  COPYVAR(ist.polyNo, stp->polyNo);       /* 증권번호 */
  COPYVAR(ist.stddDate, stp->crntDate);   /* 기준일자 */

  uvDebug("--[%s]---------------------", fnName1);
  uvDebug("증권번호 = [%s]", ist.polyNo  .arr);
  uvDebug("기준일자 = [%s]", ist.stddDate.arr);
  uvDebug("-------------------------------------");

  dencApl300in49Sp(&basicParam, &ist, &ost);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    dencApl300in49SpClose();
    uvDebug("DBIO(DENC_APL300IN49_SP) 호출 Error[%d], %s",cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN49_SP) 호출 Error.", getCDALErrMsg());
  }

  if (basicParam.rpSize == 0) {
    COPY(stp->hndrYn, "N");
  } else {
    COPYVAR(stp->hndrYn, ost.hndrYn);
  }

  dencApl300in49SpClose();

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencApl300in50Sp()
  Note          : 교차판매여부 조회
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300in50Sp(struct stp_SVncapl300in1 *stp) {
  char* fnName1 = "SVncapl300in1_dencApl300in50Sp";

  /* 변수선언 */
  struct _denc_apl300in50_sp_in  ist;
  struct _denc_apl300in50_sp_out ost;

  dencApl300in50SpInClear(&ist);
  dencApl300in50SpOutClear(&ost);
  setInitDBIO(1, DBCURSOR_CLOSE);

  COPYVAR(ist.polyNo, stp->polyNo);       /* 증권번호 */

  uvDebug("--[%s]---------------------", fnName1);
  uvDebug("증권번호 = [%s]", ist.polyNo  .arr);
  uvDebug("-------------------------------------");

  dencApl300in50Sp(&basicParam, &ist, &ost);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    dencApl300in49SpClose();
    uvDebug("DBIO(DENC_APL300IN50_SP) 호출 Error[%d], %s",cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN50_SP) 호출 Error.", getCDALErrMsg());
  }

  if (basicParam.rpSize == 0) {
    COPY(stp->crosSaleYn, "N");
  } else {
    COPYVAR(stp->crosSaleYn, ost.crosSaleYn);
  }

  dencApl300in50SpClose();

  return;
}
/******************************************************************************
  Function Name : SVncapl300in1_dencSncudwcje003Sp()
  Note          : 재정언더라이팅 대상여부
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencSncudwcje003Sp(struct stp_SVncapl300in1 *stp) {
  char* fnName1 = "SVncapl300in1_dencSncudwcje003Sp";

  uvDebug("%s start", fnName1);

  /* 변수선언 */
  struct _denc_sncudwcje_003_sp_in  dencSncudwcje003SpIn;
  struct _denc_sncudwcje_003_sp_out dencSncudwcje003SpOut;

  /* 초기화 */
  dencSncudwcje003SpInClear(&dencSncudwcje003SpIn);
  dencSncudwcje003SpOutClear(&dencSncudwcje003SpOut);

  setInitDBIO(ARRAY_SIZE, DBCURSOR_CLOSE);

  /* 변수대입 */
  if (strncmp((char*) stp->freePlanYn.arr, "Y", 1) == 0) {
    COPYVAR(dencSncudwcje003SpIn.polyNo, stp->mainPolyNo); /* 자유설계 주증번 */
  } else {
    COPYVAR(dencSncudwcje003SpIn.polyNo, stp->polyNo);
  }
  COPY(dencSncudwcje003SpIn.joltCalcDvsn, "02");     /* 가입한도산출구분:접수 */
  COPY(dencSncudwcje003SpIn.jugmErcd, "DA11600");  /* 심사착오코드:재정UW대상 */

  /* DBIO 실행 */
  dencSncudwcje003Sp(&basicParam, &dencSncudwcje003SpIn, &dencSncudwcje003SpOut);

  /* DBIO 실행결과 확인 */
  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    dencApl300in49SpClose();
    uvDebug("DBIO(DENC_SNCUDWCJE_003_SP) 호출 Error[%d], %s",cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_SNCUDWCJE_003_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("* [%s] polyNo = [%s]", fnName1, (char *) dencSncudwcje003SpIn.polyNo.arr);
  uvDebug("* [%s] finaYn = [%s]", fnName1, (char *) dencSncudwcje003SpOut.finaYn.arr);

  COPYVAR(stp->finaYn, dencSncudwcje003SpOut.finaYn);

  uvDebug("%s End ", fnName1);

  return;
}

/************************************************************************
  Function Name : SVncapl300in_dcncApl214in14Sp()
  Note          : 세금우대 계약 정보 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int SVncapl300in_dcncApl214in14Sp(struct stp_SVncapl300in1 *stp) {
  int     ii  =   0;
  int     ret =   0;
  CMNC_taxPrctRgstCncl    tpr;
  struct _dcnc_apl214in14_sp_out dcncApl214in14SpOut[ARRAY_SIZE];
  struct _dcnc_apl214in14_sp_in  dcncApl214in14SpIn;

  uvDebug("SVncapl300in_dcncApl214in14Sp  Start");

  memset(&tpr,    0x00,   sizeof(CMNC_taxPrctRgstCncl));

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl214in14SpInClear(&dcncApl214in14SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl214in14SpIn.polyNoI,   stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl214in14SpOutClear(dcncApl214in14SpOut, ARRAY_SIZE);

  /* DBIO module 호출                                             */

  dcncApl214in14Sp(&basicParam,&dcncApl214in14SpIn,dcncApl214in14SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL214IN14_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DCNC_APL214IN14_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  for (ii = 0; ii < basicParam.rpSize; ii++) {
    COPY   (tpr.txprOccrCadv,   "08");  /* I : 세금우대발생원인구분 */
    COPYVAR(tpr.polyNo,   dcncApl214in14SpOut[ii].polyNo);  /* I : 증권번호 */
    ret = CMNC_taxPrctRgstCncl_CC(&tpr);
    if (ret != SUCCESS) {
      uvDebug("세금우대삭제 모듈 처리 중에 오류가 발생하였습니다");
      appReturnCode = ret;

      return FAIL;
    }
  }

  uvDebug("SVncapl300in_dcncApl214in14Sp  End");

  return SUCCESS;
}


/************************************************************************
  Function Name : SVncapl300in_dencApl214in04Sp()
  Note          : 저축성 비과세 계약 정보 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int SVncapl300in_dencApl214in04Sp(struct stp_SVncapl300in1 *stp) {
  int     ii  =   0;
  int     ret =   0;
  CMNC_taxPrctRgstCncl    tpr;

  struct _denc_apl214in04_sp_in  dencApl214in04SpIn;
  struct _denc_apl214in04_sp_out dencApl214in04SpOut[DENC_APL214IN04_SP_RQSIZE];

  uvDebug("SVncapl300in_dencApl214in04Sp  Start");

  memset(&tpr,    0x00,   sizeof(CMNC_taxPrctRgstCncl));

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl214in04SpInClear(&dencApl214in04SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dencApl214in04SpIn.polyNoI,   stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(DENC_APL214IN04_SP_RQSIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dencApl214in04SpOutClear(dencApl214in04SpOut, DENC_APL214IN04_SP_RQSIZE);

  /* DBIO module 호출                                             */

  dencApl214in04Sp(&basicParam,&dencApl214in04SpIn,dencApl214in04SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL214IN14_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DCNC_APL214IN14_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  for (ii = 0; ii < basicParam.rpSize; ii++) {
    COPY   (tpr.txprOccrCadv,   "08");  /* I : 세금우대발생원인구분 */
    COPYVAR(tpr.polyNo,   dencApl214in04SpOut[ii].polyNo);  /* I : 증권번호 */
    ret = CMNC_savingTxfrPrctRgstCncl_CC(&tpr);
    if (ret != SUCCESS) {
      uvDebug("저축성 비과세 모듈 처리 중에 오류가 발생하였습니다");
      appReturnCode = ret;

      return FAIL;
    }
  }

  uvDebug("SVncapl300in_dencApl214in04Sp  End");

  return SUCCESS;
}


#ifdef IPSL_DBCT
/************************************************************************
  Function Name : SVncapl300in1_dencApl300in51Sp()
  Note          : 상품별 사망보장금액 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300in51Sp(struct stp_SVncapl300in1 *stp) {
  int     ii = 0;
  int     jj = 0;
  int     kk = 0;
  double tempDeadAmt;
  struct _denc_apl300in51_sp_out dencApl300in51SpOut[8];
  struct _denc_apl300in51_sp_in  dencApl300in51SpIn;

  uvDebug("SVncapl300in1_dencApl300in51Sp  Start");

  uvDebug("가입상품건수 = [%f]", stp->cjgCnt);

  for (ii = 0; ii < stp->cjgCnt; ii++) {
     /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
    dencApl300in51SpInClear(&dencApl300in51SpIn);

    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dencApl300in51SpIn.irkdCodeDtal,  stp->irkdCodeDtal);
    COPYVAR(dencApl300in51SpIn.irkdCodeItem,  stp->irkdCodeItem);
    COPYVAR(dencApl300in51SpIn.goodCodeDtal,  stp->cjggoodCodeDtal[ii]);
    COPYVAR(dencApl300in51SpIn.goodCodeItem,  stp->cjggoodCodeItem[ii]);
    COPYVAR(dencApl300in51SpIn.cnttDate,  stp->cnttDate);

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(8,DBCURSOR_CLOSE);

    /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
       OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
    dencApl300in51SpOutClear(dencApl300in51SpOut,8);

    /* DBIO module 호출                                             */
    dencApl300in51Sp(&basicParam,&dencApl300in51SpIn,dencApl300in51SpOut);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DENC_APL300IN51_SP) 호출 Error[%d], %s",\
          cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
          "DBIO(DENC_APL300IN51_SP) 호출 Error.",  \
          getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
    for (jj = 0; jj < 8; jj++) {
      tempDeadAmt = 0;

      if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A01") == 0) {
         kk = 0;
      } else if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A02") == 0) {
         kk = 1;
      } else if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A03") == 0) {
         kk = 2;
      } else if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A04") == 0) {
         kk = 3;
      } else if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A05") == 0) {
         kk = 4;
      } else if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A06") == 0) {
         kk = 5;
      } else if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A07") == 0) {
         kk = 6;
      } else if (strcmp((char *) dencApl300in51SpOut[jj].assmItemCode.arr, "A08") == 0) {
         kk = 7;
      }

      if ((strcmp((char *) dencApl300in51SpOut[jj].amtSumCode.arr, "A") == 0) || /* 주  보험금 배수 */
          (strcmp((char *) dencApl300in51SpOut[jj].amtSumCode.arr, "B") == 0)) { /* 특약보험금 배수 */
        tempDeadAmt = stp->cjginsrAmt[ii] * dencApl300in51SpOut[jj].calcMult;

        uvDebug("[%d][%d]상품코드[%s-%s]가입금액[%.0f]산출배수[%f]사정항목[%s]=사망금액[%.0f][%d]",
               ii,jj,
               (char *) stp->cjggoodCodeDtal[ii].arr,
               (char *) stp->cjggoodCodeItem[ii].arr, stp->cjginsrAmt[ii],
               dencApl300in51SpOut[jj].calcMult,
               (char *) dencApl300in51SpOut[jj].assmItemCode.arr,
               tempDeadAmt, kk);
      }
      stp->deadAmt[kk] += tempDeadAmt;
    }
  }

  uvDebug("SVncapl300in1_dencApl300in51Sp  End");

  return;
}
#endif

/************************************************************************
  Function Name : SVncapl300in1_klessChck()
  Note          : 전자청약 관련 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
/*
void SVncapl300in1_klessChck(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_klessChck  Start");

  uvDebug("초회보험료 입금방법 [%s]",(char *) stp->ftprRecvMdcd.arr);

  / * 전자청약시 초회보험료 입금방법dms 즉시이체, 카드납입 * /
  if ((strcmp((char *) stp->ftprRecvMdcd.arr,"83") != 0) &&
      (strcmp((char *) stp->ftprRecvMdcd.arr,"84") != 0)) {

    EXEC SQL ROLLBACK;
    uvDebug("전자청약은 즉시이체,신용카드납만 가능[%s]",(char *) stp->ftprRecvMdcd.arr);
    appReturnCode = 8734;
    SVC_CLOSE(APPERR, appReturnCode, 0, "전자청약계약", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_klessChck  E N D");
}*/

/************************************************************************
  Function Name : SVncapl300in1_klessChck()
  Note          : 초회보험료 방문수금 시 미승인 접수불가
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_ftprVtRvCntrYn(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_ftprVtRvCntrYn  Start");

  /* 초회보험료 수금방법을 방문수금으로 선택 시 초회 방문 미승인건일 경우 접수 불가 */
  uvDebug("초회보험료 입금방법 [%s]",(char *) stp->ftprRecvMdcd.arr);

  struct _denc_apl300in66_sp_out outSt;
  struct _denc_apl300in66_sp_in  inSt;

  char* fnName1 = "SVncapl300in1_dencApl300in66Sp";

  /*------------------------------------------------------------------*
  * 비지니스 로직 기술부
  *------------------------------------------------------------------*/

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300in66SpInClear(&inSt);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(inSt.polyNo,  stp->polyNo);

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dencApl300in66SpOutClear(&outSt);

  /* DBIO module 호출                                             */
  dencApl300in66Sp(&basicParam,&inSt,&outSt);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300IN66_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300IN66_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("초회보험료 방문수금 승인여부 [%s]",    (char *) outSt.ftprVtrvYn.arr);

  /* 초회보험료 방문수금 승인여부 */
  if ((strcmp((char *) outSt.ftprVtrvYn.arr,"Y") != 0 )) {
    EXEC SQL ROLLBACK;
    uvDebug("초회보험료 방문수금 미승인으로 접수불가(기관장확인요) : [%s]",(char *) outSt.ftprVtrvYn.arr);
    appReturnCode = 9017;
    SVC_CLOSE(APPERR, appReturnCode, 0, "초회보험료 방문수금", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_ftprVtRvCntrYn  E N D");

  return;
}

/************************************************************************
  Function Name : uvDebug
  Note          : 자체디버그용
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void ncDebug(char *fmt,...) {
  char tmp[1000+1];

  memset(tmp, 0x00, sizeof(tmp));

  va_list args;
  va_start(args, fmt);
  vsnprintf(tmp, sizeof(tmp), fmt, args);
  va_end(args);

  if (strlen(dmsg)+strlen(tmp) < sizeof(dmsg)-1) {
    strcat(dmsg, tmp);
    /*strcat(dmsg, "\n"); */
  }

  uvDebug(tmp);
}

void ncFprint(void) {
  if (strlen(dmsg) == 0) return;

  char  fname[1000+1];

  snprintf(fname, sizeof(fname), "%s/%s_", getenv("APPDEBUGDIR"), uvGetServiceName());
  uvGetTime(13, fname+strlen(fname));
  snprintf(fname, sizeof(fname), "%s_imtr.out", fname);

  FILE* f = fopen(fname,"a");
  if (!f) {
    uvDebug("** fopen error");
    return;
  }
  fprintf(f, "%s", dmsg);
  fclose(f);

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_dccsApl300in53Sp()
  Note          : 상품소개 및 고객분석 동의여부 입력
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dccsApl300in53Sp(struct stp_SVncapl300in1 *stp) {
  char* fnName1 = "SVncapl300in1_dccsApl300in53Sp";

  /* 변수선언 */
  struct _dccs_apl300in53_sp_in   dccsApl300in53SpIn;

  int i;

  uvDebug("※ [%s] begin...", fnName1);

  for(i=0; i<stp->cinCustCnt; i++) {

    /* 태아고객 제외 */
    if (strcmp((char *) stp->cinCustId [i].arr, "") == 0 ||
        strcmp((char *) stp->cinCustId [i].arr, "8009999998") == 0) {

      uvDebug("정보조회동의 제외 = [%s]", (char *) stp->cinCustId [i].arr);

      continue;
    }

    /* 상품소개 수집이용 미동의 & 고객분석 수집이용 미동의인 경우 현상태 유지(테이블 변경 없음) */
    if ((strcmp((char *) stp->cinAgreYn   [i].arr, "Y") != 0) && (strcmp((char *) stp->AnalAgreYn   [i].arr, "Y") != 0)) {

      uvDebug("정보조회동의 제외[%d] = [%s]", i, (char *) stp->cinAgreYn [i].arr);

      continue;
    }

    /* 초기화 */
    setInitDBIO(DCCS_APL300IN53_SP_RQSIZE, DBCURSOR_CLOSE);
    dccsApl300in53SpInClear(&dccsApl300in53SpIn);

    /* 변수입력 */
    COPYVAR(dccsApl300in53SpIn.custId       , stp->cinCustId   [i]); /* 고객ID           */
    COPY   (dccsApl300in53SpIn.crinLmitType , "1"                 ); /* 신용정보제한유형 */
    COPY   (dccsApl300in53SpIn.lastChmnMpno , uvGetUserID()       ); /* 최종변경자사번   */
    COPY   (dccsApl300in53SpIn.pgmId        , "SVncapl300in1"     ); /* 프로그램ID       */
    COPYVAR(dccsApl300in53SpIn.dlngDvsn     , stp->cinAgreYn   [i]); /* 처리구분(상품소개 수집이용동의(TB_CSCIN010)) */
    COPYVAR(dccsApl300in53SpIn.dlngOrgnCode , stp->clltOrgnCode   ); /* 처리기관코드     */
    COPY   (dccsApl300in53SpIn.rcntDate     , ""                  ); /* 승인일자         */
    COPY   (dccsApl300in53SpIn.rcnmMpno     , ""                  ); /* 승인자사번       */
    COPY   (dccsApl300in53SpIn.rcntOrgnCode , ""                  ); /* 승인기관코드     */
    COPYVAR(dccsApl300in53SpIn.cntaMetdDvsn , stp->cntaMetdDvsn[i]); /* 상품소개 연락방식구분 (01:전체, 02:전화, 03:문자, 04:이메일, 05:우편) */
    (       dccsApl300in53SpIn.agreRqstTerm = stp->agreRqstTerm[i]); /* 상품소개 동의신청기간 (5:5년, 4:4년, 3:3년, 2:2년, 1:1년) */
    COPY   (dccsApl300in53SpIn.mktgChnlDvsn , ""                  ); /* 마케팅채널구분   */
    COPY   (dccsApl300in53SpIn.calrLmitDvsn , ""                  ); /* 전화수신제한구분 */
    COPY   (dccsApl300in53SpIn.imagAdmnNo   , ""                  ); /* 이미지관리번호   */
    COPY   (dccsApl300in53SpIn.befoTypeCode , ""                  ); /* 이전유형코드     */
    COPYVAR(dccsApl300in53SpIn.stddDate     , stp->cnttDate       ); /* 기준일자         */
    COPYVAR(dccsApl300in53SpIn.crinOferAgyn , stp->cinOferAgreYn [i]); /* 상품소개 제공동의(TB_CSCIN010) */
    COPYVAR(dccsApl300in53SpIn.j3jaAgreYn   , stp->AnalAgreYn    [i]); /* 고객분석 수집이용동의(TB_CSCIN020) */
    (       dccsApl300in53SpIn.j3jaRqstTerm = stp->AnalRqstTerm  [i]); /* 고객분석 동의신청기간 (5:5년, 4:4년, 3:3년, 2:2년, 1:1년) (TB_CSCIN020) */
    COPYVAR(dccsApl300in53SpIn.j3jaOferAgyn , stp->AnalOferAgreYn[i]); /* 고객분석 제공동의(TB_CSCIN020) */

    uvDebug("*고객ID                      = [%s]", (char *) dccsApl300in53SpIn.custId      .arr);
    uvDebug("신용정보제한유형             = [%s]", (char *) dccsApl300in53SpIn.crinLmitType.arr);
    uvDebug("최종변경자사번               = [%s]", (char *) dccsApl300in53SpIn.lastChmnMpno.arr);
    uvDebug("프로그램ID                   = [%s]", (char *) dccsApl300in53SpIn.pgmId       .arr);
    uvDebug("*상품소개 수집이용동의       = [%s]", (char *) dccsApl300in53SpIn.dlngDvsn    .arr);
    uvDebug("처리기관코드                 = [%s]", (char *) dccsApl300in53SpIn.dlngOrgnCode.arr);
    uvDebug("승인일자                     = [%s]", (char *) dccsApl300in53SpIn.rcntDate    .arr);
    uvDebug("승인자사번                   = [%s]", (char *) dccsApl300in53SpIn.rcnmMpno    .arr);
    uvDebug("승인기관코드                 = [%s]", (char *) dccsApl300in53SpIn.rcntOrgnCode.arr);
    uvDebug("*상품소개 연락방식구분       = [%s]", (char *) dccsApl300in53SpIn.cntaMetdDvsn.arr);
    uvDebug("*상품소개 동의신청기간       = [%f]",          dccsApl300in53SpIn.agreRqstTerm    );
    uvDebug("마케팅채널구분               = [%s]", (char *) dccsApl300in53SpIn.mktgChnlDvsn.arr);
    uvDebug("전화수신제한구분             = [%s]", (char *) dccsApl300in53SpIn.calrLmitDvsn.arr);
    uvDebug("이미지관리번호               = [%s]", (char *) dccsApl300in53SpIn.imagAdmnNo  .arr);
    uvDebug("이전유형코드                 = [%s]", (char *) dccsApl300in53SpIn.befoTypeCode.arr);
    uvDebug("기준일자                     = [%s]", (char *) dccsApl300in53SpIn.stddDate    .arr);
    uvDebug("*상품소개 제공동의           = [%s]", (char *) dccsApl300in53SpIn.crinOferAgyn.arr);
    uvDebug("*고객분석 수집이용동의       = [%s]", (char *) dccsApl300in53SpIn.j3jaAgreYn  .arr);
    uvDebug("*고객분석 동의신청기간       = [%f]",          dccsApl300in53SpIn.j3jaRqstTerm    );
    uvDebug("*고객분석 제공동의           = [%s]", (char *) dccsApl300in53SpIn.j3jaOferAgyn.arr);


    /* EDAL호출 */
    dccsApl300in53Sp(&basicParam,&dccsApl300in53SpIn);

    uvDebug("** rpSize [%d]", basicParam.rpSize);

    /* 수집동의가 Y가 아닌데, 제공동의가 Y인경우 접수 불가(상품소개&고객분석) */
    if ( ((strncmp((char*) dccsApl300in53SpIn.dlngDvsn    .arr, "Y", 1) != 0) && (strncmp((char*) dccsApl300in53SpIn.crinOferAgyn.arr, "Y", 1) == 0)) ||
         ((strncmp((char*) dccsApl300in53SpIn.j3jaAgreYn  .arr, "Y", 1) != 0) && (strncmp((char*) dccsApl300in53SpIn.j3jaOferAgyn.arr, "Y", 1) == 0)) ) {
    EXEC SQL ROLLBACK;
    uvDebug("수집동의가 Y가 아닌데, 제공동의가 Y인경우 접수 불가");
    SVC_CLOSE(APPERR, 4899, 0, "정보동의 제공에 동의한 피보험자는 수집이용 동의를 해야합니다", fnName1);
    }

    /* 결과확인 */
    if (getCDALResult() != SQL_OK) {
      setDBIOErrMsg(fnName1);
      EXEC SQL ROLLBACK;
      uvDebug("DBIO(dccsApl300in53Sp) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
      SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(dccsApl300in53Sp) 호출 Error.", getCDALErrMsg());
    }
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dccsApl300in53Sp End");

  return;
}



#ifdef STBL_PROC_SKIP
/******************************************************************************
  Function Name : SVncapl300in1_stblPrcpExprProc_CC ()
  Note          : 적합성원칙 진단 고객승인 및 결과 만료처리
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
//void SVncapl300in1_stblPrcpExprProc_CC (struct stp_SVncapl300in1 *stp) {
//
//  int    errNo      = 0;
//  char   *fnName1    = "SVncapl300in1_stblPrcpExprProc_CC";
//
//  struct _dcnc_apl300in51_sp_in  inSt;
//  struct _dcnc_apl300in51_sp_out outSt;
//
//  uvDebug("%s start", fnName1);
//
//  setInitDBIO(1, DBCURSOR_CLOSE);
//
//  dcncApl300in51SpInClear (&inSt);
//  dcncApl300in51SpOutClear(&outSt);
//
//  uvDebug("보험료법인부담율 = [%f]",         stp->premCoprCgrt   );
//  uvDebug("단체고객ID       = [%s]",(char *) stp->cnttGrpCtid.arr);
//
//  /* 보험료법인부담율이 0보다 크고, 단체고객ID가 존재할 경우 주피로 체크 */
//  if ((stp->premCoprCgrt > 0) && (strlen((char *) stp->cnttGrpCtid.arr) > 0)) {
//    COPYVAR(inSt.custId   , stp->custId[1] ); /* 고객ID         */
//  } else {
//    COPYVAR(inSt.custId   , stp->custId[0] ); /* 고객ID         */
//  }
//
//  COPYVAR(inSt.fnplPrno    , stp->clltLpPrno);/* FP고유번호     */
//  COPYVAR(inSt.polyNo      , stp->polyNo    );/* 증권번호       */
//
//  uvDebug("고객ID         = [%s]",(char *) inSt.custId      .arr);
//  uvDebug("FP고유번호     = [%s]",(char *) inSt.fnplPrno    .arr);
//  uvDebug("증권번호       = [%s]",(char *) inSt.polyNo      .arr);
//
//  dcncApl300in51Sp(&basicParam, &inSt, &outSt);
//
//  uvDebug("** rpSize [%d]", basicParam.rpSize);
//
//  if (getCDALResult() != SQL_OK) {
//
//    uvDebug("오류 확인 = [%s]", (char *) outSt.errChk.arr);
//
//    if (strcmp((char *) outSt.errChk.arr, "ER11") == 0) {
//      errNo = 8803;
//    } else if (strcmp((char *) outSt.errChk.arr, "ER12") == 0) {
//      errNo = 8804;
//    } else if (strcmp((char *) outSt.errChk.arr, "ER21") == 0) {
//      errNo = 8803;
//    } else if (strcmp((char *) outSt.errChk.arr, "ER22") == 0) {
//      errNo = 8804;
//    } else {
//      errNo = 10;
//    }
//
//    uvDebug("적합성 에러코드 errNo=[%d]", errNo);
//
//    setDBIOErrMsg(fnName1);
//    EXEC SQL ROLLBACK;
//    uvDebug("DBIO(DCNC_APL300IN51_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
//    SVC_CLOSE(ORAERR, errNo, cptReturnCode, "DBIO(DCNC_APL300IN51_SP) 호출 Error.", getCDALErrMsg());
//  }
//
//  uvDebug("%s end ===> SUCCESS", fnName1);
//}


/******************************************************************************
  Function Name : SVncapl300in1_stblPrcpApplyYn_CC ()
  Note          : 적합성 원칙 적용 제외 여부 체크
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
//int SVncapl300in1_stblPrcpApplyYn_CC (char *stblPrcpApplyYn,
//                                      struct stp_SVncapl300in1 *stp) {
//
//  char   *fnName1    = "SVncapl300in1_stblPrcpApplyYn_CC";
//
//  uvDebug("%s start", fnName1);
//
//  /* SYSTEM 안정화 기간동안 한시적 적용 */
//  int retCode = uvRuleBase("NC_stblPrcpApplyYn", "",
//                           (char *) stp->clltOrgnCode.arr,
//                           stblPrcpApplyYn);
//
//  uvDebug("모집기관코드       = [%s]", (char *) stp->clltOrgnCode.arr);
//  uvDebug("적합성원칙적용여부 = [%s]", stblPrcpApplyYn);
//
//  if (retCode != 0) {
//    uvDebug("(NC_stblPrcpApplyYn) 룰호출 Error[%d]",retCode);
//    return FAIL;
//  }
//
//  uvDebug("적합성 원칙 적용 여부(Y:적용,N:제외) [%s]",stblPrcpApplyYn);
//
//  uvDebug("%s end ===> SUCCESS", fnName1);
//
//  return SUCCESS;
//
//}
#endif

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in56Sp ()
  Note          : 보종별 펀드보증 최신 펀드코드 반영
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in56Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in56Sp";

  struct _denc_apl300in56_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in56SpInClear (&inSt );

  COPY   (inSt.lastChmnMpno, uvGetUserID()       ); /* 최종변경자사번 */
  COPY   (inSt.pgmId       , uvGetServiceName()  ); /* 프로그램ID     */
  COPYVAR(inSt.polyNo      , stp->polyNo         ); /* 증권번호       */
  COPYVAR(inSt.stddDate    , stp->cnttDate       ); /* 기준일자       */

  uvDebug("최종변경자사번 = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID     = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("증권번호       = [%s]",(char *) inSt.polyNo      .arr);
  uvDebug("기준일자       = [%s]",(char *) inSt.stddDate    .arr);

  dencApl300in56Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN56_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN56_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

}

/******************************************************************************
  Function Name : SVncapl300in1_dencUisocictt003Sp ()
  Note          : 타사계약 인수 증권번호 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencUisocictt003Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencUisocictt003Sp";

  struct _denc_uisocictt_003_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencUisocictt003SpInClear (&inSt );

  COPY   (inSt.lastChmnMpno , uvGetUserID()     ); /* 최종변경자사번 */
  COPY   (inSt.pgmId        , uvGetServiceName()); /* 프로그램ID     */
  COPYVAR(inSt.polyNo       , stp->polyNo       ); /* 증권번호       */

  uvDebug("최종변경자사번   = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID       = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("증권번호         = [%s]",(char *) inSt.polyNo      .arr);

  dencUisocictt003Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_UISOCICTT_003_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_UISOCICTT_003_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

}

/******************************************************************************
  Function Name : SVncapl300in1_dencUisocipat001Sp ()
  Note          : 타사계약입금 증권번호 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencUisocipat001Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencUisocipat001Sp";

  struct _denc_uisocipat_001_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencUisocipat001SpInClear (&inSt );

  COPY   (inSt.lastChmnMpno , uvGetUserID()     ); /* 최종변경자사번 */
  COPY   (inSt.pgmId        , uvGetServiceName()); /* 프로그램ID     */
  COPYVAR(inSt.polyNo       , stp->polyNo       ); /* 증권번호       */

  uvDebug("최종변경자사번   = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID       = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("증권번호         = [%s]",(char *) inSt.polyNo      .arr);

  dencUisocipat001Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_UISOCIPAT_001_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_UISOCIPAT_001_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

}

/************************************************************************
  Function Name : SVncapl300in1_welcomeDreamPremiumInputProc()
  Note          : 웰컴드림 입금 정보 생성
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_welcomeDreamPremiumInputProc(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_welcomeDreamPremiumInputProc START");

  double diff = 0.0; /* 계약이전 금액 차감 합계보험료 */

  int lupyYn        = 0;
  int nlpyYn        = 0;

  /* 1. 계약이전 부분 입금 데이터 생성 */
  SVncapl300in1_dencIisrcvprm001Sp(stp,&diff,&lupyYn,&nlpyYn);

  /* 적립형 금액이 없을 경우 입금모듈 호출 안함(2015.05.18) */
  if(nlpyYn==0) {

    uvDebug("welcomeDreamPremium 적립형 상품 없음(거치형 입금정보로 수금정보 반영)");

    /* 거치형 입금정보로 수금정보 반영 */
    SVncapl300in1_dencUiscompci001Sp(stp);

    return;
  }

  /* 2. 월납보험료에 대한 입금처리=>입금처리 모듈 호출 */
  ncClsCnttRsr();

  UvT *tyCp = uvTNewO("PREM_INPT_DLNG",1,0);

  varchar addpaymMnth [6+1];
  INITVAR(addpaymMnth);
  NCOPYVAR(addpaymMnth,   stp->ftprRmtnDate,     6); /* I_추가납입년월 */

  TRY {
    /*  입금처리        */
    uvTSetS("0"    , &tyCp,   0, "workDvsn#", 0          );  /* I_작업구분 */
    uvTSetS((char *)stp->collOrgnCode.arr , &tyCp,  0, "collOrgnCode#", 0      );  /* I_수금기관 */
    uvTSetS((char *)uvGetUserOrgCode()    , &tyCp,  0, "dlngOrgnCode#", 0      );  /* I_처리기관 */
    uvTSetS((char *)uvGetUserOrgCode()    , &tyCp,  0, "rvrsOrgnCode#", 0      );  /* I_경리귀속기관 */
    uvTSetS((char *)stp->ftprRmtnDate.arr , &tyCp,  0, "rmtnDate#", 0          );  /* I_송금일자 */
    uvTSetS((char *)stp->ftprRmtnDate.arr , &tyCp,  0, "dlngDate#", 0          );  /* I_처리일자 */

    /* 초회보험료영수일자 입력기준 변경 (보험RM파트-00043, 2004.01.15 장두원) */
    if (strcmp((char*) stp->retrYn.arr,"Y") == 0) { /* 소급계약 */
      uvTSetS((char*)stp->realFtprRmtnDate.arr, &tyCp,  0, "recpDate#", 0 ); /* I_영수일자 = 초회보험료송금일자 */
    } else {
      uvTSetS((char*)stp->cnttDate.arr        , &tyCp,  0, "recpDate#", 0 ); /* I_영수일자 = 계약일자 */
    }

    uvTSetS((char*)stp->crntDate.arr    , &tyCp, 0, "inptDate#", 0          );
    uvTSetS((char*)addpaymMnth.arr      , &tyCp, 0, "achvYm#", 0            );  /* I_실적산정월 */
    uvTSetS((char*)stp->collLpPrno.arr  , &tyCp, 0, "lpPrno#", 0            );  /* I_처리설계사고유번호 */
    uvTSetS("1"                         , &tyCp, 0, "premAdmnDvsn#", 0      );  /* I_보험료관리구분 */
    uvTSetS((char*)stp->ftprRecvMdcd.arr, &tyCp, 0, "rcwcMetdDvsn#", 0      );  /* I_입출금방법 */
    uvTSetS("1"                         , &tyCp, 0, "prsnGrpDvsn#" , 0      );  /* I_개별/단체구분 */
    uvTSetS("N"                         , &tyCp, 0, "errDlngYn#"   , 0      );  /* I_착오처리구분 */
    uvTSetS("0"                         , &tyCp, 0, "spclRecvCode#", 0      );  /* I_특별입금코드 */
    uvTSetS((char*)stp->recpNo.arr      , &tyCp, 0, "recpNo#"      , 0      );  /* I_영수증번호 */
    uvTSetS((char*)stp->polyNo.arr      , &tyCp, 0, "polyNo#"      , 0      );  /* I_증권번호 */
    uvTSetI(1                           , &tyCp, 0, "frstPyct#"    , 0      );  /* I_초납회 */
    uvTSetI((int)stp->paymCnt           , &tyCp, 0, "itemPyct#"    , 0      );  /* I_종납회 */
    uvTSetS((char*)stp->frstPaymMnth.arr, &tyCp, 0, "paymMnth#"    , 0      );  /* I_납입년월 */
    uvTSetI(1                           , &tyCp, 0, "dmndSeqNo#"   , 0      );  /* I_청구일련번호 */
    uvTSetI(0                           , &tyCp, 0, "addRmtnPrem#" , 0      );  /* I_추가송금보험료 */
    /* 계약원부DB의 합계보험료 변경으로 실입금액이 아닌 원부상 금액으로 데이터가 생성됨. */
    uvTSetI((int   )diff                , &tyCp, 0, "recvPrem#"    , 0      );  /* I_실입금액 */
    uvTSetS((char*)addpaymMnth.arr      , &tyCp, 0, "addpaymMnth#" , 0      );  /* I_추가납입년월 */
    uvTSetI((int   )stp->addPaymPrem    , &tyCp, 0, "addPaymPrem#" , 0      );  /* I_추가납입보험료 */

    uvDebug("I_초납회 = [%d] ", uvTGetI(tyCp, 0, "frstPyct#"    , 0    )  );
    uvDebug("I_종납회 = [%d] ", uvTGetI(tyCp, 0, "itemPyct#"    , 0    )  );
  } CATCH {
    uvDebug("[%s][%d] : [%s]", "SVncapl300in1", __LINE__, uvTGetMessage());
    EXEC SQL ROLLBACK;
    uvDebug("보험료입금처리 함수 호출 오류");
    appReturnCode = 4650;
    CMIS_deleteAll_CC();
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "보험료입금처리 함수 호출 오류", "SVncapl300in1");
  }

  if (CMCP_PremiumInputProc_CC(tyCp) != SUCCESS) {
    EXEC SQL ROLLBACK;
    uvDebug("보험료입금처리 함수 호출 오류");
    appReturnCode = 4650;
    CMIS_deleteAll_CC();
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "보험료입금처리 함수 호출 오류", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_welcomeDreamPremiumInputProc 부분처리 End");

  return;
}



/************************************************************************
  Function Name : SVncapl300in1_dencIisrcvprm001Sp()
  Note          : 웰컴드림(계약이전상품) 이전 금액 입금 생성
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencIisrcvprm001Sp(struct stp_SVncapl300in1 *stp, double *diff, int *lupyYn, int *nlpyYn) {

  uvDebug("SVncapl300in1_dencIisrcvprm001Sp    Start");

  struct _denc_iisrcvprm001_sp_in  inSt;

  int ii = 0;
  double lupyPrem     = 0.0;
  double nlpyPrem     = 0.0;
  double lupyOrigPrem = 0.0;
  double nlpyOrigPrem = 0.0;

  for (ii = 0; ii < stp->cjgCnt; ii++) {

    uvDebug("[%d]웰컴드림납입주기=[%s]",ii,(char *) stp->cjgpytrInqrCode[ii].arr);

    if (strcmp((char *) stp->cjgpytrInqrCode[ii].arr, "N0") == 0) { /* 납입주기 = 일시납 */
      lupyPrem     += stp->cjgprem    [ii];
      lupyOrigPrem += stp->cjgorigPrem[ii];
      (*lupyYn)++;
    } else {
      nlpyPrem     += stp->cjgprem    [ii];
      nlpyOrigPrem += stp->cjgorigPrem[ii];
      (*nlpyYn)++;
    }
  }

  uvDebug("일시납주기=[%d],비일시납주기=[%d]",*lupyYn,*nlpyYn);

  /* 적립형과 거치형이 동시 존재시에만 거치형 데이터 생성         */
  /* 타사이전금액은 보험료구분을 13으로 셋팅하기 위해 무조건 생성(2015.05.18) */
  /*
  if(*lupyYn>0 && *nlpyYn>0) {
    uvDebug("적립형계약 존재, 거치형 입금데이터 생성");
  } else {
    return;
  }
  */

  *diff = stp->fstiRrcvPrem - lupyPrem;

  uvDebug("lupyPrem=[%f],lupyOrigPrem=[%f],nlpyPrem=[%f],nlpyOrigPrem=[%f],diff=[%f],stp->fstiRrcvPrem=[%f]"
          ,lupyPrem,lupyOrigPrem,nlpyPrem,nlpyOrigPrem,*diff,stp->fstiRrcvPrem);

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencIisrcvprm001SpInClear(&inSt);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(inSt.polyNo       , stp->polyNo                       ); /* 증권번호           */
  COPY   (inSt.lastChmnMpno , uvGetUserID()                     ); /* 최종변경자사번     */
  COPY   (inSt.pgmId        , uvGetServiceName()                ); /* 프로그램ID         */
  COPYVAR(inSt.cnttDate     , stp->cnttDate                     ); /* 계약일자           */
  COPYVAR(inSt.clltOrgnCode , stp->clltOrgnCode                 ); /* 모집기관코드       */
  COPY   (inSt.paymCyclCode , "0"                               ); /* 납입주기코드       */
  COPY   (inSt.collMetdCode , "02"                              ); /* 수금방법코드       */
          inSt.origPrem     = lupyOrigPrem                       ; /* 원보험료           */
          inSt.prem         = lupyPrem                           ; /* 보험료             */
  COPY   (inSt.pyctErrYn    , "N"                               ); /* 납회착오유무       */
  COPY   (inSt.rcwcMetdDvsn , "82"                              ); /* 입출금방법구분     */
  COPY   (inSt.recvDlngDvsn , "1"                               ); /* 입금처리구분       */
  COPY   (inSt.paymStatDvsn , "1"                               ); /* 납입상태구분       */
  COPY   (inSt.premKindDvcd , "13"                              ); /* 보험료종류구분코드 */

  uvDebug("증권번호          =[%s]", (char *) inSt.polyNo      .arr);
  uvDebug("최종변경자사번    =[%s]", (char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID        =[%s]", (char *) inSt.pgmId       .arr);
  uvDebug("계약일자          =[%s]", (char *) inSt.cnttDate    .arr);
  uvDebug("모집기관코드      =[%s]", (char *) inSt.clltOrgnCode.arr);
  uvDebug("납입주기코드      =[%s]", (char *) inSt.paymCyclCode.arr);
  uvDebug("수금방법코드      =[%s]", (char *) inSt.collMetdCode.arr);
  uvDebug("원보험료          =[%f]",          inSt.origPrem        );
  uvDebug("보험료            =[%f]",          inSt.prem            );
  uvDebug("납회착오유무      =[%s]", (char *) inSt.pyctErrYn   .arr);
  uvDebug("입출금방법구분    =[%s]", (char *) inSt.rcwcMetdDvsn.arr);
  uvDebug("입금처리구분      =[%s]", (char *) inSt.recvDlngDvsn.arr);
  uvDebug("납입상태구분      =[%s]", (char *) inSt.paymStatDvsn.arr);
  uvDebug("보험료종류구분코드=[%s]", (char *) inSt.premKindDvcd.arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */
  dencIisrcvprm001Sp(&basicParam,&inSt);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_IISRCVPRM001_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DENC_IISRCVPRM001_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("SVncapl300in1_dencIisrcvprm001Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencUisaplctt002Sp()
  Note          : 계약 테이블 합계보험료,합계원보험료 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencUisaplctt002Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_uisaplctt_002_sp_in  inSt;

  uvDebug("SVncapl300in1_dencUisaplctt002Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencUisaplctt002SpInClear(&inSt);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(inSt.polyNo,   stp->polyNo);              /* 증권번호 */

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */
  dencUisaplctt002Sp(&basicParam,&inSt);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_UISAPLCTT_002_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DENC_UISAPLCTT_002_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("계약 테이블 합계보험료,합계원보험료 수정");
    appReturnCode = 3425;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "계약 테이블 합계보험료,합계원보험료 수정에러", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_dencUisaplctt002Sp End");

  return;
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in58Sp()
  Note          : 계약인수 처리 완료 여부 조회
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in58Sp(struct stp_SVncapl300in1 *stp) {

  char* fnName1 = "SVncapl300in1_dencApl300in58Sp";

  uvDebug("%s start", fnName1);

  /* 변수선언 */
  struct _denc_apl300in58_sp_in  inSt;
  struct _denc_apl300in58_sp_out outSt;

  /* 초기화 */
  dencApl300in58SpInClear(&inSt);
  dencApl300in58SpOutClear(&outSt);

  setInitDBIO(1, DBCURSOR_CLOSE);

  /* 변수대입 */
  COPYVAR(inSt.polyNo, stp->polyNo);

  uvDebug("* [%s] polyNo = [%s]", fnName1, (char *) inSt.polyNo.arr);

  /* DBIO 실행 */
  dencApl300in58Sp(&basicParam, &inSt, &outSt);

  /* DBIO 실행결과 확인 */
  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    dencApl300in49SpClose();
    uvDebug("DBIO(DENC_APL300IN58_SP) 호출 Error[%d], %s",cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN58_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("* [%s] procYn = [%s]", fnName1, (char *) outSt.procYn.arr);

  if (strcmp((char *) outSt.procYn.arr, "Y" ) == 0 ) {

    EXEC SQL ROLLBACK;
    uvDebug("동일 이전계약정보 기사용 중복접수 불가");
    appReturnCode = 4899;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "동일 이전계약정보 기사용 중복접수 불가", "SVncapl300in1");
  }

  uvDebug("%s End ", fnName1);

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_presidentChck()
  Note          : 프레지던트 제한 사항 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_presidentChck(struct stp_SVncapl300in1 *stp) {

  char    coupleYn   [1+1];                 /* 부부CARE 대상 여부 */

  int retCnt = 0;

  uvDebug("SVncapl300in1_presidentChck    Start");

  /* 부부CARE서비스 대상 여부 조회 */
  SVncapl300in1_dencApl100in57Sp(stp, coupleYn);

  if (strcmp(coupleYn, "N") == 0) {
    uvDebug("부부CARE서비스 대상 아님");
    return;
  }

  /* 연계증번의 연관관계 및 계약상태 체크 */
  SVncapl300in1_dencApl300in59Sp(stp,&retCnt);

  /* 연계증번의 계약상태가 발행 상태인 경우만 생성 */
  if(retCnt==0) {
    SVncapl300in1_dcncApl100in11Sp(stp);
  } else {
    uvDebug("계약간 관계 DATA 기 생성");
  }

  uvDebug("SVncapl300in1_presidentChck    End");

  return;
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in59Sp()
  Note          : 프레지던트 연계계약 정보 조회
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in59Sp(struct stp_SVncapl300in1 *stp, int *retCnt) {

  char* fnName1 = "SVncapl300in1_dencApl300in59Sp";

  uvDebug("%s start", fnName1);

  /* 변수선언 */
  struct _denc_apl300in59_sp_in  inSt;
  struct _denc_apl300in59_sp_out outSt[DENC_APL300IN59_SP_RQSIZE];

  int ii = 0;

  /* 초기화 */
  dencApl300in59SpInClear(&inSt);
  dencApl300in59SpOutClear(outSt,DENC_APL300IN59_SP_RQSIZE);

  setInitDBIO(DENC_APL300IN59_SP_RQSIZE, DBCURSOR_CLOSE);

  /* 변수대입 */
  COPYVAR(inSt.mainPolyNo  , stp->polyNo    ); /* 주증권번호   */
  COPYVAR(inSt.scndPolyNo  , stp->connPolyNo); /* 종증권번호   */
  COPYVAR(inSt.crntCnttDate, stp->cnttDate  ); /* 현재계약일자 */

  uvDebug("* [%s] mainPolyNo   = [%s]", fnName1, (char *) inSt.mainPolyNo  .arr);
  uvDebug("* [%s] scndPolyNo   = [%s]", fnName1, (char *) inSt.scndPolyNo  .arr);
  uvDebug("* [%s] crntCnttDate = [%s]", fnName1, (char *) inSt.crntCnttDate.arr);

  /* DBIO 실행 */
  dencApl300in59Sp(&basicParam, &inSt, outSt);

  /* DBIO 실행결과 확인 */
  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    dencApl300in49SpClose();
    uvDebug("DBIO(DENC_APL300IN59_SP) 호출 Error[%d], %s",cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN59_SP) 호출 Error.", getCDALErrMsg());
  }

  /* 처리건수 */
  *retCnt = basicParam.rpSize;

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    uvDebug("주.종번 모두 접수 처리 전");

    return;
  }

  for(ii=0;ii<basicParam.rpSize;ii++) {
    uvDebug("* dvsn         = [%s]", (char *) outSt[ii].dvsn        .arr); /* 구분 */
    uvDebug("* mainPolyNo   = [%s]", (char *) outSt[ii].mainPolyNo  .arr); /* 주증번 */
    uvDebug("* scndPolyNo   = [%s]", (char *) outSt[ii].scndPolyNo  .arr); /* 종증번 */
    uvDebug("* cnttStatCode = [%s]", (char *) outSt[ii].cnttStatCode.arr); /* 계약상태코드 */
    uvDebug("* cnttDate     = [%s]", (char *) outSt[ii].cnttDate    .arr); /* 계약일자 */
  }

  /* CASE 1. 주증번의 종증번과 선택된 종증번 상이 */
  if (strcmp((char *) outSt[0].mainPolyNo.arr, (char *) outSt[1].scndPolyNo.arr ) != 0 ) {

    EXEC SQL ROLLBACK;
    uvDebug("주증번의 종증번과 선택된 종증번이 상이합니다.");
    appReturnCode = 4899;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "주증번의 종증번이 입력증번과 다릅니다.", "SVncapl300in1");
  }

  /* CASE 2. 주.종증번의 연계증번이 상이할 경우 처리 제한 */
  if (strcmp((char *) outSt[0].mainPolyNo.arr, (char *) outSt[1].scndPolyNo.arr ) != 0 ) {

    EXEC SQL ROLLBACK;
    uvDebug("종증번의 주증번과 선택된 주증번이 상이합니다.");
    appReturnCode = 4899;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "종증번의 주증번과 선택된 주증번이 상이합니다.", "SVncapl300in1");
  }

  /* CASE 3. 종증번의 계약상태가 발행,접수,유지,완납 상태가 아닌 경우 처리 제한 */
  if (strcmp((char *) outSt[0].cnttStatCode.arr, "6") == 0 ||
      strcmp((char *) outSt[0].cnttStatCode.arr, "7") == 0 ||
      strcmp((char *) outSt[0].cnttStatCode.arr, "1") == 0 ||
      strcmp((char *) outSt[0].cnttStatCode.arr, "2") == 0 ) {
    uvDebug("종증번의 계약상태가 처리가능 상태입니다.");
  } else {

    EXEC SQL ROLLBACK;
    uvDebug("종증번의 계약상태가 처리불가 상태입니다.");
    appReturnCode = 4899;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "종증번의 계약상태가 처리불가 상태입니다.", "SVncapl300in1");
  }

  /* CASE 4. 계약일자가 상이할 경우 처리 제한 */
  if (strcmp((char *) outSt[0].cnttDate.arr, (char *) outSt[1].cnttDate.arr ) != 0 ) {

    EXEC SQL ROLLBACK;
    uvDebug("주증번과 종증번의 계약일자가 상이합니다.");
    appReturnCode = 4899;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "주증번과 종증번의 계약일자가 상이합니다.", "SVncapl300in1");
  }

  uvDebug("%s End ", fnName1);

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_dcncApl100in11Sp()
  Note          : 계약간관계 저장(프레지던트 보종 전용)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl100in11Sp(struct stp_SVncapl300in1 *stp) {

  struct _dcnc_apl100in11_sp_in  dcncApl100in11SpIn;

  int ii = 0;

  uvDebug("SVncapl300in1_dcncApl100in11Sp  Start");

  /* 주.종증번 CROSS 저장 */
  for (ii = 0; ii < 2; ii++) {

    /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
    dcncApl100in11SpInClear(&dcncApl100in11SpIn);

    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPY   (dcncApl100in11SpIn.cnttBwtnRlcd ,   "6"              ); /* 계약간관계코드 */

    if(ii==0) {
      COPYVAR(dcncApl100in11SpIn.mainPolyNo   ,   stp->polyNo      ); /* 주증권번호     */
      COPYVAR(dcncApl100in11SpIn.scndPolyNo   ,   stp->connPolyNo  ); /* 종증권번호     */
    } else {
      COPYVAR(dcncApl100in11SpIn.mainPolyNo   ,   stp->connPolyNo  ); /* 주증권번호     */
      COPYVAR(dcncApl100in11SpIn.scndPolyNo   ,   stp->polyNo      ); /* 종증권번호     */
    }

    COPY   (dcncApl100in11SpIn.udtkCmpnDvsn ,   "1"              ); /* 인수회사구분   */
    COPYVAR(dcncApl100in11SpIn.strtDate     ,   stp->cnttDate    ); /* 시작일자       */
    COPY   (dcncApl100in11SpIn.endDate      ,   "99991231"       ); /* 종료일자       */
    COPY   (dcncApl100in11SpIn.delYn        ,   "N"              ); /* 삭제여부       */

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(1,DBCURSOR_CLOSE);

    /* DBIO module 호출                                             */

    dcncApl100in11Sp(&basicParam,&dcncApl100in11SpIn);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROLLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DCNC_APL100IN11_SP) 호출 Error[%d], %s",\
                           cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                             "DBIO(DCNC_APL100IN11_SP) 호출 Error.",  \
                             getCDALErrMsg());
    }

    /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  }

  uvDebug("SVncapl300in1_dcncApl100in11Sp  End");
  return;
}

/************************************************************************
  Function Name : SVncapl300in1_callSVncudw160in()
  Note          : HUROS심사 서비스 호출
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int SVncapl300in1_callSVncudw160in(struct stp_SVncapl300in1 *stp)
{
    FBFR32 *sndbuf;
    char   *service = "SVncudw160in";
    int    ret;

    char *userID = uvGetUserID();
    varchar dhrBuf[1024];
    varchar jugmBsnsDvsn [2+1];
    varchar jugmOccrCano [4+1];
    varchar outYn        [1+1];
    varchar debugYn      [1+1];
    varchar updateYn     [1+1];

    int retCodet = 0;

    /*--  HUROS 처리여부 ----*/
    char retVal1[MAX_VALUE_LEN];
    char retVal2[MAX_VALUE_LEN];

    /*----- HUROS 외부전문 처리여부 -----*/
    char outVal1[MAX_VALUE_LEN];
    char outVal2[MAX_VALUE_LEN];

    /*----- HUROS  원부수정여부  -----*/
    char udtVal1[MAX_VALUE_LEN];
    char udtVal2[MAX_VALUE_LEN];

    uvDebug("SVncapl300in1_callSVncudw160in    Start");

    INITVAR(jugmBsnsDvsn);
    INITVAR(jugmOccrCano);
    INITVAR(outYn       );
    INITVAR(debugYn     );
    INITVAR(updateYn    );

    memset(retVal1, 0x00, sizeof(retVal1));
    memset(retVal2, 0x00, sizeof(retVal2));

    retCodet = uvRuleBase("NC_procSkip", "","7",retVal1,retVal2);

    if (retCodet != 0) {
      EXEC SQL ROLLBACK;
      uvDebug("(NC_procSkip) 룰호출 오류[%d]", retCodet);
      SVC_CLOSE(APPERR, 4899, 0, "(NC_procSkip) 룰호출 오류", fnName);
    }
    uvDebug("[%s] ==> [%s]", retVal2, retVal1);

    if (strcmp(retVal1, "N")==0) {
      uvDebug("HUROS 미처리 ==> [%s]", stp->polyNo.arr);
      return SUCCESS;
    }

    memset(outVal1, 0x00, sizeof(outVal1));
    memset(outVal2, 0x00, sizeof(outVal2));

    retCodet = uvRuleBase("NC_procSkip", "","8",outVal1,outVal2);

    if (retCodet != 0) {
      EXEC SQL ROLLBACK;
      uvDebug("(NC_procSkip) 룰호출 오류[%d]", retCodet);
      SVC_CLOSE(APPERR, 4899, 0, "(NC_procSkip) 룰호출 오류", fnName);
    }
    uvDebug("[%s] ==> [%s]", outVal2, outVal1);

    COPY(jugmBsnsDvsn , "US"   );
    COPY(jugmOccrCano , "0000" );
    COPY(outYn        , outVal1);
    COPY(debugYn      , "N"    );  /* 디버그여부 */

    memset(udtVal1, 0x00, sizeof(udtVal1));
    memset(udtVal2, 0x00, sizeof(udtVal2));
    retCodet = uvRuleBase("NC_procSkip", "","9",udtVal1,udtVal2);
    if (retCodet != 0) {
      EXEC SQL ROLLBACK;
      uvDebug("(NC_procSkip) 룰호출 오류[%d]", retCodet);
      SVC_CLOSE(APPERR, 4899, 0, "(NC_procSkip) 룰호출 오류", fnName);
    }
    uvDebug("[%s] ==> [%s]", udtVal2, udtVal1);

    COPY(updateYn     , udtVal1  );  /* 계약심사수정여부 */

    GETVAR(DHR, 0, dhrBuf);

    if ((sndbuf = (FBFR32 *)tpalloc("FML32", NULL, 75000)) == NULL)
    {
        uvDebug("Failure to allocate FML32 buffer -- %s\n", tpstrerror(tperrno));
        return FAIL;
    }

    YPUTVAR( sndbuf, DHR       , 0, dhrBuf            );  /* DHR             */
    YPUTVAR( sndbuf, MM_STR_001, 0, stp->polyNo       );  /* 증권번호        */
    YPUTVAR( sndbuf, MM_STR_002, 0, jugmBsnsDvsn      );  /* 심사업무구분    */
    YPUTVAR( sndbuf, MM_STR_003, 0, jugmOccrCano      );  /* 심사발생원인번호*/
    YPUTVAR( sndbuf, MM_STR_004, 0, outYn             );  /* 외부정보포함여부*/
    YPUTVAR( sndbuf, MM_STR_005, 0, debugYn           );  /* 디버그여부      */
    YPUT   ( sndbuf, MM_DOU_006, 0, stp->lmitAmtA01[1]);  /* 합산제한금액_재해사망*/
    YPUTVAR( sndbuf, MM_STR_007, 0, updateYn          );  /* 계약심사수정여부     */

    uvDebug("HUROS심사 Service Call-service[%s],userID[%s]",service,userID);

    /* HUROS심사 Service(SVncudw160in) Call 단, 응답은 받지 않는다. */
    ret = tpacall(service, (char *)sndbuf, 0, TPNOREPLY);
    if (ret < 0)
    {
        uvDebug("Can't send request to service %s: %s\n", service, tpstrerror(tperrno));
        tpfree((char *)sndbuf);
        return FAIL;
    }

    /* 처리결과에 상관없이 반드시 메모리를 해제 한다. */
    tpfree((char *)sndbuf);

    uvDebug("SVncapl300in1_callSVncudw160in    End");

    return SUCCESS;
}


/************************************************************************
  Function Name : SVncapl300in1_imtrAnntJoinLmitChck()
  Note          : 방카제휴기관별 바로연금 가입한도금액 초과여부 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_imtrAnntJoinLmitChck(struct stp_SVncapl300in1 *stp) {

  uvDebug("방카제휴기관별 바로연금 가입한도금액 초과여부 체크 START");

  double  joinLmitPrem    =   0;
  double  accuSumPrem     =   0;
  char    lmitExcdYn[MAX_VALUE_LEN];                     /* 한도제한초과여부 */
  char    err_msg[200+1];

  int     retval = 0;

  memset(lmitExcdYn  , 0x00, sizeof(lmitExcdYn));
  memset(err_msg     , 0x00, sizeof(err_msg));

  uvDebug("stp->clltOrgnCode=[%s]", (char *) stp->clltOrgnCode.arr);
  uvDebug("stp->cnttConcYm  =[%s]", (char *) stp->cnttConcYm  .arr);
  uvDebug("stp->irkdCodeDtal=[%s]", (char *) stp->irkdCodeDtal.arr);
  uvDebug("stp->irkdCodeItem=[%s]", (char *) stp->irkdCodeItem.arr);
  uvDebug("stp->sumOrigPrem =[%f]",          stp->sumOrigPrem     );

  /*  방카제휴기관별 바로연금 가입 한도 금액 */
  retval = uvRuleBase("NC_imtrAnntJoinLmit", "", (char *) stp->clltOrgnCode.arr
                                               , (char *) stp->cnttConcYm  .arr
                                               , (char *) stp->irkdCodeDtal.arr
                                               , (char *) stp->irkdCodeItem.arr
                                               ,          stp->sumOrigPrem
                                               , &joinLmitPrem
                                               , &accuSumPrem
                                               , lmitExcdYn);

  if (retval != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("방카제휴기관별 바로연금 가입한도금액 조회(NC_imtrAnntJoinLmit) 호출오류");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "방카제휴기관별 바로연금 가입한도금액 조회(NC_imtrAnntJoinLmit) 호출오류", "SVncapl300in1");
  }

  uvDebug("가입한도금액=[%f],누적합계금액=[%f],한도제한초과여부= [%s]", joinLmitPrem, accuSumPrem, lmitExcdYn);

  /* 한도초과시 에러처리 */
  if (strcmp(lmitExcdYn, "Y")==0) {

    EXEC SQL ROLLBACK;
    uvDebug("방카제휴기관별 바로연금 가입한도금액 초과");
    appReturnCode = 4899;
    snprintf(err_msg, sizeof(err_msg),"(한도:%f),(가입:%f)한도초과",joinLmitPrem,accuSumPrem);
    uvDebug("==> %s", err_msg);
    SVC_CLOSE(APPERR, appReturnCode, 0, err_msg, "SVncbnc311in");
  }

  uvDebug("방카제휴기관별 바로연금 가입한도금액 초과여부 체크 E N D");
}



/************************************************************************
  Function Name : SVncapl300in1_mdm_getPersonUpdate()
  Note          : 계약고객상태변경  SVncapl300in1_mdm_getPersonUpdate
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_mdm_getPersonUpdate(struct stp_SVncapl300in1 *stp)
{
  int   ii, jj , kk;                     /* in_occurcnce 첨자            */
  /* 미사용변수제거
  char *message;
  char *custIds[10] = {0};
  char *wrspLpno;
  */
  char str[10+1];
  char *trimStr;
  int skipFlag = 0;
  int idx = -1;

  /* 고객통합 MDM soap 서비스 호출부 2013.03.21  */
  mdm_open("SVncapl300in1", uvGetUserID());
  mdm_Person person = {0};
  mdm_Person person_update;

  uvDebug("SVncapl300in1_mdm_getPersonUpdate Start");

  /* 가족관계 */
  stp->syncCnt = 0;

  for (ii = 0; ii < stp->crmCnt; ii++) {

    /* 태아 제외 */
    if(strncmp((char *) stp->custId[ii].arr, "8009999998", 10) == 0) {
      uvDebug("태아 제외. 고객ID = [%s]", (char *) stp->custId[ii].arr);
      continue;
    }

    uvDebug("[%d]고객 arr=[%s]",ii,(char*) stp->custRrno[ii].arr);
    uvDebug("[%d]고객 len=[%d]",ii,strlen((char*) stp->custRrno[ii].arr));

    memset(str, 0x00, sizeof(str));
    strcpy(str, (char *) stp->custRrno[ii].arr); //고객 주민번호 or 사업자번호
    uvDebug("[%d]계약,피보험자 TRIM 처리전 str=[%s]",ii,str);
    trimStr = ST_Trim(str);
    uvDebug("[%d]계약,피보험자 TRIM 처리후 str=[%s]",ii,trimStr);

    if(strlen(trimStr)==13) {

      skipFlag = 0;

      for(kk = 0; kk< stp->syncCnt; kk++) {
        if(strcmp((char *) stp->custId[ii].arr,(char *) stp->syncCustId[kk].arr)==0) {

          skipFlag = 1;
          break;
        }
      }

      if(skipFlag==1) {
        uvDebug("이미 셋팅된 가족관계 고객ID = [%s]", (char *) stp->custId[ii].arr);
        continue;
      }

      /* 업데이트 조건 MOVE */
      strcpy(person.custId,  (char *) stp->custId      [ii].arr   );     //고객ID

      uvDebug("mdm 서비스 호출 시작 관계자  =====>[%s]", person.custId );

      if(mdm_getPerson(&person, 2)) { /* 업데이트를 위한 고객 기본정보 조회(2:상세정보) */
        uvDebug("copy for mdm_getPerson 호출 실패 (%s)\n", mdm_getMessage());
        SVC_CLOSE(TUXERR, 10, tperrno, tpstrerror(tperrno), "SVncapl300in1");
      }

      uvDebug("mdm 서비스 호출 시작 mdm_copyPerson =====>[%s]", person.custId );

      mdm_copyPerson(&person, &person_update, 1); // 업데이트 처리를 위한 복제본 생성

      uvDebug("mdm 서비스 호출 종료 mdm_copyPerson =====>[%s]", person.custId );

      //고객상태 변경
      strcpy(person_update.status , "20");

      idx = -1;

      for (jj = 0; jj < stp->cinCustCnt; jj++) {
        /* 계약자,주피만 처리 */
        if((strcmp((char *) stp->custRoleCode[ii].arr, "11") == 0 ||
            strcmp((char *) stp->custRoleCode[ii].arr, "21") == 0)  &&
           strcmp((char *) stp->custId[ii].arr,(char *) stp->cinCustId[jj].arr) == 0) {
          idx = jj;

          break;
        }
      }

      /* 동의대상인 경우만 UPDATE 처리 */
      if(idx > -1) {

        /* 문자 수신 동의 Update */
        if(strlen((char *) stp->AgreSmsAgYn[jj].arr) > 0) {
          strcpy(person_update.recvYn  [2], (char *) stp->AgreSmsAgYn  [jj].arr); /* 핸드폰번호_수신여부 */
        }

        /* 이메일 수신 동의 Update */
        if(strlen((char *) stp->AgreEmailAgYn[jj].arr) > 0) {
          strcpy(person_update.recvYn  [0], (char *) stp->AgreEmailAgYn[jj].arr); /* 이메일1_수신여부 */
        }
      }

      uvDebug("*****************UpdatePerson 호출 전*****************");
      if (mdm_updatePerson(&person, &person_update)) {
         uvDebug("update for mdm_updatePerson 호출 실패 (%s)\n", mdm_getMessage());
          SVC_CLOSE(TUXERR, 10, tperrno, tpstrerror(tperrno), "SVncapl300in1");
      }
      uvDebug("*****************UpdatePerson 호출 완료*****************");

      COPY(stp->syncCustId[stp->syncCnt],         person.custId);
      uvDebug("person.custId ======= [%s]",       person.custId);
      uvDebug("싱크고객아이디     ===[%s]",      (char *) stp->syncCustId  [stp->syncCnt].arr );

      stp->syncCnt++;
      uvDebug("싱크고객아이디 수 ===[%d]", stp->syncCnt);

      /* 동의대상인 경우만 가망고객 상세정보 수정 */
      if(idx > -1) {
        SVncapl300in1_dencUmascm020004Sp(stp, jj);
      }
    }
  }

  /* 수익자 */

  for (jj = 0; jj < stp->bnfCnt; jj++) {
    /* 법적상속인 제외 */
    if(strncmp((char *) stp->bnfccustId[jj].arr, "9009999999", 10) == 0) {
      uvDebug("법적상속인 제외. 고객ID = [%s]", (char *) stp->bnfccustId[jj].arr);
      continue;
    }

    uvDebug("[%d]고객 arr=[%s]",jj,(char*) stp->bnfccustRrno[jj].arr);
    uvDebug("[%d]고객 len=[%d]",jj,strlen((char*) stp->bnfccustRrno[jj].arr));

    memset(str, 0x00, sizeof(str));
    strcpy(str, (char *) stp->bnfccustRrno[jj].arr); //고객 주민번호 or 사업자번호
    uvDebug("[%d]수익자 TRIM 처리전 str=[%s]",jj,str);
    trimStr = ST_Trim(str);
    uvDebug("[%d]수익자 TRIM 처리후 str=[%s]",jj,trimStr);

    if(strlen(trimStr)==13 ) {

      skipFlag = 0;

      for(kk = 0; kk< stp->syncCnt; kk++) {
        if(strcmp((char *) stp->bnfccustId[jj].arr,(char *) stp->syncCustId[kk].arr)==0) {

          skipFlag = 1;
          break;
        }
      }

      if(skipFlag==1) {
        uvDebug("이미 셋팅된 수익자 고객ID = [%s]", (char *) stp->bnfccustId[jj].arr);
        continue;
      }

      /* 업데이트 조건 MOVE */
      strcpy(person.custId,  (char *) stp->bnfccustId      [jj].arr   );     //고객ID

      uvDebug("mdm 서비스 호출 시작  수익자  =====>[%s]", person.custId );

      if(mdm_getPerson(&person, 2)) { /* 업데이트를 위한 고객 기본정보 조회(2:상세정보) */
        uvDebug("copy for mdm_getPerson 호출 실패 (%s)\n", mdm_getMessage());
         SVC_CLOSE(TUXERR, 10, tperrno, tpstrerror(tperrno), "SVncapl300in1");
      }

      uvDebug("mdm 서비스 호출 시작 mdm_copyPerson =====>[%s]", person.custId );

      mdm_copyPerson(&person, &person_update, 1); // 업데이트 처리를 위한 복제본 생성

      uvDebug("mdm 서비스 호출 종료 mdm_copyPerson =====>[%s]", person.custId );

      //고객상태 변경
      strcpy(person_update.status , "20");

      uvDebug("*****************UpdatePerson 호출 전*****************");
      if (mdm_updatePerson(&person, &person_update)) {
         uvDebug("update for mdm_updatePerson 호출 실패 (%s)\n", mdm_getMessage());
          SVC_CLOSE(TUXERR, 10, tperrno, tpstrerror(tperrno), "SVncapl300in1");
      }
      uvDebug("*****************UpdatePerson 호출 완료*****************");

      COPY(stp->syncCustId[stp->syncCnt],         person.custId);
      uvDebug("person.custId ======= [%s]",       person.custId);
      uvDebug("싱크고객아이디     ===[%s]",      (char *) stp->syncCustId  [stp->syncCnt].arr );

      stp->syncCnt++;
      uvDebug("싱크고객아이디 수 ===[%d]", stp->syncCnt);
    }
  }

  uvDebug("SVncapl300in1_mdm_getPersonUpdate End");

  return;

}

/******************************************************************************
  Function Name : SVncapl300in1_xtrmOccrChck ()
  Note          : 과부족 발생기관 여부 체크
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int SVncapl300in1_xtrmOccrChck (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_xtrmOccrChck";

  struct _denc_apl300in60_sp_in  inSt;
  struct _denc_apl300in60_sp_out outSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in60SpInClear (&inSt);
  dencApl300in60SpOutClear(&outSt);

  COPYVAR(inSt.clltOrgnCode , stp->clltOrgnCode);/* 모집기관코드 */
  COPYVAR(inSt.cnttDate     , stp->cnttDate    );/* 계약일자     */

  uvDebug("모집기관코드 = [%s]",(char *) inSt.clltOrgnCode.arr);
  uvDebug("계약일자     = [%s]",(char *) inSt.cnttDate    .arr);

  dencApl300in60Sp(&basicParam, &inSt, &outSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {

    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN60_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN60_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

  if (strncmp((char *)outSt.objtYn.arr, "Y", 1) == 0) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/******************************************************************************
  Function Name : SVncapl300in1_virtualAcctChck ()
  Note          : 기관별 가상계좌 잔고 체크
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int SVncapl300in1_virtualAcctChck (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_virtualAcctChck";

  struct _denc_apl300in61_sp_in  inSt;
  struct _denc_apl300in61_sp_out outSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in61SpInClear (&inSt);
  dencApl300in61SpOutClear(&outSt);

  COPYVAR(inSt.orgnCode , stp->clltOrgnCode);/* 기관코드 */
  COPYVAR(inSt.stddDate , stp->cnttDate    );/* 기준일자 */

  uvDebug("기관코드 = [%s]",(char *) inSt.orgnCode.arr);
  uvDebug("기준일자 = [%s]",(char *) inSt.stddDate.arr);

  dencApl300in61Sp(&basicParam, &inSt, &outSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {

    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN61_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN61_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

  /* 초회 실입보험료 보다 잔고가 많은 경우에만 처리 가능 */
  if (stp->fstiRrcvPrem<=outSt.acctBalnAmt) {
    return SUCCESS;
  } else {
    return FAIL;
  }
}


/******************************************************************************
 * Function Name : SVncapl300in1_procSkip()                                   *
 * Note          : 가상계좌잔고체크 Skip 여부                                 *
 * Parameters    :                                                            *
 * Return Value  : NONE                                                       *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int    SVncapl300in1_procSkip (char * skipYn) {

  char     *fnName1     = "SVncapl300in1_procSkip";

  uvDebug("%s Start", fnName1);

  /* 처리 제외 대상 여부 조회 */
  char    procDvsn  [2+1];            /* 가입구분 */
  char    procSkipYn[MAX_VALUE_LEN];  /* 대상여부 */
  char    procName  [MAX_VALUE_LEN];  /* 작업명   */

  memset(procDvsn   , 0x00, sizeof(procDvsn));
  memset(procSkipYn , 0x00, sizeof(procSkipYn));
  memset(procName   , 0x00, sizeof(procName));

  /* procDvsn='10' 가상계좌잔고체크 Skip 여부 */
  strncpy(procDvsn, "10", 2);
  uvDebug("procDvsn       = [%s]", procDvsn);

  int retCode = uvRuleBase("NC_procSkip","",
                            procDvsn,
                            procSkipYn,
                            procName);

  uvDebug("NC_procSkip's Skip여부=[%s],대상업무[%s]",procSkipYn,procName);

  if (retCode != 0) {

    uvDebug("NC_procSkip 호출 중 ERROR");

    return FAIL;
  }

  strncpy(skipYn,procSkipYn,1);

  uvDebug("[%s] end", fnName1);

  return SUCCESS;
}


/************************************************************************
  Function Name : SVncapl300in1_growupChck()
  Note          : 육성센터 처리자 여부 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int SVncapl300in1_growupChck(char *lpPrno, char *cnttDate) {

  char *fnName1 = "SVncapl300in1_growupChck";

  uvDebug("[%s] begin ",fnName1);

  char origPstnOgcd[5+1];       /* 원소속기관코드 */
  char workPstnOgcd[5+1];       /* 근무소속기관코드 */

  memset(origPstnOgcd,0x00,sizeof(origPstnOgcd));
  memset(workPstnOgcd,0x00,sizeof(workPstnOgcd));

  if (CMNC_growupCenterSrch_CC(lpPrno,cnttDate,origPstnOgcd,workPstnOgcd) == FAIL)
  {
    EXEC SQL ROLLBACK;
    SVC_CLOSE(NCST_ModlRetur3.errorComponent,
        NCST_ModlRetur3.appReturnCode,
        NCST_ModlRetur3.cptReturnCode,
        NCST_ModlRetur3.userDefineMsg,
        NCST_ModlRetur3.functionName);
  }

  if(strcmp(workPstnOgcd,uvGetUserOrgCode())!=0) {

    uvDebug("[%s] end FAIL",fnName1);

    return FAIL;
  }

  uvDebug("[%s] end SUCCESS",fnName1);

  return SUCCESS;
}

/******************************************************************************
  Function Name : SVncapl300in1_kNet_ProcReport ()
  Note          : 대표 내근 여직원에게 K.net 내부 메일 발송
  Parameters    :
  Return Value  : TRUE  : 정상
                  FALSE : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int     SVncapl300in1_kNet_ProcReport(char *polyNo) {

  /* 알림메세지 발송                                                        */
  struct _dcuv_alrins001_sp_in   dcuvAlrins001SpIn;

  struct _denc_apl300in62_sp_in  dencApl300in62SpIn;                    /* IN */
  struct _denc_apl300in62_sp_out dencApl300in62SpOut[DENC_APL300IN62_SP_RQSIZE]; /* OUT */

  char    today_dateTime[20 + 1];                             /* 현재날짜시간 */
  char    today_date[8 + 1];                                      /* 현재날짜 */
  char    today_time[8 + 1];                                      /* 현재시간 */
  char    before_date[8 + 1];                                     /* 전영업일 */
  char    after_date[8 + 1];                                      /* 익영업일 */
  int     ii;

  /*------------------------------------------------------------------------*
   * 사용할 데이터 변수 초기화
   *------------------------------------------------------------------------*/
  /* DBIO INPUT 변수들을 clear시킨다                                        */
  dencApl300in62SpInClear(&dencApl300in62SpIn);

  /*------------------------------------------------------------------------*
   * DBIO 호출 변수 Setting
   *------------------------------------------------------------------------*/
  COPY   (dencApl300in62SpIn.polyNo, polyNo);             /* 증권번호 */

  if (SVncapl300in1_DENC_APL300IN62(&dencApl300in62SpIn,dencApl300in62SpOut) == FALSE) {
    return FALSE;
  }

  /*-- 현재작업일시 --------------------------------------------------------*/
  ii = uvGetTime(1, today_dateTime);                    /* 1 : yyyymmddhhMMss */
  uvDebug("today_dateTime = [%s]", today_dateTime);
  if (ii < 0) {                                                       /* 오류 */
    uvDebug("현재 날짜/시간(uvGetTime) error");
    return FALSE;
  }

  sprintf(today_date, "%8.8s", today_dateTime);
  uvDebug("today_date = [%s]", today_date);

  sprintf(today_time, "%6.6s", today_dateTime + 8);
  uvDebug("today_time = [%s]", today_time);

  /* 주5일근무시휴일 (토/일/공휴일)                              */
  if (CMUV_getBizDay_CC(today_date, 4, before_date, after_date) < 0) {
    uvDebug("전후영업일산출(CMUV_getBizDay_CC) error");
    return FALSE;
  }

  /* 알림메세지 처리 */
  COPY   (dcuvAlrins001SpIn.sndrMpno     , uvGetUserID()            ); /* 발신자사번 */
  COPY   (dcuvAlrins001SpIn.titl         , "육성센터 계약 접수 안내"); /* 제목 */
  (       dcuvAlrins001SpIn.ctenGrad     = 1                        ); /* 내용등급 0:일반,1:긴급 */
  COPY   (dcuvAlrins001SpIn.notiStdt     , today_date               ); /* 게시시작일자 */
  COPY   (dcuvAlrins001SpIn.notiEndt     , after_date               ); /* 게시종료일자 */
  COPY   (dcuvAlrins001SpIn.url          , ""                       ); /* URL */
  COPY   (dcuvAlrins001SpIn.relvBsnsName , "화면 바로가기"          ); /* 링크명 */
  (       dcuvAlrins001SpIn.recvDvsn     = 0                        ); /* 수신구분 0:개인,1:기관 */

  /* 수신자 List 없음 알림                                                    */
  if (strcmp((char *) dencApl300in62SpOut[0].smsSendYn.arr, "N") == 0) {
    COPY(dcuvAlrins001SpIn.cten, "육성센터 계약 접수 안내 수신자 부재");   /* 내용 */
    COPY(dcuvAlrins001SpIn.rcptList, uvGetUserID());   /* 수신자사번 or 소속기관 */
  } else {
    COPYVAR(dcuvAlrins001SpIn.cten, dencApl300in62SpOut[0].alrimMsg); /* 내용 */
    COPYVAR(dcuvAlrins001SpIn.rcptList, dencApl300in62SpOut[0].recpList); /* 수신자사번 or 소속기관 */
  }

  SVncapl300in1_DCUV_ALRINS001(&dcuvAlrins001SpIn);

  return TRUE;
}

/******************************************************************************
  Function Name : SVncapl300in1_DENC_APL300IN62 ()
  Note          : 육성센터 접수건알림 K.net(對 모집기관)
  Parameters    : struct _denc_apl300in62_sp_in  *in_st  ,
                  struct _denc_apl300in62_sp_out out_st[]
  Return Value  : TRUE  : 정상
                  FALSE : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int     SVncapl300in1_DENC_APL300IN62(struct _denc_apl300in62_sp_in  *in_st,
                                      struct _denc_apl300in62_sp_out out_st[]) {

  char    *fnName1    = "SVncapl300in1_DENC_APL300IN62";

  /* DBIO OUTPUT 변수들을 clear시킨다                                       */
  dencApl300in62SpOutClear(out_st, DENC_APL300IN62_SP_RQSIZE);

  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다                 */
  setInitDBIO(ARYCNT_001, DBCURSOR_CLOSE);

  ncDebugDispDbioFix("DENC_APL300IN62_SP 전");
  uvDebug("증권번호 = [%s]", (char *) in_st->polyNo.arr);

  /* DBIO module 호출                                                       */
  dencApl300in62Sp(&basicParam, in_st, out_st);

  ncDebugDispDbioFix("DENC_APL300IN62_SP 후");
  uvDebug("알림메세지     = [%s]", (char *) out_st[0].alrimMsg    .arr);
  uvDebug("영업소장사번   = [%s]", (char *) out_st[0].bussEmplNo  .arr);
  uvDebug("영업소장이름   = [%s]", (char *) out_st[0].bussEmplName.arr);
  uvDebug("영업소장고객ID = [%s]", (char *) out_st[0].bussCustId  .arr);
  uvDebug("모집부활기관   = [%s]", (char *) out_st[0].clltReviOgcd.arr);
  uvDebug("수신자List     = [%s]", (char *) out_st[0].recpList    .arr);
  uvDebug("SMS송신여부    = [%s]", (char *) out_st[0].smsSendYn   .arr);

  /* DBIO module 호출 결과 확인                                             */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.                     */
    setDBIOErrMsg(fnName1);

    /* 시스템 오류입니다.                                                 */
    appReturnCode = 10;

    NCST_ModlRetur3.errorComponent = ORAERR;
    NCST_ModlRetur3.appReturnCode  = appReturnCode;
    NCST_ModlRetur3.cptReturnCode  = cptReturnCode;
    strcpy(NCST_ModlRetur3.userDefineMsg,
        "DBIO(DENC_APL300IN62_SP) 호출 Error");
    sprintf(NCST_ModlRetur3.functionName, "%s", getCDALErrMsg());

    uvDebug("%s->%s[%s]", fnName1, NCST_ModlRetur3.userDefineMsg,
        NCST_ModlRetur3.functionName);

    return FALSE;
  }

  if (basicParam.rpSize == 0) {
    COPY(out_st[0].smsSendYn, "N");                         /* SMS 수신여부 */
  }

  return TRUE;
}

/******************************************************************************
  Function Name : SVncapl300in1_DCUV_ALRINS001 ()
  Note          : 알림메세지 처리
  Parameters    : struct _dcuv_alrins001_sp_in
  Return Value  : (none)
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void     SVncapl300in1_DCUV_ALRINS001(struct _dcuv_alrins001_sp_in   *in_st) {

  char    *fnName1    = "SVncapl300in1_DCUV_ALRINS001";

  /* DBIO module을 호출하기 전 default 변수들을 clear시킨다                 */
  setInitDBIO(ARYCNT_001, DBCURSOR_CLOSE);

  ncDebugDispDbioFix("DCUV_ALRINS001_SP 전");
  uvDebug("발신자사번   = [%s]", (char *) in_st->sndrMpno    .arr);
  uvDebug("제목         = [%s]", (char *) in_st->titl        .arr);
  uvDebug("내용         = [%s]", (char *) in_st->cten        .arr);
  uvDebug("내용등급     = [%f]",          in_st->ctenGrad        );
  uvDebug("게시시작일자 = [%s]", (char *) in_st->notiStdt    .arr);
  uvDebug("게시종료일자 = [%s]", (char *) in_st->notiEndt    .arr);
  uvDebug("URL          = [%s]", (char *) in_st->url         .arr);
  uvDebug("링크         = [%s]", (char *) in_st->relvBsnsName.arr);
  uvDebug("수신자사번   = [%s]", (char *) in_st->rcptList    .arr);
  uvDebug("수신구분     = [%f]",          in_st->recvDvsn        );

  /* DBIO module 호출                                                       */
  dcuvAlrins001Sp(&basicParam, in_st);

  ncDebugDispDbioFix("DCUV_ALRINS001_SP 후");

  /* DBIO module 호출 결과 확인                                             */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.                     */
    setDBIOErrMsg(fnName1);

    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCUV_ALRINS001_SP) 호출 Error[%d], %s",
        cptReturnCode, getCDALErrMsg());

    /* 시스템 오류입니다.                                                 */
    appReturnCode = 10;

    SVC_CLOSE(ORAERR, appReturnCode, cptReturnCode,
        "DBIO(DCUV_ALRINS001_SP) 호출 Error.",
        getCDALErrMsg());
  }
}

/******************************************************************************
  Function Name : SVncapl300in1_dencIisaplrci001Sp ()
  Note          : 양육자금전환 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencIisaplrci001Sp (struct stp_SVncapl300in1 *stp) {

  int    ii      = 0;
  char  *fnName1 = "SVncapl300in1_dencIisaplrci001Sp";

  struct _denc_iisaplrci001_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencIisaplrci001SpInClear (&inSt );

  COPYVAR(inSt.polyNo       , stp->polyNo       ); /* 증권번호       */
  (       inSt.histNo       = 1                 ); /* 이력번호       */
  COPY   (inSt.lastChmnMpno , uvGetUserID()     ); /* 최종변경자사번 */
  COPY   (inSt.pgmId        , uvGetServiceName()); /* 프로그램ID     */
  COPY   (inSt.bsnsClsfCode , "NC"              ); /* 업무분류코드   */
  COPY   (inSt.aplcMpno     , uvGetUserID()     ); /* 신청자사번     */
  COPY   (inSt.rqstOrgn     , uvGetUserOrgCode()); /* 신청기관       */
  COPYVAR(inSt.rqstDate     , stp->crntDate     ); /* 신청일자       */
  COPY   (inSt.cnclDate     , ""                ); /* 취소일자       */

  /*수익자 사항 ------------------------------------------------------------*/
  for (ii = 0; ii < stp->bnfCnt - stp->dedCnt; ii++) {
    if (strncmp((char *) stp->bnfccustRoleCode[ii].arr, "51", 2) == 0) {
      COPYVAR(inSt.bnfcCustId   , stp->bnfccustId[ii]); /* 수익자고객ID   */
      break;
    }
  }

  (       inSt.cnvsRato     = stp->cnvsRato     ); /* 전환비율       */
  (       inSt.cnvsEndAge   = stp->cnvsEndAge   ); /* 전환종료나이   */
  COPYVAR(inSt.strtDate     , stp->cnttDate     ); /* 시작일자       */
  COPY   (inSt.endDate      , "99991231"        ); /* 종료일자       */
  COPY   (inSt.delYn        , "N"               ); /* 삭제여부       */

  uvDebug("증권번호       = [%s]",(char *) inSt.polyNo      .arr);
  uvDebug("이력번호       = [%f]",         inSt.histNo          );
  uvDebug("최종변경자사번 = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID     = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("업무분류코드   = [%s]",(char *) inSt.bsnsClsfCode.arr);
  uvDebug("신청자사번     = [%s]",(char *) inSt.aplcMpno    .arr);
  uvDebug("신청기관       = [%s]",(char *) inSt.rqstOrgn    .arr);
  uvDebug("신청일자       = [%s]",(char *) inSt.rqstDate    .arr);
  uvDebug("취소일자       = [%s]",(char *) inSt.cnclDate    .arr);
  uvDebug("수익자고객ID   = [%s]",(char *) inSt.bnfcCustId  .arr);
  uvDebug("전환비율       = [%f]",         inSt.cnvsRato        );
  uvDebug("전환종료나이   = [%f]",         inSt.cnvsEndAge      );
  uvDebug("시작일자       = [%s]",(char *) inSt.strtDate    .arr);
  uvDebug("종료일자       = [%s]",(char *) inSt.endDate     .arr);
  uvDebug("삭제여부       = [%s]",(char *) inSt.delYn       .arr);

  dencIisaplrci001Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_IISAPLRCI001_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_IISAPLRCI001_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

}

/******************************************************************************
  Function Name : SVncapl300in1_dencIisaplaad001Sp ()
  Note          : 지정대리인 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencIisaplaad001Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1   = "SVncapl300in1_dencIisaplaad001Sp";

  struct _denc_iisaplaad001_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencIisaplaad001SpInClear (&inSt );

  COPYVAR(inSt.polyNo       , stp->polyNo       ); /* 증권번호       */
  (       inSt.asmtAgntNo   = 1                 ); /* 지정대리인번호 */
  (       inSt.histNo       = 1                 ); /* 이력번호       */
  COPY   (inSt.lastChmnMpno , uvGetUserID()     ); /* 최종변경자사번 */
  COPY   (inSt.pgmId        , uvGetServiceName()); /* 프로그램ID     */
  COPYVAR(inSt.custId       , stp->asmtAgntCtid ); /* 고객ID         */
  COPYVAR(inSt.strtDate     , stp->cnttDate     ); /* 시작일자       */
  COPY   (inSt.endDate      , "99991231"        ); /* 종료일자       */
  COPY   (inSt.delYn        , "N"               ); /* 삭제여부       */

  uvDebug("증권번호       = [%s]",(char *) inSt.polyNo      .arr);
  uvDebug("지정대리인번호 = [%f]",         inSt.asmtAgntNo      );
  uvDebug("이력번호       = [%f]",         inSt.histNo          );
  uvDebug("최종변경자사번 = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID     = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("고객ID         = [%s]",(char *) inSt.custId      .arr);
  uvDebug("시작일자       = [%s]",(char *) inSt.strtDate    .arr);
  uvDebug("종료일자       = [%s]",(char *) inSt.endDate     .arr);
  uvDebug("삭제여부       = [%s]",(char *) inSt.delYn       .arr);

  dencIisaplaad001Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_IISAPLAAD001_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_IISAPLAAD001_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName);

}


/************************************************************************
  Function Name : SVncapl300in1_dencCmncsudo29Sp()
  Note          : FATCA 확인 대상 여부 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencCmncsudo29Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_cmncsudo29_sp_in  ist;
  struct _denc_cmncsudo29_sp_out ost;

  uvDebug("SVncapl300in1_dencCmncsudo29Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencCmncsudo29SpInClear(&ist);

  COPYVAR(ist.pynoBdctNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencCmncsudo29SpOutClear(&ost);

  /* DBIO module 호출                                             */

  dencCmncsudo29Sp(&basicParam,&ist,&ost);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_CMNCSUDO29_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_CMNCSUDO29_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* 고객구분에 따른 FATCA 확인 대상 여부 확인 */
  if (strcmp((char *) ost.custDvcd.arr, "1") == 0) {
    COPY   (stp->ftcaObjtYn,"Y");
  } else if(strcmp((char *) ost.custDvcd.arr, "2") == 0) {
    COPY   (stp->ftcaObjtYn,"Y");
  } else {
    COPY   (stp->ftcaObjtYn,"N");
  }

  uvDebug("FATCA 확인 대상 여부 = [%s]", (char *) stp->ftcaObjtYn.arr);

  uvDebug("SVncapl300in1_dencCmncsudo29Sp  End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_crdtView()
  Note          : 신용등급 사전조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_crdtView(struct stp_SVncapl300in1 *stp) {

  int ii=0;

  CMNC_CrdtSrch   crd;
  /* 조회 대상 조건 체크 및 대상 조회 */
  struct _denc_sncaplcim_004_sp_in  ist;
  struct _denc_sncaplcim_004_sp_out ost[DENC_SNCAPLCIM_004_SP_RQSIZE];

  uvDebug("SVncapl300in1_crdtView  Start");

  uvDebug("SVncapl300in1_dencSncaplcim004Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencSncaplcim004SpInClear(&ist);

  COPYVAR(ist.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(DENC_SNCAPLCIM_004_SP_RQSIZE,DBCURSOR_CLOSE);

  dencSncaplcim004SpOutClear(ost,DENC_SNCAPLCIM_004_SP_RQSIZE);

  /* DBIO module 호출                                             */

  dencSncaplcim004Sp(&basicParam,&ist,ost);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_SNCAPLCIM_004_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_SNCAPLCIM_004_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }
  uvDebug("** 조회 대상 건수 : [%d]", basicParam.rpSize);

/* 대상이 있으면 continue, 조회처리 없으면 return */
  if(basicParam.rpSize > 0) {
    /* dbio 결과 만큼 loop */
    for (ii = 0; ii < basicParam.rpSize; ii++) {

        uvDebug("신용정보 호출 시작");

        memset(&crd,    0x00,   sizeof(CMNC_CrdtSrch));

        COPYVAR(crd.custId, ost[ii].custId );      /* I 주피고객ID */
        COPY   (crd.rsdnRgstNo, ""         );      /* I 주피주민번호 */
        COPY   (crd.dvsn, "1"              );      /* I dvsn(업무구분, 1은 ID, 2는 주민번호) */
        COPYVAR(crd.dvsnDate, stp->crntDate);      /* I 기준일자 */
        COPY   (crd.polyNo  , ""           );      /* I 증권번호 */
        COPY   (crd.viewDvsn,"1"           );      /* 조회구분 - 1:일반조회 */
        COPY   (crd.telgDvsn,"2"           );      /* 전문구분 - 1:효율등급,2:신용등급,3:소득추정지수 */

        uvDebug("모듈 호출전 신용정보 대상 고객ID       [%s]",(char *) crd.custId    .arr);
        uvDebug("모듈 호출전 신용정보 대상 고객주민번호 [%s]",(char *) crd.rsdnRgstNo.arr);
        uvDebug("모듈 호출전 신용정보 대상 구분         [%s]",(char *) crd.dvsn.arr);
        uvDebug("모듈 호출전 신용정보 대상 기준일자     [%s]",(char *) crd.dvsnDate.arr);
        uvDebug("모듈 호출전 신용정보 대상 증권번호     [%s]",(char *) crd.polyNo  .arr);
        uvDebug("모듈 호출전 신용정보 대상 조회구분     [%s]",(char *) crd.viewDvsn.arr);
        uvDebug("모듈 호출전 신용정보 대상 전문구분     [%s]",(char *) crd.telgDvsn.arr);

        if (CMNC_CrdtSrch_CC(&crd) != SUCCESS) {
          uvDebug("신용정보조회(CMNC_CrdtSrch_CC) 호출 오류");
        }

        /* 결과출력 */
        uvDebug("* resultCode [%d] resultMsg[%s] ", crd.resultCode, (char *) crd.resultMsg.arr);
        uvDebug("모듈 호출후 신용정보 대상 고객등급 [%s]",(char *) crd.crdtGrdv.arr);

        COPYVAR(stp->crdtGrdv, crd.crdtGrdv); /* 신용등급 */

        uvDebug("소득추정지수 호출 시작");

        memset(&crd,    0x00,   sizeof(CMNC_CrdtSrch));

        COPYVAR(crd.custId, ost[ii].custId    );      /* I 주피고객ID */
        COPY   (crd.rsdnRgstNo, ""             );      /* I 주피주민번호 */
        COPY   (crd.dvsn, "1"                  );      /* I dvsn(업무구분, 1은 ID, 2는 주민번호) */
        COPYVAR(crd.dvsnDate, stp->crntDate    );      /* I 기준일자 */
        COPY   (crd.polyNo  , ""               );      /* I 증권번호 */
        COPY   (crd.viewDvsn,"1"               );      /* 조회구분 - 1:일반조회 */
        COPY   (crd.telgDvsn,"3"               );      /* 전문구분 - 1:효율등급,2:신용등급,3:소득추정지수 */

        uvDebug("모듈 호출전 소득추정지수 대상 고객ID       [%s]",(char *) crd.custId    .arr);
        uvDebug("모듈 호출전 소득추정지수 대상 고객주민번호 [%s]",(char *) crd.rsdnRgstNo.arr);
        uvDebug("모듈 호출전 소득추정지수 대상 구분         [%s]",(char *) crd.dvsn.arr);
        uvDebug("모듈 호출전 소득추정지수 대상 기준일자     [%s]",(char *) crd.dvsnDate.arr);
        uvDebug("모듈 호출전 소득추정지수 대상 증권번호     [%s]",(char *) crd.polyNo  .arr);
        uvDebug("모듈 호출전 소득추정지수 대상 조회구분     [%s]",(char *) crd.viewDvsn.arr);
        uvDebug("모듈 호출전 소득추정지수 대상 전문구분     [%s]",(char *) crd.telgDvsn.arr);

        if (CMNC_CrdtSrch_CC(&crd) != SUCCESS) {
          uvDebug("신용정보조회(CMNC_CrdtSrch_CC) 호출 오류");
        }

        /* 결과출력 */
        uvDebug("* resultCode [%d] resultMsg[%s] ", crd.resultCode, (char *) crd.resultMsg.arr);
    }
  } else {
      uvDebug("신용정보 조회 안함");
      return;
  }

  EXEC SQL COMMIT;

  uvDebug("SVncapl300in1_crdtView  End");

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_dencApl300in63Sp()
  Note          : AML변경여부 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300in63Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_apl300in63_sp_in  ist;
  struct _denc_apl300in63_sp_out ost;

  uvDebug("SVncapl300in1_dencApl300in63Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300in63SpInClear(&ist);

  COPYVAR(ist.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencApl300in63SpOutClear(&ost);

  /* DBIO module 호출                                             */

  dencApl300in63Sp(&basicParam,&ist,&ost);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300IN63_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300IN63_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  uvDebug("AML변경여부 = [%s]", (char *) stp->cddEddYn.arr);
  uvDebug("AML고객구분 = [%s]", (char *) ost.custDvcd.arr);

  if ((strcmp((char *) ost.cddEddYn.arr, "Y") == 0) && (strcmp((char *) ost.custDvcd.arr, "2")==0)) {

      EXEC SQL ROLLBACK;
      uvDebug("신원확인평가결과변경2(발행:CDD,입력:EDD)");
      appReturnCode = 9145;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
      "EDD고객입니다.발행시보다 위험도 증가하여 청약 진행 불가(청약서 재발행 진행)", "SVncapl300in1");

  } else if ((strcmp((char *) ost.cddEddYn.arr, "Y") == 0) && (strcmp((char *) ost.custDvcd.arr, "1") == 0)) {

      uvDebug("신원확인평가결과변경1(발행:CDD,입력:EDD)");
      /*PUTSTR(NC_STR_239, 0, "EDD고객입니다.발행시보다 위험도 증가하여 추가정보 입력 필수(청약서 재발행 불필요)");*/
      PUTSTR(NC_STR_239, 0, "Y");

  } else {

      uvDebug("신원확인평가결과 변경 없음");
      PUTSTR(NC_STR_239, 0, "N");

  }

  uvDebug("SVncapl300in1_dencApl300in63Sp  End");

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_dencApl300in69Sp()
  Note          : 전자서명청약을위한피보험자서면동의서 스캔여부 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl300in69Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_apl300in69_sp_in  ist;
  struct _denc_apl300in69_sp_out ost;

  uvDebug("SVncapl300in1_dencApl300in69Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300in69SpInClear(&ist);

  COPYVAR(ist.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencApl300in69SpOutClear(&ost);

  /* DBIO module 호출                                             */

  dencApl300in69Sp(&basicParam,&ist,&ost);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300IN69_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300IN69_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  uvDebug("전자서명청약을위한피보험자서면동의서 스캔여부 = [%s]", (char *) ost.tablCnfmYn.arr);

  if (strcmp((char *) ost.tablCnfmYn.arr, "Y") == 0) {

      uvDebug("전자서명청약을위한피보험자서면동의서 스캔 존재");

  } else if (strcmp((char *) ost.tablCnfmYn.arr, "N") == 0) {

      EXEC SQL ROLLBACK;
      uvDebug("전자서명청약을위한피보험자서면동의서 스캔대상 / 스캔 미존재");
      appReturnCode = 4899;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
      "전자서명청약을위한피보험자서면동의서 스캔하시기바랍니다", "SVncapl300in1");

  } else {

      uvDebug("전자서명청약을위한피보험자서면동의서 스캔 대상아님");

  }

  uvDebug("SVncapl300in1_dencApl300in69Sp  End");

  return;
}


/************************************************************************
  Function Name : SVncapl300in1_onLineChck()
  Note          : 온라인 시간 체크
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void  SVncapl300in1_onLineChck() {

  char recpPossYn[MAX_VALUE_LEN];

  char orgnCode[5+1];

  uvDebug("SVncapl300in1_onLineChck  Start");

  strcpy(orgnCode,uvGetUserOrgCode());

  uvDebug("orgnCode = [%s]", orgnCode);

  if (NC_onLineChck(orgnCode, recpPossYn) != SUCCESS) {
    EXEC SQL ROLLBACK;
    uvDebug("온라인 시간 체크시 오류가 발생하였습니다");
    appReturnCode = 10;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0, \
      "온라인 시간 체크시 오류가 발생하였습니다", "SVncapl300in1");
  }

  if (strcmp(recpPossYn, "Y") != 0) {
    EXEC SQL ROLLBACK;

    appReturnCode = 4769;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "해당 화면은 현재 온라인 운영 시간이 아닙니다.", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_onLineChck  End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_readData()
  Note          : 입력 데이터 DB조회 - Jolt 대용(Tablet 등)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_readData(struct stp_SVncapl300in1 *stp) {

  char    *fnName1 = "SVncapl300in1_readData";

  struct _denc_apl300in64_sp_out dencApl300in64SpOut;
  struct _denc_apl300in64_sp_in  dencApl300in64SpIn;

  struct _dcnc_apl300vw09_sp_out dcncApl300vw09SpOut[DCNC_APL300VW09_SP_RQSIZE];
  struct _dcnc_apl300vw09_sp_in  dcncApl300vw09SpIn;

  struct _dcnc_apl300vw04_sp_out dcncApl300vw04SpOut;
  struct _dcnc_apl300vw04_sp_in  dcncApl300vw04SpIn;

  struct _denc_apl300in65_sp_out dencApl300in65SpOut[DENC_APL300IN65_SP_RQSIZE];
  struct _denc_apl300in65_sp_in  dencApl300in65SpIn;

  int     ii;

  uvDebug("SVncapl300in1_readData  Start");

  /*-------------------------------*/
  /* Tablet 청약 계약고지사항 조회 */
  /*-------------------------------*/

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300in64SpInClear(&dencApl300in64SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dencApl300in64SpIn.polyNo,  stp->polyNo);

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dencApl300in64SpOutClear(&dencApl300in64SpOut);

  /* DBIO module 호출                                             */

  dencApl300in64Sp(&basicParam,&dencApl300in64SpIn,&dencApl300in64SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300IN64_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300IN64_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술 */
  uvDebug("%d 건 처리 종료",    basicParam.rpSize);

  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("TABLET 고지 데이터가 존재하지 않습니다(바로접수불가)");
    appReturnCode = 8989;
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(APPERR, appReturnCode, 0,  \
        "TABLET 고지 데이터가 존재하지 않습니다(바로접수불가)", "SVncapl300in1");
  }

  COPYVAR(stp->cnttDate        ,  dencApl300in64SpOut.cnttDate    ); /* 계약일자                     -NC_STR_002 */
  COPYVAR(stp->aulnPaymYn      ,  dencApl300in64SpOut.aulnRqstAgyn); /* 자동대출납입여부             -NC_STR_007 */
  (       stp->mnthIncmAmt     =  dencApl300in64SpOut.mnthIncmAmt ); /* 월소득금액                   -NC_DOU_005 */
  COPYVAR(stp->ftprRmtnDate    ,  dencApl300in64SpOut.ftprRmtnDate); /* 초회보험료송금일자           -NC_STR_003 */
  COPYVAR(stp->ftprRecvMdcd    ,  dencApl300in64SpOut.ftprRecvMdcd); /* 초회보험료입금방법코드       -NC_STR_004 */
  COPYVAR(stp->finaOrgnCode[0] ,  dencApl300in64SpOut.ftprFinaOgcd); /* 초회보험료금융기관코드       -NC_STR_012 */
  COPYVAR(stp->autoRejnAgyn    ,  dencApl300in64SpOut.autoRejnAgyn); /* 자동재가입동의여부           -NC_STR_048 */
  (       stp->custIntrPsct    =  dencApl300in64SpOut.custIntrPsct); /* 고객소개인원수               -NC_DOU_063 */
  COPYVAR(stp->speaDivdAtSndYn ,  dencApl300in64SpOut.sednAtrtYn  ); /* 분할/배당금자동송금여부      -NC_STR_033 */
  COPYVAR(stp->asmtAgntRqyn    ,  dencApl300in64SpOut.asmtAgntRqyn); /* 지정대리인신청여부           -NC_STR_038 */
  COPYVAR(stp->asmtAgntCtid    ,  dencApl300in64SpOut.asmtAgntCtid); /* 지정대리인고객ID             -NC_STR_039 */
  COPYVAR(stp->memoCten        ,  dencApl300in64SpOut.memoCten    ); /* U/W특이사항 메모             -NC_STR_252 */
  COPYVAR(stp->memoCode        ,  dencApl300in64SpOut.cnttMemoCode); /* 계약별메모코드               -NC_STR_253 */
  COPYVAR(stp->rrfdCnvsRqyn    ,  dencApl300in64SpOut.rrfdCnvsRqyn); /* 양육자금전환신청여부         -NC_STR_045 */
  (       stp->cnvsRato        =  dencApl300in64SpOut.cnvsRato    ); /* 전환비율                     -NC_DOU_040 */
  (       stp->cnvsEndAge      =  dencApl300in64SpOut.cnvsEndAge  ); /* 전환종료나이                 -NC_DOU_041 */
  (       stp->connMcntPrem    =  dencApl300in64SpOut.connMcntPrem); /* 관련주계약보험료(president)  -NC_DOU_007 */
  COPYVAR(stp->connPolyNo      ,  dencApl300in64SpOut.connPolyNo  ); /* 연계증권번호    (president)  -NC_STR_035 */
  COPYVAR(stp->spprAuwdPyot    ,  dencApl300in64SpOut.spprAuwdPyot); /* 특약보험료자동인출납입옵션   -NC_STR_047 */
  COPYVAR(stp->savnTxfrYn      ,  dencApl300in64SpOut.txfrApcnVlyn); /* 저축성비과세선택여부         -NC_STR_005 */
  COPYVAR(stp->frplSavnTxfrYn  ,  dencApl300in64SpOut.frplSatxSeyn); /* 자유설계 저축성비과세선택여부-NC_STR_043 */
  COPYVAR(stp->prsnCoprSadv    ,  dencApl300in64SpOut.prsnCoprSadv); /* 개인법인판매구분             -NC_STR_008 */
  COPYVAR(stp->dtorCtorReln    ,  dencApl300in64SpOut.dtorCtorReln); /* 예금주와계약자와의관계       -NC_STR_009 */
  COPYVAR(stp->lpCtisReln      ,  dencApl300in64SpOut.lpCtisReln  ); /* 설계사와계약자/피보험자관계  -NC_STR_059 */
  COPYVAR(stp->insrJoinMotv    ,  dencApl300in64SpOut.insrJoinMotv); /* 보험가입동기                 -NC_STR_058 */
  COPYVAR(stp->commTrmtRqyn    ,  dencApl300in64SpOut.cmmnTrmtAgyn); /* 통신해지신청여부             -NC_STR_032 */
  COPYVAR(stp->bnfcAsmtAgyn    ,  dencApl300in64SpOut.bnfcAsmtAgyn); /* 수익자지정동의여부           -NC_STR_034 */
  COPYVAR(stp->taxSelYn        ,  dencApl300in64SpOut.txprApcnVlyn); /* 세금우대선택여부             -NC_STR_036 */
  COPYVAR(stp->stplRecvDvsn    ,  dencApl300in64SpOut.stplRecvDvsn); /* 약관전달경로구분             -NC_STR_037 */
  COPYVAR(stp->polyTrnmRtdv    ,  dencApl300in64SpOut.polyTrnmRtdv); /* 증권전달경로구분             -NC_STR_243 */
  COPYVAR(stp->collMetdCode    ,  dencApl300in64SpOut.collMetdCode); /* 수금방법코드                 -NC_STR_006 */
  COPYVAR(stp->cnvnJoinHlyn    ,  dencApl300in64SpOut.cnvnJoinHlyn); /* 간편가입유지여부             -NC_STR_254 */
  COPYVAR(stp->rejtMsgAgyn     ,  dencApl300in64SpOut.altkLmsAgyn);  /* 승낙거절LMS동의여부          -NC_STR_109 */

  uvDebug("계약일자                     -NC_STR_002 = [%s]", (char *) stp->cnttDate       .arr);
  uvDebug("자동대출납입여부             -NC_STR_007 = [%s]", (char *) stp->aulnPaymYn     .arr);
  uvDebug("월소득금액                   -NC_DOU_005 = [%f]",          stp->mnthIncmAmt        );
  uvDebug("초회보험료송금일자           -NC_STR_003 = [%s]", (char *) stp->ftprRmtnDate   .arr);
  uvDebug("초회보험료입금방법코드       -NC_STR_004 = [%s]", (char *) stp->ftprRecvMdcd   .arr);
  uvDebug("초회보험료금융기관코드       -NC_STR_012 = [%s]", (char *) stp->finaOrgnCode[0].arr);
  uvDebug("자동재가입동의여부           -NC_STR_048 = [%s]", (char *) stp->autoRejnAgyn   .arr);
  uvDebug("고객소개인원수               -NC_DOU_063 = [%f]",          stp->custIntrPsct       );
  uvDebug("분할/배당금자동송금여부      -NC_STR_033 = [%s]", (char *) stp->speaDivdAtSndYn.arr);
  uvDebug("지정대리인신청여부           -NC_STR_038 = [%s]", (char *) stp->asmtAgntRqyn   .arr);
  uvDebug("지정대리인고객ID             -NC_STR_039 = [%s]", (char *) stp->asmtAgntCtid   .arr);
  uvDebug("U/W특이사항 메모             -NC_STR_252 = [%s]", (char *) stp->memoCten       .arr);
  uvDebug("계약별메모코드               -NC_STR_253 = [%s]", (char *) stp->memoCode       .arr);
  uvDebug("양육자금전환신청여부         -NC_STR_045 = [%s]", (char *) stp->rrfdCnvsRqyn   .arr);
  uvDebug("전환비율                     -NC_DOU_040 = [%f]",          stp->cnvsRato           );
  uvDebug("전환종료나이                 -NC_DOU_041 = [%f]",          stp->cnvsEndAge         );
  uvDebug("관련주계약보험료(president)  -NC_DOU_007 = [%f]",          stp->connMcntPrem       );
  uvDebug("연계증권번호    (president)  -NC_STR_035 = [%s]", (char *) stp->connPolyNo     .arr);
  uvDebug("특약보험료자동인출납입옵션   -NC_STR_047 = [%s]", (char *) stp->spprAuwdPyot   .arr);
  uvDebug("저축성비과세선택여부         -NC_STR_005 = [%s]", (char *) stp->savnTxfrYn     .arr);
  uvDebug("자유설계 저축성비과세선택여부-NC_STR_043 = [%s]", (char *) stp->frplSavnTxfrYn .arr);
  uvDebug("개인법인판매구분             -NC_STR_008 = [%s]", (char *) stp->prsnCoprSadv   .arr);
  uvDebug("예금주와계약자와의관계       -NC_STR_009 = [%s]", (char *) stp->dtorCtorReln   .arr);
  uvDebug("설계사와계약자/피보험자관계  -NC_STR_059 = [%s]", (char *) stp->lpCtisReln     .arr);
  uvDebug("보험가입동기                 -NC_STR_058 = [%s]", (char *) stp->insrJoinMotv   .arr);
  uvDebug("통신해지신청여부             -NC_STR_032 = [%s]", (char *) stp->commTrmtRqyn   .arr);
  uvDebug("수익자지정동의여부           -NC_STR_034 = [%s]", (char *) stp->bnfcAsmtAgyn   .arr);
  uvDebug("세금우대선택여부             -NC_STR_036 = [%s]", (char *) stp->taxSelYn       .arr);
  uvDebug("약관전달경로구분             -NC_STR_037 = [%s]", (char *) stp->stplRecvDvsn   .arr);
  uvDebug("증권전달경로구분             -NC_STR_243 = [%s]", (char *) stp->polyTrnmRtdv   .arr);
  uvDebug("수금방법코드                 -NC_STR_006 = [%s]", (char *) stp->collMetdCode   .arr);
  uvDebug("간편가입유지여부             -NC_STR_254 = [%s]", (char *) stp->cnvnJoinHlyn   .arr);
  uvDebug("승낙거절LMS동의여부          -NC_STR_109 = [%s]", (char *) stp->rejtMsgAgyn    .arr);


  /*-------------------------*/
  /* 청약접수조회(피보험자)  */
  /*-------------------------*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300vw09SpInClear(&dcncApl300vw09SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dcncApl300vw09SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(DCNC_APL300VW09_SP_RQSIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300vw09SpOutClear(dcncApl300vw09SpOut,DCNC_APL300VW09_SP_RQSIZE);

  /* DBIO module 호출                                             */

  dcncApl300vw09Sp(&basicParam,&dcncApl300vw09SpIn,dcncApl300vw09SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300VW09_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DCNC_APL300VW09_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("%d 건 처리 종료\n",    basicParam.rpSize);

  stp->cniCnt = basicParam.rpSize;

  uvDebug("stp->cniCnt = [%f]",stp->cniCnt);

  /* 계약고지정보             */
  for (ii = 0; ii < (int) stp->cniCnt; ii++) {

    COPYVAR(stp->cniCustId      [ii] , dcncApl300vw09SpOut[ii].custId          ); /* 고객ID              -NC_STR_041 */
    COPYVAR(stp->cniOccpCode    [ii] , dcncApl300vw09SpOut[ii].occpCode        ); /* MAX직종코드         -NC_STR_040 */
    COPYVAR(stp->cniRiskGradCode[ii] , dcncApl300vw09SpOut[ii].riskGradCode    ); /* MAX위험등급코드     -NC_STR_056 */
    COPYVAR(stp->ovseRkarDpyn   [ii] , dcncApl300vw09SpOut[ii].ovseRkarDpyn    ); /* 해외위험지역출국여부-NC_STR_049 */
    COPYVAR(stp->wkplDeptRknm   [ii] , dcncApl300vw09SpOut[ii].wkplDeptRknm    ); /* 직장/부서/직위명    -NC_STR_051 */
    COPYVAR(stp->hndlBsnsName   [ii] , dcncApl300vw09SpOut[ii].hndlBsnsName    ); /* 취급업무명          -NC_STR_050 */
    COPYVAR(stp->sdjbName       [ii] , dcncApl300vw09SpOut[ii].sdjbName        ); /* 부업명              -NC_STR_052 */
    COPYVAR(stp->cniHobyCode    [ii] , dcncApl300vw09SpOut[ii].hobyCode        ); /* 취미코드            -NC_STR_055 */
    (       stp->wekyDrnkCnt    [ii] = dcncApl300vw09SpOut[ii].wekyDrnkCnt     ); /* 주당음주횟수        -NC_DOU_043 */
    COPYVAR(stp->drnkKdcd       [ii] , dcncApl300vw09SpOut[ii].drnkKdcd        ); /* 음주종류코드        -NC_STR_044 */
    (       stp->t01DrnkQnty    [ii] = dcncApl300vw09SpOut[ii].t01DrnkQnty     ); /* 1회음주량           -NC_DOU_045 */
    (       stp->dalySmokQnty   [ii] = dcncApl300vw09SpOut[ii].dalySmokQnty    ); /* 일당흡연량          -NC_DOU_046 */
    (       stp->otcmInsrJnct   [ii] = dcncApl300vw09SpOut[ii].otcmInsrJnct    ); /* 타사보험가입건수    -NC_DOU_047 */
    (       stp->hght           [ii] = dcncApl300vw09SpOut[ii].hght            ); /* 신장                -NC_DOU_053 */
    (       stp->wght           [ii] = dcncApl300vw09SpOut[ii].wght            ); /* 몸무게              -NC_DOU_054 */
    COPYVAR(stp->notcYn         [ii] , dcncApl300vw09SpOut[ii].notcYn          ); /* 고지유무            -NC_STR_042 */
    COPYVAR(stp->cniDrveCatpCode[ii] , dcncApl300vw09SpOut[ii].drveCatpCode    ); /* MAX운전차종코드     -NC_STR_057 */
    COPYVAR(stp->cniInjrOccpCode[ii] , dcncApl300vw09SpOut[ii].injrOccpCode    ); /* 상해직종코드        -NC_STR_250 */
    COPYVAR(stp->cniInjrRiskGrcd[ii] , dcncApl300vw09SpOut[ii].inrjRiskGrcd    ); /* 상해위험등급코드    -NC_STR_251 */
    COPYVAR(stp->ry1WghtInyn    [ii] , dcncApl300vw09SpOut[ii].ry1WghtInyn     ); /* 최근1년체중증감여부 -NC_STR_064 */
    COPYVAR(stp->otcmIamtRcyn   [ii] , dcncApl300vw09SpOut[ii].otcmIamtRcyn    ); /* 타사보험금수령여부  -NC_STR_065 */
    COPYVAR(stp->otcmSstdRgyn   [ii] , dcncApl300vw09SpOut[ii].otcmSstdRgyn    ); /* 타사표준하체등록여부-NC_STR_066 */
    (       stp->cniEmbrPregMcnt[ii] = dcncApl300vw09SpOut[ii].embrPregMcnt    ); /* 태아임신개월수      -NC_DOU_128 */

    uvDebug("고객ID              -NC_STR_041[%d] = [%s]",ii, (char *) stp->cniCustId      [ii].arr);
    uvDebug("MAX직종코드         -NC_STR_040[%d] = [%s]",ii, (char *) stp->cniOccpCode    [ii].arr);
    uvDebug("MAX위험등급코드     -NC_STR_056[%d] = [%s]",ii, (char *) stp->cniRiskGradCode[ii].arr);
    uvDebug("해외위험지역출국여부-NC_STR_049[%d] = [%s]",ii, (char *) stp->ovseRkarDpyn   [ii].arr);
    uvDebug("직장/부서/직위명    -NC_STR_051[%d] = [%s]",ii, (char *) stp->wkplDeptRknm   [ii].arr);
    uvDebug("취급업무명          -NC_STR_050[%d] = [%s]",ii, (char *) stp->hndlBsnsName   [ii].arr);
    uvDebug("부업명              -NC_STR_052[%d] = [%s]",ii, (char *) stp->sdjbName       [ii].arr);
    uvDebug("취미코드            -NC_STR_055[%d] = [%s]",ii, (char *) stp->cniHobyCode    [ii].arr);
    uvDebug("주당음주횟수        -NC_DOU_043[%d] = [%f]",ii,          stp->wekyDrnkCnt    [ii]    );
    uvDebug("음주종류코드        -NC_STR_044[%d] = [%s]",ii, (char *) stp->drnkKdcd       [ii].arr);
    uvDebug("1회음주량           -NC_DOU_045[%d] = [%f]",ii,          stp->t01DrnkQnty    [ii]    );
    uvDebug("일당흡연량          -NC_DOU_046[%d] = [%f]",ii,          stp->dalySmokQnty   [ii]    );
    uvDebug("타사보험가입건수    -NC_DOU_047[%d] = [%f]",ii,          stp->otcmInsrJnct   [ii]    );
    uvDebug("신장                -NC_DOU_053[%d] = [%f]",ii,          stp->hght           [ii]    );
    uvDebug("몸무게              -NC_DOU_054[%d] = [%f]",ii,          stp->wght           [ii]    );
    uvDebug("고지유무            -NC_STR_042[%d] = [%s]",ii, (char *) stp->notcYn         [ii].arr);
    uvDebug("MAX운전차종코드     -NC_STR_057[%d] = [%s]",ii, (char *) stp->cniDrveCatpCode[ii].arr);
    uvDebug("상해직종코드        -NC_STR_250[%d] = [%s]",ii, (char *) stp->cniInjrOccpCode[ii].arr);
    uvDebug("상해위험등급코드    -NC_STR_251[%d] = [%s]",ii, (char *) stp->cniInjrRiskGrcd[ii].arr);
    uvDebug("최근1년체중증감여부 -NC_STR_064[%d] = [%s]",ii, (char *) stp->ry1WghtInyn    [ii].arr);
    uvDebug("타사보험금수령여부  -NC_STR_065[%d] = [%s]",ii, (char *) stp->otcmIamtRcyn   [ii].arr);
    uvDebug("타사표준하체등록여부-NC_STR_066[%d] = [%s]",ii, (char *) stp->otcmSstdRgyn   [ii].arr);
    uvDebug("태아임신개월수      -NC_DOU_128[%d] = [%f]",ii,          stp->cniEmbrPregMcnt[ii]    );

    /* 주피운전차종코드 */
    if (strncmp((char *) dcncApl300vw09SpOut[ii].custRoleCode.arr, "21", 2) == 0) {
      stp->minsDniCnt = 1; /* 주피운전차종건수 */
      strcpy(stp->dniDrveCatpCode[0][0] , (char *) dcncApl300vw09SpOut[ii].drveCatpCode.arr);
      uvDebug("주피운전차종코드    -NC_STR_061 = [%s]", stp->dniDrveCatpCode[0][0]);
    }
    /* 종피운전차종코드 */
    else if (strncmp((char *) dcncApl300vw09SpOut[ii].custRoleCode.arr, "22", 2) == 0 ||
             strncmp((char *) dcncApl300vw09SpOut[ii].custRoleCode.arr, "25", 2) == 0 ||
             strncmp((char *) dcncApl300vw09SpOut[ii].custRoleCode.arr, "28", 2) == 0) {

      stp->scndDniCnt = 1; /* 종피운전차종건수 */
      strcpy(stp->dniDrveCatpCode[1][0] , (char *) dcncApl300vw09SpOut[ii].drveCatpCode.arr);
      uvDebug("종피운전차종코드    -NC_STR_062 = [%s]", stp->dniDrveCatpCode[1][0]);
    }

    /* Default Value Setting */
    COPY   (stp->cniEmbrIspeOdyn[ii] , ""                                      );
    uvDebug("태아검사이상유무    -NC_STR_129 = [%s]", (char *) stp->cniEmbrIspeOdyn[ii].arr);
  }

  uvDebug("stp->minsDniCnt = [%f]",stp->minsDniCnt);
  uvDebug("stp->scndDniCnt = [%f]",stp->scndDniCnt);

  /*----------------------*/
  /* 청약접수조회(계좌)   */
  /*----------------------*/
  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300vw04SpInClear(&dcncApl300vw04SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPY(dcncApl300vw04SpIn.admnNoDvsn,  "1");
  COPYVAR(dcncApl300vw04SpIn.admnNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(ARRAY_SIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dcncApl300vw04SpOutClear(&dcncApl300vw04SpOut);

  /* DBIO module 호출                                             */

  dcncApl300vw04Sp(&basicParam,&dcncApl300vw04SpIn,&dcncApl300vw04SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300VW04_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DCNC_APL300VW04_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("%d 건 처리 종료\n",    basicParam.rpSize);

  COPYVAR(stp->crwcustId   [0] , dcncApl300vw04SpOut.frstCustId      ); /* 고객ID                 -NC_STR_011[0] */
  COPYVAR(stp->finaOrgnDvsn[0] , dcncApl300vw04SpOut.frstFinaOrgnDvsn); /* 금융기관구분           -NC_STR_013[0] */
  if(strcmp((char *) stp->ftprRecvMdcd.arr, "86") != 0) {
    COPYVAR(stp->finaOrgnCode[0] , dcncApl300vw04SpOut.frstFinaOrgnCode); /* 금융기관코드           -NC_STR_012[0] */
  }
  COPYVAR(stp->bankBrchCode[0] , dcncApl300vw04SpOut.frstBankBrchCode); /* 은행지점코드           -NC_STR_016[0] */
  COPYVAR(stp->acctCardNo  [0] , dcncApl300vw04SpOut.frstAcctCardNo  ); /* 계좌_카드번호          -NC_STR_014[0] */
  COPYVAR(stp->cardVlidEdym[0] , dcncApl300vw04SpOut.frstCardVlidEdym); /* 카드유효만료년월       -NC_STR_015[0] */
  COPYVAR(stp->cardOwnrName[0] , dcncApl300vw04SpOut.frstCardOwnrName); /* 계좌_카드소유자명      -NC_STR_017[0] */
  COPYVAR(stp->cardOwnrRrno[0] , dcncApl300vw04SpOut.frstCardOwnrRrno); /* 계좌_카드소유자주민번호-NC_STR_018[0] */
  COPYVAR(stp->crwcustId   [1] , dcncApl300vw04SpOut.scndCustId      ); /* 고객ID                 -NC_STR_021[0] */
  COPYVAR(stp->finaOrgnDvsn[1] , dcncApl300vw04SpOut.scndFinaOrgnDvsn); /* 금융기관구분           -NC_STR_023[0] */
  COPYVAR(stp->finaOrgnCode[1] , dcncApl300vw04SpOut.scndFinaOrgnCode); /* 금융기관코드           -NC_STR_022[0] */
  COPYVAR(stp->bankBrchCode[1] , dcncApl300vw04SpOut.scndBankBrchCode); /* 은행지점코드           -NC_STR_026[0] */
  COPYVAR(stp->acctCardNo  [1] , dcncApl300vw04SpOut.scndAcctCardNo  ); /* 계좌_카드번호          -NC_STR_024[0] */
  COPYVAR(stp->cardVlidEdym[1] , dcncApl300vw04SpOut.scndCardVlidEdym); /* 계속보험료 카드유효년월-NC_STR_025[0] */
  COPYVAR(stp->cardOwnrName[1] , dcncApl300vw04SpOut.scndCardOwnrName); /* 계속보험료 소유자명    -NC_STR_029[0] */
  COPYVAR(stp->cardOwnrRrno[1] , dcncApl300vw04SpOut.scndCardOwnrRrno); /* 계속보험료 주민번호    -NC_STR_030[0] */
  COPYVAR(stp->trnfHopeDd  [1] , dcncApl300vw04SpOut.scndTrnfHopeDd  ); /* 이체희망일             -NC_STR_027[0] */
  COPYVAR(stp->cnttRcwcUsdv[0] , dcncApl300vw04SpOut.scndAcctUsage1  ); /* 계속보험료납입         -NC_STR_028[0] */
  COPYVAR(stp->cnttRcwcUsdv[1] , dcncApl300vw04SpOut.scndAcctUsage2  ); /* 계약자지급금수령       -NC_STR_028[1] */
  COPYVAR(stp->cnttRcwcUsdv[2] , dcncApl300vw04SpOut.scndAcctUsage3  ); /* 신계약(부활)보험료반환 -NC_STR_028[2] */


  uvDebug("고객ID                 -NC_STR_011[0] = [%s]", (char *) stp->crwcustId   [0].arr);
  uvDebug("금융기관구분           -NC_STR_013[0] = [%s]", (char *) stp->finaOrgnDvsn[0].arr);
  uvDebug("금융기관코드           -NC_STR_012[0] = [%s]", (char *) stp->finaOrgnCode[0].arr);
  uvDebug("은행지점코드           -NC_STR_016[0] = [%s]", (char *) stp->bankBrchCode[0].arr);
  uvDebug("계좌_카드번호          -NC_STR_014[0] = [%s]", (char *) stp->acctCardNo  [0].arr);
  uvDebug("카드유효만료년월       -NC_STR_015[0] = [%s]", (char *) stp->cardVlidEdym[0].arr);
  uvDebug("계좌_카드소유자명      -NC_STR_017[0] = [%s]", (char *) stp->cardOwnrName[0].arr);
  uvDebug("계좌_카드소유자주민번호-NC_STR_018[0] = [%s]", (char *) stp->cardOwnrRrno[0].arr);
  uvDebug("고객ID                 -NC_STR_021[0] = [%s]", (char *) stp->crwcustId   [1].arr);
  uvDebug("금융기관구분           -NC_STR_023[0] = [%s]", (char *) stp->finaOrgnDvsn[1].arr);
  uvDebug("금융기관코드           -NC_STR_022[0] = [%s]", (char *) stp->finaOrgnCode[1].arr);
  uvDebug("은행지점코드           -NC_STR_026[0] = [%s]", (char *) stp->bankBrchCode[1].arr);
  uvDebug("계좌_카드번호          -NC_STR_024[0] = [%s]", (char *) stp->acctCardNo  [1].arr);
  uvDebug("계속보험료 카드유효년월-NC_STR_025[0] = [%s]", (char *) stp->cardVlidEdym[1].arr);
  uvDebug("계속보험료 소유자명    -NC_STR_029[0] = [%s]", (char *) stp->cardOwnrName[1].arr);
  uvDebug("계속보험료 주민번호    -NC_STR_030[0] = [%s]", (char *) stp->cardOwnrRrno[1].arr);
  uvDebug("이체희망일             -NC_STR_027[0] = [%s]", (char *) stp->trnfHopeDd  [1].arr);
  uvDebug("계속보험료납입         -NC_STR_028[0] = [%s]", (char *) stp->cnttRcwcUsdv[0].arr);
  uvDebug("계약자지급금수령       -NC_STR_028[1] = [%s]", (char *) stp->cnttRcwcUsdv[1].arr);
  uvDebug("신계약(부활)보험료반환 -NC_STR_028[2] = [%s]", (char *) stp->cnttRcwcUsdv[2].arr);



  /*-----------------------------*/
  /* 상품소개동의여부 동의고객 */
  /*-----------------------------*/

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300in65SpInClear(&dencApl300in65SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dencApl300in65SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(DENC_APL300IN65_SP_RQSIZE,DBCURSOR_CLOSE);

  /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
     OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
  dencApl300in65SpOutClear(dencApl300in65SpOut,DENC_APL300IN65_SP_RQSIZE);

  /* DBIO module 호출                                             */

  dencApl300in65Sp(&basicParam,&dencApl300in65SpIn,dencApl300in65SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300IN65_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300IN65_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  uvDebug("%d 건 처리 종료\n",    basicParam.rpSize);

  stp->cinCustCnt = basicParam.rpSize;

  uvDebug("stp->cinCustCnt = [%f]",stp->cinCustCnt); /* 동의 대상건 입력건수 */

  /* 상품소개동의여부 동의고객 */
  for (ii = 0; ii < stp->cinCustCnt; ii++) {

    COPYVAR(stp->cinCustId   [ii] , dencApl300in65SpOut[ii].custId      ); /* 고객ID                     - NC_STR_210 */
    COPYVAR(stp->cinAgreYn   [ii] , dencApl300in65SpOut[ii].gdinAgyn    ); /* 상품소개 수집이용 동의여부 - NC_STR_212 */
    COPYVAR(stp->cntaMetdDvsn[ii] , dencApl300in65SpOut[ii].cntaMetdDvsn); /* 상품소개 연락방식구분      - NC_STR_020 */
    (       stp->agreRqstTerm[ii] = dencApl300in65SpOut[ii].agreRqstTerm); /* 상품소개 동의신청기간      - NC_DOU_019 */

    COPYVAR(stp->cinOferAgreYn [ii] , dencApl300in65SpOut[ii].gdinOferYn);   /* 상품소개 제공 동의여부     - NC_STR_070 */
    COPYVAR(stp->AnalAgreYn    [ii] , dencApl300in65SpOut[ii].cuanCollYn);   /* 고객분석 수집이용 동의여부 - NC_STR_107 */
    (       stp->AnalRqstTerm  [ii] = dencApl300in65SpOut[ii].cuanAgreMnth); /* 고객분석 동의신청기간      - NC_DOU_070 */
    COPYVAR(stp->AnalOferAgreYn[ii] , dencApl300in65SpOut[ii].cuanOferYn);   /* 고객분석 제공 동의여부     - NC_STR_108 */

    COPYVAR(stp->AgreSmsAgYn   [ii] , dencApl300in65SpOut[ii].smsRecvYn);    /* 문자 수신 동의여부         - NC_STR_234 */
    COPYVAR(stp->AgreEmailAgYn [ii] , dencApl300in65SpOut[ii].mailRecvYn);   /* 이메일 수신 동의여부       - NC_STR_235 */


    uvDebug("고객ID                     - NC_STR_210[%d] = [%s]",ii, (char *) stp->cinCustId   [ii].arr);
    uvDebug("상품소개 수집이용 동의여부 - NC_STR_212[%d] = [%s]",ii, (char *) stp->cinAgreYn   [ii].arr);
    uvDebug("상품소개 연락방식구분      - NC_STR_020[%d] = [%s]",ii, (char *) stp->cntaMetdDvsn[ii].arr);
    uvDebug("상품소개 동의신청기간      - NC_DOU_019[%d] = [%f]",ii,          stp->agreRqstTerm[ii]    );

    uvDebug("상품소개 제공 동의여부     - NC_STR_070[%d] = [%s]",ii, (char *) stp->cinOferAgreYn [ii].arr);
    uvDebug("고객분석 수집이용 동의여부 - NC_STR_107[%d] = [%s]",ii, (char *) stp->AnalAgreYn    [ii].arr);
    uvDebug("고객분석 동의신청기간      - NC_DOU_070[%d] = [%f]",ii,          stp->AnalRqstTerm  [ii]    );
    uvDebug("고객분석 제공 동의여부     - NC_STR_108[%d] = [%s]",ii, (char *) stp->AnalOferAgreYn[ii].arr);

    uvDebug("문자 수신 동의여부         - NC_STR_234[%d] = [%s]",ii, (char *) stp->AgreSmsAgYn   [ii].arr);
    uvDebug("이메일 수신 동의여부       - NC_STR_235[%d] = [%s]",ii, (char *) stp->AgreEmailAgYn [ii].arr);
  }

  /* Default Value Setting */
  COPY   (stp->holoRecYn       , "N"     ); /* 자필녹취여부(녹취:Y) -NC_STR_211    */
  COPY   (stp->srvcRoutDvsn    , "TABELT"); /* 서비스 호출 경로     -NC_STR_046    */

  /* 바로 접수 여부 반영 */
  SVncapl300in1_dencUnctbldsc001Sp((char *) stp->polyNo.arr );


  uvDebug("SVncapl300in1_readData  End");

  return;

}


/************************************************************************
  Function Name : SVncapl300in1_dencUnctbldsc001Sp()
  Note          : TABLET 바로접수 여부 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencUnctbldsc001Sp(char *polyNo) {

  struct _denc_unctbldsc001_sp_in  dencUnctbldsc001SpIn;

  uvDebug("SVncapl300in1_dencUnctbldsc001Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencUnctbldsc001SpInClear(&dencUnctbldsc001SpIn);

  COPY(dencUnctbldsc001SpIn.dirtRecpYn  , "Y"            ); /* 바로접수여부   */
  COPY(dencUnctbldsc001SpIn.lastChmnMpno, uvGetUserID()  ); /* 최종변경자사번 */
  COPY(dencUnctbldsc001SpIn.pgmId       , "SVncapl300in1"); /* 프로그램ID     */
  COPY(dencUnctbldsc001SpIn.polyNo      , polyNo         ); /* 증권번호       */

  uvDebug("바로접수여부  =[%s]", (char *) dencUnctbldsc001SpIn.dirtRecpYn  .arr);
  uvDebug("최종변경자사번=[%s]", (char *) dencUnctbldsc001SpIn.lastChmnMpno.arr);
  uvDebug("프로그램ID    =[%s]", (char *) dencUnctbldsc001SpIn.pgmId       .arr);
  uvDebug("증권번호      =[%s]", (char *) dencUnctbldsc001SpIn.polyNo      .arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dencUnctbldsc001Sp(&basicParam,&dencUnctbldsc001SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_UNCTBLDSC001_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DENC_UNCTBLDSC001_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    uvDebug("태블릿 고지정보 없음");
  } else {
    uvDebug("바로 접수 처리=[%d]건",basicParam.rpSize);
  }

  uvDebug("SVncapl300in1_dencUnctbldsc001Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencSisadmctt003Sp()
  Note          : 증번별 펀드가입 정보 조회
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencSisadmctt003Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_sisadmctt_003_sp_out dencSisadmctt003SpOut[DENC_SISADMCTT_003_SP_RQSIZE];
  struct _denc_sisadmctt_003_sp_in  dencSisadmctt003SpIn;

  int ii;

  uvDebug("SVncapl300in1_dencSisadmctt003Sp  Start");


    COPYVAR(dencSisadmctt003SpIn.polyNo,  stp->polyNo); /* 증권번호 */

    /*------------------------------------------------------------------*
     * 비지니스 로직 기술부
     *------------------------------------------------------------------*/

    setInitDBIO(DENC_SISADMCTT_003_SP_RQSIZE,DBCURSOR_CLOSE);

    /* DBIO module을 호출하기 전 OUTPUT 변수들을 clear시킨다
       OUTPUT은 배열이므로 변수명과 크기를 넘긴다.ㅣ              */
    dencSisadmctt003SpOutClear(dencSisadmctt003SpOut,DENC_SISADMCTT_003_SP_RQSIZE);

    /* DBIO module 호출                                             */
    dencSisadmctt003Sp(&basicParam,&dencSisadmctt003SpIn,dencSisadmctt003SpOut);

    /* DBIO module 호출 결과 확인                                   */
    if (getCDALResult() != SQL_OK) {
      /* DBIO Error Message 에 Function name을 add한다.           */
      setDBIOErrMsg(fnName);
      /* 필요한 경우에만 ROOLBACK 처리한다.                       */
      EXEC SQL ROLLBACK;

      uvDebug("DBIO(DENC_SISADMCTT_003_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_SISADMCTT_003_SP) 호출 Error.", getCDALErrMsg());
    }

  (       stp->fndCnt       = basicParam.rpSize);/* I :펀드개수                */

  for (ii = 0; ii < basicParam.rpSize; ii++) {
    COPYVAR(stp->joinFundCode[ii] , dencSisadmctt003SpOut[ii].fundCode); /* I :펀드코드                */
    (       stp->joinRato    [ii] = dencSisadmctt003SpOut[ii].joinRato); /* I :펀드가입비율            */
  }

  uvDebug("SVncapl300in1_dencSisadmctt003Sp  End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_CMCP_CreateAcctRequest_CC()
  Note          : 계속보험료입력시 계좌등록신청 데이터 생성 (2016.06.24)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMCP_CreateAcctRequest_CC(struct stp_SVncapl300in1 *stp) {

  uvDebug("SVncapl300in1_CMCP_CreateAcctRequest_CC  Start");

  int   retval    = 0;
  char  serverDvsn[ 1+1];
  char  operYn  [MAX_VALUE_LEN];                                 /* 시행여부 */
  char  ipAddress [15+1];

  memset(ipAddress  , 0x00 ,sizeof(ipAddress ));
  memset(serverDvsn , 0x00 ,sizeof(serverDvsn));
  memset(operYn     , 0x00, sizeof(operYn    ));

  if(hostNameToServer (ipAddress, serverDvsn)==FAIL) {/* serverDvsn - R(운영),Q(QA),D(DEV),E(ERROR) */
    uvDebug("hostNameToServer 함수 호출 에러");
  }

  retval = uvRuleBase("NC_kftcAgreOperYn", "", serverDvsn, (char *) stp->crntDate.arr, operYn);
  uvDebug("NC_kftcRgstOperYn's retval ==>[%d],operYn ==>[%s]",retval,operYn);
  if (retval != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("금융결재원 출금이체 계좌동의자료구분 개정 시행에 따른 업무 적용여부 Rule 호출 오류");
    appReturnCode = 8989;
    SVC_CLOSE(APPERR, appReturnCode, 0,  "금융결재원 출금이체동의자료 시행 업무 적용Rule 호출오류", "SVncapl300in1");
  }

  if (strncmp(operYn , "Y" , 1) !=0 ) {
    uvDebug("금융결재원 출금이체 계좌동의 시행여부(NC_kftcAgreOperYn) = [%s] End",  operYn);
    return;
  }

  CMCP_CreateAcctRequestS  cars;  /* 계좌등록신청저장 Struct */

  memset(&cars ,   0x00,   sizeof(CMCP_CreateAcctRequestS));
  strcpy(cars.rqstDate    , (char *)stp->crntDate       .arr);
  strcpy(cars.admnNoDvsn  ,         "1"                     );
  strcpy(cars.admnNo      , (char *)stp->polyNo         .arr);
  strcpy(cars.rqstDvsn    ,         "1"                     );
  strcpy(cars.acctNo      , (char *)stp->acctCardNo  [1].arr);
  strcpy(cars.finaOrgnCode, (char *)stp->finaOrgnCode[1].arr);
  /*strcpy(cars.srvcKindCode,         "32"                    ); 조성진 요청으로 미입력 */
  strcpy(cars.trrvBsnsDvsn,         "CP"                    );
  strcpy(cars.dlngBsnsDvsn,         "NC"                    );
  strcpy(cars.dlngOrgnCode, (char *)stp->clltOrgnCode   .arr);
  strcpy(cars.dlngManMpno ,         uvGetUserID()           );
  if (strcmp((char *) stp->imtyRecpYn.arr, "Y") == 0) {  /* TABLET 청약 */
    strcpy(cars.agreDataDvsn, "3"); /* I 동의자료구분 = '일반인증서' */
  } else if (strcmp((char *)stp->agreDataDvsn[1].arr, "")==0) {
    strcpy(cars.agreDataDvsn, "1");  /* 값이없으면 "서면" */
  } else {
    strcpy(cars.agreDataDvsn, (char *)stp->agreDataDvsn[1].arr);
  }

  if (strcmp((char *) stp->agreDataAddr[1].arr,"")==0) {
    strcpy(cars.agreDataAddr , (char *) stp->polyNo.arr); /* I 동의자료주소 */
  } else {
    strcpy(cars.agreDataAddr , (char *) stp->agreDataAddr[1].arr); /* I 동의자료주소 */
  }
  strcpy(cars.recpDvsnCode,         "5"                     );
  strcpy(cars.useOrgnCode , (char *)stp->finaOrgnCode[1].arr); /* 이용기관코드를 은행코드로(조성진) */
  strcpy(cars.payrNo      , (char *)stp->polyNo        .arr);

  uvDebug("신청일자       = [%s]", cars.rqstDate    );
  uvDebug("이용기관코드   = [%s]", cars.useOrgnCode );
  uvDebug("관리번호구분   = [%s]", cars.admnNoDvsn  );
  uvDebug("관리번호       = [%s]", cars.admnNo      );
  uvDebug("납부자번호     = [%s]", cars.payrNo      );
  uvDebug("신청구분       = [%s]", cars.rqstDvsn    );
  uvDebug("계좌번호       = [%s]", cars.acctNo      );
  uvDebug("은행코드       = [%s]", cars.finaOrgnCode);
  uvDebug("서비스종류     = [%s]", cars.srvcKindCode);
  uvDebug("송수신업무구분 = [%s]", cars.trrvBsnsDvsn);
  uvDebug("처리업무구분   = [%s]", cars.finaOrgnCode);
  uvDebug("처리기관코드   = [%s]", cars.dlngOrgnCode);
  uvDebug("처리자사번     = [%s]", cars.dlngManMpno );
  uvDebug("동의자료구분   = [%s]", cars.agreDataDvsn);
  uvDebug("동의자료주소   = [%s]", cars.agreDataAddr);
  uvDebug("접수처구분코드 = [%s]", cars.recpDvsnCode);

  if (CMCP_CreateAcctRequest_CC(&cars) == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("계속보험료 계좌등록동의자료 저장 오류");
    appReturnCode = 8989;
    SVC_CLOSE(APPERR, appReturnCode, 0,  "계속보험료 계좌등록동의자료 저장 오류", "SVncapl300in1");
  }

  COPY (stp->rqstSeqNo[1] , cars.rqstSeqNo);

  uvDebug("신청일련번호 = [%s]", stp->rqstSeqNo[1].arr);

  uvDebug("SVncapl300in1_CMCP_CreateAcctRequest_CC  End");
}

/************************************************************************
  Function Name : SVncapl300in1_dencScsscm010032Sp()
  Note          : 예금주실명번호종류 조회 (2016.06.24)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencScsscm010032Sp(struct stp_SVncapl300in1 *stp, int ii) {

  uvDebug("SVncapl300in1_dencScsscm010032Sp  Start");

  struct _denc_scsscm010_032_sp_in  dencScsscm010032SpIn ;
  struct _denc_scsscm010_032_sp_out dencScsscm010032SpOut;

  dencScsscm010032SpInClear (&dencScsscm010032SpIn );
  dencScsscm010032SpOutClear(&dencScsscm010032SpOut);

  COPYVAR(dencScsscm010032SpIn.custId,  stp->crwcustId[ii]); /* 고객ID */

  uvDebug("stp->crwcustId[%d] = [%s]", ii, stp->crwcustId[ii].arr);

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencScsscm010032Sp(&basicParam,&dencScsscm010032SpIn,&dencScsscm010032SpOut);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO( DENC_SCSSCM010_032_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO( DENC_SCSSCM010_032_SP) 호출 Error.", getCDALErrMsg());
  }

  if (basicParam.rpSize == 0) {
    EXEC SQL ROLLBACK;
    uvDebug("예금주의 고객 데이터가 존재하지 않습니다");
    appReturnCode = 8989;
    SVC_CLOSE(APPERR, appReturnCode, 0,  "예금주의 고객 데이터가 존재하지 않습니다", "SVncapl300in1");
  }

  if (strcmp((char *) dencScsscm010032SpOut.custDvcd.arr, "1")==0) { /* 개인 */
    COPY(stp->dpsrDvsn[ii], "0");
  } else {
    COPY(stp->dpsrDvsn[ii], "1");
  }

  uvDebug("stp->dpsrDvsn[%d] = [%s]", ii, stp->dpsrDvsn[ii].arr);

  uvDebug("SVncapl300in1_dencScsscm010032Sp  End");
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in67Sp ()
  Note          : 연금정보 수정
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in67Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in67Sp";

  struct _denc_apl300in67_sp_in  inSt;

  char    scndAnpyStdt[8+1];
  double  scndAnpyStag     ; /* 연금개시연령 */

  memset(scndAnpyStdt, 0x00, sizeof(scndAnpyStdt));

  uvDebug("%s start", fnName1);

  if (SVncapl300in1_dencApl300vw24Sp(stp, &scndAnpyStag) == FAIL) {
    uvDebug("제2연금지급개시연령 조회결과 없음");
    return;
  }

  /**************************************************************************/
  /*  제2연금지급개시연령 계산                                              */
  /**************************************************************************/
    uvDebug("연령과 제2연금지급개시 시점차이 = [%.0f]", scndAnpyStag);

  if (SVncapl300in1_scndAnpyStdt(stp,(int) scndAnpyStag,scndAnpyStdt) == FAIL) {
    EXEC SQL ROLLBACK;
    uvDebug("연금개시일자 계산 중 오류");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, "연금개시일자 계산 중 오류", "SVncapl300in1");
  }

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in67SpInClear (&inSt );

  COPY   (inSt.lastChmnMpno, uvGetUserID()       ); /* 최종변경자사번 */
  COPY   (inSt.pgmId       , uvGetServiceName()  ); /* 프로그램ID     */
  COPYVAR(inSt.polyNo      , stp->polyNo         ); /* 증권번호       */
  COPY   (inSt.scndAnpyStdt, scndAnpyStdt        ); /* 제2연금지급시작일자 */
  COPYVAR(inSt.anntRqstDate, stp->cnttDate       ); /* 연금신청일자   */

  uvDebug("최종변경자사번       = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID           = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("증권번호             = [%s]",(char *) inSt.polyNo      .arr);
  uvDebug("제2연금지급시작일자  = [%s]",(char *) inSt.scndAnpyStdt.arr);
  uvDebug("연금신청일자         = [%s]",(char *) inSt.anntRqstDate.arr);

  dencApl300in67Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN67_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN67_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

  return;

}

/******************************************************************************
 * Function Name : SVncapl300in1_scndAnpyStdt()                                *
 * Note          : 제2연금지급시작일자 산출                                   *
 * Parameters    : st_apl100                                                  *
 * Return Value  : NONE                                                       *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int SVncapl300in1_scndAnpyStdt(struct stp_SVncapl300in1 *stp,int ageCha, char *scndAnpyStdt) {

  int     rtn    = 0;
  int     len    = 0;

  char    start_date[6+1]; /* YYYYMM */
  char    rtn_date[6+1]; /* YYYYMM */
  char    after_date[8 + 1];                                      /* 익영업일 */
  char    today_date[8 + 1];
  char    dd[1+1];

  memset(start_date, 0x00, sizeof(start_date));
  memset(rtn_date, 0x00, sizeof(rtn_date));

  /*  계약년월+연령 산출                                                */
  memset(start_date, 0x00, sizeof(start_date));
  strncpy(start_date, (char *) stp->cnttDate.arr, 6);

  uvDebug("ageCha=[%d]",ageCha);

  /*  연금개시월   200403 => 200404                  */
  rtn = CMUV_getDateByMonth_CC(start_date, ageCha*12, rtn_date);

  if (rtn != 1) {
    EXEC SQL ROLLBACK;
    uvDebug("기준년월+1 계산중 오류입니다");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, "기준년월+1 계산중 오류입니다", "SVncapl300in1");

    return FAIL;
  }

  /*  계약년월+1 산출  200404 => 20040401                */
  sprintf(today_date, "%6.6s01", rtn_date);

  /*  말일자 산출      20040401 => 20040430              */
  rtn = CMUV_getEndDateOfMonth_CC(today_date, after_date);

  if (rtn != 1) {
    EXEC SQL ROLLBACK;
    uvDebug("제2연금지급시작일자 기준년월+1 계산중 오류입니다");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, "제2연금지급시작일자 기준년월+1 계산중 오류입니다", "SVncapl300in1");

    return FAIL;
  }

  len = ST_SubstrTo(dd, (char *) stp->cnttDate.arr, 6, 8);
  uvDebug("len=[%d].dd=[%s]",len, dd);

  /* scndAnpyStdt */
  memset(scndAnpyStdt, 0x00, sizeof(scndAnpyStdt));
  strcpy(scndAnpyStdt, rtn_date);
  strncat(scndAnpyStdt, dd, 2);
  /*      strncat((char *)stp->anntPaymStdt.arr, "01", 2);*/

  /*  날짜 비교 : 20040431 > 20040430 =>
                  2004년4월31일 미존재하므로 말일자로 치환 */
  if (atoi(scndAnpyStdt) > atoi(after_date)) {
    strcpy(scndAnpyStdt, after_date);
  }

  uvDebug("제2연금지급시작일자 = [%s]",scndAnpyStdt);


  return SUCCESS;
}

/******************************************************************************
 * Function Name : SVncapl300in1_dencApl300vw24Sp()                           *
 * Note          : 제2연금개시연령 조회                                       *
 * Parameters    : st_apl100                                                  *
 * Return Value  : NONE                                                       *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int SVncapl300in1_dencApl300vw24Sp(struct stp_SVncapl300in1 *stp, double *scndAnpyStag) {

  struct _denc_apl300vw24_sp_in  dencApl300vw24SpIn;
  struct _denc_apl300vw24_sp_out dencApl300vw24SpOut;

  uvDebug("SVncapl300in1_dencApl300vw24Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300vw24SpInClear(&dencApl300vw24SpIn);

  COPYVAR(dencApl300vw24SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencApl300vw24SpOutClear(&dencApl300vw24SpOut);

  /* DBIO module 호출                                             */

  dencApl300vw24Sp(&basicParam,&dencApl300vw24SpIn,&dencApl300vw24SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300VW24_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300VW24_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    return FALSE;
  }

  (*scndAnpyStag = dencApl300vw24SpOut.scndAnpyStag);

  uvDebug("제2연금개시연령 = [%f]", *scndAnpyStag);

  uvDebug("SVncapl300in1_dencApl300vw24Sp  End");

  return SUCCESS;
}

/******************************************************************************
 * Function Name : SVncapl300in1_dcncApl300vw25Sp()                           *
 * Note          : mdm 동기화 실패 고객정보 저장                              *
 * Parameters    : st_apl100                                                  *
 * Return Value  : NONE                                                       *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int SVncapl300in1_dcncApl300vw25Sp(struct stp_SVncapl300in1 *stp, char **ids, int countIds) {

  int ii;

  struct _dcnc_apl300vw25_sp_in  dcncApl300vw25SpIn[DCNC_APL300VW25_SP_RQSIZE];

  uvDebug("SVncapl300in1_dcncApl300vw25Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300vw25SpInClear(dcncApl300vw25SpIn, DCNC_APL300VW25_SP_RQSIZE);

   /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  for (ii = 0; ii < countIds; ii++) {
    COPY   (dcncApl300vw25SpIn[ii].custId      , ids[ii]                ); /* 고객ID           */
    COPY   (dcncApl300vw25SpIn[ii].lastChmnMpno, uvGetUserID()           ); /* 최종변경자사번   */
    COPY   (dcncApl300vw25SpIn[ii].pgmId      , "SVncapl300in1"         ); /* 프로그램ID       */
    COPYVAR(dcncApl300vw25SpIn[ii].polyNo      , stp->polyNo             ); /* 증권번호         */
    COPY   (dcncApl300vw25SpIn[ii].erroMesg    , "신계약청약서접수시 동기화오류"         ); /* 에러메세지       */


    uvDebug("고객ID               = [%d][%s]",ii,(char *) dcncApl300vw25SpIn[ii].custId      .arr);
    uvDebug("최종변경자사번       = [%d][%s]",ii,(char *) dcncApl300vw25SpIn[ii].lastChmnMpno.arr);
    uvDebug("프로그램ID           = [%d][%s]",ii,(char *) dcncApl300vw25SpIn[ii].pgmId       .arr);
    uvDebug("증권번호             = [%d][%s]",ii,(char *) dcncApl300vw25SpIn[ii].polyNo      .arr);
    uvDebug("에러메세지           = [%d][%s]",ii,(char *) dcncApl300vw25SpIn[ii].erroMesg    .arr);
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/
  setInitDBIO(countIds,DBCURSOR_CLOSE);

  uvDebug("countIds : [%d]", countIds);

  /* DBIO module 호출                                             */

  dcncApl300vw25Sp(&basicParam,dcncApl300vw25SpIn);

  uvDebug("getCDALResult() : [%d]", getCDALResult());

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300VW25_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DCNC_APL300VW25_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  uvDebug("SVncapl300in1_dcncApl300vw25Sp  End");

  return SUCCESS;
}

/******************************************************************************
 * Function Name : SVncapl300in1_dencApl300vw28Sp()                           *
 * Note          : 기대여명형 연금 보증기간 조회                              *
 * Parameters    : st_apl100                                                  *
 * Return Value  : NONE                                                       *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int SVncapl300in1_dencApl300vw28Sp(struct stp_SVncapl300in1 *stp) {

  struct _denc_apl300vw28_sp_in  dencApl300vw28SpIn;
  struct _denc_apl300vw28_sp_out dencApl300vw28SpOut;

  double  gurtPaymCalc = 0;
  double  scndAnpyStag = 0; /* 연금개시연령 */

  uvDebug("SVncapl300in1_dencApl300vw28Sp  Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencApl300vw28SpInClear(&dencApl300vw28SpIn);

  COPYVAR(dencApl300vw28SpIn.polyNo,  stp->polyNo);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  dencApl300vw28SpOutClear(&dencApl300vw28SpOut);

  /* DBIO module 호출                                             */

  dencApl300vw28Sp(&basicParam,&dencApl300vw28SpIn,&dencApl300vw28SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL300VW28_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL300VW28_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize == 0) {
    return FALSE;
  }

  uvDebug("기대여명형 보증지급기간 = [%f]", dencApl300vw28SpOut.dcsnGupyTerm);

  uvDebug("연금지급조회요청코드=[%s],주피연령=[%f]", (char *) stp->sintStagIqcd.arr,stp->joinAge[1]);

  if (strncmp((char *) stp->sintStagIqcd.arr, "N", 1) == 0) {
    scndAnpyStag = stp->joinAge[1] + atoi((char *) stp->sintStagIqcd.arr+1);
    uvDebug("년 기준 연금개시연령= [%.0f]", scndAnpyStag);
  } else {
    scndAnpyStag = atoi((char *) stp->sintStagIqcd.arr+1);
    uvDebug("세 기준 연금개시연령= [%.0f]", scndAnpyStag);
  }

  if (strcmp((char *) stp->cnttDate.arr, "20190330") < 0) {
    /* MAX(5, (기대여명기간+보험나이-연금개시)) */
    uvDebug("기대여명[%f]+보험나이[%f]-연금개시연령[%f]", stp->lfepYear[1],stp->joinAge[1], scndAnpyStag);
    gurtPaymCalc = stp->lfepYear[1] + stp->joinAge[1] - scndAnpyStag;
  } else {
    /* MAX(5, 연금개시기대여명기간) */
    uvDebug("연금개시기대여명기간[%f]", stp->anntLfepYear);
    gurtPaymCalc = stp->anntLfepYear;
  }

  /* 최소기간 5년 적용 */
  if(gurtPaymCalc < 5) {
    gurtPaymCalc = 5;
  }

  uvDebug("기대여명형 보증기간 재산출 = [%0.f]", gurtPaymCalc);

  if (!dequal(gurtPaymCalc,dencApl300vw28SpOut.dcsnGupyTerm,0.00000001)) {
    uvDebug("발행,접수시 만연령 상이");
    EXEC SQL ROLLBACK;
    uvDebug("발행,접수시 만연령 상이");
    appReturnCode = 4899;
    SVC_CLOSE(APPERR, appReturnCode, 0, \
        "발행,접수시 만연령 상이", "SVncapl300in1");
  }

  uvDebug("SVncapl300in1_dencApl300vw28Sp  End");

  return SUCCESS;
}


/************************************************************************
  Function Name : SVncapl300in1_dencUmascm020004Sp()
  Note          : 가망 고객 상세정보 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencUmascm020004Sp(struct stp_SVncapl300in1 *stp, int ii) {
  struct _denc_umascm020_004_sp_in  dencUmascm020004SpIn;

  uvDebug("SVncapl300in1_dencUmascm020004Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dencUmascm020004SpInClear(&dencUmascm020004SpIn);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dencUmascm020004SpIn.hpRecvYn     , stp->AgreSmsAgYn  [ii]); /* 핸드폰수신여부         */
  COPY   (dencUmascm020004SpIn.hpReynChmn   , uvGetUserID()         ); /* 휴대폰수신여부변경자   */
  COPY   (dencUmascm020004SpIn.hpReynChyn   , "Y"                   ); /* 휴대폰수신여부변경여부 */
  COPYVAR(dencUmascm020004SpIn.emal1Reyn    , stp->AgreEmailAgYn[ii]); /* E-MAIL1수신여부        */
  COPY   (dencUmascm020004SpIn.mailReynChmn , uvGetUserID()         ); /* 이메일수신여부변경자   */
  COPY   (dencUmascm020004SpIn.mailReynChyn , "Y"                   ); /* 이메일수신여부변경여부 */
  COPYVAR(dencUmascm020004SpIn.wrspLpno     , stp->clltLpPrno       ); /* 전담설계사고유번호     */
  COPYVAR(dencUmascm020004SpIn.custId       , stp->cinCustId    [ii]); /* 고객ID                 */

  uvDebug("핸드폰수신여부        =[%s]", dencUmascm020004SpIn.hpRecvYn    .arr);
  uvDebug("휴대폰수신여부변경자  =[%s]", dencUmascm020004SpIn.hpReynChmn  .arr);
  uvDebug("휴대폰수신여부변경여부=[%s]", dencUmascm020004SpIn.hpReynChyn  .arr);
  uvDebug("E-MAIL1수신여부       =[%s]", dencUmascm020004SpIn.emal1Reyn   .arr);
  uvDebug("이메일수신여부변경자  =[%s]", dencUmascm020004SpIn.mailReynChmn.arr);
  uvDebug("이메일수신여부변경여부=[%s]", dencUmascm020004SpIn.mailReynChyn.arr);
  uvDebug("전담설계사고유번호    =[%s]", dencUmascm020004SpIn.wrspLpno    .arr);
  uvDebug("고객ID                =[%s]", dencUmascm020004SpIn.custId      .arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(1,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dencUmascm020004Sp(&basicParam,&dencUmascm020004SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_UMASCM020_004_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DENC_UMASCM020_004_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

//  대상건이 없을 경우 일단 무시
//  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
//  if (basicParam.rpSize == 0) {
//    EXEC SQL ROLLBACK;
//    uvDebug("고객정보 상세 수정대상 건이 없습니다");
//    appReturnCode = 4899;
//    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
//    SVC_CLOSE(APPERR, appReturnCode, 0, \
//        "고객정보 상세 수정대상 건이 없습니다", "SVncapl300in1");
//  }

  uvDebug("SVncapl300in1_dencUmascm020004Sp End");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_CMCP_kcredit_CC()
  Note          : iCIS지급이력 조회 (2018.04.09)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_CMCP_kcredit_CC(int telgDvsn, int telgLeng, int mnthCntA,int mnthCntB,struct stp_SVncapl300in1 *stp) {

  int   ii;
  uvDebug("[SVncapl300in1_CMCP_kcredit_CC] begin");

  ST_kcredit  kcredit;

  uvDebug("계약관계자 crmCnt = [%f]", stp->crmCnt);

  for (ii = 0; ii < stp->crmCnt; ii++) {
    memset(&kcredit, 0x00, sizeof(kcredit));

    kcredit.telgDvsn   = telgDvsn;
    kcredit.telgLength = telgLeng-13;
    kcredit.mnthCnt    = mnthCntA;
    kcredit.mnthCntA   = mnthCntA;
    kcredit.mnthCntB   = mnthCntB;

    if (strncmp((char *) stp->custRoleCode[ii].arr, "21", 2) == 0 ||
        strncmp((char *) stp->custRoleCode[ii].arr, "22", 2) == 0 ||
        strncmp((char *) stp->custRoleCode[ii].arr, "23", 2) == 0 ||
        strncmp((char *) stp->custRoleCode[ii].arr, "24", 2) == 0 ||
        strncmp((char *) stp->custRoleCode[ii].arr, "28", 2) == 0    ) {

      strcpy(kcredit.rsdnRgstNo , (char*)stp->custRrno[ii].arr); /* 주민등록번호 */
      uvDebug("IN 주민번호 복호화처리 이전 = [%s]", kcredit.rsdnRgstNo);
      uvDecryptRrno(kcredit.rsdnRgstNo);    /* 주민번호 복호화*/

      strcpy(kcredit.custId     , (char*)stp->custId[ii].arr );
    }

    strcpy(kcredit.admnNo     , (char*)stp->polyNo.arr );
    strcpy(kcredit.icisInqrDvsn , "02"         ); /* 01: hpuss, 02 : 청약서 접수 */
    strcpy(kcredit.saveYn       , "Y"          ); /* iCIS 조회결과 저장여부      */

    uvDebug("IN 전문구분코드             = [%d]", kcredit.telgDvsn);
    uvDebug("IN 전문길이                 = [%d]", kcredit.telgLength);
    uvDebug("IN 조회대상기간             = [%d]", kcredit.mnthCnt);
    uvDebug("IN 조회대상기간A            = [%d]", kcredit.mnthCntA);
    uvDebug("IN 조회대상기간B            = [%d]", kcredit.mnthCntB);
    uvDebug("IN 주민번호 복호화처리 이후 = [%s]", kcredit.rsdnRgstNo);
    uvDebug("IN 고객ID                   = [%s]", kcredit.custId      );
    uvDebug("IN 관리번호                 = [%s]", kcredit.admnNo      );
    uvDebug("IN iCIS조회구분             = [%s]", kcredit.icisInqrDvsn);
    uvDebug("IN 저장여부                 = [%s]", kcredit.saveYn      );

    if (CMNC_kcredit_CC(&kcredit)==FAIL) {
      EXEC SQL ROLLBACK;
      uvDebug("신정원 전문 송수신 에러 = [%d]", kcredit.retCode);
      appReturnCode = 4899;
      SVC_CLOSE(APPERR, appReturnCode, 0, "신정원 전문 송수신 에러", "SVncapl300in1");
    }
  }
  uvDebug("간편가입타사지급여부[%s]",kcredit.cnvnOtcmPvatYn);

  uvDebug("[SVncapl300in1_CMCP_kcredit_CC] END");

  return;
}

/************************************************************************
  Function Name : SVncapl300in1_dencApl100in57Sp()
  Note          : 부부CARE서비스 대상 여부
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dencApl100in57Sp(struct stp_SVncapl300in1 *stp, char *coupleYn) {

  struct _denc_apl100in57_sp_in  dencApl100in57SpIn;
  struct _denc_apl100in57_sp_out dencApl100in57SpOut;

  uvDebug("SVncapl300in1_dencApl100in57Sp  Start");

  memset(coupleYn,    0x00,   sizeof(coupleYn));

  setInitDBIO(1, DBCURSOR_CLOSE);

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.*/
  dencApl100in57SpInClear(&dencApl100in57SpIn);
  dencApl100in57SpOutClear(&dencApl100in57SpOut);

  /* DBIO module 호출하기전 FML -> input 변수 setting                 */
  COPYVAR(dencApl100in57SpIn.goodCodeDtal ,  stp->irkdCodeDtal); /* 상품코드_세 */
  COPYVAR(dencApl100in57SpIn.goodCodeItem ,  stp->irkdCodeItem); /* 상품코드_목 */
  COPYVAR(dencApl100in57SpIn.stddDate     ,  stp->cnttDate    ); /* 기준일자    */

  uvDebug("--------------------[부부CARE서비스 대상 여부]--------------------");
  uvDebug("상품코드_세 = [%s]"  , (char *) dencApl100in57SpIn.goodCodeDtal.arr);
  uvDebug("상품코드_목 = [%s]"  , (char *) dencApl100in57SpIn.goodCodeItem.arr);
  uvDebug("기준일자    = [%s]"  , (char *) dencApl100in57SpIn.stddDate    .arr);

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  /* DBIO module 호출                                             */

  dencApl100in57Sp(&basicParam,&dencApl100in57SpIn, &dencApl100in57SpOut);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROLLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_APL100IN57_SP) 호출 Error[%d], %s",\
                        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
                          "DBIO(DENC_APL100IN57_SP) 호출 Error.",  \
                          getCDALErrMsg());
  }

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */

  strcpy(coupleYn,   (char *) dencApl100in57SpOut.cuplCareYn.arr);

  uvDebug("coupleYn = [%s]",coupleYn);

  uvDebug("SVncapl300in1_dencApl100in57Sp  End");

  return;
}

/******************************************************************************
 * Function Name : SVncapl100in1_cnvnTypeSrch()                                *
 * Note          : 간편상품분류코드 조회                                      *
 * Parameters    : st_apl100                                                  *
 * Return Value  : NONE                                                       *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
void SVncapl300in1_cnvnTypeSrch(struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in_cnvnTypeSrch";

  struct _denc_smmnortyp_009_sp_in   dencSmmnortyp009SpIn;
  struct _denc_smmnortyp_009_sp_out  dencSmmnortyp009SpOut;

  uvDebug("%s Start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencSmmnortyp009SpInClear(&dencSmmnortyp009SpIn);
  dencSmmnortyp009SpOutClear(&dencSmmnortyp009SpOut);

  COPYVAR(dencSmmnortyp009SpIn.irkdCodeDtal, stp->irkdCodeDtal); /* 보종코드_세  */
  COPYVAR(dencSmmnortyp009SpIn.irkdCodeItem, stp->irkdCodeItem); /* 보종코드_목  */
  COPY   (dencSmmnortyp009SpIn.bsnsClsfCode, "NCAPL048"       ); /* 업무분류코드 */
  COPYVAR(dencSmmnortyp009SpIn.stddDate    , stp->cnttDate); /* 기준일자     */

  uvDebug("dencSmmnortyp009SpIn.irkdCodeDtal = [%s]", (char *) dencSmmnortyp009SpIn.irkdCodeDtal.arr);
  uvDebug("dencSmmnortyp009SpIn.irkdCodeItem = [%s]", (char *) dencSmmnortyp009SpIn.irkdCodeItem.arr);
  uvDebug("dencSmmnortyp009SpIn.bsnsClsfCode = [%s]", (char *) dencSmmnortyp009SpIn.bsnsClsfCode.arr);
  uvDebug("dencSmmnortyp009SpIn.stddDate     = [%s]", (char *) dencSmmnortyp009SpIn.stddDate    .arr);

  dencSmmnortyp009Sp(&basicParam, &dencSmmnortyp009SpIn, &dencSmmnortyp009SpOut);

  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROLLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_SMMNORTYP_009_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_SMMNORTYP_009_SP)) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("간편상품분류코드 = [%s]",(char *) dencSmmnortyp009SpOut.goodClsfCode.arr);

  COPYVAR(stp->cnvnGoodCscd, dencSmmnortyp009SpOut.goodClsfCode);

  uvDebug("stp->cnvnGoodCscd = [%s]",(char *) stp->cnvnGoodCscd.arr);

  uvDebug("%s END", fnName1);

  return ;
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in72Sp ()
  Note          : 양치서비스 정보 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in72Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in72Sp";

  struct _denc_apl300in72_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in72SpInClear (&inSt );

  COPYVAR(inSt.polyNo      , stp->polyNo         ); /* 증권번호       */
  COPY   (inSt.lastChmnMpno, uvGetUserID()       ); /* 최종변경자사번 */
  COPY   (inSt.pgmId       , uvGetServiceName()  ); /* 프로그램ID     */
  COPY   (inSt.rqstBsnsDvcd, "BTS"               ); /* 신청업무구분코드  */
  COPYVAR(inSt.dataItem1   , stp->bsthSvagYn   ); /* 양치서비스동의여부  */
  COPY   (inSt.dataItem2   , ""    );
  COPY   (inSt.dataItem3   , ""    );
  COPY   (inSt.dataItem4   , ""    );
  COPY   (inSt.dataItem5   , ""    );
  COPYVAR(inSt.strtDate    , stp->strtDate       ); /* 시작일자       */

  uvDebug("증권번호             = [%s]",(char *) inSt.polyNo      .arr);
  uvDebug("최종변경자사번       = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID           = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("신청업무구분코드     = [%s]",(char *) inSt.rqstBsnsDvcd.arr);
  uvDebug("양치서비스동의여부   = [%s]",(char *) inSt.dataItem1   .arr);
  uvDebug("시작일자             = [%s]",(char *) inSt.strtDate    .arr);

  dencApl300in72Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN72_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN72_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

  return;

}

/************************************************************************
  Function Name : SVncapl300in1_brshCnfmYnChk()
  Note          : 양치습관서비스동의서 발행 대상 여부 조회
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int SVncapl300in1_brshCnfmYnChk(struct stp_SVncapl300in1 *stp) {
  char* fnName1 = "SVncapl300in1_brshCnfmYnChk";

  uvDebug("※ [%s] start", fnName1);

  /* 변수선언 */
  struct _denc_cmncsudo52_sp_in  dencCmncsudo52SpIn;
  struct _denc_cmncsudo52_sp_out dencCmncsudo52SpOut;

  /* 초기화 */
  dencCmncsudo52SpInClear(&dencCmncsudo52SpIn);
  dencCmncsudo52SpOutClear(&dencCmncsudo52SpOut);
  setInitDBIO(DENC_CMNCSUDO52_SP_RQSIZE, DBCURSOR_CLOSE);

  /* 변수대입 */
  COPYVAR(dencCmncsudo52SpIn.polyNo, stp->polyNo);         /* 증권번호 */

  uvDebug("dencCmncsudo52SpIn.polyNo       = [%s]", dencCmncsudo52SpIn.polyNo      .arr);

  /* DBIO 실행 */
  dencCmncsudo52Sp(&basicParam, &dencCmncsudo52SpIn, &dencCmncsudo52SpOut);

  /* DBIO 실행결과 확인 */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROLLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_CMNCSUDO52_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_CMNCSUDO52_SP)) 호출 Error.", getCDALErrMsg());
  }

  COPYVAR(stp->brshCnfmYn, dencCmncsudo52SpOut.typeYn); /* 양치습관서비스동의서 첨부要 */
  uvDebug("stp->brshCnfmYn = [%s]",(char *) stp->brshCnfmYn.arr);

  uvDebug("※ [%s] end  ", fnName1);

  return TRUE;
}

/************************************************************************
  Function Name : SVncapl300in1_dcncApl300in54Sp()
  Note          : 간편가입 관련 정보 수정
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_dcncApl300in54Sp(struct stp_SVncapl300in1 *stp) {
  struct _dcnc_apl300in54_sp_in  dcncApl300in54SpIn[(int) stp->dsabTxcvCnt];

  int     ii  =   0;
  int     kk  =   0;

  uvDebug("SVncapl300in1_dcncApl300in54Sp Start");

  /* Input 데이터 변수 초기화 .배열이 아니므로 address를 넘긴다.      */
  dcncApl300in54SpInClear(dcncApl300in54SpIn,(int) stp->dsabTxcvCnt);

  for (ii = 0; ii < (int) stp->dsabTxcvCnt; ii++) {
    /* DBIO module 호출하기전 FML -> input 변수 setting                 */
    COPYVAR(dcncApl300in54SpIn[kk].polyNo       , stp->polyNo               );  /* 증권번호         */
    COPYVAR(dcncApl300in54SpIn[kk].custRoleCode , stp->dsabCustRoleCode [ii]);  /* 고객역할코드     */
    COPY   (dcncApl300in54SpIn[kk].lastChmnMpno , uvGetUserID()             );  /* 최종변경자사번   */
    COPY   (dcncApl300in54SpIn[kk].pgmId        , uvGetServiceName()        );  /* 프로그램ID       */
    COPYVAR(dcncApl300in54SpIn[kk].custId       , stp->dsabCustId       [ii]);  /* 고객ID           */
    COPYVAR(dcncApl300in54SpIn[kk].hndcDvsn     , stp->dsabDvcd         [ii]);  /* 장애구분         */
    if(strcmp((char *)stp->dsabDvcd[ii].arr,"A") == 0) {
      COPYVAR(dcncApl300in54SpIn[kk].hndcStrtDate , stp->strtDate             );  /* 장애시작일자     */
      COPY   (dcncApl300in54SpIn[kk].hndcEndDate  , "99991231"                );  /* 장애종료일자     */
    } else {
      COPYVAR(dcncApl300in54SpIn[kk].hndcStrtDate , stp->dsabStrtTerm     [ii]);  /* 장애시작일자     */
      COPYVAR(dcncApl300in54SpIn[kk].hndcEndDate  , stp->dsabEndTerm      [ii]);  /* 장애종료일자     */
    }

    COPYVAR(dcncApl300in54SpIn[kk].strtDate     , stp->strtDate             );  /* 시작일자         */
    COPYVAR(dcncApl300in54SpIn[kk].rqstDvsn     , stp->dsabCustRqstDvsn [ii]);  /* 고객신청구분     */
    COPYVAR(dcncApl300in54SpIn[kk].dlngDate     , stp->crntDate             );  /* 처리일자         */
    COPYVAR(dcncApl300in54SpIn[kk].dlngOrgnCode , stp->clltOrgnCode         );  /* 처리기관코드     */

    uvDebug("증권번호       =[%s]", dcncApl300in54SpIn[kk].polyNo      .arr);
    uvDebug("고객역할코드   =[%s]", dcncApl300in54SpIn[kk].custRoleCode.arr);
    uvDebug("최종변경자사번 =[%s]", dcncApl300in54SpIn[kk].lastChmnMpno.arr);
    uvDebug("프로그램ID     =[%s]", dcncApl300in54SpIn[kk].pgmId       .arr);
    uvDebug("고객ID         =[%s]", dcncApl300in54SpIn[kk].custId      .arr);
    uvDebug("장애구분       =[%s]", dcncApl300in54SpIn[kk].hndcDvsn    .arr);
    uvDebug("장애시작일자   =[%s]", dcncApl300in54SpIn[kk].hndcStrtDate.arr);
    uvDebug("장애종료일자   =[%s]", dcncApl300in54SpIn[kk].hndcEndDate .arr);
    uvDebug("시작일자       =[%s]", dcncApl300in54SpIn[kk].strtDate    .arr);
    uvDebug("고객신청구분   =[%s]", dcncApl300in54SpIn[kk].rqstDvsn    .arr);
    uvDebug("처리일자       =[%s]", dcncApl300in54SpIn[kk].dlngDate    .arr);
    uvDebug("처리기관코드   =[%s]", dcncApl300in54SpIn[kk].dlngOrgnCode.arr);

    kk++;
  }

  if(kk == 0) {
    uvDebug("장애인전용 세제전환특약 신청내용 없음");
    uvDebug("SVncapl300in1_dcncApl300in54Sp End");
    return;
  }

  /*------------------------------------------------------------------*
   * 비지니스 로직 기술부
   *------------------------------------------------------------------*/

  setInitDBIO(kk,DBCURSOR_CLOSE);

  /* DBIO module 호출                                             */

  dcncApl300in54Sp(&basicParam,dcncApl300in54SpIn);

  /* DBIO module 호출 결과 확인                                   */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName);
    /* 필요한 경우에만 ROOLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DCNC_APL300IN54_SP) 호출 Error[%d], %s",\
        cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, \
        "DBIO(DCNC_APL300IN54_SP) 호출 Error.",  \
        getCDALErrMsg());
  }

  uvDebug("SVncapl300in1_dcncApl300in54Sp End");

  return;
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in75Sp ()
  Note          : 초회보험료 수금방법 직접납입 시 초회가상계좌 정보 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in75Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in75Sp";

  struct _denc_apl300in75_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in75SpInClear (&inSt);

  COPYVAR(inSt.admnNo       , stp->polyNo         ); /* 관리번호              */
  COPY   (inSt.admnNoDvsn   , "1"                 ); /* 관리번호구분          */
  COPY   (inSt.imacRqstDvsn , "10"                ); /* 가상계좌요청구분      */
  COPY   (inSt.lastChmnMpno , uvGetUserID()       ); /* 최종변경자사번        */
  COPY   (inSt.pgmId        , uvGetServiceName()  ); /* 프로그램ID            */
  COPYVAR(inSt.rqstOrgnCode , stp->clltOrgnCode   ); /* 요청기관코드          */
  COPYVAR(inSt.aplcMpno     , stp->clltLpPrno     ); /* 신청자사번            */
  COPYVAR(inSt.rqstDate     , stp->crntDate       ); /* 신청일자              */
  COPYVAR(inSt.rqstTime     , stp->crntTimeHh24   ); /* 신청시간              */
  COPYVAR(inSt.finaOrgnCode , stp->finaOrgnCode[0]); /* 금융기관코드          */
         (inSt.fsvtSeqNo    = stp->fsvtSeqNo      ); /* 초회가상계좌일련번호  */
  COPY   (inSt.telgSeqNo    , ""                  ); /* 전문일련버호          */
         (inSt.totDmndAmt   = stp->fstiRrcvPrem   ); /* 총청구금액            */
  COPY   (inSt.dmndTrnfDvsn , "1"                 ); /* 청구이체구분          */
  COPYVAR(inSt.strtDate     , stp->strtDate       ); /* 시작일자              */

  uvDebug("관리번호             = [%s]",(char *) inSt.admnNo      .arr);
  uvDebug("관리번호구분         = [%s]",(char *) inSt.admnNoDvsn  .arr);
  uvDebug("최종변경자사번       = [%s]",(char *) inSt.imacRqstDvsn.arr);
  uvDebug("최종변경자사번       = [%s]",(char *) inSt.lastChmnMpno.arr);
  uvDebug("프로그램ID           = [%s]",(char *) inSt.pgmId       .arr);
  uvDebug("신청업무구분코드     = [%s]",(char *) inSt.rqstOrgnCode.arr);
  uvDebug("신청자사번           = [%s]",(char *) inSt.aplcMpno    .arr);
  uvDebug("신청일자             = [%s]",(char *) inSt.rqstDate    .arr);
  uvDebug("신청시간             = [%s]",(char *) inSt.rqstTime    .arr);
  uvDebug("금융기관코드         = [%s]",(char *) inSt.finaOrgnCode.arr);
  uvDebug("초회가상계좌일련번호 = [%d]",         inSt.fsvtSeqNo       );
  uvDebug("전문일련버호         = [%s]",(char *) inSt.telgSeqNo   .arr);
  uvDebug("총청구금액           = [%d]",         inSt.totDmndAmt      );
  uvDebug("청구이체구분         = [%s]",(char *) inSt.dmndTrnfDvsn.arr);
  uvDebug("시작일자             = [%s]",(char *) inSt.strtDate    .arr);

  dencApl300in75Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN75_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN75_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

  return;

}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in76Sp ()
  Note          : 초회가상계좌 일련번호 채번
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in76Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in76Sp";

  struct _denc_apl300in76_sp_in  inSt;
  struct _denc_apl300in76_sp_out outSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in76SpInClear (&inSt);
  dencApl300in76SpOutClear(&outSt);

  COPYVAR(inSt.finaOrgnCode , stp->finaOrgnCode[0]); /* 금융기관코드      */

  uvDebug("금융기관코드 = [%s]",(char *) inSt.finaOrgnCode.arr);

  dencApl300in76Sp(&basicParam, &inSt, &outSt);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN76_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN76_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  stp->fsvtSeqNo = outSt.fsvtSeqNo; /* 은행별 초회가상계좌 조회를 위한 일련번호 */

  uvDebug("%s end ===> SUCCESS", fnName1);

  return;

}

/************************************************************************
  Function Name : SVncapl300in1_sendAltkProc(struct stp_SVncapl300in1 *stp)
  Note          : 초회가상계좌 알림톡 발송(계약자)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_sendAltkProc(struct stp_SVncapl300in1 *stp) {

  char  reqNo[16+1]; /* 요청번호 */
  char  reqDt[8+1]; /* 요청일자 */
  int   retval = 0;
  char  sendTel[12+1];
  char  sendTitle[120+1];

  INITSTR(reqNo); /* 요청번호 */
  INITSTR(reqDt); /* 요청일자 */
  INITSTR(sendTel);
  INITSTR(reqDt);

  uvDebug("SVncapl300in1_sendAltkProc Start");

  struct _denc_apl300in77_sp_in  in_st;
  struct _denc_apl300in77_sp_out out_st[DENC_APL300IN77_SP_RQSIZE];

  dencApl300in77SpInClear   (&in_st);
  dencApl300in77SpOutClear  (out_st, DENC_APL300IN77_SP_RQSIZE);

  getUMSReqID(reqNo, reqDt);

  retval = uvRuleBase("NC_SmsSendTelMang", "", "NC1038" , sendTel , sendTitle);

  uvDebug("retval = [%d], sendTel = [%s], desc = [%s]", retval, sendTel, sendTitle);

  COPYVAR(in_st.polyNo      , stp->polyNo  );

  setInitDBIO(DENC_APL300IN77_SP_RQSIZE, DBCURSOR_CLOSE);

  dencApl300in77Sp(&basicParam, &in_st, out_st);

  if (getCDALResult() != SQL_OK) {
    uvDebug("DBIO(denc_apl300in77_sp) 호출 Error[%d], %s",cptReturnCode,getDBIOErrMsg());
  }

  if (basicParam.rpSize==0) {
  	uvDebug("알림톡 대상 조회 결과 없음. skip");
  	dencApl300in77SpClose();
  }else {
    char msgCten[3072+1];
    ST_altk altk;
    int i;

    for (i=0; i<basicParam.rpSize; i++) {
      INITSTR(msgCten);
      memset(&altk, 0x00, sizeof(altk));
      sprintf(msgCten, (char *) out_st[i].msgCten.arr, (char*) out_st[i].rcptNo.arr);

      COPY   (altk.lastChmnMpno, uvGetUserID()       );
      COPY   (altk.pgmId       , uvGetServiceName()  );
      COPY   (altk.altkDpcd    , "00018"             ); /* 알림톡부서코드(UMS 과금정산 부서코드) */
      COPY   (altk.tmplClcd    , "ANC00089"          ); /* 템플릿분류코드 */
      COPY   (altk.msgCten     , msgCten             ); /* 메세지내용 */
      COPYVAR(altk.rcptNo      , out_st[i].rcptNo    ); /* 수신자번호(암호화필수) */
      COPY   (altk.mesgStat    , "1"                 ); /* 메시지상태(1:전송대기, 2:결과대기, 3:완료, 7:승인전) */
      COPY   (altk.msgTitl     , "가상계좌발급알림톡[고객]"); /* 메세지제목 */
      COPY   (altk.sbstSendYn  , "Y"                 ); /* 대체발송여부(Y:대체발송) */
      COPY   (altk.sndrNo      , sendTel             ); /* 발신자번호(암호화필수) - RULE */
      COPY   (altk.rqstType    , "R"                 ); /* 요청형태(R:온라인, B:배치) */
      COPY   (altk.workType    , "LMS"               ); /* 작업형태(SMS/MMS) */
      COPYVAR(altk.umsCustId   , out_st[i].umsCustId ); /* UMS고객ID */
      COPY   (altk.umsJobCode  , "NC1038"            ); /* UMS_JOB코드 */
      COPYVAR(altk.rcptName    , out_st[i].rcptName  ); /* 수신자명 */
      COPYVAR(altk.etcTextFl1  , out_st[i].etcTextFl1); /* 대체SMS메세지 */

      if (CMNC_altkMsg_CC(&altk)==FAIL) {
        uvDebug("==>[%d][%s]", altk.retCode, altk.retMsg);
      }
    }
    dencApl300in77SpClose();
  }

  uvDebug("SVncapl300in1_sendAltkProc End");
}

/************************************************************************
  Function Name : SVncapl300in1_sendAltkProc2(struct stp_SVncapl300in1 *stp)
  Note          : 초회가상계좌 알림톡 발송(모집FP)
  Parameters    : (none)
  Return Value  : (none)
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void SVncapl300in1_sendAltkProc2(struct stp_SVncapl300in1 *stp) {

  char  reqNo[16+1]; /* 요청번호 */
  char  reqDt[8+1]; /* 요청일자 */
  int   retval = 0;
  char  sendTel[12+1];
  char  sendTitle[120+1];

  INITSTR(reqNo); /* 요청번호 */
  INITSTR(reqDt); /* 요청일자 */
  INITSTR(sendTel);
  INITSTR(reqDt);

  uvDebug("SVncapl300in1_sendAltkProc2 Start");

  struct _denc_apl300in78_sp_in  in_st;
  struct _denc_apl300in78_sp_out out_st[DENC_APL300IN78_SP_RQSIZE];

  dencApl300in78SpInClear   (&in_st);
  dencApl300in78SpOutClear  (out_st, DENC_APL300IN78_SP_RQSIZE);

  getUMSReqID(reqNo, reqDt);

  retval = uvRuleBase("NC_SmsSendTelMang", "", "NC1039" , sendTel , sendTitle);

  uvDebug("retval = [%d], sendTel = [%s], desc = [%s]", retval, sendTel, sendTitle);

  COPYVAR(in_st.polyNo      , stp->polyNo  );

  setInitDBIO(DENC_APL300IN78_SP_RQSIZE, DBCURSOR_CLOSE);

  dencApl300in78Sp(&basicParam, &in_st, out_st);

  if (getCDALResult() != SQL_OK) {
    uvDebug("DBIO(denc_apl300in78_sp) 호출 Error[%d], %s",cptReturnCode,getDBIOErrMsg());
  }

  if (basicParam.rpSize==0) {
  	uvDebug("알림톡 대상 조회 결과 없음. skip");
  	dencApl300in78SpClose();
  }else {
    char msgCten[3080+1];
    ST_altk altk;
    int i;

    for (i=0; i<basicParam.rpSize; i++) {
      INITSTR(msgCten);
      memset(&altk, 0x00, sizeof(altk));
      sprintf(msgCten, (char *) out_st[i].msgCten.arr, (char*) out_st[i].rcptNo.arr);

      COPY   (altk.lastChmnMpno, uvGetUserID()       );
      COPY   (altk.pgmId       , uvGetServiceName()  );
      COPY   (altk.altkDpcd    , "00018"             ); /* 알림톡부서코드(UMS 과금정산 부서코드) */
      COPY   (altk.tmplClcd    , "ANC00090"          ); /* 템플릿분류코드 */
      COPY   (altk.msgCten     , msgCten             ); /* 메세지내용 */
      COPYVAR(altk.rcptNo      , out_st[i].rcptNo    ); /* 수신자번호(암호화필수) */
      COPY   (altk.mesgStat    , "1"                 ); /* 메시지상태(1:전송대기, 2:결과대기, 3:완료, 7:승인전) */
      COPY   (altk.msgTitl     , "가상계좌발급알림톡[모집FP]"); /* 메세지제목 */
      COPY   (altk.sbstSendYn  , "Y"                 ); /* 대체발송여부(Y:대체발송) */
      COPY   (altk.sndrNo      , sendTel             ); /* 발신자번호(암호화필수) - RULE */
      COPY   (altk.rqstType    , "R"                 ); /* 요청형태(R:온라인, B:배치) */
      COPY   (altk.workType    , "LMS"               ); /* 작업형태(SMS/MMS) */
      COPYVAR(altk.umsCustId   , out_st[i].umsCustId ); /* UMS고객ID */
      COPY   (altk.umsJobCode  , "NC1039"            ); /* UMS_JOB코드 */
      COPYVAR(altk.rcptName    , out_st[i].rcptName  ); /* 수신자명 */
      COPYVAR(altk.etcTextFl1  , out_st[i].etcTextFl1); /* 대체SMS메세지 */

      if (CMNC_altkMsg_CC(&altk)==FAIL) {
        uvDebug("==>[%d][%s]", altk.retCode, altk.retMsg);
      }
    }
    dencApl300in78SpClose();
  }

  uvDebug("SVncapl300in1_sendAltkProc2 End");
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in79Sp ()
  Note          : 은행별 초회가상계좌번호 조회
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in79Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in79Sp";

  struct _denc_apl300in79_sp_in  inSt;
  struct _denc_apl300in79_sp_out outSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in79SpInClear (&inSt);
  dencApl300in79SpOutClear(&outSt);

  COPYVAR(inSt.finaOrgnCode , stp->finaOrgnCode[0]); /* 금융기관코드      */
         (inSt.fsvtSeqNo    = stp->fsvtSeqNo      ); /* 초회가상계좌일련번호  */

  uvDebug("금융기관코드 = [%s]"         ,(char *) inSt.finaOrgnCode.arr);
  uvDebug("초회가상계좌일련번호 = [%d]" ,inSt.fsvtSeqNo);

  dencApl300in79Sp(&basicParam, &inSt, &outSt);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN79_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN79_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  COPYVAR(stp->imagAcctNo, outSt.imagAcctNo); /* 은행별 초회가상계좌 조회 */
  uvDebug("stp->imagAcctNo = [%s]",(char *) stp->imagAcctNo.arr);

  PUTVAR(NC_STR_191,  0,  stp->imagAcctNo);

  uvDebug("%s end ===> SUCCESS", fnName1);

  return;

}

/******************************************************************************
  Function Name : SVncapl300in1_virtAcctDateChck ()
  Note          : 초회가상계좌번호 송금일자 체크
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_virtAcctDateChck (struct stp_SVncapl300in1 *stp) {
  if (strncmp((char *) stp->cnttDate.arr, (char *) stp->ftprRmtnDate.arr,  8) != 0) {
      EXEC SQL ROLLBACK;
      uvDebug("계약일자와 이체일자 상이로 입력이 불가합니다.");
      appReturnCode = 3571;
      /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
      SVC_CLOSE(APPERR, appReturnCode, 0, \
          "계약일자와 이체일자 상이로 입력이 불가합니다.", "SVncapl300in1");
  }
}

/******************************************************************************
  Function Name : SVncapl300in1_dencApl300in80Sp ()
  Note          : 출생예정일자 저장
  Parameters    :
  Return Value  : SUCCESS : 정상
                  FAIL    : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void SVncapl300in1_dencApl300in80Sp (struct stp_SVncapl300in1 *stp) {

  char   *fnName1    = "SVncapl300in1_dencApl300in80Sp";

  struct _denc_apl300in80_sp_in  inSt;

  uvDebug("%s start", fnName1);

  setInitDBIO(1, DBCURSOR_CLOSE);

  dencApl300in80SpInClear (&inSt );

  COPYVAR(inSt.polyNo      , stp->polyNo          ); /* 증권번호       */
  COPYVAR(inSt.bornPrrmDate, stp->brthExpcDate    ); /* 출생예정일자   */

  uvDebug("증권번호             = [%s]",(char *) inSt.polyNo      .arr);
  uvDebug("출생예정일자         = [%s]",(char *) inSt.bornPrrmDate.arr);

  dencApl300in80Sp(&basicParam, &inSt);

  uvDebug("** rpSize [%d]", basicParam.rpSize);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName1);
    EXEC SQL ROLLBACK;
    uvDebug("DBIO(DENC_APL300IN80_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_APL300IN80_SP) 호출 Error.", getCDALErrMsg());
  }

  uvDebug("%s end ===> SUCCESS", fnName1);

  return;

}

/************************************************************************
  Function Name : SVncapl300in1_cnvnInvdYn()
  Note          : 간편무효처리 대상 여부 조회
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
int SVncapl300in1_cnvnInvdYn(struct stp_SVncapl300in1 *stp) {
  char* fnName1 = "SVncapl300in1_brshCnfmYnChk";

  uvDebug("※ [%s] start", fnName1);

  /* 변수선언 */
  struct _denc_cmncjudg26_sp_in  dencCmncjudg26SpIn;
  struct _denc_cmncjudg26_sp_out dencCmncjudg26SpOut[DENC_CMNCJUDG26_SP_RQSIZE];

  /* 초기화 */
  dencCmncjudg26SpInClear(&dencCmncjudg26SpIn);
  dencCmncjudg26SpOutClear(dencCmncjudg26SpOut, DENC_CMNCJUDG26_SP_RQSIZE);
  setInitDBIO(DENC_CMNCJUDG26_SP_RQSIZE, DBCURSOR_CLOSE);

  /* 변수대입 */
  COPYVAR(dencCmncjudg26SpIn.polyNo, stp->polyNo);         /* 증권번호 */

  uvDebug("dencCmncjudg26SpIn.polyNo       = [%s]", dencCmncjudg26SpIn.polyNo      .arr);

  /* DBIO 실행 */
  dencCmncjudg26Sp(&basicParam, &dencCmncjudg26SpIn, dencCmncjudg26SpOut);

  /* DBIO 실행결과 확인 */
  if (getCDALResult() != SQL_OK) {
    /* DBIO Error Message 에 Function name을 add한다.           */
    setDBIOErrMsg(fnName1);
    /* 필요한 경우에만 ROLLBACK 처리한다.                       */
    EXEC SQL ROLLBACK;

    uvDebug("DBIO(DENC_CMNCJUDG26_SP) 호출 Error[%d], %s", cptReturnCode,getCDALErrMsg());
    /* SVC_CLOSE()를 호출함으로써 service를 return한다.         */
    SVC_CLOSE(ORAERR, 10, cptReturnCode, "DBIO(DENC_CMNCJUDG26_SP)) 호출 Error.", getCDALErrMsg());
  }

  dencCmncjudg26SpClose();

  /* DBIO 호출이 모두 성공적으로 수행되었을 경우 DATA 처리 부분 기술  */
  if (basicParam.rpSize > 0) {
    return FALSE;
  }

  uvDebug("※ [%s] end  ", fnName1);


  return TRUE;
}


/************************************************************************
  Function Name : SVncapl300in1_brthExpcDateChck()
  Note          : 출생예정일자 체크
  Parameters    :
  Return Value  :
 ------------------------------------------------------------------------
  Remarks >>
*************************************************************************/
void   SVncapl300in1_brthExpcDateChck(struct stp_SVncapl300in1 *stp) {

  int     i_retCode                      ;            /* return code        */

  CMNC_mmnorSubSslSrc1 mmnorSubSslSrc1;     /* 보험종류/보험종류판매 검색모듈 */

  uvDebug("SVncapl300in1_brthExpcDateChck start");

  memset(&mmnorSubSslSrc1,   0x00,   sizeof(CMNC_mmnorSubSslSrc1));

  COPYVAR(mmnorSubSslSrc1.irkdCodeDtal, stp->irkdCodeDtal); /* 보험종류코드_세 */
  COPYVAR(mmnorSubSslSrc1.irkdCodeItem, stp->irkdCodeItem); /* 보험종류코드_목 */
  COPYVAR(mmnorSubSslSrc1.saleChnlCode, stp->saleChnlCode); /* 판매채널코드    */
  COPYVAR(mmnorSubSslSrc1.paymCycl    , stp->paymCyclCode); /* 납입주기        */

  if (CMNC_mmnorSubSslSrc1_CC(&mmnorSubSslSrc1) == FAIL) {

    EXEC SQL ROLLBACK;

    uvDebug("%d", mmnorSubSslSrc1.resultCode);
    uvDebug("%s", mmnorSubSslSrc1.resultFld);
    uvDebug("%s", mmnorSubSslSrc1.resultMsg);

    uvDebug("CMNC_mmnorSubSslSrc1_CC 오류");
    SVC_CLOSE(APPERR, mmnorSubSslSrc1.resultCode, 0, mmnorSubSslSrc1.resultMsg, fnName);
  }

  /*태아가입 가능보종 */
  if (strcmp ((char *) mmnorSubSslSrc1.embrJoinYn.arr,"Y" ) == 0) {
    /* 일자체크                                                               */
    i_retCode = CMUV_isValidDate_CC (1, (char *)stp->brthExpcDate.arr);
    if (i_retCode != 1)
    {
      EXEC SQL ROLLBACK;
      uvDebug("SVncapl300in1_brthExpcDateChck 오류");
      SVC_CLOSE(APPERR, 4899, 0, "출생예정일자 오류", fnName);
    }
    
    /* 출생예정일자 저장 */
    SVncapl300in1_dencApl300in80Sp(stp);
  }

  uvDebug("SVncapl300in1_brthExpcDateChck end");

  return ;
}

/************************************************************************
  End of Code
 ************************************************************************/

 
 ===============================================
 마감온라인조회
 
 	/* 반송철회품질해지반환내역조회 */
	
	SELECT X.업무구분코드
	      ,X.개인법인판매구분
		  ,X.반송철회해지송금일자
		  ,X.반환송금경로구분
		  ,X.반송철회해지구분
		  ,TO_CHAR(X.초회실입금보험료,'99,999,999,999') 초회실입금보험료
		  ,TO_CHAR(X.2회이후입금보험료,'99,999,999,999') 2회이후입금보험료
		  ,TO_CHAR(X.초회합계보험료 ,'99,999,999,999') 초회합계보험료
		  ,X.계약마감후처리여부
		  
	 FROM (
	
	   SELECT DECODE(A.업무구분코드,'NC','신계약','RV','부활')  업무구분코드
			 ,DECODE(B.개인법인판매구분,'1','개인','2','법인')  개인법인판매구분
	         ,DECODE(A.반송철회해지구분,'1','반송','2','철회','품보')   반송철회해지구분
			 ,A.반송철회해지송금일자  반송철회해지송금일자
			 ,DECODE(A.반환송금경로구분,'1','계좌송금'
					 ,'2','기관송금'
					 ,'3','지급처방문'
					 ,'4','신용카드매출취소'
					 ,'5','RT송금'
					 ,'6','정산특약') 반환송금경로구분
			 ,SUM(NVL(A.초회실입금보험료,0))  초회실입금보험료
			 ,SUM(NVL(A.2회이후입금보험료,0))  2회이후입금보험료
			 ,SUM(NVL(A.초회합계보험료 ,0))  초회합계보험료
			 ,A.계약마감후처리여부  계약마감후처리여부
	    FROM 반송철회품질해지 A
	        ,신계약일마감 B 
	   WHERE B.계약체결년월 = P_CLOG_YM
	     AND A.증권번호_일괄계약번호 = B.증권번호
	     AND A.업무구분코드 = 'NC'
	     AND A.반송철회해지상태코드 = '12'
	     AND A.반송철회해지구분 IN ('1','2')
	     AND A.반환송금경로구분 BETWEEN '1' AND '6'
	     AND A.반송철회해지송금일자 = P_RETN_DATE
	     AND A.반환송금경로구분 = P_RETN_PATH
	   GROUP BY
	      A.업무구분코드
	     ,B.개인법인판매구분
	     ,A.반송철회해지송금일자
	     ,DECODE(A.반환송금경로구분,'1','계좌송금'
					,'2','기관송금'
					,'3','지급처방문'
					,'4','신용카드매출취소'
					,'5','RT송금'
					,'6','정산특약')
	     ,A.반송철회해지구분
	     ,A.계약마감후처리여부
	
	   UNION ALL
	
	   SELECT DECODE(A.업무구분코드,'NC','신계약','RV','부활')  업무구분코드
			 ,DECODE(B.부활개인법인판매구분 ,'1','개인','2','법인')  개인법인판매구분
			 ,DECODE(A.반송철회해지구분,'1','반송','2','철회','품보')   반송철회해지구분
			 ,A.반송철회해지송금일자  반송철회해지송금일자
			 ,DECODE(A.반환송금경로구분,'1','계좌송금'
					 ,'2','기관송금'
					 ,'3','지급처방문'
					 ,'4','신용카드매출취소'
					 ,'5','RT송금'
					 ,'6','정산특약') 반환송금경로구분
	         ,SUM(NVL(A.초회실입금보험료,0))  초회실입금보험료
			 ,SUM(NVL(A.2회이후입금보험료,0))  2회이후입금보험료
			 ,SUM(NVL(A.초회합계보험료 ,0))  초회합계보험료
			 ,A.계약마감후처리여부  계약마감후처리여부
	    FROM 반송철회품질해지 A
			,부활처리 B
	   WHERE A.계약_부활일자 BETWEEN P_CLOG_YM || '01' AND P_CLOG_YM || '31'
		 AND A.증권번호_일괄계약번호 = B.증권번호
	     AND A.부활처리번호 = B.부활처리번호
	     AND A.업무구분코드 = 'RV'
	     AND A.반송철회해지상태코드 = '12'
	     AND A.반송철회해지구분 IN ('1','2')
	     AND A.반송철회해지송금일자 = P_RETN_DATE
	     AND A.반환송금경로구분 = P_RETN_PATH
	   GROUP BY
			 A.업무구분코드
			,B.부활개인법인판매구분	
			,A.반송철회해지송금일자
	     ,DECODE(A.반환송금경로구분,'1','계좌송금'
	            ,'2','기관송금'
	            ,'3','지급처방문'
	            ,'4','신용카드매출취소'
	            ,'5','RT송금'
	            ,'6','정산특약')
	     ,A.반송철회해지구분
	     ,A.계약마감후처리여부
	  ) X
	ORDER BY
	   X.업무구분코드
	  ,X.개인법인판매구분
	  ,X.반환송금경로구분
	  ,X.반송철회해지구분
	
	
	#####################################################################################
	
	/* 반송철회품질해지반환보험료목록조회 */
	SELECT X.기관판매구분코드
	     ,CASE WHEN X.반송철회해지구분 = '품질해지' OR X.반송철회해지구분 = '조사해지취소'
	             OR X.반송철회해지구분 = '조사감액취소' OR X.반송철회해지구분 = '품보해지취소'
	           THEN '조사'
	           ELSE X.업무구분코드
	            END 업무구분코드
			 
		 ,CASE WHEN ( X.업무구분코드 = '신계약' AND X.반송철회해지구분 = '반송' )
				   OR X.반송철회해지구분 = '신계약감액' 
				   OR X.반송철회해지구분 = '가성립해지' 
				   OR X.반송철회해지구분 = '반송_가성립'  
				   OR X.반송철회해지구분 = '신계약반송취소'
			   THEN '반송이자'
			   WHEN X.반송철회해지구분 = '철회' OR X.반송철회해지구분 = '청약철회취소'
			   THEN '철회이자'
			   WHEN (X.업무구분코드 = '부활' AND X.반송철회해지구분 = '반송' )
				   OR X.반송철회해지구분 = '부할반송취소'
			   THEN '부활이자'
			   WHEN X.반송철회해지구분 = '품질해지'  OR X.반송철회해지구분 = '품보해지취소'
			   THEN '품질보증해지'
		        END  반송철회해지구분
				
		,X.CNCL_YN
		,X.결재일자
		,X.모집_부활기관코드
		,X.기관명
		,X.증권번호
		,X.반환통지서발행일자
		,X.반송철회해지송금일자
		
		,TO_CHAR(X.초회실입금보험료,'99,999,999,999') 초회실입금보험료
		,TO_CHAR(X.반환이자,'99,999,999,999')      반환이자
		,TO_CHAR(X.소득세 ,'99,999,999,999')      소득세
		,TO_CHAR(X.주민세 ,'99,999,999,999')      주민세
		,TO_CHAR(X.SUB_TOTAL,'99,999,999,999')      SUB_TOTAL
		,TO_CHAR(X.총환급보험료,'99,999,999,999')  총환급보험료
		,X.가산이자마감처리일자
		,X.반환통지서발행기관코드
		
	  FROM (
	        SELECT 
	               DECODE(B.기관판매구분코드,'1','개인','2','법인')      기관판매구분코드
	              ,DECODE(A.업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	              ,DECODE(A.반송철회해지구분,'1','반송','2','철회','3','품질해지','4','신계약감액') 반송철회해지구분
	              ,A.결재일자             결재일자
	              ,A.모집_부활기관코드        모집_부활기관코드 
	              ,B.기관명             기관명
	              ,A.증권번호_일괄계약번호         증권번호
	              ,A.반환통지서발행일자        반환통지서발행일자
	              ,A.반송철회해지송금일자        반송철회해지송금일자
	              ,NVL(A.초회실입금보험료,0) 초회실입금보험료
	              ,NVL(A.반환이자     ,0) 반환이자
	              ,NVL(A.소득세      ,0) 소득세
	              ,NVL(A.주민세      ,0) 주민세
	              ,(NVL(A.반환이자,0) - ( NVL(A.소득세,0) + NVL(A.주민세,0)))   SUB_TOTAL
	              ,NVL(A.총환급보험료 ,0) 총환급보험료
	              ,A.가산이자마감처리일자        가산이자마감처리일자
	              ,A.반환통지서발행기관코드        반환통지서발행기관코드
	              ,'N'                     CNCL_YN
	              ,반환송금경로구분
	          FROM 반송철회품질해지 A
	              ,지국통합조직정보 B
	         WHERE A.반송철회해지구분 IN ('1','2','3','4')
	           AND A.업무구분코드 IN ('NC','RV')
	           AND A.반환송금경로구분 IN ('2','8')
	           AND A.반송철회해지상태코드 = '12'
	           AND A.모집_부활기관코드 = B.기관코드(+)
	           AND A.반환통지서발행일자 BETWEEN 마감년월 || '01' AND 마감년월 || '31'
	           AND B.기준년월(+)     = 마감년월
	           AND A.반환이자      > 50000
	           AND A.소득세 > 0
	           AND NOT EXISTS (SELECT 1
	                             FROM 계약부속정보 X
	                                 ,계약 Y
	                                 ,통합고객 Z
	                            WHERE X.증권번호        = A.증권번호_일괄계약번호
	                              AND X.보험료법인부담율 = 100
	                              AND Y.증권번호        = A.증권번호_일괄계약번호
	                              AND Y.계약자고객ID   = Z.고객ID
	                              AND Z.고객구분코드      = '2'
	                              AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
								   
	    UNION ALL
		
	        SELECT DECODE(기관판매구분코드,'1','개인','2','법인')      기관판매구분코드
	              ,DECODE(업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	              ,DECODE(반송철회해지구분,'1','반송','2','철회','3','품질해지','4','신계약감액') 반송철회해지구분
	              ,결재일자
	              ,모집_부활기관코드
	              ,기관명
	              ,증권번호
	              ,반환통지서발행일자
	              ,반송철회해지송금일자
	              ,초회실입금보험료
	              ,반환이자
	              ,소득세
	              ,주민세
	              ,SUB_TOTAL
	              ,총환급보험료
	              ,가산이자마감처리일자
	              ,반환통지서발행기관코드
	              ,CNCL_YN
	              ,반환송금경로구분
	          FROM (
	                SELECT 
	                       DECODE(SUBSTR(A.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,C.개인법인판매구분) 기관판매구분코드
	                      ,DECODE(SUBSTR(A.증권번호_일괄계약번호,1,1),'G',D.계약체결년월,C.계약체결년월)  계약체결년월
	                      ,A.업무구분코드
	                      ,A.반송철회해지구분
	                      ,A.결재일자             결재일자
	                      ,A.결재기관코드        모집_부활기관코드
	                      ,B.기관명             기관명
	                      ,A.증권번호_일괄계약번호          증권번호
	                      ,A.결재일자             반환통지서발행일자
	                      ,A.결재일자             반송철회해지송금일자
	                      ,NVL(A.초회실입금보험료,0) 초회실입금보험료
	                      ,NVL(A.반환이자,0)      반환이자
	                      ,NVL(A.소득세,0)       소득세
	                      ,NVL(A.주민세,0)       주민세
	                      ,(NVL(A.반환이자,0) - ( NVL(A.소득세,0) + NVL(A.주민세,0))) SUB_TOTAL
	                      ,NVL(A.총환급보험료,0)  총환급보험료
	                      ,A.가산이자마감처리일자        가산이자마감처리일자
	                      ,A.반환통지서발행기관코드        반환통지서발행기관코드
	                      ,'N'                     CNCL_YN
	                      ,A.반환송금경로구분
	                      ,A.계약마감후처리여부
	                  FROM 반송철회품질해지 A,
	                       계약 C,
	                       일괄계약 D,
	                       지국통합조직정보 B
	                 WHERE A.반송철회해지구분      IN ('1','2','3','4')
	                   AND A.업무구분코드 IN ('NC','RV')
	                   AND A.반환송금경로구분 NOT IN ('2','8')
	                   AND A.반송철회해지상태코드 = '12'
	                   AND A.결재일자      BETWEEN 마감년월||'01'
	                                            AND (CASE WHEN A.반송철회해지구분 = '3' THEN 마감년월||'31'
	                                                      ELSE TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1),'YYYYMM')||'15' END)
	                   AND C.증권번호(+)     = A.증권번호_일괄계약번호
	                   AND D.일괄계약번호(+)     = A.증권번호_일괄계약번호
	                   AND A.모집_부활기관코드 = B.기관코드(+)
	                   AND B.기준년월(+)     = 마감년월
	                   AND A.반환이자      > 50000
	                   AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = A.증권번호_일괄계약번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = A.증권번호_일괄계약번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
	                )
	          WHERE ((계약마감후처리여부 = 'N' AND 계약체결년월 = 마감년월)
	             OR  (계약마감후처리여부 IN ('R','Y') AND 계약체결년월 < 마감년월)
	             OR   반송철회해지구분 = '3')
				 
	    UNION ALL
		
	         SELECT 
	                DECODE(기관판매구분코드,'1','개인','2','법인')      기관판매구분코드
	               ,DECODE(업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	               ,DECODE(반송철회해지구분,'1','반송','2','철회','3','품질해지','4','신계약감액') 반송철회해지구분
	               ,결재일자
	               ,모집_부활기관코드
	               ,기관명
	               ,증권번호
	               ,반환통지서발행일자
	               ,반송철회해지송금일자
	               ,초회실입금보험료
	               ,반환이자
	               ,소득세
	               ,주민세
	               ,SUB_TOTAL
	               ,총환급보험료
	               ,가산이자마감처리일자
	               ,반환통지서발행기관코드
	               ,CNCL_YN
	               ,반환송금경로구분
	           FROM (
	                 SELECT 
	                        DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분) 기관판매구분코드
	                       ,DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.계약체결년월  ,E.계약체결년월  ) 계약체결년월
	                       ,B.업무구분코드
	                       ,B.반송철회해지구분
	                       ,B.결재일자             결재일자
	                       ,B.결재기관코드        모집_부활기관코드
	                       ,C.기관명             기관명
	                       ,B.증권번호_일괄계약번호          증권번호
	                       ,B.결재일자             반환통지서발행일자
	                       ,B.결재일자             반송철회해지송금일자
	                       ,NVL(B.초회실입금보험료,0) 초회실입금보험료
	                       ,NVL(B.반환이자     ,0) 반환이자
	                       ,NVL(B.소득세      ,0) 소득세
	                       ,NVL(B.주민세      ,0) 주민세
	                       ,(NVL(B.반환이자,0) - ( NVL(B.소득세,0) + NVL(B.주민세,0)))     SUB_TOTAL
	                       ,NVL(B.총환급보험료 ,0) 총환급보험료
	                       ,B.가산이자마감처리일자        가산이자마감처리일자
	                       ,B.반환통지서발행기관코드        반환통지서발행기관코드
	                       ,'N'                     CNCL_YN
	                       ,B.반환송금경로구분
	                       ,B.계약마감후처리여부
	                   FROM 반송철회품질해지이력 B
	                       ,송금후철회반송취소 A
	                       ,지국통합조직정보 C
	                       ,계약 E
	                       ,일괄계약 D
	                  WHERE B.반송철회해지구분      IN ('1','2','3','4')
	                    AND B.반송철회해지상태코드  = '12'
	                    AND B.결재일자      BETWEEN 마감년월 || '01'
	                                             AND (CASE WHEN B.반송철회해지구분='3' THEN 마감년월 || '31'
	                                                       ELSE TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1),'YYYYMM')||'15' END )
	                    AND B.증권번호_일괄계약번호   = A.증권번호_일괄계약번호
	                    AND B.송금후철회반송취소이력번호 = A.송금후철회반송취소이력번호
	                    AND A.취소종류코드 IN ('1','2','3','6')
	                    AND A.취소이자      > 50000
	                    AND E.증권번호(+)     = A.증권번호_일괄계약번호
	                    AND D.일괄계약번호(+)     = A.증권번호_일괄계약번호
	                    AND C.기관코드(+)   = A.모집_부활기관코드
	                    AND C.기준년월(+)     = 마감년월
	                    AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = B.증권번호_일괄계약번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = B.증권번호_일괄계약번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
	                )
	          WHERE ((계약마감후처리여부 = 'N' AND 계약체결년월 = 마감년월)
	             OR  (계약마감후처리여부 IN ('R','Y') AND 계약체결년월 < 마감년월)
	             OR   반송철회해지구분 = '3')
	          UNION ALL
	         SELECT
	                DECODE(A.개인법인판매구분,'1','개인','2','법인') 기관판매구분코드
	               ,'조사'                  업무구분코드
	               ,'반송_가성립'           반송철회해지구분
	               ,A.요청일자             결재일자
	               ,B.모집기관코드        모집_부활기관코드
	               ,C.기관명             기관명
	               ,A.해지/감액증권번호          증권번호
	               ,A.반환통지서발행일자        반환통지서발행일자
	               ,A.송금일자             반송철회해지송금일자
	               ,NVL(B.초회실입금보험료,0) 초회실입금보험료
	               ,NVL(A.반환이자     ,0) 반환이자
	               ,NVL(A.소득세      ,0) 소득세
	               ,NVL(A.주민세      ,0) 주민세
	               ,(NVL(A.반환이자,0) - ( NVL(A.소득세,0) + NVL(A.주민세,0)))     SUB_TOTAL
	               ,NVL(A.환급대상금액 + A.반환이자 - ( A.소득세 + A.주민세),0)   총환급보험료
	               ,'00000000'              가산이자마감처리일자
	               ,'00000'                 반환통지서발행기관코드
	               ,'N'                     CNCL_YN
	               ,반환송금경로구분
	         FROM  해지/감액기본 A
	              ,신계약일마감 B
	              ,지국통합조직정보 C
	         WHERE A.송금일자      BETWEEN 마감년월 || '01' AND 마감년월 || '31'
	           AND A.해지/감액사유코드 = '7001'
	           AND A.해지감액구분 = '1'
	           AND A.해지/감액상태코드 = '14'
	           AND A.반환이자      >  50000
	           AND A.해지/감액증권번호   = B.증권번호
	           AND B.모집기관코드 = C.기관코드(+)
	           AND C.기준년월(+)     = 마감년월
	           AND NOT EXISTS (SELECT 1 FROM 계약부속정보 WHERE 증권번호=A.해지/감액증권번호 AND 보험료법인부담율=100)
			   
	    UNION ALL
		
	       SELECT
	              DECODE(C.기관판매구분코드,'1','개인','2','법인') 기관판매구분코드
	             ,'조사'                  업무구분코드
	             ,'반송_가성립'           반송철회해지구분
	             ,B.요청일자             결재일자
	             ,D.모집기관코드        모집_부활기관코드
	             ,C.기관명             기관명
	             ,B.해지/감액증권번호          증권번호
	             ,B.반환통지서발행일자        반환통지서발행일자
	             ,B.송금일자             반송철회해지송금일자
	             ,NVL(D.초회실입금보험료,0) 초회실입금보험료
	             ,NVL(B.반환이자     ,0) 반환이자
	             ,NVL(B.소득세      ,0) 소득세
	             ,NVL(B.주민세      ,0) 주민세
	             ,(NVL(B.반환이자,0) - ( NVL(B.소득세,0) + NVL(B.주민세,0)))   SUB_TOTAL
	             ,NVL(B.환급대상금액 + B.반환이자 - ( B.소득세 + B.주민세),0) 총환급보험료
	             ,'00000000'              가산이자마감처리일자
	             ,'00000'                 반환통지서발행기관코드
	             ,'N'                     CNCL_YN
	             ,B.반환송금경로구분
	         FROM 해지/감액기본 B
	             ,송금후철회반송취소 A
	             ,신계약일마감 D
	             ,지국통합조직정보 C
	        WHERE B.결재일자      BETWEEN 마감년월 || '01' AND 마감년월 || '31'
	          AND B.해지/감액상태코드 = '15'
	          AND B.경리마감여부   = 'Y'
	          AND B.해지/감액사유코드 = '7001'
	          AND B.해지/감액증권번호   = A.증권번호_일괄계약번호
	          AND A.부활처리번호   = '0000'
	          AND A.송금후철회반송취소이력번호 = (SELECT 
	                                         송금후철회반송취소이력번호
	                                    FROM 송금후철회반송취소 V
	                                   WHERE V.증권번호_일괄계약번호 = A.증권번호_일괄계약번호
	                                     AND V.부활처리번호 = A.부활처리번호
	                                     AND ROWNUM = 1)
	          AND A.취소이자      > 50000
	          AND A.취소이자소득세 > 0
	          AND A.취소종류코드 = '4'
	          AND C.기관코드(+)   = A.모집_부활기관코드
	          AND C.기준년월(+)     = 마감년월
	          AND D.증권번호        = B.해지/감액증권번호
	          AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = B.해지/감액증권번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = B.해지/감액증권번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
								   
	    UNION ALL
		
	       SELECT
	              DECODE(기관판매구분코드,'1','개인','2','법인')      기관판매구분코드
	             ,DECODE(업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	             ,CASE WHEN 취소종류코드 = '1' THEN '신계약반송취소'
	                   WHEN 취소종류코드 = '2' THEN '부할반송취소'
	                   WHEN 취소종류코드 = '3' THEN '청약철회취소'
	                   WHEN 취소종류코드 = '6' THEN '품보해지취소' END
	             ,취소보험료송금일자
	             ,모집_부활기관코드
	             ,기관명
	             ,증권번호_일괄계약번호
	             ,'        '
	             ,취소보험료송금일자
	             ,취소보험료
	             ,취소이자
	             ,취소이자소득세
	             ,취소이자주민세
	             ,SUB_TOTAL
	             ,총환급보험료
	             ,가산이자마감처리일자
	             ,반환통지서발행기관코드
	             ,CNCL_YN
	             ,반환송금경로구분
	         FROM (
	               SELECT 
	                      DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분) 기관판매구분코드
	                     ,DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.계약체결년월  ,E.계약체결년월  ) 계약체결년월
	                     ,B.업무구분코드
	                     ,B.반송철회해지구분
	                     ,A.취소종류코드
	                     ,A.취소보험료송금일자
	                     ,A.모집_부활기관코드
	                     ,C.기관명
	                     ,B.증권번호_일괄계약번호
	                     ,'        '
	                     ,A.취소보험료
	                     ,A.취소이자
	                     ,A.취소이자소득세
	                     ,A.취소이자주민세
	                     ,(NVL(A.취소이자,0) - ( NVL(A.취소이자소득세,0) + NVL(A.취소이자주민세,0))) SUB_TOTAL
	                     ,NVL(A.취소보험료 + A.취소이자 - ( A.취소이자소득세 + A.취소이자주민세),0)   총환급보험료
	                     , '00000000' 가산이자마감처리일자
	                     , '00000'    반환통지서발행기관코드
	                     ,'Y'         CNCL_YN
	                     ,B.취소일자
	                     ,B.반환송금경로구분
	                     ,CASE WHEN B.취소일자 > (SELECT 기준일자
	                                                 FROM 월별일정관리
	                                                WHERE 업무구분코드 = B.업무구분코드
	                                                  AND 일정관리종류코드 = DECODE(DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분),'1','NCP28','NCG28')
	                                                AND 마감년월        = TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1 ),'YYYYMM')) THEN 'Y' ELSE 'N' END 계약마감후처리여부
	                 FROM 반송철회품질해지이력 B
	                     ,송금후철회반송취소 A
	                     ,지국통합조직정보 C
	                     ,계약 E
	                     ,일괄계약 D
	                WHERE B.반송철회해지구분      IN ('1','2','3','6')
	                  AND B.반송철회해지상태코드  = '12'
	                  AND B.취소일자      BETWEEN 마감년월 || '01'
	                                           AND (CASE WHEN A.취소종류코드 = '6' THEN 마감년월 || '31'
	                                              ELSE (SELECT 기준일자
	                                                            FROM 월별일정관리
	                                                           WHERE 업무구분코드 = B.업무구분코드
	                                                             AND 일정관리종류코드 = CASE WHEN DECODE(SUBSTR(A.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분) = '1'
	                                                                                       THEN 'NCP28' ELSE 'NCG28' END
	                                                             AND 마감년월        = TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1 ),'YYYYMM')) END)
	                  AND A.취소종류코드 IN ('1','2','3','6')
	                  AND A.취소이자      > 50000
	                  AND A.취소이자소득세 > 0
	                  AND B.증권번호_일괄계약번호   = A.증권번호_일괄계약번호
	                  AND B.송금후철회반송취소이력번호 = A.송금후철회반송취소이력번호
	                  AND E.증권번호(+)     = A.증권번호_일괄계약번호
	                  AND D.일괄계약번호(+)     = A.증권번호_일괄계약번호
	                  AND C.기관코드(+)   = A.모집_부활기관코드
	                  AND C.기준년월(+)     = 마감년월
	                  AND NOT EXISTS (
	                                   SELECT 1
	                                     FROM 계약부속정보 X
	                                         ,계약 Y
	                                         ,통합고객 Z
	                                    WHERE X.증권번호        = B.증권번호_일괄계약번호
	                                      AND X.보험료법인부담율 = 100
	                                      AND Y.증권번호        = B.증권번호_일괄계약번호
	                                      AND Y.계약자고객ID   = Z.고객ID
	                                      AND Z.고객구분코드      = '2'
	                                      AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                                     )
	               )
	          WHERE ((계약마감후처리여부 = 'N' AND 계약체결년월 <= 마감년월)
	             OR  (계약마감후처리여부 = 'Y' AND 계약체결년월 <  마감년월)
	             OR   반송철회해지구분 = '3' )
	    
		UNION ALL
		
	         SELECT
	                DECODE(B.개인법인판매구분,'1','개인','2','법인') 기관판매구분코드
	               , '조사' 업무구분코드
	               ,'조사해지취소'
	               ,A.취소보험료송금일자
	               ,A.모집_부활기관코드
	               ,C.기관명
	               ,A.증권번호_일괄계약번호
	               ,'        '
	               ,A.취소보험료송금일자
	               ,A.취소보험료
	               ,A.취소이자
	               ,A.취소이자소득세
	               ,A.취소이자주민세
	               ,(NVL(A.취소이자,0) - ( NVL(A.취소이자소득세,0) + NVL(A.취소이자주민세,0))) SUB_TOTAL
	               ,NVL(A.취소보험료 + A.취소이자 - ( A.취소이자소득세 + A.취소이자주민세),0)   총환급보험료
	               , '00000000' 가산이자마감처리일자
	               , '00000'    반환통지서발행기관코드
	               ,'Y'         CNCL_YN
	               ,B.반환송금경로구분
	           FROM 해지/감액기본 B
	               ,송금후철회반송취소 A
	               ,지국통합조직정보 C
	          WHERE B.취소처리일자 BETWEEN 마감년월 || '01' AND 마감년월 || '31'
	            AND B.해지/감액상태코드 = '15'
	            AND B.경리마감여부   = 'Y'
	            AND B.해지/감액사유코드 = '7001'
	            AND B.해지/감액증권번호   = A.증권번호_일괄계약번호
	            AND A.부활처리번호   = '0000'
	            AND A.송금후철회반송취소이력번호 = (SELECT
	                                           송금후철회반송취소이력번호
	                                      FROM 송금후철회반송취소 V
	                                     WHERE V.증권번호_일괄계약번호 = A.증권번호_일괄계약번호
	                                       AND V.부활처리번호 = A.부활처리번호
	                                       AND ROWNUM = 1)
	            AND A.취소이자      > 50000
	            AND A.취소이자소득세 > 0
	            AND A.취소종류코드 = '4'
	            AND C.기관코드(+)   = A.모집_부활기관코드
	            AND C.기준년월(+)     = 마감년월
	            AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = B.해지/감액증권번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = B.해지/감액증권번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
	     ) X
	WHERE (CASE WHEN ( X.업무구분코드 = '신계약' AND X.반송철회해지구분 = '반송' )
	               OR X.반송철회해지구분 = '신계약감액' OR X.반송철회해지구분 = '가성립해지' 
				   OR X.반송철회해지구분 = '반송_가성립' OR X.반송철회해지구분 = '신계약반송취소'
	              THEN '반송이자'
				  
	              WHEN X.반송철회해지구분 = '철회' OR X.반송철회해지구분 = '청약철회취소'
	              THEN '철회이자'
				  
	              WHEN (X.업무구분코드 = '부활' AND X.반송철회해지구분 = '반송' )
	                   OR X.반송철회해지구분 = '부할반송취소'
	              THEN '부활이자'
				  
	              WHEN X.반송철회해지구분 = '품질해지'  OR X.반송철회해지구분 = '품보해지취소'
	              THEN '품질보증해지'
				  
	         END) IS NOT NULL
	 ORDER BY X.업무구분코드;
	 
	 
22222222222222222222222222222 반환테이블만 22222222222222222222222222222
	 /* 반송철회품질해지반환보험료목록조회 */
	
	
				
		/* ************************** 반환통지서발행일자 기준 조회  **************************** */	
	        SELECT 
	             --  DECODE(B.기관판매구분코드,'1','개인','2','법인') 기관판매구분코드
	              ,DECODE(A.업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	              ,DECODE(A.반송철회해지구분,'1','반송','2','철회','3','품질해지','4','신계약감액') 반송철회해지구분
	              ,A.결재일자            결재일자
	              ,A.모집_부활기관코드      모집_부활기관코드 
				 --  ,B.기관명             기관명
	              ,A.증권번호_일괄계약번호    증권번호
	              ,A.반환통지서발행일자     반환통지서발행일자
	              ,A.반송철회해지송금일자   반송철회해지송금일자
	              ,NVL(A.초회실입금보험료,0) 초회실입금보험료
	              ,NVL(A.반환이자     ,0) 반환이자
	              ,NVL(A.소득세      ,0) 소득세
	              ,NVL(A.주민세      ,0) 주민세
	              ,(NVL(A.반환이자,0) - ( NVL(A.소득세,0) + NVL(A.주민세,0)))   SUB_TOTAL -- ## 로직에서 계산 
	              ,NVL(A.총환급보험료 ,0) 총환급보험료
	              ,A.가산이자마감처리일자        가산이자마감처리일자
	              ,A.반환통지서발행기관코드       반환통지서발행기관코드
	              ,'N'                   CNCL_YN
	              ,반환송금경로구분
	          FROM 반송철회품질해지 A
	             -- ,지국통합조직정보 B
	         WHERE A.반송철회해지구분 IN ('1','2','3','4') -- 반송, 철회, 품질해지, 신계약감액, 
	           --AND A.업무구분코드 IN ('NC','RV') (TOBE 테이블에 없음 '언더라이팅반환구분코드' 로 대체 )
	           AND A.반환송금경로구분 IN ('2','8') -- 기관송금, 기관RT송금
	           AND A.반송철회해지상태코드 = '12' --결재 
			   
			   --#########
			   AND A.반환통지서발행일자 BETWEEN 마감년월 || '01' AND 마감년월 || '31'   
			   --#########
			   
			   -- AND A.모집_부활기관코드 = B.기관코드(+)
	           -- AND B.기준년월(+)    = 마감년월
			   
	           AND A.반환이자      > 50000
	           AND A.소득세 		> 0
			   
			   -- ### 로직으로 뺌 (파프리카)
	           AND NOT EXISTS (SELECT 1
	                             FROM 계약부속정보 X
	                                 ,계약 Y
	                                 ,통합고객 Z
	                            WHERE X.증권번호        = A.증권번호_일괄계약번호
	                              AND X.보험료법인부담율 = 100
	                              AND Y.증권번호        = A.증권번호_일괄계약번호
	                              AND Y.계약자고객ID   = Z.고객ID
	                              AND Z.고객구분코드      = '2'
	                              AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
								   
	    UNION ALL
		
		/* ************************** 결재일자 기준 조회  **************************** */
	        SELECT --DECODE(기관판매구분코드,'1','개인','2','법인') 기관판매구분코드
	              ,DECODE(업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	              ,DECODE(반송철회해지구분,'1','반송','2','철회','3','품질해지','4','신계약감액') 반송철회해지구분
	              ,결재일자
	              ,모집_부활기관코드
	              ,기관명
	              ,증권번호
	              ,반환통지서발행일자
	              ,반송철회해지송금일자
	              ,초회실입금보험료
	              ,반환이자
	              ,소득세
	              ,주민세
	              ,SUB_TOTAL
	              ,총환급보험료
	              ,가산이자마감처리일자
	              ,반환통지서발행기관코드
	              ,CNCL_YN
	              ,반환송금경로구분
	          FROM (
	                SELECT 
	                     --  DECODE(SUBSTR(A.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,C.개인법인판매구분) 기관판매구분코드
	                     -- ,DECODE(SUBSTR(A.증권번호_일괄계약번호,1,1),'G',D.계약체결년월,C.계약체결년월)  계약체결년월
	                      ,A.업무구분코드
	                      ,A.반송철회해지구분
	                      ,A.결재일자             결재일자
	                      ,A.결재기관코드        모집_부활기관코드
	                      --,B.기관명             기관명
	                      ,A.증권번호_일괄계약번호          증권번호
	                      ,A.결재일자             반환통지서발행일자
	                      ,A.결재일자             반송철회해지송금일자
	                      ,NVL(A.초회실입금보험료,0) 초회실입금보험료
	                      ,NVL(A.반환이자,0)      반환이자
	                      ,NVL(A.소득세,0)       소득세
	                      ,NVL(A.주민세,0)       주민세
	                      ,(NVL(A.반환이자,0) - ( NVL(A.소득세,0) + NVL(A.주민세,0))) SUB_TOTAL  -- ## 로직에서 계산 
	                      ,NVL(A.총환급보험료,0)  총환급보험료
	                      ,A.가산이자마감처리일자        가산이자마감처리일자
	                      ,A.반환통지서발행기관코드        반환통지서발행기관코드
	                      ,'N'                     CNCL_YN
	                      ,A.반환송금경로구분
	                      ,A.계약마감후처리여부
	                  FROM 반송철회품질해지 A,
	                      -- 계약 C,
	                      -- 일괄계약 D,
	                      -- 지국통합조직정보 B
	                 WHERE A.반송철회해지구분 IN ('1','2','3','4')
	                  -- AND A.업무구분코드 IN ('NC','RV') (TOBE 테이블에 없음 )
	                   AND A.반환송금경로구분 NOT IN ('2','8')
	                   AND A.반송철회해지상태코드 = '12'
					 
					 --######### 
	                   AND A.결재일자 BETWEEN 마감년월||'01'
	                                   AND (CASE WHEN A.반송철회해지구분 = '3' THEN 마감년월||'31'
	                                             ELSE TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1),'YYYYMM')||'15' END) 
					 --#########	
					  
	                  -- AND C.증권번호(+)    = A.증권번호_일괄계약번호
	                  -- AND D.일괄계약번호(+)  = A.증권번호_일괄계약번호
	                  -- AND A.모집_부활기관코드 = B.기관코드(+)
	                  -- AND B.기준년월(+)     = 마감년월
					  
	                   AND A.반환이자      > 50000
					   
					   -- ### 로직으로 뺌 (파프리카)
	                   AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = A.증권번호_일괄계약번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = A.증권번호_일괄계약번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
	                )
					
			  -- ### 로직으로 뺌 (파프리카)		
	          WHERE ((계약마감후처리여부 = 'N' AND 계약체결년월 = 마감년월)
	             OR  (계약마감후처리여부 IN ('R','Y') AND 계약체결년월 < 마감년월)
	             OR   반송철회해지구분 = '3') -- 품질해지만
				 
				 
	    UNION ALL
		
		/* ************************** 결재일자 기준 반환취소건  **************************** */
	         SELECT 
	                DECODE(기관판매구분코드,'1','개인','2','법인')      기관판매구분코드
	               ,DECODE(업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	               ,DECODE(반송철회해지구분,'1','반송','2','철회','3','품질해지','4','신계약감액') 반송철회해지구분
	               ,결재일자
	               ,모집_부활기관코드
	               ,기관명
	               ,증권번호
	               ,반환통지서발행일자
	               ,반송철회해지송금일자
	               ,초회실입금보험료
	               ,반환이자
	               ,소득세
	               ,주민세
	               ,SUB_TOTAL
	               ,총환급보험료
	               ,가산이자마감처리일자
	               ,반환통지서발행기관코드
	               ,CNCL_YN
	               ,반환송금경로구분
	           FROM (
	                 SELECT 
	                    --    DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분) 기관판매구분코드
	                    --   ,DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.계약체결년월  ,E.계약체결년월  ) 계약체결년월
	                       ,B.업무구분코드
	                       ,B.반송철회해지구분
	                       ,B.결재일자             결재일자
	                       ,B.결재기관코드        	모집_부활기관코드
	                     --  ,C.기관명             	기관명
	                       ,B.증권번호_일괄계약번호     증권번호
	                       ,B.결재일자             반환통지서발행일자
	                       ,B.결재일자             반송철회해지송금일자
	                       ,NVL(B.초회실입금보험료,0) 초회실입금보험료
	                       ,NVL(B.반환이자     ,0) 반환이자
	                       ,NVL(B.소득세      ,0) 소득세
	                       ,NVL(B.주민세      ,0) 주민세
	                       ,(NVL(B.반환이자,0) - ( NVL(B.소득세,0) + NVL(B.주민세,0)))     SUB_TOTAL
	                       ,NVL(B.총환급보험료 ,0) 총환급보험료
	                       ,B.가산이자마감처리일자    가산이자마감처리일자
	                       ,B.반환통지서발행기관코드   반환통지서발행기관코드
	                       ,'N'               CNCL_YN
	                       ,B.반환송금경로구분
	                       ,B.계약마감후처리여부
	                   FROM 반송철회품질해지이력 B
	                       ,송금후철회반송취소 A
	                      -- ,지국통합조직정보 C
	                      -- ,계약 E
	                      -- ,일괄계약 D
	                  WHERE B.반송철회해지구분      IN ('1','2','3','4')
	                    AND B.반송철회해지상태코드  = '12'
						
						--#########
	                    AND B.결재일자 BETWEEN 마감년월 || '01'
	                                   AND (CASE WHEN B.반송철회해지구분='3' THEN 마감년월 || '31'
	                                             ELSE TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1),'YYYYMM')||'15' END )
						--#########	
						
	                    AND B.증권번호_일괄계약번호 = A.증권번호_일괄계약번호
	                    AND B.송금후철회반송취소이력번호 = A.송금후철회반송취소이력번호
	                    AND A.취소종류코드 IN ('1','2','3','6') -- 신계약반송취소, 부활반송취소, 청약철회취소, 조사해지취소
	                    AND A.취소이자      > 50000
	                   -- AND E.증권번호(+)     = A.증권번호_일괄계약번호
	                   -- AND D.일괄계약번호(+)     = A.증권번호_일괄계약번호
	                   -- AND C.기관코드(+)   = A.모집_부활기관코드
	                   -- AND C.기준년월(+)     = 마감년월
	                    AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = B.증권번호_일괄계약번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = B.증권번호_일괄계약번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
	                )
					
			  -- ### 로직으로 뺌 (파프리카)		
	          WHERE ((계약마감후처리여부 = 'N' AND 계약체결년월 = 마감년월)
	             OR  (계약마감후처리여부 IN ('R','Y') AND 계약체결년월 < 마감년월)
	             OR   반송철회해지구분 = '3') -- 품질해지만
		
		 UNION ALL
		
		   /* ************************** 취소일자 기준 반환취소건  **************************** */
	       SELECT
	           --  DECODE(기관판매구분코드,'1','개인','2','법인')      기관판매구분코드
	           -- ,DECODE(업무구분코드,'NC','신계약','RV','부활')  업무구분코드
	             ,CASE WHEN 취소종류코드 = '1' THEN '신계약반송취소'
	                   WHEN 취소종류코드 = '2' THEN '부할반송취소'
	                   WHEN 취소종류코드 = '3' THEN '청약철회취소'
	                   WHEN 취소종류코드 = '6' THEN '품보해지취소' END
	             ,취소보험료송금일자
	             ,모집_부활기관코드
	             ,기관명
	             ,증권번호_일괄계약번호
	             ,'        '
	             ,취소보험료송금일자
	             ,취소보험료
	             ,취소이자
	             ,취소이자소득세
	             ,취소이자주민세
	             ,SUB_TOTAL
	             ,총환급보험료
	             ,가산이자마감처리일자
	             ,반환통지서발행기관코드
	             ,CNCL_YN
	             ,반환송금경로구분
	         FROM (
	               SELECT 
	                 --     DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분) 기관판매구분코드
	                 --    ,DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.계약체결년월  ,E.계약체결년월  ) 계약체결년월
	                     ,B.업무구분코드
	                     ,B.반송철회해지구분
	                     ,A.취소종류코드
	                     ,A.취소보험료송금일자
	                     ,A.모집_부활기관코드
	                --     ,C.기관명
	                     ,B.증권번호_일괄계약번호
	                     ,'        '
	                     ,A.취소보험료
	                     ,A.취소이자
	                     ,A.취소이자소득세
	                     ,A.취소이자주민세
	                     ,(NVL(A.취소이자,0) - ( NVL(A.취소이자소득세,0) + NVL(A.취소이자주민세,0))) SUB_TOTAL
	                     , NVL(A.취소보험료 + A.취소이자 - ( A.취소이자소득세 + A.취소이자주민세),0)   총환급보험료
	                     , '00000000' 가산이자마감처리일자
	                     , '00000'    반환통지서발행기관코드
	                     , 'Y'        CNCL_YN
	                     ,B.취소일자
	                     ,B.반환송금경로구분
	                     ,CASE WHEN B.취소일자 > (SELECT 기준일자
	                                             FROM 월별일정관리
	                                            WHERE 업무구분코드 = B.업무구분코드
	                                              AND 일정관리종류코드 = DECODE(DECODE(SUBSTR(B.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분),'1','NCP28','NCG28')
	                                              AND 마감년월 = TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1 ),'YYYYMM')) THEN 'Y' ELSE 'N' END 계약마감후처리여부
													  
	                 FROM 반송철회품질해지이력 B
	                     ,송금후철회반송취소 A
	                  --   ,지국통합조직정보 C
	                  --   ,계약 E
	                  --   ,일괄계약 D
	                WHERE B.반송철회해지구분 IN ('1','2','3','6')
	                  AND B.반송철회해지상태코드  = '12'	
                 
					  AND B.취소일자 BETWEEN 마감년월 || '01'
	                                  AND (CASE WHEN A.취소종류코드 = '6' THEN 마감년월 || '31' -- 조사해지취소 경우 
	                                            ELSE (SELECT 기준일자
	                                                    FROM 월별일정관리
	                                                   WHERE 업무구분코드 = B.업무구분코드
	                                                     AND 일정관리종류코드 = CASE WHEN DECODE(SUBSTR(A.증권번호_일괄계약번호,1,1),'G',D.개인법인판매구분,E.개인법인판매구분) = '1'
	                                                                           THEN 'NCP28' ELSE 'NCG28' END
	                                                     AND 마감년월      = TO_CHAR(ADD_MONTHS(TO_DATE(마감년월,'YYYYMM'),1 ),'YYYYMM')) END)
																 
	                  AND A.취소종류코드 IN ('1','2','3','6')
	                  AND A.취소이자      > 50000
	                  AND A.취소이자소득세 > 0
	                  AND B.증권번호_일괄계약번호   = A.증권번호_일괄계약번호
	                  AND B.송금후철회반송취소이력번호 = A.송금후철회반송취소이력번호
	                --  AND E.증권번호(+)     = A.증권번호_일괄계약번호
	                --  AND D.일괄계약번호(+)     = A.증권번호_일괄계약번호
	                --  AND C.기관코드(+)   = A.모집_부활기관코드
	                --  AND C.기준년월(+)     = 마감년월
	                  AND NOT EXISTS (
	                                   SELECT 1
	                                     FROM 계약부속정보 X
	                                         ,계약 Y
	                                         ,통합고객 Z
	                                    WHERE X.증권번호        = B.증권번호_일괄계약번호
	                                      AND X.보험료법인부담율 = 100
	                                      AND Y.증권번호        = B.증권번호_일괄계약번호
	                                      AND Y.계약자고객ID   = Z.고객ID
	                                      AND Z.고객구분코드      = '2'
	                                      AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                                     )
	               )
				   
			  -- ### 로직으로 뺌 (파프리카)	   
	          WHERE ((계약마감후처리여부 = 'N' AND 계약체결년월 <= 마감년월)
	             OR  (계약마감후처리여부 = 'Y' AND 계약체결년월 <  마감년월)
	             OR   반송철회해지구분 = '3' )
			
			
			
			
			
			  
		#### 이거는 TO-BE 반영 가능함???????	해지/감액기본 관련   
		  /* ************************** 송금일자 기준 해지건   **************************** */
		 UNION ALL
		 
	         SELECT
	                DECODE(A.개인법인판매구분,'1','개인','2','법인') 기관판매구분코드
	               ,'조사'             업무구분코드
	               ,'반송_가성립'        반송철회해지구분
	               ,A.요청일자          결재일자
	               ,B.모집기관코드        모집_부활기관코드
	            --   ,C.기관명            기관명
	               ,A.해지/감액증권번호        증권번호
	               ,A.반환통지서발행일자        반환통지서발행일자
	               ,A.송금일자             반송철회해지송금일자
	               ,NVL(B.초회실입금보험료,0) 초회실입금보험료
	               ,NVL(A.반환이자     ,0) 반환이자
	               ,NVL(A.소득세      ,0) 소득세
	               ,NVL(A.주민세      ,0) 주민세
	               ,(NVL(A.반환이자,0) - ( NVL(A.소득세,0) + NVL(A.주민세,0)))     SUB_TOTAL
	               ,NVL(A.환급대상금액 + A.반환이자 - ( A.소득세 + A.주민세),0)   총환급보험료
	               ,'00000000'              가산이자마감처리일자
	               ,'00000'                 반환통지서발행기관코드
	               ,'N'                     CNCL_YN
	               ,반환송금경로구분
	         FROM  해지/감액기본 A
	              ,신계약일마감 B
	             -- ,지국통합조직정보 C
	         WHERE A.송금일자      BETWEEN 마감년월 || '01' AND 마감년월 || '31'
	           AND A.해지/감액사유코드 = '7001'
	           AND A.해지감액구분 = '1'
	           AND A.해지/감액상태코드 = '14'
	           AND A.반환이자      >  50000
	           AND A.해지/감액증권번호   = B.증권번호
	        --   AND B.모집기관코드 = C.기관코드(+)
	        --   AND C.기준년월(+)     = 마감년월
	           AND NOT EXISTS (SELECT 1 FROM 계약부속정보 WHERE 증권번호=A.해지/감액증권번호 AND 보험료법인부담율=100)
			   
			
	    UNION ALL
		
	       SELECT
	              DECODE(C.기관판매구분코드,'1','개인','2','법인') 기관판매구분코드
	             ,'조사'                  업무구분코드
	             ,'반송_가성립'           반송철회해지구분
	             ,B.요청일자             결재일자
	             ,D.모집기관코드        모집_부활기관코드
	        --     ,C.기관명             기관명
	             ,B.해지/감액증권번호          증권번호
	             ,B.반환통지서발행일자        반환통지서발행일자
	             ,B.송금일자             반송철회해지송금일자
	             ,NVL(D.초회실입금보험료,0) 초회실입금보험료
	             ,NVL(B.반환이자     ,0) 반환이자
	             ,NVL(B.소득세      ,0) 소득세
	             ,NVL(B.주민세      ,0) 주민세
	             ,(NVL(B.반환이자,0) - ( NVL(B.소득세,0) + NVL(B.주민세,0)))   SUB_TOTAL
	             ,NVL(B.환급대상금액 + B.반환이자 - ( B.소득세 + B.주민세),0) 총환급보험료
	             ,'00000000'              가산이자마감처리일자
	             ,'00000'                 반환통지서발행기관코드
	             ,'N'                     CNCL_YN
	             ,B.반환송금경로구분
	         FROM 해지/감액기본 B
	             ,송금후철회반송취소 A
	             ,신계약일마감 D
	          --   ,지국통합조직정보 C
	        WHERE B.결재일자      BETWEEN 마감년월 || '01' AND 마감년월 || '31'
	          AND B.해지/감액상태코드 = '15'
	          AND B.경리마감여부   = 'Y'
	          AND B.해지/감액사유코드 = '7001'
	          AND B.해지/감액증권번호   = A.증권번호_일괄계약번호
	          AND A.부활처리번호   = '0000'
	          AND A.송금후철회반송취소이력번호 = (SELECT 
	                                         송금후철회반송취소이력번호
	                                    FROM 송금후철회반송취소 V
	                                   WHERE V.증권번호_일괄계약번호 = A.증권번호_일괄계약번호
	                                     AND V.부활처리번호 = A.부활처리번호
	                                     AND ROWNUM = 1)
	          AND A.취소이자      > 50000
	          AND A.취소이자소득세 > 0
	          AND A.취소종류코드 = '4'
	        --  AND C.기관코드(+)   = A.모집_부활기관코드
	        --  AND C.기준년월(+)   = 마감년월
	          AND D.증권번호      = B.해지/감액증권번호
			  
			  -- ### 로직으로 뺌 (파프리카)	
	          AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = B.해지/감액증권번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = B.해지/감액증권번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )
								   
								   
		UNION ALL
			/* ******* 취소처리일자 기준 해지건  **** */
	         SELECT
	                DECODE(B.개인법인판매구분,'1','개인','2','법인') 기관판매구분코드
	               , '조사' 업무구분코드
	               ,'조사해지취소'
	               ,A.취소보험료송금일자
	               ,A.모집_부활기관코드
	         --      ,C.기관명
	               ,A.증권번호_일괄계약번호
	               ,'        '
	               ,A.취소보험료송금일자
	               ,A.취소보험료
	               ,A.취소이자
	               ,A.취소이자소득세
	               ,A.취소이자주민세
	               ,(NVL(A.취소이자,0) - ( NVL(A.취소이자소득세,0) + NVL(A.취소이자주민세,0))) SUB_TOTAL
	               ,NVL(A.취소보험료 + A.취소이자 - ( A.취소이자소득세 + A.취소이자주민세),0)   총환급보험료
	               , '00000000' 가산이자마감처리일자
	               , '00000'    반환통지서발행기관코드
	               ,'Y'         CNCL_YN
	               ,B.반환송금경로구분
	           FROM 해지/감액기본 B
	               ,송금후철회반송취소 A
	            --   ,지국통합조직정보 C
	          WHERE B.취소처리일자 BETWEEN 마감년월 || '01' AND 마감년월 || '31'
	            AND B.해지/감액상태코드 = '15'
	            AND B.경리마감여부   = 'Y'
	            AND B.해지/감액사유코드 = '7001'
	            AND B.해지/감액증권번호   = A.증권번호_일괄계약번호
	            AND A.부활처리번호   = '0000'
	            AND A.송금후철회반송취소이력번호 = (SELECT
	                                           송금후철회반송취소이력번호
	                                      FROM 송금후철회반송취소 V
	                                     WHERE V.증권번호_일괄계약번호 = A.증권번호_일괄계약번호
	                                       AND V.부활처리번호 = A.부활처리번호
	                                       AND ROWNUM = 1)
	            AND A.취소이자      > 50000
	            AND A.취소이자소득세 > 0
	            AND A.취소종류코드 = '4'
	          --  AND C.기관코드(+)   = A.모집_부활기관코드
	          --  AND C.기준년월(+)     = 마감년월
			  
			  -- ### 로직으로 뺌 (파프리카)	
	            AND NOT EXISTS (
	                                SELECT 1
	                                  FROM 계약부속정보 X
	                                      ,계약 Y
	                                      ,통합고객 Z
	                                 WHERE X.증권번호        = B.해지/감액증권번호
	                                   AND X.보험료법인부담율 = 100
	                                   AND Y.증권번호        = B.해지/감액증권번호
	                                   AND Y.계약자고객ID   = Z.고객ID
	                                   AND Z.고객구분코드      = '2'
	                                   AND SUBSTR(Z.사업자등록번호,4,2) BETWEEN '81' AND '88'
	                               )						   
								   
			
		#### 이거는 TO-BE 반영 가능함???????	 	

			
	   
	    
		
====================================
CMNC_erpHub_CC.pc

/******************************************************************************
 *   System  명  : 대한생명 NK21 프로젝트                                     *
 *   Library 명  : /.../product/lib/nc/libnc.so                               *
 *   File    명  : /.../product/lib/nc/CMNC_erpHub_CC.pc                      *
 *   설      명  : 업무별 ERP HUB테이블 입력                                  *
 *   작  성  일  : 2005.11.10                                                 *
 *   작  성  자  : 김무근                                                     *
 *   사용 DB I/O : DENC_ERPHUB_001_SP  - 업무별 ERP HUB테이블 입력            *
 *----------------------------------------------------------------------------*
 *   개정 번호       일자     수정자           내        용                   *
 *----------------------------------------------------------------------------*
 ******************************************************************************/

/*----------------------------------------------------------------------------*
 * 기본 HEADER FILES                                                          *
 *----------------------------------------------------------------------------*/
#include    <common.h>

/*----------------------------------------------------------------------------*
 * 업무 HEADER FILES                                                          *
 *----------------------------------------------------------------------------*/
EXEC SQL INCLUDE  nc/CMNC_lib_struct2.h;         /* 신계약 공통모듈 header     */

/*----------------------------------------------------------------------------*
 * SQL Header file/SQL Variable 선언                                          *
 *----------------------------------------------------------------------------*/
EXEC SQL INCLUDE  SQLCA;
EXEC SQL INCLUDE  dbio_com.h;

/* DBIO STUB HEADER file                                                      */

EXEC SQL INCLUDE    dbio/denc_erphub_001_sp.h ;  /*업무별 ERP HUB테이블 입력  */
EXEC SQL INCLUDE    dbio/denc_incerphub_001_sp.h ;  /*신계약 ERP HUB테이블 입력  */

#define ARRAY_SIZE 20

typedef struct  {
	varchar lastChmnMpno[  8+1];  /* 최종변경자사번   */
	varchar pgmId       [ 50+1];  /* 프로그램ID       */
  varchar dlngDate    [  8+1];  /* 처리일자         */
  varchar dlgsTypeCode[ 10+1];  /* 거래유형코드     */
  varchar erpPolyLnnu [ 14+1];  /* ERP증권_대출번호 */
  varchar trrvCnfmKey [ 40+1];  /* 송수신확인키     */
  varchar slipDate    [  8+1];  /* 전표일자         */
  varchar cnclYn      [  1+1];  /* 취소여부         */
  varchar erpItem1    [ 20+1];  /* ERP항목1         */
  varchar erpItem2    [ 20+1];  /* ERP항목2         */
  varchar erpItem3    [ 20+1];  /* ERP항목3         */
  varchar erpItem4    [ 20+1];  /* ERP항목4         */
  varchar erpItem5    [ 20+1];  /* ERP항목5         */
  varchar erpItem6    [ 20+1];  /* ERP항목6         */
  varchar erpItem7    [ 20+1];  /* ERP항목7         */
  varchar erpItem8    [ 20+1];  /* ERP항목8         */
  varchar erpItem9    [ 20+1];  /* ERP항목9         */
  varchar erpItem10   [ 20+1];  /* ERP항목10        */
  double  amt1               ;  /* 금액1      */
  double  amt2               ;  /* 금액2      */
  double  amt3               ;  /* 금액3      */
  double  amt4               ;  /* 금액4      */
  double  amt5               ;  /* 금액5      */
  double  amt6               ;  /* 금액6      */
  double  amt7               ;  /* 금액7      */
  double  amt8               ;  /* 금액8      */
  double  amt9               ;  /* 금액9      */
  double  amt10              ;  /* 금액10     */
  double  amt11              ;  /* 금액11     */
  double  amt12              ;  /* 금액12     */
  double  amt13              ;  /* 금액13     */
  double  amt14              ;  /* 금액14     */
  double  amt15              ;  /* 금액15     */
  double  amt16              ;  /* 금액16     */
  double  amt17              ;  /* 금액17     */
  double  amt18              ;  /* 금액18     */
  double  amt19              ;  /* 금액19     */
  double  amt20              ;  /* 금액20     */
  double  amt21              ;  /* 금액21     */
  double  amt22              ;  /* 금액22     */
  double  amt23              ;  /* 금액23     */
  double  amt24              ;  /* 금액24     */
  double  amt25              ;  /* 금액25     */
  double  amt26              ;  /* 금액26     */
  double  amt27              ;  /* 금액27     */
  double  amt28              ;  /* 금액28     */
  double  amt29              ;  /* 금액29     */
  double  amt30              ;  /* 금액30     */
  double  amt31              ;  /* 금액31     */
  double  amt32              ;  /* 금액32     */
  double  amt33              ;  /* 금액33     */
  double  amt34              ;  /* 금액34     */
  double  amt35              ;  /* 금액35     */
  double  amt36              ;  /* 금액36     */
  double  amt37              ;  /* 금액37     */
  varchar slipPublDpcd[  8+1];  /* 전표발행부서코드 */
} STR_ncerphub;

/*----------------------------------------------------------------------------*
 * 내부 FUNCTION 선언부                                                       *
 *----------------------------------------------------------------------------*/
int  CMNC_erpHub_PROC(CMNC_erpHub     *erpHub
                     ,CMNC_erpHubSub1 *erpHubSub1
                     ,CMNC_erpHubSub2 *erpHubSub2
                     ,CMNC_erpHubSub3 *erpHubSub3
                     ,CMNC_erpHubSub4 *erpHubSub4);
int  CMNC_erpHub1_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub1 *erpHubSub1, STR_ncerphub *ncerphub);
int  CMNC_erpHub2_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub2 *erpHubSub2, STR_ncerphub *ncerphub);
int  CMNC_erpHub3_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub3 *erpHubSub3, STR_ncerphub *ncerphub);
int  CMNC_erpHub4_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub4 *erpHubSub4, STR_ncerphub *ncerphub);
void CMNC_erpHub2_convYN (char *targetData, char *sourceData );
int  CMNC_erpHub_NCinsert (CMNC_erpHub *erpHub, STR_ncerphub *ncerphub);


/******************************************************************************
 * Function Name : CMNC_erpHub_CC()                                           *
 * Note          :  업무별 ERP HUB테이블 입력                                 *
 * Parameters    : IN =일괄계약번호                                           *
 *                 OUT=처리결과, 처리메시지                                   *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int    CMNC_erpHub_CC(CMNC_erpHub *erpHub
                    ,CMNC_erpHubSub1 *erpHubSub1
                    ,CMNC_erpHubSub2 *erpHubSub2
                    ,CMNC_erpHubSub3 *erpHubSub3
                    ,CMNC_erpHubSub4 *erpHubSub4)
{

  uvDebug("CMNC_erpHub_CC ==>호출직후 거래구분=[%s]",(char *) erpHubSub1->dlgsDvsn    .arr);

  /**************************************************************************/
  /*  업무별 ERP HUB테이블 입력                                             */
  /**************************************************************************/
  if (CMNC_erpHub_PROC(erpHub,erpHubSub1,erpHubSub2,erpHubSub3,erpHubSub4) == FAIL)
  {
    return FAIL;
  }

  return SUCCESS;
}

/******************************************************************************
 * Function Name : CMNC_erpHub_PROC()                                         *
 * Note          : 업무별 ERP HUB테이블 입력                                  *
 * Parameters    : erpHub                                                     *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
*******************************************************************************/
int  CMNC_erpHub_PROC(CMNC_erpHub     *erpHub
                    , CMNC_erpHubSub1 *erpHubSub1
                    , CMNC_erpHubSub2 *erpHubSub2
                    , CMNC_erpHubSub3 *erpHubSub3
                    , CMNC_erpHubSub4 *erpHubSub4)
{
  int     ii                     ;
  char    today_dateTime [20 + 1];                    /* 현재날짜시간       */
  char    today_date     [ 8 + 1];                    /* 현재날짜           */
  char    today_time     [ 8 + 1];                    /* 현재시간           */

  int     rtnCode            ;
  char    baseDate    [8 + 1];                        /* 기준일             */
  char    before_date [8 + 1];                        /* 전영업일           */
  char    after_date  [8 + 1];                        /* 익영업일           */

  char *fnName = "CMNC_erpHub_PROC";
  struct _denc_erphub_001_sp_in   dencErphub001SpIn;

  STR_ncerphub  ncerphub;

  memset(&ncerphub  , 0x00,   sizeof(ncerphub ));

  uvDebug("CMNC_erpHub_PROC START");
  uvBatchDebug(SC_INFO,"CMNC_erpHub_PROC START");

  setInitDBIO(1, DBCURSOR_CLOSE);
  dencErphub001SpInClear (&dencErphub001SpIn );

  ii = uvGetTime (1, today_dateTime);                 /* 1 : yyyymmddhhMMss */
  uvDebug ("today_dateTime = [%s]", today_dateTime);

  if (ii < 0)                                         /* 오류               */
  {
    strcpy (erpHub->resultMsg, "현재 날짜/시간(uvGetTime) error");
    return (FALSE);
  }

  sprintf (today_date, "%8.8s", today_dateTime);
  uvDebug ("today_date = [%s]", today_date    );

  sprintf (today_time, "%6.6s", today_dateTime + 8);
  uvDebug ("today_time = [%s]", today_time        );

  /* 익영업일 회계 처리 일자 계산 START */
  strcpy (baseDate, today_date);

  uvDebug ("### baseDate[%s]", baseDate);

  /* 전후영업일산출 : 기준일자를 입력 받아 전후 영업일자를 반환         */
  rtnCode = CMUV_getBizDay_CC (baseDate, 4, before_date, after_date );

  if (rtnCode < 0)
  {
    /* 공통모듈 전후영업일산출시 오류입니다.                          */
    strcpy (erpHub->resultMsg, "공통모듈 전후영업일산출시 오류입니다.");
    return (FALSE);
  }
  /* 익영업일 회계 처리 일자 계산 E N D */

  COPYVAR(dencErphub001SpIn.dlgsTypeCode      , erpHub->dlgsTypeCode      );/*거래유형코드    */
  COPYVAR(dencErphub001SpIn.dlngDeptCode      , erpHub->dlngDeptCode      );/*처리부서코드    */
  COPYVAR(dencErphub001SpIn.dlngEmplNo        , erpHub->dlngEmplNo        );/*처리사원번호    */
  STR2VAR(dencErphub001SpIn.trnsDate          , today_date                );/*송신일자        */
  STR2VAR(dencErphub001SpIn.trnsTime          , today_time                );/*송신시간        */
  COPYVAR(dencErphub001SpIn.dlgsGrpCode       , erpHub->dlgsGrpCode       );/*거래단체코드    */
  COPYVAR(dencErphub001SpIn.emplFpNo          , erpHub->emplFpNo          );/*사원_FP번호     */
  COPYVAR(dencErphub001SpIn.erpPolyLnnu       , erpHub->erpPolyLnnu       );/*ERP증권_대출번호*/
  COPYVAR(dencErphub001SpIn.trrvCnfmKey       , erpHub->trrvCnfmKey       );/*송수신확인키    */
  COPYVAR(dencErphub001SpIn.slipDate          , erpHub->slipDate          );/*전표일자        */
  COPYVAR(dencErphub001SpIn.evidDate          , erpHub->evidDate          );/*증빙일자        */
  STR2VAR(dencErphub001SpIn.rcwcStddDate      , ""                        );/*입출금기준일자  */
  STR2VAR(dencErphub001SpIn.rcwcMetdDvsn      , ""                        );/*입출금방법구분  */
  STR2VAR(dencErphub001SpIn.erpCrnyCode       , "KRW"                     );/*ERP통화코드     */
  COPYVAR(dencErphub001SpIn.slipPublDpcd      , erpHub->slipPublDpcd      );/*전표발행부서코드*/
  COPYVAR(dencErphub001SpIn.slipPrpoDpcd      , erpHub->slipPrpoDpcd      );/*전표발의부서코드*/
  STR2VAR(dencErphub001SpIn.fldrCode          , "000000"                  );/*폴더코드        */
  COPYVAR(dencErphub001SpIn.erpGoodClcd       , erpHub->erpGoodClcd       );/*ERP상품분류코드 */
  STR2VAR(dencErphub001SpIn.coaVal1           , "00000000"                );/*COA값1          */
  STR2VAR(dencErphub001SpIn.coaVal2           , "00000000000000"          );/*COA값2          */
  STR2VAR(dencErphub001SpIn.erpDlplCode       , ""                        );/*ERP거래처코드   */
  COPYVAR(dencErphub001SpIn.cnclYn            , erpHub->cnclYn            );/*취소여부        */
  STR2VAR(dencErphub001SpIn.recvDlngStcd      , "000"                     );/*수신처리상태코드*/

  if (strncmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC",2) == 0)
  {
    if (strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC001") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC002") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC003") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC004") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC005") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC006") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC007") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC008") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC009") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC030") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC031") == 0 ||
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC033") == 0 ||  /* 중도부가접수 */
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC034") == 0 ||  /* 중도부가접수삭제 */
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC035") == 0 ||  /* 중도부가성립 */
        strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC036") == 0 )   /* 중도부가성립취소 */

    {

      uvDebug("CMNC_erpHub1_PROC ==>호출직전 거래구분=[%s]",(char *) erpHubSub1->dlgsDvsn    .arr);

      if  (CMNC_erpHub1_PROC(erpHub,erpHubSub1,&ncerphub) == FAIL)
      {
        return FAIL;
      }

      STR2VAR(dencErphub001SpIn.whodSysCode       , "NC_신계약"               );/*원천시스템코드  */
      STR2VAR(dencErphub001SpIn.dlngDate          , today_date                );/*처리일자        */
      STR2VAR(dencErphub001SpIn.dlngTime          , today_time                );/*처리시간        */
      STR2VAR(dencErphub001SpIn.fundCode          , "A0000"                   );/*펀드코드        */
    }
    else if (strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC010") == 0 ||  /* 신계약_신계약반환         */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC011") == 0 ||  /* 신계약_신계약반환지급     */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC012") == 0 ||  /* 신계약_신계약반환취소입금 */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC013") == 0 ||  /* 신계약_부활반송           */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC014") == 0 ||  /* 신계약_부활반송취소입금   */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC015") == 0 ||  /* 신계약_부활반송지급       */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC016") == 0 ||  /* 신계약_계약조사           */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC017") == 0 ||  /* 신계약_계약조사지급       */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC018") == 0 ||  /* 신계약_계약조사취소입금   */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC025") == 0 ||  /* 신계약반환취소결재        */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC026") == 0 ||  /* 부활반송취소결재          */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC028") == 0 ||  /* 계약조사취소결재          */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC027") == 0 ||  /* 대표송금기관지급          */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC037") == 0 ||  /* 중도부가반환              */
             strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NC038") == 0 )   /* 중도부가반환지급          */
    {
      if  (CMNC_erpHub2_PROC(erpHub,erpHubSub2,&ncerphub) == FAIL)
      {
          return FAIL;
      }

      STR2VAR(dencErphub001SpIn.whodSysCode       , "NC_신계약"               );/*원천시스템코드  */
      STR2VAR(dencErphub001SpIn.dlngDate          , today_date                );/*처리일자        */
      STR2VAR(dencErphub001SpIn.dlngTime          , today_time                );/*처리시간        */
      STR2VAR(dencErphub001SpIn.fundCode          , "A0000"                   );/*펀드코드        */
      uvDebug ("=====> 4");
    }
  }
  /* 변액 */
  else if (strncmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NS",2) == 0 )
  {
    if  (CMNC_erpHub3_PROC(erpHub,erpHubSub3,&ncerphub) == FAIL)
    {
        return FAIL;
    }

    STR2VAR(dencErphub001SpIn.whodSysCode       , "NS_신계약_변액"    );/*원천시스템코드*/
    COPYVAR(dencErphub001SpIn.dlngDate          , erpHub->dlngDate    );/*처리일자          */
    STR2VAR(dencErphub001SpIn.dlngTime          , today_time          );/*처리시간      */
    STR2VAR(dencErphub001SpIn.dlngDeptCode      , "00018"             );/*처리부서코드      */
    STR2VAR(dencErphub001SpIn.dlngEmplNo        , "1920769"           );/*처리사원번호      */
    STR2VAR(dencErphub001SpIn.trnsDate          , today_date          );/*송신일자      */
    STR2VAR(dencErphub001SpIn.trnsTime          , today_time          );/*송신시간      */
    COPYVAR(dencErphub001SpIn.fundCode          , erpHub->fundCode    );/*펀드코드      */
  }
  /* 신개인 */
  else if (strncmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY",2) == 0 )
  {
    if  (CMNC_erpHub3_PROC(erpHub,erpHubSub3,&ncerphub) == FAIL)
    {
      return FAIL;
    }

    if (strcmp((char *)erpHub->fundCode.arr, "00000")==0) {
    	COPY(erpHub->fundCode, "93004");
    }

    uvDebug ("FUND CODE = [%s]", (char *) erpHub->fundCode.arr);

    /* 펀드코드(대한생명에서 사용하고 있는 신개인연금 펀드코드:93004) */
    if(strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY001") == 0 ||  /* 신개인_신계약 */
       strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY002") == 0 ||  /* 신개인_부  활 */
       strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY003") == 0 )   /* 신개인_조  사 */
    {
      STR2VAR(dencErphub001SpIn.whodSysCode       , "NY_신계약_신개인연금");/*원천시스템코드  */
      COPYVAR(dencErphub001SpIn.dlngDate          , erpHub->dlngDate      );/*처리일자      */
      STR2VAR(dencErphub001SpIn.dlngTime          , today_time            );/*처리시간      */
      STR2VAR(dencErphub001SpIn.dlngDeptCode      , "00018"               );/*처리부서코드    */
      STR2VAR(dencErphub001SpIn.dlngEmplNo        , "1920769"             );/*처리사원번호    */
      COPYVAR(dencErphub001SpIn.fundCode          , erpHub->fundCode      );/*펀드코드      */
      STR2VAR(dencErphub001SpIn.erpDlplCode       , "TR009"               );/*ERP거래처코드   */
    } else if(strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY004") == 0 ||  /* 신개인_신계약이체 */
              strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY005") == 0 ||  /* 신개인_부  활이체 */
              strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY006") == 0 )   /* 신개인_조  사이체 */
    {
      STR2VAR(dencErphub001SpIn.whodSysCode       , "NY_신계약_신개인연금");/*원천시스템코드 */
      STR2VAR(dencErphub001SpIn.dlngDate          , today_date            );/*처리일자      */
      STR2VAR(dencErphub001SpIn.dlngTime          , today_time            );/*처리시간      */
      STR2VAR(dencErphub001SpIn.dlngDeptCode      , "00018"               );/*처리부서코드  */
      STR2VAR(dencErphub001SpIn.dlngEmplNo        , "1920769"             );/*처리사원번호  */
      COPYVAR(dencErphub001SpIn.fundCode          , erpHub->fundCode      );/*펀드코드      */
      STR2VAR(dencErphub001SpIn.erpDlplCode       , "TR009"               );/*ERP거래처코드   */
    } else if(strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY007") == 0 ||  /* 자산연계형_신계약     */
              strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY008") == 0 ||  /* 자산연계형_부  활     */
              strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY009") == 0 ||  /* 자산연계형_조  사     */
              strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY010") == 0 ||  /* 자산연계형_신계약이체 */
              strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY011") == 0 ||  /* 자산연계형_부  활이체 */
              strcmp((char *)dencErphub001SpIn.dlgsTypeCode.arr, "NY012") == 0 )   /* 자산연계형_조  사이체 */
    {
      STR2VAR(dencErphub001SpIn.whodSysCode       , "NY_신계약_신개인연금"); /*원천시스템코드 */
      STR2VAR(dencErphub001SpIn.dlngDate          , today_date            ); /*처리일자       */
      STR2VAR(dencErphub001SpIn.dlngTime          , today_time            ); /*처리시간       */
      STR2VAR(dencErphub001SpIn.dlngDeptCode      , "00018"               ); /*처리부서코드   */
      STR2VAR(dencErphub001SpIn.dlngEmplNo        , "1920769"             ); /*처리사원번호   */
      COPYVAR(dencErphub001SpIn.fundCode          , erpHub->fundCode      ); /*펀드코드       */
      STR2VAR(dencErphub001SpIn.erpDlplCode       , "TR009"               ); /*ERP거래처코드  */
    }
  }
  /* 거래유형코드 미정*/
  else
  {
    if (CMNC_erpHub4_PROC(erpHub,erpHubSub4,&ncerphub) == FAIL)
    {
      return FAIL;
    }
  }

  uvDebug("▼▼▼ ERP INTERFACE 테이블 입력 값 START ▼▼▼");
  uvDebug("거래유형코드    = [%s]", (char *)dencErphub001SpIn.dlgsTypeCode    .arr);
  uvDebug("원천시스템코드  = [%s]", (char *)dencErphub001SpIn.whodSysCode     .arr);
  uvDebug("처리부서코드    = [%s]", (char *)dencErphub001SpIn.dlngDeptCode    .arr);
  uvDebug("처리사원번호    = [%s]", (char *)dencErphub001SpIn.dlngEmplNo      .arr);
  uvDebug("처리일자        = [%s]", (char *)dencErphub001SpIn.dlngDate        .arr);
  uvDebug("처리시간        = [%s]", (char *)dencErphub001SpIn.dlngTime        .arr);
  uvDebug("송신일자        = [%s]", (char *)dencErphub001SpIn.trnsDate        .arr);
  uvDebug("송신시간        = [%s]", (char *)dencErphub001SpIn.trnsTime        .arr);
  uvDebug("거래단체코드    = [%s]", (char *)dencErphub001SpIn.dlgsGrpCode     .arr);
  uvDebug("사원_FP번호     = [%s]", (char *)dencErphub001SpIn.emplFpNo        .arr);
  uvDebug("ERP증권_대출번호= [%s]", (char *)dencErphub001SpIn.erpPolyLnnu     .arr);
  uvDebug("송수신확인키    = [%s]", (char *)dencErphub001SpIn.trrvCnfmKey     .arr);
  uvDebug("전표일자        = [%s]", (char *)dencErphub001SpIn.slipDate        .arr);
  uvDebug("증빙일자        = [%s]", (char *)dencErphub001SpIn.evidDate        .arr);
  uvDebug("입출금기준일자  = [%s]", (char *)dencErphub001SpIn.rcwcStddDate    .arr);
  uvDebug("입출금방법구분  = [%s]", (char *)dencErphub001SpIn.rcwcMetdDvsn    .arr);
  uvDebug("ERP통화코드     = [%s]", (char *)dencErphub001SpIn.erpCrnyCode     .arr);
  uvDebug("전표발행부서코드= [%s]", (char *)dencErphub001SpIn.slipPublDpcd    .arr);
  uvDebug("전표발의부서코드= [%s]", (char *)dencErphub001SpIn.slipPrpoDpcd    .arr);
  uvDebug("폴더코드        = [%s]", (char *)dencErphub001SpIn.fldrCode        .arr);
  uvDebug("펀드코드        = [%s]", (char *)dencErphub001SpIn.fundCode        .arr);
  uvDebug("ERP상품분류코드 = [%s]", (char *)dencErphub001SpIn.erpGoodClcd     .arr);
  uvDebug("COA값1          = [%s]", (char *)dencErphub001SpIn.coaVal1         .arr);
  uvDebug("COA값2          = [%s]", (char *)dencErphub001SpIn.coaVal2         .arr);
  uvDebug("ERP거래처코드   = [%s]", (char *)dencErphub001SpIn.erpDlplCode     .arr);
  uvDebug("취소여부        = [%s]", (char *)dencErphub001SpIn.cnclYn          .arr);
  uvDebug("수신처리상태코드= [%s]", (char *)dencErphub001SpIn.recvDlngStcd    .arr);

  COPYVAR(dencErphub001SpIn.dlgsData          , erpHub->dlgsData          );/*거래데이터      */
  uvDebug("dlgsData2    = [%s]", (char *)erpHub->dlgsData     .arr);
  uvDebug("거래데이터   = [%s]", (char *)dencErphub001SpIn.dlgsData       .arr);

  uvDebug("▲▲▲ ERP INTERFACE 테이블 입력 값   END ▲▲▲");

  dencErphub001Sp(&basicParam, &dencErphub001SpIn);

  if  (getCDALResult() != SQL_OK)
  {
    setDBIOErrMsg(fnName);
    uvDebug("DBIO(DENC_ERPHUB_001_SP) 호출 Error[%d], %s",cptReturnCode, getCDALErrMsg());
    erpHub->resultCode = 10;
    strcpy(erpHub->resultMsg,"업무별 ERP HUB테이블 입력모듈(DENC_ERPHUB_001_SP) 호출 Error");
    return FAIL;
  }

  uvDebug(" * [%s] rpSize[%d]", fnName, basicParam.rpSize);

  /* TB_NCERPHUB 입력 */
  STR2VAR(ncerphub.dlngDate        , today_date          );/*처리일자         */

  if(strlen(uvGetServiceName())>0) {
    COPY(ncerphub.lastChmnMpno  , uvGetUserID()     );/* 최종변경자사번  */
    COPY(ncerphub.pgmId         , uvGetServiceName());/* 프로그램ID      */
  } else if(strlen(uvGetBtPgmID())>0) {
    COPY(ncerphub.lastChmnMpno  , uvGetBtUser()     );/* 최종변경자사번  */
    COPY(ncerphub.pgmId         , uvGetBtPgmID()    );/* 프로그램ID      */
  } else {
    COPY(ncerphub.lastChmnMpno  , "2130054"         );/* 최종변경자사번  */
    COPY(ncerphub.pgmId         , "CMNC_erpHub_CC"  );/* 프로그램ID      */
  }

  if (CMNC_erpHub_NCinsert(erpHub,&ncerphub) == FAIL)
  {
    return FAIL;
  }

  return TRUE;
}

/******************************************************************************
  Function Name : CMNC_erpHub1_PROC ()
  Note          :
  Parameters    :
  Return Value  : TRUE  : 정상
                  FALSE : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int CMNC_erpHub1_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub1 *erpHubSub1, STR_ncerphub *ncerphub)
{
  struct CMNC_erpHubSub1_fill fillStr;

  varchar     Data    [999 + 1]   ;/*처리데이터*/

  INITVAR (Data);
  memset(&fillStr  , 0x00,   sizeof(fillStr ));
  /*char *bff = "000000000000000";*/

  sprintf(fillStr.dlgsDvsn          ,"%3s"   , (char *)erpHubSub1->dlgsDvsn     .arr);
  sprintf(fillStr.prstGrpDvsn       ,"%1s"   , (char *)erpHubSub1->prstGrpDvsn  .arr);
  sprintf(fillStr.cnvsYn            ,"%1s"   , (char *)erpHubSub1->cnvsYn       .arr);
  sprintf(fillStr.inptRout          ,"%2s"   , (char *)erpHubSub1->inptRout     .arr);
  sprintf(fillStr.inptRsul          ,"%1s"   , (char *)erpHubSub1->inptRsul     .arr);
  sprintf(fillStr.paymCyclCode      ,"%2s"   , (char *)erpHubSub1->paymCyclCode .arr);
  sprintf(fillStr.bankCode          ,"%3s"   , (char *)erpHubSub1->bankCode     .arr);
  sprintf(fillStr.bancaCoop         ,"%5s"   , (char *)erpHubSub1->bancaCoop    .arr);
  sprintf(fillStr.saleCmsn          ,"%015.f",         erpHubSub1->saleCmsn         );
  sprintf(fillStr.saleCnclCmsn      ,"%015.f",         erpHubSub1->saleCnclCmsn     );
  sprintf(fillStr.reviRrcvPrem      ,"%015.f",         erpHubSub1->reviRrcvPrem     );
  sprintf(fillStr.retnPrem          ,"%015.f",         erpHubSub1->retnPrem         );
  sprintf(fillStr.recvRrem          ,"%015.f",         erpHubSub1->recvRrem         );
  sprintf(fillStr.fstiRrcvPrem      ,"%015.f",         erpHubSub1->fstiRrcvPrem     );
  sprintf(fillStr.reviPrem          ,"%015.f",         erpHubSub1->reviPrem         );
  sprintf(fillStr.arreInte          ,"%015.f",         erpHubSub1->arreInte         );
  sprintf(fillStr.trnfCmsn          ,"%015.f",         erpHubSub1->trnfCmsn         );
  //sprintf(fillStr.fill_1            ,"%s"    ,         bff                          );
  //sprintf(fillStr.fill_2            ,"%s"    ,         bff                          );
  //sprintf(fillStr.iccoPrem          ,"%015.f",         erpHubSub1->iccoPrem         );
  uvDebug ("sizeof(fillStr1) =====> %d", sizeof(fillStr) );

  uvDebug("거래구분          = [%s]",fillStr.dlgsDvsn     );
  uvDebug("개인단체구분      = [%s]",fillStr.prstGrpDvsn  );
  uvDebug("전환여부          = [%s]",fillStr.cnvsYn       );
  uvDebug("입금경로          = [%s]",fillStr.inptRout     );
  uvDebug("입금결과          = [%s]",fillStr.inptRsul     );
  uvDebug("납입주기          = [%s]",fillStr.paymCyclCode );
  uvDebug("은행코드          = [%s]",fillStr.bankCode     );
  uvDebug("방카제휴기관코드  = [%s]",fillStr.bancaCoop    );
  uvDebug("매출수수료        = [%s]",fillStr.saleCmsn     );
  uvDebug("매출취소수수료    = [%s]",fillStr.saleCnclCmsn );
  uvDebug("부활실입금액      = [%s]",fillStr.reviRrcvPrem );
  uvDebug("실송금액          = [%s]",fillStr.retnPrem     );
  uvDebug("입금액            = [%s]",fillStr.recvRrem     );
  uvDebug("초회실입금보험료  = [%s]",fillStr.fstiRrcvPrem );
  uvDebug("부활보험료        = [%s]",fillStr.reviPrem     );
  uvDebug("연체이자          = [%s]",fillStr.arreInte     );
  uvDebug("이체수수료        = [%s]",fillStr.trnfCmsn     );
  //uvDebug("Filler 1          = [%s]",fillStr.fill_1       );
  //uvDebug("Filler 2          = [%s]",fillStr.fill_2       );
  //uvDebug("증액보험료        = [%s]",fillStr.iccoPrem     );

  /*memcpy((char *)Data.arr, (char *)&fillStr, sizeof(fillStr));*/
  strncpy((char *)Data.arr, fillStr.dlgsDvsn     , sizeof(fillStr.dlgsDvsn     )); /* 거래구분         */
  strncat((char *)Data.arr, fillStr.prstGrpDvsn  , sizeof(fillStr.prstGrpDvsn  )); /* 개인단체구분     */
  strncat((char *)Data.arr, fillStr.cnvsYn       , sizeof(fillStr.cnvsYn       )); /* 전환여부         */
  strncat((char *)Data.arr, fillStr.inptRout     , sizeof(fillStr.inptRout     )); /* 입금경로         */
  strncat((char *)Data.arr, fillStr.inptRsul     , sizeof(fillStr.inptRsul     )); /* 입금결과         */
  strncat((char *)Data.arr, fillStr.paymCyclCode , sizeof(fillStr.paymCyclCode )); /* 납입주기         */
  strncat((char *)Data.arr, fillStr.bankCode     , sizeof(fillStr.bankCode     )); /* 은행코드         */
  strncat((char *)Data.arr, fillStr.bancaCoop    , sizeof(fillStr.bancaCoop    )); /* 방카제휴기관코드 */
  strncat((char *)Data.arr, fillStr.saleCmsn     , sizeof(fillStr.saleCmsn     )); /* 매출수수료       */
  strncat((char *)Data.arr, fillStr.saleCnclCmsn , sizeof(fillStr.saleCnclCmsn )); /* 매출취소수수료   */
  strncat((char *)Data.arr, fillStr.reviRrcvPrem , sizeof(fillStr.reviRrcvPrem )); /* 부활실입금액     */
  strncat((char *)Data.arr, fillStr.retnPrem     , sizeof(fillStr.retnPrem     )); /* 실송금액         */
  strncat((char *)Data.arr, fillStr.recvRrem     , sizeof(fillStr.recvRrem     )); /* 입금액           */
  strncat((char *)Data.arr, fillStr.fstiRrcvPrem , sizeof(fillStr.fstiRrcvPrem )); /* 초회실입금보험료 */
  strncat((char *)Data.arr, fillStr.reviPrem     , sizeof(fillStr.reviPrem     )); /* 부활보험료       */
  strncat((char *)Data.arr, fillStr.arreInte     , sizeof(fillStr.arreInte     )); /* 연체이자         */
  strncat((char *)Data.arr, fillStr.trnfCmsn     , sizeof(fillStr.trnfCmsn     )); /* 이체수수료       */
  //strncat((char *)Data.arr, fillStr.fill_1       , sizeof(fillStr.fill_1       )); /* 블랭크           */
  //strncat((char *)Data.arr, fillStr.fill_2       , sizeof(fillStr.fill_2       )); /* 블랭크           */
  //strncat((char *)Data.arr, fillStr.iccoPrem     , sizeof(fillStr.iccoPrem     )); /* 증액보험료       */

  Data.len = strlen((char *)Data.arr);

  uvDebug ("Data.len =====> %d", Data.len );
  uvDebug ("Data      = [%s]", (char *)Data            .arr);

  COPYVAR(erpHub->dlgsData, Data );
  uvDebug ("=====> 1");
  /*printf("Data      = [%s]\n", (char *)Data            .arr);
  printf("dlgsData1 = [%s]\n", (char *)Data            .arr);*/

  /* TB_NCERPHUB INSERT 추가*/
  COPYVAR(ncerphub->erpItem1 , erpHubSub1->dlgsDvsn    );/*거래구분         */
  COPYVAR(ncerphub->erpItem2 , erpHubSub1->prstGrpDvsn );/*개인단체구분     */
  COPYVAR(ncerphub->erpItem3 , erpHubSub1->cnvsYn      );/*전환여부         */
  COPYVAR(ncerphub->erpItem4 , erpHubSub1->inptRout    );/*입금경로         */
  COPYVAR(ncerphub->erpItem5 , erpHubSub1->inptRsul    );/*입금결과         */
  COPYVAR(ncerphub->erpItem6 , erpHubSub1->paymCyclCode);/*납입주기         */
  COPYVAR(ncerphub->erpItem7 , erpHubSub1->bankCode    );/*은행코드         */
  COPYVAR(ncerphub->erpItem8 , erpHubSub1->bancaCoop   );/*방카제휴기관코드 */
  (       ncerphub->amt1     = erpHubSub1->saleCmsn    );/*매출수수료       */
  (       ncerphub->amt2     = erpHubSub1->saleCnclCmsn);/*매출취소수수료   */
  (       ncerphub->amt3     = erpHubSub1->reviRrcvPrem);/*부활실입금액     */
  (       ncerphub->amt4     = erpHubSub1->retnPrem    );/*실송금액         */
  (       ncerphub->amt5     = erpHubSub1->recvRrem    );/*입금액           */
  (       ncerphub->amt6     = erpHubSub1->fstiRrcvPrem);/*초회실입금보험료 */
  (       ncerphub->amt7     = erpHubSub1->reviPrem    );/*부활보험료       */
  (       ncerphub->amt8     = erpHubSub1->arreInte    );/*연체이자         */
  (       ncerphub->amt9     = erpHubSub1->trnfCmsn    );/*이체수수료       */
  //(       ncerphub->amt10    = erpHubSub1->iccoPrem    );/*증액보험료       */

  return TRUE;
}

/******************************************************************************
  Function Name : CMNC_erpHub2_PROC ()
  Note          : 신계약반환/지급/취소, 부활반송/지급/취소 처리
  Parameters    : CMNC_erpHub *erpHub, CMNC_erpHubSub1 *erpHubSub2
  Return Value  : TRUE  : 정상
                  FALSE : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int CMNC_erpHub2_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub2 *erpHubSub2, STR_ncerphub *ncerphub)
{
  struct CMNC_erpHubSub2_fill fillStr;

  varchar     Data    [999 + 1]   ;/*처리데이터*/

  INITVAR (Data);
  memset(&fillStr  , 0x00,   sizeof(fillStr ));

  /*거래구분:신계약반환[010],신계약반환지급[011],신계약반환취소[012],부활반송[013],부활반송취소[014],부활반송지급[015]*/
  sprintf(fillStr.dlgsDvsn        ,"%3s" , (char *)erpHubSub2->dlgsDvsn     .arr);
  /* 반환종류    : 품질보증해지[1],해지[2],조사감액[3],신계약감액[4],신계약반송[5],청약철회[6],부활반송[7] */
  sprintf(fillStr.retnDvsn        ,"%1s" , (char *)erpHubSub2->rwdtDvsn     .arr);
  sprintf(fillStr.prstGrpDvsn     ,"%1s" , (char *)erpHubSub2->prsnCoprSadv .arr);  /* 개인단체구분: 개인[1], 단체[2] */

  CMNC_erpHub2_convYN     (fillStr.cnvsYn  , (char *)erpHubSub2->cnvsCnttYn  .arr );/* 전환여부    : 전환[1], 일반[2] */

  sprintf(fillStr.retnRout        ,"%1s" , (char *)erpHubSub2->retnRmtnRtdv .arr);    /* 반환경로    */

  CMNC_erpHub2_convYN     (fillStr.concYn  , (char *)erpHubSub2->bfapCnttStcd.arr );/* 성립여부    : YES [1], NO  [2] */

  sprintf(fillStr.amtDvsn         ,"%1s" , (char *)erpHubSub2->amtDvsn      .arr);  /* 금액구분    : 전월[1], 당월[2] */

  /* 송금여부    : YES[ 1 ], NO[ 2 ](RT만Y,N 입력) */
  CMNC_erpHub2_convYN     (fillStr.rmtnYn  , (char *)erpHubSub2->rmtnYn      .arr );

  /* 모집기관코드: 법인1,2,3사업부,점포사업부 현재4개 기관만입력) */
  sprintf(fillStr.clltOrgnCode    ,"%5s" , (char *)erpHubSub2->clltOrgnCode .arr);


  sprintf(fillStr.ato2RecvPrem    ,"%015.f" , erpHubSub2->ato2RecvPrem    );  /* 2회보험료      */
  sprintf(fillStr.rdatPrem        ,"%015.f" , erpHubSub2->rdatPrem        );  /* 감액보험료     */
  sprintf(fillStr.addInte         ,"%015.f" , erpHubSub2->addInte         );  /* 가산이자      : 품질보증해지만 입력 */
  sprintf(fillStr.addInteIncmTax  ,"%015.f" , erpHubSub2->addInteIncmTax  );  /* 가산이자소득세: 품질보증해지만 입력 */
  sprintf(fillStr.addInteRsdnTax  ,"%015.f" , erpHubSub2->addInteRsdnTax  );  /* 가산이자주민세: 품질보증해지만 입력 */
  sprintf(fillStr.prsnPermInpm    ,"%015.f" , erpHubSub2->prsnPermInpm    );  /* 개인인가판매수보 */
  sprintf(fillStr.othrAddAmt      ,"%015.f" , erpHubSub2->othrAddAmt      );  /* 기타가산금액     */
  sprintf(fillStr.grpPermInpm     ,"%015.f" , erpHubSub2->grpPermInpm     );  /* 단체인가판매수보 */
  sprintf(fillStr.precPrem        ,"%015.f" , erpHubSub2->precPrem        );  /* 선수보험료       */
  sprintf(fillStr.realRmtnAmt     ,"%015.f" , erpHubSub2->realRmtnAmt     );  /* 실송금액   : 가산이자 및 원천세 포함 */
  sprintf(fillStr.rmtnAmt         ,"%015.f" , erpHubSub2->rmtnAmt         );  /* 실지급금액 : 가산이자 및 원천세 제외 */
  sprintf(fillStr.stplLamt        ,"%015.f" , erpHubSub2->stplLamt        );  /* 약관대출금     */
  sprintf(fillStr.stlnInte        ,"%015.f" , erpHubSub2->stlnInte        );  /* 약관대출이자   */
  sprintf(fillStr.othrDuctAmt     ,"%015.f" , erpHubSub2->othrDuctAmt     );  /* 약대원리금보전 */
  sprintf(fillStr.cvapOtpf        ,"%015.f" , erpHubSub2->cvapOtpf        );  /* 잡이익_민원해지 */
  sprintf(fillStr.insoOtpf        ,"%015.f" , erpHubSub2->insoOtpf        );  /* 잡이익_부실계약해지 */
  sprintf(fillStr.cnvsCollPrem    ,"%015.f" , erpHubSub2->cnvsCollPrem    );  /* 전환전계약입금보험료 */
  sprintf(fillStr.rstaRetnPrem    ,"%015.f" , erpHubSub2->rstaRetnPrem    );  /* 차액반환보험료 */
  sprintf(fillStr.fstiSumPrem     ,"%015.f" , erpHubSub2->fstiSumPrem     );  /* 초회실입금보험료 */
  sprintf(fillStr.fstiSumPremMpay ,"%015.f" , erpHubSub2->fstiSumPremMpay );  /* 초회실입금보험료_월납 */
  sprintf(fillStr.fstiSumPremLupy ,"%015.f" , erpHubSub2->fstiSumPremLupy );  /* 초회실입금보험료_일시납 */
  sprintf(fillStr.addCnttArngAmt  ,"%015.f" , erpHubSub2->addCnttArngAmt  );  /* 추가계약정리금액 */
  sprintf(fillStr.qlguTrmtAmt     ,"%015.f" , erpHubSub2->qlguTrmtAmt     );  /* 품질해지금액 */
  sprintf(fillStr.dsctPrem        ,"%015.f" , erpHubSub2->dsctPrem        );  /* 할인료       */
  sprintf(fillStr.sspnAmt         ,"%015.f" , erpHubSub2->sspnAmt         );  /* 해약만기취소 */
  sprintf(fillStr.trmtRdatPrem    ,"%015.f" , erpHubSub2->trmtRdatPrem    );  /* 해지감액보험료 */
  sprintf(fillStr.cnvsCnttPremLupy,"%015.f" , erpHubSub2->cnvsCnttPremLupy);  /* 전환실송금액(일시납)  */
  sprintf(fillStr.ncAmt01         ,"%015.f" , erpHubSub2->ncAmt01         );  /* 신계약 금액 01        */
  sprintf(fillStr.ncAmt02         ,"%015.f" , erpHubSub2->ncAmt02         );  /* 신계약 금액 02        */
  sprintf(fillStr.ncAmt03         ,"%015.f" , erpHubSub2->ncAmt03         );  /* 신계약 금액 03        */
  sprintf(fillStr.ncAmt04         ,"%015.f" , erpHubSub2->ncAmt04         );  /* 신계약 금액 04        */
  sprintf(fillStr.ncAmt05         ,"%015.f" , erpHubSub2->ncAmt05         );  /* 신계약 금액 05        */
  sprintf(fillStr.ncAmt06         ,"%015.f" , erpHubSub2->ncAmt06         );  /* 신계약 금액 06        */
  sprintf(fillStr.ncAmt07         ,"%015.f" , erpHubSub2->ncAmt07         );  /* 신계약 금액 07        */
  sprintf(fillStr.ncAmt08         ,"%015.f" , erpHubSub2->ncAmt08         );  /* 신계약 금액 08        */
  sprintf(fillStr.ncAmt09         ,"%015.f" , erpHubSub2->ncAmt09         );  /* 신계약 금액 09        */
  sprintf(fillStr.ncAmt10         ,"%015.f" , erpHubSub2->ncAmt10         );  /* 신계약 금액 10        */

  uvDebug ("sizeof(fillStr) =====> %d", sizeof(fillStr) );

  /*memcpy((char *)Data.arr, (char *)&fillStr, sizeof(fillStr));*/
  strncpy((char *)Data.arr, fillStr.dlgsDvsn         , sizeof(fillStr.dlgsDvsn        )); /*거래구분               */
  strncat((char *)Data.arr, fillStr.retnDvsn         , sizeof(fillStr.retnDvsn        )); /*반환종류               */
  strncat((char *)Data.arr, fillStr.prstGrpDvsn      , sizeof(fillStr.prstGrpDvsn     )); /*개인단체구분           */
  strncat((char *)Data.arr, fillStr.cnvsYn           , sizeof(fillStr.cnvsYn          )); /*전환여부               */
  strncat((char *)Data.arr, fillStr.retnRout         , sizeof(fillStr.retnRout        )); /*반환경로               */
  strncat((char *)Data.arr, fillStr.concYn           , sizeof(fillStr.concYn          )); /*성립여부               */
  strncat((char *)Data.arr, fillStr.amtDvsn          , sizeof(fillStr.amtDvsn         )); /*금액구분               */
  strncat((char *)Data.arr, fillStr.rmtnYn           , sizeof(fillStr.rmtnYn          )); /*송금여부               */
  strncat((char *)Data.arr, fillStr.clltOrgnCode     , sizeof(fillStr.clltOrgnCode    )); /*모집기관코드           */
  strncat((char *)Data.arr, fillStr.ato2RecvPrem     , sizeof(fillStr.ato2RecvPrem    )); /*2회보험료              */
  strncat((char *)Data.arr, fillStr.rdatPrem         , sizeof(fillStr.rdatPrem        )); /*감액보험료             */
  strncat((char *)Data.arr, fillStr.addInte          , sizeof(fillStr.addInte         )); /*가산이자               */
  strncat((char *)Data.arr, fillStr.addInteIncmTax   , sizeof(fillStr.addInteIncmTax  )); /*가산이자소득세         */
  strncat((char *)Data.arr, fillStr.addInteRsdnTax   , sizeof(fillStr.addInteRsdnTax  )); /*가산이자주민세         */
  strncat((char *)Data.arr, fillStr.prsnPermInpm     , sizeof(fillStr.prsnPermInpm    )); /*개인인가판매수보       */
  strncat((char *)Data.arr, fillStr.othrAddAmt       , sizeof(fillStr.othrAddAmt      )); /*기타가산금액           */
  strncat((char *)Data.arr, fillStr.grpPermInpm      , sizeof(fillStr.grpPermInpm     )); /*단체인가판매수보       */
  strncat((char *)Data.arr, fillStr.precPrem         , sizeof(fillStr.precPrem        )); /*선수보험료             */
  strncat((char *)Data.arr, fillStr.rmtnAmt          , sizeof(fillStr.rmtnAmt         )); /*실송금액               */
  strncat((char *)Data.arr, fillStr.realRmtnAmt      , sizeof(fillStr.realRmtnAmt     )); /*실지급금액             */
  strncat((char *)Data.arr, fillStr.stplLamt         , sizeof(fillStr.stplLamt        )); /*약관대출금             */
  strncat((char *)Data.arr, fillStr.stlnInte         , sizeof(fillStr.stlnInte        )); /*약관대출이자           */
  strncat((char *)Data.arr, fillStr.othrDuctAmt      , sizeof(fillStr.othrDuctAmt     )); /*약대원리금보전         */
  strncat((char *)Data.arr, fillStr.cvapOtpf         , sizeof(fillStr.cvapOtpf        )); /*잡이익_민원해지        */
  strncat((char *)Data.arr, fillStr.insoOtpf         , sizeof(fillStr.insoOtpf        )); /*잡이익_부실계약해지    */
  strncat((char *)Data.arr, fillStr.cnvsCollPrem     , sizeof(fillStr.cnvsCollPrem    )); /*전환전계약입금보험료   */
  strncat((char *)Data.arr, fillStr.rstaRetnPrem     , sizeof(fillStr.rstaRetnPrem    )); /*차액반환보험료         */
  strncat((char *)Data.arr, fillStr.fstiSumPrem      , sizeof(fillStr.fstiSumPrem     )); /*초회실입금보험료       */
  strncat((char *)Data.arr, fillStr.fstiSumPremMpay  , sizeof(fillStr.fstiSumPremMpay )); /*초회실입금보험료_월납  */
  strncat((char *)Data.arr, fillStr.fstiSumPremLupy  , sizeof(fillStr.fstiSumPremLupy )); /*초회실입금보험료_일시납*/
  strncat((char *)Data.arr, fillStr.addCnttArngAmt   , sizeof(fillStr.addCnttArngAmt  )); /*추가계약정리금액       */
  strncat((char *)Data.arr, fillStr.qlguTrmtAmt      , sizeof(fillStr.qlguTrmtAmt     )); /*품질해지금액           */
  strncat((char *)Data.arr, fillStr.dsctPrem         , sizeof(fillStr.dsctPrem        )); /*할인료                 */
  strncat((char *)Data.arr, fillStr.sspnAmt          , sizeof(fillStr.sspnAmt         )); /*해약만기취소           */
  strncat((char *)Data.arr, fillStr.trmtRdatPrem     , sizeof(fillStr.trmtRdatPrem    )); /*해지감액보험료         */
  strncat((char *)Data.arr, fillStr.cnvsCnttPremLupy , sizeof(fillStr.cnvsCnttPremLupy)); /*전환실송금액(일시납)   */
  strncat((char *)Data.arr, fillStr.ncAmt01          , sizeof(fillStr.ncAmt01         )); /*신계약 금액 01         */
  strncat((char *)Data.arr, fillStr.ncAmt02          , sizeof(fillStr.ncAmt02         )); /*신계약 금액 02         */
  strncat((char *)Data.arr, fillStr.ncAmt03          , sizeof(fillStr.ncAmt03         )); /*신계약 금액 03         */
  strncat((char *)Data.arr, fillStr.ncAmt04          , sizeof(fillStr.ncAmt04         )); /*신계약 금액 04         */
  strncat((char *)Data.arr, fillStr.ncAmt05          , sizeof(fillStr.ncAmt05         )); /*신계약 금액 05         */
  strncat((char *)Data.arr, fillStr.ncAmt06          , sizeof(fillStr.ncAmt06         )); /*신계약 금액 06         */
  strncat((char *)Data.arr, fillStr.ncAmt07          , sizeof(fillStr.ncAmt07         )); /*신계약 금액 07         */
  strncat((char *)Data.arr, fillStr.ncAmt08          , sizeof(fillStr.ncAmt08         )); /*신계약 금액 08         */
  strncat((char *)Data.arr, fillStr.ncAmt09          , sizeof(fillStr.ncAmt09         )); /*신계약 금액 09         */
  strncat((char *)Data.arr, fillStr.ncAmt10          , sizeof(fillStr.ncAmt10         )); /*신계약 금액 10         */

  Data.len = strlen((char *)Data.arr);

  uvDebug ("Data.len =====> %d", Data.len );
  uvDebug ("Data      = [%s]", (char *)Data            .arr);

  COPYVAR(erpHub->dlgsData, Data );
  uvDebug ("=====> 3");
  /*printf("Data      = [%s]\n", (char *)Data            .arr);
  printf("dlgsData1 = [%s]\n", (char *)Data            .arr);*/

  /* TB_NCERPHUB INSERT 추가*/
  COPYVAR(         ncerphub->erpItem1     , erpHubSub2->dlgsDvsn        );/*거래구분                 */
  COPYVAR(         ncerphub->erpItem2     , erpHubSub2->rwdtDvsn        );/*반환종류                 */
  COPYVAR(         ncerphub->erpItem3     , erpHubSub2->prsnCoprSadv    );/*개인단체구분             */
  strncpy((char *) ncerphub->erpItem4.arr , fillStr.cnvsYn ,1           );/*전환여부                 */
  (                ncerphub->erpItem4.len = 1                           );
  COPYVAR(         ncerphub->erpItem5     , erpHubSub2->retnRmtnRtdv    );/*반환경로                 */
  strncpy((char *) ncerphub->erpItem6.arr , fillStr.concYn ,1           );/*성립여부                 */
  (                ncerphub->erpItem6.len = 1                           );
  COPYVAR(         ncerphub->erpItem7     , erpHubSub2->amtDvsn         );/*금액구분                 */
  strncpy((char *) ncerphub->erpItem8.arr , fillStr.rmtnYn ,1           );/*송금여부                 */
  (                ncerphub->erpItem8.len = 1                           );
  COPYVAR(         ncerphub->erpItem9     , erpHubSub2->clltOrgnCode    );/*모집기관코드             */
  (                ncerphub->amt1         = erpHubSub2->ato2RecvPrem    ); /*2회보험료               */
  (                ncerphub->amt2         = erpHubSub2->rdatPrem        ); /*감액보험료              */
  (                ncerphub->amt3         = erpHubSub2->addInte         ); /*가산이자                */
  (                ncerphub->amt4         = erpHubSub2->addInteIncmTax  ); /*가산이자소득세          */
  (                ncerphub->amt5         = erpHubSub2->addInteRsdnTax  ); /*가산이자주민세          */
  (                ncerphub->amt6         = erpHubSub2->prsnPermInpm    ); /*개인인가판매수보        */
  (                ncerphub->amt7         = erpHubSub2->othrAddAmt      ); /*기타가산금액            */
  (                ncerphub->amt8         = erpHubSub2->grpPermInpm     ); /*단체인가판매수보        */
  (                ncerphub->amt9         = erpHubSub2->precPrem        ); /*선수보험료              */
  (                ncerphub->amt10        = erpHubSub2->rmtnAmt         ); /*실송금액                */
  (                ncerphub->amt11        = erpHubSub2->realRmtnAmt     ); /*실지급금액              */
  (                ncerphub->amt12        = erpHubSub2->stplLamt        ); /*약관대출금              */
  (                ncerphub->amt13        = erpHubSub2->stlnInte        ); /*약관대출이자            */
  (                ncerphub->amt14        = erpHubSub2->othrDuctAmt     ); /*약대원리금보전          */
  (                ncerphub->amt15        = erpHubSub2->cvapOtpf        ); /*잡이익_민원해지         */
  (                ncerphub->amt16        = erpHubSub2->insoOtpf        ); /*잡이익_부실계약해지     */
  (                ncerphub->amt17        = erpHubSub2->cnvsCollPrem    ); /*전환전계약입금보험료    */
  (                ncerphub->amt18        = erpHubSub2->rstaRetnPrem    ); /*차액반환보험료          */
  (                ncerphub->amt19        = erpHubSub2->fstiSumPrem     ); /*초회실입금보험료        */
  (                ncerphub->amt20        = erpHubSub2->fstiSumPremMpay ); /*초회실입금보험료_월납   */
  (                ncerphub->amt21        = erpHubSub2->fstiSumPremLupy ); /*초회실입금보험료_일시납 */
  (                ncerphub->amt22        = erpHubSub2->addCnttArngAmt  ); /*추가계약정리금액        */
  (                ncerphub->amt23        = erpHubSub2->qlguTrmtAmt     ); /*품질해지금액            */
  (                ncerphub->amt24        = erpHubSub2->dsctPrem        ); /*할인료                  */
  (                ncerphub->amt25        = erpHubSub2->sspnAmt         ); /*해약만기취소            */
  (                ncerphub->amt26        = erpHubSub2->trmtRdatPrem    ); /*해지감액보험료          */
  (                ncerphub->amt27        = erpHubSub2->cnvsCnttPremLupy); /*전환실송금액(일시납)    */
  (                ncerphub->amt28        = erpHubSub2->ncAmt01         ); /*신계약 금액 01          */
  (                ncerphub->amt29        = erpHubSub2->ncAmt02         ); /*신계약 금액 02          */
  (                ncerphub->amt30        = erpHubSub2->ncAmt03         ); /*신계약 금액 03          */
  (                ncerphub->amt31        = erpHubSub2->ncAmt04         ); /*신계약 금액 04          */
  (                ncerphub->amt32        = erpHubSub2->ncAmt05         ); /*신계약 금액 05          */
  (                ncerphub->amt33        = erpHubSub2->ncAmt06         ); /*신계약 금액 06          */
  (                ncerphub->amt34        = erpHubSub2->ncAmt07         ); /*신계약 금액 07          */
  (                ncerphub->amt35        = erpHubSub2->ncAmt08         ); /*신계약 금액 08          */
  (                ncerphub->amt36        = erpHubSub2->ncAmt09         ); /*신계약 금액 09          */
  (                ncerphub->amt37        = erpHubSub2->ncAmt10         ); /*신계약 금액 10          */

  return TRUE;
}

/******************************************************************************
  Function Name : CMNC_erpHub2_convYN ()
  Note          :
  Parameters    : char *dlgsTypeCode, char *rwdtDvsn
  Return Value  : TRUE  : 정상
                  FALSE : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
void CMNC_erpHub2_convYN(char *targetData, char *sourceData)
{
  if (strcmp(sourceData , "Y") == 0) /* Y/N */
  {
    sprintf(targetData ,"%1s", "1" );
  }
  else if (strcmp(sourceData , "1") == 0 ||
           strcmp(sourceData , "2") == 0 ) /* 성립여부 */
  {
    sprintf(targetData ,"%1s", "1" );
  }
  else if (strlen(sourceData) == 0)
  {
    sprintf(targetData ,"%1s", "" );
  }
  else
  {
    sprintf(targetData ,"%1s", "2" );
  }
  uvDebug ("targetData = [%s]", targetData);
}

/******************************************************************************
  Function Name : CMNC_erpHub3_PROC ()
  Note          : 신개인연금 특별계정 이체 대상건
  Parameters    : CMNC_erpHub *erpHub, CMNC_erpHubSub3 *erpHubSub3
  Return Value  : TRUE  : 정상
                  FALSE : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int CMNC_erpHub3_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub3 *erpHubSub3, STR_ncerphub *ncerphub)
{

  varchar     Data    [150 + 1]   ;/*처리데이터*/

  memset(&Data  , 0x00,   sizeof(Data ));

  char dlgsDvsn   [3];    /* 거래구분 : 신계약이체[001],부활이체[002],조사이체[003] */
/*char bsnsDvsn   [2];     업무구분(이체계정별 그룹)                              */
  char prstGrpDvsn[1];    /* 개인단체구분                                                           */
  char trnfAccd   [5];    /* 이체계정코드                                           */
  char dsctPrem   [15];   /* 금액(투입인출보험료)                                   */

  sprintf(dlgsDvsn    ,"%3s"   ,(char *)erpHubSub3->dlgsDvsn   .arr);
/*sprintf(bsnsDvsn    ,"%2s"   ,(char *)erpHubSub3->bsnsDvsn   .arr);                              */
  sprintf(prstGrpDvsn ,"%1s"   ,(char *)erpHubSub3->prstGrpDvsn.arr);
  sprintf(trnfAccd    ,"%-5s"  ,(char *)erpHubSub3->trnfAccd   .arr);
  sprintf(dsctPrem    ,"%015.f",        erpHubSub3->dsctPrem       );

  /* 거래구분 : 신계약이체[001],부활이체[002],조사이체[003] */
  strncat((char *)Data.arr, (char *) dlgsDvsn,        sizeof(dlgsDvsn) );
/*strncat((char *)Data.arr, (char *) bsnsDvsn,        sizeof(bsnsDvsn) );    업무구분(이체계정별 그룹) */
  strncat((char *)Data.arr, (char *) prstGrpDvsn,     sizeof(trnfAccd) ); /* 개인단체구분                  */
  strncat((char *)Data.arr, (char *) trnfAccd,        sizeof(trnfAccd) ); /* 이체계정코드              */
  strncat((char *)Data.arr, (char *) dsctPrem,        sizeof(dsctPrem) ); /* 금액(투입인출보험료)      */

  COPY        (erpHub->dlgsData, (char *)Data.arr);

  uvDebug ("Data      = [%s]", (char *)Data            .arr);
  uvDebug ("dlgsData3 = [%s]", (char *)erpHub->dlgsData.arr);

  COPYVAR(ncerphub->erpItem1 , erpHubSub3->dlgsDvsn   );/*업무구분         */
  COPYVAR(ncerphub->erpItem2 , erpHubSub3->prstGrpDvsn);/*개인단체구분     */
  COPYVAR(ncerphub->erpItem3 , erpHubSub3->trnfAccd   );/*이체계정코드     */
  (       ncerphub->amt1     = erpHubSub3->dsctPrem   );/*금액             */

  return TRUE;
}

/******************************************************************************
  Function Name : CMNC_erpHub4_PROC ()
  Note          : CMNC_erpHub *erpHub, CMNC_erpHubSub1 *erpHubSub4
  Parameters    :신
  Return Value  : TRUE  : 정상
                  FALSE : 오류
 ------------------------------------------------------------------------------
  Remarks >>
*******************************************************************************/
int CMNC_erpHub4_PROC(CMNC_erpHub *erpHub, CMNC_erpHubSub4 *erpHubSub4, STR_ncerphub *ncerphub)
{
  uvDebug ("dlgsData  = [%s]", (char *)erpHub->dlgsData.arr);
  uvDebug ("dlngDate  = [%s]", (char *)ncerphub->dlngDate.arr);
  uvDebug ("dlgsDvsn  = [%s]", (char *)erpHubSub4->dlgsDvsn.arr);

  return TRUE;
}

/*    dcncCmnccybm02SpIn.cnt    = st_chungyakval->insuPsct;     피보험자인원수*/

/******************************************************************************
 * Function Name : CMNC_erpHub_NCinsert()                                     *
 * Note          : 신계약 ERP HUB테이블 입력                                  *
 * Parameters    : IN =                                                       *
 *                 OUT=처리결과, 처리메시지                                   *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int  CMNC_erpHub_NCinsert (CMNC_erpHub *erpHub, STR_ncerphub *ncerphub)
{
  char *fnName = "CMNC_erpHub_NCinsert";

  struct _denc_incerphub_001_sp_in  dencIncerphub001SpIn;

  dencIncerphub001SpInClear (&dencIncerphub001SpIn );

  /* tb_ncerphub insert 추가*/
  COPYVAR(dencIncerphub001SpIn.lastChmnMpno , ncerphub->lastChmnMpno); /* 최종변경자사번          */
  COPYVAR(dencIncerphub001SpIn.pgmId        , ncerphub->pgmId       ); /* 프로그램ID              */
  COPYVAR(dencIncerphub001SpIn.dlngDate     , ncerphub->dlngDate    ); /* 처리일자                */
  COPYVAR(dencIncerphub001SpIn.dlgsTypeCode , erpHub->dlgsTypeCode  ); /* 거래유형코드            */
  COPYVAR(dencIncerphub001SpIn.erpPolyLnnu  , erpHub->erpPolyLnnu   ); /* ERP증권_대출번호        */
  COPYVAR(dencIncerphub001SpIn.trrvCnfmKey  , erpHub->trrvCnfmKey   ); /* 송수신확인키            */
  COPYVAR(dencIncerphub001SpIn.slipDate     , erpHub->slipDate      ); /* 전표일자                */
  COPYVAR(dencIncerphub001SpIn.cnclYn       , erpHub->cnclYn        ); /* 취소여부                */
  COPYVAR(dencIncerphub001SpIn.erpItem1     , ncerphub->erpItem1    ); /* 거래구분                */
  COPYVAR(dencIncerphub001SpIn.erpItem2     , ncerphub->erpItem2    ); /* 반환종류                */
  COPYVAR(dencIncerphub001SpIn.erpItem3     , ncerphub->erpItem3    ); /* 개인단체구분            */
  COPYVAR(dencIncerphub001SpIn.erpItem4     , ncerphub->erpItem4    ); /* 전환여부                */
  COPYVAR(dencIncerphub001SpIn.erpItem5     , ncerphub->erpItem5    ); /* 반환경로                */
  COPYVAR(dencIncerphub001SpIn.erpItem6     , ncerphub->erpItem6    ); /* 성립여부                */
  COPYVAR(dencIncerphub001SpIn.erpItem7     , ncerphub->erpItem7    ); /* 금액구분                */
  COPYVAR(dencIncerphub001SpIn.erpItem8     , ncerphub->erpItem8    ); /* 송금여부                */
  COPYVAR(dencIncerphub001SpIn.erpItem9     , ncerphub->erpItem9    ); /* 모집기관코드            */
  (       dencIncerphub001SpIn.amt1         = ncerphub->amt1        ); /* 2회보험료               */
  (       dencIncerphub001SpIn.amt2         = ncerphub->amt2        ); /* 감액보험료              */
  (       dencIncerphub001SpIn.amt3         = ncerphub->amt3        ); /* 가산이자                */
  (       dencIncerphub001SpIn.amt4         = ncerphub->amt4        ); /* 가산이자소득세          */
  (       dencIncerphub001SpIn.amt5         = ncerphub->amt5        ); /* 가산이자주민세          */
  (       dencIncerphub001SpIn.amt6         = ncerphub->amt6        ); /* 개인인가판매수보        */
  (       dencIncerphub001SpIn.amt7         = ncerphub->amt7        ); /* 기타가산금액            */
  (       dencIncerphub001SpIn.amt8         = ncerphub->amt8        ); /* 단체인가판매수보        */
  (       dencIncerphub001SpIn.amt9         = ncerphub->amt9        ); /* 선수보험료              */
  (       dencIncerphub001SpIn.amt10        = ncerphub->amt10       ); /* 실송금액                */
  (       dencIncerphub001SpIn.amt11        = ncerphub->amt11       ); /* 실지급금액              */
  (       dencIncerphub001SpIn.amt12        = ncerphub->amt12       ); /* 약관대출금              */
  (       dencIncerphub001SpIn.amt13        = ncerphub->amt13       ); /* 약관대출이자            */
  (       dencIncerphub001SpIn.amt14        = ncerphub->amt14       ); /* 약대원리금보전          */
  (       dencIncerphub001SpIn.amt15        = ncerphub->amt15       ); /* 잡이익_민원해지         */
  (       dencIncerphub001SpIn.amt16        = ncerphub->amt16       ); /* 잡이익_부실계약해지     */
  (       dencIncerphub001SpIn.amt17        = ncerphub->amt17       ); /* 전환전계약입금보험료    */
  (       dencIncerphub001SpIn.amt18        = ncerphub->amt18       ); /* 차액반환보험료          */
  (       dencIncerphub001SpIn.amt19        = ncerphub->amt19       ); /* 초회실입금보험료        */
  (       dencIncerphub001SpIn.amt20        = ncerphub->amt20       ); /* 초회실입금보험료_월납   */
  (       dencIncerphub001SpIn.amt21        = ncerphub->amt21       ); /* 초회실입금보험료_일시납 */
  (       dencIncerphub001SpIn.amt22        = ncerphub->amt22       ); /* 추가계약정리금액        */
  (       dencIncerphub001SpIn.amt23        = ncerphub->amt23       ); /* 품질해지금액            */
  (       dencIncerphub001SpIn.amt24        = ncerphub->amt24       ); /* 할인료                  */
  (       dencIncerphub001SpIn.amt25        = ncerphub->amt25       ); /* 해약만기취소            */
  (       dencIncerphub001SpIn.amt26        = ncerphub->amt26       ); /* 해지감액보험료          */
  (       dencIncerphub001SpIn.amt27        = ncerphub->amt27       ); /* 전환실송금액(일시납)    */
  (       dencIncerphub001SpIn.amt28        = ncerphub->amt28       ); /* 신계약 금액 01          */
  (       dencIncerphub001SpIn.amt29        = ncerphub->amt29       ); /* 신계약 금액 02          */
  (       dencIncerphub001SpIn.amt30        = ncerphub->amt30       ); /* 신계약 금액 03          */
  (       dencIncerphub001SpIn.amt31        = ncerphub->amt31       ); /* 신계약 금액 04          */
  (       dencIncerphub001SpIn.amt32        = ncerphub->amt32       ); /* 신계약 금액 05          */
  (       dencIncerphub001SpIn.amt33        = ncerphub->amt33       ); /* 신계약 금액 06          */
  (       dencIncerphub001SpIn.amt34        = ncerphub->amt34       ); /* 신계약 금액 07          */
  (       dencIncerphub001SpIn.amt35        = ncerphub->amt35       ); /* 신계약 금액 08          */
  (       dencIncerphub001SpIn.amt36        = ncerphub->amt36       ); /* 신계약 금액 09          */
  (       dencIncerphub001SpIn.amt37        = ncerphub->amt37       ); /* 신계약 금액 10          */
  COPYVAR(dencIncerphub001SpIn.slipPublDpcd , erpHub->slipPublDpcd  ); /* 전표발행부서코드        */

  uvDebug("최종변경자사번         = [%s]", (char *)dencIncerphub001SpIn.lastChmnMpno.arr);
  uvDebug("프로그램ID             = [%s]", (char *)dencIncerphub001SpIn.pgmId       .arr);
  uvDebug("처리일자               = [%s]", (char *)dencIncerphub001SpIn.dlngDate    .arr);
  uvDebug("거래유형코드           = [%s]", (char *)dencIncerphub001SpIn.dlgsTypeCode.arr);
  uvDebug("ERP증권_대출번호       = [%s]", (char *)dencIncerphub001SpIn.erpPolyLnnu .arr);
  uvDebug("송수신확인키           = [%s]", (char *)dencIncerphub001SpIn.trrvCnfmKey .arr);
  uvDebug("전표일자               = [%s]", (char *)dencIncerphub001SpIn.slipDate    .arr);
  uvDebug("전표발행부서코드       = [%s]", (char *)dencIncerphub001SpIn.slipPublDpcd.arr);
  uvDebug("취소여부               = [%s]", (char *)dencIncerphub001SpIn.cnclYn      .arr);
  uvDebug("거래구분               = [%s]", (char *)dencIncerphub001SpIn.erpItem1    .arr);
  uvDebug("반환종류               = [%s]", (char *)dencIncerphub001SpIn.erpItem2    .arr);
  uvDebug("개인단체구분           = [%s]", (char *)dencIncerphub001SpIn.erpItem3    .arr);
  uvDebug("전환여부               = [%s]", (char *)dencIncerphub001SpIn.erpItem4    .arr);
  uvDebug("반환경로               = [%s]", (char *)dencIncerphub001SpIn.erpItem5    .arr);
  uvDebug("성립여부               = [%s]", (char *)dencIncerphub001SpIn.erpItem6    .arr);
  uvDebug("금액구분               = [%s]", (char *)dencIncerphub001SpIn.erpItem7    .arr);
  uvDebug("송금여부               = [%s]", (char *)dencIncerphub001SpIn.erpItem8    .arr);
  uvDebug("모집기관코드           = [%s]", (char *)dencIncerphub001SpIn.erpItem9    .arr);
  uvDebug("2회보험료              = [%f]",         dencIncerphub001SpIn.amt1            );
  uvDebug("감액보험료             = [%f]",         dencIncerphub001SpIn.amt2            );
  uvDebug("가산이자               = [%f]",         dencIncerphub001SpIn.amt3            );
  uvDebug("가산이자소득세         = [%f]",         dencIncerphub001SpIn.amt4            );
  uvDebug("가산이자주민세         = [%f]",         dencIncerphub001SpIn.amt5            );
  uvDebug("개인인가판매수보       = [%f]",         dencIncerphub001SpIn.amt6            );
  uvDebug("기타가산금액           = [%f]",         dencIncerphub001SpIn.amt7            );
  uvDebug("단체인가판매수보       = [%f]",         dencIncerphub001SpIn.amt8            );
  uvDebug("선수보험료             = [%f]",         dencIncerphub001SpIn.amt9            );
  uvDebug("실송금액               = [%f]",         dencIncerphub001SpIn.amt10           );
  uvDebug("실지급금액             = [%f]",         dencIncerphub001SpIn.amt11           );
  uvDebug("약관대출금             = [%f]",         dencIncerphub001SpIn.amt12           );
  uvDebug("약관대출이자           = [%f]",         dencIncerphub001SpIn.amt13           );
  uvDebug("약대원리금보전         = [%f]",         dencIncerphub001SpIn.amt14           );
  uvDebug("잡이익_민원해지        = [%f]",         dencIncerphub001SpIn.amt15           );
  uvDebug("잡이익_부실계약해지    = [%f]",         dencIncerphub001SpIn.amt16           );
  uvDebug("전환전계약입금보험료   = [%f]",         dencIncerphub001SpIn.amt17           );
  uvDebug("차액반환보험료         = [%f]",         dencIncerphub001SpIn.amt18           );
  uvDebug("초회실입금보험료       = [%f]",         dencIncerphub001SpIn.amt19           );
  uvDebug("초회실입금보험료_월납  = [%f]",         dencIncerphub001SpIn.amt20           );
  uvDebug("초회실입금보험료_일시납= [%f]",         dencIncerphub001SpIn.amt21           );
  uvDebug("추가계약정리금액       = [%f]",         dencIncerphub001SpIn.amt22           );
  uvDebug("품질해지금액           = [%f]",         dencIncerphub001SpIn.amt23           );
  uvDebug("할인료                 = [%f]",         dencIncerphub001SpIn.amt24           );
  uvDebug("해약만기취소           = [%f]",         dencIncerphub001SpIn.amt25           );
  uvDebug("해지감액보험료         = [%f]",         dencIncerphub001SpIn.amt26           );
  uvDebug("전환실송금액(일시납)   = [%f]",         dencIncerphub001SpIn.amt27           );
  uvDebug("신계약 금액 01         = [%f]",         dencIncerphub001SpIn.amt28           );
  uvDebug("신계약 금액 02         = [%f]",         dencIncerphub001SpIn.amt29           );
  uvDebug("신계약 금액 03         = [%f]",         dencIncerphub001SpIn.amt30           );
  uvDebug("신계약 금액 04         = [%f]",         dencIncerphub001SpIn.amt31           );
  uvDebug("신계약 금액 05         = [%f]",         dencIncerphub001SpIn.amt32           );
  uvDebug("신계약 금액 06         = [%f]",         dencIncerphub001SpIn.amt33           );
  uvDebug("신계약 금액 07         = [%f]",         dencIncerphub001SpIn.amt34           );
  uvDebug("신계약 금액 08         = [%f]",         dencIncerphub001SpIn.amt35           );
  uvDebug("신계약 금액 09         = [%f]",         dencIncerphub001SpIn.amt36           );
  uvDebug("신계약 금액 10         = [%f]",         dencIncerphub001SpIn.amt37           );

  dencIncerphub001Sp(&basicParam, &dencIncerphub001SpIn);

  if  (getCDALResult() != SQL_OK)
  {
    setDBIOErrMsg(fnName);
    uvDebug("DBIO(DENC_INCERPHUB_001_SP) 호출 Error[%d], %s",cptReturnCode, getCDALErrMsg());
    erpHub->resultCode = 10;
    strcpy(erpHub->resultMsg,"신계약 ERP HUB테이블 입력모듈(DENC_INCERPHUB_001_SP) 호출 Error");
    return FAIL;
  }

  return SUCCESS;
}


/******************************************************************************
  End of Code
 ******************************************************************************/

=============================
CMNC_erpHubComm_CC.pc

 /******************************************************************************
 *   System  명  : 대한생명 NK21 프로젝트                                  *
 *   Library 명  : /.../product/lib/nc/libnc.so                            *
 *   File    명  : /.../product/lib/nc/CMNC_erpHubComm_CC.pc               *
 *   설      명  : 신계약 ERP HUB테이블 입력 공통사항 조회                 *
 *   작  성  일  : 2006.12.01                                              *
 *   작  성  자  : 신진혁                                                  *
 *   사용 DB I/O : dcnc_erphubvw01_sp  - ERP HUB 공통사항 조회             *
 *----------------------------------------------------------------------------*
 *   개정 번호       일자     수정자           내        용                   *
 *----------------------------------------------------------------------------*
 ******************************************************************************/

/*----------------------------------------------------------------------------*
 * 기본 HEADER FILES                                                          *
 *----------------------------------------------------------------------------*/
#include  <common.h>
#include  <is/isBase.h>

/*----------------------------------------------------------------------------*
 * 업무 HEADER FILES                                                          *
 *----------------------------------------------------------------------------*/
EXEC SQL INCLUDE  nc/CMNC_lib_struct2.h ;           /* 신계약 공통모듈 header */
EXEC SQL INCLUDE  nc/nc_dupl_struct.h ;      /* 실손 중복확인 header   */

/*----------------------------------------------------------------------------*
 * SQL Header file/SQL Variable 선언                                          *
 *----------------------------------------------------------------------------*/
EXEC SQL INCLUDE  SQLCA;
EXEC SQL INCLUDE  dbio_com.h;

/* DBIO STUB HEADER file                                                      */

EXEC SQL INCLUDE    dbio/dcnc_erphubvw01_sp.h ;      /* ERP HUB 공통사항 조회 */

#define ARRAY_SIZE 20
#define UNDER_ORGN "00018"
#define BANKA_ORGN "00920"

/*----------------------------------------------------------------------------*
 * 외부 FUNCTION 선언부                                                       *
 *----------------------------------------------------------------------------*/
extern int  NC_bussPossDayChck (int bussCode, char *stddDate, char *bussPossYn);
extern int  NC_wkenCnttPossChck(char *polyNo , char *bussPossYn);
extern int  CMNC_updatePmmiResm_CC(int dvsn, char *polyNo);

/*----------------------------------------------------------------------------*
 * 내부 FUNCTION 선언부                                                       *
 *----------------------------------------------------------------------------*/

int CMNC_erpHubComm_PROC(CMNC_erpHubComm *erpHubComm);
int CMNC_erpHubComm_INPUT(CMNC_erpHubComm *erpHubComm);
#ifdef vInsCntt
//int CMNC_vlnsCnttChcd_INPUT(CMNC_erpHubComm *erpHubComm);
#endif
int CMNC_erpHubComm_PMMI(CMNC_erpHubComm *erpHubComm) ;

/* 업무구분에 따라서 입력하여야 할 값들을 int 값으로 정의시켜 놓는다  */
/* 0 은 입력하여야 할 항목, 1은 입력하지 말아야 할 항목               */
/*
거래구분 개인단체 전환여부 입금경로 입금결과 납입주기 은행코드 방카제휴기관코드 매출수수료 매출취소수수료 부활실입금액 실송금액
입금액  초회실입금보험료 부활보험료 연체이자 이체수수료
*/

static int bsnsDvsnArry[13][17] = {
    { 0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,0 },    /* NC001, 신계약접수       */
    { 0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1 },    /* NC002, 신계약접수삭제     */
    { 0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1 },    /* NC003, 신계약보험미수금입금 */
    { 0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1 },    /* NC004, 신계약성립       */
    { 0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1 },    /* NC005, 신계약성립취소     */
    { 0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,0 },    /* NC006, 부활접수        */
    { 0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,1,1 },    /* NC007, 부활접수삭제       */
    { 0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1 },    /* NC008, 부활성립        */
    { 0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1 },    /* NC009, 부활성립취소       */
    { 0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,0 },    /* NC033, 중도부가접수      */
    { 0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1 },    /* NC034, 중도부가접수취소   */
    { 0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1 },    /* NC035, 중도부가성립      */
    { 0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1 }     /* NC036, 중도부가성립취소    */
};

static char bsnsDvsnName[16][40] = {
  "신계약접수","신계약접수삭제","신계약보험미수금","신계약성립","신계약성립취소",
  "부활접수","부활접수삭제","부활성립","부활성립취소",
  "중도부가접수","중도부가접수삭제","중도부가성립","중도부가성립취소"
};

static varchar paymPrrmDate[8+1];                       /* 카드납 지급예정일자 */
static varchar clogStddDate[8+1];                       /* 수보마감일자 */
static varchar pgmId[10+1];                             /* 프로그램ID */
static varchar orgnSlipDvcd[10+1];                      /* 기관전표구분 (2007.12.17) */
static varchar pmmiResmYn[1+1];                         /* 단체실손재개건여부 */


/******************************************************************************
 * Function Name : CMNC_erpHub_CC()                                           *
 * Note          :  업무별 ERP HUB테이블 입력                                 *
 * Parameters    : IN =일괄계약번호                                           *
 *                 OUT=처리결과, 처리메시지                                   *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
 ******************************************************************************/
int    CMNC_erpHubComm_CC(CMNC_erpHubComm *erpHubComm) 
{

  /**************************************************************/
  /*  입력값 출력                                               */
  /**************************************************************/

  char *fnName = "CMNC_erpHubComm_CC";
  uvDebug("%s begin",fnName);

  uvDebug("업무구분 : [%s]",(char *) erpHubComm->workDvsn    .arr);
  uvDebug("거래유형 : [%s]",(char *) erpHubComm->dlgsTypeCode.arr);
  uvDebug("증권번호 : [%s]",(char *) erpHubComm->erpPolyLnnu .arr);
  uvDebug("부활처리 : [%s]",(char *) erpHubComm->reviDlngNo  .arr);

  uvDebug("취소여부 : [%s]",(char *) erpHubComm->cnclYn      .arr);
  uvDebug("처리부서 : [%s]",(char *) erpHubComm->dlngDeptCode.arr);
  uvDebug("사원번호 : [%s]",(char *) erpHubComm->dlngEmplNo  .arr);

  /****************************************************************/
  /* 배치로 특별처리하는 경우에 사원번호 또는 처리부서에          */
  /* 배치프로그램 ID 를 입력하면                                  */
  /* 사원번호는 1920769(남후자), 처리부서는 00018(언팅) 으로 고정 */
  /****************************************************************/

  if (strcmp((char *) erpHubComm->dlngEmplNo.arr, "BTncapl262") == 0) 
  {
    COPY(pgmId, "BTncapl262");
    COPY(erpHubComm->dlngEmplNo,"1920769");
    uvDebug("사원번호 변경됨 , 변경후사원번호[%s]",(char *) erpHubComm->dlngEmplNo.arr);
  }

  /* 운영기에서 ERP 모듈 입력시 에러가 나도 시범기간동안은 스킵하도록 처리한다
     errChk 값을 룰로 받아서 시범기간은 무조건 SUCCESS 하도록 처리한다      */
  int errChk    = 0;
  int retVal = uvRuleBase("NC_ErpErrProcFlg","","APL", &errChk);

  if (retVal != 0) {
    EXEC SQL ROLLBACK;
    uvDebug("ERP Error처리여부조회 (NC_ErpErrProcFlg) 룰 검색시 오류입니다."); /* RuleBase 실행 */
    return FAIL;
  }
  uvDebug("ERP Error처리여부조회 (NC_ErpErrProcFlg) ==> : [%d]",errChk);

  
  
  /* ERP HUB 입력 기본사항 조회 */
  if (CMNC_erpHubComm_PROC(erpHubComm) == FAIL) {
    return errChk;
  }


  if (strcmp((char *) erpHubComm->workDvsn.arr, "05") != 0) {  // 증액처리SKIP
    /**************************************************************/
    /* 실손보험 처리내역 저장                                     */
    /**************************************************************/
    if (strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC001") == 0 || /* 신계약접수     */
        strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC002") == 0 || /* 신계약접수취소 */
        strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC006") == 0 || /* 부활접수       */
        strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC007") == 0 || /* 부활접수취소   */
        strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC033") == 0 || /* 중도부가접수       */
        strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC034") == 0 || /* 중도부가접수취소   */
      ( strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC003") == 0 && /* 지정일이체/카드납입 취소 */
        strcmp((char *) erpHubComm->pmm->inptRsul   .arr, "2") == 0 )
       )

    {
      if (CMNC_erpHubComm_PMMI(erpHubComm) == FAIL)
      {
        return errChk;
      }
    }

    /**************************************************************/
    /* 단체실손 중지/재개 상태 반영                               */
    /**************************************************************/
    if (strcmp((char *) erpHubComm->workDvsn    .arr, "01"   ) == 0  &&  /* 개별계약   */
       (strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC004") == 0  ||  /* 신계약성립 */
        strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC005") == 0) &&  /* 신계약성립취소 */
        strcmp((char *) pmmiResmYn              .arr, "Y"    ) == 0) {  /* 단체실손재개건여부 */

      int dvsn = (strcmp((char *) erpHubComm->dlgsTypeCode.arr, "NC004") == 0)? 1 : 2;

      if (CMNC_updatePmmiResm_CC(dvsn,(char *) erpHubComm->erpPolyLnnu.arr) == FAIL) {
        return errChk;
      }

    }
  }

#ifdef vInsCntt
  /* 변액건 계약상태변경이력입력모듈 호출 */
  if (CMNC_vlnsCnttChcd_INPUT(erpHubComm) == FAIL) {
    return errChk;
  }
#endif

  /* ERP HUB 입력모듈 호출 */
  if (CMNC_erpHubComm_INPUT(erpHubComm) == FAIL) {
    return errChk;
  }

  return SUCCESS;
}

/******************************************************************************
 * Function Name : CMNC_erpHubComm_PROC()                                     *
 * Note          : 공통사항 조회                                              *
 * Parameters    : erpHub                                                     *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
*******************************************************************************/
int  CMNC_erpHubComm_PROC(CMNC_erpHubComm *erpHubComm) {

  char *fnName = "CMNC_erpHubComm_PROC";

  struct _dcnc_erphubvw01_sp_in   dcncErphubvw01SpIn;
  struct _dcnc_erphubvw01_sp_out   dcncErphubvw01SpOut;

  uvDebug("%s begin",fnName);

  setInitDBIO(1, DBCURSOR_CLOSE);
  dcncErphubvw01SpInClear(&dcncErphubvw01SpIn);
  dcncErphubvw01SpOutClear(&dcncErphubvw01SpOut);

  COPYVAR(dcncErphubvw01SpIn.pynoBdctNo, erpHubComm->erpPolyLnnu); /* 증권번호 */
  COPYVAR(dcncErphubvw01SpIn.reviDlngNo, erpHubComm->reviDlngNo); /* 부활처리번호 */
  COPYVAR(dcncErphubvw01SpIn.workDvsn, erpHubComm->workDvsn);     /* 업무구분 */

  /* 카드납입의 경우에만 매출/매출취소 여부가 동시에 발생하기 때문에 구별짓기 위하여
     취소여부를 셋팅한다 */
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC003") == 0 ||
      strcmp((char *) erpHubComm->workDvsn    .arr,"05"   ) == 0) 
  {
    NCOPYVAR(dcncErphubvw01SpIn.cnclYn, erpHubComm->cnclYn,1); /* 취소여부(카드납입 매출/매출취소 결정(동시발생할수 있음) */
  }

  uvDebug("증권번호     = [%s]", (char *) dcncErphubvw01SpIn.pynoBdctNo .arr);
  uvDebug("부활처리번호 = [%s]", (char *) dcncErphubvw01SpIn.reviDlngNo .arr);
  uvDebug("업무구분     = [%s]", (char *) dcncErphubvw01SpIn.workDvsn   .arr);
  uvDebug("취소여부     = [%s]", (char *) dcncErphubvw01SpIn.cnclYn     .arr);

  dcncErphubvw01Sp(&basicParam, &dcncErphubvw01SpIn,&dcncErphubvw01SpOut);

  if (getCDALResult() != SQL_OK) {
    setDBIOErrMsg(fnName);
    uvDebug("DBIO(DCNC_ERPHUBVW01_SP) 호출 Error[%d], %s",
                       cptReturnCode, getCDALErrMsg());
    erpHubComm->pmm->resultCode = 10;
    strcpy(erpHubComm->pmm->resultMsg,
               "업무별 ERP HUB테이블 조회모듈(DCNC_ERPHUBVW01_SP) 호출 Error");
    return FAIL;
  }
  /* CDAL호출 */


  /* 2009.3.20 컬러풀보험은 방문수금 대신에 가상송금(91) 을 넣는다 ==> 2015.05.07 삭제
  if ( CMNC_colorYn_CC((char *)erpHubComm->erpPolyLnnu.arr) == 1  )
  {
     sprintf((char *) dcncErphubvw01SpOut.ftprRecvMdcd   .arr,"%s","91"); /* 가상송금* /
  }*/

  uvDebug("설계사번호      [%s]",(char *) dcncErphubvw01SpOut.clltLpPrno     .arr);
  uvDebug("모집기관코드    [%s]",(char *) dcncErphubvw01SpOut.clltOrgnCode   .arr);
  uvDebug("상품분류        [%s]",(char *) dcncErphubvw01SpOut.goodClsfCode   .arr);
  uvDebug("개인단체구분    [%s]",(char *) dcncErphubvw01SpOut.prsnCoprSadv   .arr);
  uvDebug("전환여부        [%s]",(char *) dcncErphubvw01SpOut.cnvsYn         .arr);
  uvDebug("입금경로        [%s]",(char *) dcncErphubvw01SpOut.ftprRecvMdcd   .arr);
  uvDebug("입금결과        [%s]",(char *) dcncErphubvw01SpOut.recvYn         .arr);
  uvDebug("납입주기        [%s]",(char *) dcncErphubvw01SpOut.paymCyclCode   .arr);
  uvDebug("은행코드        [%s]",(char *) dcncErphubvw01SpOut.bankCode       .arr);
  uvDebug("방카제휴기관코드[%s]",(char *) dcncErphubvw01SpOut.bankCoop       .arr);
  uvDebug("매출수수료      [%f]",         dcncErphubvw01SpOut.sellCmsn           );
  uvDebug("매출취소수수료  [%f]",         dcncErphubvw01SpOut.sellCanCmsn        );
  uvDebug("부활실입금액    [%f]",         dcncErphubvw01SpOut.realRecvPrem       );
  uvDebug("실송금액        [%f]",         dcncErphubvw01SpOut.canFstiRrcvPrem    );
  uvDebug("입금액          [%f]",         dcncErphubvw01SpOut.recvPrem           );
  uvDebug("초회실입금보험료[%f]",         dcncErphubvw01SpOut.fstiRrcvPrem       );
  uvDebug("부활보험료      [%f]",         dcncErphubvw01SpOut.rvrm               );
  uvDebug("연체이자        [%f]",         dcncErphubvw01SpOut.reviArreInte       );
  uvDebug("이체수수료      [%f]",         dcncErphubvw01SpOut.trnfCmsn           );
  uvDebug("계약체결년월    [%s]",(char *) dcncErphubvw01SpOut.cnttConcYm     .arr);
  uvDebug("부활처리기관코드[%s]",(char *) dcncErphubvw01SpOut.reviDlngOgcd   .arr);
  uvDebug("부활실적기관코드[%s]",(char *) dcncErphubvw01SpOut.reviAchvOgcd   .arr);
  uvDebug("접수일자        [%s]",(char *) dcncErphubvw01SpOut.srdoRecpDate   .arr);
  uvDebug("성립일자        [%s]",(char *) dcncErphubvw01SpOut.cnttConcDate   .arr);
  uvDebug("지급예정일자    [%s]",(char *) dcncErphubvw01SpOut.paymPrrmDate   .arr);
  uvDebug("수보마감일자    [%s]",(char *) dcncErphubvw01SpOut.stddDate       .arr);
  uvDebug("기관전표구분코드[%s]",(char *) dcncErphubvw01SpOut.orgnSlipDvcd   .arr);
  uvDebug("단체실손재개여부[%s]",(char *) dcncErphubvw01SpOut.pmmiResmYn     .arr);
  uvDebug("단체실손재개여부[%f]",         dcncErphubvw01SpOut.iccoPrem           );


  /* COPYVAR(erpHubComm->pmm->dlgsDvsn     , erpHubComm->dlgsTypeCode,3          ); */
  COPYVAR(erpHubComm->emplFpNo          , dcncErphubvw01SpOut.clltLpPrno         ); /* 설계사번호 */
  COPYVAR(erpHubComm->erpGoodClcd       , dcncErphubvw01SpOut.goodClsfCode       ); /* 상품분류 */
  COPYVAR(erpHubComm->clltOrgnCode      , dcncErphubvw01SpOut.clltOrgnCode       ); /* 모집기관코드 */

  COPYVAR(erpHubComm->pmm->prstGrpDvsn  , dcncErphubvw01SpOut.prsnCoprSadv       ); /* 개인단체구분 */

  COPYVAR(erpHubComm->pmm->cnvsYn       , dcncErphubvw01SpOut.cnvsYn             ); /* 전환여부 */
  COPYVAR(erpHubComm->pmm->inptRout     , dcncErphubvw01SpOut.ftprRecvMdcd       ); /* 입금경로 */
  COPYVAR(erpHubComm->pmm->inptRsul     , dcncErphubvw01SpOut.recvYn             ); /* 입금결과 */
  COPYVAR(erpHubComm->pmm->paymCyclCode , dcncErphubvw01SpOut.paymCyclCode       ); /* 납입주기 */

  COPYVAR(erpHubComm->pmm->bankCode     , dcncErphubvw01SpOut.bankCode           ); /* 은행코드 */
  COPYVAR(erpHubComm->pmm->bancaCoop    , dcncErphubvw01SpOut.bankCoop           ); /* 방카제휴기관코드 */
  /* sale_chnl_code 가 "5" 인것만 방카제휴기관코드 있음 */

  erpHubComm->pmm->saleCmsn    =        dcncErphubvw01SpOut.sellCmsn; /* 매출수수료 */
  erpHubComm->pmm->saleCnclCmsn =        dcncErphubvw01SpOut.sellCanCmsn; /* 매출취소수수료 */
  erpHubComm->pmm->reviRrcvPrem =        dcncErphubvw01SpOut.realRecvPrem; /* 부활실입금액 */
  erpHubComm->pmm->retnPrem    =        dcncErphubvw01SpOut.canFstiRrcvPrem; /* 실송금액 */
  erpHubComm->pmm->recvRrem    =        dcncErphubvw01SpOut.recvPrem; /* 입금액 */
  erpHubComm->pmm->fstiRrcvPrem =        dcncErphubvw01SpOut.fstiRrcvPrem; /* 초회실입금보험료 */
  erpHubComm->pmm->reviPrem    =        dcncErphubvw01SpOut.rvrm; /* 부활보험료 */
  erpHubComm->pmm->arreInte    =        dcncErphubvw01SpOut.reviArreInte; /* 연체이자 */
  erpHubComm->pmm->trnfCmsn    =        dcncErphubvw01SpOut.trnfCmsn; /* 이체수수료 */
  COPYVAR(erpHubComm->cnttDate          , dcncErphubvw01SpOut.cnttDate           ); /* 계약일자 */

  COPYVAR(erpHubComm->cnttConcYm        , dcncErphubvw01SpOut.cnttConcYm         ); /* 계약체결년월 */
  COPYVAR(erpHubComm->reviDlngOgcd      , dcncErphubvw01SpOut.reviDlngOgcd       ); /* 부활처리기관코드 */
  COPYVAR(erpHubComm->reviAchvOgcd      , dcncErphubvw01SpOut.reviAchvOgcd       ); /* 부활실적기관코드 */
  COPYVAR(erpHubComm->srdoRecpDate      , dcncErphubvw01SpOut.srdoRecpDate       ); /* 접수일자 */
  COPYVAR(erpHubComm->cnttConcDate      , dcncErphubvw01SpOut.cnttConcDate       ); /* 성립일자 */

  COPYVAR(paymPrrmDate                  , dcncErphubvw01SpOut.paymPrrmDate       ); /* 지급예정일자 */
  COPYVAR(clogStddDate                  , dcncErphubvw01SpOut.stddDate           ); /* 수보마감일자 */

  COPYVAR(orgnSlipDvcd                  , dcncErphubvw01SpOut.orgnSlipDvcd       ); /* 기관전표구분코드 */
  COPYVAR(pmmiResmYn                    , dcncErphubvw01SpOut.pmmiResmYn         ); /* 단체실손재개건여부 */
  erpHubComm->pmm->iccoPrem =             dcncErphubvw01SpOut.iccoPrem; /* 증액보험료 */

  /* NC003 인 경우 취소여부 다시 NULL 값으로 셋팅한다(후에 cnclYn 의 값을 사용하기 때문에) */
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC003") == 0) 
  {
    if ( strcmp((char *)erpHubComm->cnclYn.arr+1,"A") == 0 ) 
    { 
        COPY(erpHubComm->cnclYn,"1");
    } 
    else 
    { 
        COPY(erpHubComm->cnclYn,"2"); 
    }
    /*COPY(erpHubComm->cnclYn,""); */
  } 
  else  
  if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0  ||
       strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC004") == 0) &&
       strcmp((char *) erpHubComm->workDvsn    .arr,"05"   ) == 0) 
  {
    if (strcmp((char *)erpHubComm->cnclYn.arr,"Y") == 0) 
    {
      COPY(erpHubComm->cnclYn,"2");
    } 
    else 
    {
      COPY(erpHubComm->cnclYn,"1");
    }
  }

  uvDebug("%s end",fnName);
  return TRUE;
}

/******************************************************************************
 * Function Name : CMNC_erpHubComm_INPUT()                                    *
 * Note          : ERP HUB 입력                                               *
 * Parameters    : erpHub                                                     *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
*******************************************************************************/
int  CMNC_erpHubComm_INPUT(CMNC_erpHubComm *erpHubComm) {
  int     t, tt;

  char *fnName = "CMNC_erpHubComm_INPUT";

  uvDebug("%s begin",fnName);

  varchar crntDate[8+1];                                          /* 현재일자 */

  int   bussCode = 0;
  char  bussPossYn[MAX_VALUE_LEN];                            /* 영업가능여부 */
  char  recpPossYn[MAX_VALUE_LEN];                            /* 접수가능여부 */
  char  stddDate[8+1];                                            /* 기준일자 */

  uvGetTime(13, (char *) crntDate.arr);
  crntDate.len  = strlen((char *) crntDate.arr);

  int compDate = uvToday();

  memset( stddDate  ,   0x00,   sizeof(stddDate  ));
  memset( bussPossYn,   0x00,   sizeof(bussPossYn));
  memset( recpPossYn,   0x00,   sizeof(recpPossYn));

  CMNC_erpHub ErpHub;                                     /* 공통부 STRUCTURE */
  CMNC_erpHubSub1 ErpHubSub1;                             /* FILLER STRUCTURE */
  CMNC_erpHubSub2 ErpHubSub2;                             /* FILLER STRUCTURE */
  CMNC_erpHubSub3 ErpHubSub3;                             /* FILLER STRUCTURE */
  CMNC_erpHubSub4 ErpHubSub4;                             /* FILLER STRUCTURE */

  memset(&ErpHub    ,   0x00,   sizeof(CMNC_erpHub    ));
  memset(&ErpHubSub1,   0x00,   sizeof(CMNC_erpHubSub1));
  memset(&ErpHubSub2,   0x00,   sizeof(CMNC_erpHubSub2));
  memset(&ErpHubSub3,   0x00,   sizeof(CMNC_erpHubSub3));
  memset(&ErpHubSub4,   0x00,   sizeof(CMNC_erpHubSub4));

  uvDebug("compDate=[%d]",compDate);

  /****************************************************************************/
  /* 신계약 접수삭제(NC002)                                                   */
  /* 당일접수삭제는 접수를 취소로 보내고, 익일접수삭제는 접수삭제 유형을 태움 */
  /* 지정일이체는 계약일자 이전에 삭제하면 접수의 취소(NC001)로 태운다        */
  /* 단 방카인 경우에는 익익일 삭제인 경우에만 NC002 로 태운다                */
  /* 2007.3.13 남후자                                                         */
  /****************************************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC002") == 0) {

    /* 당일접수삭제 */
    if (atoi((char *) erpHubComm->srdoRecpDate.arr) == compDate) 
    {
      COPY(erpHubComm->dlgsTypeCode, "NC001");                /* 거래유형코드 */
      COPY(erpHubComm->cnclYn, "2");                              /* 취소여부 */
    }
    /* 익일접수삭제 */
    /* 지정일이체는 계약일자 이전에 삭제하면 접수의 취소로 태운다   */
    /* 지정일이체는 계약일자 이후에는 접수삭제 온라인 으로는 불가함 */
    else 
    {

      if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"81") == 0) 
      { /* 지정일이체 */
        if (atoi((char *) erpHubComm->cnttDate.arr) > compDate) 
        {
          COPY(erpHubComm->dlgsTypeCode, "NC001");            /* 거래유형코드 */
          COPY(erpHubComm->cnclYn, "2");                          /* 취소여부 */
        } 
        else  COPY(erpHubComm->dlgsTypeCode, "NC002");      /* 거래유형코드 */
      }
      /* 방카방문수금은 2영업일이후 삭제건만 처리한다 */
      else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"89") == 0) 
      { /* 방카방문수금 */

        uvDebug("isAddBizDays(compDate,-2)=[%d]",isAddBizDays(compDate,-2));

        if (atoi((char *) erpHubComm->srdoRecpDate.arr) >=  isAddBizDays(compDate,-2)) 
        {
          COPY(erpHubComm->dlgsTypeCode, "NC001");            /* 거래유형코드 */
          COPY(erpHubComm->cnclYn, "2");                          /* 취소여부 */
        } 
        else 
        {
          COPY(erpHubComm->dlgsTypeCode, "NC002");            /* 거래유형코드 */
        }
      } 
      else 
      {
        COPY(erpHubComm->dlgsTypeCode, "NC002");              /* 거래유형코드 */
      }
    }
  }

  /****************************************************************************/
  /* 부활 접수삭제(NC007)                                                   */
  /* 당일접수삭제는 접수를 취소로 보내고, 익일접수삭제는 접수삭제 유형을 태움 */
  /* 지정일이체는 계약일자 이전에 삭제하면 접수의 취소(NC006)로 태운다        */
  /* 단 방카인 경우에는 익익일 삭제인 경우에만 NC007 로 태운다                */
  /* 2007.3.13 남후자                                                         */
  /****************************************************************************/

  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC007") == 0) 
  {

    /* 당일접수삭제 */
    if (atoi((char *) erpHubComm->srdoRecpDate.arr) == compDate) 
    {
      COPY(erpHubComm->dlgsTypeCode, "NC006");                /* 거래유형코드 */
      COPY(erpHubComm->cnclYn, "2");                              /* 취소여부 */
    }
    /* 익일접수삭제 */
    /* 지정일이체는 계약일자 이전에 삭제하면 접수의 취소로 태운다   */
    /* 지정일이체는 계약일자 이후에는 접수삭제 온라인 으로는 불가함 */
    else 
    {

      if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"89") == 0) 
      { /* 방카방문수금 */
        if (atoi((char *) erpHubComm->srdoRecpDate.arr) >=  isAddBizDays(compDate,-1)) 
        {
          COPY(erpHubComm->dlgsTypeCode, "NC006");            /* 거래유형코드 */
          COPY(erpHubComm->cnclYn, "2");                          /* 취소여부 */
        } 
        else 
        {
          COPY(erpHubComm->dlgsTypeCode, "NC007");            /* 거래유형코드 */
        }
      } else {
        COPY(erpHubComm->dlgsTypeCode, "NC007");              /* 거래유형코드 */
      }
    }
  }

  /****************************************************************************/
  /* 중도부가 접수삭제(NC034)                                                 */
  /* 당일접수삭제는 접수를 취소로 보내고, 익일접수삭제는 접수삭제 유형을 태움 */
  /* 지정일이체는 계약일자 이전에 삭제하면 접수의 취소(NC033)로 태운다        */
  /****************************************************************************/

  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC034") == 0) {

    /* 당일접수삭제 */
    if (atoi((char *) erpHubComm->srdoRecpDate.arr) == compDate) {
      COPY(erpHubComm->dlgsTypeCode, "NC033");                /* 거래유형코드 */
      COPY(erpHubComm->cnclYn, "2");                              /* 취소여부 */
    }
    /* 익일접수삭제 */
    else {
      COPY(erpHubComm->dlgsTypeCode, "NC034");              /* 거래유형코드 */
    }
  }

  /****************************************************************************/
  /* 신계약 성립취소(NC005)                                                   */
  /* 당일성립취소는 성립을 취소로 보내고, 익일성립취소는 성립취소 유형을 태움 */
  /* 2007.3.13 남후자                                                         */
  /****************************************************************************/

  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC005") == 0) {

    /* 당일성립취소 */
    if (atoi((char *) erpHubComm->cnttConcDate.arr) == compDate) {
      COPY(erpHubComm->dlgsTypeCode, "NC004");                /* 거래유형코드 */
      COPY(erpHubComm->cnclYn, "2");                              /* 취소여부 */
    }
    /* 익일성립취소 */
    /* 지정일이체는 계약일자 이전에 삭제하면 접수의 취소로 태운다   */
    /* 지정일이체는 계약일자 이후에는 접수삭제 온라인 으로는 불가함 */
    else {
      COPY(erpHubComm->dlgsTypeCode, "NC005");                /* 거래유형코드 */
    }
  }

  /****************************************************************************/
  /* 부활 성립취소(NC009)                                                   */
  /* 당일성립취소는 성립을 취소로 보내고, 익일성립취소는 성립취소 유형을 태움 */
  /* 2007.3.13 남후자                                                         */
  /****************************************************************************/

  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC009") == 0) {

    /* 당일성립취소 */
    if (atoi((char *) erpHubComm->cnttConcDate.arr) == compDate) {
      COPY(erpHubComm->dlgsTypeCode, "NC008");                /* 거래유형코드 */
      COPY(erpHubComm->cnclYn, "2");                              /* 취소여부 */
    }
    /* 익일성립취소 */
    /* 지정일이체는 계약일자 이전에 삭제하면 접수의 취소로 태운다   */
    /* 지정일이체는 계약일자 이후에는 접수삭제 온라인 으로는 불가함 */
    else {
      COPY(erpHubComm->dlgsTypeCode, "NC009");                /* 거래유형코드 */
    }
  }

  /****************************************************************************/
  /* 중도부가 성립취소(NC036)                                                 */
  /* 당일성립취소는 성립을 취소로 보내고, 익일성립취소는 성립취소 유형을 태움 */
  /****************************************************************************/

  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC036") == 0) {

    /* 당일성립취소 */
    if (atoi((char *) erpHubComm->cnttConcDate.arr) == compDate) {
      COPY(erpHubComm->dlgsTypeCode, "NC035");                /* 거래유형코드 */
      COPY(erpHubComm->cnclYn, "2");                              /* 취소여부 */
    }
    /* 익일성립취소 */
    else {
      COPY(erpHubComm->dlgsTypeCode, "NC036");                /* 거래유형코드 */
    }
  }

  COPYVAR(ErpHub.dlgsTypeCode, erpHubComm->dlgsTypeCode);     /* 거래유형코드 */

  /* 처리자 부서코드가 넘어오는경우(배치에서 호출시) 는 넘어오는 걸로 사용
     그렇지 않은 경우는 현재 로그인한 사람의 소속코드로 넘긴다 */
  if (strlen((char *) erpHubComm->dlngDeptCode.arr) > 0) {
    COPYVAR(ErpHub.dlngDeptCode, erpHubComm->dlngDeptCode);   /* 처리부서코드 */
  } else {
    COPY(ErpHub.dlngDeptCode, uvGetUserOrgCode());            /* 처리부서코드 */
  }

  /* 처리자 사번이 넘어오는경우(배치에서 호출시) 는 넘어오는 걸로 사용
     그렇지 않은 경우는 현재 로그인한 사람의 사번으로 넘긴다 */
  if (strlen((char *) erpHubComm->dlngEmplNo.arr) > 0) {
    COPYVAR(ErpHub.dlngEmplNo, erpHubComm->dlngEmplNo);       /* 처리부서코드 */
  } else {
    COPY(ErpHub.dlngEmplNo, uvGetUserID());                   /* 처리부서코드 */
  }

  /*COPY   (ErpHub.dlngDeptCode       , uvGetUserOrgCode()        );/*처리부서코드    */
  /*COPY   (ErpHub.dlngEmplNo     , uvGetUserID()             );/*처리사원번호    */
  /*COPY   (ErpHub.dlngDeptCode       , "00018"       );/*처리부서코드    */
  /* COPY   (ErpHub.dlngEmplNo        , "1920769"             );/*처리사원번호    */

  STR2VAR(ErpHub.dlgsGrpCode, "");                            /* 거래단체코드 */
  COPYVAR(ErpHub.emplFpNo, erpHubComm->emplFpNo);              /* 사원_FP번호 */
  COPYVAR(ErpHub.erpPolyLnnu, erpHubComm->erpPolyLnnu);   /* ERP증권_대출번호 */

  /**********************************************************
   송수신 확인키 : 업무구분이   01(신계약)은 null
                                02(신계약일괄)은 일괄번호
                                03(부활) 은 부활처리번호
                                04(중도부가) 은 중도부가처리번호
  ***********************************************************/
  if (strcmp((char *) erpHubComm->workDvsn.arr, "01") == 0)         /* 개인신계약 */
  { 
    COPY(ErpHub.trrvCnfmKey, "");                               /* 송수신확인키 */
  } 
  else 
  if (strcmp((char *) erpHubComm->workDvsn.arr, "02") == 0)         /* 일괄신계약 */
  {
    COPYVAR(ErpHub.trrvCnfmKey, erpHubComm->erpPolyLnnu); /* 송수신확인키(일괄번호) */
  } 
  else 
  if (strcmp((char *) erpHubComm->workDvsn    .arr, "03") == 0)     /* 부활 */
  { 
    COPYVAR(ErpHub.trrvCnfmKey, erpHubComm->reviDlngNo); /* 송수신확인키(부활처리번호) */
  } 
  else 
  if (strcmp((char *) erpHubComm->workDvsn    .arr, "04") == 0)     /* 중도부가 */
  { 
    COPYVAR(ErpHub.trrvCnfmKey, erpHubComm->reviDlngNo); /* 송수신확인키(중도부가처리번호) */
  }

  /*********************************************************************/
  /*   회계일자 기준                                                   */
  /*   NC001(신계약접수), NC002(신계약접수삭제)                        */
  /*         지정일이체는 계약일자, 기타는 접수일자입력                */
  /*         단1, 익월입력인 경우에 전월말일자로 분개처리 한다         */
  /*         단2, 접수삭제시 방카건중에서 익일이후 삭제건은 회계일자를 */
  /*              현재일자가 아닌 계약일자로 입력한다                  */
  /*         단3, 정산특약 변경 ERP 인터페이스 인 경우에는 당일 입력   */
  /*              (SVncapl793in )                                      */
  /*   NC003(신계약보험미수금입금)                                     */
  /*         지정일이체시는 계약일자, 카드납입시는 지급예정일자 셋팅   */
  /*   NC004,NC005(성립/성립취소)                                      */
  /*         1-1 기준년월(계약체결년월)과 성립일 월도가 같은 경우      */
  /*           1-1-1 휴일날 성립시 월중이면 익영업일                   */
  /*           1-1-2 휴일날 성립시 월말이면 전영업일                   */
  /*           1-1-3 기타는 현재일자                                   */
  /*         1-2 기준년월과 현재년월이 다른 경우                       */
  /*           1-2-1 전월 말 영업일로 산출                             */
  /*           1-2-2 수보마감일 초과하는 경우는 실송금액을 0 으로      */
  /*              or ERP 인터페이스 안태움                             */
  /*   NC006,NC007(부활접수/접수삭제) 접수일자                         */
  /*   NC008,NC009(부활성립/성립취소) NC004 동일                       */
  /*   NC033,NC034(중도부가접수/접수삭제) 접수일자                     */
  /*   NC035,NC036(중도부가성립/성립취소) NC004 동일                       */
  /*********************************************************************/
  COPYVAR(ErpHub.slipDate, crntDate);                             /* 회계일자 */
  COPYVAR(ErpHub.evidDate, crntDate);                             /* 증빙일자 */

  /**********************************************************/
  /* NC001,NC002 신계약접수/삭제                            */
  /**********************************************************/
  if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0) ||
      (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC002") == 0)) {

    uvDebug("NC001,NC002 신계약접수/삭제 모집기관코드=[%s]",(char *) erpHubComm->clltOrgnCode.arr);
    uvDebug("▷ 기준년월    [%s]   ◁",(char *) erpHubComm->cnttConcYm.arr);
    uvDebug("▷ 현재일자    [%s]   ◁",(char *) crntDate              .arr);
    uvDebug("▷ 수보마감일자[%s]   ◁",(char *) clogStddDate          .arr);

    /* 지정일이체는 계약일자 */
    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"81") == 0) {

      strcpy(stddDate, (char *) erpHubComm->cnttDate.arr); /* 전표기준일자 = 계약일자 */
    }
    /* 접수는 청약서접수일자가 기준일자, 삭제(익일)시는 현재일자 */
    else {
      if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0) {
        strcpy(stddDate, (char *) erpHubComm->srdoRecpDate.arr); /* 전표기준일자 = 접수일자 */
      } else {
        strcpy(stddDate, (char *) crntDate.arr); /* 전표기준일자 = 현재일자 */
      }
    }

    /* 기준년월과 현재년월이 틀린경우 전월의 말일자로 분개처리한다 */
    if (strcmp((char *) erpHubComm->workDvsn    .arr,"05"   ) != 0) {
      if (atoi((char *) erpHubComm->cnttConcYm.arr) < (atoi((char *) crntDate.arr)/100)) {
        for (t = 0; t<1000; t++) {
          if (atoi((char *) erpHubComm->cnttConcYm.arr) == (isAddBizDays(compDate,-1)/100)) {
            compDate = isAddBizDays(compDate,-1);
            break;
          } else {
            compDate = isAddBizDays(compDate,-1);
          }
        }

        sprintf(stddDate,"%d", compDate);     /* 전표기준일자 = 전.후 영업일자 */
      }
    }
    /**********************************************************************************/
    /* 방카건중에서 익영업일에 접수삭제한건은 회계일자를 접수일자와 동일하게 한다     */
    /**********************************************************************************/
    if (strcmp((char *) erpHubComm->cnclYn.arr, "2") == 0  &&     /* 접수삭제 */
        strcmp((char *) erpHubComm->pmm->inptRout.arr,"89") == 0) { /* 방카방문수금 */
      strcpy(stddDate, (char *) erpHubComm->srdoRecpDate.arr); /* 전표기준일자 = 접수일자 */
    }

    /**********************************************************************************/
    /* 정산특약 변경 ERP 인터페이스 인 경우에는 당일 입력                            */
    /**********************************************************************************/
    if (strcmp(uvGetServiceName(), "SVncapl793in") == 0) {    /* 방카방문수금 */
      strcpy(stddDate, (char *) crntDate.arr); /* 전표기준일자 = 현재일자 */
    }

    /* 현재일이 휴일인 경우 접수,접수삭제 전표일자 예외처리 */
    if (isGetHoliday(atoi((char *) crntDate.arr)) & (IS_HLDY | IS_BIWK_OFDY)) { /* 휴일 */

      bussCode = 1; /* 1:신계약접수(SVncapl300in1) */

      /* 추석연휴 등 휴무일 청약처리 요청에 따라 예외처리용 */
      if(NC_bussPossDayChck(bussCode , (char *) crntDate.arr, bussPossYn)==FAIL) {
        uvDebug("NC_bussPossDayChck 함수 호출 에러");

        strcpy(bussPossYn,"N"); /* 호출실패시 가능여부 N 처리 */
      }

      /*********************************************************************************************/
      /* 온슈어, 방카 비대면 모집건은 휴일 접수시 당월은 익영업일, 월말은 전영업일로 전표일자 생성 */
      /*********************************************************************************************/
      if(NC_wkenCnttPossChck((char *) erpHubComm->erpPolyLnnu.arr, recpPossYn)==FAIL) {
        uvDebug("NC_wkenCnttPossChck 함수 호출 에러");
        strcpy(recpPossYn,"N"); /* 호출실패시 가능여부 N 처리 */
      }

      if (strcmp((char *) erpHubComm->workDvsn    .arr,"05"   ) != 0) { /* 휴일증액처리시 익영업일 처리 */
        strcpy(recpPossYn,"Y");
      }

      uvDebug("최종 recpPossYn=[%s]",recpPossYn);

      /* 온슈어, 방카비대면 계약은 주말청약 가능여부 Y 처리
         2019.01.24  증액처리 추가 */
      if ((strcmp(recpPossYn,"Y") == 0)) {
        strcpy(bussPossYn,"Y");
      }

      uvDebug("최종 bussPossYn=[%s]",bussPossYn);

      /**********************************************************************************/
      /* 휴일 처리시 당월은 익영업일, 월말은 전영업일로 전표일자 생성   */
      /**********************************************************************************/
      if ((strcmp(bussPossYn,"Y") == 0)) {

        uvDebug("▽ 휴일 접수(삭제)시 기준년월과 현재년월을 비교하여 회계일자 반영 S T A R T ▽");
        uvDebug("처리전 전표기준일자    [%s]   ◁",stddDate);
        /* 온슈어 접수,접수삭제 처리 기준일자는 현재일자 기준으로 전표일자 산출 */

        if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0) {
          /* 익영업일이 월이 틀려지면 전영업일 */
          if ((isAddBizDays(atoi((char *) erpHubComm->srdoRecpDate.arr),1)/100) != (atoi((char *) erpHubComm->srdoRecpDate.arr)/100)) {
            compDate = isAddBizDays(atoi((char *) erpHubComm->srdoRecpDate.arr),-1);
          }
          /* 익영업일의 월도가 동일하면 익영업일 계산 */
          else {
            compDate = isAddBizDays(atoi((char *) erpHubComm->srdoRecpDate.arr),1);
          }
        } else {
          /* 익영업일이 월이 틀려지면 전영업일 */
          if ((isAddBizDays(atoi((char *) crntDate.arr),1)/100) != (atoi((char *) crntDate.arr)/100)) {
            compDate = isAddBizDays(atoi((char *) crntDate.arr),-1);
          }
          /* 익영업일의 월도가 동일하면 익영업일 계산 */
          else {
            compDate = isAddBizDays(atoi((char *) crntDate.arr),1);
          }
        }

        sprintf(stddDate,"%d", compDate);     /* 전표기준일자 = 전.후 영업일자 */

        uvDebug("처리후 전표기준일자    [%s]   ◁",stddDate);
        uvDebug("△ 휴일 접수(삭제)시 기준년월과 현재년월을 비교하여 회계일자 반영 E N D△");
      }
    }

    COPY   (ErpHub.slipDate, stddDate);                         /* 회계일자 */
    COPY   (ErpHub.evidDate, stddDate);                         /* 증빙일자 */
  }

  /**************************/
  /* NC003 신계약미수금입금 */
  /* 지정일이체시는 계약일자, 카드납입시는 지급예정일자 셋팅 */
  /**************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC003") == 0) {
    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"81") == 0) { /* 지정일이체 */
      COPYVAR(ErpHub.slipDate, erpHubComm->cnttDate);             /* 회계일자 */
      COPYVAR(ErpHub.evidDate, erpHubComm->cnttDate);             /* 증빙일자 */
    } else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"84") == 0) { /* 카드납입 */
      COPYVAR(ErpHub.slipDate, paymPrrmDate);                     /* 회계일자 */
      COPYVAR(ErpHub.evidDate, paymPrrmDate);                     /* 증빙일자 */
    }
  }

  /**********************************************************/
  /* NC006 부활계약접수                                     */
  /* 청약서 접수일자                                        */
  /**********************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC006") == 0) {
    COPYVAR(ErpHub.slipDate, erpHubComm->srdoRecpDate);           /* 회계일자 */
    COPYVAR(ErpHub.evidDate, erpHubComm->srdoRecpDate);           /* 증빙일자 */
  }

  /**********************************************************/
  /* NC007 부활계약접수삭제                                 */
  /* 청약서 현재일자                                        */
  /**********************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC007") == 0) {
    COPYVAR(ErpHub.slipDate, crntDate);                           /* 회계일자 */
    COPYVAR(ErpHub.evidDate, crntDate);                           /* 증빙일자 */
  }

  /**********************************************************/
  /* NC033 중도부가계약접수                                 */
  /* 청약서 접수일자                                        */
  /**********************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC033") == 0) {
    COPYVAR(ErpHub.slipDate, erpHubComm->srdoRecpDate);           /* 회계일자 */
    COPYVAR(ErpHub.evidDate, erpHubComm->srdoRecpDate);           /* 증빙일자 */
  }

  /**********************************************************/
  /* NC034 중도부가계약접수삭제                             */
  /* 청약서 현재일자                                        */
  /**********************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC034") == 0) {
    COPYVAR(ErpHub.slipDate, crntDate);                           /* 회계일자 */
    COPYVAR(ErpHub.evidDate, crntDate);                           /* 증빙일자 */
  }

  compDate = uvToday();
  /********************************************************************/
  /* NC004,NC005, NC008, NC009 신계약성립/성립취소, 부활성립/성립취소 */
  /* NC035,NC036               중도부가성립/성립취소                   */
  /********************************************************************/
  if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC004") == 0) ||
      (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC005") == 0) ||
      (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC008") == 0) ||
      (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC009") == 0) ||
      (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC035") == 0) ||
      (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC036") == 0)) {
    uvDebug("▽ 성립 및 성립취소시 기준년월과 현재년월을 비교하여 회계일자 반영 S T A R T ▽");
    uvDebug("▷ 기준년월    [%s]   ◁",(char *) erpHubComm->cnttConcYm.arr);
    uvDebug("▷ 현재일자    [%s]   ◁",(char *) crntDate              .arr);
    uvDebug("▷ 수보마감일자[%s]   ◁",(char *) clogStddDate          .arr);

    /* 기준년월과 현재년월이 같은경우 */
    if (atoi((char *) erpHubComm->cnttConcYm.arr) == (atoi((char *) crntDate.arr)/100)) {

      /* 현재일이 휴일이면 익영업일기준 */

      if (isGetHoliday(atoi((char *) crntDate.arr)) & (IS_HLDY | IS_BIWK_OFDY)) { /* 휴일 */

        /* 익영업일이 월이 틀려지면 전영업일 */
        if ((isAddBizDays(atoi((char *) crntDate.arr),1)/100) != (atoi((char *) crntDate.arr)/100)) {

          compDate = isAddBizDays(atoi((char *) crntDate.arr),-1);
        }
        /* 익영업일의 월도가 동일하면 익영업일 계산 */
        else {

          compDate = isAddBizDays(atoi((char *) crntDate.arr),1);
        }
      }
      /* 기타는 현재일자 */
      else {

        compDate = atoi((char *) crntDate.arr);
      }
    }
    /* 기준년월과 현재년월이 틀린경우, 즉 전월계약을 익월에 성립하는 경우 */
    /* 전월의 말영업일로 입력한다 */
    else if (atoi((char *) erpHubComm->cnttConcYm.arr) < (atoi((char *) crntDate.arr)/100) &&
             strcmp((char *) erpHubComm->workDvsn    .arr,"05"   ) != 0) { /* 증액일 경우 제외 */
      for (tt = 0; tt<1000; tt++) {
        if (atoi((char *) erpHubComm->cnttConcYm.arr) == (isAddBizDays(compDate,-1)/100)) {

          compDate = isAddBizDays(compDate,-1);
          break;
        } else {

          compDate = isAddBizDays(compDate,-1);
        }
      }
      /***************************************************/
      /* 전월계약의 익월성립처리시 수보마감일자 초과건은 */
      /* ERP 인터페이스 미호출 또는 실입금액 0 으로 셋팅 */
      /***************************************************/
      if ((atoi((char *) clogStddDate.arr)  < atoi((char *) crntDate.arr)) &&
                 (strcmp((char *) pgmId.arr,"BTncapl262") != 0)) {
        uvDebug("★★★★★★★★★★★★★★★★★★★★★★★");
        uvDebug("전월계약의 익월성립 처리시 수보마감일자 초과건");
        uvDebug("★★★★★★★★★★★★★★★★★★★★★★★");
        return TRUE;
      }
      
    } else if (atoi((char *) erpHubComm->cnttConcYm.arr) < (atoi((char *) crntDate.arr)/100) &&
             strcmp((char *) erpHubComm->workDvsn    .arr,"05"   ) == 0) { /* 증액일 경우 */
     
      
      uvDebug("★★★★★★★★★★★★★★★★★★★★★★★");
      uvDebug("익월증액 처리 srdoRecpDate =[%s]", (char *) erpHubComm->srdoRecpDate.arr);
      uvDebug("★★★★★★★★★★★★★★★★★★★★★★★");
      
      compDate = atoi((char *) erpHubComm->srdoRecpDate.arr); /* 전표기준일자 = 증액 결재일자 */
      uvDebug("▷ 익월 증액_compDate [%d]   ◁",compDate);
    
    } else {
      compDate = atoi((char *) crntDate.arr);
    }

    sprintf((char *) ErpHub.slipDate.arr,"%d", compDate);         /* 회계일자 */
    sprintf((char *) ErpHub.evidDate.arr,"%d", compDate);         /* 증빙일자 */

    uvDebug("▷ 회계일자    [%s]   ◁",(char *) ErpHub.slipDate.arr);
    uvDebug("▷ 증빙일자    [%s]   ◁",(char *) ErpHub.evidDate.arr);

    uvDebug("△ 성립 및 성립취소시 기준년월과 현재년월을 비교하여 회계일자 반영 E N D△");

  }

  /**************************************************************************/
  /* 전표발행부서와 전표발의부서 관계
     ① 전표발행부서(slipPublDpcd)
        NC001, NC002은 방문수금(82) : 모집기관
                       방카방문수금(89) : 00920
                       정산특약접수(88) : 모집기관
                       기타(즉시이체,카드납,지정일이체,가상송금(컬러풀)) : 00018
        NC003,NC004,NC005 : 00018
        NC006,NC007 : 부활처리기관
                      방카방문수금(89) : 00920
                      기타(즉시이체,카드납) : 00018
        NC008,NC009 : 00018
        NC033,NC034 : 즉시이체( 00018 )
        NC035,NC036 : 00018
     ② 전표발의부서(slipPrpoDpcd)
        NC001은 방문수금 : 모집기관
                방카방문수금 : 00920
                기타 : 모집기관
        NC002,NC003 NC004,NC005 : 모집기관
        NC006 : 방문수금은 부활실적기관
                방카방문수금(89) : 00920
        NC007,NC008,NC009 : 부활실적기관
        NC033,NC034,NC035,NC036 : 중도부가모집기관

  /**************************************************************************/

  /****************************************************************************************/
  /* NC001 신계약접수                                                                     */
  /* 전표발행부서코드 : 방문수금,정산특약(모집기관코드), 방카슈랑스(방카기관)             */
  /*                    지정일이체,즉시이체,카드납입(00018)                               */
  /* 전표발의부서코드 : 모집기관코드                                                      */
  /****************************************************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0) {
    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"82") == 0) { /* 방문수금: 모집기관, 기타 : 언더라이팅(00018) */
      COPYVAR(ErpHub.slipPublDpcd, erpHubComm->clltOrgnCode); /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    } else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"88") == 0) { /* 정산특약추가기관 */
      COPYVAR(ErpHub.slipPublDpcd, erpHubComm->clltOrgnCode); /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    } else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"89") == 0) { /* 방문수금: 방카슈랑스 */
      STR2VAR(ErpHub.slipPublDpcd, BANKA_ORGN);           /* 전표발행부서코드 */
      STR2VAR(ErpHub.slipPrpoDpcd, BANKA_ORGN);           /* 전표발의부서코드 */
    } else {
      STR2VAR(ErpHub.slipPublDpcd, UNDER_ORGN);           /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    }
  }


  /****************************************************************************************/
  /* NC002 신계약접수삭제                                                                 */
  /* 전표발행부서코드 : 방문수금,정산특약(모집기관코드), 방카슈랑스(방카기관)             */
  /*                    지정일이체,즉시이체,카드납입(00018)                               */
  /* 전표발의부서코드 : 모집기관코드                                                      */
  /****************************************************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC002") == 0) {
    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"82") == 0) { /* 방문수금: 모집기관, 기타 : 보험심사팀(00018) */
      COPYVAR(ErpHub.slipPublDpcd, erpHubComm->clltOrgnCode); /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    } else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"88") == 0) { /* 정산특약추가계약 */
      COPYVAR(ErpHub.slipPublDpcd, erpHubComm->clltOrgnCode); /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    } else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"89") == 0) { /* 방문수금: 방카슈랑스 */
      STR2VAR(ErpHub.slipPublDpcd, BANKA_ORGN);           /* 전표발행부서코드 */
      STR2VAR(ErpHub.slipPrpoDpcd, BANKA_ORGN);           /* 전표발의부서코드 */
    } else {
      STR2VAR(ErpHub.slipPublDpcd, UNDER_ORGN);           /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    }
  }

  /****************************************************************************************/
  /* NC003 신계약보험미수금, NC004 신계약성립, NC005 신계약성립취소 */
  /* 전표발행부서코드 : 00018                                                             */
  /* 전표발의부서코드 : 모집기관코드                                                      */
  /****************************************************************************************/
  if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC003") == 0) ||
        (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC004") == 0) ||
        (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC005") == 0)) {
    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"82") == 0) { /* 방문수금: 모집기관, 기타 : 보험심사팀(00018) */
      COPYVAR(ErpHub.slipPublDpcd, erpHubComm->clltOrgnCode); /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    } else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"88") == 0) { /* 정산특약 추가계약 */
      COPYVAR(ErpHub.slipPublDpcd, erpHubComm->clltOrgnCode); /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
    }
    STR2VAR(ErpHub.slipPublDpcd, UNDER_ORGN);             /* 전표발행부서코드 */
    COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
  }

  /************************************************************************************/
  /* NC006 부활접수, NC007 부활접수삭제                                               */
  /* 전표발행부서코드 : 방문수금,정산특약(부활처리기관코드), 방카슈랑스(방카기관)     */
  /*                    지정일이체,즉시이체,카드납입(00018)                           */
  /* 전표발의부서코드 : 부활실적기관코드                                              */
  /* 단 방카건은 00920 으로 처리한다                                                  */
  /************************************************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC006") == 0 ||
      strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC007") == 0    ) {
    COPYVAR(ErpHub.slipPublDpcd, erpHubComm->reviDlngOgcd); /* 전표발행부서코드 */
    COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->reviAchvOgcd); /* 전표발의부서코드 */

    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"89") == 0) { /* 방문수금: 방카슈랑스 */
      STR2VAR(ErpHub.slipPublDpcd, BANKA_ORGN);           /* 전표발행부서코드 */
      STR2VAR(ErpHub.slipPrpoDpcd, BANKA_ORGN);           /* 전표발의부서코드 */
    }
    else if  (strcmp((char *) erpHubComm->pmm->inptRout.arr,"83") == 0 ||  /* 즉시이체 */
              strcmp((char *) erpHubComm->pmm->inptRout.arr,"84") == 0  )  /* 카드납입 */
    {
      STR2VAR(ErpHub.slipPublDpcd, UNDER_ORGN);           /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->reviAchvOgcd); /* 전표발의부서코드 */
    }

  }

  /************************************************************************************/
  /* NC008 부활성립, NC009 부활성립취소                                              */
  /* 전표발행부서코드 : 00018                                                         */
  /* 전표발의부서코드 : 부활실적기관코드                                              */
  /************************************************************************************/
  if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC008") == 0) ||
        (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC009") == 0)) {
    STR2VAR(ErpHub.slipPublDpcd, UNDER_ORGN);             /* 전표발행부서코드 */
    COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->reviAchvOgcd); /* 전표발의부서코드 */
  }

  /************************************************************************************/
  /* NC033 중도부가접수, NC034 중도부가접수삭제                                       */
  /* 전표발행부서코드 : 즉시이체(00018)                                               */
  /* 전표발의부서코드 : 모집기관코드                                                  */
  /* 단 방카건은 00920 으로 처리한다                                                  */
  /************************************************************************************/
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC033") == 0 ||
      strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC034") == 0    ) {
      STR2VAR(ErpHub.slipPublDpcd, UNDER_ORGN);           /* 전표발행부서코드 */
      COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->clltOrgnCode); /* 전표발의부서코드 */
  }

  /************************************************************************************/
  /* NC035 중도부가성립, NC009 중도부가성립취소                                       */
  /* 전표발행부서코드 : 00018                                                         */
  /* 전표발의부서코드 : 모집기관코드                                              */
  /************************************************************************************/
  if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC035") == 0) ||
        (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC036") == 0)) {
    STR2VAR(ErpHub.slipPublDpcd, UNDER_ORGN);             /* 전표발행부서코드 */
    COPYVAR(ErpHub.slipPrpoDpcd, erpHubComm->reviAchvOgcd); /* 전표발의부서코드 */
  }

  COPYVAR(ErpHub.erpGoodClcd,erpHubComm->erpGoodClcd);     /* ERP상품분류코드 */

  /* 당일접수삭제시는 취소여부에 2(취소)를 셋팅하고 접수와 동일한 전문을 태운다 */
  /* 접수삭제프로그램에서 취소인 경우에만 2를 셋팅한다                          */

  if (strcmp((char *) erpHubComm->cnclYn.arr,"2") == 0) {
    STR2VAR(ErpHub.cnclYn, "2");                                  /* 취소여부 */
  } else {
    STR2VAR(ErpHub.cnclYn, "1");                                  /* 취소여부 */
  }

  strncpy((char *) ErpHubSub1.dlgsDvsn.arr,(char *) erpHubComm->dlgsTypeCode.arr+2,3);
  ErpHubSub1.dlgsDvsn.len = strlen((char *) ErpHubSub1.dlgsDvsn.arr);

  /* uvDebug("■ 거래구분에 따라서 분기한다. 거래구분[%d] 구분명[%s]",atoi((char *) ErpHubSub1.dlgsDvsn.arr),bsnsDvsnName[atoi((char *) ErpHubSub1.dlgsDvsn.arr)-1]); */
  uvDebug("■ 거래구분에 따라서 분기한다. 거래구분[%d]",atoi((char *) ErpHubSub1.dlgsDvsn.arr));
  /********************************************************************************************
  ┌───────┬──────────────┬───────────┬───────────┬──┬────
  │       │신계약           │부활         │중도부가      │대행│
  ├───────┼──┬──┬──┬──┬──┼──┬──┬──┬──┼──┬──┬──┬──┼──┼────
  │       │접수│접수│미 │성립│성립│접수│접수│성립│성립│접수│접수│성립│성립│청구│
  │       │  │삭제│수금│  │취소│   │삭제│  │취소│  │삭제│  │취소│   │
  ├───────┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼────
  │거래구분  │001│002│003│004│005│006│007│008│009│033│034│035│036│040│
  │개인단체  │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │ ○ │  개인:1,단체:2 판매구분
  │전환여부  │ ○ │ ○ │ ○ │   │   │   │   │   │   │ ○ │ ○ │   │   │   │  전환:1,일반:2(중도부가의 경우 2로 고정)
  │입금경로  │ ○ │ ○ │ ○ │   │   │ ○ │ ○ │   │   │ ○ │ ○ │   │   │   │  카드:84,지정일:81,즉시이체:83,방문:82,방카방문:89
  │입금결과  │   │   │ ○ │   │   │   │   │   │   │   │   │   │   │   │  입금:1,불능:2, 지정일이체,카드납만 해당,
  │납입주기  │ ○ │ ○ │   │   │   │   │   │   │   │ ○ │ ○ │   │   │   │
  │은행코드  │ ○ │   │ ○ │   │   │ ○ │   │   │   │ ○ │   │   │   │   │  지정일,즉시이체,카드는 금융기관코드 기입
  │방카제휴  │ ○ │ ○ │   │   │   │ ○ │ ○ │   │   │ ○ │ ○ │   │   │   │  방카만 방카기관코드 입력                                   /  방카제휴기관코드
  │매출수수  │   │   │ ○ │   │   │   │ ○ │   │   │   │   │   │   │ ○ │  카드납인 경우 매출수수료                                   / 매출수수료
  │매출취소  │   │   │ ○ │   │   │   │ ○ │   │   │   │   │   │   │   │  카드납인 경우 매출취소수수료                                 / 매출취소수수료
  │부활실입  │   │   │   │   │   │ ○ │ ○ │ ○ │ ○ │   │   │   │   │   │  부활인 경우 부활보험료+부활이자                               / 부활실입금액
  │실송금액  │   │   │ ○ │   │   │   │ ○ │   │   │   │   │   │   │ ○ │  카드납인 경우 매출취소시 실입보험료
  │입금액액  │   │   │ ○ │   │   │   │ ○ │   │   │   │   │   │   │   │  지정일 : 실입보험료, 카드납 : 실입보험료-매출수수료-매출취소금액+매출취소수수료   / 입금액
  │초회실입  │ ○ │ ○ │ ○ │ ○ │ ○ │   │   │   │   │ ○ │ ○ │ ○ │ ○ │   │                                                      / 초회실입금보험료
  │부활보험  │   │   │   │   │   │   │ ○ │ ○ │   │   │   │   │   │   │                                                      /부활보험료
  │연체이자  │   │   │   │   │   │   │ ○ │ ○ │   │   │   │   │   │   │
  │이체수수  │ ○ │   │   │   │   │   │   │   │   │ ○ │   │   │   │   │  즉시이체시 농협의 수수료 때문에 입력한다.                          / 이체수수료
  │결제대행  │ ○ │ ○ │   │   │   │   │   │   │   │   │   │   │   │ ○ │  결제대행입금시 수수료를 차감한 금액을 입력한다.                      / 결제대행거래금액
  └───────┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴────
   *********************************************************************************************/
  int k = atoi((char *) ErpHubSub1.dlgsDvsn.arr)-1;

  /* 중도부가의 경우에는 필수항목값 태우는 어레이항목을 변경한다 */
  if (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC033") == 0 ||
      strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC034") == 0 ||
      strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC035") == 0 ||
      strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC036") == 0) 
  {
    k = atoi((char *) ErpHubSub1.dlgsDvsn.arr)-24; /* 거래구분 033~ 배열첨자를 맞추기 위해 24 Shift */
  }

  uvDebug("k ->>> [%d]",k);

  if (bsnsDvsnArry[k][1] == 0) COPYVAR(ErpHubSub1.prstGrpDvsn,erpHubComm->pmm->prstGrpDvsn);

  if (bsnsDvsnArry[k][2] == 0) COPYVAR(ErpHubSub1.cnvsYn,erpHubComm->pmm->cnvsYn);

  if (bsnsDvsnArry[k][3] == 0) 
  {
    /* 2007.12.17 남후자, 방문수금 이면서 아래 법인사업부가 아닌 기관마감이 N 내근 모집으로 입금경로에 "90" erp인터페이스 */
    if ((strcmp((char *) erpHubComm->clltOrgnCode.arr,"00073") == 0 ||
         strcmp((char *) erpHubComm->clltOrgnCode.arr,"00074") == 0 ||
         strcmp((char *) erpHubComm->clltOrgnCode.arr,"00099") == 0 ||
         strcmp((char *) erpHubComm->clltOrgnCode.arr,"00430") == 0 ||
         strcmp((char *) erpHubComm->clltOrgnCode.arr,"00484") == 0 ||
         strcmp((char *) erpHubComm->clltOrgnCode.arr,"00337") == 0) &&
        (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0 ||
         strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC002") == 0)) 
    {
      COPYVAR(ErpHubSub1.inptRout,erpHubComm->pmm->inptRout);
    } 
    else 
    if ((strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00073") == 0 ||
         strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00074") == 0 ||
         strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00099") == 0 ||
         strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00430") == 0 ||
         strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00484") == 0 ||
         strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00337") == 0) &&
        (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC006") == 0 ||
         strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC007") == 0)) 
    {
      COPYVAR(ErpHubSub1.inptRout,erpHubComm->pmm->inptRout);
    } 
    else 
    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"82") == 0 && strcmp((char *) orgnSlipDvcd.arr, "1") != 0) 
    {
      COPY(ErpHubSub1.inptRout,  "90");                           /* 내근모집 */
    } 
    else 
    {
      COPYVAR(ErpHubSub1.inptRout,erpHubComm->pmm->inptRout);
    }
  }
  if (bsnsDvsnArry[k][4] == 0) COPYVAR(ErpHubSub1.inptRsul,erpHubComm->pmm->inptRsul);
  /* 2007.2.1 남후자, 전환건에 한해서만 납입주기를 넣음, 전환건은 cnvsYn 이 1 임 */
  if (bsnsDvsnArry[k][5] == 0) {
    if (strcmp((char *) erpHubComm->pmm->cnvsYn.arr,"1") == 0)
            COPYVAR(ErpHubSub1.paymCyclCode,erpHubComm->pmm->paymCyclCode);
  }
  if (bsnsDvsnArry[k][6] == 0) COPYVAR(ErpHubSub1.bankCode,erpHubComm->pmm->bankCode);

  /****************************************************************************************/
  /* 2007.2.1 남후자, 방카제휴기관은 방카방문수금만 넣음, 방카방문수금은 inptRout = 89 임 */
  /* 2007.3.15 남후자, 일부 법인기관들은 본사에서 마감을 치므로 방문수금시 방카기관코드에 */
  /*                   모집기관을 넣어달라고 함 (해당기관 00073,00074,00099,00430,00484  )*/
  /* NC006,NC007 인 경우에는 부활처리기관이 아래기관인 경우에만 처리함                    */
  /****************************************************************************************/
  if (bsnsDvsnArry[k][7] == 0) {
    if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"89") == 0) {
      COPYVAR(ErpHubSub1.bancaCoop,erpHubComm->pmm->bancaCoop);
    } else if ((strcmp((char *) erpHubComm->pmm->inptRout.arr,"82") == 0 || strcmp((char *) erpHubComm->pmm->inptRout.arr,"88") == 0) &&
                  (strcmp((char *) erpHubComm->clltOrgnCode.arr,"00073") == 0 ||
                    strcmp((char *) erpHubComm->clltOrgnCode.arr,"00074") == 0 ||
                    strcmp((char *) erpHubComm->clltOrgnCode.arr,"00099") == 0 ||
                    strcmp((char *) erpHubComm->clltOrgnCode.arr,"00430") == 0 ||
                    strcmp((char *) erpHubComm->clltOrgnCode.arr,"00484") == 0) &&
                  (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0 ||
                   strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC002") == 0)) {
      COPYVAR(ErpHubSub1.bancaCoop,erpHubComm->clltOrgnCode);
    } else if (strcmp((char *) erpHubComm->pmm->inptRout.arr,"82") == 0 &&
                  (strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00073") == 0 ||
                    strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00074") == 0 ||
                    strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00099") == 0 ||
                    strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00430") == 0 ||
                    strcmp((char *) erpHubComm->reviDlngOgcd.arr,"00484") == 0) &&
                  (strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC006") == 0 ||
                   strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC007") == 0)) {
      COPYVAR(ErpHubSub1.bancaCoop,erpHubComm->reviDlngOgcd);
    }
  }

  if (bsnsDvsnArry[k][8]  == 0) ErpHubSub1.saleCmsn       =   erpHubComm->pmm->saleCmsn; /* 매출수수료 */
  if (bsnsDvsnArry[k][9]  == 0) ErpHubSub1.saleCnclCmsn   =   erpHubComm->pmm->saleCnclCmsn; /* 매출취소수수료 */
  if (bsnsDvsnArry[k][10] == 0) ErpHubSub1.reviRrcvPrem   =   erpHubComm->pmm->reviRrcvPrem; /* 부활실입금액 */
  if (bsnsDvsnArry[k][11] == 0) ErpHubSub1.retnPrem       =   erpHubComm->pmm->retnPrem; /* 실송금액 */
  if (bsnsDvsnArry[k][12] == 0) ErpHubSub1.recvRrem       =   erpHubComm->pmm->recvRrem; /* 입금액 */
  if (strcmp((char *) erpHubComm->workDvsn    .arr,"05"   ) == 0) {  // 접수일때 증액보험료
    ErpHubSub1.fstiRrcvPrem    =   erpHubComm->pmm->iccoPrem;
  } else {
    if (bsnsDvsnArry[k][13] == 0) ErpHubSub1.fstiRrcvPrem   =   erpHubComm->pmm->fstiRrcvPrem; /* 초회실입금보험료 */
  }

  if (bsnsDvsnArry[k][14] == 0) ErpHubSub1.reviPrem       =   erpHubComm->pmm->reviPrem; /* 부활보험료 */
  if (bsnsDvsnArry[k][15] == 0) ErpHubSub1.arreInte       =   erpHubComm->pmm->arreInte; /* 연체이자 */
  if (bsnsDvsnArry[k][16] == 0) ErpHubSub1.trnfCmsn       =   erpHubComm->pmm->trnfCmsn; /* 이체수수료 */

  uvDebug("구분            입력여부       값");
  uvDebug("---------------------------------------------------------");
  uvDebug("거래구분        [%d]       [%s]",bsnsDvsnArry[k][0], (char *) ErpHubSub1.dlgsDvsn    .arr);
  uvDebug("개인단체        [%d]       [%s]",bsnsDvsnArry[k][1], (char *) ErpHubSub1.prstGrpDvsn .arr);
  uvDebug("전환여부        [%d]       [%s]",bsnsDvsnArry[k][2], (char *) ErpHubSub1.cnvsYn      .arr);
  uvDebug("입금경로        [%d]       [%s]",bsnsDvsnArry[k][3], (char *) ErpHubSub1.inptRout    .arr);
  uvDebug("입금결과        [%d]       [%s]",bsnsDvsnArry[k][4], (char *) ErpHubSub1.inptRsul    .arr);
  uvDebug("납입주기        [%d]       [%s]",bsnsDvsnArry[k][5], (char *) ErpHubSub1.paymCyclCode.arr);
  uvDebug("  -> 전환건에 한해서만 납입주기를 넣음, 전환건은 cnvsYn 이 1 임");
  uvDebug("은행코드        [%d]       [%s]",bsnsDvsnArry[k][6], (char *) ErpHubSub1.bankCode    .arr);
  uvDebug("방카제휴기관코드[%d]       [%s]",bsnsDvsnArry[k][7], (char *) ErpHubSub1.bancaCoop   .arr);

  uvDebug("매출수수료      [%d]       [%f]",bsnsDvsnArry[k][8], ErpHubSub1.saleCmsn);
  uvDebug("매출취소수수료  [%d]       [%f]",bsnsDvsnArry[k][9], ErpHubSub1.saleCnclCmsn);
  uvDebug("부활실입금액    [%d]       [%f]",bsnsDvsnArry[k][10], ErpHubSub1.reviRrcvPrem);
  uvDebug("실송금액        [%d]       [%f]",bsnsDvsnArry[k][11], ErpHubSub1.retnPrem);
  uvDebug("입금액          [%d]       [%f]",bsnsDvsnArry[k][12], ErpHubSub1.recvRrem);
  uvDebug("초회실입금보험료[%d]       [%f]",bsnsDvsnArry[k][13], ErpHubSub1.fstiRrcvPrem);
  uvDebug("부활보험료      [%d]       [%f]",bsnsDvsnArry[k][14], ErpHubSub1.reviPrem);
  uvDebug("연체이자        [%d]       [%f]",bsnsDvsnArry[k][15], ErpHubSub1.arreInte);
  uvDebug("이체수수료      [%d]       [%f]",bsnsDvsnArry[k][16], ErpHubSub1.trnfCmsn);
  uvDebug("증액보험료      [%d]       [%f]",bsnsDvsnArry[k][13], ErpHubSub1.iccoPrem);
  uvDebug("---------------------------------------------------------");

  /*******************************************************************************/
  /* 부활접수,부활접수삭제(NC006,NC007) 인 경우에 부활처리기관이 00630(고객센터) */
  /* 경우에는 NC006 > PA025, NC007 > PA026 으로 변경한다                         */
  /* 신계약접수,접수삭제(NC001,NC002) 인 경우에는                                */
  /* 방카기관(방카제휴기관코드로 구분한다)인 경우에는                            */
  /* NC001 > BK001, NC002 > BK002 로 구분한다                                    */
  /* 없던일로 함                                                                 */
  /*******************************************************************************/

#ifdef ERP_MINUS
  /* 신계약접수중 방카는 NC001 에서 BK001로 변경한다 */
  if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC001") == 0) &&
      (strlen((char *) ErpHubSub1.bancaCoop   .arr) >  0)) {
    COPY(ErpHub.dlgsTypeCode, "BK001");
    uvDebug("신계약접수(NC001) > 방카접수(BK001) 변경완료");
  } else
  /* 신계약접수삭제중 방카는 NC002 에서 BK002로 변경한다 */
    if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC002") == 0) &&
        (strlen((char *) ErpHubSub1.bancaCoop   .arr) >  0)) {
    COPY(ErpHub.dlgsTypeCode, "BK002");
    uvDebug("신계약접수삭제(NC002) > 방카접수삭제(BK002) 변경완료");
  } else
  /* 부활접수중 부활처리기관이 00630 인건은 NC006 에서 PA025(본사부활접수) 로 변경한다 */
    if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC006") == 0) &&
        (strcmp((char *) ErpHub.slipPublDpcd.arr,"00630") == 0)) {
    COPY(ErpHub.dlgsTypeCode, "PA025");
    uvDebug("부활접수(NC006) > 본사부활접수(PA025) 변경완료");
  } else
  /* 부활접수삭제중 부활처리기관이 00630 인건은 NC007 에서 PA026(본사부활접수삭제) 로 변경한다 */
    if ((strcmp((char *) erpHubComm->dlgsTypeCode.arr,"NC007") == 0) &&
        (strcmp((char *) ErpHub.slipPublDpcd.arr,"00630") == 0)) {
    COPY(ErpHub.dlgsTypeCode, "PA026");
    uvDebug("부활접수삭제(NC007) > 본사부활접수삭제(PA026) 변경완료");
  }
#endif

  uvDebug("CMNC_erpHub_CC ==>호출직전 거래구분=[%s]",(char *) ErpHubSub1.dlgsDvsn    .arr);

  if (CMNC_erpHub_CC(&ErpHub,&ErpHubSub1,&ErpHubSub2,&ErpHubSub3,&ErpHubSub4) == FAIL) {
    uvDebug("CMNC_erpHub_CC 모듈 호출오류 ");
    erpHubComm->pmm->resultCode = 7731;
    return FALSE;
  }

  uvDebug("%s end",fnName);

  return TRUE;
}

#ifdef vInsCntt
/******************************************************************************
 * Function Name : CMNC_vlnsCnttChcd_INPUT()                                  *
 * Note          : 변액 상태변경이력 입력                                     *
 * Parameters    : erpHub                                                     *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
*******************************************************************************/
//int  CMNC_vlnsCnttChcd_INPUT(CMNC_erpHubComm *erpHubComm) {
//
//  char *fnName = "CMNC_vlnsCnttChcd_INPUT";
//
//  uvDebug("%s begin",fnName);
//  /* CMNC_vlnsHisIns_CC 인터페이스 맵핑용  */
//  CMNC_erpHubRetn erpHubRetn;                             /* FILLER STRUCTURE */
//  memset(&erpHubRetn,   0x00,   sizeof(CMNC_erpHubRetn));
//
//  if (CMNC_vlnsHisIns_CC(erpHubComm,&erpHubRetn) == FAIL) {
//    uvDebug("CMNC_vlnsHisIns_CC 모듈 호출오류 ");
//    erpHubComm->pmm->resultCode = 7731;
//    return FALSE;
//  }
//
//  uvDebug("%s end",fnName);
//
//
//  return TRUE;
//}
#endif

/******************************************************************************
 * Function Name : CMNC_erpHubComm__PMMI()                                    *
 * Note          : 실손보험 처리내역 저장                                     *
 * Parameters    : erpHub                                                     *
 * Return Value  : SUCCESS/FAIL                                               *
 *----------------------------------------------------------------------------*
 * Remarks >>                                                                 *
*******************************************************************************/
int  CMNC_erpHubComm_PMMI(CMNC_erpHubComm *erpHubComm)
{
  char *fnName = "CMNC_erpHubComm_PMMI";

  uvDebug("=== %s begin",fnName);

  CMNC_inputPmmiTrnm inputPmmiTrnm;  /*  실손보험 처리 */

  char  cnclYn       [ 1 + 1 ];
  char  todayDate    [ 8 + 1 ];        /* 현재일자 */
  char  cBsnsDvsnCode[ 3 + 1 ];        /* 업무구분코드      (IN ) */
  char  cCnttStatChcd[MAX_VALUE_LEN];  /* 이체계정구분      (OUT) */

  int retVal = 0;

  memset(&cnclYn       ,  0x00,  sizeof(cnclYn       ));
  memset(&todayDate    ,  0x00,  sizeof(todayDate    ));
  memset(&inputPmmiTrnm,  0x00,  sizeof(inputPmmiTrnm));
  memset(&cBsnsDvsnCode,  0x00,  sizeof(cBsnsDvsnCode));
  memset(&cCnttStatChcd,  0x00,  sizeof(cCnttStatChcd));

  uvGetTime(13, todayDate);

  if (strncmp((char *)erpHubComm->reviDlngNo.arr , "BU", 2) == 0)
  {
    strcpy (cBsnsDvsnCode , "RV" );
  } if (strncmp((char *)erpHubComm->reviDlngNo.arr , "JU", 2) == 0)
  {
    strcpy (cBsnsDvsnCode , "JU" );
  }
  else
  {
    strcpy (cBsnsDvsnCode , "NC" );
  }
  if (strcmp((char *)erpHubComm->cnclYn.arr , "2") == 0)
  {
    strcpy(cnclYn , "Y");
  }
  else
  {
    strcpy(cnclYn , "N");
  }


  uvDebug("업무구분코드 = [%s]", cBsnsDvsnCode                );
  uvDebug("거래구분     = [%s]", erpHubComm->dlgsTypeCode.arr );
  uvDebug("취소여부     = [%s]", cnclYn                       );

  retVal = uvRuleBase("NC_ErpToPmmi", ""
                     , cBsnsDvsnCode                           /* 업무구분코드      (IN ) */
                     , "0"                                     /* 반환구분          (IN ) */
                     , (char *)erpHubComm->dlgsTypeCode.arr    /* 거래구분          (IN ) */
                     , cnclYn                                  /* 취소여부          (IN ) */
                     , cCnttStatChcd                           /* 계약상태변경코드  (OUT) */
                     );

  if (retVal != SQL_OK)
  {
    uvBatchDebug(SC_INFO, "Rule(NC_ErpToPmmi) 호출 Error");
    return FAIL;
  }

  strcpy (inputPmmiTrnm.polyNo       , (char *)erpHubComm->erpPolyLnnu.arr );  /* 증권번호         */
  strcpy (inputPmmiTrnm.sysCode      , "NC"                                );  /* 시스템코드       */
  strcpy (inputPmmiTrnm.cnttStatChcd , cCnttStatChcd                       );  /* 계약상태변경코드 */
  strcpy (inputPmmiTrnm.workDate     , todayDate                           );  /* 처리일자         */
  strcpy (inputPmmiTrnm.cnttInveNo   , (char *)erpHubComm->reviDlngNo.arr);  /* 부활처리번호    */

  if (CMNC_inputPmmiTrnm_CC(&inputPmmiTrnm) == FAIL)
  {
    return FAIL;
  }

  uvDebug("=== %s end",fnName);

  return SUCCESS;
}
/******************************************************************************
  End of Code
 ******************************************************************************/

 
 ============================
 신계약마감조회_쿼리_개별신계약
 
 #######################################
###  신계약마감조회 
#######################################
  uvDebug("증권번호     = [%s]", (char *) dcncErphubvw01SpIn.pynoBdctNo .arr);
  uvDebug("부활처리번호 = [%s]", (char *) dcncErphubvw01SpIn.reviDlngNo .arr);
  uvDebug("업무구분     = [%s]", (char *) dcncErphubvw01SpIn.workDvsn   .arr);
  uvDebug("취소여부     = [%s]", (char *) dcncErphubvw01SpIn.cnclYn     .arr);

  uvDebug("설계사번호      [%s]",(char *) dcncErphubvw01SpOut.clltLpPrno     .arr);
  uvDebug("모집기관코드    [%s]",(char *) dcncErphubvw01SpOut.clltOrgnCode   .arr);
  uvDebug("상품분류        [%s]",(char *) dcncErphubvw01SpOut.goodClsfCode   .arr);
  uvDebug("개인단체구분    [%s]",(char *) dcncErphubvw01SpOut.prsnCoprSadv   .arr);
  uvDebug("전환여부        [%s]",(char *) dcncErphubvw01SpOut.cnvsYn         .arr);
  uvDebug("입금경로        [%s]",(char *) dcncErphubvw01SpOut.ftprRecvMdcd   .arr);
  uvDebug("입금결과        [%s]",(char *) dcncErphubvw01SpOut.recvYn         .arr);
  uvDebug("납입주기        [%s]",(char *) dcncErphubvw01SpOut.paymCyclCode   .arr);
  uvDebug("은행코드        [%s]",(char *) dcncErphubvw01SpOut.bankCode       .arr);
  uvDebug("방카제휴기관코드[%s]",(char *) dcncErphubvw01SpOut.bankCoop       .arr);
  uvDebug("매출수수료      [%f]",         dcncErphubvw01SpOut.sellCmsn           );
  uvDebug("매출취소수수료  [%f]",         dcncErphubvw01SpOut.sellCanCmsn        );
  uvDebug("부활실입금액    [%f]",         dcncErphubvw01SpOut.realRecvPrem       );
  uvDebug("실송금액        [%f]",         dcncErphubvw01SpOut.canFstiRrcvPrem    );
  uvDebug("입금액          [%f]",         dcncErphubvw01SpOut.recvPrem           );
  uvDebug("초회실입금보험료[%f]",         dcncErphubvw01SpOut.fstiRrcvPrem       );
  uvDebug("부활보험료      [%f]",         dcncErphubvw01SpOut.rvrm               );
  uvDebug("연체이자        [%f]",         dcncErphubvw01SpOut.reviArreInte       );
  uvDebug("이체수수료      [%f]",         dcncErphubvw01SpOut.trnfCmsn           );
  uvDebug("계약체결년월    [%s]",(char *) dcncErphubvw01SpOut.cnttConcYm     .arr);
  uvDebug("부활처리기관코드[%s]",(char *) dcncErphubvw01SpOut.reviDlngOgcd   .arr);
  uvDebug("부활실적기관코드[%s]",(char *) dcncErphubvw01SpOut.reviAchvOgcd   .arr);
  uvDebug("접수일자        [%s]",(char *) dcncErphubvw01SpOut.srdoRecpDate   .arr);
  uvDebug("성립일자        [%s]",(char *) dcncErphubvw01SpOut.cnttConcDate   .arr);
  uvDebug("지급예정일자    [%s]",(char *) dcncErphubvw01SpOut.paymPrrmDate   .arr);
  uvDebug("수보마감일자    [%s]",(char *) dcncErphubvw01SpOut.stddDate       .arr);
  uvDebug("기관전표구분코드[%s]",(char *) dcncErphubvw01SpOut.orgnSlipDvcd   .arr);
  uvDebug("단체실손재개여부[%s]",(char *) dcncErphubvw01SpOut.pmmiResmYn     .arr);
  uvDebug("증액보험료[%f]",         dcncErphubvw01SpOut.iccoPrem           );

============================================================================

p_work_dvsn = 01 인 경우   ### 개별신계약 ###
  
CMNC_erpHubComm_CC.pc/ dcnc_erphubvw01_sp.pc / DENC_SNCERPHUB_001_SP

============================================================================

SELECT 
   모집설계사고유번호 
  ,모집기관코드 
  ,NVL(상품분류코드,'00000000') 상품분류코드 
  ,개인법인판매구분 
  ,CNVS_YN -- 전환여부
  ,초회보험료입금방법코드 
  ,DECODE(초회보험료입금방법코드,'84','1',수신유무) 수신유무 
  ,LPAD(납입주기코드,2,0) 납입주기코드 
  ,은행코드 
  ,BANK_COOP		-- 방카제휴기관코드
  ,SELL_수수료			-- 매출수수료 
  ,SELL_CAN_수수료 	-- 매출취소수수료
  ,실입금보험료 
  
  ,CAN_초회실입금보험료 	-- 실송금액
  
  ,CASE WHEN 초회보험료입금방법코드 = '81' 
        THEN 초회실입금보험료 
		
        WHEN 초회보험료입금방법코드 = '84' AND 수신유무 = '1' 
        THEN 초회실입금보험료 - SELL_수수료 
		
        WHEN 초회보험료입금방법코드 = '84' AND 수신유무 = '2' 
        THEN -(CAN_초회실입금보험료 - SELL_CAN_수수료) 
		
        ELSE 0 
		 END RECV_PREM -- 입금액
  
  ,CASE WHEN 초회보험료입금방법코드 = '84' 
        THEN DECODE(P_취소여부,'1',초회실입금보험료,'2',0,초회실입금보험료) 
		ELSE 초회실입금보험료 - NVL(ICCO_PREM,0) 
		 END 초회실입금보험료 
		 
  ,RVRM  -- 부활보험료
  ,REVI_ARRE_INTE -- 연체이자
  ,이체수수료 
  ,계약일자 
  ,계약체결년월 
  ,청약서접수일자 
  ,계약성립일자 
  ,지급예정일자 
  
  ,(SELECT MAX(기준일자) FROM 월별일정관리 
	 WHERE 업무구분코드 = 'NC' 
	   AND 일정관리종류코드 = DECODE(개인법인판매구분,'1','NCP28','NCG28') -- NCP28 개인기관수입보험료마감, NCG28 법인기관수입보험료마감
	   AND 마감년월 = TO_CHAR(ADD_MONTHS(TO_DATE(계약체결년월,'YYYYMM'),1),'YYYYMM') 
  ) 기준일자 
  
  ,기관전표구분코드 
  
  ,PMMI_RESM_YN -- 단체실손재개여부
 
  ,ICCO_PREM -- 증액보험료
  
  INTO
		모집설계사고유번호,
		모집기관코드,
		상품분류코드,
		개인법인판매구분,
		CNVS_YN,
		초회보험료입금방법코드,
		수신유무,
		납입주기코드,
		은행코드,
		BANK_COOP,
		SELL_수수료,
		SELL_CAN_수수료,
		실입금보험료,
		CAN_초회실입금보험료,
		RECV_PREM,
		초회실입금보험료,
		RVRM,
		REVI_ARRE_INTE,
		이체수수료,
		계약일자,
		계약체결년월,
		청약서접수일자,
		계약성립일자,
		지급예정일자,
		기준일자,
		기관전표구분코드,
        PMMI_RESM_YN,		
		ICCO_PREM
	
 FROM ( 
 
	SELECT A.모집설계사고유번호 모집설계사고유번호 
		  ,A.모집기관코드 모집기관코드 
		  ,B.상품분류코드 상품분류코드 
		  ,A.개인법인판매구분 개인법인판매구분
		  
		  ,( SELECT DECODE(COUNT(*),0,'2','1') 
			   FROM 상품분류 Z 
			  WHERE Z.보험종류코드_세 = A.보험종류코드_세 
				AND Z.보험종류코드_목 = A.보험종류코드_목 
				AND Z.업무분류코드 = 'NCAPL011' 
				AND Z.상품분류코드 IN ('A2','A5','A6') 
			   ) CNVS_YN 
			   
		  ,CASE WHEN A.초회보험료입금방법코드 = '82' AND A.판매채널코드 = '5' -- 방문수금 
		        THEN '89' 
				ELSE A.초회보험료입금방법코드 
				 END 초회보험료입금방법코드 
			 
		  ,CASE WHEN 초회보험료입금방법코드 = '81' -- 지정일자동납입
		        THEN (SELECT DECODE(Z.청구이체구분,'2','1','2') 
						FROM 자동납입청구 Z 
					   WHERE Z.관리번호 = A.증권번호 
						 AND Z.보험료구분 = '1' 
						 AND ROWNUM = 1) 
						 
			    WHEN A.초회보험료입금방법코드 = '84' -- 카드납입
				THEN P_취소여부 
			    ELSE '' 
			     END 수신유무 
			 
		  ,A.납입주기코드 납입주기코드 
		  
		  ,CASE WHEN A.초회보험료입금방법코드 IN ('81','83','84')  -- 지정일자동납입, 계좌즉시이체, 카드납입
			    THEN ( SELECT Z.금융기관코드 
						 FROM 계약입출금등록정보 Z 
						WHERE Z.관리번호 = A.증권번호 
						  AND Z.계약입출금사용구분 = '01' 
						  AND Z.관리번호구분 = '1' 
						  AND Z.종료일자 = '99991231' 
						  AND Z.삭제여부 = 'N' 
						  AND ROWNUM = 1) 
						  
				WHEN A.초회보험료입금방법코드 = '86'  -- 직접납입
				THEN ( SELECT Z.금융기관코드 
						 FROM 가상계좌신청정보 Z 
						 WHERE Z.관리번호 = A.증권번호 
						  AND Z.관리번호구분 = '1' 
						  AND Z.가상계좌요청구분 = '10' 
						  AND Z.신청일자 = A.계약일자 
						  AND Z.종료일자 = '99991231' 
						  AND Z.삭제여부 = 'N' 
						  AND ROWNUM = 1) 
				ELSE '' END 은행코드 
			
		  ,DECODE(A.판매채널코드,'5',A.모집기관코드,'') BANK_COOP 
		
		  ,CASE WHEN A.초회보험료입금방법코드 = '84' THEN 
			(SELECT DECODE(Z.카드납입청구상태코드,'5',Z.수수료) 
			   FROM 카드납입청구 Z 
			  WHERE Z.관리번호 = A.증권번호 
			    AND Z.승인일자 = A.계약일자 
			    AND Z.취소여부 <> 'Y' 
			    AND P_취소여부 = '1' 
			    AND ROWNUM = 1 ) 
			 ELSE 0 
			 END SELL_수수료 
			 
		  ,CASE WHEN 초회보험료입금방법코드 = '84' 
			    THEN (SELECT DECODE(Z.카드납입청구상태코드,'10',Z.수수료) 
				        FROM 카드납입청구 Z 
					   WHERE Z.관리번호 = A.증권번호 
						 AND Z.승인일자 = A.계약일자 
						 AND Z.취소여부 = 'Y' 
						 AND P_취소여부 = '2' 
						 AND ROWNUM = 1 ) 
						ELSE 0 
						 END SELL_CAN_수수료 
				 
		  ,0 실입금보험료 
  
		  ,CASE WHEN A.초회보험료입금방법코드 = '84' 
		        THEN (SELECT DECODE(Z.카드납입청구상태코드,'10',Z.실입금보험료) 
						FROM 카드납입청구 Z 
					   WHERE Z.관리번호 = A.증권번호 
						 AND Z.승인일자 = A.계약일자 
						 AND P_취소여부 = '2' 
						 AND Z.취소여부 = 'Y' 
						 AND ROWNUM = 1 ) 
				ELSE 0 
				END CAN_초회실입금보험료 
			 
		  ,0 RECV_PREM 
		  ,A.초회실입금보험료 
		  ,0 RVRM 
		  ,0 REVI_ARRE_INTE 
		  ,A.계약일자 
		  
		  ,CASE WHEN A.초회보험료입금방법코드 = '83' 
		        THEN (SELECT Z.이체수수료 
					    FROM 즉시이체청구/결제 Z 
					   WHERE Z.청구일자 = A.계약일자 
					     AND Z.관리번호  = A.증권번호 			  
			             AND ROWNUM = 1 ) 
				ELSE 0 
				END 이체수수료 
				
		  ,A.계약체결년월 
		  ,A.청약서접수일자 
		  ,A.계약성립일자 
		  
		  ,CASE WHEN 초회보험료입금방법코드 = '84' -- 카드납입
				THEN (SELECT 지급예정일자 
					  FROM 카드납입청구 Z 
					 WHERE Z.관리번호 = A.증권번호 
					   AND Z.승인일자 = A.계약일자 
					   AND ( ( Z.취소여부 = 'Y' AND P_취소여부 = '2' ) 
					      OR ( Z.취소여부 = 'N' AND P_취소여부 = '1' ) ) 
					  AND ROWNUM = 1 ) 
					 ELSE NULL 
					 END 지급예정일자 
					 
		  ,C.기관전표구분코드 
		  
		  ,(SELECT NVL(MIN('Y'),'N') PMMI_RESM_YN 
			  FROM 계약간관계 X 
		     WHERE X.주증권번호 = A.증권번호 
			   AND X.계약간관계코드 = '13' 
			   AND ROWNUM = 1) PMMI_RESM_YN 
		  
		  ,(SELECT CASE WHEN 총환급보험료 < 0 
		                THEN ABS(총환급보험료) 
			            ELSE 0 END ICCO_PREM 			  
			  FROM 반송철회품질해지 
			 WHERE 증권번호_일괄계약번호 = A.증권번호 
			   AND 부활처리번호 = '0000' 
			   AND 반송철회해지구분 = '4' 
			   AND 반송철회해지상태코드 = '12') ICCO_PREM -- 증액보험료
			 
		FROM 
		   신계약일마감 A 
		  ,상품분류 B 
		  ,기관코드 C 
		WHERE A.증권번호 = P_증권번호_일괄계약번호 
		  AND A.보험종류코드_세 = B.보험종류코드_세(+) 
		  AND A.보험종류코드_목 = B.보험종류코드_목(+) 
		  AND B.업무분류코드(+) = 'BM0001'       -- COA상품분류
		  AND A.모집기관코드 = C.기관코드 

);

=====================================
신계약마감조회_쿼리_단체일괄


#######################################
###  신계약마감조회 
#######################################
  uvDebug("증권번호     = [%s]", (char *) dcncErphubvw01SpIn.pynoBdctNo .arr);
  uvDebug("부활처리번호 = [%s]", (char *) dcncErphubvw01SpIn.reviDlngNo .arr);
  uvDebug("업무구분     = [%s]", (char *) dcncErphubvw01SpIn.workDvsn   .arr);
  uvDebug("취소여부     = [%s]", (char *) dcncErphubvw01SpIn.cnclYn     .arr);

  uvDebug("설계사번호      [%s]",(char *) dcncErphubvw01SpOut.clltLpPrno     .arr);
  uvDebug("모집기관코드    [%s]",(char *) dcncErphubvw01SpOut.clltOrgnCode   .arr);
  uvDebug("상품분류        [%s]",(char *) dcncErphubvw01SpOut.goodClsfCode   .arr);
  uvDebug("개인단체구분    [%s]",(char *) dcncErphubvw01SpOut.prsnCoprSadv   .arr);
  uvDebug("전환여부        [%s]",(char *) dcncErphubvw01SpOut.cnvsYn         .arr);
  uvDebug("입금경로        [%s]",(char *) dcncErphubvw01SpOut.ftprRecvMdcd   .arr);
  uvDebug("입금결과        [%s]",(char *) dcncErphubvw01SpOut.recvYn         .arr);
  uvDebug("납입주기        [%s]",(char *) dcncErphubvw01SpOut.paymCyclCode   .arr);
  uvDebug("은행코드        [%s]",(char *) dcncErphubvw01SpOut.bankCode       .arr);
  uvDebug("방카제휴기관코드[%s]",(char *) dcncErphubvw01SpOut.bankCoop       .arr);
  uvDebug("매출수수료      [%f]",         dcncErphubvw01SpOut.sellCmsn           );
  uvDebug("매출취소수수료  [%f]",         dcncErphubvw01SpOut.sellCanCmsn        );
  uvDebug("부활실입금액    [%f]",         dcncErphubvw01SpOut.realRecvPrem       );
  uvDebug("실송금액        [%f]",         dcncErphubvw01SpOut.canFstiRrcvPrem    );
  uvDebug("입금액          [%f]",         dcncErphubvw01SpOut.recvPrem           );
  uvDebug("초회실입금보험료[%f]",         dcncErphubvw01SpOut.fstiRrcvPrem       );
  uvDebug("부활보험료      [%f]",         dcncErphubvw01SpOut.rvrm               );
  uvDebug("연체이자        [%f]",         dcncErphubvw01SpOut.reviArreInte       );
  uvDebug("이체수수료      [%f]",         dcncErphubvw01SpOut.trnfCmsn           );
  uvDebug("계약체결년월    [%s]",(char *) dcncErphubvw01SpOut.cnttConcYm     .arr);
  uvDebug("부활처리기관코드[%s]",(char *) dcncErphubvw01SpOut.reviDlngOgcd   .arr);
  uvDebug("부활실적기관코드[%s]",(char *) dcncErphubvw01SpOut.reviAchvOgcd   .arr);
  uvDebug("접수일자        [%s]",(char *) dcncErphubvw01SpOut.srdoRecpDate   .arr);
  uvDebug("성립일자        [%s]",(char *) dcncErphubvw01SpOut.cnttConcDate   .arr);
  uvDebug("지급예정일자    [%s]",(char *) dcncErphubvw01SpOut.paymPrrmDate   .arr);
  uvDebug("수보마감일자    [%s]",(char *) dcncErphubvw01SpOut.stddDate       .arr);
  uvDebug("기관전표구분코드[%s]",(char *) dcncErphubvw01SpOut.orgnSlipDvcd   .arr);
  uvDebug("단체실손재개여부[%s]",(char *) dcncErphubvw01SpOut.pmmiResmYn     .arr);
  uvDebug("증액보험료[%f]",         dcncErphubvw01SpOut.iccoPrem           );

============================================================================

p_work_dvsn = 02 인 경우   ### 단체일괄 ###
  
CMNC_erpHubComm_CC.pc/ dcnc_erphubvw01_sp.pc / DENC_SNCERPHUB_002_SP

============================================================================

SELECT 
  모집설계사고유번호 
 ,모집기관코드 
 ,상품분류코드 
 ,개인법인판매구분 
 ,CNVS_YN 
 ,초회보험료입금방법코드 
 ,RECV_YN 
 ,납입주기코드 
 ,BANK_CODE 
 ,BANK_COOP 
 ,SELL_CMSN 
 ,SELL_CAN_CMSN 
 ,REAL_RECV_PREM 
 ,CAN_초회실입금보험료 
 ,RECV_PREM 
 ,초회실입금보험료 
 ,RVRM 
 ,REVI_ARRE_INTE 
 ,계약일자 
 ,계약체결년월 
 ,청약서접수일자 
 ,계약성립일자 
 ,(SELECT MAX(기준일자) FROM 월별일정관리 
    WHERE 업무구분코드 = 'NC' 
      AND 일정관리종류코드 = DECODE(개인법인판매구분,'1','NCP28','NCG28') 
      AND 마감년월 = TO_CHAR(ADD_MONTHS(TO_DATE(계약체결년월,'YYYYMM'),1),'YYYYMM') 
  ) 기준일자 
 ,기관전표구분코드
 
 INTO
    모집설계사고유번호,
    모집기관코드,
    상품분류코드,
    개인법인판매구분,
    CNVS_YN,
    초회보험료입금방법코드,
    RECV_YN,
    납입주기코드,
    BANK_CODE,
    BANK_COOP,
    SELL_CMSN,
    SELL_CAN_CMSN,
    REAL_RECV_PREM,
    CAN_초회실입금보험료,
    RECV_PREM,
    초회실입금보험료,
    RVRM,
    REVI_ARRE_INTE,
    계약일자,
    계약체결년월,
    청약서접수일자,
    계약성립일자,
    기준일자,
    기관전표구분코드
 FROM ( 
SELECT 
   A.모집설계사고유번호  모집설계사고유번호 
  ,A.모집기관코드 모집기관코드 
  ,NVL(B.상품분류코드,'00000000') 상품분류코드 
  ,A.개인법인판매구분 개인법인판매구분 
 
 ,( SELECT DECODE(COUNT(*),0,'2','1') 
	   FROM 상품분류 Z 
	  WHERE Z.보험종류코드_세 = A.보험종류코드_세 
		AND Z.보험종류코드_목 = A.보험종류코드_목 
		AND Z.업무분류코드 = 'NCAPL011'        -- 정산특약가입보종 
		AND Z.상품분류코드 IN ('A2','A5','A6') 
   ) CNVS_YN -- 전환여부
   
  ,NVL(( SELECT DECODE(COUNT(*),0,NULL,'88') 
           FROM 정산특약가입계약 Z 
          WHERE Z.일괄계약번호 = A.일괄계약번호 
            AND Z.최초가입여부 = 'N' 
        ),초회보험료입금방법코드) 초회보험료입금방법코드 
		
  ,'' RECV_YN 
  
  ,LPAD(A.납입주기코드,2,0) 납입주기코드 
  
  ,CASE WHEN A.초회보험료입금방법코드 = '83' 
        THEN ( SELECT Z.금융기관코드 
			     FROM 계약입출금등록정보 Z 
			    WHERE Z.관리번호 = A.일괄계약번호 
			      AND Z.계약입출금사용구분 = '01' 
				  AND Z.관리번호구분 = '1' 
				  AND Z.종료일자 = '99991231' 
				  AND Z.삭제여부 = 'N' 
				  AND ROWNUM = 1 ) 
        ELSE '' 
		END BANK_CODE --은행코드
   
  ,'' BANK_COOP 
  ,'' SELL_CMSN 
  ,'' SELL_CAN_CMSN 
  ,'' REAL_RECV_PREM 
  ,'' CAN_초회실입금보험료 
  ,'' RECV_PREM 
  
  ,( SELECT SUM(초회실입금보험료) 
       FROM 신계약일마감 
	  WHERE 일괄계약번호 = P_PYNO_일괄계약번호 
	    AND 계약상태코드 IN ('1','2','7','L') ) 초회실입금보험료
		
  ,'' RVRM 
  ,'' REVI_ARRE_INTE 
  
  ,A.계약일자 
  
  ,( SELECT MIN(계약체결년월) 
       FROM 신계약일마감 
	  WHERE 일괄계약번호 = P_PYNO_일괄계약번호 ) 계약체결년월 
	  
  ,A.일괄청약서접수일자 청약서접수일자 
  
  ,( SELECT 계약성립일자 
       FROM 신계약일마감 
	  WHERE 일괄계약번호 = P_PYNO_일괄계약번호
	    AND ROWNUM = 1 
		AND 계약상태코드 IN ('1','2') ) 계약성립일자 
		
  ,C.기관전표구분코드 
  
FROM 
   일괄계약 A 
  ,상품분류 B 
  ,기관코드 C 
  
WHERE 
   A.일괄계약번호 = P_PYNO_일괄계약번호 
AND A.보험종류코드_세 = B.보험종류코드_세(+) 
AND A.보험종류코드_목 = B.보험종류코드_목(+) 
AND B.업무분류코드(+) = 'BM0001' 
AND C.기관코드   = A.모집기관코드 
);


==============================
신계약마감조회_쿼리_부활


#######################################
###  신계약마감조회 
#######################################
  uvDebug("증권번호     = [%s]", (char *) dcncErphubvw01SpIn.pynoBdctNo .arr);
  uvDebug("부활처리번호 = [%s]", (char *) dcncErphubvw01SpIn.reviDlngNo .arr);
  uvDebug("업무구분     = [%s]", (char *) dcncErphubvw01SpIn.workDvsn   .arr);
  uvDebug("취소여부     = [%s]", (char *) dcncErphubvw01SpIn.cnclYn     .arr);

  uvDebug("설계사번호      [%s]",(char *) dcncErphubvw01SpOut.clltLpPrno     .arr);
  uvDebug("모집기관코드    [%s]",(char *) dcncErphubvw01SpOut.clltOrgnCode   .arr);
  uvDebug("상품분류        [%s]",(char *) dcncErphubvw01SpOut.goodClsfCode   .arr);
  uvDebug("개인단체구분    [%s]",(char *) dcncErphubvw01SpOut.prsnCoprSadv   .arr);
  uvDebug("전환여부        [%s]",(char *) dcncErphubvw01SpOut.cnvsYn         .arr);
  uvDebug("입금경로        [%s]",(char *) dcncErphubvw01SpOut.ftprRecvMdcd   .arr);
  uvDebug("입금결과        [%s]",(char *) dcncErphubvw01SpOut.recvYn         .arr);
  uvDebug("납입주기        [%s]",(char *) dcncErphubvw01SpOut.paymCyclCode   .arr);
  uvDebug("은행코드        [%s]",(char *) dcncErphubvw01SpOut.bankCode       .arr);
  uvDebug("방카제휴기관코드[%s]",(char *) dcncErphubvw01SpOut.bankCoop       .arr);
  uvDebug("매출수수료      [%f]",         dcncErphubvw01SpOut.sellCmsn           );
  uvDebug("매출취소수수료  [%f]",         dcncErphubvw01SpOut.sellCanCmsn        );
  uvDebug("부활실입금액    [%f]",         dcncErphubvw01SpOut.realRecvPrem       );
  uvDebug("실송금액        [%f]",         dcncErphubvw01SpOut.canFstiRrcvPrem    );
  uvDebug("입금액          [%f]",         dcncErphubvw01SpOut.recvPrem           );
  uvDebug("초회실입금보험료[%f]",         dcncErphubvw01SpOut.fstiRrcvPrem       );
  uvDebug("부활보험료      [%f]",         dcncErphubvw01SpOut.rvrm               );
  uvDebug("연체이자        [%f]",         dcncErphubvw01SpOut.reviArreInte       );
  uvDebug("이체수수료      [%f]",         dcncErphubvw01SpOut.trnfCmsn           );
  uvDebug("계약체결년월    [%s]",(char *) dcncErphubvw01SpOut.cnttConcYm     .arr);
  uvDebug("부활처리기관코드[%s]",(char *) dcncErphubvw01SpOut.reviDlngOgcd   .arr);
  uvDebug("부활실적기관코드[%s]",(char *) dcncErphubvw01SpOut.reviAchvOgcd   .arr);
  uvDebug("접수일자        [%s]",(char *) dcncErphubvw01SpOut.srdoRecpDate   .arr);
  uvDebug("성립일자        [%s]",(char *) dcncErphubvw01SpOut.cnttConcDate   .arr);
  uvDebug("지급예정일자    [%s]",(char *) dcncErphubvw01SpOut.paymPrrmDate   .arr);
  uvDebug("수보마감일자    [%s]",(char *) dcncErphubvw01SpOut.stddDate       .arr);
  uvDebug("기관전표구분코드[%s]",(char *) dcncErphubvw01SpOut.orgnSlipDvcd   .arr);
  uvDebug("단체실손재개여부[%s]",(char *) dcncErphubvw01SpOut.pmmiResmYn     .arr);
  uvDebug("증액보험료[%f]",         dcncErphubvw01SpOut.iccoPrem           );

============================================================================

p_work_dvsn = 03 인 경우   ### 부활 ###
  
CMNC_erpHubComm_CC.pc/ dcnc_erphubvw01_sp.pc / DENC_SNCERPHUB_003_SP

============================================================================

SELECT 
   모집설계사고유번호 
  ,모집기관코드 
  ,상품분류코드 
  ,개인법인판매구분 
  ,CNVS_YN        -- 전환여부
  ,FTPR_RECV_MDCD -- 입금경로
  ,DECODE(FTPR_RECV_MDCD,'84','1',수신유무) 수신유무 
  ,LPAD(납입주기코드,2,0) 납입주기코드 
  ,은행코드 
  ,BANK_COOP 
  ,SELL_수수료 
  ,SELL_CAN_수수료 
  ,실입금보험료 
  ,CAN_FSTI_RRCV_PREM 
  
  ,CASE WHEN FTPR_RECV_MDCD = '81' 
        THEN FSTI_RRCV_PREM 
        WHEN FTPR_RECV_MDCD = '84' AND 수신유무 = '1' 
        THEN FSTI_RRCV_PREM - SELL_수수료 
        WHEN FTPR_RECV_MDCD = '84' AND 수신유무 = '2' 
        THEN -(CAN_FSTI_RRCV_PREM - SELL_CAN_수수료) 
        ELSE 0 
		END RECV_PREM -- 입금액
  
  ,CASE WHEN FTPR_RECV_MDCD = '84' 
        THEN DECODE(P_취소여부,'1',FSTI_RRCV_PREM,'2',0,FSTI_RRCV_PREM) 
		ELSE FSTI_RRCV_PREM 
		END FSTI_RRCV_PREM 
		
  ,부활보험료 
  ,부활연체이자 
  ,부활처리기관코드 
  ,부활실적기관코드 
  ,계약체결년월 
  ,SRDO_영수일자 
  ,CNTT_CONC_DATE 
  ,기준일자 
  ,기관전표구분코드 
  ,지급예정일자 
  ,이체수수료
  
 INTO
    모집설계사고유번호,
    모집기관코드,
    상품분류코드,
    개인법인판매구분,
    CNVS_YN,
    FTPR_RECV_MDCD,
    수신유무,
    납입주기코드,
    은행코드,
    BANK_COOP,
    SELL_수수료,
    SELL_CAN_수수료,
    실입금보험료,
    CAN_FSTI_RRCV_PREM,
    RECV_PREM,
    FSTI_RRCV_PREM,
    부활보험료,
    부활연체이자,
    부활처리기관코드,
    부활실적기관코드,
    계약체결년월,
    SRDO_영수일자,
    CNTT_CONC_DATE,
    기준일자,
    기관전표구분코드,
    지급예정일자,
    이체수수료
	
 FROM ( 
SELECT 
   A.부활실적설계사고유번호  모집설계사고유번호 
  ,A.부활실적기관코드 모집기관코드 
  ,NVL(B.상품분류코드,'00000000') 상품분류코드 
  
  ,C.개인법인판매구분 개인법인판매구분 
  
  ,( SELECT DECODE(COUNT(*),0,'2','1') 
	   FROM 상품분류 Z 
	   WHERE Z.보험종류코드_세 = A.보험종류코드_세 
		AND Z.보험종류코드_목 = A.보험종류코드_목 
		AND Z.업무분류코드 = 'NCAPL011' 
		AND Z.상품분류코드 IN ('A2','A5','A6') 
   ) CNVS_YN --전환여부 
   
  ,CASE WHEN D.영업형태구분코드 = 'A12' -- 방카
        THEN '89' 
        ELSE A.부활보험료입금방법코드  
         END FTPR_RECV_MDCD -- 입금경로 
	 
  ,DECODE(A.부활보험료입금방법코드,'84',P_취소여부,'') 수신유무 
  ,LPAD(A.납입주기코드,2,0) 납입주기코드 
  
  ,CASE WHEN A.부활보험료입금방법코드 IN ('81','83','84')  
		THEN ( SELECT Z.금융기관코드 
				FROM 계약입출금등록정보 Z 
			   WHERE Z.관리번호 = A.증권번호||A.부활처리번호 
				 AND Z.계약입출금사용구분 = '01' 
				 AND Z.관리번호구분 = '6' 
				 AND Z.종료일자 = '99991231' 
				 AND Z.삭제여부 = 'N' 
				 AND ROWNUM = 1 ) 
		ELSE '' 
		END 은행코드 
	
  ,DECODE(D.영업형태구분코드,'A12',A.부활처리기관코드,'') BANK_COOP 
  
  ,CASE WHEN A.부활보험료입금방법코드 = '84' 
	    THEN (SELECT DECODE(Z.카드납입청구상태코드,'5',Z.수수료) 
			   FROM 카드납입청구 Z 
			  WHERE Z.관리번호 = A.증권번호 
				AND Z.부활처리번호 = A.부활처리번호 
				AND Z.승인일자 = A.부활청약서접수일자 
				AND Z.취소여부 <> 'Y' 
				AND P_취소여부 = '1' 
				AND ROWNUM = 1 ) 
		ELSE 0 
		 END SELL_수수료 
	 
  ,CASE WHEN A.부활보험료입금방법코드 = '84' 
        THEN (SELECT DECODE(Z.카드납입청구상태코드,'10',Z.수수료) 
			    FROM 카드납입청구 Z 
			   WHERE Z.관리번호 = A.증권번호 
			     AND Z.부활처리번호 = A.부활처리번호 
			     AND Z.승인일자 = A.부활청약서접수일자 
			     AND Z.취소여부 = 'Y' 
			     AND P_취소여부 = '2' 
			     AND ROWNUM = 1 ) 
		ELSE 0 
		 END  SELL_CAN_수수료 
		 
  ,A.실입금보험료 실입금보험료 
  
  ,CASE WHEN A.부활보험료입금방법코드 = '84' 
        THEN (SELECT DECODE(Z.카드납입청구상태코드,'10',Z.실입금보험료) 
			    FROM 카드납입청구 Z 
			   WHERE Z.관리번호 = A.증권번호 
			     AND Z.부활처리번호 = A.부활처리번호 
			     AND Z.승인일자 = A.부활청약서접수일자 
			     AND P_취소여부 = '2' 
			     AND Z.취소여부 = 'Y' 
			     AND ROWNUM = 1 ) 
		ELSE 0 
		 END CAN_FSTI_RRCV_PREM 
		
  ,0 RECV_PREM 
  
  ,A.실입금보험료 FSTI_RRCV_PREM 
  ,A.부활연체보험료 부활보험료 
  ,A.부활연체이자 부활연체이자 
  ,A.부활처리기관코드 
  ,A.부활실적기관코드 
  ,SUBSTR(A.부활일자,1,6) 계약체결년월 
  ,A.부활청약서접수일자 SRDO_영수일자 
  ,A.부활성립일자 CNTT_CONC_DATE 
  
  ,(SELECT MAX(M.기준일자) 
      FROM 월별일정관리 M 
     WHERE M.업무구분코드 = 'RV' 
       AND M.일정관리종류코드 = DECODE(C.개인법인판매구분,'1','NCP28','NCG28') 
       AND M.마감년월 = TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(A.부활일자,1,6),'YYYYMM'),1),'YYYYMM') 
    ) 기준일자 
  
  ,D.기관전표구분코드 
  
  ,CASE WHEN A.부활보험료입금방법코드 = '84' 
	    THEN (SELECT Z.지급예정일자 
			    FROM 카드납입청구 Z 
			   WHERE Z.관리번호 = A.증권번호 
				 AND Z.부활처리번호 = A.부활처리번호 
				 AND Z.승인일자 = A.부활청약서접수일자 
				 AND ( ( Z.취소여부 = 'Y' AND P_취소여부 = '2' ) 
				    OR ( Z.취소여부 = 'N' AND P_취소여부 = '1' ) ) 
				 AND ROWNUM = 1 ) 
		ELSE NULL 
		 END 지급예정일자 
		 
  ,CASE WHEN A.부활보험료입금방법코드 = '83' 
	    THEN (SELECT Z.이체수수료 
		  	    FROM 즉시이체청구/결제 Z 
			   WHERE Z.청구일자 = A.부활일자 
				 AND Z.관리번호  = A.증권번호||A.부활처리번호 
				 AND Z.업무구분코드 = 'RV' 
				 AND ROWNUM = 1 ) 
		ELSE 0 
		 END 이체수수료 
		 
FROM 
   부활처리 A 
  ,상품분류 B 
  ,계약 C 
  ,기관코드 D 
WHERE A.증권번호 = P_PYNO_일괄계약번호 
  AND A.부활처리번호 = P_부활처리번호 
  AND A.증권번호 = C.증권번호 
  AND A.보험종류코드_세 = B.보험종류코드_세(+) 
  AND A.보험종류코드_목 = B.보험종류코드_목(+) 
  AND B.업무분류코드(+) = 'BM0001' 
  AND D.기관코드 = A.부활처리기관코드 
);


==============================
신계약마감조회_쿼리_중도부가

#######################################
###  신계약마감조회 
#######################################
  uvDebug("증권번호     = [%s]", (char *) dcncErphubvw01SpIn.pynoBdctNo .arr);
  uvDebug("부활처리번호 = [%s]", (char *) dcncErphubvw01SpIn.reviDlngNo .arr);
  uvDebug("업무구분     = [%s]", (char *) dcncErphubvw01SpIn.workDvsn   .arr);
  uvDebug("취소여부     = [%s]", (char *) dcncErphubvw01SpIn.cnclYn     .arr);

  uvDebug("설계사번호      [%s]",(char *) dcncErphubvw01SpOut.clltLpPrno     .arr);
  uvDebug("모집기관코드    [%s]",(char *) dcncErphubvw01SpOut.clltOrgnCode   .arr);
  uvDebug("상품분류        [%s]",(char *) dcncErphubvw01SpOut.goodClsfCode   .arr);
  uvDebug("개인단체구분    [%s]",(char *) dcncErphubvw01SpOut.prsnCoprSadv   .arr);
  uvDebug("전환여부        [%s]",(char *) dcncErphubvw01SpOut.cnvsYn         .arr);
  uvDebug("입금경로        [%s]",(char *) dcncErphubvw01SpOut.ftprRecvMdcd   .arr);
  uvDebug("입금결과        [%s]",(char *) dcncErphubvw01SpOut.recvYn         .arr);
  uvDebug("납입주기        [%s]",(char *) dcncErphubvw01SpOut.paymCyclCode   .arr);
  uvDebug("은행코드        [%s]",(char *) dcncErphubvw01SpOut.bankCode       .arr);
  uvDebug("방카제휴기관코드[%s]",(char *) dcncErphubvw01SpOut.bankCoop       .arr);
  uvDebug("매출수수료      [%f]",         dcncErphubvw01SpOut.sellCmsn           );
  uvDebug("매출취소수수료  [%f]",         dcncErphubvw01SpOut.sellCanCmsn        );
  uvDebug("부활실입금액    [%f]",         dcncErphubvw01SpOut.realRecvPrem       );
  uvDebug("실송금액        [%f]",         dcncErphubvw01SpOut.canFstiRrcvPrem    );
  uvDebug("입금액          [%f]",         dcncErphubvw01SpOut.recvPrem           );
  uvDebug("초회실입금보험료[%f]",         dcncErphubvw01SpOut.fstiRrcvPrem       );
  uvDebug("부활보험료      [%f]",         dcncErphubvw01SpOut.rvrm               );
  uvDebug("연체이자        [%f]",         dcncErphubvw01SpOut.reviArreInte       );
  uvDebug("이체수수료      [%f]",         dcncErphubvw01SpOut.trnfCmsn           );
  uvDebug("계약체결년월    [%s]",(char *) dcncErphubvw01SpOut.cnttConcYm     .arr);
  uvDebug("부활처리기관코드[%s]",(char *) dcncErphubvw01SpOut.reviDlngOgcd   .arr);
  uvDebug("부활실적기관코드[%s]",(char *) dcncErphubvw01SpOut.reviAchvOgcd   .arr);
  uvDebug("접수일자        [%s]",(char *) dcncErphubvw01SpOut.srdoRecpDate   .arr);
  uvDebug("성립일자        [%s]",(char *) dcncErphubvw01SpOut.cnttConcDate   .arr);
  uvDebug("지급예정일자    [%s]",(char *) dcncErphubvw01SpOut.paymPrrmDate   .arr);
  uvDebug("수보마감일자    [%s]",(char *) dcncErphubvw01SpOut.stddDate       .arr);
  uvDebug("기관전표구분코드[%s]",(char *) dcncErphubvw01SpOut.orgnSlipDvcd   .arr);
  uvDebug("단체실손재개여부[%s]",(char *) dcncErphubvw01SpOut.pmmiResmYn     .arr);
  uvDebug("증액보험료[%f]",         dcncErphubvw01SpOut.iccoPrem           );

============================================================================

p_work_dvsn = 04 인 경우   ### 중도부가 ###
  
CMNC_erpHubComm_CC.pc/ dcnc_erphubvw01_sp.pc / DENC_SNCERPHUB_004_SP

============================================================================

SELECT 
  모집설계사고유번호 
  ,모집기관코드 
  ,상품분류코드 
  ,개인법인판매구분 
  ,CNVS_YN 
  ,초회보험료입금방법코드 
  ,DECODE(초회보험료입금방법코드,'84','1',수신유무) 수신유무 
  ,LPAD(PAYM_CYCL_CODE,2,0) PAYM_CYCL_CODE 
  ,은행코드 
  ,BANK_COOP 
  ,SELL_CMSN 
  ,SELL_CAN_CMSN 
  ,REAL_RECV_PREM 
  ,CAN_FSTI_RRCV_PREM 
  
  ,CASE WHEN 초회보험료입금방법코드 = '81' 
        THEN FSTI_RRCV_PREM 
        WHEN 초회보험료입금방법코드 = '84' AND 수신유무 = '1' 
        THEN FSTI_RRCV_PREM - SELL_CMSN 
        WHEN 초회보험료입금방법코드 = '84' AND 수신유무 = '2' 
        THEN -(CAN_FSTI_RRCV_PREM - SELL_CAN_CMSN) 
        ELSE 0 
		 END RECV_PREM 
  
  ,CASE WHEN 초회보험료입금방법코드 = '84' 
        THEN DECODE(P_CNCL_YN,'1',FSTI_RRCV_PREM,'2',0,FSTI_RRCV_PREM) 
        ELSE FSTI_RRCV_PREM 
         END FSTI_RRCV_PREM 
		 
  ,계약체결년월 
  ,SRDO_접수일자 
  ,CNTT_성립일자 
  ,기준일자 
  ,기관전표구분코드 
  ,PAYM_PRRM_DATE --지급예정일자
  ,이체수수료
  
 INTO
    모집설계사고유번호,
    모집기관코드,
    상품분류코드,
    개인법인판매구분,
    CNVS_YN,
    초회보험료입금방법코드,
    수신유무,
    PAYM_CYCL_CODE,
    은행코드,
    BANK_COOP,
    SELL_CMSN,
    SELL_CAN_CMSN,
    REAL_RECV_PREM,
    CAN_FSTI_RRCV_PREM,
    RECV_PREM,
    FSTI_RRCV_PREM,
    계약체결년월,
    SRDO_접수일자,
    CNTT_성립일자,
    기준일자,
    기관전표구분코드,
    PAYM_PRRM_DATE,
    이체수수료
	
 FROM ( 
 
SELECT 
   A.처리자사번  모집설계사고유번호 
  ,A.처리기관코드 모집기관코드 
  ,NVL(B.상품분류코드,'00000000') 상품분류코드 
  ,C.개인법인판매구분 개인법인판매구분 
  ,'2' CNVS_YN -- 전환여부 
  
  ,CASE WHEN D.영업형태구분코드 = 'A12' 
        THEN '89' 
        ELSE 초회보험료입금방법코드 
         END 초회보험료입금방법코드 
		 
  ,DECODE(초회보험료입금방법코드,'84',P_CNCL_YN,'') 수신유무 
  ,LPAD(C.계약납입주기코드,2,0) PAYM_CYCL_CODE 

  ,CASE WHEN 초회보험료입금방법코드 IN ('81','83','84') 
        THEN ( SELECT 금융기관코드 
			     FROM 계약입출금등록정보 Z 
			    WHERE Z.관리번호 = A.증권번호||A.중도부가처리번호 
				  AND Z.계약입출금사용구분 = '11' 
				  AND Z.관리번호구분 = '11' 
				  AND Z.종료일자 = '99991231' 
				  AND Z.삭제여부 = 'N' 
				  AND ROWNUM = 1 ) 				  
        ELSE '' 
		 END 은행코드
		 
  ,DECODE(D.영업형태구분코드,'A12',A.처리기관코드,'') BANK_COOP 
  
  ,0 SELL_CMSN 
  ,0 SELL_CAN_CMSN 
  ,A.중도부가실입금보험료 REAL_RECV_PREM 
  ,0 CAN_FSTI_RRCV_PREM 
  ,0 RECV_PREM 
  ,A.중도부가실입금보험료 FSTI_RRCV_PREM 
  ,A.처리기관코드 
  ,SUBSTR(A.접수일자,1,6) 계약체결년월 
  ,A.접수일자 SRDO_접수일자 
  ,A.성립일자 CNTT_성립일자 
  
  ,(SELECT MAX(기준일자) FROM 월별일정관리 
     WHERE 업무구분코드 = 'NC' 
       AND 일정관리종류코드 = 'NCP35' 
       AND 마감년월 = TO_CHAR(ADD_MONTHS(TO_DATE(SUBSTR(중도가입일자,1,6),'YYYYMM'),1),'YYYYMM') 
    ) 기준일자 
  
  ,D.기관전표구분코드 
  
  ,NULL PAYM_PRRM_DATE --지급예정일자

  ,CASE WHEN 초회보험료입금방법코드 = '83' 
        THEN (SELECT 이체수수료 
   			    FROM 즉시이체청구/결제 Z 
			   WHERE Z.청구일자 = A.접수일자 
			     AND Z.관리번호  = A.증권번호||A.중도부가처리번호 
			     AND Z.업무구분코드 = 'JU' 
			     AND ROWNUM = 1 ) 
        ELSE 0 
         END 이체수수료 
		 
FROM 
   중도부가계약 A 
  ,상품분류 B 
  ,계약 C 
  ,기관코드 D 
  
WHERE A.증권번호 = P_PYNO_BDCT_NO 
  AND A.중도부가처리번호 = P_REVI_DLNG_NO 
  AND A.증권번호 = C.증권번호 
  AND A.보험종류코드_세 = B.보험종류코드_세(+) 
  AND A.보험종류코드_목 = B.보험종류코드_목(+) 
  AND B.업무분류코드(+) = 'BM0001' 
  AND D.기관코드 = A.처리기관코드 
  
);

==============================
신계약마감조회_쿼리_증액

#######################################
###  신계약마감조회 
#######################################
  uvDebug("증권번호     = [%s]", (char *) dcncErphubvw01SpIn.pynoBdctNo .arr);
  uvDebug("부활처리번호 = [%s]", (char *) dcncErphubvw01SpIn.reviDlngNo .arr);
  uvDebug("업무구분     = [%s]", (char *) dcncErphubvw01SpIn.workDvsn   .arr);
  uvDebug("취소여부     = [%s]", (char *) dcncErphubvw01SpIn.cnclYn     .arr);

  uvDebug("설계사번호      [%s]",(char *) dcncErphubvw01SpOut.clltLpPrno     .arr);
  uvDebug("모집기관코드    [%s]",(char *) dcncErphubvw01SpOut.clltOrgnCode   .arr);
  uvDebug("상품분류        [%s]",(char *) dcncErphubvw01SpOut.goodClsfCode   .arr);
  uvDebug("개인단체구분    [%s]",(char *) dcncErphubvw01SpOut.prsnCoprSadv   .arr);
  uvDebug("전환여부        [%s]",(char *) dcncErphubvw01SpOut.cnvsYn         .arr);
  uvDebug("입금경로        [%s]",(char *) dcncErphubvw01SpOut.ftprRecvMdcd   .arr);
  uvDebug("입금결과        [%s]",(char *) dcncErphubvw01SpOut.recvYn         .arr);
  uvDebug("납입주기        [%s]",(char *) dcncErphubvw01SpOut.paymCyclCode   .arr);
  uvDebug("은행코드        [%s]",(char *) dcncErphubvw01SpOut.bankCode       .arr);
  uvDebug("방카제휴기관코드[%s]",(char *) dcncErphubvw01SpOut.bankCoop       .arr);
  uvDebug("매출수수료      [%f]",         dcncErphubvw01SpOut.sellCmsn           );
  uvDebug("매출취소수수료  [%f]",         dcncErphubvw01SpOut.sellCanCmsn        );
  uvDebug("부활실입금액    [%f]",         dcncErphubvw01SpOut.realRecvPrem       );
  uvDebug("실송금액        [%f]",         dcncErphubvw01SpOut.canFstiRrcvPrem    );
  uvDebug("입금액          [%f]",         dcncErphubvw01SpOut.recvPrem           );
  uvDebug("초회실입금보험료[%f]",         dcncErphubvw01SpOut.fstiRrcvPrem       );
  uvDebug("부활보험료      [%f]",         dcncErphubvw01SpOut.rvrm               );
  uvDebug("연체이자        [%f]",         dcncErphubvw01SpOut.reviArreInte       );
  uvDebug("이체수수료      [%f]",         dcncErphubvw01SpOut.trnfCmsn           );
  uvDebug("계약체결년월    [%s]",(char *) dcncErphubvw01SpOut.cnttConcYm     .arr);
  uvDebug("부활처리기관코드[%s]",(char *) dcncErphubvw01SpOut.reviDlngOgcd   .arr);
  uvDebug("부활실적기관코드[%s]",(char *) dcncErphubvw01SpOut.reviAchvOgcd   .arr);
  uvDebug("접수일자        [%s]",(char *) dcncErphubvw01SpOut.srdoRecpDate   .arr);
  uvDebug("성립일자        [%s]",(char *) dcncErphubvw01SpOut.cnttConcDate   .arr);
  uvDebug("지급예정일자    [%s]",(char *) dcncErphubvw01SpOut.paymPrrmDate   .arr);
  uvDebug("수보마감일자    [%s]",(char *) dcncErphubvw01SpOut.stddDate       .arr);
  uvDebug("기관전표구분코드[%s]",(char *) dcncErphubvw01SpOut.orgnSlipDvcd   .arr);
  uvDebug("단체실손재개여부[%s]",(char *) dcncErphubvw01SpOut.pmmiResmYn     .arr);
  uvDebug("증액보험료[%f]",         dcncErphubvw01SpOut.iccoPrem           );

============================================================================

p_work_dvsn = 05 인 경우   ### 증액처리 ###
  
CMNC_erpHubComm_CC.pc/ dcnc_erphubvw01_sp.pc / DENC_SNCERPHUB_005_SP

============================================================================

SELECT 
   모집설계사고유번호 
  ,모집기관코드 
  ,NVL(상품분류코드,'00000000') 상품분류코드 
  ,개인법인판매구분 
  ,CNVS_YN 
  ,초회보험료입금방법코드 
  ,RECV_YN 
  ,LPAD(납입주기코드,2,0) 납입주기코드 
  ,BANK_CODE 
  ,BANK_COOP 
  ,SELL_CMSN 
  ,SELL_CAN_CMSN 
  ,REAL_RECV_PREM 
  ,CAN_초회실입금보험료 
  ,0  RECV_PREM 
  ,초회실입금보험료 
  ,RVRM 
  ,REVI_ARRE_INTE 
  ,TRNF_CMSN 
  ,계약일자 
  ,계약체결년월 
  ,청약서접수일자 
  ,계약성립일자 
  ,PAYM_PRRM_DATE 
  
  ,(SELECT MAX(기준일자) 
      FROM 월별일정관리 
     WHERE 업무구분코드 = 'NC' 
       AND 일정관리종류코드 = DECODE(개인법인판매구분,'1','NCP28','NCG28') 
       AND 마감년월 = TO_CHAR(ADD_MONTHS(TO_DATE(계약체결년월,'YYYYMM'),1),'YYYYMM') 
   ) 기준일자 
  
  ,기관전표구분코드 
  ,PMMI_RESM_YN 
  ,ICCO_PREM
 INTO
    모집설계사고유번호,
    모집기관코드,
    상품분류코드,
    개인법인판매구분,
    CNVS_YN,
    초회보험료입금방법코드,
    RECV_YN,
    납입주기코드,
    BANK_CODE,
    BANK_COOP,
    SELL_CMSN,
    SELL_CAN_CMSN,
    REAL_RECV_PREM,
    CAN_초회실입금보험료,
    RECV_PREM,
    초회실입금보험료,
    RVRM,
    REVI_ARRE_INTE,
    TRNF_CMSN,
    계약일자,
    계약체결년월,
    청약서접수일자,
    계약성립일자,
    PAYM_PRRM_DATE,
    기준일자,
    기관전표구분코드,
    PMMI_RESM_YN, --단체실손재개여부
    ICCO_PREM
	
 FROM ( 
 
SELECT 
   A.모집설계사고유번호  모집설계사고유번호 
  ,A.모집기관코드 모집기관코드 
  ,B.상품분류코드 상품분류코드 
  ,A.개인법인판매구분 개인법인판매구분 
  
  ,( SELECT DECODE(COUNT(*),0,'2','1') 
	   FROM 상품분류 Z 
	  WHERE Z.보험종류코드_세 = A.보험종류코드_세 
		AND Z.보험종류코드_목 = A.보험종류코드_목 
		AND Z.업무분류코드 = 'NCAPL011' 
		AND Z.상품분류코드 IN ('A2','A5','A6') 
	   ) CNVS_YN 
	   
  ,'82' 초회보험료입금방법코드 
  ,''  RECV_YN 
  ,A.납입주기코드 납입주기코드 
  ,''  BANK_CODE 
  ,DECODE(A.판매채널코드,'5',A.모집기관코드,'') BANK_COOP 
  ,0  SELL_CMSN 
  ,0  SELL_CAN_CMSN 
  ,0  REAL_RECV_PREM 
  ,0  CAN_초회실입금보험료 
  ,0  RECV_PREM 
  ,A.초회실입금보험료 
  ,0  RVRM 
  ,0  REVI_ARRE_INTE 
  ,A.계약일자 
  ,0  TRNF_CMSN 
  ,A.계약체결년월 
  ,D.결재일자 청약서접수일자 
  ,A.계약성립일자 
  ,NULL PAYM_PRRM_DATE 
  ,C.기관전표구분코드 
  
  ,(SELECT NVL(MIN('Y'),'N') PMMI_RESM_YN 
      FROM 계약간관계 X 
     WHERE X.주증권번호 = A.증권번호 
       AND X.계약간관계코드 = '13' 
       AND ROWNUM = 1) PMMI_RESM_YN -- 단체실손재개여부
	   
  , ABS(D.총환급보험료) ICCO_PREM -- 증액보험료(절대값)
  
FROM 
   신계약일마감 A 
  ,상품분류 B 
  ,기관코드 C 
  ,반송철회품질해지 D 
  
WHERE (P_CNCL_YN <> 'Y' OR P_CNCL_YN IS NULL) 
  AND A.증권번호 = P_증권번호_일괄계약번호 
  AND A.보험종류코드_세 = B.보험종류코드_세(+) 
  AND A.보험종류코드_목 = B.보험종류코드_목(+) 
  AND B.업무분류코드(+) = 'BM0001' 
  AND A.모집기관코드 = C.기관코드 
  AND D.증권번호_일괄계약번호 = A.증권번호 
  AND D.부활처리번호 = '0000' 
  AND D.반송철회해지구분  = '4' -- 신계약감액 
  
UNION ALL 

SELECT 
   A.모집설계사고유번호  모집설계사고유번호 
  ,A.모집기관코드 모집기관코드 
  ,B.상품분류코드 상품분류코드 
  ,A.개인법인판매구분 개인법인판매구분 
  
  ,( SELECT DECODE(COUNT(*),0,'2','1') 
       FROM 상품분류 Z 
      WHERE Z.보험종류코드_세 = A.보험종류코드_세 
        AND Z.보험종류코드_목 = A.보험종류코드_목 
        AND Z.업무분류코드 = 'NCAPL011' 
        AND Z.상품분류코드 = 'A2' 
   ) CNVS_YN
   
  ,'82' 초회보험료입금방법코드 -- 방문수금 
  ,'' RECV_YN 
  ,A.납입주기코드 납입주기코드 
  ,'' BANK_CODE 
  ,DECODE(A.판매채널코드,'5',A.모집기관코드,'') BANK_COOP 
  ,0  SELL_CMSN 
  ,0  SELL_CAN_CMSN 
  ,0  REAL_RECV_PREM 
  ,0  CAN_초회실입금보험료 
  ,0  RECV_PREM 
  ,A.초회실입금보험료 
  ,0  RVRM 
  ,0  REVI_ARRE_INTE 
  ,A.계약일자 
  ,0  TRNF_CMSN 
  ,A.계약체결년월 
  ,D.결재일자 청약서접수일자 
  ,A.계약성립일자 
  ,NULL PAYM_PRRM_DATE 
  ,C.기관전표구분코드 
  
  ,(SELECT NVL(MIN('Y'),'N') PMMI_RESM_YN 
      FROM 계약간관계 X 
     WHERE X.주증권번호 = A.증권번호 
       AND X.계약간관계코드 = '13' 
       AND ROWNUM = 1) PMMI_RESM_YN --단체실손재개여부
	   
  ,ABS(D.총환급보험료) ICCO_PREM --증액보험료(절대값)
  
FROM 
   신계약일마감 A 
  ,상품분류 B 
  ,기관코드 C 
  ,반송철회품질해지이력 D 
  
WHERE P_CNCL_YN = 'Y' 
AND A.증권번호 = P_증권번호_일괄계약번호 
AND A.보험종류코드_세 = B.보험종류코드_세(+) 
AND A.보험종류코드_목 = B.보험종류코드_목(+) 
AND B.업무분류코드(+) = 'BM0001' 
AND A.모집기관코드 = C.기관코드 
AND D.증권번호_일괄계약번호 = A.증권번호 
AND D.부활처리번호 = '0000' 
AND D.반송철회해지구분  = '4' 
AND D.이력번호 = (SELECT MAX(이력번호) 이력번호 
                 FROM 반송철회품질해지이력 
                WHERE 증권번호_일괄계약번호 = D.증권번호_일괄계약번호 
                  AND 부활처리번호 = '0000' 
                  AND 반송철회해지구분  = '4' -- 신계약감액 
				  ) 
		   
);


============================
1_유지계약고객ID

SELECT  DISTINCT 
        B.CUST_ID
      , C.CUST_NAME 
      , C.RSDN_RGST_NO
      , A.POLY_NO 
      , B.CUST_ROLE_CODE
FROM TB_ISAPLCTT A
    ,TB_ISAPLCMR B
	,TB_CSSCM010 C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.POLY_NO = B.POLY_NO 
AND A.CNTT_EXTN_DATE IS NULL 
AND B.DEL_YN  = 'N'
AND B.END_DATE = '99991231'
AND B.CUST_ID = C.CUST_ID 
AND B.CUST_ROLE_CODE = '21'
AND ROWNUM <= 100
UNION ALL
SELECT  DISTINCT 
        B.CUST_ID
      , C.CUST_NAME 
      , C.RSDN_RGST_NO
      , A.POLY_NO 
      , B.CUST_ROLE_CODE
FROM TB_ISAPLCTT A
    ,TB_ISAPLCMR B
	,TB_CSSCM010 C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.POLY_NO = B.POLY_NO 
AND A.CNTT_EXTN_DATE IS NULL 
AND B.DEL_YN  = 'N'
AND B.END_DATE = '99991231'
AND B.CUST_ID = C.CUST_ID 
AND B.CUST_ROLE_CODE = '22'
AND ROWNUM <= 100
UNION ALL
SELECT  DISTINCT 
        B.CUST_ID
      , C.CUST_NAME 
      , C.RSDN_RGST_NO
      , A.POLY_NO 
      , B.CUST_ROLE_CODE
FROM TB_ISAPLCTT A
    ,TB_ISAPLCMR B
	,TB_CSSCM010 C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.POLY_NO = B.POLY_NO 
AND A.CNTT_EXTN_DATE IS NULL 
AND B.DEL_YN  = 'N'
AND B.END_DATE = '99991231'
AND B.CUST_ID = C.CUST_ID 
AND B.CUST_ROLE_CODE IN ('23','24')
AND ROWNUM <= 100


======================
2_이미지신청_기초심사자배정건

SELECT
       DISTINCT
	   A.IMAG_RECP_SQNO
	 , B.CUST_NAME
     , B.RSDN_RGST_NO
	 , A.PAYM_BSNS_DVCD
	 , A.DTAL_BSNS_DVCD
	 , A.RECP_OMAN_NAME
	 , A.RECP_OMAN_RRNO
	 , A.RECP_DATE
	 , A.RECP_ORGN_CODE
	 , A.REVR_MPNO
	 , A.LAST_RECP_IPTM
	 , A.RQDL_PROG_STCD
	 , A.KIPC_ASMT_TIME
	 , A.KIPC_ASMT_OGCD
	 , A.KIPC_ASMT_MPNO
	 , A.ACCI_DVSN
	 , A.IMAG_RREC_YN
	 , A.RECP_CPMT_RESN
FROM TB_PAREPIMG A
	,TB_CSSCM010 B
	,TB_PAPCPCTM C
WHERE 1=1
AND A.RECP_DATE >= &P_BASE_DATE
AND A.PAYM_BSNS_DVCD = '2'
AND A.DLNG_DATE IS NULL
AND A.RQDL_PROG_STCD = '1' --이미지신청완료
AND A.KIPC_ASMT_MPNO IS NOT NULL
AND A.RECP_OMAN_RRNO = B.RSDN_RGST_NO
AND A.IMAG_RECP_SQNO = C.PRSN_ACRP_SQNO(+)
AND C.PRSN_ACRP_SQNO IS NULL
AND ROWNUM <= 100


=======================================
4_정액심사자배정건


SELECT  C.ACCM_NAME
      , C.ACCM_RSDN_NO
      , C.ACCM_CTID
      , C.PRSN_ACRP_SQNO
      , A.CNTT_RECP_SQNO
      , A.POLY_NO
      , A.CRNT_PROG_DVSN
      , A.ACCI_DVSN
      , A.DMND_RESN_CODE
      , A.ORIG_RESN_DATE
      , A.RESN_DATE
      , A.CAUS_CODE
      , A.RESL_CD1
      , A.DSAS_NAME
      , B.BASI_JUDG_MPNO
      , B.CNVN_JUDG_MPNO
      , B.JUDG_MPNO
FROM  TB_PARCPCTR A
	, TB_PAIMGEMT B
	, TB_PAPCPCTM C
WHERE 1=1
AND C.PRSN_ACRP_SQNO   >= &P_BASE_DATE
AND C.RECP_CPLT_YN = 'Y'
AND C.CNCL_DATE IS NULL
AND C.PRSN_ACRP_SQNO = A.PRSN_ACRP_SQNO
AND A.CNCL_DATE IS NULL
AND A.RECP_VLID_DVSN = '1'
AND A.LAST_DLNG_DATE IS NULL
AND A.NEW_PMMI_YN = 'N'
AND A.CRNT_PROG_DVSN = '22'
AND A.CNTT_RECP_SQNO = B.CNTT_RECP_SQNO
AND B.CNCL_DATE IS NULL
AND B.JUDG_MPNO IS NOT NULL
AND B.BASI_JUDG_MPNO <> B.JUDG_MPNO
AND B.CNVN_JUDG_MPNO <> B.JUDG_MPNO
AND ROWNUM <= 100
ORDER BY C.PRSN_ACRP_SQNO, A.CNTT_RECP_SQNO


================================
6_실손심사자배정건

SELECT  C.ACCM_NAME
      , C.ACCM_RSDN_NO
      , C.ACCM_CTID
      , C.PRSN_ACRP_SQNO
      , A.CNTT_RECP_SQNO
      , A.POLY_NO
      , A.CRNT_PROG_DVSN
      , A.ACCI_DVSN
      , A.DMND_RESN_CODE
      , A.ORIG_RESN_DATE
      , A.RESN_DATE
      , A.CAUS_CODE
      , A.RESL_CD1
      , A.DSAS_NAME
      , B.BASI_JUDG_MPNO
      , B.CNVN_JUDG_MPNO
      , B.JUDG_MPNO
FROM  TB_PARCPCTR A
	, TB_PAIMGEMT B 
	, TB_PAPCPCTM C
WHERE 1=1
AND C.PRSN_ACRP_SQNO   >= &P_BASE_DATE
AND C.RECP_CPLT_YN = 'Y'
AND C.CNCL_DATE IS NULL 
AND C.PRSN_ACRP_SQNO = A.PRSN_ACRP_SQNO 
AND A.CNCL_DATE IS NULL 
AND A.RECP_VLID_DVSN = '1'
AND A.LAST_DLNG_DATE IS NULL 
AND A.NEW_PMMI_YN = 'Y'
AND A.CRNT_PROG_DVSN = '22'
AND A.CNTT_RECP_SQNO = B.CNTT_RECP_SQNO
AND B.CNCL_DATE IS NULL
AND B.JUDG_MPNO IS NOT NULL
AND B.BASI_JUDG_MPNO <> B.JUDG_MPNO
AND B.CNVN_JUDG_MPNO <> B.JUDG_MPNO
AND ROWNUM < 100
ORDER BY C.PRSN_ACRP_SQNO, A.CNTT_RECP_SQNO


=============================
8_변액CI납면보장유지증권번호

WITH TMP0 AS ( --보종명&계약상태 증권번호 추출) 
SELECT 
        A.POLY_NO
      , A.CNTT_STAT_CODE
      , A.IRKD_CODE_DTAL
      , A.IRKD_CODE_ITEM
      , A.CNTT_STAT_DTCD
      , A.FRST_CNTT_DATE
      , A.CNTT_DATE
      , A.SUM_PREM
      , A.SUM_ORIG_PREM
FROM  TB_ISAPLCTT A
	, TB_MMNORSUB B
	, TB_PARCPCTR C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.CNTT_EXTN_DATE IS NULL 
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
AND B.INKD_BSNS_NAME LIKE '%변액%'
AND B.INKD_BSNS_NAME LIKE '%CI%'
AND A.POLY_NO = C.POLY_NO(+)
AND C.POLY_NO IS NULL 
) 

SELECT -- 보종별 면제 테이블 데이터 존재건
          DISTINCT 
          A.*
        , B.ACCM_CODE
        , B.ACCI_RESL_CODE
        , B.EXPT_KIND_CODE
FROM   TMP0 A
     , TB_MMPAYEXR B     
WHERE 1=1
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL 
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
AND B.EXPT_KIND_CODE <> '3'  --특약면제 제외한 면제 종류코드
AND ROWNUM < 100


==========================
9_일반상품장해납면보장유지증권번호
WITH TMP0 AS ( --보종명&계약상태 증권번호 추출) 
SELECT 
       A.POLY_NO
     , A.CNTT_STAT_CODE
     , A.IRKD_CODE_DTAL
     , A.IRKD_CODE_ITEM
     , A.CNTT_STAT_DTCD
     , A.FRST_CNTT_DATE
     , A.CNTT_DATE
     , A.SUM_PREM
     , A.SUM_ORIG_PREM
FROM  TB_ISAPLCTT A
	, TB_MMNORSUB B
	, TB_PARCPCTR C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.CNTT_EXTN_DATE IS NULL 
AND A.CNTT_DATE LIKE '201801%' --건을 줄이기 위해
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
AND B.INKD_BSNS_NAME NOT LIKE '%변액%'
AND B.INKD_BSNS_NAME NOT LIKE '%CI%'
AND A.POLY_NO = C.POLY_NO(+)
AND C.POLY_NO IS NULL 
) 

SELECT -- 보종별 면제 테이블 데이터 존재건
       DISTINCT 
         A.*
       , B.ACCM_CODE
       , B.ACCI_RESL_CODE
       , B.EXPT_KIND_CODE
FROM TMP0 A
     , TB_MMPAYEXR B     
WHERE 1=1
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL 
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
AND B.ACCI_RESL_CODE = '04'
AND B.EXPT_KIND_CODE  <> '3'  --특약면제 제외한 면제 종류코드
AND ROWNUM < 100

======================================
10_변액연금유지증권번호

SELECT 
       A.POLY_NO
     , A.CNTT_STAT_CODE
     , A.IRKD_CODE_DTAL
     , A.IRKD_CODE_ITEM
     , A.CNTT_STAT_DTCD
     , A.FRST_CNTT_DATE
     , A.CNTT_DATE
     , A.SUM_PREM
     , A.SUM_ORIG_PREM
FROM  TB_ISAPLCTT A
	, TB_MMNORSUB B
	, TB_PARCPCTR C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.CNTT_EXTN_DATE IS NULL 
--AND A.CNTT_DATE LIKE '201801%'
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
AND B.INKD_BSNS_NAME  LIKE '%변액%'
AND B.INKD_BSNS_NAME  LIKE '%연금%'
AND A.POLY_NO = C.POLY_NO(+)
AND C.POLY_NO IS NULL 
AND ROWNUM < 100 
;


==========================
11_종신유지증권번호



SELECT 
        A.POLY_NO
      , A.CNTT_STAT_CODE
      , A.IRKD_CODE_DTAL
      , A.IRKD_CODE_ITEM
      , A.CNTT_STAT_DTCD
      , A.FRST_CNTT_DATE
      , A.CNTT_DATE
      , A.SUM_PREM
      , A.SUM_ORIG_PREM
FROM  TB_ISAPLCTT A
	, TB_MMNORSUB B
	, TB_PARCPCTR C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.CNTT_EXTN_DATE IS NULL 
AND A.CNTT_DATE LIKE '201801%'
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
AND B.INKD_BSNS_NAME  LIKE '%종신%'
AND B.INKD_BSNS_NAME  NOT LIKE '%변액%'
AND B.INKD_BSNS_NAME  NOT LIKE '%CI%'
AND A.POLY_NO = C.POLY_NO(+)
AND C.POLY_NO IS NULL 
AND ROWNUM < 100 


================


12_비일시납유지증권번호(선납미납용)

SELECT 
        A.POLY_NO
      , A.CNTT_STAT_CODE
      , A.IRKD_CODE_DTAL
      , A.IRKD_CODE_ITEM
      , A.CNTT_STAT_DTCD
      , A.FRST_CNTT_DATE
      , A.CNTT_DATE
      , A.SUM_PREM
      , A.SUM_ORIG_PREM
      , A.CNTT_PAYM_CYCD
FROM  TB_ISAPLCTT A
	, TB_MMNORSUB B
	, TB_PARCPCTR C
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.CNTT_EXTN_DATE IS NULL 
AND A.CNTT_DATE LIKE '201901%'
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
--AND B.INKD_BSNS_NAME  LIKE '%종신%'
AND B.INKD_BSNS_NAME  NOT LIKE '%변액%'
AND B.INKD_BSNS_NAME  NOT LIKE '%CI%'
AND A.POLY_NO = C.POLY_NO(+)
AND C.POLY_NO IS NULL 
AND A.CNTT_PAYM_CYCD <> '0' 
AND ROWNUM < 200 
;


=====================

14_계약대출잔존유지계약증권번호

SELECT 
       A.POLY_NO
     , A.CNTT_STAT_CODE
     , A.IRKD_CODE_DTAL
     , A.IRKD_CODE_ITEM
     , A.CNTT_STAT_DTCD
     , A.FRST_CNTT_DATE
     , A.CNTT_DATE
     , A.SUM_PREM
     , A.SUM_ORIG_PREM
     , A.CNTT_PAYM_CYCD
FROM  TB_ISAPLCTT A
	, TB_MMNORSUB B
	, TB_PARCPCTR C
	, TB_LRLONMAS D
WHERE 1=1
AND A.CNTT_STAT_CODE = '1'
AND A.CNTT_EXTN_DATE IS NULL 
AND A.CNTT_DATE LIKE '202001%' 
AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
AND B.INKD_BSNS_NAME  NOT LIKE '%하이드림%'
AND B.INKD_BSNS_NAME  NOT LIKE '%변액%'
AND B.INKD_BSNS_NAME  NOT LIKE '%CI%'
AND A.POLY_NO = C.POLY_NO(+)
AND C.POLY_NO IS NULL 
AND A.POLY_NO = D.POLY_NO 
AND D.LOAN_BALN > 0 
AND ROWNUM < 100 
;


=========================
15_한화손사조사의뢰증권번호


SELECT  
B.ACCM_NAME
, B.ACCM_RSDN_NO
, B.ACCM_CTID
, B.PRSN_ACRP_SQNO
, A.CNTT_RECP_SQNO
, A.POLY_NO
, A.CRNT_PROG_DVSN
, A.ACCI_DVSN
, A.DMND_RESN_CODE
, A.ORIG_RESN_DATE
, A.RESN_DATE
, A.CAUS_CODE
, A.RESL_CD1
, A.DSAS_NAME
, C.INVE_ORGN_CODE
FROM TB_PARCPCTR A 
	, TB_PAPCPCTM B	
	, TB_PAINVMAS C
WHERE 1=1
AND B.PRSN_ACRP_SQNO   > &P_BASE_DATE
AND B.RECP_CPLT_YN = 'Y'
AND B.CNCL_DATE IS NULL 
AND B.PRSN_ACRP_SQNO = A.PRSN_ACRP_SQNO 
AND A.CNCL_DATE IS NULL 
AND A.RECP_VLID_DVSN = '1'
AND A.LAST_DLNG_DATE IS NULL 
AND A.CRNT_PROG_DVSN = '31'
AND C.INVE_ORGN_CODE IN ('012772', '01273', '01294', '01295', '01296', '01297', '01298') 
AND ROWNUM < 200
ORDER BY a.prsn_acrp_sqno 


==========================
16_심사완료미승인증권번호


SELECT  
       B.ACCM_NAME
     , B.ACCM_RSDN_NO
     , B.ACCM_CTID
     , B.PRSN_ACRP_SQNO
     , A.CNTT_RECP_SQNO
     , A.POLY_NO
     , A.CRNT_PROG_DVSN
     , A.ACCI_DVSN
     , A.DMND_RESN_CODE
     , A.ORIG_RESN_DATE
     , A.RESN_DATE
     , A.CAUS_CODE
     , A.RESL_CD1
     , A.DSAS_NAME
     , A.LAST_APRM_MPNO
     , A.LAST_DLNG_DATE
FROM  TB_PARCPCTR A 
	, TB_PAPCPCTM B	
WHERE 1=1
AND B.PRSN_ACRP_SQNO   >= &P_BASE_DATE
AND B.RECP_CPLT_YN = 'Y'
AND B.CNCL_DATE IS NULL 
AND B.PRSN_ACRP_SQNO = A.PRSN_ACRP_SQNO 
AND A.CNCL_DATE IS NULL 
AND A.RECP_VLID_DVSN = '1'
AND A.LAST_APRM_MPNO IS NOT NULL 
AND A.PAYM_DATE IS NULL 
AND A.RESL_CODE_DTAL <> '01' 
AND ROWNUM < 200
ORDER BY a.prsn_acrp_sqno 


==========================
갱신처리_Part01_20210302
/* ************************** 갱신데이터 생성 및 재생성  같은 데이터를 사용가능 ************************** */

/* 갱신정보생성 및 처리 - 단독갱신 : 주계약 및 모든 특약이 같은 보험기간으로 전체가 함께 갱신  */
SELECT A.poly_no AS 증번, 
       A.cntt_updt_prdt AS 갱신예정일자, 
       B.join_good_no   AS 가입상품번호, 
       B.UPBF_CNTT_DATE AS 갱신전계약일자,
       B.UPBF_END_DATE  AS 갱신전만기일자,
       B.UPBF_ORIG_PREM AS 갱신전원보험료,
       B.UPBF_PREM      AS 갱신전보험료,
       C.UPAF_CNTT_DATE AS 갱신후계약일자,
       C.UPAF_END_DATE  AS 갱신후만기일자,
       C.UPAF_ORIG_PREM AS 갱신후원보험료,
       C.UPAF_PREM      AS 갱신후보험료,
       C.UPAF_UPDT_DCRT AS 갱신후실손할인율
  from (
        SELECT poly_no,updt_dlng_sqno,cntt_updt_prdt
          from tb_isaplupd
        WHERE  updt_cntt_dvcd = '23'
          AND CNTT_UPDT_PRDT >= '20210101'
          AND UPDT_DLNG_YN = 'N'
          AND UPDT_IMPR_YN = 'N'
          AND del_yn ='N'
          AND ROWNUM < 30 ) A, tb_iscjgbud B,tb_iscjgaud C
 WHERE A.poly_no =  B.poly_no
   AND A.updt_dlng_sqno = B.updt_dlng_sqno
   AND B.poly_no =  C.poly_no
   AND B.updt_dlng_sqno = C.updt_dlng_sqno
   AND B.join_good_no = C.join_good_no
   AND C.updt_apcn_obyn = 'Y'
;

/* 갱신정보생성 및 처리 - 실손상품  */
/* 실손특약(2) : 갱신대상 중 실손특약만 있음 /  실손특약-비실손특약(24) : 갱신대상중 실손특약 + 비실손특약 같이 있음 /  실손주계약(3) : 갱신대상중실손주계약만 갱신*/
SELECT (SELECT CODE_NAME
          FROM tb_uvcdm002
         WHERE code_id ='UPDT_CNTT_DVCD'
           AND code_val = A.updt_cntt_dvcd)||'('||A.updt_cntt_dvcd||')' AS 구분,
       A.poly_no AS 증번, 
       A.cntt_updt_prdt AS 갱신예정일자, 
       B.join_good_no   AS 가입상품번호, 
       B.UPBF_CNTT_DATE AS 갱신전계약일자,
       B.UPBF_END_DATE  AS 갱신전만기일자,
       B.UPBF_ORIG_PREM AS 갱신전원보험료,
       B.UPBF_PREM      AS 갱신전보험료,
       C.UPAF_CNTT_DATE AS 갱신후계약일자,
       C.UPAF_END_DATE  AS 갱신후만기일자,
       C.UPAF_ORIG_PREM AS 갱신후원보험료,
       C.UPAF_PREM      AS 갱신후보험료,
       C.UPAF_UPDT_DCRT AS 갱신후실손할인율
  from (
        SELECT updt_cntt_dvcd,poly_no,updt_dlng_sqno,cntt_updt_prdt
          from tb_isaplupd
        WHERE  updt_cntt_dvcd IN ('2','24','3')
          AND CNTT_UPDT_PRDT >= '20210101'
          AND UPDT_DLNG_YN = 'N'
          AND UPDT_IMPR_YN = 'N'
          AND del_yn ='N'
          AND ROWNUM < 30 ) A, tb_iscjgbud B,tb_iscjgaud C
 WHERE A.poly_no =  B.poly_no
   AND A.updt_dlng_sqno = B.updt_dlng_sqno
   AND B.poly_no =  C.poly_no
   AND B.updt_dlng_sqno = C.updt_dlng_sqno
   AND B.join_good_no = C.join_good_no
   AND C.updt_apcn_obyn = 'Y'
;




/* 갱신정보생성 및 처리 - 비실손특약
   (4)갱신 대상 특약 상품 모두 비실손  / 실손주계약-비실손특약(34) :  갱신대상 중 주계약은 실손 , 특약은 모두 비실손 */
SELECT (SELECT CODE_NAME
          FROM tb_uvcdm002
         WHERE code_id ='UPDT_CNTT_DVCD'
           AND code_val = A.updt_cntt_dvcd)||'('||A.updt_cntt_dvcd||')' AS 구분,
       A.poly_no AS 증번, 
       A.cntt_updt_prdt AS 갱신예정일자, 
       B.join_good_no   AS 가입상품번호, 
       B.UPBF_CNTT_DATE AS 갱신전계약일자,
       B.UPBF_END_DATE  AS 갱신전만기일자,
       B.UPBF_ORIG_PREM AS 갱신전원보험료,
       B.UPBF_PREM      AS 갱신전보험료,
       C.UPAF_CNTT_DATE AS 갱신후계약일자,
       C.UPAF_END_DATE  AS 갱신후만기일자,
       C.UPAF_ORIG_PREM AS 갱신후원보험료,
       C.UPAF_PREM      AS 갱신후보험료,
       C.UPAF_UPDT_DCRT AS 갱신후실손할인율
  from (
        SELECT updt_cntt_dvcd,poly_no,updt_dlng_sqno,cntt_updt_prdt
          from tb_isaplupd
        WHERE  updt_cntt_dvcd IN ('34','4')
          AND CNTT_UPDT_PRDT >= '20210101'
          AND UPDT_DLNG_YN = 'N'
          AND UPDT_IMPR_YN = 'N'
          AND del_yn ='N'
          AND ROWNUM < 30 ) A, tb_iscjgbud B,tb_iscjgaud C
 WHERE A.poly_no =  B.poly_no
   AND A.updt_dlng_sqno = B.updt_dlng_sqno
   AND B.poly_no =  C.poly_no
   AND B.updt_dlng_sqno = C.updt_dlng_sqno
   AND B.join_good_no = C.join_good_no
   AND C.updt_apcn_obyn = 'Y'
;




/* 갱신정보생성 및 처리 - 노후 실손   쿼리속도 :  약 1분 소요 */
SELECT (SELECT CODE_NAME
          FROM tb_uvcdm002
         WHERE code_id ='UPDT_CNTT_DVCD'
           AND code_val = A.updt_cntt_dvcd)||'('||A.updt_cntt_dvcd||')' AS 구분,
       A.poly_no AS 증번, 
       A.cntt_updt_prdt AS 갱신예정일자, 
       A.updt_dlng_yn AS 갱신처리여부,
       B.join_good_no   AS 가입상품번호, 
       (SELECT  good_bsns_name FROM tb_mmnormat WHERE good_code_dtal = B.upbf_gdcd_dtal AND good_code_item = B.upbf_gdcd_item) AS 상품명,
       B.UPDT_IMPR_YN   AS 가입상품갱신불여부,
       B.UPBF_CNTT_DATE AS 갱신전계약일자,
       B.UPBF_END_DATE  AS 갱신전만기일자,
       B.UPBF_ORIG_PREM AS 갱신전원보험료,
       B.UPBF_PREM      AS 갱신전보험료,
       C.updt_apcn_obyn AS 갱신적용여부,
       C.UPAF_CNTT_DATE AS 갱신후계약일자,
       C.UPAF_END_DATE  AS 갱신후만기일자,
       C.UPAF_ORIG_PREM AS 갱신후원보험료,
       C.UPAF_PREM      AS 갱신후보험료,
       C.UPAF_UPDT_DCRT AS 갱신후실손할인율
  from (
        SELECT UNIQUE X.updt_cntt_dvcd,X.poly_no,X.updt_dlng_sqno,X.cntt_updt_prdt ,X.updt_dlng_yn
          from tb_isaplupd X,
               tb_iscjgbud Y
        WHERE  1=1
          AND X.CNTT_UPDT_PRDT >= '20190101'
          AND X.UPDT_DLNG_YN = 'N'
          AND X.UPDT_IMPR_YN = 'N'
          AND X.del_yn ='N'
          AND X.poly_no =  Y.poly_no
          AND X.updt_dlng_sqno = Y.updt_dlng_sqno
          AND EXISTS (SELECT A.SPGD_TYPE_DVSN,A.GOOD_CODE_DTAL,A.GOOD_CODE_ITEM
                          FROM TB_MMNORATR A
                         WHERE A.SPGD_TYPE_DVSN IN ('8','9') -- 8 노후실손의료비 , 9 요양병원의료비
                         AND A.good_code_dtal = Y.upbf_gdcd_dtal
                         AND A.good_code_item = Y.upbf_gdcd_item )
          AND ROWNUM < 100 
          ) A, tb_iscjgbud B,tb_iscjgaud C
 WHERE A.poly_no =  B.poly_no
   AND A.updt_dlng_sqno = B.updt_dlng_sqno
   AND B.poly_no =  C.poly_no(+)
   AND B.updt_dlng_sqno = C.updt_dlng_sqno(+)
   AND B.join_good_no = C.join_good_no(+)
   AND C.updt_apcn_obyn(+) = 'Y'
 ORDER BY 2,3,4

;


;
-- 노후실손 상품인지 검증
(SELECT UNIQUE A.SPGD_TYPE_DVSN,A.GOOD_CODE_DTAL,A.GOOD_CODE_ITEM , 
           B.GOOD_BSNS_NAME ,C.UPDT_POSS_TERM ,C.REJN_END_AGE
      FROM TB_MMNORATR A,
           tb_mmnormat B,
           TB_MMENTMUT C
     WHERE A.SPGD_TYPE_DVSN IN ('8','9') -- 8 노후실손의료비 , 9 요양병원의료비
--     AND A.good_code_dtal = ''
--     AND A.good_code_item = ''
    AND A.good_code_dtal = B.good_code_dtal
    AND A.good_code_item = B.good_code_item
    AND B.good_code_dtal = C.good_code_dtal
    AND B.good_code_item = C.good_code_item )
;


===============================
계속보험료 입금 및 취소_Part01_20210302

/* 개별납입 - 계약상태 유지 - 연체 - 일반상품 1회 연체 기본보험료 */
SELECT A.poly_no,
       A.irkd_code,
       A.inkd_bsns_name,
       A.cntt_date,
       A.prem_cpay_reym,
       A.cntt_end_date,
       A.sum_orig_prem,
       A.sum_prem,
       A.last_paym_ym,
       A.last_paym_cnt,
       A.coll_orgn_code,
       (SELECT orgn_name
        FROM tb_uvorg004
        WHERE orgn_code = A.coll_orgn_code) AS coll_orgn_name,
       A.coll_lp_prno,
       A.dsct_cnt,
       A.sum_dsct_prem
FROM (SELECT A.poly_no,
             A.irkd_code_dtal||'-'||A.irkd_code_item AS irkd_code,
             D.inkd_bsns_name,
             A.cntt_date,
             A.prem_cpay_reym,
             A.cntt_end_date,
             A.sum_orig_prem,
             A.sum_prem,
             B.last_paym_ym,
             B.last_paym_cnt,
             B.coll_orgn_code,
             B.coll_lp_prno,
             COUNT(C.prem_dsct_kdcd) AS dsct_cnt,
             NVL(SUM(C.dsct_prem),0) AS sum_dsct_prem,
             ROW_NUMBER() OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item ORDER BY A.poly_no) AS seq_in_irkd,
             COUNT(A.poly_no) OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item) AS cnt_in_irkd,
             D.rand_val
      FROM tb_isaplctt A,
           tb_iscompci B,
           tb_isaplppd C,
           (SELECT A.irkd_code_dtal,
                   A.irkd_code_item,
                   A.inkd_bsns_name,
                   dbms_random.value(0,1) AS rand_val
            FROM tb_mmnorsub A,
                 tb_mmnoratr B
            WHERE 1 = 1
                  AND A.irkd_code_dtal = B.good_code_dtal
                  AND A.irkd_code_item = B.good_code_item
                  AND B.prem_frpy_psyn = 'N') D
      WHERE 1 = 1
            AND A.cntt_stat_code = '1'
            AND A.cntt_stat_dtcd = '11'
            AND A.cntt_paym_cycd = '1'
            AND A.poly_no = B.poly_no
            AND B.last_paym_ym = TO_CHAR(ADD_MONTHS(NVL2(&stdd_date,TO_DATE(&stdd_date,'YYYYMMDD'),SYSDATE),-2),'YYYYMM')
            AND B.last_paym_cnt BETWEEN NVL(&last_pyct_from,15) AND NVL(&last_pyct_to,21)
            AND A.poly_no = C.poly_no(+)
            AND C.prem_dsct_kdcd(+) IN ('02','16','17','18','19','22','24','26','28','29')
            AND C.end_date(+) = '99991231'
            AND C.del_yn(+) = 'N'
            AND A.irkd_code_dtal = D.irkd_code_dtal
            AND A.irkd_code_item = D.irkd_code_item
      GROUP BY A.poly_no,
               A.irkd_code_dtal,
               A.irkd_code_item,
               D.inkd_bsns_name,
               A.cntt_date,
               A.prem_cpay_reym,
               A.cntt_end_date,
               A.sum_orig_prem,
               A.sum_prem,
               B.last_paym_ym,
               B.last_paym_cnt,
               B.coll_orgn_code,
               B.coll_lp_prno,
               D.rand_val) A
WHERE A.seq_in_irkd = TRUNC(A.cnt_in_irkd*A.rand_val)+1
ORDER BY A.poly_no
;

/* 개별납입 - 계약상태 유지 - 연체 - 일반상품 약관상 실효 연체 기본보험료 */
SELECT A.poly_no,
       A.irkd_code,
       A.inkd_bsns_name,
       A.cntt_date,
       A.prem_cpay_reym,
       A.cntt_end_date,
       A.sum_orig_prem,
       A.sum_prem,
       A.last_paym_ym,
       A.last_paym_cnt,
       A.coll_orgn_code,
       (SELECT orgn_name
        FROM tb_uvorg004
        WHERE orgn_code = A.coll_orgn_code) AS coll_orgn_name,
       A.coll_lp_prno,
       A.dsct_cnt,
       A.sum_dsct_prem
FROM (SELECT A.poly_no,
             A.irkd_code_dtal||'-'||A.irkd_code_item AS irkd_code,
             D.inkd_bsns_name,
             A.cntt_date,
             A.prem_cpay_reym,
             A.cntt_end_date,
             A.sum_orig_prem,
             A.sum_prem,
             B.last_paym_ym,
             B.last_paym_cnt,
             B.coll_orgn_code,
             B.coll_lp_prno,
             COUNT(C.prem_dsct_kdcd) AS dsct_cnt,
             NVL(SUM(C.dsct_prem),0) AS sum_dsct_prem,
             ROW_NUMBER() OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item ORDER BY A.poly_no) AS seq_in_irkd,
             COUNT(A.poly_no) OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item) AS cnt_in_irkd,
             D.rand_val
      FROM tb_isaplctt A,
           tb_iscompci B,
           tb_isaplppd C,
           (SELECT A.irkd_code_dtal,
                   A.irkd_code_item,
                   A.inkd_bsns_name,
                   dbms_random.value(0,1) AS rand_val
            FROM tb_mmnorsub A,
                 tb_mmnoratr B
            WHERE 1 = 1
                  AND A.irkd_code_dtal = B.good_code_dtal
                  AND A.irkd_code_item = B.good_code_item
                  AND B.prem_frpy_psyn = 'N') D
      WHERE 1 = 1
            AND A.cntt_stat_code = '1'
            AND A.cntt_stat_dtcd = '11'
            AND A.cntt_paym_cycd = '1'
            AND A.poly_no = B.poly_no
            AND B.last_paym_ym = TO_CHAR(ADD_MONTHS(NVL2(&stdd_date,TO_DATE(&stdd_date,'YYYYMMDD'),SYSDATE),-3),'YYYYMM')
            AND B.last_paym_cnt BETWEEN NVL(&last_pyct_from,15) AND NVL(&last_pyct_to,21)
            AND A.poly_no = C.poly_no(+)
            AND C.prem_dsct_kdcd(+) IN ('02','16','17','18','19','22','24','26','28','29')
            AND C.end_date(+) = '99991231'
            AND C.del_yn(+) = 'N'
            AND A.irkd_code_dtal = D.irkd_code_dtal
            AND A.irkd_code_item = D.irkd_code_item
      GROUP BY A.poly_no,
               A.irkd_code_dtal,
               A.irkd_code_item,
               D.inkd_bsns_name,
               A.cntt_date,
               A.prem_cpay_reym,
               A.cntt_end_date,
               A.sum_orig_prem,
               A.sum_prem,
               B.last_paym_ym,
               B.last_paym_cnt,
               B.coll_orgn_code,
               B.coll_lp_prno,
               D.rand_val) A
WHERE A.seq_in_irkd = TRUNC(A.cnt_in_irkd*A.rand_val)+1
ORDER BY A.poly_no
;

/* 개별납입 - 계약상태 유지 - 연체 - 갱신일자 경과 미갱신 입금 후 갱신 처리 */
SELECT A.poly_no,
       A.irkd_code,
       A.inkd_bsns_name,
       A.cntt_date,
       A.prem_cpay_reym,
       A.cntt_end_date,
       A.sum_orig_prem,
       A.sum_prem,
       A.last_paym_ym,
       A.last_paym_cnt,
       A.coll_orgn_code,
       (SELECT orgn_name
        FROM tb_uvorg004
        WHERE orgn_code = A.coll_orgn_code) AS coll_orgn_name,
       A.coll_lp_prno,
       A.cntt_updt_prdt
FROM (SELECT A.poly_no,
             A.irkd_code_dtal||'-'||A.irkd_code_item AS irkd_code,
             D.inkd_bsns_name,
             A.cntt_date,
             A.prem_cpay_reym,
             A.cntt_end_date,
             A.sum_orig_prem,
             A.sum_prem,
             C.last_paym_ym,
             C.last_paym_cnt,
             C.coll_orgn_code,
             C.coll_lp_prno,
             MIN(B.cntt_updt_prdt) AS cntt_updt_prdt,
             ROW_NUMBER() OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item ORDER BY A.poly_no) AS seq_in_irkd,
             COUNT(A.poly_no) OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item) AS cnt_in_irkd,
             D.rand_val
      FROM tb_isaplctt A,
           tb_isaplupd B,
           tb_iscompci C,
           (SELECT A.irkd_code_dtal,
                   A.irkd_code_item,
                   A.inkd_bsns_name,
                   dbms_random.value(0,1) AS rand_val
            FROM tb_mmnorsub A,
                 tb_mmnoratr B
            WHERE 1 = 1
                  AND A.irkd_code_dtal = B.good_code_dtal
                  AND A.irkd_code_item = B.good_code_item
                  AND B.prem_frpy_psyn = 'N') D
      WHERE 1 = 1
            AND A.cntt_stat_code = '1'
            AND A.cntt_stat_dtcd = '11'
            AND A.cntt_paym_cycd = '1'
            AND A.poly_no = B.poly_no
            AND B.cntt_updt_prdt LIKE TO_CHAR(ADD_MONTHS(NVL2(&stdd_date,TO_DATE(&stdd_date,'YYYYMMDD'),SYSDATE),-1),'YYYYMM')||'%'
            AND B.updt_dlng_yn = 'N'
            AND B.updt_impr_yn = 'N'
            AND B.updt_cntt_dvcd IN ('2','3','23')
            AND B.del_yn = 'N'
            AND A.poly_no = C.poly_no
            AND C.last_paym_ym = TO_CHAR(ADD_MONTHS(NVL2(&stdd_date,TO_DATE(&stdd_date,'YYYYMMDD'),SYSDATE),-2),'YYYYMM')
            AND A.irkd_code_dtal = D.irkd_code_dtal
            AND A.irkd_code_item = D.irkd_code_item
      GROUP BY A.poly_no,
               A.irkd_code_dtal,
               A.irkd_code_item,
               D.inkd_bsns_name,
               A.cntt_date,
               A.prem_cpay_reym,
               A.cntt_end_date,
               A.sum_orig_prem,
               A.sum_prem,
               C.last_paym_ym,
               C.last_paym_cnt,
               C.coll_orgn_code,
               C.coll_lp_prno,
               D.rand_val) A
WHERE A.seq_in_irkd = TRUNC(A.cnt_in_irkd*A.rand_val)+1
ORDER BY A.poly_no
;

/* 개별납입 - 계약상태 유지 - 당월 - 일반상품 당월 기본보험료 */
SELECT A.poly_no,
       A.irkd_code,
       A.inkd_bsns_name,
       A.cntt_date,
       A.prem_cpay_reym,
       A.cntt_end_date,
       A.sum_orig_prem,
       A.sum_prem,
       A.last_paym_ym,
       A.last_paym_cnt,
       A.coll_orgn_code,
       (SELECT orgn_name
        FROM tb_uvorg004
        WHERE orgn_code = A.coll_orgn_code) AS coll_orgn_name,
       A.coll_lp_prno,
       A.dsct_cnt,
       A.sum_dsct_prem
FROM (SELECT A.poly_no,
             A.irkd_code_dtal||'-'||A.irkd_code_item AS irkd_code,
             D.inkd_bsns_name,
             A.cntt_date,
             A.prem_cpay_reym,
             A.cntt_end_date,
             A.sum_orig_prem,
             A.sum_prem,
             B.last_paym_ym,
             B.last_paym_cnt,
             B.coll_orgn_code,
             B.coll_lp_prno,
             COUNT(C.prem_dsct_kdcd) AS dsct_cnt,
             NVL(SUM(C.dsct_prem),0) AS sum_dsct_prem,
             ROW_NUMBER() OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item ORDER BY A.poly_no) AS seq_in_irkd,
             COUNT(A.poly_no) OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item) AS cnt_in_irkd,
             D.rand_val
      FROM tb_isaplctt A,
           tb_iscompci B,
           tb_isaplppd C,
           (SELECT A.irkd_code_dtal,
                   A.irkd_code_item,
                   A.inkd_bsns_name,
                   dbms_random.value(0,1) AS rand_val
            FROM tb_mmnorsub A,
                 tb_mmnoratr B
            WHERE 1 = 1
                  AND A.irkd_code_dtal = B.good_code_dtal
                  AND A.irkd_code_item = B.good_code_item
                  AND B.prem_frpy_psyn = 'N'
                  AND B.vrbl_good_yn = 'N') D
      WHERE 1 = 1
            AND A.cntt_stat_code = '1'
            AND A.cntt_stat_dtcd = '11'
            AND A.cntt_paym_cycd = '1'
            AND A.poly_no = B.poly_no
            AND B.last_paym_ym = TO_CHAR(ADD_MONTHS(NVL2(&stdd_date,TO_DATE(&stdd_date,'YYYYMMDD'),SYSDATE),-1),'YYYYMM')
            AND B.last_paym_cnt BETWEEN NVL(&last_pyct_from,15) AND NVL(&last_pyct_to,21)
            AND A.poly_no = C.poly_no(+)
            AND C.prem_dsct_kdcd(+) IN ('02','16','17','18','19','22','24','26','28','29')
            AND C.end_date(+) = '99991231'
            AND C.del_yn(+) = 'N'
            AND A.irkd_code_dtal = D.irkd_code_dtal
            AND A.irkd_code_item = D.irkd_code_item
      GROUP BY A.poly_no,
               A.irkd_code_dtal,
               A.irkd_code_item,
               D.inkd_bsns_name,
               A.cntt_date,
               A.prem_cpay_reym,
               A.cntt_end_date,
               A.sum_orig_prem,
               A.sum_prem,
               B.last_paym_ym,
               B.last_paym_cnt,
               B.coll_orgn_code,
               B.coll_lp_prno,
               D.rand_val) A
WHERE A.seq_in_irkd = TRUNC(A.cnt_in_irkd*A.rand_val)+1
ORDER BY A.poly_no
;

/* 개별납입 - 계약상태 유지 - 당월 - 변액상품 당월 기본보험료 */
SELECT A.poly_no,
       A.irkd_code,
       A.inkd_bsns_name,
       A.cntt_date,
       A.prem_cpay_reym,
       A.cntt_end_date,
       A.sum_orig_prem,
       A.sum_prem,
       A.last_paym_ym,
       A.last_paym_cnt,
       A.coll_orgn_code,
       (SELECT orgn_name
        FROM tb_uvorg004
        WHERE orgn_code = A.coll_orgn_code) AS coll_orgn_name,
       A.coll_lp_prno,
       A.dsct_cnt,
       A.sum_dsct_prem
FROM (SELECT A.poly_no,
             A.irkd_code_dtal||'-'||A.irkd_code_item AS irkd_code,
             D.inkd_bsns_name,
             A.cntt_date,
             A.prem_cpay_reym,
             A.cntt_end_date,
             A.sum_orig_prem,
             A.sum_prem,
             B.last_paym_ym,
             B.last_paym_cnt,
             B.coll_orgn_code,
             B.coll_lp_prno,
             COUNT(C.prem_dsct_kdcd) AS dsct_cnt,
             NVL(SUM(C.dsct_prem),0) AS sum_dsct_prem,
             ROW_NUMBER() OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item ORDER BY A.poly_no) AS seq_in_irkd,
             COUNT(A.poly_no) OVER (PARTITION BY A.irkd_code_dtal,A.irkd_code_item) AS cnt_in_irkd,
             D.rand_val
      FROM tb_isaplctt A,
           tb_iscompci B,
           tb_isaplppd C,
           (SELECT A.irkd_code_dtal,
                   A.irkd_code_item,
                   A.inkd_bsns_name,
                   dbms_random.value(0,1) AS rand_val
            FROM tb_mmnorsub A,
                 tb_mmnoratr B
            WHERE 1 = 1
                  AND A.irkd_code_dtal = B.good_code_dtal
                  AND A.irkd_code_item = B.good_code_item
                  AND B.prem_frpy_psyn = 'N'
                  AND B.vrbl_good_yn = 'Y') D
      WHERE 1 = 1
            AND A.cntt_stat_code = '1'
            AND A.cntt_stat_dtcd = '11'
            AND A.cntt_paym_cycd = '1'
            AND A.poly_no = B.poly_no
            AND B.last_paym_ym = TO_CHAR(ADD_MONTHS(NVL2(&stdd_date,TO_DATE(&stdd_date,'YYYYMMDD'),SYSDATE),-1),'YYYYMM')
            AND B.last_paym_cnt BETWEEN NVL(&last_pyct_from,15) AND NVL(&last_pyct_to,101)
            AND A.poly_no = C.poly_no(+)
            AND C.prem_dsct_kdcd(+) IN ('02','16','17','18','19','22','24','26','28','29')
            AND C.end_date(+) = '99991231'
            AND C.del_yn(+) = 'N'
            AND A.irkd_code_dtal = D.irkd_code_dtal
            AND A.irkd_code_item = D.irkd_code_item
      GROUP BY A.poly_no,
               A.irkd_code_dtal,
               A.irkd_code_item,
               D.inkd_bsns_name,
               A.cntt_date,
               A.prem_cpay_reym,
               A.cntt_end_date,
               A.sum_orig_prem,
               A.sum_prem,
               B.last_paym_ym,
               B.last_paym_cnt,
               B.coll_orgn_code,
               B.coll_lp_prno,
               D.rand_val) A
WHERE A.seq_in_irkd = TRUNC(A.cnt_in_irkd*A.rand_val)+1
ORDER BY A.poly_no
;



============================
보험료납입제도_Part01_20210302

/* 전체 보험료납입제도 테스트 케이스 산출 가능
   보험료납입제도구분(&prpy_sys_dvcd) 필수 입력
      1 : 보험료납입유예제도 (Default)
      2 : 보험료부분납입유예제도
      3 : 보험료납입종료제도
      4 : 보험료일시납입제도
      5 : 보험료납입일시중지제도
      6 : 특약보험료자동인출납입제도
      7 : 보험료납입중지제도
   자유납입구분(&frpy_dvsn) 선택 입력 (미입력 시 전체)
      일반상품
      UL자유납입
      연내자유납입
   최종납월 구간(&last_pyct_from ~ &last_pyct_to) 선택 입력 (미입력 시 전체)
   완납년월 ~ 만기년월(연금개시년월) case 구분(&case_dvsn) 선택 입력 (미입력 시 전체)
      0 : 전체 (Default)
      1 : 전기납
      2 : 완납년월+1개월 = 연금개시년월
      3 : 완납년월+13개월 = 만기년월
      4 : 완납년월+36개월 < 만기년월
*/
SELECT A.poly_no,
       A.irkd_code,
       A.inkd_bsns_name,
       A.frpy_dvsn,
       A.cntt_date,
       A.prem_cpay_reym,
       A.cntt_anpy_stdt,
       A.cntt_end_date,
       A.sum_orig_prem,
       A.sum_prem,
       A.last_paym_ym,
       A.last_paym_cnt,
       A.coll_orgn_code,
       (SELECT orgn_name
        FROM tb_uvorg004
        WHERE orgn_code = A.coll_orgn_code) AS coll_orgn_name,
       A.coll_lp_prno,
       A.prpy_sys_dvcd,
       A.imps_cond_code,
       A.rqst_cond_code,
       A.rqst_term_code,
       A.spad_rqst_lmds,
       A.prem_recv_lmds,
       A.anst_extd_psds,
       A.pygr_lowt_rato,
       A.pygr_hght_rato
FROM (SELECT B.poly_no,
             B.irkd_code_dtal||'-'||B.irkd_code_item AS irkd_code,
             D.inkd_bsns_name,
             D.frpy_dvsn,
             B.cntt_date,
             B.prem_cpay_reym,
             B.cntt_anpy_stdt,
             B.cntt_end_date,
             B.sum_orig_prem,
             B.sum_prem,
             C.last_paym_ym,
             C.last_paym_cnt,
             C.coll_orgn_code,
             C.coll_lp_prno,
             A.prpy_sys_dvcd,
             A.imps_cond_code,
             A.rqst_cond_code,
             A.rqst_term_code,
             A.spad_rqst_lmds,
             A.prem_recv_lmds,
             A.anst_extd_psds,
             A.pygr_lowt_rato,
             A.pygr_hght_rato,
             ROW_NUMBER() OVER (PARTITION BY B.irkd_code_dtal,B.irkd_code_item ORDER BY B.poly_no) AS seq_in_irkd,
             COUNT(B.poly_no) OVER (PARTITION BY B.irkd_code_dtal,B.irkd_code_item) AS cnt_in_irkd,
             D.rand_val
      FROM tb_mmnorpps A,
           tb_isaplctt B,
           tb_iscompci C,
           (SELECT A.irkd_code_dtal,
                   A.irkd_code_item,
                   A.inkd_bsns_name,
                   NVL2(C.spcl_type_dvcd,'연내자유납입',DECODE(B.prem_frpy_psyn,'Y','UL자유납입','일반상품')) AS frpy_dvsn,
                   dbms_random.value(0,1) AS rand_val
            FROM tb_mmnorsub A,
                 tb_mmnoratr B,
                 tb_mmnorspt C
            WHERE 1 = 1
                  AND A.irkd_code_dtal = B.good_code_dtal
                  AND A.irkd_code_item = B.good_code_item
                  AND A.irkd_code_dtal = C.good_code_dtal(+)
                  AND A.irkd_code_item = C.good_code_item(+)
                  AND C.spcl_type_dvcd(+) = 'SPT_007') D
      WHERE 1 = 1
            AND A.prpy_sys_dvcd = NVL(&prpy_sys_dvcd,'1')
            AND A.end_date = '99991231'
            AND A.del_yn = 'N'
            AND A.good_code_dtal = B.irkd_code_dtal
            AND A.good_code_item = B.irkd_code_item
            AND B.frst_cntt_date BETWEEN A.sale_strt_date AND A.sale_end_date
            AND B.cntt_stat_code = '1'
            AND CASE WHEN NVL(&case_dvsn,0) = 0 THEN 1
                     WHEN &case_dvsn = 1 AND TO_CHAR(ADD_MONTHS(TO_DATE(B.prem_cpay_reym,'YYYYMM'),1),'YYYYMM') = SUBSTR(B.cntt_end_date,1,6) THEN 1
                     WHEN &case_dvsn = 2 AND TO_CHAR(ADD_MONTHS(TO_DATE(B.prem_cpay_reym,'YYYYMM'),1),'YYYYMM') = SUBSTR(B.cntt_anpy_stdt,1,6) THEN 1
                     WHEN &case_dvsn = 3 AND TO_CHAR(ADD_MONTHS(TO_DATE(B.prem_cpay_reym,'YYYYMM'),13),'YYYYMM') = SUBSTR(B.cntt_end_date,1,6)  THEN 1
                     WHEN &case_dvsn = 4 AND TO_CHAR(ADD_MONTHS(TO_DATE(B.prem_cpay_reym,'YYYYMM'),36),'YYYYMM') = SUBSTR(B.cntt_end_date,1,6)  THEN 1
                     ELSE 0
                END = 1
            AND B.poly_no = C.poly_no
            AND C.last_paym_cnt BETWEEN NVL(&last_pyct_from,1) AND NVL(&last_pyct_to,999)
            AND B.irkd_code_dtal = D.irkd_code_dtal
            AND B.irkd_code_item = D.irkd_code_item
            AND D.frpy_dvsn = NVL(&frpy_dvsn,D.frpy_dvsn)
      GROUP BY B.poly_no,
               B.irkd_code_dtal,
               B.irkd_code_item,
               D.inkd_bsns_name,
               D.frpy_dvsn,
               B.cntt_date,
               B.prem_cpay_reym,
               B.cntt_anpy_stdt,
               B.cntt_end_date,
               B.sum_orig_prem,
               B.sum_prem,
               C.last_paym_ym,
               C.last_paym_cnt,
               C.coll_orgn_code,
               C.coll_lp_prno,
               A.prpy_sys_dvcd,
               A.imps_cond_code,
               A.rqst_cond_code,
               A.rqst_term_code,
               A.spad_rqst_lmds,
               A.prem_recv_lmds,
               A.anst_extd_psds,
               A.pygr_lowt_rato,
               A.pygr_hght_rato,
               D.rand_val) A
WHERE A.seq_in_irkd = TRUNC(A.cnt_in_irkd*A.rand_val)+1
ORDER BY A.poly_no
;


=============================
수금계약이관_Part01_20210302


/* ************************** 수금이관 테스트 데이터 산출  ************************** */
/* 수금이관 - 개별계약 */
SELECT A.poly_no ,
       C.orgn_name AS 수금기관명,
       A.coll_orgn_code AS 수금기관코드 ,
       A.coll_lp_prno AS 수금FP ,
       A.coll_metd_code AS 수금방법,
       B.cntt_stat_code AS 계약상태,
       D.orgn_name AS 모집기관명,
       B.cllt_orgn_code AS 모집기관코드,
       B.cllt_lp_prno AS 모집FP,
       B.sale_chnl_code AS 판매채널
  FROM tb_iscompci A,
       tb_isaplctt B,
       tb_uvorg004 C,
       tb_uvorg004 D
WHERE SUBSTR(NVL(GRP_CNTT_ADNO,'__________XX'),11,2) NOT IN ('01','02')
  AND PREM_PAYM_DVSN = '1'
  AND A.poly_no = B.poly_no
  AND B.cntt_date >= '20190101'
  AND B.cntt_stat_code = '1'
  AND A.coll_orgn_code = C.orgn_code
  AND B.cllt_orgn_code = D.orgn_code
  AND ROWNUM < 100
;

-- 해당 기관 FP 찾기
SELECT empl_no AS FP사번,
       empl_name AS FP명,
       DECODE(incb_dvsn,'P','재적',
                        'B','위촉전',
                        'C','위촉취소',
                        'R','해촉',incb_dvsn) AS 재직구분
  FROM tb_uvorg010
 WHERE pstn_orgn_code = '02459'  -- <-- 기관코드를 넣으면 해당 소속 재직중인 FP를 찾을 수 있음
   AND empl_dvsn = '1'
;


/* 수금이관 - 단체계약 */ 
SELECT GRP_CNTT_ADNO AS 단체수금관리번호,
       SUBSTR(GRP_CNTT_ADNO,0,10) AS 단체ID,
       SUBSTR(GRP_CNTT_ADNO,11,2) AS 단체유형,
       A.poly_no ,
       C.orgn_name AS 수금기관명,
       A.coll_orgn_code AS 수금기관코드 ,
       A.coll_lp_prno AS 수금FP ,
       A.coll_metd_code AS 수금방법,
       B.cntt_stat_code AS 계약상태,
       D.orgn_name AS 모집기관명,
       B.cllt_orgn_code AS 모집기관코드,
       B.cllt_lp_prno AS 모집FP,
       B.sale_chnl_code AS 판매채널
  FROM tb_iscompci A,
       tb_isaplctt B,
       tb_uvorg004 C,
       tb_uvorg004 D
WHERE SUBSTR(GRP_CNTT_ADNO ,11,2) IN ('01','02')
  AND PREM_PAYM_DVSN = '2'
  AND A.poly_no = B.poly_no
  AND B.cntt_date >= '20190101'
  AND B.cntt_stat_code = '1'
  AND A.coll_orgn_code = C.orgn_code
  AND B.cllt_orgn_code = D.orgn_code
  AND ROWNUM < 100
;



=================================
할인신청_Part01_20210302

/* ************************** 할인신청 데이터 : 제한사항별 데이터 추출  ************************** */
/* 할인신청 - 보종별 두자녀계약할인 대상  */
/* 참조 : 두자녀할인신청 제한사항 
   기할인건 ,기신청건, 급여이체건 중 고액할인건 신청불가 , 중도부가 특약 성립전 계약은 처리 불가합니다 , 가족사랑할인 정산대상 고객(요금과 문의)
*/

SELECT A.poly_no  AS 증번,
      (SELECT 'Y'
         FROM tb_cprqtpdc X3
        WHERE X3.poly_no = A.poly_no
          AND X3.del_yn = 'N'
          AND X3.end_date = '99991231'
          AND X3.prem_dsct_kdcd = '18'
          AND rownum < 2
      ) AS 기신청여부,
      (SELECT 'Y'
         FROM tb_isaplppd X4
        WHERE X4.poly_no = A.poly_no
          AND X4.del_yn = 'N'
          AND X4.end_date = '99991231'
          AND X4.prem_dsct_kdcd = '18'
          AND rownum < 2
      ) AS 기할인여부,
    (CASE WHEN B.coll_metd_code = '05' AND (SELECT COUNT(*) --2019.12.26 중복체크 기준 변경 : 급여이체건 중 고액할인건 신청불가
                                              FROM tb_isaplppd X4
                                              WHERE X4.poly_no = A.poly_no
                                                AND X4.del_yn = 'N'
                                                AND X4.end_date = '99991231'
                                                AND X4.prem_dsct_kdcd != '18'
                                                AND X4.prem_dsct_kdcd IN ('05','06','16','26')) <= 2 THEN '급여이체건 중 고액할인건 신청불가' 
      ELSE '' END ) AS 할인중복체크,
      (SELECT 'Y' FROM tb_cptrmdat Z
         WHERE Z.chrg_bsns_dvsn = '023' -- 가족사랑할인 정산
           AND Z.data_item_1   = A.poly_no -- 증권번호
           AND Z.data_item_3   = 'N' -- 정산여부
           AND Z.data_item_4   = 'N' -- 대상건삭제여부
           AND Z.del_yn        = 'N'
       ) AS 가족사랑할인정산대상 ,
      B.coll_metd_code AS 수금방법,
      A.irkd_code_dtal AS 보종세,
      A.irkd_code_item AS 보종목,
      B.last_paym_ym  AS 최종납월,
      B.last_paym_cnt  AS 최종납회,
      A.sum_prem  AS 수금보험료,
      A.sale_chnl_code AS 판매채널,
      A.ctor_cust_id AS 계약자ID
  FROM tb_isaplctt A, 
       tb_iscompci B,
       tb_mmnormdc C
 WHERE A.poly_no = B.poly_no
   AND A.cntt_stat_code IN ('1')
   AND A.IRKD_CODE_DTAL = C.IRKD_CODE_DTAL
   AND A.IRKD_CODE_ITEM = C.IRKD_CODE_ITEM
   AND A.SALE_CHNL_CODE = C.SALE_CHNL_CODE
   AND C.prem_dsct_kdcd = '18'
   /* 정산 완료건 찾을 때 필요부분*/
--   AND EXISTS  (SELECT 'Y' FROM tb_cptrmdat Z 
--                 WHERE Z.chrg_bsns_dvsn = '023' -- 가족사랑할인 정산
--                   AND Z.data_item_1   = A.poly_no -- 증권번호
--                   AND Z.data_item_3   = 'N' -- 정산여부
--                   AND Z.data_item_4   = 'N' -- 대상건삭제여부
--                   AND Z.del_yn        = 'N' ) 
   AND ROWNUM < 100
;


/* 할인신청 - 일부 가입상품별 두자녀계약할인 대상  */
SELECT A.poly_no  AS 증번,
      (SELECT 'Y'
         FROM tb_cprqtpdc X3
        WHERE X3.poly_no = A.poly_no
          AND X3.del_yn = 'N'
          AND X3.end_date = '99991231'
          AND X3.prem_dsct_kdcd = '18'
          AND rownum < 2
      ) AS 기신청여부,
      (SELECT 'Y'
         FROM tb_isaplppd X4
        WHERE X4.poly_no = A.poly_no
          AND X4.del_yn = 'N'
          AND X4.end_date = '99991231'
          AND X4.prem_dsct_kdcd = '18'
          AND rownum < 2
      ) AS 기할인여부,
    (CASE WHEN B.coll_metd_code = '05' AND (SELECT COUNT(*) --2019.12.26 중복체크 기준 변경 : 급여이체건 중 고액할인건 신청불가
                                              FROM tb_isaplppd X4
                                              WHERE X4.poly_no = A.poly_no
                                                AND X4.del_yn = 'N'
                                                AND X4.end_date = '99991231'
                                                AND X4.prem_dsct_kdcd != '18'
                                                AND X4.prem_dsct_kdcd IN ('05','06','16','26')) <= 2 THEN '급여이체건 중 고액할인건 신청불가' 
      ELSE '' END ) AS 할인중복체크,
      (SELECT 'Y' FROM tb_cptrmdat Z
         WHERE Z.chrg_bsns_dvsn = '023' -- 가족사랑할인 정산
           AND Z.data_item_1   = A.poly_no -- 증권번호
           AND Z.data_item_3   = 'N' -- 정산여부
           AND Z.data_item_4   = 'N' -- 대상건삭제여부
           AND Z.del_yn        = 'N'
       ) AS 가족사랑할인정산대상 ,
      B.coll_metd_code AS 수금방법,
      A.irkd_code_dtal AS 보종세,
      A.irkd_code_item AS 보종목,
      B.last_paym_ym  AS 최종납월,
      B.last_paym_cnt  AS 최종납회,
      A.sum_prem  AS 수금보험료,
      A.sale_chnl_code AS 판매채널,
      A.ctor_cust_id AS 계약자ID
  FROM tb_isaplctt A, 
       tb_iscompci B, 
       tb_isaplcjg C,
       tb_mmnorgdi D
 WHERE 1=1
--   AND A.ctor_cust_id   = &p_ctor_cust_id
   AND A.cntt_stat_code IN ('1')
   AND A.poly_no  = B.poly_no
   AND B.poly_no  = C.poly_no
   AND C.end_date = '99991231'
   AND C.del_yn   = 'N'
   AND C.GOOD_CODE_DTAL = D.GOOD_CODE_DTAL
   AND C.GOOD_CODE_ITEM = D.GOOD_CODE_ITEM
   AND D.prem_dsct_kdcd = '18'
   AND ROWNUM < 100
;


============================
RNY_MIG_TAB_LIST_사용컬럼

SELECT  WORK_FLAG
       ,SUBJ1
       ,ENT
       ,TAB
       ,TAB_OWNER
       ,MIG_YN
       ,MIG_TYPE
--       ,DSGNR
       ,MAPKEY_YN
       ,DMIG_TRF_MAPKEY
       ,RDS_ETL_YN
       ,PART_ETL_YN
       ,LOB_ETL_YN
       ,DEV_ST_DT
       ,DEV_ED_DT
       ,DEVR
       ,MIG_RANGE      
       ,TX_CI_YN
       ,TX_CI_DESC
       ,INIT_YN_TARGET
       ,INIT_YN_MAPKEY
       ,MIG_YN_202112
       ,MIG_YN_202202
       ,MIG_YN_202203
       ,MIG_YN_202204
       ,MIG_YN_202205
       ,MIG_YN_202206       
  FROM  RNY_MIG_TAB_LIST
 WHERE  MIG_YN = 'Y'
--   AND  MIG_RANGE ='이행대상증번만 - 35%'
--   AND  MAPKEY_YN = 'Y'
--   AND  DMIG_TRF_MAPKEY = 'Y'
--    AND  NVL(INIT_YN_TARGET, 'N') = 'N'
 ;
 
 SELECT  DISTINCT MIG_RANGE
   FROM  RNY_MIG_TAB_LIST
 WHERE  MIG_YN = 'Y'
 ;
 
 
 SELECT  /*+ PARALLEL(A 4) FULL(A) */
         POLY_NO
        ,TX_CI_CODE
        ,TX_CI_MAIN_POLY_NO
        ,TX_CI_MAIN_IRKD_CODE_DTAL
        ,TX_CI_MAIN_IRKD_CODE_ITEM
   FROM  MIG_SET_PLCY_NO A
   WHERE  VALD_DVSN_CODE = '1'
     AND  TX_CI_MAIN_POLY_NO = '506545531'
--     AND  TX_CI_CODE IS NOT NULL
   ;
   
   
SELECT *
  FROM  TBL_BACBCTCTUD
  ;
  
  
  =========================
  01_CREATE_TAB
  


CREATE TABLE  MIG_FINA_ORGN_CODE_NULL
(
 FINA_ORGN_DVSN   VARCHAR2(10)
,FINA_ORGN_CODE   VARCHAR2(20)
,CRET_DT          DATE
,MAPPING_DESC     VARCHAR2(200)
)
TABLESPACE TSD_MIG02
;


CREATE UNIQUE INDEX UQ_MIG_FINA_ORGN_CODE_NULL ON MIG_FINA_ORGN_CODE_NULL(FINA_ORGN_DVSN, FINA_ORGN_CODE)
;

SELECT *
  FROM  MIG_FINA_ORGN_CODE_NULL
;



CREATE OR REPLACE VIEW VW_RNY_TEST5
AS
SELECT *
  FROM (
SELECT  A.*
--       ,COUNT(1) OVER(PARTITION BY NTLT_KIND_CODE) CNT
       ,COUNT(DISTINCT NTFC_KIND_CODE) OVER (PARTITION BY NTLT_KIND_CODE) CNT
  FROM  MAPKEY_TBL_INMINDST01 A
)
WHERE CNT > 1
 
;


SELECT  *
 FROM VW_RNY_TEST5
;
 

MIG_PRC_MAPKEY_TBL_INMINDST01
 
 ============================
 010_20211014_토스뱅크
 SELECT  FINA_ORGN_DVSN
       ,FINA_ORGN_CODE
       ,FINA_ORGN_NAME
  FROM  TB_UVFNA001
 WHERE  1=1
   AND  FINA_ORGN_CODE = '92'
;   


SELECT  *
  FROM  COMOWN.TBL_COMCMD0104
 WHERE  1=1
   AND  (FNNC_ORGN_NM LIKE '%토스%'
     OR  UPPER(FNNC_ORGN_NM) LIKE '%TOSS%')
;     
=============================
010_CREATE_TABLE_MAPCODE_FNNC_ORGN_CODE_20210209


 -- 정준철 부장님 매핑 
SELECT   FINA_ORGN_DVSN
        ,FINA_ORGN_CODE
        ,FINA_ORGN_DVSN_NM
        ,FINA_ORGN_CODE_NM
   FROM  TB_UVFNA001
;


SELECT  FNNC_ORGN_DVSN_CODE
       ,FNNC_ORGN_CODE
       ,FNNC_ORGN_DVSN_CODE_NM
       ,FNNC_ORGN_CODE_NM
  FROM  TBL_COMCMD0104
;  

CREATE TABLE MAPCODE_FNNC_ORGN_CODE 
(
        ASIS_FINA_ORGN_DVSN VARCHAR2(10) NOT NULL
       ,ASIS_FINA_ORGN_CODE VARCHAR2(10) NOT NULL 
       ,ASIS_FINA_ORGN_DVSN_NM VARCHAR2(100)
       ,ASIS_FINA_ORGN_CODE_NM VARCHAR2(100)
       ,FNNC_ORGN_DVSN_CODE VARCHAR2(10)
       ,FNNC_ORGN_CODE      VARCHAR2(10)
       ,FNNC_ORGN_DVSN_CODE_NM VARCHAR2(100)
       ,FNNC_ORGN_CODE_NM VARCHAR2(100)
       ,LOAD_DT DATE
       ,CHNG_DT DATE
)
;

CREATE UNIQUE INDEX PK_MAPCODE_FNNC_ORGN_CODE ON MAPCODE_FNNC_ORGN_CODE(ASIS_FINA_ORGN_DVSN, ASIS_FINA_ORGN_CODE)
;



CREATE TABLE MAPCODE_FNNC_ORGN_CODE
AS
SELECT  *
  FROM  MIG02.MAPCODE_FNNC_ORGN_CODE@DL_PDNA
;


CREATE UNIQUE INDEX PK_MAPCODE_FNNC_ORGN_CODE ON MAPCODE_FNNC_ORGN_CODE(ASIS_FINA_ORGN_DVSN, ASIS_FINA_ORGN_CODE)
;



SELECT  *
  FROM  MAPKEY_ORGN_CODE
;  



=============================
030_금융결제원코드_추가등록

INSERT INTO MAPCODE_FNNC_ORGN_CODE
 SELECT  R.ASIS_FINA_ORGN_DVSN
        ,'0'||ASIS_FINA_ORGN_CODE
        ,ASIS_FINA_ORGN_DVSN_NM
        ,ASIS_FINA_ORGN_CODE_NM
        ,FNNC_ORGN_DVSN_CODE
        ,FNNC_ORGN_CODE
        ,FNNC_ORGN_DVSN_CODE_NM
        ,FNNC_ORGN_CODE_NM
        ,SYSDATE
        ,NULL
   FROM  MAPCODE_FNNC_ORGN_CODE  R
  WHERE  ASIS_FINA_ORGN_DVSN = '1'
    AND  LENGTH(ASIS_FINA_ORGN_CODE) = 2
    AND  NOT EXISTS (SELECT 1
                      FROM  MAPCODE_FNNC_ORGN_CODE  X
                     WHERE  X.ASIS_FINA_ORGN_DVSN = R.ASIS_FINA_ORGN_DVSN
                       AND  X.ASIS_FINA_ORGN_CODE = '0'||R.ASIS_FINA_ORGN_CODE)
  
          ;
          
COMMIT; 



SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE
  ;
  
  
SELECT *
  FROM  STG01.TB_UVFNA001@DL_DMIG A 
 WHERE  NOT EXISTS (SELECT 1
                     FROM  MAPCODE_FNNC_ORGN_CODE B
                    WHERE  B.ASIS_FINA_ORGN_DVSN = A.FINA_ORGN_DVSN
                      AND  B.ASIS_FINA_ORGN_CODE = A.FINA_ORGN_CODE)
 ;
 
 
 ============================
 040_2차매핑_로드
 
--DROP TABLE MIG_MAPCODE_FNNC_ORGN_010 PURGE;
CREATE TABLE MIG_MAPCODE_FNNC_ORGN_CODE_010
(
 WORK_YMD   VARCHAR2(8)
,ASIS_FINA_ORGN_DVSN  VARCHAR2(20)
,ASIS_FINA_ORGN_CODE  VARCHAR2(20)
,ASIS_FINA_ORGN_DVSN_NM VARCHAR2(500)
,ASIS_FINA_ORGN_CODE_NM VARCHAR2(500)
,KFTC_ORGN_CODE   VARCHAR2(20)
,KFTC_ORGN_CODE_NM  VARCHAR2(500)
,FNNC_ORGN_DVSN_CODE  VARCHAR2(20)
,FNNC_ORGN_CODE  VARCHAR2(20)
,FNNC_ORGN_DVSN_CODE_NM  VARCHAR2(500)
,FNNC_ORGN_CODE_NM VARCHAR2(500)
,WORK_DT DATE
)
TABLESPACE TSD_MIG02
;

CREATE UNIQUE INDEX UQ1_MIG_MAPCODE_FNNC_ORGN_CODE_010 ON MIG_MAPCODE_FNNC_ORGN_CODE_010 (WORK_YMD, ASIS_FINA_ORGN_DVSN, ASIS_FINA_ORGN_CODE) 
TABLESPACE TSD_MIG02
;

===================

050_2차_매핑추출
SELECT  N.*
  FROM  MIG_MAPCODE_FNNC_ORGN_CODE_010 N
       ,MIG_MAPCODE_FNNC_ORGN_CODE_010 O
 WHERE  N.WORK_YMD = '20210513'
   AND  O.WORK_YMD(+) = '20210209'
   AND  N.ASIS_FINA_ORGN_DVSN = O.ASIS_FINA_ORGN_DVSN(+)
   AND  N.ASIS_FINA_ORGN_CODE = O.ASIS_FINA_ORGN_CODE(+)
   AND  O.ASIS_FINA_ORGN_CODE IS NULL
 ;
 
 

CREATE TABLE MAPCODE_FNNC_ORGN_CODE_20210513
NOLOGGING
TABLESPACE TSD_MIG02
AS
SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE
  ;
SELECT *
  FROM  MAPCODE_FNNC_ORGN_CODE_20210513
  ;

TRUNCATE TABLE MAPCODE_FNNC_ORGN_CODE;

SELECT *
  FROM  MAPCODE_FNNC_ORGN_CODE
  ;


INSERT INTO MAPCODE_FNNC_ORGN_CODE
SELECT  TRIM(ASIS_FINA_ORGN_DVSN) ASIS_FINA_ORGN_DVSN
       ,TRIM(ASIS_FINA_ORGN_CODE) ASIS_FINA_ORGN_CODE
       ,ASIS_FINA_ORGN_DVSN_NM
       ,ASIS_FINA_ORGN_CODE_NM
       ,TRIM(FNNC_ORGN_DVSN_CODE) FNNC_ORGN_DVSN_CODE
       ,TRIM(FNNC_ORGN_CODE) FNNC_ORGN_CODE
       ,FNNC_ORGN_DVSN_CODE_NM
       ,FNNC_ORGN_CODE_NM
       ,SYSDATE
       ,NULL
  FROM  MIG_MAPCODE_FNNC_ORGN_CODE_010
 WHERE  WORK_YMD = '20210513'
 UNION  ALL
 SELECT  R.ASIS_FINA_ORGN_DVSN
        ,'0'||ASIS_FINA_ORGN_CODE
        ,ASIS_FINA_ORGN_DVSN_NM
        ,ASIS_FINA_ORGN_CODE_NM
        ,FNNC_ORGN_DVSN_CODE
        ,FNNC_ORGN_CODE
        ,FNNC_ORGN_DVSN_CODE_NM
        ,FNNC_ORGN_CODE_NM
       ,SYSDATE
       ,NULL
   FROM  MIG_MAPCODE_FNNC_ORGN_CODE_010 R
  WHERE  WORK_YMD = '20210513'
    AND  ASIS_FINA_ORGN_DVSN = '1'
    AND  LENGTH(ASIS_FINA_ORGN_CODE) = 2
    AND  NOT EXISTS (SELECT 1
                      FROM  MIG_MAPCODE_FNNC_ORGN_CODE_010  X
                     WHERE  X.WORK_YMD = '20210513'
                       AND  TRIM(X.ASIS_FINA_ORGN_DVSN) = TRIM(R.ASIS_FINA_ORGN_DVSN)
                       AND  TRIM(X.ASIS_FINA_ORGN_CODE) = '0'||TRIM(R.ASIS_FINA_ORGN_CODE)) 
;

COMMIT
;
          
DELETE  MAPCODE_FNNC_ORGN_CODE
 WHERE  FNNC_ORGN_CODE IS NULL
 ;
 
 COMMIT;

ALTER TABLE MAPCODE_FNNC_ORGN_CODE MODIFY (ASIS_FINA_ORGN_CODE VARCHAR2(100));



===========================
070_검증

SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE --_20210513
 WHERE  FNNC_ORGN_CODE IS NULL
;
SELECT  N.*
  FROM  MAPCODE_FNNC_ORGN_CODE N
       ,MAPCODE_FNNC_ORGN_CODE_20210513 O
 WHERE  N.ASIS_FINA_ORGN_DVSN = O.ASIS_FINA_ORGN_DVSN(+)
   AND  N.ASIS_FINA_ORGN_CODE = O.ASIS_FINA_ORGN_CODE(+)
   AND  O.ASIS_FINA_ORGN_CODE IS NULL
 ;
 
 =======================
 080_20210712_LG카드추가
 
 INSERT INTO MAPCODE_FNNC_ORGN_CODE
SELECT *
  FROM  MIG02.MAPCODE_FNNC_ORGN_CODE@DL_PDNA
 WHERE  ASIS_FINA_ORGN_DVSN = '2'
   AND  ASIS_FINA_ORGN_CODE = '66'
;

COMMIT;

=========================
090_20210716_한화증권추가(임시)



INSERT INTO MAPCODE_FNNC_ORGN_CODE
SELECT  '3' ASIS_FINA_ORGN_DVSN
       ,ASIS_FINA_ORGN_CODE
       ,NULL ASIS_FINA_ORGN_DVSN_NM
       ,ASIS_FINA_ORGN_CODE_NM
       ,FNNC_ORGN_DVSN_CODE
       ,FNNC_ORGN_CODE
       ,FNNC_ORGN_DVSN_CODE_NM
       ,FNNC_ORGN_CODE_NM
       ,SYSDATE LOAD_DT
       ,NULL
  FROM  MIG02.MAPCODE_FNNC_ORGN_CODE
 WHERE  1=1
   AND  ASIS_FINA_ORGN_CODE = '269'
;




INSERT INTO MIG02.MAPCODE_FNNC_ORGN_CODE@DL_PDNA
SELECT *
  FROM  MIG02.MAPCODE_FNNC_ORGN_CODE --
 WHERE  ASIS_FINA_ORGN_DVSN = '3'
   AND  ASIS_FINA_ORGN_CODE = '269'
;

COMMIT;


========================
100_토스뱅크

SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE
 WHERE  1=1
   AND  FNNC_ORGN_CODE_NM = '토스뱅크'
 ;

COMMIT;

--INSERT INTO MAPCODE_FNNC_ORGN_CODE
--INSERT INTO MIG02.MAPCODE_FNNC_ORGN_CODE@DL_DMIG
--INSERT INTO MIG02.MAPCODE_FNNC_ORGN_CODE@DL_PICR
SELECT  FINA_ORGN_DVSN             ASIS_FINA_ORGN_DVSN
       ,FINA_ORGN_CODE             ASIS_FINA_ORGN_CODE
       ,'은행'                      ASIS_FINA_ORGN_DVSN_NM
       ,FINA_ORGN_NAME             ASIS_FINA_ORGN_CODE_NM
       ,FINA_ORGN_DVSN             FNNC_ORGN_DVSN_CODE
       ,'092'                      FNNC_ORGN_CODE
       ,'은행'                      FNNC_ORGN_DVSN_CODE_NM
       ,FINA_ORGN_NAME             FNNC_ORGN_CODE_NM
       ,SYSDATE                    LOAD_DT
       ,NULL                       CHNG_DT
  FROM  (
        SELECT  FINA_ORGN_DVSN
               ,DECODE(D.NO, 1, FINA_ORGN_CODE
                           , 2, '0'||FINA_ORGN_CODE
                           , 3, FINA_ORGN_NAME) FINA_ORGN_CODE
               ,FINA_ORGN_NAME
          FROM  TB_UVFNA001 A
               ,(
                SELECT  LEVEL NO
                  FROM  DUAL
                CONNECT BY LEVEL <= 3) D
         WHERE  FINA_ORGN_CODE = '92'
        ) 
;

COMMIT;

============================
110_NH투자증권_매핑변경

CREATE TABLE MAPCODE_FNNC_ORGN_CODE_20211115
AS
SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE
 WHERE  1=1 
 ;

SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE_20211115
 WHERE  1=1 
   AND  FNNC_ORGN_CODE IN ('247', '289')
 ;
 
 SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE
 WHERE  1=1 
--   AND  ASIS_FINA_ORGN_CODE = '66'
   AND  FNNC_ORGN_CODE = '366'
 ;
   AND  FNNC_ORGN_CODE IN ('247', '289')
 ;



SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE
 WHERE  1=1 
   AND  FNNC_ORGN_CODE IN ('247')
   AND  ASIS_FINA_ORGN_CODE_NM = '우리투자증권'
 ;


-- 변경 1.
UPDATE  MAPCODE_FNNC_ORGN_CODE
   SET  FNNC_ORGN_CODE_NM = 'NH(우리)투자증권'
       ,CHNG_DT = SYSDATE
 WHERE  1=1 
   AND  FNNC_ORGN_CODE IN ('247')
   AND  ASIS_FINA_ORGN_CODE_NM = '우리투자증권'
 ;
 
 
 SELECT  *
  FROM  MAPCODE_FNNC_ORGN_CODE
 WHERE  1=1 
   AND  FNNC_ORGN_CODE IN ('247')
   AND  ASIS_FINA_ORGN_CODE_NM <> '우리투자증권'
 ;
 
 
 -- 변경 2.
 UPDATE  MAPCODE_FNNC_ORGN_CODE
   SET  FNNC_ORGN_CODE = '289'
       ,CHNG_DT = SYSDATE
 WHERE  1=1 
   AND  FNNC_ORGN_CODE IN ('247')
   AND  ASIS_FINA_ORGN_CODE_NM <> '우리투자증권'
 ;
 
 COMMIT;
 
 
 SELECT *
   FROM  COMOWN.TBL_COMCMD0104@DL_PICR  
  WHERE  FNNC_ORGN_CODE = '099'
   ;
   
   
   ========================
   111_금융결제원_매핑추가
   
   SELECT *
  FROM  MAPCODE_FNNC_ORGN_CODE
 WHERE  ASIS_FINA_ORGN_CODE = '293'
;


INSERT INTO MAPCODE_FNNC_ORGN_CODE
 SELECT  FNNC_ORGN_DVSN_CODE ASIS_FINA_ORGN_DVSN
        ,DECODE(NO, 1, '99'
                  , 2, '099'
                  , 3, FNNC_ORGN_NM)  ASIS_FINA_ORGN_CODE 
        ,'은행'               ASIS_FINA_ORGN_DVSN_NM
        ,FNNC_ORGN_NM        ASIS_FINA_ORGN_CODE_NM
        ,FNNC_ORGN_DVSN_CODE FNNC_ORGN_DVSN_CODE
        ,FNNC_ORGN_CODE      FNNC_ORGN_CODE
        ,'은행'               FNNC_ORGN_DVSN_CODE_NM
        ,FNNC_ORGN_NM        FNNC_ORGN_CODE_NM
        ,SYSDATE             LOAD_DT
   FROM  COMOWN.TBL_COMCMD0104@DL_PICR  
        ,(SELECT LEVEL NO
           FROM  DUAL
         CONNECT  BY LEVEL <= 3)
  WHERE  FNNC_ORGN_CODE = '099'
 ;
 
 =========================
 MAPKEY_TBL_BACBCCPPCL_선수보험료마감_010_CREATE_OBJECT
 
 

/* 1. MAPKEY TABLE 생성 */
--ALTER TABLE MAPKEY_TBL_BACBCCPPCL RENAME TO MAPKEY_TBL_BACBCCPPCL_20201019;
--SELECT *
--  FROM  MAPKEY_TBL_BACBCCPPCL
--  ;
--
DROP TABLE MAPKEY_TBL_BACBCCPPCL PURGE;
--TRUNCATE TABLE MAPKEY_TBL_BACBCCPPCL;
CREATE TABLE MAPKEY_TBL_BACBCCPPCL
(
    ASIS_TAB                    VARCHAR2(50) NULL
   ,STDD_YM                     VARCHAR2(18) NOT NULL
   ,ASIS_POLY_NO                VARCHAR2(9) NOT NULL
   ,RECV_DLNG_SQNO              NUMBER(15) NOT NULL
   ,RECV_SEQ_NO                 NUMBER(3) NOT NULL
   ,STND_YYMM                   VARCHAR2(6)          --TOBE기준년월
   ,TOBE_POLY_NO                VARCHAR2(10)         --TOBE증권번호
--   ,PREM_DPST_SUID              NUMBER(19)           --TOBE보험료입금SUID
   ,SQNO                        NUMBER(10)           --TOBE보험료입금SUID
   ,CRET_DT                     DATE NULL
   ,CHNG_DT                     DATE NULL
   ,DML_FLAG                    VARCHAR2(10) NULL
   ,PRDC_KIND_CD1               VARCHAR2(30)         --보험료할인종류코드1
   ,DSCT_PREM_1                 NUMBER(12)           --할인보험료1
   ,PRDC_KIND_CD2               VARCHAR2(30)         --보험료할인종류코드2
   ,DSCT_PREM_2                 NUMBER(12)           --할인보험료2
   ,PRDC_KIND_CD3               VARCHAR2(30)         --보험료할인종류코드3
   ,DSCT_PREM_3                 NUMBER(12)           --할인보험료3
   ,PRDC_KIND_CD4               VARCHAR2(30)         --보험료할인종류코드4
   ,DSCT_PREM_4                 NUMBER(12)           --할인보험료4
   ,PRDC_KIND_CD5               VARCHAR2(30)         --보험료할인종류코드5
   ,DSCT_PREM_5                 NUMBER(12)           --할인보험료5
   ,LAST_CHMN_MPNO              VARCHAR2(24)         --최종변경자사번
   ,LAST_CHNG_DTTM              DATE                 --최종변경일시
   ,PGM_ID                      VARCHAR2(150)        --프로그램ID
)
NOLOGGING
;


--ALTER TABLE MAPKEY_TBL_BACBCCPPCL RENAME COLUMN PREM_DPST_SUID TO SQNO;
--ALTER TABLE MAPKEY_TBL_BACBCCPPCL MODIFY ( SQNO NUMBER(10));

COMMENT ON TABLE MAPKEY_TBL_BACBCCPPCL IS 'MAPKEY선수보험료마감';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.ASIS_TAB IS 'ASIS테이블명';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.STDD_YM IS 'ASIS기준년월';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.ASIS_POLY_NO IS 'ASIS증권번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.RECV_DLNG_SQNO IS 'ASIS입금처리일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.RECV_SEQ_NO IS 'ASIS입금일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.STND_YYMM IS 'TOBE기준년월';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.TOBE_POLY_NO IS 'TOBE증권번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.SQNO IS 'TOBE일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.CRET_DT IS '작업_생성일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.CHNG_DT IS '작업_변경일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.DML_FLAG IS '작업_Inser/Delete구분';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.PRDC_KIND_CD1 IS 'ASIS보험료할인종류코드1';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.DSCT_PREM_1 IS 'ASIS할인보험료1';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.PRDC_KIND_CD2 IS 'ASIS보험료할인종류코드2';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.DSCT_PREM_2 IS 'ASIS할인보험료2';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.PRDC_KIND_CD3 IS 'ASIS보험료할인종류코드3';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.DSCT_PREM_3 IS 'ASIS할인보험료3';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.PRDC_KIND_CD4 IS 'ASIS보험료할인종류코드4';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.DSCT_PREM_4 IS 'ASIS할인보험료4';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.PRDC_KIND_CD5 IS 'ASIS보험료할인종류코드5';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.DSCT_PREM_5 IS 'ASIS할인보험료5';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.LAST_CHMN_MPNO IS 'ASIS최종변경자사번';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.LAST_CHNG_DTTM IS 'ASIS최종변경일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCCPPCL.PGM_ID IS 'ASIS프로그램ID';


--------------------------------------------------------------------------------------------------------
/* 2. MAPKEY ERRORLOG 테이블 생성*/
DROP TABLE ERR$_MAPKEY_TBL_BACBCCPPCL PURGE;
EXEC DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => 'MAPKEY_TBL_BACBCCPPCL' , SKIP_UNSUPPORTED=> TRUE);

SELECT  *
  FROM  ERR$_MAPKEY_TBL_BACBCCPPCL
;

COMMENT ON TABLE MIG02.ERR$_MAPKEY_TBL_BACBCCPPCL IS 'DML Error Logging table for "MAPKEY_TBL_BACBCCPPCL"';
;


--------------------------------------------------------------------------------------------------------
/* 3. MAPKEY 프로시저 생성*/

SELECT FN_WHW_GET_PRC('MAPKEY_TBL_BACBCCPPCL')
FROM DUAL
;



================================
MAPKEY_TBL_BACBCCPPCL_선수보험료마감_020_Procedure(OLD)

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCCPPCL (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCCPPCL_선수보험료마감.sql
2. 원천 테이블(ASIS) : 
    ㄴTB_CPACHPPM	        선수보험료상세     :    113,534,180 (1억)
    L MAPKEY_TBL_BACPDWDPCT MAPKEY보험료입금  :  1,138 877,491 (11억)
3. 목적 테이블(TOBE) : 
    ㄴTBL_BACBCCPPCL 선수보험료마감
4. ASIS KEY : 
    ㄴTB_CPACHPPM  :STDD_YM	기준년월
                    POLY_NO	증권번호
                    RECV_DLNG_SQNO	입금처리일련번호
                    RECV_SEQ_NO	입금일련번호
                    
    ㄴ MAPKEY_TBL_BACPDWDPCT  : ASIS_TAB
                                ASIS_PK_COL1
                                ASIS_PK_COL2
                                ASIS_PK_COL3
                                ASIS_PK_COL4
                                ASIS_PK_COL5
               =>> [TB_ISRCVPRM	보험료입금]
                            POLY_NO      	증권번호
                            RECV_DLNG_SQNO	입금처리일련번호
                            RECV_SEQ_NO	    입금일련번호
                            
               =>> [TB_CPRCVPRC 보험료입금취소]
                            STDD_YM	기준년월
                            POLY_NO	증권번호
                            RECV_DLNG_SQNO	입금처리일련번호
                            RECV_SEQ_NO	입금일련번호
                            CNCL_SEQ_NO	취소일련번호
5. TOBE KEY : 
    ㄴTBL_BACBCCPPCL : STND_YYMM	기준년월
                    POLY_NO	증권번호
                    PREM_DPST_SUID	보험료입금SUID	
6. 생성일자 : 2021.02.02
7. 수정일자 : 
    2021.11.16 :  TOBE PK컬럼에서 보험료입금SUID 제외, SQNO로 변경
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCCPPCL';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCCPPCL')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCCPPCL')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';         
      EXECUTE IMMEDIATE 'ALTER SESSION SET workarea_size_policy=manual';      
      EXECUTE IMMEDIATE 'ALTER SESSION SET sort_area_size=52428800';      
      EXECUTE IMMEDIATE 'ALTER SESSION SET hash_area_size=524288000';                                                          
 
      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCCPPCL');
      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCCPPCL');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCCPPCL','N') ; 
      MIG_PRC_LOGGING_CHANGE('ERR$_MAPKEY_TBL_BACBCCPPCL','N') ;
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    
    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
    MERGE /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCCPPCL(MAPKEY선수보험료마감), 담당자:류나영 */ 
          /*+ APPEND PARALLEL(T 8) USE_HASH(A T) FULL(A) FULL(T)*/
     INTO  MAPKEY_TBL_BACBCCPPCL T
    USING  (
            SELECT  /*+ PARALLEL(A 8)  PARALLEL(M2 8)  NO_MERGE(A) LEADING(A) USE_HASH(A M2)  */ 
                    A.STDD_YM                         /* 2. ASIS기준년월 (Not Null)*/
                   ,A.POLY_NO   ASIS_POLY_NO          /* 3. ASIS증권번호 (Not Null)*/
                   ,A.RECV_DLNG_SQNO                  /* 4. ASIS입금처리일련번호 (Not Null)*/
                   ,A.RECV_SEQ_NO                     /* 5. ASIS입금일련번호 (Not Null)*/
                   ,A.STDD_YM  STND_YYMM              /* 6. TOBE기준년월 */
                   ,A.POLY_NO TOBE_POLY_NO            /* 7. TOBE증권번호 */
                   ,M2.PREM_DPST_SUID                  /* 8. TOBE보험료입금SUID */
--                    ,CRET_DT                         /* 9. 작업_생성일시 */
--                    ,CHNG_DT                         /* 10. 작업_변경일시 */
--                    ,DML_FLAG                        /* 11. 작업_Inser/Delete구분 */
                   ,A.PRDC_KIND_CD1                   /* 12. ASIS보험료할인종류코드1 */
                   ,A.DSCT_PREM_1                     /* 13. ASIS할인보험료1 */
                   ,A.PRDC_KIND_CD2                   /* 14. ASIS보험료할인종류코드2 */
                   ,A.DSCT_PREM_2                     /* 15. ASIS할인보험료2 */
                   ,A.PRDC_KIND_CD3                   /* 16. ASIS보험료할인종류코드3 */
                   ,A.DSCT_PREM_3                     /* 17. ASIS할인보험료3 */
                   ,A.PRDC_KIND_CD4                   /* 18. ASIS보험료할인종류코드4 */
                   ,A.DSCT_PREM_4                     /* 19. ASIS할인보험료4 */
                   ,A.PRDC_KIND_CD5                   /* 20. ASIS보험료할인종류코드5 */
                   ,A.DSCT_PREM_5                     /* 21. ASIS할인보험료5 */
                   ,A.LAST_CHMN_MPNO                  /* 22. ASIS최종변경자사번 */
                   ,A.LAST_CHNG_DTTM                  /* 23. ASIS최종변경일시 */
                   ,A.PGM_ID                          /* 24. ASIS프로그램ID */
                   ,'I' DML_FLAG
              FROM  (
                     SELECT  /*+ SWAP_JOIN_INPUTS(M) USE_HASH(A M) PARALLEL(M 8) PARALLEL(A 8) FULL(A) PQ_DISTRIBUTE(A HASH HASH) */
                             A.*
                       FROM  TB_CPACHPPM A
                           , MAPKEY_TBL_BACBCCPPCL M
                      WHERE  1=1
                       AND  A.VALD_DVSN_CODE = '1'
                       AND  A.STDD_YM = M.STDD_YM(+)
                       AND  A.POLY_NO = M.ASIS_POLY_NO(+)
                       AND  A.RECV_DLNG_SQNO = M.RECV_DLNG_SQNO(+)
                       AND  A.RECV_SEQ_NO = M.RECV_SEQ_NO(+)
                       AND  M.ASIS_POLY_NO IS NULL
                      ) A
                    ,MAPKEY_TBL_BACPDWDPCT M2
             WHERE  1=1
               AND  M2.ASIS_TAB = 'TB_ISRCVPRM'
               AND  A.POLY_NO = M2.ASIS_PK_COL1
               AND  A.RECV_DLNG_SQNO||'' = M2.ASIS_PK_COL2
               AND  A.RECV_SEQ_NO ||'' = M2.ASIS_PK_COL3
             UNION  ALL
            SELECT  /*+ SWAP_JOIN_INPUTS(M) USE_HASH(A M) PARALLEL(A 4) PARALLEL(M 4) FULL(A) PQ_DISTRIBUTE(A HASH HASH) */
                    M.STDD_YM                         /* 2. ASIS기준년월 (Not Null)*/
                   ,M.ASIS_POLY_NO                    /* 3. ASIS증권번호 (Not Null)*/
                   ,M.RECV_DLNG_SQNO                  /* 4. ASIS입금처리일련번호 (Not Null)*/
                   ,M.RECV_SEQ_NO                     /* 5. ASIS입금일련번호 (Not Null)*/
                   ,M.STDD_YM  STND_YYMM              /* 6. TOBE기준년월 */
                   ,M.TOBE_POLY_NO                    /* 7. TOBE증권번호 */
                   ,M.PREM_DPST_SUID                  /* 8. TOBE보험료입금SUID */
--                    ,CRET_DT                         /* 9. 작업_생성일시 */
--                    ,CHNG_DT                         /* 10. 작업_변경일시 */
--                    ,DML_FLAG                        /* 11. 작업_Inser/Delete구분 */
                   ,M.PRDC_KIND_CD1                   /* 12. ASIS보험료할인종류코드1 */
                   ,M.DSCT_PREM_1                     /* 13. ASIS할인보험료1 */
                   ,M.PRDC_KIND_CD2                   /* 14. ASIS보험료할인종류코드2 */
                   ,M.DSCT_PREM_2                     /* 15. ASIS할인보험료2 */
                   ,M.PRDC_KIND_CD3                   /* 16. ASIS보험료할인종류코드3 */
                   ,M.DSCT_PREM_3                     /* 17. ASIS할인보험료3 */
                   ,M.PRDC_KIND_CD4                   /* 18. ASIS보험료할인종류코드4 */
                   ,M.DSCT_PREM_4                     /* 19. ASIS할인보험료4 */
                   ,M.PRDC_KIND_CD5                   /* 20. ASIS보험료할인종류코드5 */
                   ,M.DSCT_PREM_5                     /* 21. ASIS할인보험료5 */
                   ,M.LAST_CHMN_MPNO                  /* 22. ASIS최종변경자사번 */
                   ,M.LAST_CHNG_DTTM                  /* 23. ASIS최종변경일시 */
                   ,M.PGM_ID                          /* 24. ASIS프로그램ID */
                   ,'D' DML_FLAG
              FROM  TB_CPACHPPM A
                   ,MAPKEY_TBL_BACBCCPPCL M
             WHERE  1=1
               AND  A.VALD_DVSN_CODE(+) = '1'
               AND  A.STDD_YM(+) = M.STDD_YM
               AND  A.POLY_NO(+) = M.ASIS_POLY_NO
               AND  A.RECV_DLNG_SQNO(+) = M.RECV_DLNG_SQNO
               AND  A.RECV_SEQ_NO(+) = M.RECV_SEQ_NO
               AND  A.POLY_NO IS NULL
            ) A
       ON  (    A.STDD_YM = T.STDD_YM
               AND  A.ASIS_POLY_NO = T.ASIS_POLY_NO
               AND  A.RECV_DLNG_SQNO = T.RECV_DLNG_SQNO
               AND  A.RECV_SEQ_NO = T.RECV_SEQ_NO
           )
     WHEN  MATCHED THEN
           UPDATE SET
              T.CHNG_DT = SYSDATE
             ,T.DML_FLAG = A.DML_FLAG
     WHEN  NOT MATCHED THEN 
           INSERT (T.ASIS_TAB ,  T.STDD_YM ,T.ASIS_POLY_NO ,T.RECV_DLNG_SQNO ,T.RECV_SEQ_NO ,T.STND_YYMM ,T.TOBE_POLY_NO ,T.PREM_DPST_SUID ,T.CRET_DT ,T.CHNG_DT ,T.DML_FLAG ,T.PRDC_KIND_CD1 ,T.DSCT_PREM_1 ,T.PRDC_KIND_CD2 ,T.DSCT_PREM_2 ,T.PRDC_KIND_CD3 ,T.DSCT_PREM_3 ,T.PRDC_KIND_CD4 ,T.DSCT_PREM_4 ,T.PRDC_KIND_CD5 ,T.DSCT_PREM_5 ,T.LAST_CHMN_MPNO ,T.LAST_CHNG_DTTM ,T.PGM_ID)
           VALUES ('TB_CPACHPPM',A.STDD_YM ,A.ASIS_POLY_NO ,A.RECV_DLNG_SQNO ,A.RECV_SEQ_NO ,A.STND_YYMM ,A.TOBE_POLY_NO ,A.PREM_DPST_SUID ,SYSDATE   ,NULL      ,A.DML_FLAG ,A.PRDC_KIND_CD1 ,A.DSCT_PREM_1 ,A.PRDC_KIND_CD2 ,A.DSCT_PREM_2 ,A.PRDC_KIND_CD3 ,A.DSCT_PREM_3 ,A.PRDC_KIND_CD4 ,A.DSCT_PREM_4 ,A.PRDC_KIND_CD5 ,A.DSCT_PREM_5 ,A.LAST_CHMN_MPNO ,A.LAST_CHNG_DTTM ,A.PGM_ID)
           LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCCPPCL  REJECT LIMIT 100
     ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCCPPCL;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCCPPCL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128'; 
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';		
    EXECUTE IMMEDIATE 'ALTER SESSION SET workarea_size_policy=auto';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET sort_area_size=65536';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET hash_area_size=131072';                                                    
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    COMMIT;  
    V_SQLERRM:=SQLERRM;
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
  --  MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCCPPCL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128'; 
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';		
    EXECUTE IMMEDIATE 'ALTER SESSION SET workarea_size_policy=auto';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET sort_area_size=65536';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET hash_area_size=131072';    
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


==============================
MAPKEY_TBL_BACBCCPPCL_선수보험료마감_020_Procedure

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCCPPCL (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCCPPCL_선수보험료마감.sql
2. 원천 테이블(ASIS) : 
    ㄴTB_CPACHPPM	        선수보험료상세     :    113,534,180 (1억)
    L MAPKEY_TBL_BACPDWDPCT MAPKEY보험료입금  :  1,138 877,491 (11억)
3. 목적 테이블(TOBE) : 
    ㄴTBL_BACBCCPPCL 선수보험료마감
4. ASIS KEY : 
    ㄴTB_CPACHPPM  :STDD_YM	기준년월
                    POLY_NO	증권번호
                    RECV_DLNG_SQNO	입금처리일련번호
                    RECV_SEQ_NO	입금일련번호
                    
    ㄴ MAPKEY_TBL_BACPDWDPCT  : ASIS_TAB
                                ASIS_PK_COL1
                                ASIS_PK_COL2
                                ASIS_PK_COL3
                                ASIS_PK_COL4
                                ASIS_PK_COL5
               =>> [TB_ISRCVPRM	보험료입금]
                            POLY_NO      	증권번호
                            RECV_DLNG_SQNO	입금처리일련번호
                            RECV_SEQ_NO	    입금일련번호
                            
               =>> [TB_CPRCVPRC 보험료입금취소]
                            STDD_YM	기준년월
                            POLY_NO	증권번호
                            RECV_DLNG_SQNO	입금처리일련번호
                            RECV_SEQ_NO	입금일련번호
                            CNCL_SEQ_NO	취소일련번호
5. TOBE KEY : 
    ㄴTBL_BACBCCPPCL : STND_YYMM	기준년월
                    POLY_NO	증권번호
                    PREM_DPST_SUID	보험료입금SUID	
6. 생성일자 : 2021.02.02
7. 수정일자 : 
    2021.11.16 :  TOBE PK컬럼에서 보험료입금SUID 제외, SQNO로 변경
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCCPPCL';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCCPPCL')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCCPPCL')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';         
      EXECUTE IMMEDIATE 'ALTER SESSION SET workarea_size_policy=manual';      
      EXECUTE IMMEDIATE 'ALTER SESSION SET sort_area_size=52428800';      
      EXECUTE IMMEDIATE 'ALTER SESSION SET hash_area_size=524288000';                                                          
 
      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCCPPCL');
      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCCPPCL');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCCPPCL','N') ; 
      MIG_PRC_LOGGING_CHANGE('ERR$_MAPKEY_TBL_BACBCCPPCL','N') ;
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    
    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
     INSERT /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCCPPCL(MAPKEY선수보험료마감), 담당자:류나영 */ 
          /*+ APPEND PARALLEL(T 8) */
     INTO  MAPKEY_TBL_BACBCCPPCL T 
     (
       ASIS_TAB                         --ASIS테이블명
      ,STDD_YM                          --ASIS기준년월
      ,ASIS_POLY_NO                     --ASIS증권번호
      ,RECV_DLNG_SQNO                   --ASIS입금처리일련번호
      ,RECV_SEQ_NO                      --ASIS입금일련번호
      ,STND_YYMM                        --TOBE기준년월
      ,TOBE_POLY_NO                     --TOBE증권번호
      ,SQNO                             --TOBE일련번호
      ,CRET_DT                          --작업_생성일시
      ,CHNG_DT                          --작업_변경일시
      ,DML_FLAG                         --작업_Inser/Delete구분
      ,PRDC_KIND_CD1                    --ASIS보험료할인종류코드1
      ,DSCT_PREM_1                      --ASIS할인보험료1
      ,PRDC_KIND_CD2                    --ASIS보험료할인종류코드2
      ,DSCT_PREM_2                      --ASIS할인보험료2
      ,PRDC_KIND_CD3                    --ASIS보험료할인종류코드3
      ,DSCT_PREM_3                      --ASIS할인보험료3
      ,PRDC_KIND_CD4                    --ASIS보험료할인종류코드4
      ,DSCT_PREM_4                      --ASIS할인보험료4
      ,PRDC_KIND_CD5                    --ASIS보험료할인종류코드5
      ,DSCT_PREM_5                      --ASIS할인보험료5
      ,LAST_CHMN_MPNO                   --ASIS최종변경자사번
      ,LAST_CHNG_DTTM                   --ASIS최종변경일시
      ,PGM_ID                           --ASIS프로그램ID
      )
     WITH W AS (
        SELECT  /*+ MATERIALIZE PARALLEL(A 8) */
                ROWNUM RNO
               ,A.STDD_YM
               ,A.POLY_NO
               ,A.RECV_DLNG_SQNO||'' RECV_DLNG_SQNO
               ,A.RECV_SEQ_NO||''    RECV_SEQ_NO
               ,A.LAST_CHMN_MPNO
               ,A.LAST_CHNG_DTTM
               ,A.PGM_ID
               ,A.PRDC_KIND_CD1                   /* 12. ASIS보험료할인종류코드1 */
               ,A.DSCT_PREM_1                     /* 13. ASIS할인보험료1 */
               ,A.PRDC_KIND_CD2                   /* 14. ASIS보험료할인종류코드2 */
               ,A.DSCT_PREM_2                     /* 15. ASIS할인보험료2 */
               ,A.PRDC_KIND_CD3                   /* 16. ASIS보험료할인종류코드3 */
               ,A.DSCT_PREM_3                     /* 17. ASIS할인보험료3 */
               ,A.PRDC_KIND_CD4                   /* 18. ASIS보험료할인종류코드4 */
               ,A.DSCT_PREM_4                     /* 19. ASIS할인보험료4 */
               ,A.PRDC_KIND_CD5                   /* 20. ASIS보험료할인종류코드5 */
               ,A.DSCT_PREM_5                     /* 21. ASIS할인보험료5 */
          FROM (
                SELECT  /*+ PARALLEL(A 8) FULL(A) */
                        A.STDD_YM
                       ,A.POLY_NO
                       ,A.RECV_DLNG_SQNO
                       ,A.RECV_SEQ_NO
                       ,A.PRDC_KIND_CD1                   /* 12. ASIS보험료할인종류코드1 */
                       ,A.DSCT_PREM_1                     /* 13. ASIS할인보험료1 */
                       ,A.PRDC_KIND_CD2                   /* 14. ASIS보험료할인종류코드2 */
                       ,A.DSCT_PREM_2                     /* 15. ASIS할인보험료2 */
                       ,A.PRDC_KIND_CD3                   /* 16. ASIS보험료할인종류코드3 */
                       ,A.DSCT_PREM_3                     /* 17. ASIS할인보험료3 */
                       ,A.PRDC_KIND_CD4                   /* 18. ASIS보험료할인종류코드4 */
                       ,A.DSCT_PREM_4                     /* 19. ASIS할인보험료4 */
                       ,A.PRDC_KIND_CD5                   /* 20. ASIS보험료할인종류코드5 */
                       ,A.DSCT_PREM_5                     /* 21. ASIS할인보험료5 */
                       ,A.LAST_CHMN_MPNO                  /* 22. ASIS최종변경자사번 */
                       ,A.LAST_CHNG_DTTM                  /* 23. ASIS최종변경일시 */
                       ,A.PGM_ID                          /* 24. ASIS프로그램ID */ 
                  FROM  TB_CPACHPPM A
                 WHERE  1=1
                   AND  A.VALD_DVSN_CODE = '1'
                 ORDER  BY A.STDD_YM
                       ,A.POLY_NO
                       ,A.RECV_DLNG_SQNO
                       ,A.RECV_SEQ_NO
                ) A 
         ) 
    SELECT  /*+ SWAP_JOIN_INPUTS(G)
                PARALLEL(8)
                USE_HASH(G A ) NO_MERGE(G) 
                */
           'TB_CPACHPPM'       ASIS_TAB       --ASIS테이블명
          ,A.STDD_YM           STDD_YM        --ASIS기준년월
          ,A.POLY_NO           ASIS_POLY_NO   --ASIS증권번호
          ,A.RECV_DLNG_SQNO    RECV_DLNG_SQNO --ASIS입금처리일련번호
          ,A.RECV_SEQ_NO       RECV_SEQ_NO    --ASIS입금일련번호
          ,A.STDD_YM           STND_YYMM      --TOBE기준년월
          ,A.POLY_NO           TOBE_POLY_NO   --TOBE증권번호
          ,A.RNO-G.MIN_NO+1    SQNO           --TOBE일련번호
          ,SYSDATE             CRET_DT        --작업_생성일시
          ,NULL                CHNG_DT        --작업_변경일시
          ,'I'                 DML_FLAG       --작업_Inser/Delete구분
          ,A.PRDC_KIND_CD1                    --ASIS보험료할인종류코드1
          ,A.DSCT_PREM_1                      --ASIS할인보험료1
          ,A.PRDC_KIND_CD2                    --ASIS보험료할인종류코드2
          ,A.DSCT_PREM_2                      --ASIS할인보험료2
          ,A.PRDC_KIND_CD3                    --ASIS보험료할인종류코드3
          ,A.DSCT_PREM_3                      --ASIS할인보험료3
          ,A.PRDC_KIND_CD4                    --ASIS보험료할인종류코드4
          ,A.DSCT_PREM_4                      --ASIS할인보험료4
          ,A.PRDC_KIND_CD5                    --ASIS보험료할인종류코드5
          ,A.DSCT_PREM_5                      --ASIS할인보험료5
          ,A.LAST_CHMN_MPNO                   --ASIS최종변경자사번
          ,A.LAST_CHNG_DTTM                   --ASIS최종변경일시
          ,A.PGM_ID                           --ASIS프로그램ID
      FROM  (
            SELECT  /*+ PARALLEL(G 8) */
                    STDD_YM
                   ,POLY_NO
                   ,MIN(RNO) MIN_NO
              FROM  W G
             GROUP  BY STDD_YM
                   ,POLY_NO   
            ) G
           ,W A         
     WHERE  G.STDD_YM = A.STDD_YM
       AND  G.POLY_NO = A.POLY_NO
     LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCCPPCL  REJECT LIMIT 100
     ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCCPPCL;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCCPPCL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128'; 
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';		
    EXECUTE IMMEDIATE 'ALTER SESSION SET workarea_size_policy=auto';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET sort_area_size=65536';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET hash_area_size=131072';                                                    
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    COMMIT;  
    V_SQLERRM:=SQLERRM;
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
  --  MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCCPPCL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128'; 
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';		
    EXECUTE IMMEDIATE 'ALTER SESSION SET workarea_size_policy=auto';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET sort_area_size=65536';      
    EXECUTE IMMEDIATE 'ALTER SESSION SET hash_area_size=131072';    
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


======================================
MAPKEY_TBL_BACBCCPPCL_선수보험료마감_031_중복검증

SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCCPPCL_선수보험료마감_중복검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'중복검증'                                          AS VRFC_GBN
       ,'MAPKEY선수보험료마감 테이블 중복검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCCPPCL'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,NULL                                              ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  COUNT(TOBE_VAL)          AS TOBE_VAL
          FROM  (
                /* TOBE KEY 중복여부 */
                SELECT  /*+ FULL(A) PARALLEL(8) */
                                D.NO
                               ,CASE WHEN D.NO = 1 THEN A.STND_YYMM||'^'||A.TOBE_POLY_NO||'^'||A.SQNO
                                     WHEN D.NO = 2 THEN A.STDD_YM||'^'|| A.ASIS_POLY_NO||'^'|| A.RECV_DLNG_SQNO||'^'|| A.RECV_SEQ_NO
                                     END     KEY_VAL
                               ,COUNT(1)                          AS TOBE_VAL
                          FROM  MAPKEY_TBL_BACBCCPPCL A  
                              ,(SELECT  LEVEL NO
                                  FROM  DUAL
                               CONNECT  BY LEVEL <= 2) D
                        GROUP  BY  D.NO
                               ,CASE WHEN D.NO = 1 THEN A.STND_YYMM||'^'||A.TOBE_POLY_NO||'^'||A.SQNO
                                     WHEN D.NO = 2 THEN A.STDD_YM||'^'|| A.ASIS_POLY_NO||'^'|| A.RECV_DLNG_SQNO||'^'|| A.RECV_SEQ_NO
                                     END   
                        HAVING COUNT(1) > 1        
                ) A 
        ) A
;




===================================
MAPKEY_TBL_BACBCCPPCL_선수보험료마감_032_집합검증
SELECT  /* 프로그램ID:MAPKEY_TBL_BACPDWRTRN_선수보험료마감_집합검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'집합검증'                                          AS VRFC_GBN
       ,'MAPKEY선수보험료마감 테이블 집합검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCCPPCL'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,A.ASIS_VAL                                           ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
       SELECT  /*+ NO_MERGE(A) */
               SUM(A.ASIS_VAL)                       AS ASIS_VAL
              ,SUM(A.TOBE_VAL)                        TOBE_VAL   
         FROM  (
			   SELECT  /*+ FULL(A) PARALLEL(4) */
                       COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  TB_CPACHPPM A
                WHERE  VALD_DVSN_CODE = '1'
                UNION ALL   
			   SELECT  /*+ FULL(A) PARALLEL(4)   */
					   NULL                   AS ASIS_VAL
					  ,COUNT(1)               AS TOBE_VAL
				 FROM  MAPKEY_TBL_BACBCCPPCL A
                WHERE  1=1
                  AND  DML_FLAG IN ('I') 
			  ) A 
        ) A
;


==================================
MAPKEY_TBL_BACBCDDPPM_입금업무처리_010_Create_Object

--
--SELECT *
--  FROM  MAPKEY_TBL_BACBCDDPPM
-- ;
--
ALTER TABLE MAPKEY_TBL_BACBCDDPPM RENAME TO MAPKEY_TBL_BACBCDDPPM_OLD;

--MAPKEY_TBL_BACBCDDPPM
--  /* 1. MAPKEY TABLE 생성 */
-- DROP  TABLE MAPKEY_TBL_BACBCDDPPM PURGE;
 ;
 CREATE TABLE MAPKEY_TBL_BACBCDDPPM 
 (
    ASIS_TAB                   VARCHAR2(50)    /* ASIS테이블명 */
  , ASIS_PK_COL1               VARCHAR2(50)
  , ASIS_PK_COL2               VARCHAR2(50)
  , ASIS_PK_COL3               VARCHAR2(50)
  , ASIS_PK_COL4               VARCHAR2(50)
  , ASIS_PK_COL5               VARCHAR2(50)
   ,DPST_BSWR_PRCS_SUID     NUMBER(19)   /* TOBE입금업무처리SUID */
   ,CRET_DT DATE                    /* 작업_생성일시 */
   ,CHNG_DT DATE                    /* 작업_변경일시 */
   ,DML_FLAG VARCHAR2(10)           /* 작업_Insert/Delete구분 */
 )
 NOLOGGING
 ;


SELECT  *
  FROM  MAPKEY_TBL_BACBCDDPPM
  ;
-- 
-- COMMENT ON TABLE MAPKEY_TBL_BACBCDDPPM IS 'MAPKEY입금업무처리';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCDDPPM.ASIS_TAB IS 'ASIS테이블명';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCDDPPM.CHRG_DLNG_SQNO IS 'ASIS요금처리일련번호';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCDDPPM.DPST_BSWR_PRCS_SUID IS 'TOBE입금업무처리SUID';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCDDPPM.CRET_DT IS '작업_생성일시';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCDDPPM.CHNG_DT IS '작업_변경일시';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCDDPPM.DML_FLAG IS '작업_Insert/Delete구분';
-- 

 
 /* 2. MAPKEY ERRORLOG 테이블 생성*/
DROP TABLE ERR$_MAPKEY_TBL_BACBCDDPPM PURGE;
EXEC DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => 'MAPKEY_TBL_BACBCDDPPM' , SKIP_UNSUPPORTED=> TRUE);

SELECT  *
  FROM  ERR$_MAPKEY_TBL_BACBCDDPPM
;

SELECT  *
  FROM  MAPKEY_TBL_BACBCDDPPM
;

EXECUTE MIG_PRC_MAPKEY_TBL_BACBCDDPPM(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)

========================
MAPKEY_TBL_BACBCDDPPM_입금업무처리_020_Procedure


CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCDDPPM (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCDDPPM_입금업무처리.sql
2. 원천 테이블(ASIS) : 
     ㄴ TB_CPPRCMAS	입금업무처리메인 :     8,329
     ㄴ TB_CPRQTPDC  보험료할인신청  :    35,374
     ㄴ TB_CPVIA005  정기가상계좌신청 :    39,551
     ㄴ TB_CPRETPRM  보험료반환     : 2,910,332
3. 목적 테이블(TOBE) : 
     ㄴ MAPKEY_TBL_BACBCDDPPM
     ㄴ TBL_BACBCDDPPM 입금업무처리
4. ASIS KEY : 
    ㄴ TB_CPPRCMAS  : CHRG_DLNG_SQNO IS 요금처리일련번호
    ㄴ TB_CPRQTPDC  : POLY_NO	증권번호
                     PREM_DSCT_KDCD	보험료할인종류코드
                     HIST_NO	이력번호
    ㄴ TB_CPVIA005  : CUST_ID	고객ID
                    ADMN_NO	관리번호
                    ADMN_NO_DVSN	관리번호구분
                    SEQ_NO	일련번호               
    ㄴ TB_CPRETPRM  ADMN_NO_DVSN	관리번호구분
                    ADMN_NO	관리번호
                    RETN_SEQ_NO	반환일련번호
    
5. TOBE KEY : 
    ㄴ MAPKEY_TBL_BACBCDDPPM :  CHRG_DLNG_SQNO
    ㄴ TBL_BACBCDDPPM : DPST_BSWR_PRCS_SUID  입금업무처리SUID
6. 생성일자 : 2020.11.02
7. 수정일자 : 
     - 2021.10.22 : 다수테이블 수용 구조로 변경
           
8. 개발 특이사항
    
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCDDPPM';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCDDPPM')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCDDPPM')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
         /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCDDPPM');
      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCDDPPM');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCDDPPM','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    /* 1. SUID MAX값 */
--    SELECT 
--            NVL(MAX(DPST_BSWR_PRCS_SUID), 100000000000)
--     INTO  V_MAX_ID            
--     FROM  MAPKEY_TBL_BACBCDDPPM A 
--     ;
    
    /* 2. 신규 'I', 삭제건 'D' 표시 */
     INSERT /*+ APPEND PARALLEL(T 4)  */ INTO MAPKEY_TBL_BACBCDDPPM T
     (
       ASIS_TAB                         --
      ,ASIS_PK_COL1                     --
      ,ASIS_PK_COL2                     --
      ,ASIS_PK_COL3                     --
      ,ASIS_PK_COL4                     --
      ,ASIS_PK_COL5                     --
      ,DPST_BSWR_PRCS_SUID              --
      ,CRET_DT                          --
      ,CHNG_DT                          --
      ,DML_FLAG                         --
     )
     SELECT  'TB_CPPRCMAS' ASIS_TAB
            , CHRG_DLNG_SQNO||'' ASIS_PK_COL1
            , '999' ASIS_PK_COL2
            , '999' ASIS_PK_COL3
            , '999' ASIS_PK_COL4
            , '999' ASIS_PK_COL5
            , DPST_BSWR_PRCS_SUID
            , SYSDATE  CRET_DT
            , NULL     CHNG_DT
            , 'I'      DML_FLAG
       FROM  (
              SELECT  /*+  FULL(A) NO_MERGE(A)    */
                     CHRG_DLNG_SQNO
                    ,ROWNUM+ 110000000000  DPST_BSWR_PRCS_SUID
              FROM   TB_CPPRCMAS A
             WHERE   1=1
               AND   A.CHRG_DLNG_STCD = '02' 
                     ORDER  BY A.CHRG_DLNG_SQNO
              )
--       UNION  ALL
--      SELECT  'TB_CPRQTPDC'    ASIS_TAB
--               ,POLY_NO          ASIS_PK_COL1   --증권번호
--               ,PREM_DSCT_KDCD   ASIS_PK_COL2   --보험료할인종류코드
--               ,HIST_NO||''      ASIS_PK_COL3   --이력번호
--               ,'999'            ASIS_PK_COL4   --이력번호
--               ,'999'            ASIS_PK_COL5   --이력번호
--               ,ROW_NUMBER() OVER (ORDER BY POLY_NO, PREM_DSCT_KDCD ) + 120000000000 A
--               ,SYSDATE
--               ,NULL
--               ,'I'
--          FROM  (
--                SELECT  COUNT(1) OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD) CNT
--                       ,DENSE_RANK() OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD ORDER  BY HIST_NO ) SEQ
--                       ,A.*
--                  FROM  TB_CPRQTPDC A
--                 WHERE  1=1
--                   AND  VALD_DVSN_CODE = '1'
--                 )
--         WHERE CNT = SEQ       /* 마지막 */
--           AND  CNCL_DATE IS NULL  /* 취소 아닌건 */
--           AND  DEL_YN = 'N'    /* 유효한 건 */
      LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCDDPPM  REJECT LIMIT 100
      ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
--    DBMS_OUTPUT.PUT_LINE ( V_ROW_CNT) ;                                                                                                                         
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCDDPPM;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCDDPPM','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             
    V_SQLERRM := SQLERRM;                                                                                                                      
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCDDPPM','Y') ;                                                                   
--    DBMS_OUTPUT.PUT_LINE ( SQLERRM||CHR(13)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE ) ;                                                                                                                        
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


=====================================
MAPKEY_TBL_BACBCDDPPM_입금업무처리_031_중복검증
SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCDDPPM_입금업무처리_중복검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'중복검증'                                          AS VRFC_GBN
       ,'MAPKEY입금업무처리 테이블 중복검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCDDPPM'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,NULL                                              ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  COUNT(TOBE_VAL)          AS TOBE_VAL
          FROM  (
                /* TOBE KEY 중복여부 */
                SELECT  /*+ FULL(A) */
                                D.NO
                               ,CASE WHEN D.NO = 1 THEN A.ASIS_TAB||':'||A.ASIS_PK_COL1||':'||A.ASIS_PK_COL2
                                                     ||':'||A.ASIS_PK_COL3||':'||A.ASIS_PK_COL4||':'||A.ASIS_PK_COL5
                                     WHEN D.NO = 2 THEN A.DPST_BSWR_PRCS_SUID||''
                                     END     KEY_VAL
                               ,COUNT(1)                          AS TOBE_VAL
                          FROM  MAPKEY_TBL_BACBCDDPPM A  
                              ,(SELECT  LEVEL NO
                                  FROM  DUAL
                               CONNECT  BY LEVEL <= 2) D
                        GROUP  BY  D.NO
                               ,CASE WHEN D.NO = 1 THEN A.ASIS_TAB||':'||A.ASIS_PK_COL1||':'||A.ASIS_PK_COL2
                                                     ||':'||A.ASIS_PK_COL3||':'||A.ASIS_PK_COL4||':'||A.ASIS_PK_COL5
                                     WHEN D.NO = 2 THEN A.DPST_BSWR_PRCS_SUID||''
                                     END    
                        HAVING COUNT(1) > 1        
                ) A 
        ) A
;


================================
MAPKEY_TBL_BACBCDDPPM_입금업무처리_032_집합검증
SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCDDPPM_입금업무처리_집합검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'집합검증'                                          AS VRFC_GBN
       ,'MAPKEY입금업무처리 테이블 집합검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCDDPPM'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,A.ASIS_VAL                                           ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
       SELECT  /*+ NO_MERGE(A) */
               SUM(A.ASIS_VAL)                       AS ASIS_VAL
              ,SUM(A.TOBE_VAL)                        TOBE_VAL   
         FROM  (
			   SELECT  COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  TB_CPPRCMAS A 
                WHERE  CHRG_DLNG_STCD = '02' 
                UNION  ALL
--               SELECT  COUNT(1) ASIS_VAL
--                      ,NULL     TOBE_VAL
--                 FROM  (
--                        SELECT  COUNT(1) OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD) CNT
--                               ,DENSE_RANK() OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD ORDER  BY HIST_NO ) SEQ
--                               ,A.*
--                          FROM  TB_CPRQTPDC A
--                         WHERE  1=1
--                           AND  VALD_DVSN_CODE = '1'
--                         )
--                WHERE  CNT = SEQ       /* 마지막 */
--                  AND  CNCL_DATE IS NULL  /* 취소 아닌건 */
--                  AND  DEL_YN = 'N'    /* 유효한 건 */
--                UNION  ALL   
			   SELECT  /*+ FULL(A) PARALLEL(A 4)  */
					   NULL                   AS ASIS_VAL
					  ,COUNT(1)               AS TOBE_VAL
				 FROM  MAPKEY_TBL_BACBCDDPPM A
                WHERE  1=1
                  AND  DML_FLAG IN ('I') 
			  ) A 
        ) A
;


============================
MAPKEY_TBL_BACBCDPRSM_입금업무진행상태_010_Create_Object
--

CREATE TABLE MAPKEY_TBL_BACBCDPRSM_20211130
NOLOGGING
PARALLEL 4
AS
SELECT  /*+ PARALLEL(A 4) */
        *
  FROM  MAPKEY_TBL_BACBCDPRSM A
 ;
--
--MAPKEY_TBL_BACBCDPRSM
--  /* 1. MAPKEY TABLE 생성 */
-- DROP  TABLE MAPKEY_TBL_BACBCDPRSM PURGE;

 CREATE TABLE MAPKEY_TBL_BACBCDPRSM (
    ASIS_TAB                   VARCHAR2(50)    /* ASIS테이블명 */
  , ASIS_PK_COL1               VARCHAR2(50)
  , ASIS_PK_COL2               VARCHAR2(50)
  , ASIS_PK_COL3               VARCHAR2(50)
  , ASIS_PK_COL4               VARCHAR2(50)
  , ASIS_PK_COL5               VARCHAR2(50)
   ,DPST_BSWR_PRGS_STTS_SUID     NUMBER(19)   /* TOBE입금업무진행상태SUID */
   ,CRET_DT DATE                    /* 작업_생성일시 */
   ,CHNG_DT DATE                    /* 작업_변경일시 */
   ,DML_FLAG VARCHAR2(10)           /* 작업_Insert/Delete구분 */
   ,RLTM_DPST_GROP_SUID        NUMBER(19) 
   ,DPST_RFRN_BSWR_DVSN_CODE  VARCHAR2(10) /* 입금참조업무구분코드 */
 )
 NOLOGGING
 ;

ALTER TABLE MAPKEY_TBL_BACBCDPRSM ADD (DPST_RFRN_BSWR_DVSN_CODE  VARCHAR2(10)  );

SELECT  *
  FROM  MAPKEY_TBL_BACBCDPRSM
  ;
 
 COMMENT ON TABLE MAPKEY_TBL_BACBCDPRSM IS 'MAPKEY입금업무진행상태';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCDPRSM.ASIS_TAB IS 'ASIS테이블명';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCDPRSM.CHRG_DLNG_SQNO IS 'ASIS요금처리일련번호';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCDPRSM.DPST_BSWR_PRGS_STTS_SUID IS 'TOBE입금업무진행상태SUID';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCDPRSM.CRET_DT IS '작업_생성일시';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCDPRSM.CHNG_DT IS '작업_변경일시';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCDPRSM.DML_FLAG IS '작업_Insert/Delete구분';
 

 
 /* 2. MAPKEY ERRORLOG 테이블 생성*/
DROP TABLE ERR$_MAPKEY_TBL_BACBCDPRSM PURGE;
EXEC DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => 'MAPKEY_TBL_BACBCDPRSM' , SKIP_UNSUPPORTED=> TRUE);

SELECT  *
  FROM  ERR$_MAPKEY_TBL_BACBCDPRSM
;

SELECT  *
  FROM  MAPKEY_TBL_BACBCDPRSM
;

EXECUTE MIG_PRC_MAPKEY_TBL_BACBCDPRSM(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)


===========================
MAPKEY_TBL_BACBCDPRSM_입금업무진행상태_020_Procedure_NEW
CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCDPRSM (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCDPRSM_입금업무진행상태.sql
2. 원천 테이블(ASIS) :  
     ㄴ TB_CPPRCMAS	입금업무처리메인 :     8,329  -- 1)
     ㄴ TB_CPRQTPDC  보험료할인신청  :    35,374  -- 2) 
     ㄴ 실시간입금그룹   
         ㄴTB_CPREQIMT 계속보험료즉시이체청구/이체 : 3-1)
         ㄴTB_CPVIA001 가상계좌신청정보         : 3-3)
         ㄴTB_CPRCTPBL 영수증발행             : 3-4)
     ㄴ TB_CPVIA005  정기가상계좌신청 :    39,551
          ㄴ TB_CPVIA006	정기가상계좌청구
     ㄴ TB_CPRETPRM  보험료반환     : 2,910,332
3. 목적 테이블(TOBE) : 
     ㄴ MAPKEY_TBL_BACBCDPRSM
     ㄴ TBL_BACBCDPRSM 입금업무진행상태
4. ASIS KEY : 
    ㄴ TB_CPPRCMAS  : CHRG_DLNG_SQNO IS 요금처리일련번호
    ㄴ TB_CPRQTPDC  : POLY_NO	증권번호
                     PREM_DSCT_KDCD	보험료할인종류코드
                     HIST_NO	이력번호
    ㄴ TB_CPREQIMT : DMND_DATE	청구일자
                    IMTR_DMND_SQNO	즉시이체청구일련번호
                    SEQ_NO	일련번호
    ㄴ TB_CPVIA001 : RQST_SEQ_NO	요청일련번호
    ㄴ TB_CPRCTPBL : RECP_NO	영수증번호
    ㄴ TB_CPVIA005  : CUST_ID	고객ID
                    ADMN_NO	관리번호
                    ADMN_NO_DVSN	관리번호구분
                    SEQ_NO	일련번호    
    ㄴ TB_CPVIA006 : CUST_ID 고객ID
                    ADMN_NO	관리번호
                    DMND_YM	청구년월
                    ADMN_NO_DVSN	관리번호구분
    ㄴ TB_CPRETPRM  ADMN_NO_DVSN	관리번호구분
                    ADMN_NO	관리번호
                    RETN_SEQ_NO	반환일련번호
    
5. TOBE KEY : 
    ㄴ MAPKEY_TBL_BACBCDPRSM :  CHRG_DLNG_SQNO
    ㄴ TBL_BACBCDPRSM : DPST_BSWR_PRGS_STTS_SUID IS  입금업무진행상태SUID
6. 생성일자 : 2020.11.02
7. 수정일자 : 
     - 2021.10.22 : 다수테이블 수용 구조로 변경
     - 2021.11.25 : 실시간입금그룹 대상 3개 테이블 추가
     - 2021.12.16 : 정기가상계좌 대상 추가
     - 2021.12.31 : 정기가상계좌 이행범위
            ㄴ 당월 청구상태의 건. (TB_CPVIA006과 조인하여 판단)
8. 개발 특이사항
    
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCDPRSM';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCDPRSM')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCDPRSM')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
         /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCDPRSM');
      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCDPRSM');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCDPRSM','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  

    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
    INSERT /*+ APPEND PARALLEL(T 4)  */
    INTO  MAPKEY_TBL_BACBCDPRSM T
    (  ASIS_TAB                         --
      ,ASIS_PK_COL1                     --
      ,ASIS_PK_COL2                     --
      ,ASIS_PK_COL3                     --
      ,ASIS_PK_COL4                     --
      ,ASIS_PK_COL5                     --
      ,DPST_BSWR_PRGS_STTS_SUID         --
      ,CRET_DT                          --
      ,CHNG_DT                          --
      ,DML_FLAG                         --
      ,RLTM_DPST_GROP_SUID
      ,DPST_RFRN_BSWR_DVSN_CODE  /* 입금참조업무구분코드 */
    )
     SELECT  'TB_CPPRCMAS' ASIS_TAB
            ,CHRG_DLNG_SQNO||'' ASIS_PK_COL1
            ,'999' ASIS_PK_COL2
            ,'999' ASIS_PK_COL3
            ,'999' ASIS_PK_COL4
            ,'999' ASIS_PK_COL5
            ,DPST_BSWR_PRGS_STTS_SUID
            ,SYSDATE  CRET_DT
            ,NULL     CHNG_DT
            ,'I'      DML_FLAG
            ,NULL      RLTM_DPST_GROP_SUID
--            ,'22001'   DPST_RFRN_BSWR_DVSN_CODE            /* 해외장기체류정산(22001) */ 
            ,CASE WHEN A.CHRG_BSNS_DVSN = '001' THEN '22001'
                  WHEN A.CHRG_BSNS_DVSN = '005' THEN '22003'
                  WHEN A.CHRG_BSNS_DVSN = '021' THEN '22002' 
                  WHEN A.CHRG_BSNS_DVSN = '023' THEN '22004'
                  WHEN A.CHRG_BSNS_DVSN = '015' THEN '30009' 
                  ELSE '@'||A.CHRG_BSNS_DVSN
                  END  DPST_RFRN_BSWR_DVSN_CODE
       FROM  (
              SELECT  /*+  FULL(A) NO_MERGE(A)    */
                     CHRG_DLNG_SQNO
                    ,CHRG_BSNS_DVSN
                    ,ROWNUM+ 110000000000  DPST_BSWR_PRGS_STTS_SUID
               FROM  TB_CPPRCMAS A
              WHERE   1=1
--               AND   A.CHRG_DLNG_STCD = '02' 
              ORDER  BY A.CHRG_DLNG_SQNO
              ) A
       UNION  ALL
      SELECT  'TB_CPRQTPDC'    ASIS_TAB
             ,POLY_NO          ASIS_PK_COL1   --증권번호
             ,PREM_DSCT_KDCD   ASIS_PK_COL2   --보험료할인종류코드
             ,HIST_NO||''      ASIS_PK_COL3   --이력번호
             ,'999'            ASIS_PK_COL4   --이력번호
             ,'999'            ASIS_PK_COL5   --이력번호
             ,ROW_NUMBER() OVER (ORDER BY POLY_NO, PREM_DSCT_KDCD ) + 120000000000 DPST_BSWR_PRGS_STTS_SUID
             ,SYSDATE
             ,NULL
             ,'I'
             ,NULL             RLTM_DPST_GROP_SUID
             ,'31001'          DPST_RFRN_BSWR_DVSN_CODE     /* 보험료할인신청(31001) */ 
        FROM  (
              SELECT  COUNT(1) OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD) CNT
                     ,DENSE_RANK() OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD ORDER  BY HIST_NO ) SEQ
                     ,A.*
                FROM  TB_CPRQTPDC A
               WHERE  1=1
                 AND  VALD_DVSN_CODE = '1'
               )
        WHERE  CNT = SEQ       /* 마지막 */
          AND  CNCL_DATE IS NULL  /* 취소 아닌건 */
          AND  DEL_YN = 'N'    /* 유효한 건 */
        UNION  ALL
       SELECT  /*+ PARALLEL(A 4) */
               ASIS_TAB
              ,ASIS_PK_COL1
              ,ASIS_PK_COL2
              ,ASIS_PK_COL3
              ,ASIS_PK_COL4
              ,'999' ASIS_PK_COL5
              ,DPST_BSWR_PRGS_STTS_SUID
              ,SYSDATE   CRET_DT
              ,NULL      CHNG_DT
              ,'I'       DML_FLAG
              ,RLTM_DPST_GROP_SUID
              ,CASE WHEN ASIS_TAB = 'TB_CPREQIMT' THEN '20001'  -- 즉시
                    WHEN ASIS_TAB = 'TB_CPVIA001' THEN '20002'  -- 가상
                    WHEN ASIS_TAB = 'TB_CPRCTPBL' THEN '20003'  -- 영수증  
                    END  DPST_RFRN_BSWR_DVSN_CODE    /* 입금참조업무구분코드 즉시이체입금(20001), 가상계좌입금(20002), 현금직접납입(20003) */ 
         FROM  MAPKEY_TBL_BACPDWDPRG A
        UNION  ALL
       SELECT  'TB_CPVIA005'        ASIS_TAB
              ,A.CUST_ID            ASIS_PK_COL1
              ,A.ADMN_NO            ASIS_PK_COL2
              ,A.ADMN_NO_DVSN       ASIS_PK_COL3
              ,B.SEQ_NO||''         ASIS_PK_COL4
              ,'999'                ASIS_PK_COL5
              ,ROWNUM+ 140000000000 DPST_BSWR_PRGS_STTS_SUID 
              ,SYSDATE              CRET_DT
              ,NULL                 CHNG_DT
              ,'I'                  DML_FLAG
              ,NULL                 RLTM_DPST_GROP_SUID
              ,'30008'              DPST_RFRN_BSWR_DVSN_CODE    /* 정기가상계좌신청(30008) */ 
          FROM  TB_CPVIA006 A    /* 정기가상계좌청구 */ 
               ,TB_CPVIA005 B    /* 정기가상계좌신청 */ 
        --       ,MIG_SET_PLCY_NO P
         WHERE  1=1
           AND  A.DMND_YM = TO_CHAR(SYSDATE, 'YYYYMM') -- 당월 
           AND  A.DMND_DLNG_STCD = '01'                /* 청구처리상태코드 : 청구(01), 입금(02), 해지(03), 감소(04), 삭제(99) */
           AND  B.STRT_DATE(+) < B.END_DATE(+)         -- 당일취소 제외
           AND  NVL(SUBSTR(B.CNCL_DATE(+), 1, 6), '999912') > A.DMND_YM   --취소상태 아닌 건 
           AND  A.DMND_YM BETWEEN SUBSTR(B.STRT_DATE(+), 1, 6) AND SUBSTR(B.END_DATE(+), 1, 6) 
           AND  A.CUST_ID = B.CUST_ID(+)
           AND  A.ADMN_NO = B.ADMN_NO(+)
           AND  A.ADMN_NO_DVSN = B.ADMN_NO_DVSN(+)
        UNION  ALL
       SELECT  /*+ PARALLEL(A 4) PARALLEL(P 4) USE_HASH(A P) */
                'TB_CPRETPRM'       ASIS_TAB
               ,A.ADMN_NO_DVSN	    ASIS_PK_COL1  /* 관리번호구분 */
               ,A.ADMN_NO	        ASIS_PK_COL2  /* 관리번호 */
               ,A.RETN_SEQ_NO||'' 	ASIS_PK_COL3  /* 반환일련번호 */
              ,'999'                ASIS_PK_COL4
              ,'999'                ASIS_PK_COL5
              ,ROWNUM+ 150000000000 DPST_BSWR_PRGS_STTS_SUID 
              ,SYSDATE              CRET_DT
              ,NULL                 CHNG_DT
              ,'I'                  DML_FLAG
              ,NULL                 RLTM_DPST_GROP_SUID
              ,'21001'              DPST_RFRN_BSWR_DVSN_CODE     /*  보험료반환(21001) */
          FROM  TB_CPRETPRM A
               ,MIG_SET_PLCY_NO P
         WHERE  1=1
           AND  A.RETN_DLNG_DVSN = '1'    /*  반환처리구분코드 : 반환대상(1), 반환오류(2), 반환완료(3) */
           AND  DECODE(TRIM(A.ADMN_NO_DVSN), '1', A.ADMN_NO) = P.POLY_NO(+)
           AND  DECODE(TRIM(A.ADMN_NO_DVSN), '1', '1') = P.VALD_DVSN_CODE(+)
           AND  (TRIM(A.ADMN_NO_DVSN) <>  '1'
               OR (TRIM(A.ADMN_NO_DVSN) = '1' AND P.POLY_NO IS NOT NULL)
                )
           LOG  ERRORS INTO ERR$_MAPKEY_TBL_BACBCDPRSM  REJECT LIMIT 100
       ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
--    DBMS_OUTPUT.PUT_LINE ( V_ROW_CNT) ;                                                                                                                         
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCDPRSM;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCDPRSM','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;                                                                                                             
    V_SQLERRM := SQLERRM;                                                                                                                      
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCDPRSM','Y') ;                                                                   
--    DBMS_OUTPUT.PUT_LINE ( SQLERRM||CHR(13)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE ) ;                                                                                                                        
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


==============================
MAPKEY_TBL_BACBCDPRSM_입금업무진행상태_031_중복검증

SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCDPRSM_입금업무진행상태_중복검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'중복검증'                                          AS VRFC_GBN
       ,'MAPKEY입금업무진행상태 테이블 중복검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCDPRSM'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,NULL                                              ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  /*+ PARALLEL(4) */
                COUNT(TOBE_VAL)          AS TOBE_VAL
          FROM  (
                /* TOBE KEY 중복여부 */
                SELECT  /*+ FULL(A) PARALLEL(4) */
                                D.NO
                               ,CASE WHEN D.NO = 1 THEN A.ASIS_TAB||':'||A.ASIS_PK_COL1||':'||A.ASIS_PK_COL2
                                                     ||':'||A.ASIS_PK_COL3||':'||A.ASIS_PK_COL4||':'||A.ASIS_PK_COL5
                                     WHEN D.NO = 2 THEN A.DPST_BSWR_PRGS_STTS_SUID||''
                                     END     KEY_VAL
                               ,COUNT(1)                          AS TOBE_VAL
                          FROM  MAPKEY_TBL_BACBCDPRSM A  
                              ,(SELECT  LEVEL NO
                                  FROM  DUAL
                               CONNECT  BY LEVEL <= 2) D
--                         WHERE  ASIS_TAB NOT IN ('TB_CPRCTPBL') 
                        GROUP  BY  D.NO
                               ,CASE WHEN D.NO = 1 THEN A.ASIS_TAB||':'||A.ASIS_PK_COL1||':'||A.ASIS_PK_COL2
                                                     ||':'||A.ASIS_PK_COL3||':'||A.ASIS_PK_COL4||':'||A.ASIS_PK_COL5
                                     WHEN D.NO = 2 THEN A.DPST_BSWR_PRGS_STTS_SUID||''
                                     END   
                        HAVING COUNT(1) > 1       
                        
                ) A 
        ) A
;

SELECT *
  FROM  MAPKEY_TBL_BACBCDPRSM A
 WHERE  A.ASIS_TAB||':'||A.ASIS_PK_COL1||':'||A.ASIS_PK_COL2||':'||A.ASIS_PK_COL3||':'||A.ASIS_PK_COL4||':'||A.ASIS_PK_COL5
           = 'TB_CPREQIMT:20190823:2685:2:999:999'
           ;
          
SELECT  /*+ PARALLEL(4) */
        *
  FROM  MAPKEY_TBL_BACBCDPRSM A
 WHERE    CRET_DT  >= TRUNC(SYSDATE) 
           ;
           
DELETE  /*+ PARALLEL(4) */
        MAPKEY_TBL_BACBCDPRSM A
 WHERE    CRET_DT  >= TRUNC(SYSDATE) 
;

COMMIT;


===============================
MAPKEY_TBL_BACBCDPRSM_입금업무진행상태_032_집합검증
SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCDPRSM_입금업무진행상태_집합검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'집합검증'                                          AS VRFC_GBN
       ,'MAPKEY입금업무진행상태 테이블 집합검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCDPRSM'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,A.ASIS_VAL                                           ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  /*+ NO_MERGE(A) */
               SUM(A.ASIS_VAL)                       AS ASIS_VAL
              ,SUM(A.TOBE_VAL)                        TOBE_VAL   
         FROM  (
			   SELECT  COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  TB_CPPRCMAS A 
                WHERE  1=1
                UNION  ALL
               SELECT  COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  (
                        SELECT  COUNT(1) OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD) CNT
                               ,DENSE_RANK() OVER (PARTITION BY POLY_NO, PREM_DSCT_KDCD ORDER  BY HIST_NO ) SEQ
                               ,A.*
                          FROM  TB_CPRQTPDC A
                         WHERE  1=1
                           AND  VALD_DVSN_CODE = '1'
                         )
                WHERE  CNT = SEQ       /* 마지막 */
                  AND  CNCL_DATE IS NULL  /* 취소 아닌건 */
                  AND  DEL_YN = 'N'    /* 유효한 건 */
                UNION  ALL
               SELECT  /*+ PARALLEL(A 4) */
                        COUNT(DISTINCT DMND_DATE||'^'||IMTR_DMND_SQNO||'^'||SEQ_NO) ASIS_VAL
                       ,NULL     TOBE_VAL
                  FROM  MIG_MAPKEY_TBL_BACPDWDPRT_011 A
                 WHERE  A.RLTM_DPST_GROP_SUID IS NOT NULL
                   AND  ADMN_NO IS NOT NULL
                   AND  RLTM_SEQ = 1       --> 여러건의 입금이 매핑되는 경우, 1건
                 UNION  ALL
                SELECT  /*+ PARALLEL(A 4) */
                        COUNT(DISTINCT RQST_SEQ_NO) ASIS_VAL
                       ,NULL     TOBE_VAL
                  FROM  MIG_MAPKEY_TBL_BACPDWDPRT_013 A
                 WHERE  RLTM_DPST_GROP_SUID IS NOT NULL
                   AND  ADMN_NO IS NOT NULL
                   AND  RLTM_SEQ = 1       --> 여러건의 입금이 매핑되는 경우, 1건
                 UNION  ALL
                SELECT  /*+ PARALLEL(A 4) */
                        COUNT(DISTINCT RECP_NO) ASIS_VAL
                       ,NULL     TOBE_VAL
                  FROM  MIG_MAPKEY_TBL_BACPDWDPRT_014 A
                 WHERE  1=1
                   AND  RLTM_DPST_GROP_SUID IS NOT NULL
                   AND  POLY_NO IS NOT NULL
                   AND  RLTM_SEQ = 1       --> 여러건의 입금이 매핑되는 경우, 1건
                 UNION  ALL 
                SELECT  COUNT(1) ASIS_VAL
                       ,NULL     TOBE_VAL
                  FROM  TB_CPVIA006 A    /* 정기가상계좌청구 */ 
                       ,TB_CPVIA005 B    /* 정기가상계좌신청 */ 
                 WHERE  1=1
                   AND  A.DMND_YM = TO_CHAR(SYSDATE, 'YYYYMM') -- 당월 
                   AND  A.DMND_DLNG_STCD = '01'                /* 청구처리상태코드 : 청구(01), 입금(02), 해지(03), 감소(04), 삭제(99) */
                   AND  B.STRT_DATE(+) < B.END_DATE(+)         -- 당일취소 제외
                   AND  NVL(SUBSTR(B.CNCL_DATE(+), 1, 6), '999912') > A.DMND_YM   --취소상태 아닌 건 
                   AND  A.DMND_YM BETWEEN SUBSTR(B.STRT_DATE(+), 1, 6) AND SUBSTR(B.END_DATE(+), 1, 6) 
                   AND  A.CUST_ID = B.CUST_ID(+)
                   AND  A.ADMN_NO = B.ADMN_NO(+)
                   AND  A.ADMN_NO_DVSN = B.ADMN_NO_DVSN(+)
                 UNION  ALL
                SELECT  /*+ PARALLEL(A 4) PARALLEL(P 4) USE_HASH(A P) */
                        COUNT(1) ASIS_VAL
                       ,NULL     TOBE_VAL
                  FROM  TB_CPRETPRM A                        
                       ,MIG_SET_PLCY_NO P
                 WHERE  1=1
                   AND  A.RETN_DLNG_DVSN = '1'    /*  반환처리구분코드 : 반환대상(1), 반환오류(2), 반환완료(3) */
                   AND  DECODE(TRIM(A.ADMN_NO_DVSN), '1', A.ADMN_NO) = P.POLY_NO(+)
                   AND  DECODE(TRIM(A.ADMN_NO_DVSN), '1', '1') = P.VALD_DVSN_CODE(+)
                   AND  (TRIM(A.ADMN_NO_DVSN) <>  '1'
                       OR (TRIM(A.ADMN_NO_DVSN) = '1' AND P.POLY_NO IS NOT NULL)
                        )
                 UNION  ALL
			    SELECT  /*+ FULL(A) PARALLEL(A 4)  */
			   		    NULL                   AS ASIS_VAL
					   ,COUNT(1)               AS TOBE_VAL
				  FROM  MAPKEY_TBL_BACBCDPRSM A
                 WHERE  1=1
                   AND  DML_FLAG IN ('I') 
			  ) A 
        ) A
;

==================================================
MAPKEY_TBL_BACBCNDLCU_개별공시대상고객_010_CREATE_OBJECT



/* 1. MAPKEY TABLE 생성 */

--DROP TABLE MAPKEY_TBL_BACBCNDLCU PURGE;

CREATE TABLE MAPKEY_TBL_BACBCNDLCU
(
    ASIS_TAB VARCHAR2(50) NULL
   ,POLY_NO                         VARCHAR2(27)         --ASIS증권번호
   ,WORK_YEAR                       VARCHAR2(12)         --ASIS작업년도
   ,WORK_DGRE                       VARCHAR2(3)          --ASIS작업차수
   ,INDV_DSLR_TRGT_SUID             NUMBER(19)           --TOBE개별공시대상SUID
   ,INDV_DSLR_CNTC_SQNO             NUMBER(10)           --TOBE개별공시계약일련번호
   ,CRET_DT                         DATE NULL
   ,CHNG_DT                         DATE NULL       
   ,DML_FLAG                        VARCHAR2(10) NULL  
   ,LAST_CHMN_MPNO                  VARCHAR2(24)         --ASIS최종변경자사번
   ,LAST_CHNG_DTTM                  DATE                 --ASIS최종변경일시 
   ,PGM_ID                          VARCHAR2(150)        --ASIS프로그램ID
   ,CUST_ID                         VARCHAR2(30)         --고객ID  
   ,REAL_CNTT_CNT                   NUMBER(15)
--   ,WORK_POLY_SEQ                   NUMBER(10) 
   ,CNTT_CNT                        NUMBER(7)            --계약건수
   ,CUST_DVDN_SUM                   NUMBER(15)           --고객배당금합계
   ,CUST_BFYY_DVDN                  NUMBER(15)           --고객전년도배당금
   ,CUST_CYER_DVDN                  NUMBER(15)           --고객당해년도배당금
   ,MAX_CNTT_CNT                        NUMBER(7)            --계약건수
   ,MAX_CUST_DVDN_SUM                   NUMBER(15)           --고객배당금합계
   ,MAX_CUST_BFYY_DVDN                  NUMBER(15)           --고객전년도배당금
   ,MAX_CUST_CYER_DVDN                  NUMBER(15)           --고객당해년도배당금
   ,WORK_DATE                       VARCHAR2(8)          --ASIS작업일자
   ,VALD_DVSN_CODE                  VARCHAR2(10)   
)
NOLOGGING
TABLESPACE TSD_MIG01
;

COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.ASIS_TAB IS 'ASIS테이블명';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.POLY_NO IS 'ASIS증권번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.WORK_YEAR IS 'ASIS작업년도';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.WORK_DGRE IS 'ASIS작업차수';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.INDV_DSLR_TRGT_SUID IS 'TOBE개별공시대상SUID';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.INDV_DSLR_CNTC_SQNO IS 'TOBE개별공시계약일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.CRET_DT IS '작업_생성일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.CHNG_DT IS '작업_변경일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.DML_FLAG IS '작업_Insert/Delete구분';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.LAST_CHMN_MPNO IS 'ASIS최종변경자사번';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.LAST_CHNG_DTTM IS 'ASIS최종변경일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.PGM_ID IS 'ASIS프로그램ID';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.CUST_ID IS '고객ID';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.REAL_CNTT_CNT IS '작업_작업년부/작업차수/고객ID내 증권번호수';
--COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.WORK_POLY_SEQ IS '작업_작업년부/작업차수/고객ID내 증권번호순번';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.CNTT_CNT IS 'ASIS계약건수';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.CUST_DVDN_SUM IS 'ASIS고객배당금합계';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.CUST_BFYY_DVDN IS 'ASIS고객전년도배당금';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.CUST_CYER_DVDN IS 'ASIS고객당해년도배당금';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.WORK_DATE IS 'ASIS작업일자';
COMMENT ON COLUMN MAPKEY_TBL_BACBCNDLCU.VALD_DVSN_CODE IS '';

--------------------------------------------------------------------------------------------------------
/* 2. MAPKEY ERRORLOG 테이블 생성*/
DROP TABLE ERR$_MAPKEY_TBL_BACBCNDLCU PURGE;
EXEC DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => 'MAPKEY_TBL_BACBCNDLCU' , SKIP_UNSUPPORTED=> TRUE);

SELECT  *
  FROM  ERR$_MAPKEY_TBL_BACBCNDLCU
;

COMMENT ON TABLE MIG02.ERR$_MAPKEY_TBL_BACBCNDLCU IS 'DML Error Logging table for "MAPKEY_TBL_BACBCNDLCU"';
;


--------------------------------------------------------------------------------------------------------
/* 3. MAPKEY 프로시저 생성*/

--SELECT FN_WHW_GET_PRC('MAPKEY_TBL_BACBCNDLCU')
--FROM DUAL
--;
--
--


========================================
MAPKEY_TBL_BACBCNDLCU_개별공시대상고객_020_Procedure

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCNDLCU (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCNDLCU_개별공시대상고객.sql
2. 원천 테이블(ASIS) : 
    ㄴ TB_CPRPTIDN	개별공시안내장 : 111,115,188
3. 목적 테이블(TOBE) : 
    MAPKEY_TBL_BACBCNDLCU (MAPKEY개별공시대상고객)
4. ASIS KEY : 
    TB_CPRPTIDN  :  POLY_NO	증권번호
                    WORK_YEAR	작업년도
                    WORK_DGRE	작업차수
5. TOBE KEY : 
    TBL_BACBCNDLCU : INDV_DSLR_TRGT_SUID	개별공시대상SUID
                        ㄴ CUST_ID(고객ID),WORK_YEAR(작업년도),WORK_DGRE(작업차수), WORK_DATE  기준 채번                     
                     
6. 생성일자 : 2021.02.10
7. 수정일자 :     
※ 특이사항
   - ASIS TB_CPRPTIDN(개별공시안내장) 증권번호 전체이행
   - 아래 컬럼은 CUST_ID(고객ID),WORK_YEAR(작업년도),WORK_DGRE(작업차수) 레벨 관리정보를 반정규화한 속성
     => 동일한 CUST_ID(고객ID),WORK_YEAR(작업년도),WORK_DGRE(작업차수) 이면 아래의 컬럼값은 집계된 값으로 모두 동일
     => 위 GROUP BY 조건에 WORK_DATE이 포함되어야 반정규화정보 일치
        CNTT_CNT	계약건수
        CUST_DVDN_SUM	고객배당금합계
        CUST_BFYY_DVDN	고객전년도배당금
        CUST_CYER_DVDN	고객당해년도배당금
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCNDLCU';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCNDLCU')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCNDLCU')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
--         /* 0. MAPKEY이지만 재생성 */
         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCNDLCU');
      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCNDLCU');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCNDLCU','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    /* 1. SUID MAX값 */

    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
    INSERT /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCNDLCU(MAPKEY개별공시대상고객), 담당자:류나영 */ 
           /*+ APPEND PARALLEL(T 4) */
     INTO  MAPKEY_TBL_BACBCNDLCU T 
     (
           ASIS_TAB                        /* 1. ASIS테이블명 */
          ,POLY_NO                         /* 2. ASIS증권번호 */
          ,WORK_YEAR                       /* 3. ASIS작업년도 */
          ,WORK_DGRE                       /* 4. ASIS작업차수 */
          ,INDV_DSLR_TRGT_SUID             /* 5. TOBE개별공시대상SUID */
          ,INDV_DSLR_CNTC_SQNO             /* 6. TOBE개별공시계약일련번호 */
          ,CRET_DT                         /* 7. 작업_생성일시 */
          ,CHNG_DT                         /* 8. 작업_변경일시 */
          ,DML_FLAG                        /* 9. 작업_Insert/Delete구분 */
          ,LAST_CHMN_MPNO                  /* 10. ASIS최종변경자사번 */
          ,LAST_CHNG_DTTM                  /* 11. ASIS최종변경일시 */
          ,PGM_ID                          /* 12. ASIS프로그램ID */
          ,CUST_ID                         /* 13. 고객ID */
          ,REAL_CNTT_CNT                   /* 14. 작업_작업년부/작업차수/고객ID내 증권번호수 */
          ,CNTT_CNT                        /* 15. ASIS계약건수 */
          ,CUST_DVDN_SUM                   /* 16. ASIS고객배당금합계 */
          ,CUST_BFYY_DVDN                  /* 17. ASIS고객전년도배당금 */
          ,CUST_CYER_DVDN                  /* 18. ASIS고객당해년도배당금 */
          ,MAX_CNTT_CNT                    /* 19.  */
          ,MAX_CUST_DVDN_SUM               /* 20.  */
          ,MAX_CUST_BFYY_DVDN              /* 21.  */
          ,MAX_CUST_CYER_DVDN              /* 22.  */
          ,WORK_DATE                       /* 23. ASIS작업일자 */
          ,VALD_DVSN_CODE                  /* 24.  */
     )
     WITH W_G AS (
        SELECT  /*+ MATERIALIZE PARALLEL(4)  */
                ROWNUM+100000000000  INDV_DSLR_TRGT_SUID
               ,CUST_ID
               ,WORK_YEAR
               ,WORK_DGRE
               ,WORK_DATE
               ,CNT
               ,CNTT_CNT
               ,CUST_DVDN_SUM
               ,CUST_BFYY_DVDN
               ,CUST_CYER_DVDN
          FROM  (
                SELECT  /*+ FULL(A) PARALLEL(A 4) */
                        CUST_ID
                       ,WORK_YEAR
                       ,WORK_DGRE
                       ,WORK_DATE   --> 추가
                       ,COUNT(1)  CNT
                       ,MAX(CNTT_CNT) CNTT_CNT
                       ,MAX(CUST_DVDN_SUM) CUST_DVDN_SUM
                       ,MAX(CUST_BFYY_DVDN) CUST_BFYY_DVDN
                       ,MAX(CUST_CYER_DVDN) CUST_CYER_DVDN
                  FROM  TB_CPRPTIDN A
                 GROUP  BY CUST_ID
                       ,WORK_YEAR
                       ,WORK_DGRE
                       ,WORK_DATE   --> 추가
                 ) A
        ) 
        SELECT  /*+ LEADING(G) PARALLEL(G 4) PARALLEL(A 4) FULL(A) USE_HASH(A B) */
                'TB_CPRPTIDN' ASIS_TAB                        /* 1. ASIS테이블명 */
               ,A.POLY_NO                         /* 2. ASIS증권번호 */
               ,G.WORK_YEAR                       /* 3. ASIS작업년도 */
               ,G.WORK_DGRE                       /* 4. ASIS작업차수 */
               ,G.INDV_DSLR_TRGT_SUID             /* 5. TOBE개별공시대상SUID */
               ,DENSE_RANK() OVER(PARTITION BY G.INDV_DSLR_TRGT_SUID ORDER BY A.POLY_NO ) AS INDV_DSLR_CNTC_SQNO /* 6. TOBE개별공시계약일련번호 */
               ,SYSDATE CRET_DT                   /* 7. 작업_생성일시 */
               ,NULL CHNG_DT                      /* 8. 작업_변경일시 */
               ,'I' DML_FLAG                      /* 9. 작업_Insert/Delete구분 */
               ,A.LAST_CHMN_MPNO                  /* 12. ASIS최종변경자사번 */
               ,A.LAST_CHNG_DTTM                  /* 13. ASIS최종변경일시 */
               ,A.PGM_ID                          /* 14. ASIS프로그램ID */
               ,G.CUST_ID                         /* 10. 고객ID */
               ,G.CNT REAL_CNTT_CNT                   /* 11. 작업_작업년부/작업차수/고객ID내 증권번호수 */
               ,A.CNTT_CNT                        /* 15. ASIS계약건수 */
               ,A.CUST_DVDN_SUM                   /* 16. ASIS고객배당금합계 */
               ,A.CUST_BFYY_DVDN                  /* 17. ASIS고객전년도배당금 */
               ,A.CUST_CYER_DVDN                  /* 18. ASIS고객당해년도배당금 */
               ,G.CNTT_CNT            MAX_CNTT_CNT            
               ,G.CUST_DVDN_SUM       MAX_CUST_DVDN_SUM                  
               ,G.CUST_BFYY_DVDN      MAX_CUST_BFYY_DVDN                 
               ,G.CUST_CYER_DVDN      MAX_CUST_CYER_DVDN 
               ,A.WORK_DATE   
               ,A.VALD_DVSN_CODE                  
          FROM  W_G G
               ,TB_CPRPTIDN A
         WHERE  1=1
           AND  A.CUST_ID = G.CUST_ID
           AND  A.WORK_YEAR = G.WORK_YEAR
           AND  A.WORK_DGRE = G.WORK_DGRE
           AND  A.WORK_DATE = G.WORK_DATE
     LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCNDLCU  REJECT LIMIT UNLIMITED
     ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCNDLCU;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCNDLCU','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    COMMIT;  
    V_SQLERRM:=SQLERRM;
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
  --  MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCNDLCU','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


===============================
MAPKEY_TBL_BACBCNDLCU_개별공시대상고객_031_중복검증

SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCNDLCU_개별공시대상고객_중복검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'중복검증'                                          AS VRFC_GBN
       ,'MAPKEY개별공시대상고객 테이블 중복검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCNDLCU'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,NULL                                              ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  COUNT(TOBE_VAL)          AS TOBE_VAL
          FROM  (
                /* TOBE KEY 중복여부 */
                SELECT  /*+ FULL(A) PARALLEL(A 4) PARALLEL(D 4) */
                                D.NO
                               ,CASE WHEN D.NO = 1 THEN A.INDV_DSLR_TRGT_SUID||''
                                     WHEN D.NO = 2 THEN A.CUST_ID||'^'||A.WORK_YEAR||'^'||A.WORK_DGRE||'^'||WORK_DATE
                                     END     KEY_VAL
                               ,COUNT(1)                          AS TOBE_VAL
                          FROM  (SELECT  DISTINCT INDV_DSLR_TRGT_SUID
                                        ,CUST_ID
                                       ,WORK_YEAR
                                       ,WORK_DGRE
                                       ,WORK_DATE
                                   FROM  MAPKEY_TBL_BACBCNDLCU A
                                 ) A
                                ,(SELECT LEVEL NO FROM DUAL CONNECT BY LEVEL <= 2) D
                        GROUP  BY  D.NO
                               ,CASE WHEN D.NO = 1 THEN A.INDV_DSLR_TRGT_SUID||''
                                     WHEN D.NO = 2 THEN A.CUST_ID||'^'||A.WORK_YEAR||'^'||A.WORK_DGRE||'^'||WORK_DATE
                                     END  
                        HAVING COUNT(1) > 1        
                ) A 
        ) A
;




===========================
MAPKEY_TBL_BACBCNDLCU_개별공시대상고객_032_집합검증

SELECT  /* 프로그램ID:MAPKEY_TBL_BACPDWRTRN_개별공시대상고객_집합검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'집합검증'                                          AS VRFC_GBN
       ,'MAPKEY개별공시대상고객 테이블 집합검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCNDLCU'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,A.ASIS_VAL                                           ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
       SELECT  /*+ NO_MERGE(A) */
               SUM(A.ASIS_VAL)                       AS ASIS_VAL
              ,SUM(A.TOBE_VAL)                        TOBE_VAL   
         FROM  (
			   SELECT  
                       COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  (SELECT   /*+ FULL(A) PARALLEL(A 4)  */
                                DISTINCT
                                A.CUST_ID
                               ,A.WORK_YEAR
                               ,A.WORK_DGRE
                               ,A.WORK_DATE
                          FROM  TB_CPRPTIDN A
                       ) A
                UNION ALL   
			   SELECT  
					   NULL                   AS ASIS_VAL
					  ,COUNT(1)               AS TOBE_VAL
				 FROM  (SELECT /*+ FULL(A) PARALLEL(A 4) */
                               DISTINCT INDV_DSLR_TRGT_SUID
                         FROM  MAPKEY_TBL_BACBCNDLCU A
                        WHERE  1=1
                          AND  DML_FLAG IN ('I') 
                        ) 
			  ) A 
        ) A
;

===========================================
MAPKEY_TBL_BACBCTGCBD_단체수금청구명세_010_CREATE_OBJECT



/* 1. MAPKEY TABLE 생성 */
--ALTER TABLE MAPKEY_TBL_BACBCTGCBD RENAME TO MAPKEY_TBL_BACBCTGCBD_20201019;
--SELECT *
--  FROM  MAPKEY_TBL_BACBCTGCBD
--  ;
--
--DROP TABLE MAPKEY_TBL_BACBCTGCBD PURGE;

CREATE TABLE MAPKEY_TBL_BACBCTGCBD
(
    ASIS_TAB VARCHAR2(50) NULL
   ,GRP_CNTT_ADNO                   VARCHAR2(36)         --ASIS단체계약관리번호
   ,DMND_YM                         VARCHAR2(18)         --ASIS청구년월
   ,ADMN_LPNO                       VARCHAR2(24)         --ASIS관리설계사고유번호
   ,COLL_METD_CODE                  VARCHAR2(30)         --ASIS수금방법코드
   ,GRP_DMND_NO                     NUMBER(3)            --ASIS단체청구번호
   ,GRP_DMND_SQNO                   NUMBER(9)            --ASIS단체청구일련번호
   ,POLY_NO                         VARCHAR2(9)          --ASIS증권번호
   ,PAYM_YM                         VARCHAR2(18)         --ASIS납입년월
   ,DMND_SEQ_NO                     NUMBER(3)            --ASIS청구일련번호      
   ,GROU_CLTN_BING_SUID             NUMBER(19)           --TOBE단체수금청구SUID
   ,CNTC_AGMT_NO                    VARCHAR2(20)         --TOBE계약AGREEMENT번호
   ,DTLS_SQNO                       NUMBER(10)           --TOBE명세일련번호
   ,CRET_DT DATE NULL
   ,CHNG_DT DATE NULL
   ,DML_FLAG VARCHAR2(10) NULL
   ,LAST_CHMN_MPNO                  VARCHAR2(24)         --ASIS최종변경자사번
   ,LAST_CHNG_DTTM                  DATE                 --ASIS최종변경일시
   ,PGM_ID                          VARCHAR2(150)        --ASIS프로그램ID
   ,DEL_YN                          VARCHAR2(3)          --ASIS삭제여부
   ,PRDC_KIND_CD1                   VARCHAR2(30)         --ASIS보험료할인종류코드1
   ,PRDC_KIND_CD2                   VARCHAR2(30)         --ASIS보험료할인종류코드2
   ,PRDC_KIND_CD3                   VARCHAR2(30)         --ASIS보험료할인종류코드3
   ,PRDC_KIND_CD4                   VARCHAR2(30)         --ASIS보험료할인종류코드4
   ,PRDC_KIND_CD5                   VARCHAR2(30)         --ASIS보험료할인종류코드5
   ,DSCT_PREM_1                     NUMBER(12)           --ASIS할인보험료1
   ,DSCT_PREM_2                     NUMBER(12)           --ASIS할인보험료2
   ,DSCT_PREM_3                     NUMBER(12)           --ASIS할인보험료3
   ,DSCT_PREM_4                     NUMBER(12)           --ASIS할인보험료4
   ,DSCT_PREM_5                     NUMBER(12)           --ASIS할인보험료5
   ,GROU_CLTN_MGMT_NO	VARCHAR2(20)
   ,GROU_CLTN_SQNO	NUMBER(10)
)
NOLOGGING
;

--ALTER TABLE MAPKEY_TBL_BACBCTGCBD ADD (GROU_CLTN_MGMT_NO	VARCHAR2(20)
--   ,GROU_CLTN_SQNO	NUMBER(10));


COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.ASIS_TAB IS 'ASIS테이블명';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.GRP_CNTT_ADNO IS  'ASIS단체계약관리번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DMND_YM IS  'ASIS청구년월';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.ADMN_LPNO IS 'ASIS관리설계사고유번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.COLL_METD_CODE IS 'ASIS수금방법코드';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.GRP_DMND_NO IS 'ASIS단체청구번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.GRP_DMND_SQNO IS 'ASIS단체청구일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.POLY_NO IS 'ASIS증권번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.PAYM_YM IS 'ASIS납입년월';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DMND_SEQ_NO IS 'ASIS청구일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.GROU_CLTN_BING_SUID IS 'TOBE단체수금청구SUID';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.CNTC_AGMT_NO IS 'TOBE계약AGREEMENT번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DTLS_SQNO IS 'TOBE명세일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.CRET_DT IS '작업_생성일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.CHNG_DT IS '작업_변경일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DML_FLAG IS '작업_Insert/Delete구분';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.LAST_CHMN_MPNO IS 'ASIS최종변경자사번';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.LAST_CHNG_DTTM IS 'ASIS최종변경일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.PGM_ID IS 'ASIS프로그램ID';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DEL_YN IS 'ASIS삭제여부';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.PRDC_KIND_CD1 IS 'ASIS보험료할인종류코드1';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.PRDC_KIND_CD2 IS 'ASIS보험료할인종류코드2';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.PRDC_KIND_CD3 IS 'ASIS보험료할인종류코드3';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.PRDC_KIND_CD4 IS 'ASIS보험료할인종류코드4';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.PRDC_KIND_CD5 IS 'ASIS보험료할인종류코드5';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DSCT_PREM_1 IS 'ASIS할인보험료1';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DSCT_PREM_2 IS 'ASIS할인보험료2';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DSCT_PREM_3 IS 'ASIS할인보험료3';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DSCT_PREM_4 IS 'ASIS할인보험료4';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBD.DSCT_PREM_5 IS 'ASIS할인보험료5';


--------------------------------------------------------------------------------------------------------
/* 2. MAPKEY ERRORLOG 테이블 생성*/
DROP TABLE ERR$_MAPKEY_TBL_BACBCTGCBD PURGE;
EXEC DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => 'MAPKEY_TBL_BACBCTGCBD' , SKIP_UNSUPPORTED=> TRUE);

SELECT  *
  FROM  ERR$_MAPKEY_TBL_BACBCTGCBD
;

COMMENT ON TABLE MIG02.ERR$_MAPKEY_TBL_BACBCTGCBD IS 'DML Error Logging table for "MAPKEY_TBL_BACBCTGCBD"';
;


--------------------------------------------------------------------------------------------------------
/* 3. MAPKEY 프로시저 생성*/

--SELECT FN_WHW_GET_PRC('MAPKEY_TBL_BACBCTGCBD')
--FROM DUAL
--;
--
--
===========================================

MAPKEY_TBL_BACBCTGCBD_단체수금청구명세_020_Procedure

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCTGCBD (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCTGCBD_단체수금청구명세.sql
2. 원천 테이블(ASIS) : 
    ㄴ TB_CPREQTLH	단체계약청구명세 : 15,467,912
3. 목적 테이블(TOBE) : 
    MAPKEY_TBL_BACBCTGCBD (MAPKEY단체수금청구명세)
4. ASIS KEY : 
    TB_CPREQTLH  :  GRP_CNTT_ADNO	단체계약관리번호
                    DMND_YM	청구년월
                    ADMN_LPNO	관리설계사고유번호
                    COLL_METD_CODE	수금방법코드
                    GRP_DMND_NO	단체청구번호
                    GRP_DMND_SQNO	단체청구일련번호 
                    ------------------------------> TOBE 단체수금청구SUID
                    POLY_NO	증권번호
                    ------------------------------> TOBE 계약AGREEMENT번
                    PAYM_YM	납입년월
                    DMND_SEQ_NO	청구일련번호
                    ------------------------------> TOBE 명세일련번호
5. TOBE KEY : 
    TBL_BACBCTGCBD : GROU_CLTN_BING_SUID	단체수금청구SUID
                    CNTC_AGMT_NO	계약AGREEMENT번호
                    DTLS_SQNO	명세일련번호
6. 생성일자 : 2021.01.05
7. 수정일자 :     
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCTGCBD';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCTGCBD')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCTGCBD')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
--      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
--         /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
--         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCTGCBD');
--      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCTGCBD'); 
      MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCTGCBD');
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBD','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    /* 1. SUID MAX값 */

    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
    MERGE /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCTGCBD(MAPKEY단체수금청구명세), 담당자:류나영 */ 
          /*+ APPEND USE_HASH(A T) FULL(A) FULL(T) PARALLEL(4) */
     INTO  MAPKEY_TBL_BACBCTGCBD T
    USING  (
            WITH W1 AS (
                        SELECT  /*+ MATERIALIZE PARALLEL(A 4) FULL(A) */
                                GROU_CLTN_BING_SUID
                               ,CNTC_AGMT_NO
                               ,MAX(DTLS_SQNO) MAX_DTLS_SQNO
                          FROM  MAPKEY_TBL_BACBCTGCBD A
                         GROUP  BY GROU_CLTN_BING_SUID
                               ,CNTC_AGMT_NO
                        )
             SELECT  /*+ PARLLEL(4) USE_HASH(A G) */
                    A.GRP_CNTT_ADNO
                   ,A.DMND_YM
                   ,A.ADMN_LPNO
                   ,A.COLL_METD_CODE
                   ,A.GRP_DMND_NO
                   ,A.GRP_DMND_SQNO
                   ,A.POLY_NO
                   ,A.PAYM_YM
                   ,A.DMND_SEQ_NO
                   ,A.GROU_CLTN_BING_SUID
                   ,A.CNTC_AGMT_NO
                   ,DENSE_RANK() OVER(PARTITION BY A.GROU_CLTN_BING_SUID, A.CNTC_AGMT_NO ORDER BY A.PAYM_YM, A.PAYM_YM)
                    + NVL(G.MAX_DTLS_SQNO, 0) DTLS_SQNO
                   ,A.LAST_CHMN_MPNO
                   ,A.LAST_CHNG_DTTM
                   ,A.PGM_ID
                   ,A.DEL_YN
                   ,A.PRDC_KIND_CD1
                   ,A.PRDC_KIND_CD2
                   ,A.PRDC_KIND_CD3
                   ,A.PRDC_KIND_CD4
                   ,A.PRDC_KIND_CD5
                   ,A.DSCT_PREM_1
                   ,A.DSCT_PREM_2
                   ,A.DSCT_PREM_3
                   ,A.DSCT_PREM_4
                   ,A.DSCT_PREM_5
                   ,'I' DML_FLAG
                   ,GROU_CLTN_MGMT_NO
                   ,GROU_CLTN_SQNO
               FROM  (
                     SELECT  /*+ PARALLEL(4) USE_HASH(A M2) */
                            A.GRP_CNTT_ADNO
                           ,A.DMND_YM
                           ,A.ADMN_LPNO
                           ,A.COLL_METD_CODE
                           ,A.GRP_DMND_NO
                           ,A.GRP_DMND_SQNO
                           ,A.POLY_NO
                           ,A.PAYM_YM
                           ,A.DMND_SEQ_NO
                           ,M2.GROU_CLTN_BING_SUID
                           ,CASE WHEN A.POLY_NO IS NOT NULL THEN 'P'||LPAD(A.POLY_NO, 9, '0') END CNTC_AGMT_NO
                           ,A.LAST_CHMN_MPNO
                           ,A.LAST_CHNG_DTTM
                           ,A.PGM_ID
                           ,A.DEL_YN
                           ,A.PRDC_KIND_CD1
                           ,A.PRDC_KIND_CD2
                           ,A.PRDC_KIND_CD3
                           ,A.PRDC_KIND_CD4
                           ,A.PRDC_KIND_CD5
                           ,A.DSCT_PREM_1
                           ,A.DSCT_PREM_2
                           ,A.DSCT_PREM_3
                           ,A.DSCT_PREM_4
                           ,A.DSCT_PREM_5
                           ,M2.GROU_CLTN_MGMT_NO
                           ,M2.GROU_CLTN_SQNO
                      FROM  TB_CPREQTLH A
                           ,MAPKEY_TBL_BACBCTGCBL M2  
                    WHERE  1=1
                      AND  A.VALD_DVSN_CODE = '1'
                      AND  A.GRP_CNTT_ADNO = M2.GRP_CNTT_ADNO
                      AND  A.DMND_YM = M2.DMND_YM
                      AND  A.ADMN_LPNO = M2.ADMN_LPNO
                      AND  A.COLL_METD_CODE = M2.COLL_METD_CODE
                      AND  A.GRP_DMND_NO = M2.GRP_DMND_NO
                      AND  A.GRP_DMND_SQNO = M2.GRP_DMND_SQNO
                      AND  M2.DML_FLAG = 'I' 
                    ) A 
                   ,W1 G
              WHERE 1=1
                AND A.GROU_CLTN_BING_SUID = G.GROU_CLTN_BING_SUID(+)
                AND A.CNTC_AGMT_NO = G.CNTC_AGMT_NO(+)
--             UNION  ALL
--             SELECT  /*+ USE_HASH(A M) FULL(M) FULL(A) PARALLEL(4) */ 
--                    M.GRP_CNTT_ADNO
--                   ,M.DMND_YM
--                   ,M.ADMN_LPNO
--                   ,M.COLL_METD_CODE
--                   ,M.GRP_DMND_NO
--                   ,M.GRP_DMND_SQNO
--                   ,M.POLY_NO
--                   ,M.PAYM_YM
--                   ,M.DMND_SEQ_NO
--                   ,M.GROU_CLTN_BING_SUID
--                   ,M.CNTC_AGMT_NO
--                   ,M.DTLS_SQNO
--                   ,M.LAST_CHMN_MPNO
--                   ,M.LAST_CHNG_DTTM
--                   ,M.PGM_ID
--                   ,M.DEL_YN
--                   ,M.PRDC_KIND_CD1
--                   ,M.PRDC_KIND_CD2
--                   ,M.PRDC_KIND_CD3
--                   ,M.PRDC_KIND_CD4
--                   ,M.PRDC_KIND_CD5
--                   ,M.DSCT_PREM_1
--                   ,M.DSCT_PREM_2
--                   ,M.DSCT_PREM_3
--                   ,M.DSCT_PREM_4
--                   ,M.DSCT_PREM_5
--                   ,'D' DML_FLAG
--              FROM  TB_CPREQTLH A
--                   ,MAPKEY_TBL_BACBCTGCBD M
--             WHERE  1=1
--               AND  M.GRP_CNTT_ADNO = A.GRP_CNTT_ADNO(+) /* ASIS단체계약관리번호 */
--               AND  M.DMND_YM = A.DMND_YM(+) /* ASIS청구년월 */
--               AND  M.ADMN_LPNO = A.ADMN_LPNO(+) /* ASIS관리설계사고유번호 */
--               AND  M.COLL_METD_CODE = A.COLL_METD_CODE(+) /* ASIS수금방법코드 */
--               AND  M.GRP_DMND_NO = A.GRP_DMND_NO(+) /* ASIS단체청구번호 */
--               AND  M.GRP_DMND_SQNO = A.GRP_DMND_SQNO(+) /* ASIS단체청구일련번호 */
--               AND  M.POLY_NO = A.POLY_NO(+) /* ASIS증권번호 */
--               AND  M.PAYM_YM = A.PAYM_YM(+) /* ASIS납입년월 */
--               AND  M.DMND_SEQ_NO = A.DMND_SEQ_NO(+) /* ASIS청구일련번호 */
--               AND  A.POLY_NO IS NULL
            ) A
       ON  (   T.GRP_CNTT_ADNO = A.GRP_CNTT_ADNO /* ASIS단체계약관리번호 */
            AND  T.DMND_YM = A.DMND_YM /* ASIS청구년월 */
            AND  T.ADMN_LPNO = A.ADMN_LPNO /* ASIS관리설계사고유번호 */
            AND  T.COLL_METD_CODE = A.COLL_METD_CODE /* ASIS수금방법코드 */
            AND  T.GRP_DMND_NO = A.GRP_DMND_NO /* ASIS단체청구번호 */
            AND  T.GRP_DMND_SQNO = A.GRP_DMND_SQNO /* ASIS단체청구일련번호 */
            AND  T.POLY_NO = A.POLY_NO /* ASIS증권번호 */
            AND  T.PAYM_YM = A.PAYM_YM /* ASIS납입년월 */
            AND  T.DMND_SEQ_NO = A.DMND_SEQ_NO /* ASIS청구일련번호 */
           )
--     WHEN  MATCHED THEN
--           UPDATE SET
--              T.CHNG_DT = SYSDATE
--             ,T.DML_FLAG = A.DML_FLAG
     WHEN  NOT MATCHED THEN 
           INSERT (T.ASIS_TAB ,  T.GRP_CNTT_ADNO ,T.DMND_YM ,T.ADMN_LPNO ,T.COLL_METD_CODE ,T.GRP_DMND_NO ,T.GRP_DMND_SQNO ,T.POLY_NO ,T.PAYM_YM ,T.DMND_SEQ_NO ,T.GROU_CLTN_BING_SUID ,T.CNTC_AGMT_NO ,T.DTLS_SQNO 
                 ,T.CRET_DT ,T.CHNG_DT ,T.DML_FLAG ,T.LAST_CHMN_MPNO ,T.LAST_CHNG_DTTM ,T.PGM_ID ,T.DEL_YN ,T.PRDC_KIND_CD1 ,T.PRDC_KIND_CD2 ,T.PRDC_KIND_CD3 ,T.PRDC_KIND_CD4 ,T.PRDC_KIND_CD5 ,T.DSCT_PREM_1 ,T.DSCT_PREM_2 ,T.DSCT_PREM_3 ,T.DSCT_PREM_4 ,T.DSCT_PREM_5
                 ,T.GROU_CLTN_MGMT_NO, T.GROU_CLTN_SQNO)
           VALUES ('TB_CPREQTLH',A.GRP_CNTT_ADNO ,A.DMND_YM ,A.ADMN_LPNO ,A.COLL_METD_CODE ,A.GRP_DMND_NO ,A.GRP_DMND_SQNO ,A.POLY_NO ,A.PAYM_YM ,A.DMND_SEQ_NO ,A.GROU_CLTN_BING_SUID ,A.CNTC_AGMT_NO ,A.DTLS_SQNO 
                 ,SYSDATE   ,NULL      ,A.DML_FLAG ,A.LAST_CHMN_MPNO ,A.LAST_CHNG_DTTM ,A.PGM_ID ,A.DEL_YN ,A.PRDC_KIND_CD1 ,A.PRDC_KIND_CD2 ,A.PRDC_KIND_CD3 ,A.PRDC_KIND_CD4 ,A.PRDC_KIND_CD5 ,A.DSCT_PREM_1 ,A.DSCT_PREM_2 ,A.DSCT_PREM_3 ,A.DSCT_PREM_4 ,A.DSCT_PREM_5
                 ,A.GROU_CLTN_MGMT_NO, A.GROU_CLTN_SQNO)
           LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCTGCBD  REJECT LIMIT 10
     ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCTGCBD;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBD','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;  
    V_SQLERRM:=SQLERRM;
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
  --  MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBD','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      

=========================================
MAPKEY_TBL_BACBCTGCBD_단체수금청구명세_031_중복검증

SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCTGCBD_단체수금청구명세_중복검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'중복검증'                                          AS VRFC_GBN
       ,'MAPKEY단체수금청구명세 테이블 중복검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCTGCBD'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,NULL                                              ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  COUNT(TOBE_VAL)          AS TOBE_VAL
          FROM  (
                /* TOBE KEY 중복여부 */
                SELECT  /*+ FULL(A) PARALLEL(A 4) PARALLEL(D 4) */
                                D.NO
                               ,CASE WHEN D.NO = 1 THEN A.GROU_CLTN_BING_SUID||'^'||A.CNTC_AGMT_NO||'^'||A.DTLS_SQNO 
                                     WHEN D.NO = 2 THEN A.GRP_CNTT_ADNO||'^'||A.DMND_YM||'^'||A.ADMN_LPNO||'^'||A.COLL_METD_CODE||'^'||A.GRP_DMND_NO||'^'||A.GRP_DMND_SQNO||'^'||A.POLY_NO||'^'||A.PAYM_YM||'^'||A.DMND_SEQ_NO
                                     END     KEY_VAL
                               ,COUNT(1)                          AS TOBE_VAL
                          FROM  MAPKEY_TBL_BACBCTGCBD A  
                              ,(SELECT  LEVEL NO
                                  FROM  DUAL
                               CONNECT  BY LEVEL <= 2) D
                        GROUP  BY  D.NO
                               ,CASE WHEN D.NO = 1 THEN  A.GROU_CLTN_BING_SUID||'^'||A.CNTC_AGMT_NO||'^'||A.DTLS_SQNO
                                     WHEN D.NO = 2 THEN A.GRP_CNTT_ADNO||'^'||A.DMND_YM||'^'||A.ADMN_LPNO||'^'||A.COLL_METD_CODE||'^'||A.GRP_DMND_NO||'^'||A.GRP_DMND_SQNO||'^'||A.POLY_NO||'^'||A.PAYM_YM||'^'||A.DMND_SEQ_NO
                                     END    
                        HAVING COUNT(1) > 1        
                ) A 
        ) A
;



=================================
MAPKEY_TBL_BACBCTGCBD_단체수금청구명세_032_집합검증
SELECT  /* 프로그램ID:MAPKEY_TBL_BACPDWRTRN_단체수금청구명세_집합검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'집합검증'                                          AS VRFC_GBN
       ,'MAPKEY단체수금청구명세 테이블 집합검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCTGCBD'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,A.ASIS_VAL                                           ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
       SELECT  /*+ NO_MERGE(A) */
               SUM(A.ASIS_VAL)                       AS ASIS_VAL
              ,SUM(A.TOBE_VAL)                        TOBE_VAL   
         FROM  (
			   SELECT  /*+ USE_HASH(A M2) FULL(M2) FULL(A) PARALLEL(4) */ 
                       COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  TB_CPREQTLH A
                       ,MAPKEY_TBL_BACBCTGCBL M2  
                WHERE  1=1
                  AND  A.VALD_DVSN_CODE = '1'
                  AND  A.GRP_CNTT_ADNO = M2.GRP_CNTT_ADNO
                  AND  A.DMND_YM = M2.DMND_YM
                  AND  A.ADMN_LPNO = M2.ADMN_LPNO
                  AND  A.COLL_METD_CODE = M2.COLL_METD_CODE
                  AND  A.GRP_DMND_NO = M2.GRP_DMND_NO
                  AND  A.GRP_DMND_SQNO = M2.GRP_DMND_SQNO
                  AND  M2.DML_FLAG = 'I' 
                UNION ALL   
			   SELECT  /*+ FULL(A)  */
					   NULL                   AS ASIS_VAL
					  ,COUNT(1)               AS TOBE_VAL
				 FROM  MAPKEY_TBL_BACBCTGCBD A
                WHERE  1=1
                  AND  DML_FLAG IN ('I') 
			  ) A 
        ) A
;

==============================================
MAPKEY_TBL_BACBCTGCBL_단체수금청구_010_CREATE_OBJECT(수정)


/* 1. MAPKEY TABLE 생성 */
--ALTER TABLE MAPKEY_TBL_BACBCTGCBL RENAME TO MAPKEY_TBL_BACBCTGCBL_20201019;
--SELECT *
--  FROM  MAPKEY_TBL_BACBCTGCBL
--  ;
--
DROP TABLE MAPKEY_TBL_BACBCTGCBL PURGE;

CREATE TABLE MAPKEY_TBL_BACBCTGCBL
(
    ASIS_TAB VARCHAR2(50) NULL,
    GRP_CNTT_ADNO VARCHAR2(36) NOT NULL,
    DMND_YM VARCHAR2(18) NOT NULL,
    ADMN_LPNO VARCHAR2(24) NOT NULL,
    COLL_METD_CODE VARCHAR2(30) NOT NULL,
    GRP_DMND_NO NUMBER(3) NOT NULL,
    GRP_DMND_SQNO NUMBER(9) NOT NULL,
    GROU_CLTN_BING_SUID NUMBER NULL,
    CRET_DT DATE NULL,
    CHNG_DT DATE NULL,
    DML_FLAG VARCHAR2(10) NULL,
    GROU_CLTN_MGMT_NO VARCHAR2(20),    -- TOBE 단체수금관리번호
    GROU_CLTN_SQNO    NUMBER(10)      -- TOBE 단체수금일련번호
)
NOLOGGING
;




COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.ASIS_TAB IS 'ASIS테이블명';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.GRP_CNTT_ADNO IS 'ASIS단체계약관리번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.DMND_YM IS 'ASIS청구년월';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.ADMN_LPNO IS 'ASIS관리설계사고유번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.COLL_METD_CODE IS 'ASIS수금방법코드';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.GRP_DMND_NO IS 'ASIS단체청구번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.GRP_DMND_SQNO IS 'ASIS단체청구일련번호';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.GROU_CLTN_BING_SUID IS 'TOBE단체수금청구SUID';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.CRET_DT IS '작업_생성일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.CHNG_DT IS '작업_변경일시';
COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCBL.DML_FLAG IS '작업_Insert/Delete구분';

--------------------------------------------------------------------------------------------------------
/* 2. MAPKEY ERRORLOG 테이블 생성*/
DROP TABLE ERR$_MAPKEY_TBL_BACBCTGCBL PURGE;
EXEC DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => 'MAPKEY_TBL_BACBCTGCBL' , SKIP_UNSUPPORTED=> TRUE);

SELECT  *
  FROM  ERR$_MAPKEY_TBL_BACBCTGCBL
;

COMMENT ON TABLE MIG02.ERR$_MAPKEY_TBL_BACBCTGCBL IS 'DML Error Logging table for "MAPKEY_TBL_BACBCTGCBL"';
;


--------------------------------------------------------------------------------------------------------
/* 3. MAPKEY 프로시저 생성*/

SELECT FN_WHW_GET_PRC('MAPKEY_TBL_BACBCTGCBL')
FROM DUAL
;

============================================
MAPKEY_TBL_BACBCTGCBL_단체수금청구_010_CREATE_OBJECT

----------------------------------------------------------------------------------------------------
/* 1. MAPKEY TABLE 생성 */
 
  
--DROP TABLE MAPKEY_TBL_BACBCTGCBL PURGE;
CREATE TABLE MAPKEY_TBL_BACBCTGCBL
(
   ASIS_TAB VARCHAR2(50) NULL
  ,GRP_CNTT_ADNO VARCHAR2(36) NOT NULL
  ,DMND_YM VARCHAR2(18) NOT NULL
  ,ADMN_LPNO VARCHAR2(24) NOT NULL
  ,COLL_METD_CODE VARCHAR2(30) NOT NULL
  ,GRP_DMND_NO NUMBER(3) NOT NULL
  ,GRP_DMND_SQNO NUMBER(9) NOT NULL
  ,GROU_CLTN_BING_SUID NUMBER NULL
  ,CRET_DT DATE NULL
  ,CHNG_DT DATE NULL
  ,DML_FLAG VARCHAR2(10) 
)  
NOLOGGING
;

INSERT INTO MAPKEY_TBL_BACBCTGCBL
SELECT  'TB_CPREQTCT' 
       ,GRP_CNTT_ADNO   -- 단체계약관리번호
       ,DMND_YM         -- 청구년월
       ,ADMN_LPNO       -- 관리설계사고유번호
       ,COLL_METD_CODE  -- 수금방법코드
       ,GRP_DMND_NO     -- 단체청구번호 
       ,GRP_DMND_SQNO   -- 단체청구일련번호
       ,ROWNUM + 100000000000 GROU_CLTN_BING_SUID
       ,SYSDATE
       ,NULL
       ,'I'
  FROM  (       
        SELECT  GRP_CNTT_ADNO
               ,DMND_YM
               ,ADMN_LPNO
               ,COLL_METD_CODE
               ,GRP_DMND_NO
               ,GRP_DMND_SQNO
        FROM  TB_CPREQTCT
         ORDER  BY GRP_CNTT_ADNO
               ,DMND_YM
               ,ADMN_LPNO
               ,COLL_METD_CODE
               ,GRP_DMND_NO  
               ,GRP_DMND_SQNO
        ) A       
 ;

COMMIT
;


=====================================
MAPKEY_TBL_BACBCTGCBL_단체수금청구_020_Procedure

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCTGCBL (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCTGCBL_단체수금청구.sql
2. 원천 테이블(ASIS) : 
    ㄴTB_CPREQTCT	단체계약청구 : 39,145
3. 목적 테이블(TOBE) : 
    ㄴTBL_BACBCTGCBL(단체수금청구)
4. ASIS KEY : 
    ㄴTB_CPREQTCT  : GRP_CNTT_ADNO	단체계약관리번호
                    DMND_YM	청구년월
                    ADMN_LPNO	관리설계사고유번호
                    COLL_METD_CODE	수금방법코드
                    GRP_DMND_NO	단체청구번호
                    GRP_DMND_SQNO	단체청구일련번호
5. TOBE KEY : 
    ㄴGROU_CLTN_BING_SUID	단체수금청구SUID	
6. 생성일자 : 2020.11.18
7. 수정일자 : 
     - 2021.12.07 : 단체수금(MAPKEY_TBL_BACBCTGPCT)에 존재하는 건만 이행 
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCTGCBL';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCTGCBL')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCTGCBL')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
--      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
--         /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
--         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCTGCBL');
--      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCTGCBL');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBL','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    /* 1. SUID MAX값 */
    SELECT  /*+ PARALLEL(A 4) FULL(A) */
            NVL(MAX(GROU_CLTN_BING_SUID),100000000000)                                                                                                          
      INTO  V_MAX_ID            
      FROM  MAPKEY_TBL_BACBCTGCBL A;
    
    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
    MERGE /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCTGCBL(MAPKEY단체수금청구), 담당자:류나영 */ 
          /*+ USE_HASH(A T) FULL(A) FULL(T)*/
     INTO  MAPKEY_TBL_BACBCTGCBL T
    USING  (
            SELECT  /*+ PARALLEL(A 4)*/
                    A.GRP_CNTT_ADNO
                   ,A.DMND_YM
                   ,A.ADMN_LPNO
                   ,A.COLL_METD_CODE
                   ,A.GRP_DMND_NO
                   ,A.GRP_DMND_SQNO
                   ,ROWNUM RNO
                   ,'I' DML_FLAG
              FROM  
                    (
                    SELECT  /*+ USE_HASH(A M) FULL(M) FULL(A) */ 
                            A.GRP_CNTT_ADNO
                           ,A.DMND_YM
                           ,A.ADMN_LPNO
                           ,A.COLL_METD_CODE
                           ,A.GRP_DMND_NO
                           ,A.GRP_DMND_SQNO
                      FROM  TB_CPREQTCT A
                           ,MAPKEY_TBL_BACBCTGCBL M
                     WHERE  1=1
                       AND  A.GRP_CNTT_ADNO = M.GRP_CNTT_ADNO(+)
                       AND  A.DMND_YM = M.DMND_YM(+)
                       AND  A.ADMN_LPNO = M.ADMN_LPNO(+)
                       AND  A.COLL_METD_CODE = M.COLL_METD_CODE(+)
                       AND  A.GRP_DMND_NO = M.GRP_DMND_NO(+)
                       AND  A.GRP_DMND_SQNO = M.GRP_DMND_SQNO(+)
                       AND  M.GRP_CNTT_ADNO IS NULL
                     ORDER  BY  A.GRP_CNTT_ADNO
                           ,A.DMND_YM
                           ,A.ADMN_LPNO
                           ,A.COLL_METD_CODE
                           ,A.GRP_DMND_NO
                           ,A.GRP_DMND_SQNO 
                    ) A
             UNION  ALL
             SELECT  /*+ USE_HASH(A M) FULL(M) FULL(A) */ 
                    M.GRP_CNTT_ADNO
                   ,M.DMND_YM
                   ,M.ADMN_LPNO
                   ,M.COLL_METD_CODE
                   ,M.GRP_DMND_NO
                   ,M.GRP_DMND_SQNO
                   ,M.GROU_CLTN_BING_SUID
                   ,'D' DML_FLAG
              FROM  TB_CPREQTCT A
                   ,MAPKEY_TBL_BACBCTGCBL M
             WHERE  1=1
               AND  A.GRP_CNTT_ADNO(+) = M.GRP_CNTT_ADNO
               AND  A.DMND_YM(+) = M.DMND_YM
               AND  A.ADMN_LPNO(+) = M.ADMN_LPNO
               AND  A.COLL_METD_CODE(+) = M.COLL_METD_CODE
               AND  A.GRP_DMND_NO(+) = M.GRP_DMND_NO
               AND  A.GRP_DMND_SQNO(+) = M.GRP_DMND_SQNO
               AND  A.GRP_CNTT_ADNO IS NULL
            ) A
       ON  (   A.GRP_CNTT_ADNO = T.GRP_CNTT_ADNO
               AND  A.DMND_YM = T.DMND_YM
               AND  A.ADMN_LPNO = T.ADMN_LPNO
               AND  A.COLL_METD_CODE = T.COLL_METD_CODE
               AND  A.GRP_DMND_NO = T.GRP_DMND_NO
               AND  A.GRP_DMND_SQNO = T.GRP_DMND_SQNO
           )
     WHEN  MATCHED THEN
           UPDATE SET
              T.CHNG_DT = SYSDATE
             ,T.DML_FLAG = A.DML_FLAG
     WHEN  NOT MATCHED THEN 
           INSERT (T.ASIS_TAB,    T.GRP_CNTT_ADNO, T.DMND_YM, T.ADMN_LPNO, T.COLL_METD_CODE, T.GRP_DMND_NO, T.GRP_DMND_SQNO, T.GROU_CLTN_BING_SUID, T.CRET_DT, T.CHNG_DT, T.DML_FLAG)
           VALUES ('TB_CPREQTCT', A.GRP_CNTT_ADNO, A.DMND_YM, A.ADMN_LPNO, A.COLL_METD_CODE, A.GRP_DMND_NO, A.GRP_DMND_SQNO, A.RNO+V_MAX_ID, SYSDATE, NULL, A.DML_FLAG  )
           LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCTGCBL  REJECT LIMIT 10
     ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCTGCBL;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;  
    V_SQLERRM:=SQLERRM;
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
  --  MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


=====================
MAPKEY_TBL_BACBCTGCBL_단체수금청구_020_Procedure_수정

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCTGCBL (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCTGCBL_단체수금청구.sql
2. 원천 테이블(ASIS) : 
    ㄴTB_CPREQTCT	단체계약청구 : 39,145
3. 목적 테이블(TOBE) : 
    ㄴTBL_BACBCTGCBL(단체수금청구)
4. ASIS KEY : 
    ㄴTB_CPREQTCT  : GRP_CNTT_ADNO	단체계약관리번호
                    DMND_YM	청구년월
                    ADMN_LPNO	관리설계사고유번호
                    COLL_METD_CODE	수금방법코드
                    GRP_DMND_NO	단체청구번호
                    GRP_DMND_SQNO	단체청구일련번호
5. TOBE KEY : 
    ㄴGROU_CLTN_BING_SUID	단체수금청구SUID	
6. 생성일자 : 2020.11.18
7. 수정일자 : 
     - 2021.12.07 : 단체수금(MAPKEY_TBL_BACBCTGPCT)에 존재하는 건만 이행 
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCTGCBL';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCTGCBL')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCTGCBL')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
--      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
--         /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
--        
--      END IF;
      MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCTGCBL');
      
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCTGCBL');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBL','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    /* 1. SUID MAX값 */
--    SELECT  /*+ PARALLEL(A 4) FULL(A) */
--            NVL(MAX(GROU_CLTN_BING_SUID),100000000000)                                                                                                          
--      INTO  V_MAX_ID            
--      FROM  MAPKEY_TBL_BACBCTGCBL A;
--    
    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
    INSERT /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCTGCBL(MAPKEY단체수금청구), 담당자:류나영 */ 
          /*+ USE_HASH(A T) FULL(A) FULL(T)*/
     INTO  MAPKEY_TBL_BACBCTGCBL T
     (     ASIS_TAB                         --ASIS테이블명
          ,GRP_CNTT_ADNO                    --ASIS단체계약관리번호
          ,DMND_YM                          --ASIS청구년월
          ,ADMN_LPNO                        --ASIS관리설계사고유번호
          ,COLL_METD_CODE                   --ASIS수금방법코드
          ,GRP_DMND_NO                      --ASIS단체청구번호
          ,GRP_DMND_SQNO                    --ASIS단체청구일련번호
          ,GROU_CLTN_BING_SUID              --TOBE단체수금청구SUID
          ,CRET_DT                          --작업_생성일시
          ,CHNG_DT                          --작업_변경일시
          ,DML_FLAG                         --작업_Insert/Delete구분
          ,GROU_CLTN_MGMT_NO                -- TOBE단체수금관리번호
          ,GROU_CLTN_SQNO                   -- TOBE단체수금일련번호
      )
     SELECT  
            'TB_CPREQTCT' ASIS_TAB
            ,A.GRP_CNTT_ADNO
            ,A.DMND_YM
            ,A.ADMN_LPNO
            ,A.COLL_METD_CODE
            ,A.GRP_DMND_NO
            ,A.GRP_DMND_SQNO
            ,100000000000 + ROWNUM RNO
            ,SYSDATE
            ,NULL
            ,'I' DML_FLAG
            ,A.GROU_CLTN_MGMT_NO
            ,A.GROU_CLTN_SQNO
      FROM  (
            SELECT  /*+ USE_HASH(A M) ORDERED FULL(A) FULL(M)  */
                    A.GRP_CNTT_ADNO
                   ,A.DMND_YM
                   ,A.ADMN_LPNO
                   ,A.COLL_METD_CODE
                   ,A.GRP_DMND_NO
                   ,A.GRP_DMND_SQNO
                   ,M.GROU_CLTN_MGMT_NO
                   ,M.GROU_CLTN_SQNO
              FROM  MAPKEY_TBL_BACBCTGPCT M    /* MAPKEY단체수금 */
                   ,TB_CPREQTCT A
             WHERE  1=1
               AND  M.GRP_CUST_ID||M.GRP_CNTT_TPCD  = A.GRP_CNTT_ADNO
               AND  M.ADMN_LPNO = A.ADMN_LPNO
               AND  M.COLL_METD_CODE = A.COLL_METD_CODE
               AND  M.ADMN_LPNO = A.ADMN_LPNO
             ORDER  BY  A.GRP_CNTT_ADNO
                   ,A.DMND_YM
                   ,A.ADMN_LPNO
                   ,A.COLL_METD_CODE
                   ,A.GRP_DMND_NO
                   ,A.GRP_DMND_SQNO 
             ) A
       LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCTGCBL  REJECT LIMIT 10
      ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCTGCBL;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;  
    V_SQLERRM:=SQLERRM;
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
  --  MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCBL','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


=======================================
MAPKEY_TBL_BACBCTGCBL_단체수금청구_031_중복검증

SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCTGCBL_단체수금청구_중복검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'중복검증'                                          AS VRFC_GBN
       ,'MAPKEY단체수금청구 테이블 중복검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCTGCBL'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,NULL                                              ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  COUNT(TOBE_VAL)          AS TOBE_VAL
          FROM  (
                /* TOBE KEY 중복여부 */
                SELECT  /*+ FULL(A) PARALLEL(A 4) PARALLEL(D 4) */
                                D.NO
                               ,CASE WHEN D.NO = 1 THEN A.GROU_CLTN_BING_SUID||''
                                     WHEN D.NO = 2 THEN A.GRP_CNTT_ADNO||'^'|| A.DMND_YM||'^'|| A.ADMN_LPNO||'^'|| A.COLL_METD_CODE||'^'|| A.GRP_DMND_NO||'^'|| A.GRP_DMND_SQNO
                                     END     KEY_VAL
                               ,COUNT(1)                          AS TOBE_VAL
                          FROM  MAPKEY_TBL_BACBCTGCBL A  
                              ,(SELECT  LEVEL NO
                                  FROM  DUAL
                               CONNECT  BY LEVEL <= 2) D
                        GROUP  BY  D.NO
                               ,CASE WHEN D.NO = 1 THEN A.GROU_CLTN_BING_SUID||''
                                     WHEN D.NO = 2 THEN A.GRP_CNTT_ADNO||'^'|| A.DMND_YM||'^'|| A.ADMN_LPNO||'^'|| A.COLL_METD_CODE||'^'|| A.GRP_DMND_NO||'^'|| A.GRP_DMND_SQNO
                                     END    
                        HAVING COUNT(1) > 1        
                ) A 
        ) A
;




======================================
MAPKEY_TBL_BACBCTGCBL_단체수금청구_032_집합검증

SELECT  /* 프로그램ID:MAPKEY_TBL_BACPDWRTRN_단체수금청구_집합검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'집합검증'                                          AS VRFC_GBN
       ,'MAPKEY단체수금청구 테이블 집합검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCTGCBL'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,A.ASIS_VAL                                           ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
       SELECT  /*+ NO_MERGE(A) */
               SUM(A.ASIS_VAL)                       AS ASIS_VAL
              ,SUM(A.TOBE_VAL)                        TOBE_VAL   
         FROM  (
			   SELECT  /*+ USE_HASH(A M) ORDERED FULL(A) FULL(M)  */
                       COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  MAPKEY_TBL_BACBCTGPCT M    /* MAPKEY단체수금 */
                       ,TB_CPREQTCT A
                 WHERE  1=1
    --               AND  M.ASIS_TAB = 'TB_CPADMTCR'       /* 제외 2022.02.11 */
                   AND  M.GRP_CUST_ID||M.GRP_CNTT_TPCD  = A.GRP_CNTT_ADNO
                   AND  M.ADMN_LPNO = A.ADMN_LPNO
                   AND  M.COLL_METD_CODE = A.COLL_METD_CODE
                   AND  M.ADMN_LPNO = A.ADMN_LPNO
                UNION ALL   
			   SELECT  /*+ FULL(A)  */
					   NULL                   AS ASIS_VAL
					  ,COUNT(1)               AS TOBE_VAL
				 FROM  MAPKEY_TBL_BACBCTGCBL A
                WHERE  1=1
                  AND  DML_FLAG IN ('I') 
			  ) A 
        ) A
;




=================================
MAPKEY_TBL_BACBCTGCDT_단체수금상세_020_Procedure(수정)

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCTGCDT (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCTGCDT_단체수금상세.sql
2. 원천 테이블(ASIS) : 
    ㄴ TB_CPADMTCH	단체계약관리이력 : 7,701
3. 목적 테이블(TOBE) : 
    ㄴ TBL_BACBCTGCDT(단체수금상세)
4. ASIS KEY : 
    ㄴ TB_CPADMTCH  : GRP_CNTT_ADNO	단체계약관리번호
                     HIST_NO	이력번호
                     CASE_SQNO	건별일련번호
5. TOBE KEY : 
    ㄴ TBL_BACBCTGCDT : GROU_CLTN_MGMT_NO	단체수금관리번호
                       GROU_CLTN_SQNO	단체수금일련번호
                       DETL_SQNO	상세일련번호
6. 생성일자 : 2020.11.19
7. 수정일자 : 
    2021.02.17 : 단체계약유형코드(04)이고 관리설계사고유번호(00000000) 건은 제외
    2021.09.03 : 단체수금에 존재하는 건만 키맵생성
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCTGCDT';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCTGCDT')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCTGCDT')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
--      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
--         /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
--         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCTGCDT');
--      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCTGCDT');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCDT','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  

    
    /* 2. 신규 'I', 삭제건 'D' 표시 */
    INSERT /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCTGCDT(MAPKEY단체수금상세), 담당자:류나영 */ 
           /*+ APPEND */
    INTO MAPKEY_TBL_BACBCTGCDT T
    (  ASIS_TAB                         --ASIS테이블
      ,GRP_CNTT_ADNO                    --ASIS단체계약관리번호
      ,HIST_NO                          --ASIS이력번호
      ,CASE_SQNO                        --ASIS건별일련번호
      ,GROU_CLTN_MGMT_NO                --TOBE단체수금관리번호
      ,GROU_CLTN_SQNO                   --TOBE단체수금일련번호
      ,DETL_SQNO                        --TOBE상세일련번호
      ,CRET_DT                          --작업_생성일시
      ,CHNG_DT                          --작업_변경일시
      ,DML_FLAG                         --작업_Insert/Delete구분
      ,GRP_CUST_ID                      --ASIS단체고객ID
      ,GRP_CNTT_TPCD                    --ASIS단체계약유형코드
      ,ADMN_LPNO                        --ASIS관리설계사고유번호
      ,COLL_METD_CODE                   --ASIS수금방법코드
    )
    SELECT  ASIS_TAB
           ,GRP_CUST_ID||GRP_CNTT_TPCD GRP_CNTT_ADNO
           ,
      FROM  MAPKEY_TBL_BACBCTGPCT M1   -- MAPKEY단체수금
     ;
    
--    MERGE /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCTGCDT(MAPKEY단체수금상세), 담당자:류나영 */ 
--          /*+ USE_HASH(A T) FULL(A) FULL(T)*/
--     INTO  MAPKEY_TBL_BACBCTGCDT T
--    USING  (
--            WITH W_ASIS AS ( 
--            SELECT  /*+ USE_HASH(A M1) FULL(A) FULL(M1) */
--                    A.GRP_CNTT_ADNO
--                   ,A.HIST_NO
--                   ,A.CASE_SQNO
--                   ,M1.GROU_CLTN_MGMT_NO
--                   ,M1.GROU_CLTN_SQNO      
--                   ,A.GRP_CUST_ID
--                   ,A.GRP_CNTT_TPCD
--                   ,A.ADMN_LPNO
--                   ,A.COLL_METD_CODE
--              FROM  TB_CPADMTCH A
--                   ,MAPKEY_TBL_BACBCTGPCT M1   -- MAPKEY단체수금
--             WHERE  1=1
--            --   AND  A.GRP_CUST_ID = M1.GRP_CUST_ID(+)
--            --   AND  A.GRP_CNTT_TPCD = M1.GRP_CNTT_TPCD(+)
--            --   AND  A.ADMN_LPNO = M1.ADMN_LPNO(+)
--            --   AND  A.COLL_METD_CODE = M1.COLL_METD_CODE(+)
--            --   AND  M1.DML_FLAG = 'I'
--               AND  A.GRP_CUST_ID = M1.GRP_CUST_ID
--               AND  A.GRP_CNTT_TPCD = M1.GRP_CNTT_TPCD
--               AND  A.ADMN_LPNO = M1.ADMN_LPNO
--               AND  A.COLL_METD_CODE = M1.COLL_METD_CODE
--               AND  M1.DML_FLAG = 'I' 
----               AND  A.GRP_CNTT_ADNO = A.GRP_CUST_ID||A.GRP_CNTT_TPCD
--               AND  A.GRP_CNTT_TPCD <> '04'
--            )  
--            SELECT  /*+ USE_HASH(A M2 G) FULL(A) FULL(M2) FULL(G) */
--                    A.GRP_CNTT_ADNO
--                   ,A.HIST_NO
--                   ,A.CASE_SQNO
--                   ,A.GROU_CLTN_MGMT_NO
--                   ,A.GROU_CLTN_SQNO   
--                   ,DENSE_RANK() OVER(PARTITION BY A.GRP_CUST_ID, A.GRP_CNTT_TPCD, A.ADMN_LPNO, A.COLL_METD_CODE ORDER BY A.HIST_NO, A.CASE_SQNO) 
--                    + NVL(G.MAX_DETL_SQNO, 0)  DETL_SQNO
--                   ,A.GRP_CUST_ID
--                   ,A.GRP_CNTT_TPCD
--                   ,A.ADMN_LPNO
--                   ,A.COLL_METD_CODE
--                   ,'I' DML_FLAG
--              FROM  W_ASIS A 
--                   ,MAPKEY_TBL_BACBCTGCDT M2   -- MAPKEY단체수금상세
--                   ,(
--                    SELECT  A.GRP_CUST_ID
--                           ,A.GRP_CNTT_TPCD
--                           ,MAX(DETL_SQNO) MAX_DETL_SQNO
--                      FROM  MAPKEY_TBL_BACBCTGCDT A
--                     WHERE  1=1
--                     GROUP  BY A.GRP_CUST_ID, A.GRP_CNTT_TPCD
--                    ) G
--             WHERE  1=1
--               AND  A.GRP_CNTT_ADNO = M2.GRP_CNTT_ADNO(+)
--               AND  A.HIST_NO = M2.HIST_NO(+)
--               AND  A.CASE_SQNO = M2.CASE_SQNO(+)
--               AND  M2.GRP_CNTT_ADNO IS NULL
--               AND  M2.GRP_CUST_ID = G.GRP_CUST_ID(+)
--               AND  M2.GRP_CNTT_TPCD = G.GRP_CNTT_TPCD(+)
--             UNION  ALL   
--            SELECT  /*+ USE_HASH(M2 A) FULL(A) FULL(M2) */
--                    M2.GRP_CNTT_ADNO
--                   ,M2.HIST_NO
--                   ,M2.CASE_SQNO
--                   ,M2.GROU_CLTN_MGMT_NO
--                   ,M2.GROU_CLTN_SQNO   
--                   ,M2.DETL_SQNO
--                   ,M2.GRP_CUST_ID
--                   ,M2.GRP_CNTT_TPCD
--                   ,M2.ADMN_LPNO
--                   ,M2.COLL_METD_CODE
--                   ,'D' DML_FLAG
--              FROM  W_ASIS A 
--                   ,MAPKEY_TBL_BACBCTGCDT M2   -- MAPKEY단체수금상세
--             WHERE  1=1
--               AND  A.GRP_CNTT_ADNO(+) = M2.GRP_CNTT_ADNO
--               AND  A.HIST_NO(+) = M2.HIST_NO
--               AND  A.CASE_SQNO(+) = M2.CASE_SQNO
--               AND  A.GRP_CNTT_ADNO IS NULL 
--            ) A
--       ON  (   A.GRP_CNTT_ADNO = T.GRP_CNTT_ADNO
--               AND  A.HIST_NO = T.HIST_NO
--               AND  A.CASE_SQNO = T.CASE_SQNO
--           )
--     WHEN  MATCHED THEN
--           UPDATE SET
--              T.CHNG_DT = SYSDATE
--             ,T.DML_FLAG = A.DML_FLAG
--     WHEN  NOT MATCHED THEN 
--           INSERT (T.ASIS_TAB, T.GRP_CNTT_ADNO, T.HIST_NO, T.CASE_SQNO, T.GROU_CLTN_MGMT_NO, T.GROU_CLTN_SQNO, T.DETL_SQNO, T.CRET_DT, T.CHNG_DT, T.DML_FLAG
--                   ,T.GRP_CUST_ID, T.GRP_CNTT_TPCD, T.ADMN_LPNO, T.COLL_METD_CODE)
--           VALUES ('TB_CPADMTCH', A.GRP_CNTT_ADNO, A.HIST_NO, A.CASE_SQNO, A.GROU_CLTN_MGMT_NO, A.GROU_CLTN_SQNO, A.DETL_SQNO, SYSDATE, NULL, A.DML_FLAG
--                   ,A.GRP_CUST_ID, A.GRP_CNTT_TPCD, A.ADMN_LPNO, A.COLL_METD_CODE)
--           LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCTGCDT  REJECT LIMIT 10
--     ;
--
    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCTGCDT;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCDT','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    ROLLBACK;  
    V_SQLERRM:=SQLERRM;
                                                                                                                          
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
  --  MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCDT','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


==================================
MAPKEY_TBL_BACBCTGCMN_단체수금관리번호_010_Create_Object



--SELECT  /*+ PARALLEL(A 4) */
--        GRP_CUST_ID
--       ,GRP_CNTT_TPCD
--       ,ADMN_LPNO
--       ,COLL_METD_CODE
--       ,GRP_CNTT_ADNO
--       ,ROW_NUMBER() OVER(PARTITION BY GRP_CNTT_ADNO ORDER BY GRP_CUST_ID, GRP_CNTT_TPCD,ADMN_LPNO,COLL_METD_CODE) GROU_CLTN_SQNO
--  FROM  TB_CPADMTCR  A
-- ;
-- 
 
 /* 1. MAPKEY TABLE 생성 */
 
-- CREATE TABLE MAPKEY_TBL_BACBCTGCMN (
--    GRP_CUST_ID     VARCHAR2(10)
--   ,GRP_CNTT_TPCD   VARCHAR2(10)
----   ,ADMN_LPNO	    VARCHAR2(8)  -- 관리설계사고유번호	
----   ,COLL_METD_CODE	VARCHAR2(10) -- 수금방법코드	
--   ,GROU_CLTN_MGMT_NO VARCHAR2(20)
--   ,CRET_DT DATE 
--   ,CHNG_DT DATE
--   ,DML_FLAG VARCHAR2(10)    
--   ,GRP_CNTT_ADNO     VARCHAR2(12)    
--   ,LAST_CHMN_MPNO	  VARCHAR2(8)   -- 최종변경자사번
--   ,LAST_CHNG_DTTM	  DATE	-- 최종변경일시
--   ,PGM_ID	VARCHAR2(50)  -- 프로그램ID
-- )
-- NOLOGGING
-- ;
-- 
-- COMMENT ON TABLE MAPKEY_TBL_BACBCTGCMN IS 'MAPKEY단체수금관리번호';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GRP_CUST_ID IS 'ASIS 고객ID';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GRP_CNTT_TPCD   IS 'ASIS 단체계약유형코드';
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GROU_CLTN_MGMT_NO   IS 'TOBE 단체수금관리번호'; 
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GRP_CNTT_ADNO IS 'ASIS 단체계약관리번호'; 
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.LAST_CHMN_MPNO IS 'ASIS 최종변경자사번'; 
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.LAST_CHNG_DTTM IS 'ASIS 최종변경일시'; 
-- COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.PGM_ID IS 'ASIS 프로그램ID';
-- 
-- 
  DROP TABLE MAPKEY_TBL_BACBCTGCMN  PURGE;
  CREATE TABLE MAPKEY_TBL_BACBCTGCMN (
    ASIS_TAB         VARCHAR2(50)
   ,GRP_CNTT_ADNO     VARCHAR2(12)    
   ,GROU_CLTN_MGMT_NO VARCHAR2(20)
   ,CRET_DT DATE 
   ,CHNG_DT DATE
   ,DML_FLAG VARCHAR2(10)  
   ,GRP_CUST_ID     VARCHAR2(10)
   ,GRP_CNTT_TPCD   VARCHAR2(10)
   ,LAST_CHMN_MPNO	  VARCHAR2(8)   -- 최종변경자사번
   ,LAST_CHNG_DTTM	  DATE	-- 최종변경일시
   ,PGM_ID	VARCHAR2(50)  -- 프로그램ID
 )
 NOLOGGING
 ;
 
 COMMENT ON TABLE MAPKEY_TBL_BACBCTGCMN IS 'MAPKEY단체수금관리번호';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GRP_CUST_ID IS 'ASIS 고객ID';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GRP_CNTT_TPCD   IS 'ASIS 단체계약유형코드';
 COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GROU_CLTN_MGMT_NO   IS 'TOBE 단체수금관리번호'; 
 COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.GRP_CNTT_ADNO IS 'ASIS 단체계약관리번호'; 
 COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.LAST_CHMN_MPNO IS 'ASIS 최종변경자사번'; 
 COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.LAST_CHNG_DTTM IS 'ASIS 최종변경일시'; 
 COMMENT ON COLUMN MAPKEY_TBL_BACBCTGCMN.PGM_ID IS 'ASIS 프로그램ID';
 
 
 
 /* 2. MAPKEY ERRORLOG 테이블 생성*/
DROP TABLE ERR$_MAPKEY_TBL_BACBCTGCMN PURGE;
EXEC DBMS_ERRLOG.CREATE_ERROR_LOG(DML_TABLE_NAME => 'MAPKEY_TBL_BACBCTGCMN' , SKIP_UNSUPPORTED=> TRUE);

SELECT  *
  FROM  ERR$_MAPKEY_TBL_BACBCTGCMN
;

SELECT  *
  FROM  MAPKEY_TBL_BACBCTGCMN
;



========================================
MAPKEY_TBL_BACBCTGCMN_단체수금관리번호_020_Procedure

CREATE OR REPLACE PROCEDURE MIG_PRC_MAPKEY_TBL_BACBCTGCMN (                                                                      
    I_WORKFLOW_RUN_ID  NUMBER    DEFAULT NULL,     -- INFA 워크플로우실행ID                                                   
    I_SESSION_NAME     VARCHAR2  DEFAULT NULL,      -- INFA 세션명    
	I_PARAM3            VARCHAR2    DEFAULT NULL,  	-- 적재유형 (초기적재:INIT (OR NULL) , 변경적재:ICRM )
	I_PARAM4            VARCHAR2    DEFAULT NULL,  	-- PARAMETER4
	I_PARAM5            VARCHAR2    DEFAULT NULL,  	-- PARAMETER5
	I_PARAM6            VARCHAR2    DEFAULT NULL,  	-- PARAMETER6
	I_PARAM7            VARCHAR2    DEFAULT NULL,  	-- PARAMETER7
	I_PARAM8            VARCHAR2    DEFAULT NULL  	-- PARAMETER8                                                       
)                                                                                                                         
IS   
/********************************************************
1. 파일명 : MAPKEY_TBL_BACBCTGCMN_단체수금관리번호.sql
2. 원천 테이블(ASIS) : 
    ㄴTB_CPADMTCR	단체계약관리 : 1,721,282
3. 목적 테이블(TOBE) : 
    ㄴTBL_BACBCTGCMN(단체수금관리번호)
4. ASIS KEY : 
    ㄴTB_CPADMTCR  : GRP_CUST_ID	단체고객ID
                    GRP_CNTT_TPCD	단체계약유형코드
                    ADMN_LPNO	관리설계사고유번호
                    COLL_METD_CODE	수금방법코드
5. TOBE KEY : 
    ㄴGROU_CLTN_MGMT_NO  단체수금관리번호SUID	
6. 생성일자 : 2020.11.02
7. 수정일자 : 
    2021.02.17 : ASIS 단체계약관리번호 = 단체고객ID||단체수금유형코드 건만 이행
    2021.03.25 : 단체계약유형코드 04(개별계약) 이행제외
    2021.11.11 : 전체이행으로 변경
8. 개발 특이사항
    - ASIS 단체계약관리번호 = 단체고객ID||단체수금유형코드
    - TOBE 단체수금관리번호는 ASIS 단체고객ID||단체수금유형코드 (OR 단체계약관리번호)
      기준 GROUP BY  생성
      ==> (★) TOBE 단체수금관리번호는  = ASIS 단체계약관리번호
    - 단, ASIS 동일 단체계약관리번호에 2개의 단체수금유형코드 존재(특정시점)
       ㄴ 2개 단체수금유형코드 중, 1개는 04(개별계약)으로 기존 단체계약건이 개별계약으로 전환된 것으로 보임(확인필요)
       ㄴ 2건 이상의 단체수금유형코드 존재시 04가 아닌 유형으로 매핑(확인필요)
       ㄴ04가 생성되는 시점과, 해당 작업이 마감작업의 일환이라면 이행시 해당작업은 완료 후 이행되어야 함.(확인필요)
*******************************************************/
    V_OWNER        VARCHAR2(100)  ;                                                                                          
    V_TABLE_NAME   VARCHAR2(100)  := 'MAPKEY_TBL_BACBCTGCMN';                                                                 
    V_ROW_CNT      NUMBER         := 0;                                                                                   
    V_ERR_CNT      NUMBER         := 0;                                                                                   
    V_ERR_MSG      VARCHAR2(2000) := NULL; 
    V_MAX_ID       NUMBER         :=0;
    V_SQLERRM      VARCHAR2(2000) := NULL;
BEGIN                                                                                                                     
                                                                                                                          
     /* ------현재 지정 시노님 OWNER 혹은 테이블 OWNER 검색 -------- */                                                                                      
     SELECT OWNER                                                                                                         
     INTO   V_OWNER                                                                                                       
     FROM  (                                                                                                              
             SELECT USER        AS OWNER                                                                                  
               FROM USER_TABLES                                                                                           
              WHERE  TABLE_NAME   = UPPER('MAPKEY_TBL_BACBCTGCMN')                                                             
             UNION  ALL                                                                                                   
             SELECT TABLE_OWNER AS OWNER                                                                                  
               FROM   USER_SYNONYMS                                                                                         
              WHERE  SYNONYM_NAME = UPPER('MAPKEY_TBL_BACBCTGCMN')                                                             
            );                                                                                                            
                                                                                                                          
    /* ------------- 작업로그(START) ------------- */                                                                        
      EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 1024';                                       
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';                                                               
 
      IF I_PARAM3 = 'INIT' OR I_PARAM3 IS NULL THEN
         /* 0. MAPKEY 테이블 초기화(개발단계에서는 KEY를 초기화후 재생성 해야함) */
         MIG_PRC_TRUNCATE('MAPKEY_TBL_BACBCTGCMN');
      END IF;                                                                         
      MIG_PRC_TRUNCATE('ERR$_MAPKEY_TBL_BACBCTGCMN');                                                                         
                                                                                                                          
      MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCMN','N') ;                                                                 
                                                                                                                          
    /* ---------------MIG_PGM_CRE_LOGIC-------------- */  
    /* 1. SUID MAX값 */
--    SELECT  /*+ PARALLEL(A 4) FULL(A) */
--            NVL(GROU_CLTN_MGMT_NO, 0)                                                                                                       , 
--      INTO  V_MAX_ID            
--      FROM  MAPKEY_TBL_BACBCTGCMN A;
    
    /* 2. 신규 'I', 삭제건 'D' 표시 */
    
    INSERT /* 프로그램ID: MIG_PRC_MAPKEY_TBL_BACBCTGCMN(MAPKEY단체수금관리번호), 담당자:류나영 */ 
          /*+ APPEND PARALLEL(T 4) */
    INTO MAPKEY_TBL_BACBCTGCMN T
    (  ASIS_TAB                        /* 1.  */
      ,GRP_CNTT_ADNO                   /* 2. ASIS 단체계약관리번호 */
      ,GROU_CLTN_MGMT_NO               /* 3. TOBE 단체수금관리번호 */
      ,CRET_DT                         /* 4.  */
      ,CHNG_DT                         /* 5.  */
      ,DML_FLAG                        /* 6.  */
      ,GRP_CUST_ID                     /* 7. ASIS 고객ID */
      ,GRP_CNTT_TPCD                   /* 8. ASIS 단체계약유형코드 */
      ,LAST_CHMN_MPNO                  /* 9. ASIS 최종변경자사번 */
      ,LAST_CHNG_DTTM                  /* 10. ASIS 최종변경일시 */
      ,PGM_ID                          /* 11. ASIS 프로그램ID */
     )
     SELECT  /*+ PARALLEL(A 4) NO_MERGE(A)  NO_EXPAND  */
            'TB_CPADMTCR'  ASIS_TAB
           ,GRP_CNTT_ADNO                    /* 2. ASIS 단체계약관리번호 */
           ,GRP_CNTT_ADNO  GROU_CLTN_MGMT_NO /* 3. TOBE 단체수금관리번호 */
           ,SYSDATE
           ,NULL
           ,'I'
           ,GRP_CUST_ID
           ,GRP_CNTT_TPCD
           ,TRIM(SUBSTR(ASIS_SYS_INFO, 15, 8)) LAST_CHMN_MPNO
           ,TO_DATE(SUBSTR(ASIS_SYS_INFO, 1, 14), 'YYYYMMDDHH24MISS') LAST_CHNG_DTTM
           ,SUBSTR(ASIS_SYS_INFO, 23) PGM_ID
      FROM  
            (
            SELECT  /*+ FULL(A) PARALLEL(A 4) */
                    GRP_CNTT_ADNO
                   ,MIN(GRP_CUST_ID)  GRP_CUST_ID
                   ,MAX(GRP_CNTT_TPCD) GRP_CNTT_TPCD
                   ,MAX(TO_CHAR(LAST_CHNG_DTTM, 'YYYYMMDDHH24MISS')||RPAD(LAST_CHMN_MPNO, 8, ' ')||PGM_ID) ASIS_SYS_INFO
              FROM  TB_CPADMTCR A
             WHERE  1=1
               AND  GRP_CNTT_ADNO = GRP_CUST_ID||GRP_CNTT_TPCD 
               AND  GRP_CNTT_TPCD <> '04'   /* 2021.03.25 추가 */
             GROUP  BY GRP_CNTT_ADNO
             ) A
     LOG ERRORS INTO ERR$_MAPKEY_TBL_BACBCTGCMN  REJECT LIMIT 100
     ;

    /* ------------- 작업로그(END  ) ------------- */                                                                        
    V_ROW_CNT := SQL%ROWCOUNT;                                                                                            
                                                                                                                          
    COMMIT;                                                                                                               
                                                                                                                          
    SELECT COUNT(*)           ERR_CNT,                                                                                    
           MIN(ORA_ERR_MESG$) ERR_MSG                                                                                     
    INTO   V_ERR_CNT, V_ERR_MSG                                                                                           
    FROM   ERR$_MAPKEY_TBL_BACBCTGCMN;                                                                                          
                                                                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, V_ERR_MSG );         
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCMN','Y') ;                                                                   
                                                                                                                          
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';                                                              
                                                                                                                          
EXCEPTION                                                                                                                 
    WHEN OTHERS THEN                                                                                                      
    COMMIT;                                                                                                             
    V_SQLERRM := SQLERRM;                                                                                                                    
    /* ------------- 오류로그(END  ) ------------- */                                                                          
    MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, V_ERR_CNT, SQLERRM );           
                                                                                                                          
    MIG_PRC_LOGGING_CHANGE('MAPKEY_TBL_BACBCTGCMN','Y') ;                                                                   
--    DBMS_OUTPUT.PUT_LINE ( SQLERRM||CHR(13)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE ) ;                                                                                                                        
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';                                          
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';      
	RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
                                                                                                                          
END;                                                                                                                      


===================================
MAPKEY_TBL_BACBCTGCMN_단체수금관리번호_031_중복검증

SELECT  /* 중복검증 프로그램ID:MAPKEY_TBL_BACBCTGCMN_단체수금관리번호_중복검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'중복검증'                                          AS VRFC_GBN
       ,'MAPKEY단체수금관리번호 테이블 중복검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCTGCMN'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,NULL                                              ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
        SELECT  COUNT(TOBE_VAL)          AS TOBE_VAL
          FROM  (;
                /* TOBE KEY 중복여부 */
                SELECT  /*+ FULL(A) PARALLEL(A 4) PARALLEL(D 4) */
                                D.NO
                               ,CASE WHEN D.NO = 1 THEN A.GROU_CLTN_MGMT_NO||''
                                     WHEN D.NO = 2 THEN A.GRP_CNTT_ADNO||''
                                     END     KEY_VAL
                               ,COUNT(1)                          AS TOBE_VAL
                          FROM  MAPKEY_TBL_BACBCTGCMN A  
                              ,(SELECT  LEVEL NO
                                  FROM  DUAL
                               CONNECT  BY LEVEL <= 2) D
                        GROUP  BY  D.NO
                               ,CASE WHEN D.NO = 1 THEN A.GROU_CLTN_MGMT_NO||''
                                     WHEN D.NO = 2 THEN A.GRP_CNTT_ADNO||''
                                     END    
                        HAVING COUNT(1) > 1     ;   
                ) A 
        ) A
;


SELECT  *
 FROM (
SELECT  A.*
       ,COUNT(1) OVER(PARTITION BY GROU_CLTN_MGMT_NO) CNT
  FROM  MAPKEY_TBL_BACBCTGCMN  A
 WHERE  1=1
 )
 WHERE CNT > 1

 
 =======================================
 MAPKEY_TBL_BACBCTGCMN_단체수금관리번호_032_집합검증
 
 SELECT  /* 프로그램ID:MAPKEY_TBL_BACBCTGCMN_단체수금관리번호_집합검증 담당자:류나영 */ 
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL         AS SEQ_NO
       ,'집합검증'                                          AS VRFC_GBN
       ,'MAPKEY단체수금관리번호 테이블 집합검증'   AS VRFC_NM
       ,SYSDATE                                           AS VRFC_DT
       ,'MAPKEY_TBL_BACBCTGCMN'                           AS TOBE_TAB
       ,NULL                                              AS TOBE_COL
       ,A.ASIS_VAL                                           ASIS_VAL
       ,A.TOBE_VAL
  FROM  ( 
       SELECT  /*+ NO_MERGE(A) */
               SUM(A.ASIS_VAL)                       AS ASIS_VAL
              ,SUM(A.TOBE_VAL)                        TOBE_VAL   
         FROM  (
			   SELECT  /*+ PARALLEL(4) FULL(A)  */
                       COUNT(1) ASIS_VAL
                      ,NULL     TOBE_VAL
                 FROM  (
                       SELECT  /*+ FULL(A) PARALLEL(A 4) */
                                GRP_CUST_ID||GRP_CNTT_TPCD  GRP_CNTT_ADNO
                               ,COUNT(1) CNT
                          FROM  TB_CPADMTCR A
                         WHERE  GRP_CNTT_ADNO = GRP_CUST_ID||GRP_CNTT_TPCD 
                         GROUP  BY GRP_CUST_ID||GRP_CNTT_TPCD
                       )
                UNION ALL
               SELECT  COUNT(1) ASIS_VAL
                      ,NULL TOBE_VAL
                 FROM  (
                       SELECT  GRP_CNTT_ADNO
                         FROM  MIG_MAPKEY_TBL_BACBCTGPCT_010 A
                        WHERE  1=1
                          AND  G_GRP_CUST_ID IS NULL
                        GROUP  BY  GRP_CNTT_ADNO  
                       ) 
                UNION ALL   
			   SELECT  /*+ FULL(A) PARALLEL(A 4)  */
					   NULL                   AS ASIS_VAL
					  ,COUNT(1)               AS TOBE_VAL
				 FROM  MAPKEY_TBL_BACBCTGCMN A
                WHERE  1=1
                  AND  DML_FLAG IN ('I') 
			  ) A 
        ) A
;

(
                       SELECT  /*+ FULL(A) PARALLEL(A 4) */
                                GRP_CUST_ID||GRP_CNTT_TPCD  GRP_CNTT_ADNO
                               ,COUNT(1) CNT
                          FROM  TB_CPADMTCR A
--                         WHERE  GRP_CNTT_ADNO = GRP_CUST_ID||GRP_CNTT_TPCD 
--                           AND  GRP_CNTT_TPCD <> '04'   /* 2021.03.25 추가 */
                         GROUP  BY GRP_CUST_ID||GRP_CNTT_TPCD
                       )
                UNION ALL   
			   SELECT  /*+ FULL(A) PARALLEL(A 4)  */
					   NULL                   AS ASIS_VAL
					  ,COUNT(1)               AS TOBE_VAL
				 FROM  MAPKEY_TBL_BACBCTGCMN A
                WHERE  1=1
                  AND  DML_FLAG IN ('I') 
			  ) A 
        ) A


		
		==============================
		00. [작업] FIX 테이블 생성
		
/* 변경적재대상 TARGET 삭제
*/
--DELETE /*+ PARALLEL(A 4) */ TBL_FIN_TRAN_RELATIONSHIP A
-- WHERE A.ID IN (SELECT A.PREMPAYM_COMP_ELEMENT_ID 
--                  FROM MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX A 
--                  JOIN MAPKEY_POLICY_NUMBER B 
--                    ON A.POLY_NO        = B.POLY_NO 
--                   AND A.VALD_DVSN_CODE = B.VALD_DVSN_CODE)
--;
--COMMIT;


/* 키고정테이블 생성 */
-- EXECUTE MIG_PRC_TRUNCATE('MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX');

INSERT /*+ APPEND PARALLEL(T 4)*/ INTO MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX T
WITH MAX_ID AS ( SELECT /*+ PARALLEL(F 4) */ 
                        NVL(MAX(PREMPAYM_COMP_ELEMENT_ID),100000000000)                                 AS MAX_ID 
                   FROM MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX F ) 
SELECT /*+ PARALLEL(A 4) */
       A.ASIS_TAB
     , A.ASIS_PK_COL1 
     , A.ASIS_PK_COL2 
     , A.ASIS_PK_COL3 
     , A.ASIS_PK_COL4
     , A.POLY_NO 
     , A.VALD_DVSN_CODE
     , M.MAX_ID + RANK() OVER(ORDER BY A.ASIS_TAB, A.ASIS_PK_COL1, A.ASIS_PK_COL2, A.ASIS_PK_COL3, A.ASIS_PK_COL4 ) AS PREMPAYM_COMP_ELEMENT_ID
  FROM MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_100 A
  LEFT OUTER JOIN MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX B 
    ON A.ASIS_TAB        = B.ASIS_TAB
   AND A.ASIS_PK_COL1    = B.ASIS_PK_COL1
   AND A.ASIS_PK_COL2    = B.ASIS_PK_COL2
   AND A.ASIS_PK_COL3    = B.ASIS_PK_COL3
   AND A.ASIS_PK_COL4    = B.ASIS_PK_COL4
   AND A.VALD_DVSN_CODE  = B.VALD_DVSN_CODE
   AND A.POLY_NO         = B.POLY_NO 
  JOIN MAX_ID M 
    ON 1=1 
 WHERE 1=1 
   AND B.PREMPAYM_COMP_ELEMENT_ID IS NULL
;
COMMIT; 




DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX
(
    ASIS_TAB                     VARCHAR2(50) NULL,
    ASIS_PK_COL1                 VARCHAR2(20) NULL,
    ASIS_PK_COL2                 VARCHAR2(20) NULL,
    ASIS_PK_COL3                 VARCHAR2(20) NULL, 
    ASIS_PK_COL4                 VARCHAR2(20) NULL, 
    POLY_NO                      VARCHAR2(14) NULL,
    VALD_DVSN_CODE               VARCHAR2(1)  NULL, 
    PREMPAYM_COMP_ELEMENT_ID     NUMBER       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 16
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
);
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX ADD CONSTRAINT MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX_PK PRIMARY KEY(PREMPAYM_COMP_ELEMENT_ID);
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_FIX NOLOGGING;


==================================
00. [작업] SESSION

/*
TB_UVCDM002 코드ASIS
TBL_POLICY_NUMBER
TBL_POLY_NO

*/
---------------------------------------------------------------------------------------
-- ERR 로그 

DROP TABLE ERR$_TBL_PAYMENT_ELEMENT PURGE;
CALL DBMS_ERRLOG.CREATE_ERROR_LOG('TBL_PAYMENT_ELEMENT', 'ERR$_TBL_PAYMENT_ELEMENT');

LOG ERRORS INTO ERR$_TBL_PAYMENT_ELEMENT REJECT LIMIT 100 ; 

---------------------------------------------------------------------------------------
-- INFA 로그  
SELECT * FROM CMMASV.MIG_INFA_LOG@DL_DMIG
WHERE  1=1
--AND    WORKLET_NAME LIKE 'wl_TBL_VAO_PREM_COLL_VERSION%'
AND    SESSION_NAME LIKE 'MIG_PRC_MAPKEY_TBL_VAO_PREM_COLL_VERSION_100%'
AND    START_TIME >= TO_DATE('20210125', 'YYYYMMDD')
ORDER BY START_TIME DESC
;
---------------------------------------------------------------------------------------
-- MIG_DATA_VERIFICATION 오류 결과 조회
SELECT * 
  FROM MIG02.MIG_DATA_VERIFICATION@DL_DMIG
 WHERE SEQ_NO IN (
SELECT 
--     VRFC_GBN, VRFC_NM, TOBE_TAB, TOBE_COL,   
       MAX(SEQ_NO) AS SEQ_NO
  FROM MIG02.MIG_DATA_VERIFICATION@DL_DMIG A
  JOIN MIG02.MIG_HPAS_LIST@DL_DMIG B 
    ON A.TOBE_TAB = B.TABLE_ID
 WHERE 1=1
   AND VRFC_NM <> 'Target INSERT 건수 확인' 
   AND TO_CHAR(VRFC_DT,'YYYYMMDDHH24MISS') BETWEEN '20210304141000' AND '20210304190000'
 GROUP BY VRFC_GBN, VRFC_NM, TOBE_TAB, TOBE_COL ) 
   AND TOBE_VAL > 0 
;

---------------------------------------------------------------------------------------
-- 프로시저 COMPILE
SELECT 'ALTER PROCEDURE '||A.OBJECT_NAME||' COMPILE; COMMIT;'                                       AS SQL
  FROM DBA_OBJECTS A
 WHERE 1=1
   AND OWNER = 'MIG02'
   AND OBJECT_TYPE = 'PROCEDURE'
   AND STATUS = 'INVALID'
   AND OBJECT_NAME LIKE '%MIG_DATA_VERFICI%'
;


---------------------------------------------------------------------------------------
-- 수행시간 조회 
-- 수행시간 조회 
SELECT A.TABLE_ID
--     , A.WORKLET_NAME
     , A.TABLE_NAME
--     , A.SESSION_NAME
     , A.RESULT
     , A.SUCCESSFUL_ROWS
     , CASE WHEN A.RESULT = 'RUNNING' THEN NULL ELSE A.DURING END AS DURING
     , CASE WHEN A.RESULT = 'RUNNING' THEN NULL ELSE TO_NUMBER(SUBSTR(REPLACE(A.DURING,':',''),-6,2)) END AS SI
     , CASE WHEN A.RESULT = 'RUNNING' THEN NULL ELSE TO_NUMBER(SUBSTR(REPLACE(A.DURING,':',''),-4,2)) END AS MM
     , CASE WHEN A.RESULT = 'RUNNING' THEN NULL ELSE TO_NUMBER(SUBSTR(REPLACE(A.DURING,':',''),-2,2)) END AS SS
     , A.START_TIME 
     , A.END_TIME
  FROM (SELECT /*+ PARALLEL(A 8) PARALLEL(B 8) USE_HASH(A B) */ 
               A.TABLE_ID
             , A.WORKLET_NAME
             , A.TABLE_NAME
             , A.SESSION_NAME
             , B.RESULT
             , B.SUCCESSFUL_ROWS
             , A.START_TIME 
             , B.END_TIME 
             , TO_TIMESTAMP(B.END_TIME)-TO_TIMESTAMP(A.START_TIME) AS DURING
          FROM (SELECT REPLACE(REPLACE(REPLACE(A.WORKLET_NAME,'wl_',''),'MAPKEY_',''),'_IMSI','') AS TABLE_ID
                     , A.WORKLET_NAME
                     , A.TABLE_NAME
                     , A.SESSION_NAME
                     , MAX(A.START_TIME) AS START_TIME
                  FROM CMMASV.MIG_INFA_LOG@DL_DMIG A
                  JOIN MIG02.MIG_HPAS_LIST@DL_DMIG B
                    ON 1=1
                   AND B.MIG_MAN = '박란영'
                   AND B.MIG_YN = 'Y'
                   AND REPLACE(REPLACE(REPLACE(A.WORKLET_NAME,'wl_',''),'MAPKEY_',''),'_IMSI','') = B.TABLE_ID   
                 WHERE 1=1  
                   AND A.USER_NAME = 'MIG02'
                   AND A.DB_NAME = 'PDNA'
--                   AND A.RESULT = 'SUCCEEDED'
--                   AND TO_CHAR(A.START_TIME,'YYYYMMDD') BETWEEN '20210123' AND '20210127' -- 1월 전건 
--                   AND TO_CHAR(A.START_TIME,'YYYYMMDD') BETWEEN '20210217' AND '20210223' -- 2월 전건 테스트 
                   AND TO_CHAR(A.START_TIME,'YYYYMMDD') BETWEEN '20210326' AND '20210331' -- 4월 전건 테스트 
                 GROUP BY A.WORKLET_NAME
                        , A.TABLE_NAME
                        , A.SESSION_NAME ) A 
          JOIN CMMASV.MIG_INFA_LOG@DL_DMIG B
            ON A.SESSION_NAME = B.SESSION_NAME
           AND A.START_TIME   = B.START_TIME 
         WHERE 1=1 
         ORDER BY A.TABLE_ID
                , A.START_TIME ) A  
;
/* 프로시저 작업 진행중 확인 */
SELECT TO_TIMESTAMP(LAST_UPDATE_TIME)-TO_TIMESTAMP(START_TIME)                                      AS DURING 
     , TOTALWORK - SOFAR                                                                            AS LEFT_WORK
     , A.* 
  FROM V$SESSION_LONGOPS A
 WHERE (SID,SERIAL#) IN (SELECT A.SID
                              , A.SERIAL#
                           FROM V$SESSION A  
                           JOIN V$SQL B 
                             ON A.SQL_ID = B.SQL_ID
                         --   AND B.SQL_TEXT LIKE '%TBL_PREM_PAYMENT_COMP_ELEMENT%'
                          WHERE 1=1
                         --   AND A.OSUSER IN ('wasadmin')
                            AND A.STATUS = 'ACTIVE' )
   AND A.SQL_ID IN (
                    'bhy8tq9yfvkwk'
                    ) 
 ORDER BY START_TIME DESC
;

/* SESSION 확인 */
SELECT A.SID
     , A.SERIAL#
     , A.OSUSER
     , A.SCHEMANAME
     , A.STATUS
     , A.SQL_ID
     , A.SQL_EXEC_START
     , B.SQL_TEXT
     , A.SQL_EXEC_ID
  FROM V$SESSION A 
  JOIN V$SQL B 
    ON A.SQL_ID = B.SQL_ID
   AND B.SQL_TEXT LIKE '%%'
 WHERE 1=1
   AND A.OSUSER = '1073925'
--   AND A.OSUSER = 'oracle'
--   AND A.OSUSER = 'wasadmin'
--   AND A.OSUSER = 'swadmin' -- INFA 
   AND A.STATUS = 'ACTIVE' 
   AND A.SCHEMANAME = 'MIG02'
;
---------------------------------------------------------------------------------------
   


/* SQL 확인 */
SELECT DISTINCT A.OSUSER
     , A.SCHEMANAME
     , A.STATUS
     , A.SQL_ID
     , B.SQL_TEXT
  FROM V$SESSION A 
  JOIN V$SQL B 
    ON A.SQL_ID = B.SQL_ID
   AND B.SQL_TEXT LIKE '%%'
 WHERE 1=1
--   AND A.OSUSER = '1073925'
--   AND A.OSUSER = 'oracle'
--   AND A.OSUSER = 'wasadmin'
   AND A.STATUS = 'ACTIVE' 
;

/* KILL SESSION */
EXEC MIG_PRC_KILL_SESSION (00,00)
;

--3.52
/* 테이블 용량 확인 */
SELECT /*+ PARALLEL(A 4) */
       OWNER
     , SEGMENT_NAME
     , SUM(BYTES)/1024/1024/1024 AS GB
     , SYSDATE
  FROM DBA_SEGMENTS A
 WHERE 1=1
   AND SEGMENT_NAME LIKE '%TBL_PREM_PAYMENT%'
--   AND SEGMENT_NAME = 'MAPKEY_TBL_VAO_PREM_COLL_VERSION_200'
   AND OWNER IN ('MIG02')
 GROUP BY OWNER, SEGMENT_NAME 
 ORDER BY 1,2
;

/* 잔여 TABLE_SPACE 확인 */
SELECT SUM(BYTES)/1024/1024/1024
  FROM DBA_FREE_SPACE
 WHERE TABLESPACE_NAME = 'TSD_MIG03'
;

/* TEMP TABLE_SPACE 확인 */
-- 잔여 TEMP BLOCK 조회 
SELECT TABLESPACE_NAME
     , TOTAL_BLOCKS
     , USED_BLOCKS
     , FREE_BLOCKS
     , SYSDATE 
  FROM V$SORT_SEGMENT
;

--- 어떤 SQL 이 TEMP를 사용하고 있는지 조회 ( GROUP BY )
SELECT 
--       A.SID
--    , A.SERIAL#
--    , 
       A.OSUSER
     , A.SQL_ID
--    , B.TABLESPACE
     , SUM(B.BLOCKS)
--    , C.SQL_TEXT
  FROM V$SESSION A
     , V$TEMPSEG_USAGE B
     , V$SQLAREA C 
 WHERE 1=1
   AND A.SADDR      = B.SESSION_ADDR
   AND C.ADDRESS    = A.SQL_ADDRESS
   AND C.HASH_VALUE = A.SQL_HASH_VALUE
 GROUP BY A.OSUSER, A.SQL_ID --, A.SID, A.SERIAL# 
 ORDER BY A.OSUSER, A.SQL_ID --, A.SID, A.SERIAL# 
 ;
 
-- HASH AREA 조정  

-- 536870912 (500MB)
-- 1073741824 (1G)
-- 2147483648 (2G)

   EXECUTE IMMEDIATE 'ALTER SESSION SET WORKAREA_SIZE_POLICY=MANUAL';
   EXECUTE IMMEDIATE 'ALTER SESSION SET HASH_AREA_SIZE=104857600';
   EXECUTE IMMEDIATE 'ALTER SESSION SET SORT_AREA_SIZE=104857600';

   
/* HPAS 테이블 PROCEDURE 일괄 COMPILE */

-- 최종 테이블
SELECT 'ALTER PROCEDURE '||A.OBJECT_NAME||' COMPILE; COMMIT;'                                       AS SQL
  FROM DBA_OBJECTS A
  JOIN MIG02.MIG_HPAS_LIST@DL_DMIG B 
    ON B.TABLE_ID = REPLACE(SUBSTR(A.OBJECT_NAME,1,LENGTH(A.OBJECT_NAME)-4),'MIG_PRC_','')
 WHERE 1=1
   AND OWNER = 'MIG01'
   AND OBJECT_TYPE = 'PROCEDURE'
   AND STATUS = 'INVALID'
-- mapkey 중간 테이블   
UNION ALL
SELECT 'ALTER PROCEDURE '||A.OBJECT_NAME||' COMPILE; COMMIT;'                                       AS SQL
  FROM DBA_OBJECTS A
  JOIN MIG02.MIG_HPAS_LIST@DL_DMIG B 
    ON B.TABLE_ID = REPLACE(SUBSTR(A.OBJECT_NAME,1,LENGTH(A.OBJECT_NAME)-8),'MIG_PRC_MAPKEY_','')
 WHERE 1=1
   AND OWNER = 'MIG01'
   AND OBJECT_TYPE = 'PROCEDURE'
   AND STATUS = 'INVALID'
-- mapkey 최종 테이블   
UNION ALL
SELECT 'ALTER PROCEDURE '||A.OBJECT_NAME||' COMPILE; COMMIT;'                                       AS SQL
  FROM DBA_OBJECTS A
  JOIN MIG02.MIG_HPAS_LIST@DL_DMIG B 
    ON B.TABLE_ID = REPLACE(SUBSTR(A.OBJECT_NAME,1,LENGTH(A.OBJECT_NAME)-4),'MIG_PRC_MAPKEY_','')
 WHERE 1=1
   AND OWNER = 'MIG01'
   AND OBJECT_TYPE = 'PROCEDURE'
   AND STATUS = 'INVALID'
-- mig 테이블   
UNION ALL
SELECT 'ALTER PROCEDURE '||A.OBJECT_NAME||' COMPILE; COMMIT;'                                       AS SQL
  FROM DBA_OBJECTS A
  JOIN MIG02.MIG_HPAS_LIST@DL_DMIG B 
    ON B.TABLE_ID = REPLACE(SUBSTR(A.OBJECT_NAME,1,LENGTH(A.OBJECT_NAME)-8),'MIG_PRC_','')
 WHERE 1=1
   AND OWNER = 'MIG01'
   AND OBJECT_TYPE = 'PROCEDURE'
   AND STATUS = 'INVALID'
;



==========================
00. [작업] 테이블 생성_20201223
		







DROP TABLE ISRCVPRH CASCADE CONSTRAINTS PURGE;
CREATE TABLE ISRCVPRH
(
    POLY_NO        VARCHAR2(27) NOT NULL,
    RECV_DLNG_SQNO NUMBER(15)   NOT NULL,
    RECV_SEQ_NO    NUMBER(3)    NOT NULL,
    VALD_DVSN_CODE VARCHAR2(1)      NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ISRCVPRH NOLOGGING;

----------------------------------------------------------------------------------------------------
/* ERR_TBL_PREM_PAYMENT_COMP */
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_001 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_001
(
    VALD_DVSN_CODE             VARCHAR2(1)    NULL, 
    POLY_NO                    VARCHAR2(9)    NULL,
    PREM_PAYMENT_ID            NUMBER(19)     NOT NULL,
    COMP_AMOUNT                NUMBER         NULL,
    COMP_ORIG_PREMIUM_AMOUNT   NUMBER         NULL,
    COMP_PREMIUM_AMOUNT        NUMBER         NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_001 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_005 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_005
(
    VALD_DVSN_CODE             VARCHAR2(1)    NULL, 
    POLY_NO                    VARCHAR2(9)    NULL, 
    POLICY_NUMBER              VARCHAR2(9)    NULL, 
    PREMIUM_KIND_TYPE_CODE     VARCHAR2(15)   NULL,
    PREM_PAYMENT_ID            NUMBER(19)     NOT NULL,
    ORIG_PREMIUM_AMOUNT        NUMBER         NULL,
    COMP_ORIG_PREMIUM_AMOUNT   NUMBER         NULL,
    ORIG_PREMIUM_AMOUNT_ERR    VARCHAR2(100)  NULL, 
    PREMIUM_AMOUNT             NUMBER         NULL,
    COMP_PREMIUM_AMOUNT        NUMBER         NULL, 
    PREMIUM_AMOUNT_ERR         VARCHAR2(100)  NULL,
    AMOUNT                     NUMBER         NULL, 
    COMP_AMOUNT                NUMBER         NULL,
    AMOUNT_ERR                 VARCHAR2(100)  NULL,
    ERR_STATUS                 VARCHAR2(100)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_005 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_010 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_010
(
    ETC                          VARCHAR2(255) NULL,
    ETC_DTL                      VARCHAR2(255) NULL,
    POLY_NO                      VARCHAR2(14)  NULL,
    PREM_PAYMENT_ID              NUMBER        NULL,
    RECV_DLNG_DT                 VARCHAR2(12)  NULL,
    PREMIUM_KIND_TYPE_CODE       VARCHAR2(15)  NULL,
    P_AGREEMENT_ID               NUMBER(19)    NULL,
    C_AGREEMENT_ID               NUMBER(19)    NULL,
    C_AGREEMENT_NUMBER           VARCHAR2(255) NULL,
    POLICY_ORIG_PREMIUM_AMOUNT   NUMBER        NULL,
    COMP_SUM_ORIG_PREMIUM_AMOUNT NUMBER        NULL,
    COMP_ORIG_PREMIUM_AMOUNT     NUMBER        NULL,
    POLICY_PREMIUM_AMOUNT        NUMBER        NULL,
    COMP_SUM_PREMIUM_AMOUNT      NUMBER        NULL,
    COMP_PREMIUM_AMOUNT          NUMBER        NULL,
    POLICY_AMOUNT                NUMBER        NULL,
    COMP_SUN_AMOUNT              NUMBER        NULL,
    COMP_AMOUNT                  NUMBER        NULL,
    CNTT_STAT_CODE               VARCHAR2(10)  NULL,
    AGMT_PYMT_STATE_CODE         VARCHAR2(2)   NULL,
    AGMT_PYMT_STATE_REASON_CODE  VARCHAR2(2)   NULL,
    GOOD_RELN_CODE               VARCHAR2(10)  NULL,
    GOOD_CODE_DTAL               VARCHAR2(10)  NULL,
    IRKD_CODE_DTAL               VARCHAR2(10)  NULL,
    PAYM_YM                      VARCHAR(8)    NULL,
    PREM_CPAY_REYM               VARCHAR(8)    NULL,
    P_PAYM_CYCL_CODE             VARCHAR2(30)  NULL,
    C_PAYM_CYCL_CODE             VARCHAR2(30)  NULL,
    PAYMENT_METHOD_TYPE_CODE     VARCHAR2(10)  NULL, 
    TARGET_YN                    VARCHAR2(10)  NULL,
    ERR_STATUS                   VARCHAR2(100) NULL,
    ASIS_TAB                     VARCHAR2(20)  NULL,
    ASIS_PK_COL1                 VARCHAR2(20)  NULL,
    ASIS_PK_COL2                 VARCHAR2(20)  NULL,
    ASIS_PK_COL3                 VARCHAR2(20)  NULL,
    ASIS_PK_COL4                 VARCHAR2(20)  NULL,
    ASIS_2_TAB                   VARCHAR2(11)  NULL,
    ASIS_2_PK_COL1               VARCHAR2(20)  NULL,
    ASIS_2_PK_COL2               VARCHAR2(20)  NULL,
    ASIS_2_PK_COL3               VARCHAR2(20)  NULL,
    ASIS_2_PK_COL4               VARCHAR2(20)  NULL,
    VALD_DVSN_CODE               VARCHAR2(1)   NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_010 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_030 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_030
(
    VALD_DVSN_CODE             VARCHAR2(1)    NULL, 
    POLY_NO                    VARCHAR2(9)    NULL,
    PREM_PAYMENT_ID            NUMBER(19)     NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_030 NOLOGGING;


----------------------------------------------------------------------------------------------------
/* ERR_TBL_PREM_PAYMENT_COMP_ELEMENT */
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_050 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_050
(
    VALD_DVSN_CODE             VARCHAR2(1)   NULL,
    POLY_NO                    VARCHAR2(14)  NULL,
    PREM_PAYMENT_ELEMENT_ID    NUMBER(19)    NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_050 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_100
(
    ETC                        VARCHAR2(255) NULL,
    PREM_PAYMENT_ELEMENT_ID    NUMBER(19)    NOT NULL,
    FIN_ELEMENT_TYPE_KIND_CODE VARCHAR2(10)  NULL,
    BASE_AMOUNT                NUMBER(24,12) NULL,
    APPLIED_RATE               NUMBER(18,12) NULL, 
    ASIS_TAB                   VARCHAR2(11)  NULL,
    ASIS_PK_COL1               VARCHAR2(9)   NULL,
    ASIS_PK_COL2               VARCHAR2(10)  NULL,
    ASIS_PK_COL3               VARCHAR2(10)  NULL,
    ASIS_PK_COL4               VARCHAR2(10)  NULL,
    ASIS_PK_COL5               VARCHAR2(20)  NULL,
    VALD_DVSN_CODE             VARCHAR2(1)   NULL,
    POLY_NO                    VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_030 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_030
(
    PREM_PAYMENT_ID             NUMBER        NULL,
    PREM_PAYMENT_ELEMENT_ID     NUMBER        NULL,
    PREM_KIND_DVCD              VARCHAR2(10)  NULL,  
    RCWC_METD_DVSN              VARCHAR2(10)  NULL,  
    AGREEMENT_ID                NUMBER(19)    NULL,
    AGREEMENT_NUMBER            VARCHAR2(255) NULL,
    DSCT_PREM                   NUMBER(12)    NULL,
    PRDC_KIND_CD                VARCHAR2(15)  NULL,
    RECV_DLNG_DT                VARCHAR2(12)  NULL,
    MONEY_PROV_ID               NUMBER        NULL,
    MONEY_PROV_ELEMENT_ID       NUMBER        NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_ELEMENT_030 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE ERR_TBL_PREM_PAYMENT_COMP_077 CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERR_TBL_PREM_PAYMENT_COMP_077
(
    ETC                          VARCHAR2(255) NULL,
    ETC_DTL                      VARCHAR2(255) NULL,
    POLY_NO                      VARCHAR2(14)  NULL,
    PREM_PAYMENT_ID              NUMBER        NULL,
    PREM_PAYMENT_COMP_ID         NUMBER        NULL,
    RECV_DLNG_DT                 VARCHAR2(12)  NULL,
    PREMIUM_KIND_TYPE_CODE       VARCHAR2(15)  NULL,
    P_AGREEMENT_ID               NUMBER(19)    NULL,
    C_AGREEMENT_ID               NUMBER(19)    NULL,
    C_AGREEMENT_NUMBER           VARCHAR2(255) NULL,
    POLICY_ORIG_PREMIUM_AMOUNT   NUMBER        NULL,
    COMP_SUM_ORIG_PREMIUM_AMOUNT NUMBER        NULL,
    COMP_ORIG_PREMIUM_AMOUNT     NUMBER        NULL,
    POLICY_PREMIUM_AMOUNT        NUMBER        NULL,
    COMP_SUM_PREMIUM_AMOUNT      NUMBER        NULL,
    COMP_PREMIUM_AMOUNT          NUMBER        NULL,
    POLICY_AMOUNT                NUMBER        NULL,
    COMP_SUM_AMOUNT              NUMBER        NULL,
    COMP_AMOUNT                  NUMBER        NULL,
    CNTT_STAT_CODE               VARCHAR2(10)  NULL,
    AGMT_PYMT_STATE_CODE         VARCHAR2(2)   NULL,
    AGMT_PYMT_STATE_REASON_CODE  VARCHAR2(2)   NULL,
    GOOD_RELN_CODE               VARCHAR2(10)  NULL,
    GOOD_CODE_DTAL               VARCHAR2(10)  NULL,
    IRKD_CODE_DTAL               VARCHAR2(10)  NULL,
    PAYM_YM                      VARCHAR(8)    NULL,
    PREM_CPAY_REYM               VARCHAR(8)    NULL,
    P_PAYM_CYCL_CODE             VARCHAR2(30)  NULL,
    C_PAYM_CYCL_CODE             VARCHAR2(30)  NULL,
    PAYMENT_METHOD_TYPE_CODE     VARCHAR2(10)  NULL, 
    TARGET_YN                    VARCHAR2(10)  NULL,
    ERR_STATUS                   VARCHAR2(100) NULL,
    ASIS_TAB                     VARCHAR2(20)  NULL,
    ASIS_PK_COL1                 VARCHAR2(20)  NULL,
    ASIS_PK_COL2                 VARCHAR2(20)  NULL,
    ASIS_PK_COL3                 VARCHAR2(20)  NULL,
    ASIS_PK_COL4                 VARCHAR2(20)  NULL,
    ASIS_2_TAB                   VARCHAR2(11)  NULL,
    ASIS_2_PK_COL1               VARCHAR2(20)  NULL,
    ASIS_2_PK_COL2               VARCHAR2(20)  NULL,
    ASIS_2_PK_COL3               VARCHAR2(20)  NULL,
    ASIS_2_PK_COL4               VARCHAR2(20)  NULL,
    VALD_DVSN_CODE               VARCHAR2(1)   NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE ERR_TBL_PREM_PAYMENT_COMP_077 NOLOGGING;

----------------------------------------------------------------------------------------------------
/* MAPKEY_TBL_PREM_PAYMENT_SEQ */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ_050 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ_050
(
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(14)  NULL,
   RCWC_METD_DVSN             VARCHAR2(30)  NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ_050 NOLOGGING;
CREATE SYNONYM MIG01.MAPKEY_TBL_PREM_PAYMENT_SEQ_050 FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_SEQ_050;
CREATE SYNONYM MIG03.MAPKEY_TBL_PREM_PAYMENT_SEQ_050 FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_SEQ_050;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ_100
(
   VALD_DVSN_CODE  VARCHAR2(1)  NULL, 
   POLY_NO         VARCHAR2(9)  NULL,
   RECV_DLNG_SQNO  NUMBER(15)   NULL,
   RECV_SEQ_NO     NUMBER(3)    NULL,
   CNCL_SEQ_NO     NUMBER(3)    NULL,
   ASIS_TAB        VARCHAR2(50) NULL,
   ASIS_PK_COL1    VARCHAR2(50) NULL,
   ASIS_PK_COL2    VARCHAR2(50) NULL,
   ASIS_PK_COL3    VARCHAR2(50) NULL,
   ASIS_PK_COL4    VARCHAR2(50) NULL,
   ASIS_PK_COL5    VARCHAR2(50) NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ_100 NOLOGGING;
CREATE SYNONYM MIG01.MAPKEY_TBL_PREM_PAYMENT_SEQ_100 FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_SEQ_100;
CREATE SYNONYM MIG03.MAPKEY_TBL_PREM_PAYMENT_SEQ_100 FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_SEQ_100;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ
(
   VALD_DVSN_CODE  VARCHAR2(1)  NULL, 
   POLY_NO         VARCHAR2(9)  NULL,
   ASIS_TAB        VARCHAR2(50) NULL,
   ASIS_PK_COL1    VARCHAR2(50) NULL,
   ASIS_PK_COL2    VARCHAR2(50) NULL,
   ASIS_PK_COL3    VARCHAR2(50) NULL,
   ASIS_PK_COL4    VARCHAR2(50) NULL,
   ASIS_PK_COL5    VARCHAR2(50) NULL,
   PREM_PAYMENT_ID NUMBER       NOT NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_SEQ NOLOGGING;
CREATE SYNONYM MIG01.MAPKEY_TBL_PREM_PAYMENT_SEQ FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_SEQ;
CREATE SYNONYM MIG03.MAPKEY_TBL_PREM_PAYMENT_SEQ FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_SEQ;

----------------------------------------------------------------------------------------------------
-- 이행에서 제외되는 보험료입금 대상 
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_NON CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_NON
(
   VALD_DVSN_CODE  VARCHAR2(1)  NULL, 
   POLY_NO         VARCHAR2(9)  NULL,
   ASIS_TAB        VARCHAR2(50) NULL,
   ASIS_PK_COL1    VARCHAR2(50) NULL,
   ASIS_PK_COL2    VARCHAR2(50) NULL,
   ASIS_PK_COL3    VARCHAR2(50) NULL,
   ASIS_PK_COL4    VARCHAR2(50) NULL,
   ASIS_PK_COL5    VARCHAR2(50) NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_NON NOLOGGING;
CREATE SYNONYM MIG01.MAPKEY_TBL_PREM_PAYMENT_NON FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_NON;
CREATE SYNONYM MIG03.MAPKEY_TBL_PREM_PAYMENT_NON FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_NON;

----------------------------------------------------------------------------------------------------
-- 이행에서 제외되는 보험료입금별 할인 대상 
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_NON CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_NON
(
   VALD_DVSN_CODE  VARCHAR2(1)  NULL, 
   POLY_NO         VARCHAR2(9)  NULL,
   DESC_SEQ        NUMBER       NULL,
   DSCT_PREM       NUMBER       NULL,
   PRDC_KIND_CD    VARCHAR2(10) NULL,
   ASIS_TAB        VARCHAR2(50) NULL,
   ASIS_PK_COL1    VARCHAR2(50) NULL,
   ASIS_PK_COL2    VARCHAR2(50) NULL,
   ASIS_PK_COL3    VARCHAR2(50) NULL,
   ASIS_PK_COL4    VARCHAR2(50) NULL,
   ASIS_PK_COL5    VARCHAR2(50) NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_NON NOLOGGING;
CREATE SYNONYM MIG01.MAPKEY_TBL_PREM_PAYMENT_ELEMENT_NON FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_ELEMENT_NON;
CREATE SYNONYM MIG03.MAPKEY_TBL_PREM_PAYMENT_ELEMENT_NON FOR MIG02.MAPKEY_TBL_PREM_PAYMENT_ELEMENT_NON;
----------------------------------------------------------------------------------------------------
-- 보험료입금취소의 이행대상 (전체기준)
DROP TABLE MIG_TB_ISRCVPRH CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TB_ISRCVPRH
(
   VALD_DVSN_CODE  VARCHAR2(1)  NULL, 
   POLY_NO         VARCHAR2(9)  NULL,
   ASIS_TAB        VARCHAR2(50) NULL,
   ASIS_PK_COL1    VARCHAR2(50) NULL,
   ASIS_PK_COL2    VARCHAR2(50) NULL,
   ASIS_PK_COL3    VARCHAR2(50) NULL,
   ASIS_PK_COL4    VARCHAR2(50) NULL,
   ASIS_PK_COL5    VARCHAR2(50) NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TB_ISRCVPRH NOLOGGING;

CREATE SYNONYM MIG01.MIG_TB_ISRCVPRH FOR MIG02.MIG_TB_ISRCVPRH;
CREATE SYNONYM MIG03.MIG_TB_ISRCVPRH FOR MIG02.MIG_TB_ISRCVPRH;
----------------------------------------------------------------------------------------------------
/* MAPKEY_POLICY_NUMBER */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_POLICY_NUMBER CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_POLICY_NUMBER
(
   POLY_NO         VARCHAR2(9) NULL,
   POLICY_NUMBER   VARCHAR2(9) NULL,
   DOMAIN_PART_KEY VARCHAR2(2) NULL,
   CI_FLAG         VARCHAR2(2) NULL, 
   VALD_DVSN_CODE  VARCHAR2(1) NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_POLICY_NUMBER NOLOGGING;
----------------------------------------------------------------------------------------------------
/* TBL_MONEY_SCHEDULER */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_MONEY_SCHEDULER CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_MONEY_SCHEDULER
(
    MONEY_SCHEDULER_ID   NUMBER(19)    NOT NULL,
    AGREEMENT_ID         NUMBER(19)    NOT NULL,
    AGREEMENT_NUMBER     VARCHAR2(255) NOT NULL,
    ORIGIN_AGREEMENT_ID  NUMBER(19)    NOT NULL,
    STRT_ON              DATE          NULL,
    FRST_CNTT_DATE       VARCHAR2(8)   NULL,
    FRST_CNTT_ON         DATE          NULL, 
    FRST_CNTT_DAY        VARCHAR2(8)   NULL,
    LAST_DAY_CNTT_YM     DATE          NULL, 
    LAST_CHMN_MPNO       VARCHAR2(14)  NULL,
    LAST_CHNG_DTTM       DATE          NULL,
    CNTT_PAYM_CYCD       VARCHAR2(30)  NULL,
    PREM_CPAY_REYM       VARCHAR2(9)   NULL,
    ASIS_TAB             VARCHAR2(50)  NULL,
    ASIS_PK_COL1         VARCHAR2(20)  NULL,
    VALD_DVSN_CODE       VARCHAR2(1)   NULL,
    POLY_NO              VARCHAR2(9)   NULL,
    POLICY_NUMBER        VARCHAR2(9)   NULL,
    MIG_NUM              NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_MONEY_SCHEDULER NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_MONEY_SCHEDULER_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_MONEY_SCHEDULER_FIX
(
    MONEY_SCHEDULER_ID   NUMBER(19)    NOT NULL,
    AGREEMENT_ID         NUMBER(19)    NOT NULL,
    AGREEMENT_NUMBER     VARCHAR2(255) NOT NULL,
    ORIGIN_AGREEMENT_ID  NUMBER(19)    NOT NULL,
    STRT_ON              DATE          NULL,
    FRST_CNTT_DATE       VARCHAR2(8)   NULL,
    FRST_CNTT_ON         DATE          NULL, 
    FRST_CNTT_DAY        VARCHAR2(8)   NULL,
    LAST_DAY_CNTT_YM     DATE          NULL, 
    LAST_CHMN_MPNO       VARCHAR2(14)  NULL,
    LAST_CHNG_DTTM       DATE          NULL,
    CNTT_PAYM_CYCD       VARCHAR2(30)  NULL,
    PREM_CPAY_REYM       VARCHAR2(9)   NULL,
    ASIS_TAB             VARCHAR2(50)  NULL,
    ASIS_PK_COL1         VARCHAR2(20)  NULL,
    VALD_DVSN_CODE       VARCHAR2(1)   NULL,
    POLY_NO              VARCHAR2(9)   NULL,
    POLICY_NUMBER        VARCHAR2(9)   NULL,
    MIG_NUM              NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_MONEY_SCHEDULER_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_MONEY_SCHEDULER_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_MONEY_SCHEDULER_900
(
   DTYPE                         VARCHAR2(3)   NOT NULL,
   ID                            NUMBER(19)    NOT NULL,
   CREATE_AT                     TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID                VARCHAR2(100) NULL,
   CREATOR_ID                    VARCHAR2(100) NULL,
   CREATOR_IP                    VARCHAR2(100) NULL,
   LAST_MODIFIED_AT              TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID         VARCHAR2(100) NULL,
   LAST_MODIFIER_ID              VARCHAR2(100) NULL,
   LAST_MODIFIER_IP              VARCHAR2(100) NULL,
   LOCK_NO                       NUMBER(19)    NOT NULL,
   AGREEMENT_ID                  NUMBER(19)    NULL,
   AGREEMENT_NUMBER              VARCHAR2(255) NULL,
   ANNIVERSARY_ON                DATE          NULL,
   ANNIVERSARY_TYPE_CODE         VARCHAR2(10)  NULL,
   DESCRIPTION                   VARCHAR2(255) NULL,
   END_ON                        DATE          NULL,
   FREQUENCE_CODE                VARCHAR2(10)  NULL,
   NEXT_CYCLE_START_ON           DATE          NULL,
   NEXT_RUN_ON                   DATE          NULL,
   ORIGIN_AGREEMENT_ID           NUMBER(19)    NULL,
   PAYMENT_METHOD_CODE           VARCHAR2(10)  NULL,
   POLICY_NUMBER                 VARCHAR2(255) NULL,
   IS_ROLLUP                     NUMBER(1)     NULL,
   IS_RUN_DATE_ADJ               NUMBER(1)     NULL,
   START_ON                      DATE          NULL,
   GRACE_PERIOD                  VARCHAR2(6)   NULL,
   COLLECTION_METHOD_CODE        VARCHAR2(10)  NULL,
   LATEST_NUMBER_OF_PAYMENT_DUES NUMBER(10)    NULL,
   LATEST_PAYMENT_DUE_PERIOD     VARCHAR2(6)   NULL,
   PAYMENT_DUE_PERIOD_END        VARCHAR2(6)   NULL,
   DOMAIN_PART_KEY               VARCHAR2(2)   NULL,
   ASIS_TAB                      VARCHAR2(50)  NULL,
   ASIS_PK_COL1                  VARCHAR2(20)  NULL,
   VALD_DVSN_CODE                VARCHAR2(1)   NULL,
   POLY_NO                       VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03; 
ALTER TABLE MIG_TBL_MONEY_SCHEDULER_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_MONEY_SCHEDULER_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_MONEY_SCHEDULER_900_FIX
(
   DTYPE                         VARCHAR2(3)   NOT NULL,
   ID                            NUMBER(19)    NOT NULL,
   CREATE_AT                     TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID                VARCHAR2(100) NULL,
   CREATOR_ID                    VARCHAR2(100) NULL,
   CREATOR_IP                    VARCHAR2(100) NULL,
   LAST_MODIFIED_AT              TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID         VARCHAR2(100) NULL,
   LAST_MODIFIER_ID              VARCHAR2(100) NULL,
   LAST_MODIFIER_IP              VARCHAR2(100) NULL,
   LOCK_NO                       NUMBER(19)    NOT NULL,
   AGREEMENT_ID                  NUMBER(19)    NULL,
   AGREEMENT_NUMBER              VARCHAR2(255) NULL,
   ANNIVERSARY_ON                DATE          NULL,
   ANNIVERSARY_TYPE_CODE         VARCHAR2(10)  NULL,
   DESCRIPTION                   VARCHAR2(255) NULL,
   END_ON                        DATE          NULL,
   FREQUENCE_CODE                VARCHAR2(10)  NULL,
   NEXT_CYCLE_START_ON           DATE          NULL,
   NEXT_RUN_ON                   DATE          NULL,
   ORIGIN_AGREEMENT_ID           NUMBER(19)    NULL,
   PAYMENT_METHOD_CODE           VARCHAR2(10)  NULL,
   POLICY_NUMBER                 VARCHAR2(255) NULL,
   IS_ROLLUP                     NUMBER(1)     NULL,
   IS_RUN_DATE_ADJ               NUMBER(1)     NULL,
   START_ON                      DATE          NULL,
   GRACE_PERIOD                  VARCHAR2(6)   NULL,
   COLLECTION_METHOD_CODE        VARCHAR2(10)  NULL,
   LATEST_NUMBER_OF_PAYMENT_DUES NUMBER(10)    NULL,
   LATEST_PAYMENT_DUE_PERIOD     VARCHAR2(6)   NULL,
   PAYMENT_DUE_PERIOD_END        VARCHAR2(6)   NULL,
   DOMAIN_PART_KEY               VARCHAR2(2)   NULL,
   ASIS_TAB                      VARCHAR2(50)  NULL,
   ASIS_PK_COL1                  VARCHAR2(20)  NULL,
   VALD_DVSN_CODE                VARCHAR2(1)   NULL,
   POLY_NO                       VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03; 
ALTER TABLE MIG_TBL_MONEY_SCHEDULER_900_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
/* 02. TBL_MONEY_SCHEDULER_STATUS */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_MONEY_SCHEDULER_STATUS CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_MONEY_SCHEDULER_STATUS
(
   ASIS_TAB                  VARCHAR2(50)  NOT NULL,
   ASIS_PK_COL1              VARCHAR2(20)  NOT NULL,
   MONEY_SCHEDULER_STATUS_ID NUMBER        NOT NULL,
   MONEY_SCHEDULER_ID        NUMBER        NULL,
   AGREEMENT_ID              NUMBER(19)    NOT NULL,
   START_ON                  DATE          NULL,
   END_ON                    DATE          NULL,
   CNTT_STAT_CODE            VARCHAR2(10)  NULL,
   SCHEDULER_STATE           VARCHAR2(1)   NULL,
   LAST_CHMN_MPNO            VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM            DATE          NULL,
   LAST_MODIFIED_PRGM_ID     VARCHAR2(150) NULL,
   RNO                       NUMBER        NULL,
   MAX_START_ON              DATE          NULL,
   VALD_DVSN_CODE            VARCHAR2(1)   NULL,
   POLY_NO                   VARCHAR2(14)  NULL,
   MIG_NUM                   NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_MONEY_SCHEDULER_STATUS NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_MONEY_SCHEDULER_STATUS_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_MONEY_SCHEDULER_STATUS_FIX
(
   ASIS_TAB                  VARCHAR2(50)  NOT NULL,
   ASIS_PK_COL1              VARCHAR2(20)  NOT NULL,
   MONEY_SCHEDULER_STATUS_ID NUMBER        NOT NULL,
   MONEY_SCHEDULER_ID        NUMBER        NULL,
   AGREEMENT_ID              NUMBER(19)    NOT NULL,
   START_ON                  DATE          NULL,
   END_ON                    DATE          NULL,
   CNTT_STAT_CODE            VARCHAR2(10)  NULL,
   SCHEDULER_STATE           VARCHAR2(1)   NULL,
   LAST_CHMN_MPNO            VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM            DATE          NULL,
   LAST_MODIFIED_PRGM_ID     VARCHAR2(150) NULL,
   RNO                       NUMBER        NULL,
   MAX_START_ON              DATE          NULL,
   VALD_DVSN_CODE            VARCHAR2(1)   NULL,
   POLY_NO                   VARCHAR2(14)  NULL,
   MIG_NUM                   NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_MONEY_SCHEDULER_STATUS_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_MONEY_SCHEDULER_STATUS_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_MONEY_SCHEDULER_STATUS_900
(
   ID                           NUMBER(19,0)  NOT NULL,
   CREATE_AT                    TIMESTAMP     NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL, 
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER        NOT NULL,
   DESCRIPTION                  VARCHAR2(255) NULL,
   START_ON                     DATE          NULL,
   END_ON                       DATE          NULL,
   CREATED_AT                   TIMESTAMP     NULL,
   REPLACED_AT                  TIMESTAMP     NULL,
   MONEY_SCHE_STATE_REASON_CODE VARCHAR2(10)  NULL,
   MONEY_SCHEDULER_STATE_CODE   VARCHAR2(10)  NOT NULL,
   MONEY_SCHEDULER_ID           NUMBER(19,0)  NULL,
   ASIS_TAB                     VARCHAR2(50)  NULL,
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,
   AGREEMENT_ID                 NUMBER        NOT NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL,
   POLY_NO                      VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03; 
ALTER TABLE MIG_TBL_MONEY_SCHEDULER_STATUS_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_MONEY_SCHEDULER_STATUS_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_MONEY_SCHEDULER_STATUS_900_FIX
(
   ID                           NUMBER(19,0)  NOT NULL,
   CREATE_AT                    TIMESTAMP     NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL, 
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER        NOT NULL,
   DESCRIPTION                  VARCHAR2(255) NULL,
   START_ON                     DATE          NULL,
   END_ON                       DATE          NULL,
   CREATED_AT                   TIMESTAMP     NULL,
   REPLACED_AT                  TIMESTAMP     NULL,
   MONEY_SCHE_STATE_REASON_CODE VARCHAR2(10)  NULL,
   MONEY_SCHEDULER_STATE_CODE   VARCHAR2(10)  NOT NULL,
   MONEY_SCHEDULER_ID           NUMBER(19,0)  NULL,
   ASIS_TAB                     VARCHAR2(50)  NULL,
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,
   AGREEMENT_ID                 NUMBER        NOT NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL,
   POLY_NO                      VARCHAR2(14)  NULL
)
TABLESPACE TSD_MIG03; 
ALTER TABLE MIG_TBL_MONEY_SCHEDULER_STATUS_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* 03. TBL_PARTY_ROLE */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PARTY_ROLE_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PARTY_ROLE_100
(
   INSU_NO               NUMBER(3)     NULL,
   CUST_ROLE_CODE        VARCHAR2(15)  NULL,
   CUST_ROLE_HSNO        NUMBER(3)     NULL,
   STRT_DATE             VARCHAR2(24)  NULL,
   END_DATE              VARCHAR2(24)  NULL,
   CNTT_PRTR_NO          NUMBER(3)     NULL,
   CUST_ID               VARCHAR2(15)  NULL,
   ROLE_PLAYER_TYPE_CODE VARCHAR2(100) NULL,
   LAST_CHMN_MPNO        VARCHAR2(12)  NULL,
   LAST_CHNG_DTTM        DATE          NULL,
   LVL_CODE              VARCHAR2(1)   NULL,
   CREATOR_ID            VARCHAR2(100) NULL,
   PGM_ID                VARCHAR2(150) NULL,
   ASIS_TAB              VARCHAR2(100) NULL,
   ASIS_PK_COL1          VARCHAR2(100) NULL,
   ASIS_PK_COL2          VARCHAR2(100) NULL,
   ASIS_PK_COL3          VARCHAR2(100) NULL,
   ASIS_PK_COL4          VARCHAR2(100) NULL,
   CMR_STRT_DATE         VARCHAR2(12)  NULL,
   CMR_END_DATE          VARCHAR2(12)  NULL,
   ASIS_2_TAB            VARCHAR2(100) NULL,
   ASIS_2_PK_COL1        VARCHAR2(100) NULL,
   ASIS_2_PK_COL2        VARCHAR2(100) NULL,
   ASIS_2_PK_COL3        VARCHAR2(100) NULL,
   ASIS_2_PK_COL4        VARCHAR2(100) NULL,
   INS_STRT_DATE         VARCHAR2(12)  NULL,
   INS_END_DATE          VARCHAR2(12)  NULL,
   CREATE_PRGM_ID        VARCHAR2(100) NULL,
   VALD_DVSN_CODE        VARCHAR2(1)   NULL,
   POLY_NO               VARCHAR2(14)  NULL,
   POLICY_NUMBER         VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PARTY_ROLE_200 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PARTY_ROLE_200
(
   POLICY_NUMBER         VARCHAR2(14)  NULL,
   JOIN_GOOD_NO_MIG      VARCHAR2(10)  NULL,
   INSU_NO               NUMBER(3)     NULL,
   CUST_ROLE_CODE        VARCHAR2(15)  NULL,
   CUST_ROLE_HSNO        NUMBER(3)     NULL,
   STRT_DATE             VARCHAR2(24)  NULL,
   END_DATE              VARCHAR2(24)  NULL,
   ORI_END_DATE          VARCHAR2(24)  NULL,
   CNTT_PRTR_NO          NUMBER(3)     NULL,
   CUST_ID               VARCHAR2(15)  NULL,
   ROLE_PLAYER_TYPE_CODE VARCHAR2(100) NULL,
   LAST_CHMN_MPNO        VARCHAR2(12)  NULL,
   LAST_CHNG_DTTM        DATE          NULL,
   LVL_CODE              VARCHAR2(1)   NULL,
   CREATOR_ID            VARCHAR2(100) NULL,
   PGM_ID                VARCHAR2(150) NULL,
   ASIS_TAB              VARCHAR2(100) NULL,
   ASIS_PK_COL1          VARCHAR2(100) NULL,
   ASIS_PK_COL2          VARCHAR2(100) NULL,
   ASIS_PK_COL3          VARCHAR2(100) NULL,
   ASIS_PK_COL4          VARCHAR2(100) NULL,
   CMR_STRT_DATE         VARCHAR2(12)  NULL,
   CMR_END_DATE          VARCHAR2(12)  NULL,
   ASIS_2_TAB            VARCHAR2(100) NULL,
   ASIS_2_PK_COL1        VARCHAR2(100) NULL,
   ASIS_2_PK_COL2        VARCHAR2(100) NULL,
   ASIS_2_PK_COL3        VARCHAR2(100) NULL,
   ASIS_2_PK_COL4        VARCHAR2(100) NULL,
   INS_STRT_DATE         VARCHAR2(12)  NULL,
   INS_END_DATE          VARCHAR2(12)  NULL,
   CREATE_PRGM_ID        VARCHAR2(100) NULL,
   VALD_DVSN_CODE        VARCHAR2(1)   NULL,
   POLY_NO               VARCHAR2(14)  NULL,
   JOIN_GOOD_NO          VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE_200 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PARTY_ROLE_150 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PARTY_ROLE_150
(
   POLICY_NUMBER         VARCHAR2(14)  NULL,
   JOIN_GOOD_NO_MIG      VARCHAR2(10)  NULL,
   ORIGIN_AGREEMENT_ID   NUMBER(19)    NULL,
   AGREEMENT_ID          NUMBER(19)    NULL,
   AGREEMENT_NUMBER      VARCHAR2(100) NULL,
   INSU_NO               NUMBER(3)     NULL,
   CUST_ROLE_CODE        VARCHAR2(15)  NULL,
   CUST_ROLE_HSNO        NUMBER(3)     NULL,
   STRT_DATE             VARCHAR2(24)  NULL,
   END_DATE              VARCHAR2(24)  NULL,
   ORI_END_DATE          VARCHAR2(24)  NULL,
   CNTT_PRTR_NO          NUMBER(3)     NULL,
   CUST_ID               VARCHAR2(15)  NULL,
   ROLE_PLAYER_TYPE_CODE VARCHAR2(100) NULL,
   LAST_CHMN_MPNO        VARCHAR2(12)  NULL,
   LAST_CHNG_DTTM        DATE          NULL,
   LVL_CODE              VARCHAR2(1)   NULL,
   CREATOR_ID            VARCHAR2(100) NULL,
   PGM_ID                VARCHAR2(150) NULL,
   ASIS_TAB              VARCHAR2(100) NULL,
   ASIS_PK_COL1          VARCHAR2(100) NULL,
   ASIS_PK_COL2          VARCHAR2(100) NULL,
   ASIS_PK_COL3          VARCHAR2(100) NULL,
   ASIS_PK_COL4          VARCHAR2(100) NULL,
   CMR_STRT_DATE         VARCHAR2(12)  NULL,
   CMR_END_DATE          VARCHAR2(12)  NULL,
   ASIS_2_TAB            VARCHAR2(100) NULL,
   ASIS_2_PK_COL1        VARCHAR2(100) NULL,
   ASIS_2_PK_COL2        VARCHAR2(100) NULL,
   ASIS_2_PK_COL3        VARCHAR2(100) NULL,
   ASIS_2_PK_COL4        VARCHAR2(100) NULL,
   INS_STRT_DATE         VARCHAR2(12)  NULL,
   INS_END_DATE          VARCHAR2(12)  NULL,
   CREATE_PRGM_ID        VARCHAR2(100) NULL,
   VALD_DVSN_CODE        VARCHAR2(1)   NULL,
   POLY_NO               VARCHAR2(14)  NULL,
   JOIN_GOOD_NO          VARCHAR2(10)  NULL

)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE_150 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PARTY_ROLE CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PARTY_ROLE
(    
   PARTY_ROLE_ID         NUMBER        NULL,  
   MIG_NUM               NUMBER        NULL,
   POLICY_NUMBER         VARCHAR2(14)  NULL,
   JOIN_GOOD_NO_MIG      VARCHAR2(10)  NULL,
   ORIGIN_AGREEMENT_ID   NUMBER(19)    NULL,
   AGREEMENT_ID          NUMBER(19)    NULL,
   AGREEMENT_NUMBER      VARCHAR2(100) NULL,
   CNTT_PRTR_NO          NUMBER(3)     NULL,
   CUST_ID               VARCHAR2(15)  NULL,
   INSU_NO               NUMBER(3)     NULL,
   ROLE_PLAYER_TYPE_CODE VARCHAR2(100) NULL,
   CUST_ROLE_CODE        VARCHAR2(15)  NULL,
   CUST_ROLE_HSNO        NUMBER(3)     NULL,
   STRT_DATE             DATE          NULL,
   END_DATE              DATE          NULL,
   LAST_CHMN_MPNO        VARCHAR2(12)  NULL,
   LAST_CHNG_DTTM        DATE          NULL,
   LVL_CODE              VARCHAR2(1)   NULL,
   CREATOR_ID            VARCHAR2(7)   NULL,
   PGM_ID                VARCHAR2(150) NULL,
   ASIS_TAB              VARCHAR2(100) NULL,
   ASIS_PK_COL1          VARCHAR2(100) NULL,
   ASIS_PK_COL2          VARCHAR2(100) NULL,
   ASIS_PK_COL3          VARCHAR2(100) NULL,
   ASIS_PK_COL4          VARCHAR2(100) NULL,
   CMR_STRT_DATE         VARCHAR2(12)  NULL,
   CMR_END_DATE          VARCHAR2(12)  NULL,
   ASIS_2_TAB            VARCHAR2(100) NULL,
   ASIS_2_PK_COL1        VARCHAR2(100) NULL,
   ASIS_2_PK_COL2        VARCHAR2(100) NULL,
   ASIS_2_PK_COL3        VARCHAR2(100) NULL,
   ASIS_2_PK_COL4        VARCHAR2(100) NULL,
   INS_STRT_DATE         VARCHAR2(12)  NULL,
   INS_END_DATE          VARCHAR2(12)  NULL,
   CREATE_PRGM_ID        VARCHAR2(100) NULL,
   VALD_DVSN_CODE        VARCHAR2(1)   NULL,
   POLY_NO               VARCHAR2(14)  NULL,
   JOIN_GOOD_NO          VARCHAR2(10)  NULL,
   PARTY_ROLE_RNO        NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PARTY_ROLE_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PARTY_ROLE_FIX
(
   PARTY_ROLE_ID         NUMBER        NULL,
   MIG_NUM               NUMBER        NULL,
   POLICY_NUMBER         VARCHAR2(14)  NULL,
   JOIN_GOOD_NO_MIG      VARCHAR2(10)  NULL,
   ORIGIN_AGREEMENT_ID   NUMBER(19)    NULL,
   AGREEMENT_ID          NUMBER(19)    NULL,
   AGREEMENT_NUMBER      VARCHAR2(100) NULL,
   CNTT_PRTR_NO          NUMBER(3)     NULL,
   CUST_ID               VARCHAR2(15)  NULL,
   INSU_NO               NUMBER(3)     NULL,
   ROLE_PLAYER_TYPE_CODE VARCHAR2(100) NULL,
   CUST_ROLE_CODE        VARCHAR2(15)  NULL,
   CUST_ROLE_HSNO        NUMBER(3)     NULL,
   STRT_DATE             DATE          NULL,
   END_DATE              DATE          NULL,
   LAST_CHMN_MPNO        VARCHAR2(12)  NULL,
   LAST_CHNG_DTTM        DATE          NULL,
   LVL_CODE              VARCHAR2(1)   NULL,
   CREATOR_ID            VARCHAR2(7)   NULL,
   PGM_ID                VARCHAR2(150) NULL,
   ASIS_TAB              VARCHAR2(100) NULL,
   ASIS_PK_COL1          VARCHAR2(100) NULL,
   ASIS_PK_COL2          VARCHAR2(100) NULL,
   ASIS_PK_COL3          VARCHAR2(100) NULL,
   ASIS_PK_COL4          VARCHAR2(100) NULL,
   CMR_STRT_DATE         VARCHAR2(12)  NULL,
   CMR_END_DATE          VARCHAR2(12)  NULL,
   ASIS_2_TAB            VARCHAR2(100) NULL,
   ASIS_2_PK_COL1        VARCHAR2(100) NULL,
   ASIS_2_PK_COL2        VARCHAR2(100) NULL,
   ASIS_2_PK_COL3        VARCHAR2(100) NULL,
   ASIS_2_PK_COL4        VARCHAR2(100) NULL,
   INS_STRT_DATE         VARCHAR2(12)  NULL,
   INS_END_DATE          VARCHAR2(12)  NULL,
   CREATE_PRGM_ID        VARCHAR2(100) NULL,
   VALD_DVSN_CODE        VARCHAR2(1)   NULL,
   POLY_NO               VARCHAR2(14)  NULL,
   JOIN_GOOD_NO          VARCHAR2(10)  NULL,
   PARTY_ROLE_RNO        NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PARTY_ROLE_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PARTY_ROLE_900
(
   ID                    NUMBER(19)    NOT NULL,
   CREATE_AT             TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID        VARCHAR2(100) NULL,
   CREATOR_ID            VARCHAR2(100) NULL,
   CREATOR_IP            VARCHAR2(100) NULL,
   LAST_MODIFIED_AT      TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID VARCHAR2(100) NULL,
   LAST_MODIFIER_ID      VARCHAR2(100) NULL,
   LAST_MODIFIER_IP      VARCHAR2(100) NULL,
   LOCK_NO               NUMBER(19)    NOT NULL,
   DESCRIPTION           VARCHAR2(255) NULL,
   EXTERNAL_REF          VARCHAR2(255) NULL,
   CONTEXT_DOMAIN_TYPE   VARCHAR2(255) NULL,
   CONTEXT_REFERENCE     VARCHAR2(255) NULL,
   PARTY_ROLE_TYPE_CODE  VARCHAR2(10)  NULL,
   PARTY_ID              NUMBER(19)    NULL,
   DOMAIN_PART_KEY       VARCHAR2(2)   NULL,
   PRODUCT_TYPE_CODE     VARCHAR2(10)  NULL,
   APP_TYPE              VARCHAR2(10)  NULL,
   KIND_ID               NUMBER(19)    NULL,
   ASIS_TAB              VARCHAR2(100) NULL,
   ASIS_PK_COL1          VARCHAR2(100) NULL,
   ASIS_PK_COL2          VARCHAR2(100) NULL,
   ASIS_PK_COL3          VARCHAR2(100) NULL,
   ASIS_PK_COL4          VARCHAR2(100) NULL,
   ASIS_2_TAB            VARCHAR2(100) NULL,
   ASIS_2_PK_COL1        VARCHAR2(100) NULL,
   ASIS_2_PK_COL2        VARCHAR2(100) NULL,
   ASIS_2_PK_COL3        VARCHAR2(100) NULL,
   ASIS_2_PK_COL4        VARCHAR2(100) NULL, 
   VALD_DVSN_CODE        VARCHAR2(1)   NULL,
   POLY_NO               VARCHAR2(14)  NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PARTY_ROLE_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PARTY_ROLE_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PARTY_ROLE_900_FIX
(
   ID                    NUMBER(19)    NOT NULL,
   CREATE_AT             TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID        VARCHAR2(100) NULL,
   CREATOR_ID            VARCHAR2(100) NULL,
   CREATOR_IP            VARCHAR2(100) NULL,
   LAST_MODIFIED_AT      TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID VARCHAR2(100) NULL,
   LAST_MODIFIER_ID      VARCHAR2(100) NULL,
   LAST_MODIFIER_IP      VARCHAR2(100) NULL,
   LOCK_NO               NUMBER(19)    NOT NULL,
   DESCRIPTION           VARCHAR2(255) NULL,
   EXTERNAL_REF          VARCHAR2(255) NULL,
   CONTEXT_DOMAIN_TYPE   VARCHAR2(255) NULL,
   CONTEXT_REFERENCE     VARCHAR2(255) NULL,
   PARTY_ROLE_TYPE_CODE  VARCHAR2(10)  NULL,
   PARTY_ID              NUMBER(19)    NULL,
   DOMAIN_PART_KEY       VARCHAR2(2)   NULL,
   PRODUCT_TYPE_CODE     VARCHAR2(10)  NULL,
   APP_TYPE              VARCHAR2(10)  NULL,
   KIND_ID               NUMBER(19)    NULL,
   ASIS_TAB              VARCHAR2(100) NULL,
   ASIS_PK_COL1          VARCHAR2(100) NULL,
   ASIS_PK_COL2          VARCHAR2(100) NULL,
   ASIS_PK_COL3          VARCHAR2(100) NULL,
   ASIS_PK_COL4          VARCHAR2(100) NULL,
   ASIS_2_TAB            VARCHAR2(100) NULL,
   ASIS_2_PK_COL1        VARCHAR2(100) NULL,
   ASIS_2_PK_COL2        VARCHAR2(100) NULL,
   ASIS_2_PK_COL3        VARCHAR2(100) NULL,
   ASIS_2_PK_COL4        VARCHAR2(100) NULL, 
   VALD_DVSN_CODE        VARCHAR2(1)   NULL,
   POLY_NO               VARCHAR2(14)  NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PARTY_ROLE_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* 04. TBL_AGMT_PYMT_STATUS */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_100
(
   ASIS_TAB               VARCHAR2(11)  NULL,
   ASIS_PK_COL1           VARCHAR2(9)   NULL,
   ASIS_PK_COL2           VARCHAR2(10)  NULL,
   ASIS_PK_COL3           VARCHAR2(10)  NULL,
   ASIS_PK_COL4           VARCHAR2(10)  NULL,
   JNGD_HSNO              VARCHAR2(10)  NULL,
   CNTT_STAT_CODE         VARCHAR2(10)  NULL,
   CNTT_STAT_DTCD         VARCHAR2(10)  NULL,
   BEFO_CTS_CODE          VARCHAR2(10)  NULL,
   BEFO_CTS_DTCD          VARCHAR2(10)  NULL,
   STRT_DATE              VARCHAR2(8)   NULL,
   END_DATE               VARCHAR2(8)   NULL,
   AGREEMENT_ID           NUMBER(19)    NOT NULL,
   AGREEMENT_NUMBER       VARCHAR2(255) NOT NULL,
   TOP_LEVEL_AGREEMENT_ID NUMBER(19)    NOT NULL,
   LAST_CHMN_MPNO         VARCHAR2(12)  NOT NULL,
   LAST_CHNG_DTTM         DATE          NOT NULL,
   PAYM_STAT_CODE         VARCHAR2(12)  NULL,
   PAYM_STAT_DTCD         VARCHAR2(29)  NULL,
   PGM_ID                 VARCHAR2(150) NULL,
   VALD_DVSN_CODE         VARCHAR2(1)   NULL,
   POLY_NO                VARCHAR2(9)   NULL,
   JOIN_GOOD_NO           VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_200 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_200
(
   ASIS_TAB               VARCHAR2(11)  NULL,
   ASIS_PK_COL1           VARCHAR2(14)  NOT NULL,
   ASIS_PK_COL2           NUMBER(3)     NOT NULL,
   ASIS_PK_COL3           VARCHAR2(30)  NOT NULL,
   ASIS_PK_COL4           NUMBER(15)    NOT NULL,
   PGM_ID                 VARCHAR2(150) NULL,
   JNGD_HSNO              NUMBER        NULL,
   CNTT_STAT_CODE         VARCHAR2(10)  NULL,
   CNTT_STAT_DTCD         VARCHAR2(10)  NULL,
   BEFO_CTS_CODE          VARCHAR2(10)  NULL,
   BEFO_CTS_DTCD          VARCHAR2(10)  NULL,
   STRT_DATE              VARCHAR2(12)  NULL,
   AGREEMENT_ID           NUMBER(19)    NOT NULL,
   AGREEMENT_NUMBER       VARCHAR2(255) NOT NULL,
   TOP_LEVEL_AGREEMENT_ID NUMBER(19)    NOT NULL,
   LAST_CHMN_MPNO         VARCHAR2(12)  NOT NULL,
   LAST_CHNG_DTTM         DATE          NOT NULL,
   PRPY_SYS_DVCD          VARCHAR2(15)  NOT NULL,
   CHRG_DLNG_SQNO         NUMBER(15)    NOT NULL,
   PAYM_GRAC_RATO         NUMBER(5,2)   NULL,
   PAYM_STAT_CODE         VARCHAR2(12)  NULL,
   PAYM_STAT_DTCD         VARCHAR2(12)  NULL,
   VALD_DVSN_CODE         VARCHAR2(1)   NULL,
   POLY_NO                VARCHAR2(9)   NULL,
   JOIN_GOOD_NO           VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_200 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_250 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_250
(
   ASIS_TAB               VARCHAR2(11)  NULL,
   ASIS_PK_COL1           VARCHAR2(45)  NOT NULL,
   ASIS_PK_COL2           VARCHAR2(30)  NULL,
   ASIS_PK_COL3           VARCHAR2(30)  NULL,
   ASIS_PK_COL4           VARCHAR2(30)  NULL,
   PGM_ID                 VARCHAR2(150) NULL,
   CNTT_STAT_CODE         VARCHAR2(10)  NULL,
   CNTT_STAT_DTCD         VARCHAR2(10)  NULL,
   BEFO_CTS_CODE          VARCHAR2(10)  NULL,
   BEFO_CTS_DTCD          VARCHAR2(10)  NULL,
   STRT_DATE              VARCHAR2(12)  NULL,
   AGREEMENT_ID           NUMBER(19)    NOT NULL,
   AGREEMENT_NUMBER       VARCHAR2(255) NOT NULL,
   TOP_LEVEL_AGREEMENT_ID NUMBER(19)    NOT NULL,
   LAST_CHMN_MPNO         VARCHAR2(12)  NOT NULL,
   LAST_CHNG_DTTM         DATE          NOT NULL,
   CNTT_RECP_SQNO         VARCHAR2(23)  NOT NULL,
   RECP_DATE              VARCHAR2(12)  NOT NULL,
   PAYM_DATE              VARCHAR2(12)  NULL,
   VALD_DVSN_CODE         VARCHAR2(1)   NULL,
   POLY_NO                VARCHAR2(9)   NULL,
   JOIN_GOOD_NO           VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_250 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_300 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_300
(
   ASIS_TAB               VARCHAR2(11)  NULL,
   ASIS_PK_COL1           VARCHAR2(45)  NOT NULL,
   ASIS_PK_COL2           VARCHAR2(30)  NULL,
   ASIS_PK_COL3           VARCHAR2(30)  NULL,
   ASIS_PK_COL4           VARCHAR2(30)  NULL,
   PGM_ID                 VARCHAR2(150) NULL,
   JNGD_HSNO              NUMBER(15)    NOT NULL,
   CNTT_STAT_CODE         VARCHAR2(10)  NULL,
   CNTT_STAT_DTCD         VARCHAR2(10)  NULL,
   BEFO_CTS_CODE          VARCHAR2(10)  NULL,
   BEFO_CTS_DTCD          VARCHAR2(10)  NULL,
   STRT_DATE              VARCHAR2(12)  NULL,
   AGREEMENT_ID           NUMBER(19)    NOT NULL,
   AGREEMENT_NUMBER       VARCHAR2(255) NOT NULL,
   TOP_LEVEL_AGREEMENT_ID NUMBER(19)    NOT NULL,
   LAST_CHMN_MPNO         VARCHAR2(12)  NOT NULL,
   LAST_CHNG_DTTM         DATE          NOT NULL,
   PRPY_SYS_DVCD          VARCHAR2(15)  NULL,
   CHRG_DLNG_SQNO         NUMBER(15)    NULL,
   PAYM_GRAC_RATO         NUMBER(5,2)   NULL,
   PAYM_STAT_CODE         VARCHAR2(12)  NULL,
   PAYM_STAT_DTCD         VARCHAR2(32)  NULL,
   VALD_DVSN_CODE         VARCHAR2(1)   NULL,
   POLY_NO                VARCHAR2(9)   NULL,
   JOIN_GOOD_NO           VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_300 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_350 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_350
(
   JNGD_HSNO          NUMBER        NULL,
   STRT_DATE          VARCHAR2(8)   NULL,
   PAYM_STAT_CODE     VARCHAR2(12)  NULL,
   PAYM_STAT_DTCD     VARCHAR2(29)  NULL,
   ASIS_TAB           VARCHAR2(11)  NULL,
   ASIS_PK_COL1       VARCHAR2(45)   NULL,
   ASIS_PK_COL2       VARCHAR2(30)  NULL,
   ASIS_PK_COL3       VARCHAR2(30)  NULL,
   ASIS_PK_COL4       VARCHAR2(30)  NULL,
   PGM_ID             VARCHAR2(150) NULL,
   LAST_CHMN_MPNO     VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM     DATE          NULL,
   ASIS_MAP           VARCHAR2(4)   NULL,
   VALD_DVSN_CODE     VARCHAR2(1)   NULL,
   POLY_NO            VARCHAR2(9)   NULL,
   JOIN_GOOD_NO       VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_350 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_400 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_400
(
   JNGD_HSNO          NUMBER        NULL,
   STRT_DATE          VARCHAR2(12)  NULL,
   PAYM_STAT_CODE     VARCHAR2(12)  NULL,
   PAYM_STAT_DTCD     VARCHAR2(32)  NULL,
   ASIS_TAB           VARCHAR2(11)  NULL,
   ASIS_PK_COL1       VARCHAR2(45)  NULL,
   ASIS_PK_COL2       VARCHAR2(30)  NULL,
   ASIS_PK_COL3       VARCHAR2(30)  NULL,
   ASIS_PK_COL4       VARCHAR2(30)  NULL,
   PGM_ID             VARCHAR2(150) NULL,
   LAST_CHMN_MPNO     VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM     DATE          NULL,
   ASIS_MAP           VARCHAR2(4)   NULL,
   RNO                NUMBER        NULL,
   VALD_DVSN_CODE     VARCHAR2(1)   NULL,
   POLY_NO            VARCHAR2(9)   NULL,
   JOIN_GOOD_NO       VARCHAR2(10)  NULL,
   DESC_RNO           NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_400 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_500 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_500
(
   JNGD_HSNO          NUMBER        NULL,
   PAYM_STAT_CODE     VARCHAR2(12)  NULL,
   PAYM_STAT_DTCD     VARCHAR2(32)  NULL,
   STRT_DATE          VARCHAR2(17)  NULL,
   RNO                NUMBER        NULL,
   ASIS_TAB           VARCHAR2(11)  NULL,
   ASIS_PK_COL1       VARCHAR2(45)  NULL,
   ASIS_PK_COL2       VARCHAR2(30)  NULL,
   ASIS_PK_COL3       VARCHAR2(30)  NULL,
   ASIS_PK_COL4       VARCHAR2(30)  NULL,
   PGM_ID             VARCHAR2(150) NULL,
   LAST_CHMN_MPNO     VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM     DATE          NULL,
   VALD_DVSN_CODE     VARCHAR2(1)   NULL, 
   POLY_NO            VARCHAR2(9)   NULL,
   JOIN_GOOD_NO       VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT  VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_500 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_600 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_600
(
   POLICY_NUMBER               VARCHAR2(9)   NULL,
   JOIN_GOOD_NO_MIG            VARCHAR2(10)  NULL,
   JNGD_HSNO                   NUMBER        NULL,
   AGREEMENT_ID                NUMBER(19)    NULL,
   AGREEMENT_NUMBER            VARCHAR2(255) NULL,
   AGREEMENT_ANCHOR_ID         NUMBER(19)    NULL,
   STRT_DATE                   DATE          NULL,
   END_DATE                    DATE          NULL,
   SEQ                         NUMBER        NULL,
   AGMT_PYMT_STATE_CODE        VARCHAR2(2)   NULL,
   AGMT_PYMT_STATE_REASON_CODE VARCHAR2(2)   NULL,
   ASIS_TAB                    VARCHAR2(11)  NULL,
   ASIS_PK_COL1                VARCHAR2(45)  NULL,
   ASIS_PK_COL2                VARCHAR2(30)  NULL,
   ASIS_PK_COL3                VARCHAR2(30)  NULL,
   ASIS_PK_COL4                VARCHAR2(30)  NULL,
   PGM_ID                      VARCHAR2(150) NULL,
   LAST_CHMN_MPNO              VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM              DATE          NULL,
   CNTT_STAT_CODE              VARCHAR2(10)  NULL,
   VALD_DVSN_CODE              VARCHAR2(1)   NULL,
   POLY_NO                     VARCHAR2(9)   NULL,
   JOIN_GOOD_NO                VARCHAR2(10)  NULL,
   PRIORITY                    NUMBER        NULL,
   FLAG                        VARCHAR2(3)   NULL  
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLICY_NUMBER) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_600 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_650 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_650
(
   VALD_DVSN_CODE              VARCHAR2(1)   NULL,
   POLICY_NUMBER               VARCHAR2(9)   NULL,
   STRT_DATE                   DATE          NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLICY_NUMBER) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_650 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_700 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_700
(
   POLICY_NUMBER               VARCHAR2(9)   NULL,
   JOIN_GOOD_NO_MIG            VARCHAR2(10)  NULL,
   JNGD_HSNO                   NUMBER        NULL,
   AGREEMENT_ID                NUMBER(19)    NULL,
   AGREEMENT_NUMBER            VARCHAR2(255) NULL,
   AGREEMENT_ANCHOR_ID         NUMBER(19)    NULL,
   STRT_DATE                   DATE          NULL,
   END_DATE                    DATE          NULL,
   SEQ                         NUMBER        NULL,
   AGMT_PYMT_STATE_CODE        VARCHAR2(2)   NULL,
   AGMT_PYMT_STATE_REASON_CODE VARCHAR2(2)   NULL,
   ASIS_TAB                    VARCHAR2(11)  NULL,
   ASIS_PK_COL1                VARCHAR2(45)  NULL,
   ASIS_PK_COL2                VARCHAR2(30)  NULL,
   ASIS_PK_COL3                VARCHAR2(30)  NULL,
   ASIS_PK_COL4                VARCHAR2(30)  NULL,
   PGM_ID                      VARCHAR2(150) NULL,
   LAST_CHMN_MPNO              VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM              DATE          NULL,
   CNTT_STAT_CODE              VARCHAR2(10)  NULL,
   VALD_DVSN_CODE              VARCHAR2(1)   NULL,
   POLY_NO                     VARCHAR2(9)   NULL,
   JOIN_GOOD_NO                VARCHAR2(10)  NULL,
   PRIORITY                    NUMBER        NULL,
   FLAG                        VARCHAR2(3)   NULL  
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_700 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS
(
   POLICY_NUMBER                        VARCHAR2(9)   NULL,
   JOIN_GOOD_NO_MIG                     VARCHAR2(10)  NULL,
   AGREEMENT_ID                         NUMBER(19)    NOT NULL,
   AGREEMENT_NUMBER                     VARCHAR2(255) NOT NULL,
   AGREEMENT_ANCHOR_ID                  NUMBER(19)    NOT NULL,
   JNGD_HSNO                            NUMBER        NULL,
   AGMT_PYMT_STATE_CODE                 VARCHAR2(2)   NULL,
   AGMT_PYMT_STATE_REASON_CODE          VARCHAR2(2)   NULL,
   BEFO_AGMT_PYMT_STATE_CODE            VARCHAR2(2)   NULL,
   BEFO_AGMT_PYMT_STATE_REASON_CODE     VARCHAR2(2)   NULL,
   PGM_ID                               VARCHAR2(150) NULL,
   LAST_CHMN_MPNO                       VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM                       DATE          NULL,
   STRT_ON                              DATE          NULL,
   END_ON                               DATE          NULL,
   AGMT_PYMT_STATUS_ID                  NUMBER(19)    NULL,
   FLAG                                 VARCHAR2(1)   NULL,
   ASIS_TAB                             VARCHAR2(11)  NULL,
   ASIS_PK_COL1                         VARCHAR2(45)  NULL,
   ASIS_PK_COL2                         VARCHAR2(30)  NULL,
   ASIS_PK_COL3                         VARCHAR2(30)  NULL,
   ASIS_PK_COL4                         VARCHAR2(30)  NULL, 
   VALD_DVSN_CODE                       VARCHAR2(1)   NULL,
   POLY_NO                              VARCHAR2(9)   NULL,
   JOIN_GOOD_NO                         VARCHAR2(10)  NULL,
   MIG_NUM                              NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_FIX
(
   POLICY_NUMBER                        VARCHAR2(9)   NULL,
   JOIN_GOOD_NO_MIG                     VARCHAR2(10)  NULL,
   AGREEMENT_ID                         NUMBER(19)    NOT NULL,
   AGREEMENT_NUMBER                     VARCHAR2(255) NOT NULL,
   AGREEMENT_ANCHOR_ID                  NUMBER(19)    NOT NULL,
   JNGD_HSNO                            NUMBER        NULL,
   AGMT_PYMT_STATE_CODE                 VARCHAR2(2)   NULL,
   AGMT_PYMT_STATE_REASON_CODE          VARCHAR2(2)   NULL,
   BEFO_AGMT_PYMT_STATE_CODE            VARCHAR2(2)   NULL,
   BEFO_AGMT_PYMT_STATE_REASON_CODE     VARCHAR2(2)   NULL,
   PGM_ID                               VARCHAR2(150) NULL,
   LAST_CHMN_MPNO                       VARCHAR2(14)  NULL,
   LAST_CHNG_DTTM                       DATE          NULL,
   STRT_ON                              DATE          NULL,
   END_ON                               DATE          NULL,
   AGMT_PYMT_STATUS_ID                  NUMBER(19)    NULL,
   FLAG                                 VARCHAR2(1)   NULL,
   ASIS_TAB                             VARCHAR2(11)  NULL,
   ASIS_PK_COL1                         VARCHAR2(45)  NULL,
   ASIS_PK_COL2                         VARCHAR2(30)  NULL,
   ASIS_PK_COL3                         VARCHAR2(30)  NULL,
   ASIS_PK_COL4                         VARCHAR2(30)  NULL, 
   VALD_DVSN_CODE                       VARCHAR2(1)   NULL,
   POLY_NO                              VARCHAR2(9)   NULL,
   JOIN_GOOD_NO                         VARCHAR2(10)  NULL,
   MIG_NUM                              NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_AGMT_PYMT_STATUS_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_AGMT_PYMT_STATUS_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_AGMT_PYMT_STATUS_900
(  ID                          NUMBER(19,0)  NOT NULL,
   CREATE_AT                   TIMESTAMP         NULL,
   CREATE_PRGM_ID              VARCHAR2(100)     NULL,
   CREATOR_ID                  VARCHAR2(100)     NULL,
   CREATOR_IP                  VARCHAR2(100)     NULL,
   LAST_MODIFIED_AT            TIMESTAMP         NULL,
   LAST_MODIFIED_PRGM_ID       VARCHAR2(100)     NULL,
   LAST_MODIFIER_ID            VARCHAR2(100)     NULL,
   LAST_MODIFIER_IP            VARCHAR2(100)     NULL,
   LOCK_NO                     NUMBER(19,0)  NOT NULL,
   DESCRIPTION                 VARCHAR2(255)     NULL,
   START_ON                    DATE              NULL,
   END_ON                      DATE              NULL,
   CREATED_AT                  TIMESTAMP         NULL,
   REPLACED_AT                 TIMESTAMP         NULL,
   AGREEMENT_NUMBER            VARCHAR2(255)     NULL,
   CONTRACT_PROC_NUMBER        VARCHAR2(255)     NULL,
   ORIGIN_AGREEMENT_ID         NUMBER(19,0)  NOT NULL,
   POLICY_NUMBER               VARCHAR2(255)     NULL,
   AGMT_PYMT_STATE_CODE        VARCHAR2(10)  NOT NULL,
   AGMT_PYMT_STATE_REASON_CODE VARCHAR2(10)      NULL,
   AGREEMENT_ANCHOR_ID         NUMBER(19,0)  NOT NULL,
   DOMAIN_PART_KEY             VARCHAR2(2)       NULL,
   PRODUCT_TYPE_CODE           VARCHAR2(10)      NULL, 
   VALD_DVSN_CODE              VARCHAR2(1)       NULL,
   POLY_NO                     VARCHAR2(9)       NULL, 
   ASIS_TAB                    VARCHAR2(11)      NULL,
   ASIS_PK_COL1                VARCHAR2(45)      NULL,
   ASIS_PK_COL2                VARCHAR2(30)      NULL,
   ASIS_PK_COL3                VARCHAR2(30)      NULL,
   ASIS_PK_COL4                VARCHAR2(30)      NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_AGMT_PYMT_STATUS_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_AGMT_PYMT_STATUS_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_AGMT_PYMT_STATUS_900_FIX
(  ID                          NUMBER(19,0)  NOT NULL,
   CREATE_AT                   TIMESTAMP         NULL,
   CREATE_PRGM_ID              VARCHAR2(100)     NULL,
   CREATOR_ID                  VARCHAR2(100)     NULL,
   CREATOR_IP                  VARCHAR2(100)     NULL,
   LAST_MODIFIED_AT            TIMESTAMP         NULL,
   LAST_MODIFIED_PRGM_ID       VARCHAR2(100)     NULL,
   LAST_MODIFIER_ID            VARCHAR2(100)     NULL,
   LAST_MODIFIER_IP            VARCHAR2(100)     NULL,
   LOCK_NO                     NUMBER(19,0)  NOT NULL,
   DESCRIPTION                 VARCHAR2(255)     NULL,
   START_ON                    DATE              NULL,
   END_ON                      DATE              NULL,
   CREATED_AT                  TIMESTAMP         NULL,
   REPLACED_AT                 TIMESTAMP         NULL,
   AGREEMENT_NUMBER            VARCHAR2(255)     NULL,
   CONTRACT_PROC_NUMBER        VARCHAR2(255)     NULL,
   ORIGIN_AGREEMENT_ID         NUMBER(19,0)  NOT NULL,
   POLICY_NUMBER               VARCHAR2(255)     NULL,
   AGMT_PYMT_STATE_CODE        VARCHAR2(10)  NOT NULL,
   AGMT_PYMT_STATE_REASON_CODE VARCHAR2(10)      NULL,
   AGREEMENT_ANCHOR_ID         NUMBER(19,0)  NOT NULL,
   DOMAIN_PART_KEY             VARCHAR2(2)       NULL,
   PRODUCT_TYPE_CODE           VARCHAR2(10)      NULL, 
   VALD_DVSN_CODE              VARCHAR2(1)       NULL,
   POLY_NO                     VARCHAR2(9)       NULL, 
   ASIS_TAB                    VARCHAR2(11)      NULL,
   ASIS_PK_COL1                VARCHAR2(45)      NULL,
   ASIS_PK_COL2                VARCHAR2(30)      NULL,
   ASIS_PK_COL3                VARCHAR2(30)      NULL,
   ASIS_PK_COL4                VARCHAR2(30)      NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_AGMT_PYMT_STATUS_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_100
(
    PREM_PAYMENT_ID      NUMBER       NOT NULL,
    RECV_DLNG_ON         DATE             NULL,
    RECP_ON              DATE             NULL,
    SUM_ORIG_PREM        NUMBER(12)       NULL,
    PREM_KIND_DVCD       VARCHAR2(30)     NULL,
    PROCESSING_FP_NUMBER VARCHAR2(10)     NULL,
    PAYM_CNT             NUMBER(3)        NULL,   
    PAYM_CYCL_CODE       VARCHAR2(10)     NULL,
    VALD_DVSN_CODE       VARCHAR2(1)      NULL,
    POLY_NO              VARCHAR2(27)     NULL,
    POLICY_NUMBER        VARCHAR2(27)     NULL,
    CI_FLAG              VARCHAR2(2)      NULL,
    ASIS_TAB             VARCHAR2(20)     NULL,
    ASIS_PK_COL1         VARCHAR2(20)     NULL,
    ASIS_PK_COL2         VARCHAR2(20)     NULL,
    ASIS_PK_COL3         VARCHAR2(20)     NULL,
    ASIS_PK_COL4         VARCHAR2(20)     NULL,
    ASIS_PK_COL5         VARCHAR2(20)     NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLICY_NUMBER) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_200 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_200
(
    PREM_PAYMENT_ID      NUMBER       NOT NULL,
    RECV_DLNG_ON         DATE             NULL,
    RECP_ON              DATE             NULL,
    SUM_ORIG_PREM        NUMBER(12)       NULL,
    PREM_KIND_DVCD       VARCHAR2(30)     NULL,
    PROCESSING_FP_NUMBER VARCHAR2(10)     NULL,
    VALD_DVSN_CODE       VARCHAR2(1)      NULL,
    POLY_NO              VARCHAR2(27)     NULL,
    POLICY_NUMBER        VARCHAR2(27)     NULL,
    CI_FLAG              VARCHAR2(2)      NULL,
    ASIS_TAB             VARCHAR2(20)     NULL,
    ASIS_PK_COL1         VARCHAR2(20)     NULL,
    ASIS_PK_COL2         VARCHAR2(20)     NULL,
    ASIS_PK_COL3         VARCHAR2(20)     NULL,
    ASIS_PK_COL4         VARCHAR2(20)     NULL,
    ASIS_PK_COL5         VARCHAR2(20)     NULL,
    AGREEMENT_ID         NUMBER(19)       NULL,
    MONEY_PROV_ID        NUMBER(19)       NULL,
    MONEY_PROV_ANCHOR_ID NUMBER(19)       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_200 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_210 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_210
(
    VALD_DVSN_CODE  VARCHAR2(1)      NULL,
    POLICY_NUMBER   VARCHAR2(27)     NULL,
    PREM_PAYMENT_ID NUMBER       NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLICY_NUMBER) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_210 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_300 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_300
(
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_300 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT
(   
   PREM_PAYMENT_ID            NUMBER        NULL,
   RECV_DLNG_DATE             DATE          NULL,
   RECV_DLNG_DT               VARCHAR2(12)  NULL, 
   RECP_DATE                  DATE          NULL,   
   RECV_DLNG_SQNO             NUMBER(15)    NULL,
   RECV_SEQ_NO                NUMBER(3)     NULL,
   LAST_CHMN_MPNO             VARCHAR2(12)  NULL,
   LAST_CHNG_DTTM             DATE          NULL,
   PGM_ID                     VARCHAR2(150) NULL,
   END_PYYM                   VARCHAR2(9)   NULL,
   PAYM_YM                    VARCHAR2(9)   NULL,
   PAYM_CNT                   NUMBER(3)     NULL,   
   PAYMENT_FREQUENCY_CODE     VARCHAR2(100) NULL,
   PAYM_STAT_DVSN             VARCHAR2(15)  NULL,
   PREM_KIND_DVCD             VARCHAR2(15)  NULL,   
   ORIG_MAIN_PREM             NUMBER(12)    NULL,
   ORIG_SPCD_PREM             NUMBER(12)    NULL,
   COLL_METD_CODE             VARCHAR2(15)  NULL,   
   COLL_PREM                  NUMBER(15)    NULL,
   SUM_ORIG_PREM              NUMBER(12)    NULL,
   REAL_RECV_PREM             NUMBER(13)    NULL,   
   COLL_ORGN_CODE             VARCHAR2(8)   NULL,
   DLNG_ORGN_CODE             VARCHAR2(8)   NULL,
   ARRE_INTE                  NUMBER(15)    NULL,
   PPAY_DSCT_PREM             NUMBER(15)    NULL,
   DSCT_PREM_1                NUMBER(12)    NULL,
   DSCT_PREM_2                NUMBER(12)    NULL,
   DSCT_PREM_3                NUMBER(12)    NULL,
   DSCT_PREM_4                NUMBER(12)    NULL,
   DSCT_PREM_5                NUMBER(12)    NULL,
   PRDC_KIND_CD1              VARCHAR2(15)  NULL,
   PRDC_KIND_CD2              VARCHAR2(15)  NULL,
   PRDC_KIND_CD3              VARCHAR2(15)  NULL,
   PRDC_KIND_CD4              VARCHAR2(15)  NULL,
   PRDC_KIND_CD5              VARCHAR2(15)  NULL,
   RCWC_METD_DVSN             VARCHAR2(15)  NULL,
   PROCESSING_FP_NUMBER       VARCHAR2(10)  NULL,
   COLLECTING_FP_NUMBER       VARCHAR(10)   NULL,   
   AGREEMENT_ID               NUMBER(19)    NULL,
   AGREEMENT_NUMBER           VARCHAR2(255) NULL,
   AGREEMENT_ANCHOR_ID        NUMBER(19)    NULL,
   STRT_DATE_DT               TIMESTAMP(6)  NULL,
   END_DATE_DT                TIMESTAMP(6)  NULL,
   STRT_DATE                  VARCHAR2(8)   NULL,
   END_DATE                   VARCHAR2(8)   NULL,
   CNTT_STAT_CODE             VARCHAR2(10)  NULL,
   CNTT_STAT_DTCD             VARCHAR2(10)  NULL,
   AGMT_STATE_CODE            VARCHAR2(10)  NULL,
   AGMT_STATE_DTL_CODE        VARCHAR2(255) NULL,
   AGMT_STATE_DTL_REASON_CODE VARCHAR2(255) NULL, 
   IRKD_CODE_DTAL             VARCHAR2(10)  NULL,   
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   ASIS_PK_COL3               VARCHAR2(20)  NULL,
   ASIS_PK_COL4               VARCHAR2(20)  NULL,
   ASIS_PK_COL5               VARCHAR2(20)  NULL,
   STDD_YM                    VARCHAR2(9)   NULL,
   RECV_CNCL_DATE             DATE          NULL,
   FIN_TRAN_TYPE_CODE         VARCHAR2(3)   NULL,
   CREATOR_ID                 VARCHAR2(7)   NULL,
   FRST_CNTT_DATE             VARCHAR2(8)   NULL,
   LAST_PAYM_CYCL_CODE        VARCHAR2(10)  NULL,
   MONEY_PROV_ID              NUMBER(19)    NULL,
   MONEY_PROV_ANCHOR_ID       NUMBER(19)    NULL,
   MONEY_SCHEDULER_ID         NUMBER(19)    NULL,
   COMP_PAYM_NUM              NUMBER(19)    NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(14)  NULL,
   POLICY_NUMBER              VARCHAR2(14)  NULL,
   CI_FLAG                    VARCHAR2(2)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_FIX
(
   PREM_PAYMENT_ID            NUMBER        NULL,
   RECV_DLNG_DATE             DATE          NULL,
   RECV_DLNG_DT               VARCHAR2(12)  NULL, 
   RECP_DATE                  DATE          NULL,   
   RECV_DLNG_SQNO             NUMBER(15)    NULL,
   RECV_SEQ_NO                NUMBER(3)     NULL,
   LAST_CHMN_MPNO             VARCHAR2(12)  NULL,
   LAST_CHNG_DTTM             DATE          NULL,
   PGM_ID                     VARCHAR2(150) NULL,
   END_PYYM                   VARCHAR2(9)   NULL,
   PAYM_YM                    VARCHAR2(9)   NULL,
   PAYM_CNT                   NUMBER(3)     NULL,   
   PAYMENT_FREQUENCY_CODE     VARCHAR2(100) NULL,
   PAYM_STAT_DVSN             VARCHAR2(15)  NULL,
   PREM_KIND_DVCD             VARCHAR2(15)  NULL,   
   ORIG_MAIN_PREM             NUMBER(12)    NULL,
   ORIG_SPCD_PREM             NUMBER(12)    NULL,
   COLL_METD_CODE             VARCHAR2(15)  NULL,   
   COLL_PREM                  NUMBER(15)    NULL,
   SUM_ORIG_PREM              NUMBER(12)    NULL,
   REAL_RECV_PREM             NUMBER(13)    NULL,   
   COLL_ORGN_CODE             VARCHAR2(8)   NULL,
   DLNG_ORGN_CODE             VARCHAR2(8)   NULL,
   ARRE_INTE                  NUMBER(15)    NULL,
   PPAY_DSCT_PREM             NUMBER(15)    NULL,
   DSCT_PREM_1                NUMBER(12)    NULL,
   DSCT_PREM_2                NUMBER(12)    NULL,
   DSCT_PREM_3                NUMBER(12)    NULL,
   DSCT_PREM_4                NUMBER(12)    NULL,
   DSCT_PREM_5                NUMBER(12)    NULL,
   PRDC_KIND_CD1              VARCHAR2(15)  NULL,
   PRDC_KIND_CD2              VARCHAR2(15)  NULL,
   PRDC_KIND_CD3              VARCHAR2(15)  NULL,
   PRDC_KIND_CD4              VARCHAR2(15)  NULL,
   PRDC_KIND_CD5              VARCHAR2(15)  NULL,
   RCWC_METD_DVSN             VARCHAR2(15)  NULL,
   PROCESSING_FP_NUMBER       VARCHAR2(10)  NULL,
   COLLECTING_FP_NUMBER       VARCHAR(10)   NULL,   
   AGREEMENT_ID               NUMBER(19)    NULL,
   AGREEMENT_NUMBER           VARCHAR2(255) NULL,
   AGREEMENT_ANCHOR_ID        NUMBER(19)    NULL,
   STRT_DATE_DT               TIMESTAMP(6)  NULL,
   END_DATE_DT                TIMESTAMP(6)  NULL,
   STRT_DATE                  VARCHAR2(8)   NULL,
   END_DATE                   VARCHAR2(8)   NULL,
   CNTT_STAT_CODE             VARCHAR2(10)  NULL,
   CNTT_STAT_DTCD             VARCHAR2(10)  NULL,
   AGMT_STATE_CODE            VARCHAR2(10)  NULL,
   AGMT_STATE_DTL_CODE        VARCHAR2(255) NULL,
   AGMT_STATE_DTL_REASON_CODE VARCHAR2(255) NULL,  
   IRKD_CODE_DTAL             VARCHAR2(10)  NULL,  
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   ASIS_PK_COL3               VARCHAR2(20)  NULL,
   ASIS_PK_COL4               VARCHAR2(20)  NULL,
   ASIS_PK_COL5               VARCHAR2(20)  NULL,
   STDD_YM                    VARCHAR2(9)   NULL,
   RECV_CNCL_DATE             DATE          NULL,
   FIN_TRAN_TYPE_CODE         VARCHAR2(3)   NULL,
   CREATOR_ID                 VARCHAR2(7)   NULL,
   FRST_CNTT_DATE             VARCHAR2(8)   NULL,
   LAST_PAYM_CYCL_CODE        VARCHAR2(10)  NULL,
   MONEY_PROV_ID              NUMBER(19)    NULL,
   MONEY_PROV_ANCHOR_ID       NUMBER(19)    NULL,
   MONEY_SCHEDULER_ID         NUMBER(19)    NULL,
   COMP_PAYM_NUM              NUMBER(19)    NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(14)  NULL,
   POLICY_NUMBER              VARCHAR2(14)  NULL,
   CI_FLAG                    VARCHAR2(2)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_900
(
   ID                               NUMBER(19,0)  NOT NULL,
   CREATE_AT                        TIMESTAMP     NULL,
   CREATE_PRGM_ID                   VARCHAR2(100) NULL,
   CREATOR_ID                       VARCHAR2(100) NULL,
   CREATOR_IP                       VARCHAR2(100) NULL,
   LAST_MODIFIED_AT                 TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID            VARCHAR2(100) NULL,
   LAST_MODIFIER_ID                 VARCHAR2(100) NULL,
   LAST_MODIFIER_IP                 VARCHAR2(100) NULL,
   LOCK_NO                          NUMBER        NULL,
   AGREEMENT_ID                     NUMBER(19,0)  NULL,
   AGREEMENT_NUMBER                 VARCHAR2(255) NULL,
   AMOUNT                           NUMBER(24,12) NULL,
   SCALE                            NUMBER(10,0)  NULL,
   CONTRACT_PROC_NUMBER             VARCHAR2(255) NULL,
   CURRENCY_CODE                    VARCHAR2(10)  NULL,
   DESCRIPTION                      VARCHAR2(255) NULL,
   EXTERNAL_REF                     VARCHAR2(255) NULL,
   FIN_TRAN_TYPE_CODE               VARCHAR2(10)  NULL,
   INN_REF                          VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE                VARCHAR2(10)  NULL,
   MONEY_PROV_ELEMENT_ID            NUMBER(19,0)  NULL,
   MONEY_PROV_ELEMENT_TYPE_CODE     VARCHAR2(10)  NULL,
   POLICY_NUMBER                    VARCHAR2(255) NULL,
   POSTED_ON                        DATE          NULL,
   DEPOSIT_ON                       DATE          NULL,
   DETAILED_DESCRIPTION             VARCHAR2(255) NULL,
   PAYMENT_ON                       DATE          NULL,
   REJECTION_ON                     DATE          NULL,
   REJECTION_REASON_CODE            VARCHAR(10)   NULL,
   VALUE_ON                         DATE          NULL,
   COLLECTING_FP_NUMBER             VARCHAR(10)   NULL,
   COLLECTING_ORG_CODE              VARCHAR2(10)  NULL,
   COLLECTION_METHOD_CODE           VARCHAR2(10)  NULL,
   END_OF_PAYMENT_PERIOD            VARCHAR2(6)   NULL,
   NUMBER_OF_PAYMENTS               NUMBER(10)    NULL,
   ORIG_PREMIUM_AMOUNT              NUMBER(24,12) NULL,
   ORIG_PREM_SCALE                  NUMBER(10,0)  NULL,
   ORIG_RIDER_PREM_AMOUNT           NUMBER(24,12) NULL,
   ORIG_RIDER_PREM_SCALE            NUMBER(10,0)  NULL,
   OVERDUE_INTEREST_AMOUNT          NUMBER(24,12) NULL,
   OVERDUE_INTEREST_SCALE           NUMBER(10,0)  NULL,
   PAYMENT_METHOD_TYPE_CODE         VARCHAR2(10)  NULL,
   PAYMENT_PERIOD                   VARCHAR2(6)   NULL,
   PAYMENT_STATE_TYPE_CODE          VARCHAR2(10)  NULL,
   PREMIUM_AMOUNT                   NUMBER(24,12) NULL,
   PREM_SCALE                       NUMBER(10,0)  NULL,
   PREMIUM_KIND_TYPE_CODE           VARCHAR2(10)  NULL,
   PREPAID_DISCOUNT_AMOUNT          NUMBER(24,12) NULL,
   PREPAID_DISCOUNT_SCALE           NUMBER(10,0)  NULL,
   PROCESSING_FP_NUMBER             VARCHAR2(10)  NULL,
   PROCESSING_ORG_CODE              VARCHAR2(10)  NULL,
   RECEIPT_ON                       DATE          NULL,
   PREM_PAYMENT_MIS_ID              NUMBER(19,0)  NULL,
   MONEY_PROV_ID                    NUMBER(19,0)  NULL,
   MONEY_SCHEDULER_EXECUTION_ID     NUMBER(19,0)  NULL,
   PAYMENT_PROCESSING_ID            NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY                  VARCHAR2(2)   NULL,
   ARCHIVE_AT                       TIMESTAMP(6)  NULL,
   PAYMENT_FREQ_TYPE_CODE           VARCHAR2(10)  NULL,
   PAYMENT_FREQUENCY_VALUE          NUMBER(10)    NULL,
   ASIS_TAB                         VARCHAR2(11)  NULL,
   ASIS_PK_COL1                     VARCHAR2(9)   NULL,
   ASIS_PK_COL2                     VARCHAR2(10)  NULL,
   ASIS_PK_COL3                     VARCHAR2(10)  NULL,
   ASIS_PK_COL4                     VARCHAR2(10)  NULL,
   VALD_DVSN_CODE                   VARCHAR2(1)   NULL,
   POLY_NO                          VARCHAR2(14)  NULL,
   PREM_PAYMENT_DUE_ID              NUMBER(19,0)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_900_FIX
(
   ID                           NUMBER(19,0)  NOT NULL,
   CREATE_AT                    TIMESTAMP     NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER        NULL,
   AGREEMENT_ID                 NUMBER(19,0)  NULL,
   AGREEMENT_NUMBER             VARCHAR2(255) NULL,
   AMOUNT                       NUMBER(24,12) NULL,
   SCALE                        NUMBER(10,0)  NULL,
   CONTRACT_PROC_NUMBER         VARCHAR2(255) NULL,
   CURRENCY_CODE                VARCHAR2(10)  NULL,
   DESCRIPTION                  VARCHAR2(255) NULL,
   EXTERNAL_REF                 VARCHAR2(255) NULL,
   FIN_TRAN_TYPE_CODE           VARCHAR2(10)  NULL,
   INN_REF                      VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE            VARCHAR2(10)  NULL,
   MONEY_PROV_ELEMENT_ID        NUMBER(19,0)  NULL,
   MONEY_PROV_ELEMENT_TYPE_CODE VARCHAR2(10)  NULL,
   POLICY_NUMBER                VARCHAR2(255) NULL,
   POSTED_ON                    DATE          NULL,
   DEPOSIT_ON                   DATE          NULL,
   DETAILED_DESCRIPTION         VARCHAR2(255) NULL,
   PAYMENT_ON                   DATE          NULL,
   REJECTION_ON                 DATE          NULL,
   REJECTION_REASON_CODE        VARCHAR(10)   NULL,
   VALUE_ON                     DATE          NULL,
   COLLECTING_FP_NUMBER         VARCHAR(10)   NULL,
   COLLECTING_ORG_CODE          VARCHAR2(10)  NULL,
   COLLECTION_METHOD_CODE       VARCHAR2(10)  NULL,
   END_OF_PAYMENT_PERIOD        VARCHAR2(6)   NULL,
   NUMBER_OF_PAYMENTS           NUMBER(10)    NULL,
   ORIG_PREMIUM_AMOUNT          NUMBER(24,12) NULL,
   ORIG_PREM_SCALE              NUMBER(10,0)  NULL,
   ORIG_RIDER_PREM_AMOUNT       NUMBER(24,12) NULL,
   ORIG_RIDER_PREM_SCALE        NUMBER(10,0)  NULL,
   OVERDUE_INTEREST_AMOUNT      NUMBER(24,12) NULL,
   OVERDUE_INTEREST_SCALE       NUMBER(10,0)  NULL,
   PAYMENT_METHOD_TYPE_CODE     VARCHAR2(10)  NULL,
   PAYMENT_PERIOD               VARCHAR2(6)   NULL,
   PAYMENT_STATE_TYPE_CODE      VARCHAR2(10)  NULL,
   PREMIUM_AMOUNT               NUMBER(24,12) NULL,
   PREM_SCALE                   NUMBER(10,0)  NULL,
   PREMIUM_KIND_TYPE_CODE       VARCHAR2(10)  NULL,
   PREPAID_DISCOUNT_AMOUNT      NUMBER(24,12) NULL,
   PREPAID_DISCOUNT_SCALE       NUMBER(10,0)  NULL,
   PROCESSING_FP_NUMBER         VARCHAR2(10)  NULL,
   PROCESSING_ORG_CODE          VARCHAR2(10)  NULL,
   RECEIPT_ON                   DATE          NULL,
   PREM_PAYMENT_MIS_ID          NUMBER(19,0)  NULL,
   MONEY_PROV_ID                NUMBER(19,0)  NULL,
   MONEY_SCHEDULER_EXECUTION_ID NUMBER(19,0)  NULL,
   PAYMENT_PROCESSING_ID        NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
   ARCHIVE_AT                   TIMESTAMP(6)  NULL,
   PAYMENT_FREQ_TYPE_CODE       VARCHAR2(10)  NULL,
   PAYMENT_FREQUENCY_VALUE      NUMBER(10)    NULL,
   ASIS_TAB                     VARCHAR2(11)  NULL,
   ASIS_PK_COL1                 VARCHAR2(9)   NULL,
   ASIS_PK_COL2                 VARCHAR2(10)  NULL,
   ASIS_PK_COL3                 VARCHAR2(10)  NULL,
   ASIS_PK_COL4                 VARCHAR2(10)  NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL,
   POLY_NO                      VARCHAR2(14)  NULL,
   PREM_PAYMENT_DUE_ID          NUMBER(19,0)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_PREM_PAYMENT_900_FIX NOLOGGING;

/* TBL_VAO_PREM_COLL */

DROP TABLE MAPKEY_TBL_VAO_PREM_COLL CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_VAO_PREM_COLL
(
    VAO_PREM_COLL_ID     NUMBER        NULL, 
    POLICY_NUMBER        VARCHAR2(9)   NULL,
    JOIN_GOOD_NO_MIG     NUMBER(3)     NULL,
    AGREEMENT_NUMBER     VARCHAR2(255) NULL, 
    ORIGIN_AGREEMENT_ID  NUMBER(19)    NULL, 
    FLAG                 VARCHAR2(1)   NULL,
    ASIS_TAB             VARCHAR2(50)  NULL,
    ASIS_PK_COL1         VARCHAR2(20)  NULL,
    ASIS_PK_COL2         VARCHAR2(20)  NULL,
    ASIS_PK_COL3         VARCHAR2(20)  NULL,
    ASIS_PK_COL4         VARCHAR2(20)  NULL,
    VALD_DVSN_CODE       VARCHAR2(1)   NULL,
    POLY_NO              VARCHAR2(9)   NULL,
    JOIN_GOOD_NO         NUMBER(3)     NULL,
    MIG_NUM              NUMBER        NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_VAO_PREM_COLL NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_VAO_PREM_COLL_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_VAO_PREM_COLL_FIX
(
    VAO_PREM_COLL_ID     NUMBER        NULL, 
    POLICY_NUMBER        VARCHAR2(9)   NULL,
    JOIN_GOOD_NO_MIG     NUMBER(3)     NULL,
    AGREEMENT_NUMBER     VARCHAR2(255) NULL, 
    ORIGIN_AGREEMENT_ID  NUMBER(19)    NULL, 
    FLAG                 VARCHAR2(1)   NULL,
    ASIS_TAB             VARCHAR2(50)  NULL,
    ASIS_PK_COL1         VARCHAR2(20)  NULL,
    ASIS_PK_COL2         VARCHAR2(20)  NULL,
    ASIS_PK_COL3         VARCHAR2(20)  NULL,
    ASIS_PK_COL4         VARCHAR2(20)  NULL,
    VALD_DVSN_CODE       VARCHAR2(1)   NULL,
    POLY_NO              VARCHAR2(9)   NULL,
    JOIN_GOOD_NO         NUMBER(3)     NULL,
    MIG_NUM              NUMBER        NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_VAO_PREM_COLL_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_040 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_040
(
    VALD_DVSN_CODE               VARCHAR2(1)   NOT NULL,
    POLY_NO                      VARCHAR2(9)   NULL,
    JOIN_GOOD_NO                 VARCHAR2(3)   NULL, 
    FLAG                         VARCHAR2(5)   NULL,
    POLICY_NUMBER                VARCHAR2(9)   NULL,
    GOOD_RELN_CODE               VARCHAR2(10)  NULL, 
    GOOD_CODE_DTAL               VARCHAR2(10)  NULL, 
    AGREEMENT_NUMBER             VARCHAR2(255) NULL, 
    PREM_FRPY_PSYN               VARCHAR2(10)  NULL, 
    CNTT_PAYM_CYCD               VARCHAR2(10)  NULL,
    P_CNTT_PAYM_CYCD             VARCHAR2(10)  NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_040 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_050 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_050
(
    VALD_DVSN_CODE               VARCHAR2(1)   NOT NULL,
    POLY_NO                      VARCHAR2(9)   NULL,
    JOIN_GOOD_NO                 VARCHAR2(3)   NULL, 
    FLAG                         VARCHAR2(5)   NULL,
    POLICY_NUMBER                VARCHAR2(9)   NULL,
    GOOD_RELN_CODE               VARCHAR2(10)  NULL, 
    GOOD_CODE_DTAL               VARCHAR2(10)  NULL, 
    AGREEMENT_NUMBER             VARCHAR2(255) NULL, 
    PREM_FRPY_PSYN               VARCHAR2(10)  NULL, 
    CNTT_PAYM_CYCD               VARCHAR2(10)  NULL,
    P_CNTT_PAYM_CYCD             VARCHAR2(10)  NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_050 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_100
(
    VALD_DVSN_CODE               VARCHAR2(1)   NOT NULL,
    POLY_NO                      VARCHAR2(9)   NULL,
    POLICY_NUMBER                VARCHAR2(9)   NULL,
    AGREEMENT_NUMBER             VARCHAR2(255) NULL,
    ORIGIN_AGREEMENT_ID          NUMBER(19)    NULL, 
    VAO_ID                       NUMBER        NULL,
    LAST_MODIFIER_ID             VARCHAR2(24)  NULL,
    LAST_MODIFIED_AT             DATE          NULL,
    LAST_MODIFIED_PRGM_ID        VARCHAR2(150) NULL,
    COLLECTION_METHOD_CODE       VARCHAR2(30)  NULL,
    LAST_STANDARD_ON             DATE          NULL,
    LAST_NUMBER_OF_PYMTS         NUMBER(3)     NULL,
    LAST_PYMT_PERIOD             VARCHAR2(18)  NULL,
    LAST_PROCESSING_ON           DATE          NULL,
    LAST_SUBST_PYMT_PERIOD       VARCHAR2(18)  NULL,
    GROUP_COLLECTION_MGMT_NUMBER VARCHAR2(36)  NULL,
    FLAG                         VARCHAR2(1)   NULL,
    ASIS_TAB                     VARCHAR2(100) NULL,
    ASIS_PK_COL1                 VARCHAR2(100) NULL,
    ASIS_PK_COL2                 VARCHAR2(100) NULL,
    ASIS_PK_COL3                 VARCHAR2(100) NULL,
    ASIS_PK_COL4                 VARCHAR2(100) NULL,
    ASIS_PK_COL5                 VARCHAR2(100) NULL  
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_110 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_110
(
    VALD_DVSN_CODE               VARCHAR2(1)   NOT NULL,
    POLY_NO                      VARCHAR2(9)   NULL,
    AGREEMENT_NUMBER             VARCHAR2(255) NULL,
    FLAG                         VARCHAR2(1)   NULL,
    VAO_ID                       NUMBER        NULL,
    LAST_MODIFIER_ID             VARCHAR2(24)  NULL,
    LAST_MODIFIED_AT             DATE          NULL,
    LAST_MODIFIED_PRGM_ID        VARCHAR2(150) NULL,
    LAST_STANDARD_ON             DATE          NULL,
    LAST_NUMBER_OF_PYMTS         NUMBER(3)     NULL,
    LAST_PYMT_PERIOD             VARCHAR2(18)  NULL,
    LAST_PROCESSING_ON           DATE          NULL,
    LAST_SUBST_PYMT_PERIOD       VARCHAR2(18)  NULL,
    ASIS_TAB                     VARCHAR2(100) NULL,
    ASIS_PK_COL1                 VARCHAR2(100) NULL,
    ASIS_PK_COL2                 VARCHAR2(100) NULL,
    ASIS_PK_COL3                 VARCHAR2(100) NULL,
    ASIS_PK_COL4                 VARCHAR2(100) NULL,
    ASIS_PK_COL5                 VARCHAR2(100) NULL,  
    CREATOR_ID                   VARCHAR2(100) NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_110 NOLOGGING;

----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_900
(
    ID                           NUMBER(19)    NOT NULL,
    CREATE_AT                    TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID               VARCHAR2(100) NULL,
    CREATOR_ID                   VARCHAR2(100) NULL,
    CREATOR_IP                   VARCHAR2(100) NULL,
    LAST_MODIFIED_AT             TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
    LAST_MODIFIER_ID             VARCHAR2(100) NULL,
    LAST_MODIFIER_IP             VARCHAR2(100) NULL,
    AGREEMENT_NUMBER             VARCHAR2(255) NULL,
    LOCK_NO                      NUMBER(19)    NOT NULL,
    POLICY_NUMBER                VARCHAR2(255) NULL,
    COLLECTION_METHOD_CODE       VARCHAR2(10)  NULL, 
    GROUP_COLLECTION_MGMT_NUMBER VARCHAR2(20)  NULL, 
    LAST_NUMBER_OF_PYMTS         NUMBER(10)    NULL, 
    LAST_PYMT_PERIOD             VARCHAR2(6)   NULL, 
    LAST_PROCESSING_ON           DATE          NULL, 
    LAST_STANDARD_ON             DATE          NULL, 
    LAST_SUBST_PYMT_PERIOD       VARCHAR2(6)   NULL, 
    PREMIUM_PAYMENT_TYPE_CODE    VARCHAR2(10)  NULL,
    DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE            VARCHAR2(10)  NULL,
    ASIS_TAB                     VARCHAR2(100) NULL,
    ASIS_PK_COL1                 VARCHAR2(100) NULL,
    ASIS_PK_COL2                 VARCHAR2(100) NULL,
    ASIS_PK_COL3                 VARCHAR2(100) NULL,
    ASIS_PK_COL4                 VARCHAR2(100) NULL,
    ASIS_PK_COL5                 VARCHAR2(100) NULL,
    ORIGIN_AGREEMENT_ID          NUMBER(19)    NOT NULL,
    VALD_DVSN_CODE               VARCHAR2(1)   NOT NULL, 
    POLY_NO                      VARCHAR2(9)   NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_900_FIX
(
    ID                           NUMBER(19)    NOT NULL,
    CREATE_AT                    TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID               VARCHAR2(100) NULL,
    CREATOR_ID                   VARCHAR2(100) NULL,
    CREATOR_IP                   VARCHAR2(100) NULL,
    LAST_MODIFIED_AT             TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
    LAST_MODIFIER_ID             VARCHAR2(100) NULL,
    LAST_MODIFIER_IP             VARCHAR2(100) NULL,
    AGREEMENT_NUMBER             VARCHAR2(255) NULL,
    LOCK_NO                      NUMBER(19)    NOT NULL,
    POLICY_NUMBER                VARCHAR2(255) NULL,
    COLLECTION_METHOD_CODE       VARCHAR2(10)  NULL, 
    GROUP_COLLECTION_MGMT_NUMBER VARCHAR2(20)  NULL, 
    LAST_NUMBER_OF_PYMTS         NUMBER(10)    NULL, 
    LAST_PYMT_PERIOD             VARCHAR2(6)   NULL, 
    LAST_PROCESSING_ON           DATE          NULL, 
    LAST_STANDARD_ON             DATE          NULL, 
    LAST_SUBST_PYMT_PERIOD       VARCHAR2(6)   NULL, 
    PREMIUM_PAYMENT_TYPE_CODE    VARCHAR2(10)  NULL,
    DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE            VARCHAR2(10)  NULL,
    ASIS_TAB                     VARCHAR2(100) NULL,
    ASIS_PK_COL1                 VARCHAR2(100) NULL,
    ASIS_PK_COL2                 VARCHAR2(100) NULL,
    ASIS_PK_COL3                 VARCHAR2(100) NULL,
    ASIS_PK_COL4                 VARCHAR2(100) NULL,
    ASIS_PK_COL5                 VARCHAR2(100) NULL,
    ORIGIN_AGREEMENT_ID          NUMBER(19)    NOT NULL,
    VALD_DVSN_CODE               VARCHAR2(1)   NOT NULL, 
    POLY_NO                      VARCHAR2(9)   NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_VAO_PREM_COLL_VERSION */
----------------------------------------------------------------------------------------------------L
DROP TABLE MAPKEY_TBL_VAO_PREM_COLL_VERSION CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_VAO_PREM_COLL_VERSION
(
   POLICY_NUMBER                 VARCHAR2(9)   NULL,
   ASIS_TAB                      VARCHAR2(100) NULL,
   ASIS_PK_COL1                  VARCHAR2(100) NULL,
   ASIS_PK_COL2                  VARCHAR2(100) NULL,
   ASIS_PK_COL3                  VARCHAR2(100) NULL,
   ASIS_PK_COL4                  VARCHAR2(100) NULL,
   ASIS_PK_COL5                  VARCHAR2(100) NULL,
   FLAG                          VARCHAR2(1)   NULL,
   ASIS_FLAG                     VARCHAR2(20)  NULL,
   CI_FLAG                       VARCHAR2(20)  NULL,
   CREATOR_ID                    VARCHAR2(7)   NULL,
   FIN_TRAN_TYPE_CODE            VARCHAR2(3)   NULL,
   STRT_ON                       DATE          NULL,
   CNCL_DATE                     DATE          NULL,
   MERGE_COUNT                   NUMBER        NULL,
   VALD_DVSN_CODE                VARCHAR2(1)   NULL,
   POLY_NO                       VARCHAR2(9)   NULL,
   JOIN_GOOD_NO                  VARCHAR2(3)   NULL, 
   VAO_VERSION_ID                NUMBER        NULL, 
   KEY_ID                        NUMBER        NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_VAO_PREM_COLL_VERSION NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_VAO_PREM_COLL_VERSION_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_VAO_PREM_COLL_VERSION_FIX
(
   POLICY_NUMBER                 VARCHAR2(9)   NULL,
   ASIS_TAB                      VARCHAR2(100) NULL,
   ASIS_PK_COL1                  VARCHAR2(100) NULL,
   ASIS_PK_COL2                  VARCHAR2(100) NULL,
   ASIS_PK_COL3                  VARCHAR2(100) NULL,
   ASIS_PK_COL4                  VARCHAR2(100) NULL,
   ASIS_PK_COL5                  VARCHAR2(100) NULL,
   FLAG                          VARCHAR2(1)   NULL,
   ASIS_FLAG                     VARCHAR2(20)  NULL,
   CI_FLAG                       VARCHAR2(20)  NULL,
   CREATOR_ID                    VARCHAR2(7)   NULL,
   FIN_TRAN_TYPE_CODE            VARCHAR2(3)   NULL,
   STRT_ON                       DATE          NULL,
   CNCL_DATE                     DATE          NULL,
   MERGE_COUNT                   NUMBER        NULL,
   VALD_DVSN_CODE                VARCHAR2(1)   NULL,
   POLY_NO                       VARCHAR2(9)   NULL,
   JOIN_GOOD_NO                  VARCHAR2(3)   NULL, 
   VAO_VERSION_ID                NUMBER        NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_VAO_PREM_COLL_VERSION_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_100
(
    UNIQUE_ID               NUMBER        NULL,
    VAO_ID                  NUMBER        NULL,
    FLAG                    VARCHAR2(1)   NULL,
    ASIS_FLAG               VARCHAR2(13)  NULL,
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(9)   NULL,
    JOIN_GOOD_NO            VARCHAR2(3)   NULL,
    POLICY_NUMBER           VARCHAR2(255) NULL,
    AGREEMENT_NUMBER        VARCHAR2(255) NULL,
    CNTT_PAYM_CYCD          VARCHAR2(3)   NULL,
    FIN_TRAN_TYPE_CODE      VARCHAR2(3)   NULL,
    LAST_NUMBER_OF_PYMTS    NUMBER(10)    NULL,
    LAST_PYMT_PERIOD        VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON      DATE          NULL,
    LAST_STANDARD_ON        DATE          NULL,
    LAST_SUBST_PYMT_PERIOD  VARCHAR2(6)   NULL,
    START_ON                DATE          NULL,
    CNCL_DATE               DATE          NULL,
    CREATE_PRGM_ID          VARCHAR2(100) NULL,
    CREATOR_ID              VARCHAR2(100) NULL,
    CREATOR_IP              VARCHAR2(100) NULL,
    LAST_MODIFIED_AT        TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID   VARCHAR2(100) NULL,
    LAST_MODIFIER_ID        VARCHAR2(100) NULL,
    LAST_MODIFIER_IP        VARCHAR2(100) NULL,
    LOCK_NO                 NUMBER        NULL,
    ASIS_TAB                VARCHAR2(100) NULL,
    ASIS_PK_COL1            VARCHAR2(100) NULL,
    ASIS_PK_COL2            VARCHAR2(100) NULL,
    ASIS_PK_COL3            VARCHAR2(100) NULL,
    ASIS_PK_COL4            VARCHAR2(100) NULL,
    ASIS_PK_COL5            VARCHAR2(100) NULL
)
PARTITION BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO)
(   PARTITION VALID VALUES ('1')
    (
         SUBPARTITION VAO_VERSION_VALID_01,
         SUBPARTITION VAO_VERSION_VALID_02,
         SUBPARTITION VAO_VERSION_VALID_03,
         SUBPARTITION VAO_VERSION_VALID_04,
         SUBPARTITION VAO_VERSION_VALID_05,
         SUBPARTITION VAO_VERSION_VALID_06,
         SUBPARTITION VAO_VERSION_VALID_07,
         SUBPARTITION VAO_VERSION_VALID_08,
         SUBPARTITION VAO_VERSION_VALID_09,
         SUBPARTITION VAO_VERSION_VALID_10,
         SUBPARTITION VAO_VERSION_VALID_11,
         SUBPARTITION VAO_VERSION_VALID_12,
         SUBPARTITION VAO_VERSION_VALID_13,
         SUBPARTITION VAO_VERSION_VALID_14,
         SUBPARTITION VAO_VERSION_VALID_15,
         SUBPARTITION VAO_VERSION_VALID_16,
         SUBPARTITION VAO_VERSION_VALID_17,
         SUBPARTITION VAO_VERSION_VALID_18,
         SUBPARTITION VAO_VERSION_VALID_19,
         SUBPARTITION VAO_VERSION_VALID_20,
         SUBPARTITION VAO_VERSION_VALID_21,
         SUBPARTITION VAO_VERSION_VALID_22,
         SUBPARTITION VAO_VERSION_VALID_23,
         SUBPARTITION VAO_VERSION_VALID_24,
         SUBPARTITION VAO_VERSION_VALID_25,
         SUBPARTITION VAO_VERSION_VALID_26,
         SUBPARTITION VAO_VERSION_VALID_27,
         SUBPARTITION VAO_VERSION_VALID_28,
         SUBPARTITION VAO_VERSION_VALID_29,
         SUBPARTITION VAO_VERSION_VALID_30,
         SUBPARTITION VAO_VERSION_VALID_31,
         SUBPARTITION VAO_VERSION_VALID_32,
         SUBPARTITION VAO_VERSION_VALID_33,
         SUBPARTITION VAO_VERSION_VALID_34,
         SUBPARTITION VAO_VERSION_VALID_35,
         SUBPARTITION VAO_VERSION_VALID_36,
         SUBPARTITION VAO_VERSION_VALID_37,
         SUBPARTITION VAO_VERSION_VALID_38,
         SUBPARTITION VAO_VERSION_VALID_39,
         SUBPARTITION VAO_VERSION_VALID_40,
         SUBPARTITION VAO_VERSION_VALID_41,
         SUBPARTITION VAO_VERSION_VALID_42,
         SUBPARTITION VAO_VERSION_VALID_43,
         SUBPARTITION VAO_VERSION_VALID_44,
         SUBPARTITION VAO_VERSION_VALID_45,
         SUBPARTITION VAO_VERSION_VALID_46,
         SUBPARTITION VAO_VERSION_VALID_47,
         SUBPARTITION VAO_VERSION_VALID_48,
         SUBPARTITION VAO_VERSION_VALID_49,
         SUBPARTITION VAO_VERSION_VALID_50,
         SUBPARTITION VAO_VERSION_VALID_51,
         SUBPARTITION VAO_VERSION_VALID_52,
         SUBPARTITION VAO_VERSION_VALID_53,
         SUBPARTITION VAO_VERSION_VALID_54,
         SUBPARTITION VAO_VERSION_VALID_55,
         SUBPARTITION VAO_VERSION_VALID_56,
         SUBPARTITION VAO_VERSION_VALID_57,
         SUBPARTITION VAO_VERSION_VALID_58,
         SUBPARTITION VAO_VERSION_VALID_59,
         SUBPARTITION VAO_VERSION_VALID_60,
         SUBPARTITION VAO_VERSION_VALID_61,
         SUBPARTITION VAO_VERSION_VALID_62,
         SUBPARTITION VAO_VERSION_VALID_63,
         SUBPARTITION VAO_VERSION_VALID_64
    ),
    PARTITION INVALID VALUES ('2')
    (
         SUBPARTITION VAO_VERSION_INVALID_01,
         SUBPARTITION VAO_VERSION_INVALID_02,
         SUBPARTITION VAO_VERSION_INVALID_03,
         SUBPARTITION VAO_VERSION_INVALID_04,
         SUBPARTITION VAO_VERSION_INVALID_05,
         SUBPARTITION VAO_VERSION_INVALID_06,
         SUBPARTITION VAO_VERSION_INVALID_07,
         SUBPARTITION VAO_VERSION_INVALID_08,
         SUBPARTITION VAO_VERSION_INVALID_09,
         SUBPARTITION VAO_VERSION_INVALID_10,
         SUBPARTITION VAO_VERSION_INVALID_11,
         SUBPARTITION VAO_VERSION_INVALID_12,
         SUBPARTITION VAO_VERSION_INVALID_13,
         SUBPARTITION VAO_VERSION_INVALID_14,
         SUBPARTITION VAO_VERSION_INVALID_15,
         SUBPARTITION VAO_VERSION_INVALID_16,
         SUBPARTITION VAO_VERSION_INVALID_17,
         SUBPARTITION VAO_VERSION_INVALID_18,
         SUBPARTITION VAO_VERSION_INVALID_19,
         SUBPARTITION VAO_VERSION_INVALID_20,
         SUBPARTITION VAO_VERSION_INVALID_21,
         SUBPARTITION VAO_VERSION_INVALID_22,
         SUBPARTITION VAO_VERSION_INVALID_23,
         SUBPARTITION VAO_VERSION_INVALID_24,
         SUBPARTITION VAO_VERSION_INVALID_25,
         SUBPARTITION VAO_VERSION_INVALID_26,
         SUBPARTITION VAO_VERSION_INVALID_27,
         SUBPARTITION VAO_VERSION_INVALID_28,
         SUBPARTITION VAO_VERSION_INVALID_29,
         SUBPARTITION VAO_VERSION_INVALID_30,
         SUBPARTITION VAO_VERSION_INVALID_31,
         SUBPARTITION VAO_VERSION_INVALID_32,
         SUBPARTITION VAO_VERSION_INVALID_33,
         SUBPARTITION VAO_VERSION_INVALID_34,
         SUBPARTITION VAO_VERSION_INVALID_35,
         SUBPARTITION VAO_VERSION_INVALID_36,
         SUBPARTITION VAO_VERSION_INVALID_37,
         SUBPARTITION VAO_VERSION_INVALID_38,
         SUBPARTITION VAO_VERSION_INVALID_39,
         SUBPARTITION VAO_VERSION_INVALID_40,
         SUBPARTITION VAO_VERSION_INVALID_41,
         SUBPARTITION VAO_VERSION_INVALID_42,
         SUBPARTITION VAO_VERSION_INVALID_43,
         SUBPARTITION VAO_VERSION_INVALID_44,
         SUBPARTITION VAO_VERSION_INVALID_45,
         SUBPARTITION VAO_VERSION_INVALID_46,
         SUBPARTITION VAO_VERSION_INVALID_47,
         SUBPARTITION VAO_VERSION_INVALID_48,
         SUBPARTITION VAO_VERSION_INVALID_49,
         SUBPARTITION VAO_VERSION_INVALID_50,
         SUBPARTITION VAO_VERSION_INVALID_51,
         SUBPARTITION VAO_VERSION_INVALID_52,
         SUBPARTITION VAO_VERSION_INVALID_53,
         SUBPARTITION VAO_VERSION_INVALID_54,
         SUBPARTITION VAO_VERSION_INVALID_55,
         SUBPARTITION VAO_VERSION_INVALID_56,
         SUBPARTITION VAO_VERSION_INVALID_57,
         SUBPARTITION VAO_VERSION_INVALID_58,
         SUBPARTITION VAO_VERSION_INVALID_59,
         SUBPARTITION VAO_VERSION_INVALID_60,
         SUBPARTITION VAO_VERSION_INVALID_61,
         SUBPARTITION VAO_VERSION_INVALID_62,
         SUBPARTITION VAO_VERSION_INVALID_63,
         SUBPARTITION VAO_VERSION_INVALID_64
    ),
    PARTITION DFLT VALUES (DEFAULT)
    (
         SUBPARTITION VAO_VERSION_DFLT_01,
         SUBPARTITION VAO_VERSION_DFLT_02,
         SUBPARTITION VAO_VERSION_DFLT_03,
         SUBPARTITION VAO_VERSION_DFLT_04,
         SUBPARTITION VAO_VERSION_DFLT_05,
         SUBPARTITION VAO_VERSION_DFLT_06,
         SUBPARTITION VAO_VERSION_DFLT_07,
         SUBPARTITION VAO_VERSION_DFLT_08,
         SUBPARTITION VAO_VERSION_DFLT_09,
         SUBPARTITION VAO_VERSION_DFLT_10,
         SUBPARTITION VAO_VERSION_DFLT_11,
         SUBPARTITION VAO_VERSION_DFLT_12,
         SUBPARTITION VAO_VERSION_DFLT_13,
         SUBPARTITION VAO_VERSION_DFLT_14,
         SUBPARTITION VAO_VERSION_DFLT_15,
         SUBPARTITION VAO_VERSION_DFLT_16,
         SUBPARTITION VAO_VERSION_DFLT_17,
         SUBPARTITION VAO_VERSION_DFLT_18,
         SUBPARTITION VAO_VERSION_DFLT_19,
         SUBPARTITION VAO_VERSION_DFLT_20,
         SUBPARTITION VAO_VERSION_DFLT_21,
         SUBPARTITION VAO_VERSION_DFLT_22,
         SUBPARTITION VAO_VERSION_DFLT_23,
         SUBPARTITION VAO_VERSION_DFLT_24,
         SUBPARTITION VAO_VERSION_DFLT_25,
         SUBPARTITION VAO_VERSION_DFLT_26,
         SUBPARTITION VAO_VERSION_DFLT_27,
         SUBPARTITION VAO_VERSION_DFLT_28,
         SUBPARTITION VAO_VERSION_DFLT_29,
         SUBPARTITION VAO_VERSION_DFLT_30,
         SUBPARTITION VAO_VERSION_DFLT_31,
         SUBPARTITION VAO_VERSION_DFLT_32,
         SUBPARTITION VAO_VERSION_DFLT_33,
         SUBPARTITION VAO_VERSION_DFLT_34,
         SUBPARTITION VAO_VERSION_DFLT_35,
         SUBPARTITION VAO_VERSION_DFLT_36,
         SUBPARTITION VAO_VERSION_DFLT_37,
         SUBPARTITION VAO_VERSION_DFLT_38,
         SUBPARTITION VAO_VERSION_DFLT_39,
         SUBPARTITION VAO_VERSION_DFLT_40,
         SUBPARTITION VAO_VERSION_DFLT_41,
         SUBPARTITION VAO_VERSION_DFLT_42,
         SUBPARTITION VAO_VERSION_DFLT_43,
         SUBPARTITION VAO_VERSION_DFLT_44,
         SUBPARTITION VAO_VERSION_DFLT_45,
         SUBPARTITION VAO_VERSION_DFLT_46,
         SUBPARTITION VAO_VERSION_DFLT_47,
         SUBPARTITION VAO_VERSION_DFLT_48,
         SUBPARTITION VAO_VERSION_DFLT_49,
         SUBPARTITION VAO_VERSION_DFLT_50,
         SUBPARTITION VAO_VERSION_DFLT_51,
         SUBPARTITION VAO_VERSION_DFLT_52,
         SUBPARTITION VAO_VERSION_DFLT_53,
         SUBPARTITION VAO_VERSION_DFLT_54,
         SUBPARTITION VAO_VERSION_DFLT_55,
         SUBPARTITION VAO_VERSION_DFLT_56,
         SUBPARTITION VAO_VERSION_DFLT_57,
         SUBPARTITION VAO_VERSION_DFLT_58,
         SUBPARTITION VAO_VERSION_DFLT_59,
         SUBPARTITION VAO_VERSION_DFLT_60,
         SUBPARTITION VAO_VERSION_DFLT_61,
         SUBPARTITION VAO_VERSION_DFLT_62,
         SUBPARTITION VAO_VERSION_DFLT_63,
         SUBPARTITION VAO_VERSION_DFLT_64
    )
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_150 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_150
(
   VALD_DVSN_CODE                VARCHAR2(1)   NULL,
   POLY_NO                       VARCHAR2(9)   NULL,
   AGREEMENT_NUMBER              VARCHAR2(255) NULL,
   UNIQUE_ID                     NUMBER        NULL,
   BEFO_LAST_PYMT_PERIOD         VARCHAR2(6)   NULL 
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_150 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_910 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_910
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_910 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_920 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_920
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_920 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_930 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_930
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_930 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_940 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_940
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_940 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_950 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_950
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_950 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_960 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_960
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_960 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_970 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_970
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_970 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_980 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_980
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_980 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_VAO_PREM_COLL_VERSION_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_VAO_PREM_COLL_VERSION_900_FIX
(
    ID                     NUMBER(19)    NOT NULL,
    CREATE_AT              TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID         VARCHAR2(100) NULL,
    CREATOR_ID             VARCHAR2(100) NULL,
    CREATOR_IP             VARCHAR2(100) NULL,
    LAST_MODIFIED_AT       TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID  VARCHAR2(100) NULL,
    LAST_MODIFIER_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_IP       VARCHAR2(100) NULL,
    START_AT               TIMESTAMP(6)  NULL,
    END_AT                 TIMESTAMP(6)  NULL,
    EXTERNAL_REF           VARCHAR2(255) NULL,
    REASON                 VARCHAR2(255) NULL,
    BASE_TX_AT             TIMESTAMP(6)  NULL,
    LOCK_NO                NUMBER(19)    NOT NULL,
    LAST_NUMBER_OF_PYMTS   NUMBER(10)    NULL,
    LAST_PYMT_PERIOD       VARCHAR2(6)   NULL,
    LAST_PROCESSING_ON     DATE          NULL,
    LAST_STANDARD_ON       DATE          NULL,
    VAO_ID                 NUMBER(19)    NULL,
    DOMAIN_PART_KEY        VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE      VARCHAR2(10)  NULL,
    LAST_SUBST_PYMT_PERIOD VARCHAR2(6)   NULL,
    ASIS_TAB               VARCHAR2(100) NULL,
    ASIS_PK_COL1           VARCHAR2(100) NULL,
    ASIS_PK_COL2           VARCHAR2(100) NULL,
    ASIS_PK_COL3           VARCHAR2(100) NULL,
    ASIS_PK_COL4           VARCHAR2(100) NULL,
    ASIS_PK_COL5           VARCHAR2(100) NULL,
    VALD_DVSN_CODE         VARCHAR2(1)   NULL,
    POLY_NO                VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO           VARCHAR2(3)   NULL
) 
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_VAO_PREM_COLL_VERSION_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_COMP */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_100
(
    ASIS_TAB                         VARCHAR2(20)  NULL,
    ASIS_PK_COL1                     VARCHAR2(20)  NULL,
    ASIS_PK_COL2                     VARCHAR2(20)  NULL,
    ASIS_PK_COL3                     VARCHAR2(20)  NULL,
    ASIS_PK_COL4                     VARCHAR2(20)  NULL,
    ASIS_PK_COL5                     VARCHAR2(20)  NULL,
    ASIS_2_TAB                       VARCHAR2(11)  NULL,
    ASIS_2_PK_COL1                   VARCHAR2(20)  NULL,
    ASIS_2_PK_COL2                   VARCHAR2(20)  NULL,
    ASIS_2_PK_COL3                   VARCHAR2(20)  NULL,
    ASIS_2_PK_COL4                   VARCHAR2(20)  NULL,
    RECV_DLNG_DATE                   DATE          NULL,
    RECV_DLNG_DT                     VARCHAR2(12)  NULL,
    PREM_PAYMENT_ID                  NUMBER        NULL,
    P_CNTT_STAT_CODE                 VARCHAR2(10)  NULL,
    P_AGREEMENT_ID                   NUMBER(19)    NULL,
    AGREEMENT_ID                     NUMBER(19)    NULL,
    AGREEMENT_NUMBER                 VARCHAR2(255) NULL,
    RCWC_METD_DVSN                   VARCHAR2(15)  NULL,
    PREM_KIND_DVCD                   VARCHAR2(15)  NULL,
    CNTT_STAT_CODE                   VARCHAR2(10)  NULL,
    CNTT_STAT_DTCD                   VARCHAR2(10)  NULL,
    BEFO_CTS_CODE                    VARCHAR2(10)  NULL,
    BEFO_CTS_DTCD                    VARCHAR2(10)  NULL,
    CNTT_STATUS                      VARCHAR2(30)  NULL,
    PAYM_CYCL_CODE                   VARCHAR2(30)  NULL,
    P_PAYM_CYCL_CODE                 VARCHAR2(30)  NULL,
    AGMT_PYMT_STATE_CODE             VARCHAR2(2)   NULL,
    AGMT_PYMT_STATE_REASON_CODE      VARCHAR2(2)   NULL,
    BEFO_AGMT_PYMT_STATE_CODE        VARCHAR2(2)   NULL,
    BEFO_AGMT_PYMT_STATE_REASON_CODE VARCHAR2(2)   NULL,
    AGMT_PYMT_STATUS                 VARCHAR2(30)  NULL,
    GOOD_RELN_CODE                   VARCHAR2(10)  NULL,
    GOOD_CODE_DTAL                   VARCHAR2(4)   NULL,
    GOOD_CODE_ITEM                   VARCHAR2(3)   NULL, 
    IRKD_CODE_DTAL                   VARCHAR2(10)  NULL, 
    PREM_CPAY_REYM                   VARCHAR2(8)   NULL, 
    PAYM_YM                          VARCHAR2(9)   NULL,
    PAYM_CNT                         NUMBER(3)     NULL,
    LAST_PAYM_CYCL_CODE              VARCHAR2(10)  NULL,
    RECV_DLNG_SQNO                   NUMBER(15)    NULL,
    LAST_CHMN_MPNO                   VARCHAR2(12)  NULL,
    LAST_CHNG_DTTM                   DATE          NULL,
    PGM_ID                           VARCHAR2(150) NULL,
    FIN_TRAN_TYPE_CODE               VARCHAR2(3)   NULL,
    RECV_CNCL_DATE                   DATE          NULL,
    SUM_ORIG_PREM                    NUMBER(12)    NULL,
    COLL_PREM                        NUMBER(12)    NULL,
    COMP_SUM_ORIG_PREM               NUMBER(12)    NULL,
    COMP_COLL_PREM                   NUMBER(12)    NULL,
    ARRE_INTE                        NUMBER(12)    NULL,
    PPAY_DSCT_PREM                   NUMBER(12)    NULL,
    COMP_PAYM_NUM                    NUMBER(19)    NULL,
    MONEY_PROV_ID                    NUMBER(19,0)  NULL,
    VALD_DVSN_CODE                   VARCHAR2(1)   NULL, 
    POLY_NO                          VARCHAR2(14)  NULL, 
    POLICY_NUMBER                    VARCHAR2(14)  NULL, 
    JOIN_GOOD_NO_MIG                 VARCHAR2(10)  NULL, 
    CI_FLAG                          VARCHAR2(2)   NULL,
    TARGET_YN                        VARCHAR2(10)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_300 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_300
(
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL,
    PREM_PAYMENT_ID         NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_300 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_400 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_400
(
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL,
    PREM_PAYMENT_ID         NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_400 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_500 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_500
(
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_500 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_900
(
    VALD_DVSN_CODE             VARCHAR2(1)    NULL, 
    POLY_NO                    VARCHAR2(9)    NULL,
    PREM_PAYMENT_ID            NUMBER(19)     NOT NULL,
    COMP_ORIG_PREMIUM_AMOUNT   NUMBER         NULL,
    COMP_PREMIUM_AMOUNT        NUMBER         NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_910 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_910
(
    VALD_DVSN_CODE             VARCHAR2(1)    NULL, 
    POLY_NO                    VARCHAR2(9)    NULL, 
    PREM_PAYMENT_ID            NUMBER(19)     NULL,
    PREM_KIND_DVCD             VARCHAR2(30)   NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_910 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_920 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_920
(
    PREM_PAYMENT_ID            NUMBER(19)     NULL,
    CNTT_STAT_CODE             VARCHAR2(10)   NULL,
    ASIS_CNTT_STAT_CODE        VARCHAR2(10)   NULL,
    CNTT_CHANGE_YN             VARCHAR2(10)   NULL,
    END_YN                     VARCHAR2(10)   NULL,
    PAYM_EXEP_YN               VARCHAR2(10)   NULL,
    VALD_DVSN_CODE             VARCHAR2(1)    NULL, 
    POLY_NO                    VARCHAR2(9)    NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_920 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP
(
    ASIS_TAB                    VARCHAR2(20)      NULL,
    ASIS_PK_COL1                VARCHAR2(20)      NULL,
    ASIS_PK_COL2                VARCHAR2(20)      NULL,
    ASIS_PK_COL3                VARCHAR2(20)      NULL,
    ASIS_PK_COL4                VARCHAR2(20)      NULL,
    ASIS_PK_COL5                VARCHAR2(20)      NULL,
    ASIS_2_TAB                  VARCHAR2(11)      NULL,
    ASIS_2_PK_COL1              VARCHAR2(20)      NULL,
    ASIS_2_PK_COL2              VARCHAR2(20)      NULL,
    ASIS_2_PK_COL3              VARCHAR2(20)      NULL,
    ASIS_2_PK_COL4              VARCHAR2(20)      NULL,
    RECV_DLNG_DATE              DATE              NULL,
    RECV_DLNG_DT                VARCHAR2(12)      NULL,
    AGREEMENT_ID                NUMBER(19)        NULL,
    AGREEMENT_NUMBER            VARCHAR2(255)     NULL,
    SUM_ORIG_PREM               NUMBER(12)        NULL,
    COLL_PREM                   NUMBER(12)        NULL,
    COMP_SUM_ORIG_PREM          NUMBER(12)        NULL,
    COMP_COLL_PREM              NUMBER(12)        NULL,
    ARRE_INTE                   NUMBER(12)        NULL,
    PPAY_DSCT_PREM              NUMBER(12)        NULL,
    RCWC_METD_DVSN              VARCHAR2(15)      NULL,
    PREM_KIND_DVCD              VARCHAR2(15)      NULL,
    CNTT_STAT_CODE              VARCHAR2(10)      NULL,
    CNTT_STAT_DTCD              VARCHAR2(10)      NULL,
    GOOD_CODE_DTAL              VARCHAR2(4)       NULL,
    GOOD_CODE_ITEM              VARCHAR2(3)       NULL,
    PAYM_CYCL_CODE              VARCHAR2(30)      NULL,
    AGMT_PYMT_STATE_CODE        VARCHAR2(2)       NULL,
    AGMT_PYMT_STATE_REASON_CODE VARCHAR2(2)       NULL,
    GOOD_RELN_CODE              VARCHAR2(10)      NULL,
    RECV_DLNG_SQNO              NUMBER(15)        NULL,
    LAST_CHMN_MPNO              VARCHAR2(12)      NULL,
    LAST_CHNG_DTTM              DATE              NULL,
    PGM_ID                      VARCHAR2(150)     NULL,
    FIN_TRAN_TYPE_CODE          VARCHAR2(3)       NULL,
    RECV_CNCL_DATE              DATE              NULL,
    COMP_PAYM_NUM               NUMBER(19)        NULL,
    VALD_DVSN_CODE              VARCHAR2(1)       NULL, 
    POLY_NO                     VARCHAR2(14)      NULL, 
    POLICY_NUMBER               VARCHAR2(14)      NULL,  
    JOIN_GOOD_NO_MIG            VARCHAR2(10)      NULL,
    PREM_PAYMENT_ID             NUMBER            NULL,
    PREM_PAYMENT_COMP_ID        NUMBER            NULL,
    MONEY_PROV_ID               NUMBER(19,0)      NULL,
    CREATE_GBN                  VARCHAR2(10)      NULL,
    CI_FLAG                     VARCHAR2(2)       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1')
   (
        SUBPARTITION PREM_PAYMENT_COMP_VALID_01,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_02,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_03,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_04,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_05,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_06,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_07,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_08,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_09,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_10,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_11,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_12,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_13,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_14,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_15,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_16,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_17,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_18,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_19,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_20,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_21,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_22,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_23,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_24,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_25,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_26,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_27,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_28,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_29,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_30,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_31,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_32,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_33,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_34,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_35,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_36,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_37,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_38,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_39,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_40,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_41,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_42,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_43,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_44,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_45,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_46,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_47,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_48,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_49,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_50,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_51,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_52,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_53,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_54,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_55,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_56,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_57,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_58,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_59,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_60,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_61,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_62,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_63,
        SUBPARTITION PREM_PAYMENT_COMP_VALID_64
   ),
   PARTITION INVALID VALUES('2')
   (
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_01,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_02,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_03,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_04,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_05,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_06,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_07,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_08,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_09,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_10,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_11,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_12,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_13,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_14,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_15,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_16,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_17,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_18,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_19,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_20,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_21,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_22,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_23,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_24,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_25,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_26,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_27,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_28,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_29,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_30,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_31,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_32,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_33,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_34,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_35,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_36,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_37,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_38,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_39,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_40,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_41,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_42,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_43,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_44,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_45,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_46,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_47,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_48,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_49,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_50,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_51,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_52,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_53,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_54,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_55,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_56,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_57,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_58,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_59,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_60,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_61,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_62,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_63,
        SUBPARTITION PREM_PAYMENT_COMP_INVALID_64
   ),
   PARTITION DFLT    VALUES(DEFAULT)
   (
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_01,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_02,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_03,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_04,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_05,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_06,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_07,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_08,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_09,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_10,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_11,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_12,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_13,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_14,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_15,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_16,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_17,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_18,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_19,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_20,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_21,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_22,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_23,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_24,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_25,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_26,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_27,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_28,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_29,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_30,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_31,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_32,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_33,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_34,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_35,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_36,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_37,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_38,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_39,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_40,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_41,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_42,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_43,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_44,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_45,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_46,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_47,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_48,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_49,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_50,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_51,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_52,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_53,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_54,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_55,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_56,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_57,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_58,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_59,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_60,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_61,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_62,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_63,
        SUBPARTITION PREM_PAYMENT_COMP_DFLT_64
   )
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_FIX
(
    ASIS_TAB                    VARCHAR2(20)      NULL,
    ASIS_PK_COL1                VARCHAR2(20)      NULL,
    ASIS_PK_COL2                VARCHAR2(20)      NULL,
    ASIS_PK_COL3                VARCHAR2(20)      NULL,
    ASIS_PK_COL4                VARCHAR2(20)      NULL,
    ASIS_PK_COL5                VARCHAR2(20)      NULL,
    ASIS_2_TAB                  VARCHAR2(11)      NULL,
    ASIS_2_PK_COL1              VARCHAR2(20)      NULL,
    ASIS_2_PK_COL2              VARCHAR2(20)      NULL,
    ASIS_2_PK_COL3              VARCHAR2(20)      NULL,
    ASIS_2_PK_COL4              VARCHAR2(20)      NULL,
    RECV_DLNG_DATE              DATE              NULL,
    RECV_DLNG_DT                VARCHAR2(12)      NULL,
    AGREEMENT_ID                NUMBER(19)        NULL,
    AGREEMENT_NUMBER            VARCHAR2(255)     NULL,
    SUM_ORIG_PREM               NUMBER(12)        NULL,
    COLL_PREM                   NUMBER(12)        NULL,
    COMP_SUM_ORIG_PREM          NUMBER(12)        NULL,
    COMP_COLL_PREM              NUMBER(12)        NULL,
    ARRE_INTE                   NUMBER(12)        NULL,
    PPAY_DSCT_PREM              NUMBER(12)        NULL,
    RCWC_METD_DVSN              VARCHAR2(15)      NULL,
    PREM_KIND_DVCD              VARCHAR2(15)      NULL,
    CNTT_STAT_CODE              VARCHAR2(10)      NULL,
    CNTT_STAT_DTCD              VARCHAR2(10)      NULL,
    GOOD_CODE_DTAL              VARCHAR2(4)       NULL,
    GOOD_CODE_ITEM              VARCHAR2(3)       NULL,
    PAYM_CYCL_CODE              VARCHAR2(30)      NULL,
    AGMT_PYMT_STATE_CODE        VARCHAR2(2)       NULL,
    AGMT_PYMT_STATE_REASON_CODE VARCHAR2(2)       NULL,
    GOOD_RELN_CODE              VARCHAR2(10)      NULL,
    RECV_DLNG_SQNO              NUMBER(15)        NULL,
    LAST_CHMN_MPNO              VARCHAR2(12)      NULL,
    LAST_CHNG_DTTM              DATE              NULL,
    PGM_ID                      VARCHAR2(150)     NULL,
    FIN_TRAN_TYPE_CODE          VARCHAR2(3)       NULL,
    RECV_CNCL_DATE              DATE              NULL,
    COMP_PAYM_NUM               NUMBER(19)        NULL,
    VALD_DVSN_CODE              VARCHAR2(1)       NULL,  
    POLY_NO                     VARCHAR2(14)      NULL, 
    POLICY_NUMBER               VARCHAR2(14)      NULL,  
    JOIN_GOOD_NO_MIG            VARCHAR2(10)      NULL,
    PREM_PAYMENT_ID             NUMBER            NULL,
    PREM_PAYMENT_COMP_ID        NUMBER            NULL,
    MONEY_PROV_ID               NUMBER(19,0)      NULL,
    CREATE_GBN                  VARCHAR2(10)      NULL,
    CI_FLAG                     VARCHAR2(2)       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_010 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_010
(
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL,
    PREM_PAYMENT_COMP_ID    NUMBER        NULL,
    PRIORITY_COMP           NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_010 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_020 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_020
(
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL,
    PREM_PAYMENT_COMP_ID    NUMBER        NULL,
    COMP_PAYM_CNT           NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_020 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_030 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_030
(
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL,
    PREM_PAYMENT_COMP_ID    NUMBER        NULL,
    ELEMENT_AMOUNT          NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_030 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_090 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_090
(
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL,
    PREM_PAYMENT_COMP_ID    NUMBER        NULL,
    PRIORITY_COMP           NUMBER        NULL,
    COMP_PAYM_CNT           NUMBER        NULL,
    ELEMENT_AMOUNT          NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_090 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_100 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_100
(
    PREM_PAYMENT_ID         NUMBER        NULL,
    PREM_PAYMENT_COMP_ID    NUMBER        NULL,
    AGREEMENT_NUMBER        VARCHAR2(255) NULL,
    FIN_TRAN_TYPE_CODE      VARCHAR2(3)   NULL,
    RECP_DATE               DATE          NULL,
    COMP_SUM_ORIG_PREM      NUMBER(24,12) NULL,
    COMP_COLL_PREM          NUMBER(24,12) NULL,
    ELEMENT_AMOUNT          NUMBER(24,12) NULL,
    ARRE_INTE               NUMBER(24,12) NULL,
    COMP_ARRE_INTE          NUMBER(24,12) NULL,
    PPAY_DSCT_PREM          NUMBER(24,12) NULL,
    COMP_PPAY_DSCT_PREM     NUMBER(24,12) NULL,
    REAL_RECV_PREM          NUMBER(24,12) NULL,
    END_PYYM                VARCHAR2(6)   NULL,
    PAYM_YM                 VARCHAR2(9)   NULL,
    COMP_PAYM_CNT           NUMBER        NULL,
    VALD_DVSN_CODE          VARCHAR2(1)   NULL,
    POLY_NO                 VARCHAR2(14)  NULL  
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_900
(
   ID                           NUMBER(19,0)  NOT NULL,
   CREATE_AT                    TIMESTAMP     NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER        NOT NULL,
   AGREEMENT_ID                 NUMBER(19,0)  NULL,
   AGREEMENT_NUMBER             VARCHAR2(255) NULL,
   AMOUNT                       NUMBER(24,12) NULL,
   SCALE                        NUMBER(10,0)  NULL,
   CURRENCY_CODE                VARCHAR2(10)  NULL,
   EXTERNAL_REF                 VARCHAR2(255) NULL,
   INN_REF                      VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE            VARCHAR2(10)  NULL,
   POLICY_NUMBER                VARCHAR2(255) NULL,
   END_OF_PAYMENT_PERIOD        VARCHAR2(6)   NULL,    
   NUMBER_OF_PAYMENTS           NUMBER(10,0)  NULL,
   ORIG_PREMIUM_AMOUNT          NUMBER(24,12) NULL,
   ORIG_PREM_SCALE              NUMBER(10,0)  NULL,
   OVERDUE_INTEREST_AMOUNT      NUMBER(24,12) NULL,
   OVERDUE_INTEREST_SCALE       NUMBER(10,0)  NULL,
   PAYMENT_PERIOD               VARCHAR2(6)   NULL,       
   PREMIUM_AMOUNT               NUMBER(24,12) NULL,
   PREM_SCALE                   NUMBER(10,0)  NULL,
   PREMIUM_KIND_TYPE_CODE       VARCHAR2(10)  NULL,
   PREPAID_DISCOUNT_AMOUNT      NUMBER(24,12) NULL,
   PREPAID_DISCOUNT_SCALE       NUMBER(10,0)  NULL,
   PARENT_COMP_ID               NUMBER(19,0)  NULL,
   MONEY_PROV_ID                NUMBER(19,0)  NULL,
   PREM_PAYMENT_ID              NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
   CONV_AMOUNT                  NUMBER(29,9)  NULL,
   CONV_ORIG_PREMIUM_AMOUNT     NUMBER(29,9)  NULL,
   CONV_OVERDUE_INT_AMOUNT      NUMBER(29,9)  NULL,
   CONV_PREMIUM_AMOUNT          NUMBER(29,9)  NULL,
   CONV_PREPAID_DISCOUNT_AMOUNT NUMBER(29,9)  NULL,
   POSTED_ON                    DATE          NULL,
   RECEIPT_ON                   DATE          NULL,   
   ASIS_TAB                     VARCHAR2(20)  NULL,
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,
   ASIS_PK_COL2                 VARCHAR2(20)  NULL,
   ASIS_PK_COL3                 VARCHAR2(20)  NULL,
   ASIS_PK_COL4                 VARCHAR2(20)  NULL,
   ASIS_PK_COL5                 VARCHAR2(20)  NULL,
   ASIS_2_TAB                   VARCHAR2(11)  NULL,
   ASIS_2_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_2_PK_COL2               VARCHAR2(20)  NULL,
   ASIS_2_PK_COL3               VARCHAR2(20)  NULL,
   ASIS_2_PK_COL4               VARCHAR2(20)  NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL,
   POLY_NO                      VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_900_FIX
(
   ID                      NUMBER(19,0)  NOT NULL,
   CREATE_AT               TIMESTAMP     NULL,
   CREATE_PRGM_ID          VARCHAR2(100) NULL,
   CREATOR_ID              VARCHAR2(100) NULL,
   CREATOR_IP              VARCHAR2(100) NULL,
   LAST_MODIFIED_AT        TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID   VARCHAR2(100) NULL,
   LAST_MODIFIER_ID        VARCHAR2(100) NULL,
   LAST_MODIFIER_IP        VARCHAR2(100) NULL,
   LOCK_NO                 NUMBER        NOT NULL,
   AGREEMENT_ID            NUMBER(19,0)  NULL,
   AGREEMENT_NUMBER        VARCHAR2(255) NULL,
   AMOUNT                  NUMBER(24,12) NULL,
   SCALE                   NUMBER(10,0)  NULL,
   CURRENCY_CODE           VARCHAR2(10)  NULL,
   EXTERNAL_REF            VARCHAR2(255) NULL,
   INN_REF                 VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE       VARCHAR2(10)  NULL,
   POLICY_NUMBER           VARCHAR2(255) NULL,
   END_OF_PAYMENT_PERIOD   VARCHAR2(6)   NULL,    
   NUMBER_OF_PAYMENTS      NUMBER(10,0)  NULL,
   ORIG_PREMIUM_AMOUNT     NUMBER(24,12) NULL,
   ORIG_PREM_SCALE         NUMBER(10,0)  NULL,
   OVERDUE_INTEREST_AMOUNT NUMBER(24,12) NULL,
   OVERDUE_INTEREST_SCALE  NUMBER(10,0)  NULL,
   PAYMENT_PERIOD          VARCHAR2(6)   NULL,       
   PREMIUM_AMOUNT          NUMBER(24,12) NULL,
   PREM_SCALE              NUMBER(10,0)  NULL,
   PREMIUM_KIND_TYPE_CODE  VARCHAR2(10)  NULL,
   PREPAID_DISCOUNT_AMOUNT NUMBER(24,12) NULL,
   PREPAID_DISCOUNT_SCALE  NUMBER(10,0)  NULL,
   PARENT_COMP_ID          NUMBER(19,0)  NULL,
   MONEY_PROV_ID           NUMBER(19,0)  NULL,
   PREM_PAYMENT_ID         NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY         VARCHAR2(2)   NULL,
   CONV_AMOUNT                  NUMBER(29,9)  NULL,
   CONV_ORIG_PREMIUM_AMOUNT     NUMBER(29,9)  NULL,
   CONV_OVERDUE_INT_AMOUNT      NUMBER(29,9)  NULL,
   CONV_PREMIUM_AMOUNT          NUMBER(29,9)  NULL,
   CONV_PREPAID_DISCOUNT_AMOUNT NUMBER(29,9)  NULL,
   POSTED_ON                    DATE          NULL,
   RECEIPT_ON                   DATE          NULL,   
   ASIS_TAB                     VARCHAR2(20)  NULL,
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,
   ASIS_PK_COL2                 VARCHAR2(20)  NULL,
   ASIS_PK_COL3                 VARCHAR2(20)  NULL,
   ASIS_PK_COL4                 VARCHAR2(20)  NULL,
   ASIS_PK_COL5                 VARCHAR2(20)  NULL,
   ASIS_2_TAB                   VARCHAR2(11)  NULL,
   ASIS_2_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_2_PK_COL2               VARCHAR2(20)  NULL,
   ASIS_2_PK_COL3               VARCHAR2(20)  NULL,
   ASIS_2_PK_COL4               VARCHAR2(20)  NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL,
   POLY_NO                      VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_POLICY_LOAN_PAYMENT */
----------------------------------------------------------------------------------------------------

DROP TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT_100 CASCADE CONSTRAINTS PURGE; 
CREATE TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT_100 
(
   POLICY_NUMBER          VARCHAR2(9)   NULL,
   STPL_LOAN_SQNO         NUMBER(15)    NULL,
   RPMT_SQNO              NUMBER(15)    NULL,
   LAST_CHNG_DTTM         DATE          NULL,
   LAST_CHMN_MPNO         VARCHAR2(12)  NULL,
   AGMT_BASIC_DATE        DATE          NULL,
   LOAN_BALANCE_AMOUNT    NUMBER(15)    NULL,
   LOAN_RPMT_MDCD         VARCHAR2(15)  NULL,
   CNCT_RCST              NUMBER        NULL,
   AMOUNT                 NUMBER(15)    NULL,
   IS_PROC_IN_ADVANCE     VARCHAR2(1)   NULL,
   CNCL_DATE              VARCHAR2(12)  NULL,
   STMP_COST              NUMBER        NULL,
   RT_CMSN                NUMBER        NULL,
   RPMT_PRCP              NUMBER        NULL,
   NORM_INTE              NUMBER        NULL,
   ARRE_INTE              NUMBER        NULL,
   PPAY_INTE              NUMBER        NULL,
   PPAY_DSCT_AMT          NUMBER        NULL,
   NELP_INTE              NUMBER        NULL,
   SMCG_AMT               NUMBER        NULL,
   OPRN_CMSN              NUMBER        NULL,
   TRNF_CMSN              NUMBER        NULL,
   INTE_RCKN_DATE         DATE          NULL,
   INTE_LSRK_DATE         DATE          NULL,
   ARRE_DAYS              NUMBER        NULL,
   PPAY_DAYS              NUMBER        NULL,
   NELP_DAYS              NUMBER        NULL,
   LOAN_AMT               NUMBER        NULL,
   PAYMENT_PROCESSING_ID  NUMBER        NULL,
   FIN_TRAN_TYPE_CODE     VARCHAR2(20)  NULL,
   INPT_ORGN_CODE         VARCHAR2(5)   NULL,
   CREATOR_ID             VARCHAR2(7)   NULL,
   ASIS_TAB               VARCHAR2(20)  NULL,
   ASIS_PK_COL1           VARCHAR2(20)  NULL,
   ASIS_PK_COL2           VARCHAR2(20)  NULL,
   PGM_ID                 VARCHAR2(150) NULL, 
   VALD_DVSN_CODE         VARCHAR2(1)   NULL, 
   POLY_NO                VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLICY_NUMBER) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT
(
   DTYPE                  VARCHAR2(10)  NULL,
   CREATOR_ID             VARCHAR2(7)   NULL,
   AGREEMENT_ID           NUMBER(19)    NULL,
   AGREEMENT_NUMBER       VARCHAR2(255) NULL,
   STPL_LOAN_SQNO         NUMBER(15)    NULL,
   RPMT_SQNO              NUMBER(15)    NULL,
   LAST_CHNG_DTTM         DATE          NULL,
   LAST_CHMN_MPNO         VARCHAR2(12)  NULL,
   AGMT_BASIC_DATE        DATE          NULL,
   LOAN_BALANCE_AMOUNT    NUMBER(15)    NULL,
   LOAN_RPMT_MDCD         VARCHAR2(15)  NULL,
   CNCT_RCST              NUMBER        NULL,
   AMOUNT                 NUMBER(15)    NULL,
   IS_PROC_IN_ADVANCE     VARCHAR2(1)   NULL,
   CNCL_DATE              VARCHAR2(12)  NULL,
   STMP_COST              NUMBER        NULL,
   RT_CMSN                NUMBER        NULL,
   RPMT_PRCP              NUMBER        NULL,
   NORM_INTE              NUMBER        NULL,
   ARRE_INTE              NUMBER        NULL,
   PPAY_INTE              NUMBER        NULL,
   PPAY_DSCT_AMT          NUMBER        NULL,
   NELP_INTE              NUMBER        NULL,
   SMCG_AMT               NUMBER        NULL,
   OPRN_CMSN              NUMBER        NULL,
   TRNF_CMSN              NUMBER        NULL,
   INTE_RCKN_DATE         DATE          NULL,
   INTE_LSRK_DATE         DATE          NULL,
   ARRE_DAYS              NUMBER        NULL,
   PPAY_DAYS              NUMBER        NULL,
   NELP_DAYS              NUMBER        NULL,
   LOAN_AMT               NUMBER        NULL,
   PAYMENT_PROCESSING_ID  NUMBER        NULL,
   INPT_ORGN_CODE         VARCHAR2(5)   NULL,
   FIN_TRAN_TYPE_CODE     VARCHAR2(20)  NULL,
   ASIS_TAB               VARCHAR2(20)  NULL,
   ASIS_PK_COL1           VARCHAR2(20)  NULL,
   ASIS_PK_COL2           VARCHAR2(20)  NULL,
   PGM_ID                 VARCHAR2(150) NULL, 
   POLICY_LOAN_PAYMENT_ID NUMBER        NULL,
   POLICY_NUMBER          VARCHAR2(9)   NULL,
   VALD_DVSN_CODE         VARCHAR2(1)   NULL,
   POLY_NO                VARCHAR2(9)   NULL,
   MIG_NUM                NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID1 VALUES('1'),
   PARTITION VALID2 VALUES('2'),
   PARTITION DFLT   VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT_FIX
(
   DTYPE                  VARCHAR2(10)  NULL,
   CREATOR_ID             VARCHAR2(7)   NULL,
   AGREEMENT_ID           NUMBER(19)    NULL,
   AGREEMENT_NUMBER       VARCHAR2(255) NULL,
   STPL_LOAN_SQNO         NUMBER(15)    NULL,
   RPMT_SQNO              NUMBER(15)    NULL,
   LAST_CHNG_DTTM         DATE          NULL,
   LAST_CHMN_MPNO         VARCHAR2(12)  NULL,
   AGMT_BASIC_DATE        DATE          NULL,
   LOAN_BALANCE_AMOUNT    NUMBER(15)    NULL,
   LOAN_RPMT_MDCD         VARCHAR2(15)  NULL,
   CNCT_RCST              NUMBER        NULL,
   AMOUNT                 NUMBER(15)    NULL,
   IS_PROC_IN_ADVANCE     VARCHAR2(1)   NULL,
   CNCL_DATE              VARCHAR2(12)  NULL,
   STMP_COST              NUMBER        NULL,
   RT_CMSN                NUMBER        NULL,
   RPMT_PRCP              NUMBER        NULL,
   NORM_INTE              NUMBER        NULL,
   ARRE_INTE              NUMBER        NULL,
   PPAY_INTE              NUMBER        NULL,
   PPAY_DSCT_AMT          NUMBER        NULL,
   NELP_INTE              NUMBER        NULL,
   SMCG_AMT               NUMBER        NULL,
   OPRN_CMSN              NUMBER        NULL,
   TRNF_CMSN              NUMBER        NULL,
   INTE_RCKN_DATE         DATE          NULL,
   INTE_LSRK_DATE         DATE          NULL,
   ARRE_DAYS              NUMBER        NULL,
   PPAY_DAYS              NUMBER        NULL,
   NELP_DAYS              NUMBER        NULL,
   LOAN_AMT               NUMBER        NULL,
   PAYMENT_PROCESSING_ID  NUMBER        NULL,
   INPT_ORGN_CODE         VARCHAR2(5)   NULL,
   FIN_TRAN_TYPE_CODE     VARCHAR2(20)  NULL,
   ASIS_TAB               VARCHAR2(20)  NULL,
   ASIS_PK_COL1           VARCHAR2(20)  NULL,
   ASIS_PK_COL2           VARCHAR2(20)  NULL,
   PGM_ID                 VARCHAR2(150) NULL, 
   POLICY_LOAN_PAYMENT_ID NUMBER        NULL,
   POLICY_NUMBER          VARCHAR2(9)   NULL,
   VALD_DVSN_CODE         VARCHAR2(1)   NULL,
   POLY_NO                VARCHAR2(9)   NULL,
   MIG_NUM                NUMBER        NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID1 VALUES('1'),
   PARTITION VALID2 VALUES('2'),
   PARTITION DFLT   VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_POLICY_LOAN_PAYMENT_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_POLICY_LOAN_PAYMENT_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_POLICY_LOAN_PAYMENT_900
(
   ID                            NUMBER(19)    NOT NULL,
   DTYPE                         VARCHAR2(3)   NOT NULL,
   CREATE_AT                     TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID                VARCHAR2(100) NULL,
   CREATOR_ID                    VARCHAR2(100) NULL,
   CREATOR_IP                    VARCHAR2(100) NULL,
   LAST_MODIFIED_AT              TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID         VARCHAR2(100) NULL,
   LAST_MODIFIER_ID              VARCHAR2(100) NULL,
   LAST_MODIFIER_IP              VARCHAR2(100) NULL,
   LOCK_NO                       NUMBER(19)    NOT NULL,
   AGREEMENT_ID                  NUMBER(19)    NULL,
   AGREEMENT_NUMBER              VARCHAR2(255) NULL,
   AMOUNT                        NUMBER(24,12) NULL,
   SCALE                         NUMBER(10)    NULL,
   CONTRACT_PROC_NUMBER          VARCHAR2(255) NULL,
   CURRENCY_CODE                 VARCHAR2(10)  NULL,
   DESCRIPTION                   VARCHAR2(255) NULL,
   EXTERNAL_REF                  VARCHAR2(255) NULL,
   FIN_TRAN_TYPE_CODE            VARCHAR2(10)  NULL,
   INN_REF                       VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE             VARCHAR2(10)  NULL,
   MONEY_PROV_ELEMENT_ID         NUMBER(19)    NULL,
   MONEY_PROV_ELEMENT_TYPE_CODE  VARCHAR2(10)  NULL,
   POLICY_NUMBER                 VARCHAR2(255) NULL,
   POSTED_ON                     DATE          NULL,
   DEPOSIT_ON                    DATE          NULL,
   DETAILED_DESCRIPTION          VARCHAR2(255) NULL,
   PAYMENT_ON                    DATE          NULL,
   REJECTION_ON                  DATE          NULL,
   REJECTION_REASON_CODE         VARCHAR2(10)  NULL,
   VALUE_ON                      DATE          NULL,
   IS_PROC_IN_ADVANCE            NUMBER(1)     NULL,
   LOAN_BALANCE_AMOUNT           NUMBER(24,12) NULL,
   LOAN_BALANCE_SCALE            NUMBER(10)    NULL,
   LOAN_REPAYM_METHOD_CODE       VARCHAR2(10)  NULL,
   POLICY_LOAN_ID                NUMBER(19)    NULL,
   SURRENDER_VALUE_AMOUNT        NUMBER(24,12) NULL,
   SURRENDER_VALUE_SCALE         NUMBER(10)    NULL,
   PAYMENT_PROCESSING_ID         NUMBER(19)    NULL,
   DOMAIN_PART_KEY               VARCHAR2(2)   NULL,
   ARCHIVE_AT                    TIMESTAMP(6)  NULL,
   APPLIED_CONV_SCALE            NUMBER(10)    NULL, 
   APPLIED_EXCH_RATE             NUMBER(29,9)  NULL,
   CONV_AMOUNT                   NUMBER(29,9)  NULL,
   CONV_BASE_ON                  DATE          NULL, 
   CONV_CURRENCY_CODE            VARCHAR2(10)  NULL,
   TRANS_CURRENCY_CODE           VARCHAR2(10)  NULL,
   VALD_DVSN_CODE                VARCHAR2(1)   NULL,
   POLY_NO                       VARCHAR2(9)   NULL,
   ASIS_TAB                      VARCHAR2(20)  NULL,
   ASIS_PK_COL1                  VARCHAR2(20)  NULL,
   ASIS_PK_COL2                  VARCHAR2(20)  NULL
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_POLICY_LOAN_PAYMENT_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_POLICY_LOAN_PAYMENT_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_POLICY_LOAN_PAYMENT_900_FIX
(
   ID                            NUMBER(19)    NOT NULL,
   DTYPE                         VARCHAR2(3)   NOT NULL,
   CREATE_AT                     TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID                VARCHAR2(100) NULL,
   CREATOR_ID                    VARCHAR2(100) NULL,
   CREATOR_IP                    VARCHAR2(100) NULL,
   LAST_MODIFIED_AT              TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID         VARCHAR2(100) NULL,
   LAST_MODIFIER_ID              VARCHAR2(100) NULL,
   LAST_MODIFIER_IP              VARCHAR2(100) NULL,
   LOCK_NO                       NUMBER(19)    NOT NULL,
   AGREEMENT_ID                  NUMBER(19)    NULL,
   AGREEMENT_NUMBER              VARCHAR2(255) NULL,
   AMOUNT                        NUMBER(24,12) NULL,
   SCALE                         NUMBER(10)    NULL,
   CONTRACT_PROC_NUMBER          VARCHAR2(255) NULL,
   CURRENCY_CODE                 VARCHAR2(10)  NULL,
   DESCRIPTION                   VARCHAR2(255) NULL,
   EXTERNAL_REF                  VARCHAR2(255) NULL,
   FIN_TRAN_TYPE_CODE            VARCHAR2(10)  NULL,
   INN_REF                       VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE             VARCHAR2(10)  NULL,
   MONEY_PROV_ELEMENT_ID         NUMBER(19)    NULL,
   MONEY_PROV_ELEMENT_TYPE_CODE  VARCHAR2(10)  NULL,
   POLICY_NUMBER                 VARCHAR2(255) NULL,
   POSTED_ON                     DATE          NULL,
   DEPOSIT_ON                    DATE          NULL,
   DETAILED_DESCRIPTION          VARCHAR2(255) NULL,
   PAYMENT_ON                    DATE          NULL,
   REJECTION_ON                  DATE          NULL,
   REJECTION_REASON_CODE         VARCHAR2(10)  NULL,
   VALUE_ON                      DATE          NULL,
   IS_PROC_IN_ADVANCE            NUMBER(1)     NULL,
   LOAN_BALANCE_AMOUNT           NUMBER(24,12) NULL,
   LOAN_BALANCE_SCALE            NUMBER(10)    NULL,
   LOAN_REPAYM_METHOD_CODE       VARCHAR2(10)  NULL,
   POLICY_LOAN_ID                NUMBER(19)    NULL,
   SURRENDER_VALUE_AMOUNT        NUMBER(24,12) NULL,
   SURRENDER_VALUE_SCALE         NUMBER(10)    NULL,
   PAYMENT_PROCESSING_ID         NUMBER(19)    NULL,
   DOMAIN_PART_KEY               VARCHAR2(2)   NULL,
   ARCHIVE_AT                    TIMESTAMP(6)  NULL,
   APPLIED_CONV_SCALE            NUMBER(10)    NULL, 
   APPLIED_EXCH_RATE             NUMBER(29,9)  NULL,
   CONV_AMOUNT                   NUMBER(29,9)  NULL,
   CONV_BASE_ON                  DATE          NULL, 
   CONV_CURRENCY_CODE            VARCHAR2(10)  NULL,
   TRANS_CURRENCY_CODE           VARCHAR2(10)  NULL,
   VALD_DVSN_CODE                VARCHAR2(1)   NULL,
   POLY_NO                       VARCHAR2(9)   NULL,
   ASIS_TAB                      VARCHAR2(20)  NULL,
   ASIS_PK_COL1                  VARCHAR2(20)  NULL,
   ASIS_PK_COL2                  VARCHAR2(20)  NULL
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_POLICY_LOAN_PAYMENT_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_POLOAN_PAYMENT_STATUS */ 
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_POLOAN_PAYM_STATUS CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_POLOAN_PAYM_STATUS
(
   ASIS_TAB                     VARCHAR2(20)  NULL,                        
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,                        
   ASIS_PK_COL2                 VARCHAR2(20)  NULL,                        
   AGREEMENT_ID                 NUMBER(19)    NULL, 
   VALD_DVSN_CODE               VARCHAR2(1)   NULL, 
   POLY_NO                      VARCHAR2(9)   NULL, 
   POLICY_NUMBER                VARCHAR2(9)   NULL,                     
   CREATOR_ID                   VARCHAR2(7)   NULL,                          
   LAST_CHNG_DTTM               DATE          NULL,                        
   LAST_CHMN_MPNO               VARCHAR2(12)  NULL,  
   PGM_ID                       VARCHAR2(150) NULL,  
   POLICY_LOAN_PAYMENT_ID       NUMBER        NULL,  
   INPT_ORGN_CODE               VARCHAR2(5)   NULL,  
   START_AT                     TIMESTAMP     NULL,                        
   END_AT                       TIMESTAMP     NULL,
   PLOAN_PAYM_STATE_REASON_CODE VARCHAR2(1)   NULL,
   PLOAN_PAYMENT_STATE_CODE     VARCHAR2(1)   NULL,
   POLOAN_PAYM_STATUS_ID        NUMBER        NULL, 
   FIN_TRAN_TYPE_CODE           VARCHAR2(10)  NULL,
   MIG_NUM                      NUMBER        NULL   
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID1 VALUES('1'),
   PARTITION VALID2 VALUES('2'),
   PARTITION DFLT   VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_POLOAN_PAYM_STATUS NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_POLOAN_PAYM_STATUS_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_POLOAN_PAYM_STATUS_FIX
(
   ASIS_TAB                     VARCHAR2(20)  NULL,                        
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,                        
   ASIS_PK_COL2                 VARCHAR2(20)  NULL,                        
   AGREEMENT_ID                 NUMBER(19)    NULL, 
   VALD_DVSN_CODE               VARCHAR2(1)   NULL, 
   POLY_NO                      VARCHAR2(9)   NULL,    
   POLICY_NUMBER                VARCHAR2(9)   NULL,                   
   CREATOR_ID                   VARCHAR2(7)   NULL,                          
   LAST_CHNG_DTTM               DATE          NULL,                        
   LAST_CHMN_MPNO               VARCHAR2(12)  NULL,  
   PGM_ID                       VARCHAR2(150) NULL,  
   POLICY_LOAN_PAYMENT_ID       NUMBER        NULL,  
   INPT_ORGN_CODE               VARCHAR2(5)   NULL,  
   START_AT                     TIMESTAMP     NULL,                        
   END_AT                       TIMESTAMP     NULL,
   PLOAN_PAYM_STATE_REASON_CODE VARCHAR2(1)   NULL,
   PLOAN_PAYMENT_STATE_CODE     VARCHAR2(1)   NULL,
   POLOAN_PAYM_STATUS_ID        NUMBER        NULL, 
   FIN_TRAN_TYPE_CODE           VARCHAR2(10)  NULL,
   MIG_NUM                      NUMBER        NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID1 VALUES('1'),
   PARTITION VALID2 VALUES('2'),
   PARTITION DFLT   VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_POLOAN_PAYM_STATUS_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_POLOAN_PAYM_STATUS_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_POLOAN_PAYM_STATUS_900
(
   ID                           NUMBER(19)    NOT NULL,
   CREATE_AT                    TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER(19)    NOT NULL,
   DESCRIPTION                  VARCHAR2(255) NULL,
   START_AT                     TIMESTAMP(6)  NULL,
   END_AT                       TIMESTAMP(6)  NULL,
   ADDITIONAL_DESCRIPTION       VARCHAR2(255) NULL,
   RESOLVE_PENDING_ON           DATE          NULL,
   PLOAN_PAYM_STATE_REASON_CODE VARCHAR2(10)  NULL,
   PLOAN_PAYMENT_STATE_CODE     VARCHAR2(10)  NOT NULL,
   POLICY_LOAN_PAYMENT_ID       NUMBER(19)    NULL,
   DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
   PROCESSING_ORG_CODE          VARCHAR2(10)  NULL, 
   ARCHIVE_AT                   TIMESTAMP(6)  NULL,
   FIN_TRAN_TYPE_CODE           VARCHAR2(10)  NULL,
   PROCESSING_EMPLOYEE_NO       VARCHAR2(10)  NULL,
   ASIS_TAB                     VARCHAR2(20)  NULL,
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,
   ASIS_PK_COL2                 VARCHAR2(20)  NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL, 
   POLY_NO                      VARCHAR2(9)   NULL 
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_POLOAN_PAYM_STATUS_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_POLOAN_PAYM_STATUS_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_POLOAN_PAYM_STATUS_900_FIX
(
   ID                           NUMBER(19)    NOT NULL,
   CREATE_AT                    TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER(19)    NOT NULL,
   DESCRIPTION                  VARCHAR2(255) NULL,
   START_AT                     TIMESTAMP(6)  NULL,
   END_AT                       TIMESTAMP(6)  NULL,
   ADDITIONAL_DESCRIPTION       VARCHAR2(255) NULL,
   RESOLVE_PENDING_ON           DATE          NULL,
   PLOAN_PAYM_STATE_REASON_CODE VARCHAR2(10)  NULL,
   PLOAN_PAYMENT_STATE_CODE     VARCHAR2(10)  NOT NULL,
   POLICY_LOAN_PAYMENT_ID       NUMBER(19)    NULL,
   DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
   PROCESSING_ORG_CODE          VARCHAR2(10)  NULL, 
   ARCHIVE_AT                   TIMESTAMP(6)  NULL,
   FIN_TRAN_TYPE_CODE           VARCHAR2(10)  NULL,
   PROCESSING_EMPLOYEE_NO       VARCHAR2(10)  NULL,
   ASIS_TAB                     VARCHAR2(20)  NULL,
   ASIS_PK_COL1                 VARCHAR2(20)  NULL,
   ASIS_PK_COL2                 VARCHAR2(20)  NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL, 
   POLY_NO                      VARCHAR2(9)   NULL
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_POLOAN_PAYM_STATUS_900_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
/* TBL_POLOAN_PAYMENT_ELEMENT */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT_100
(
   CREATOR_ID             VARCHAR2(100) NULL,
   ASIS_TAB               VARCHAR2(100) NULL,
   ASIS_PK_COL1           VARCHAR2(100) NULL,
   ASIS_PK_COL2           VARCHAR2(100) NULL, 
   PGM_ID                 VARCHAR2(150) NULL,  
   STPL_LOAN_SQNO         VARCHAR2(100) NULL,
   RPMT_SQNO              VARCHAR2(100) NULL,
   LAST_CHNG_DTTM         TIMESTAMP(6)  NULL,
   LAST_CHMN_MPNO         VARCHAR2(100) NULL,
   POLICY_LOAN_PAYMENT_ID NUMBER(19)    NULL,
   INTE_RCKN_DATE         DATE          NULL,
   INTE_LSRK_DATE         DATE          NULL,
   APPLIED_DAYS           NUMBER        NULL,
   BASE_AMOUNT            NUMBER        NULL,
   BASE_AMOUNT_COL        VARCHAR2(20)  NULL,
   FIN_TRAN_TYPE_CODE     VARCHAR2(10)  NULL,
   VALD_DVSN_CODE         VARCHAR2(1)   NULL,
   POLY_NO                VARCHAR2(9)   NULL,
   POLICY_NUMBER          VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT
(
   CREATOR_ID                 VARCHAR2(100) NULL,
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   PGM_ID                     VARCHAR2(150) NULL, 
   STPL_LOAN_SQNO             VARCHAR2(20)  NULL,
   RPMT_SQNO                  VARCHAR2(20)  NULL,
   LAST_MODIFIED_AT           TIMESTAMP(6)  NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   POLICY_LOAN_PAYMENT_ID     NUMBER(19)    NULL,
   INTE_RCKN_DATE             DATE          NULL, 
   INTE_LSRK_DATE             DATE          NULL, 
   BASE_AMOUNT                NUMBER        NULL, 
   APPLIED_DAYS               NUMBER        NULL, 
   BASE_AMOUNT_COL            VARCHAR2(20)  NULL,
   POLOAN_PAYMENT_ELEMENT_ID  NUMBER(19)    NULL,
   FIN_TRAN_TYPE_CODE         VARCHAR2(10)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(9)   NULL,
   POLICY_NUMBER              VARCHAR2(9)   NULL,
   MIG_NUM                    NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT_FIX
(
   CREATOR_ID                 VARCHAR2(100) NULL,
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   PGM_ID                     VARCHAR2(150) NULL, 
   STPL_LOAN_SQNO             VARCHAR2(20)  NULL,
   RPMT_SQNO                  VARCHAR2(20)  NULL,
   LAST_MODIFIED_AT           TIMESTAMP(6)  NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   POLICY_LOAN_PAYMENT_ID     NUMBER(19)    NULL,
   INTE_RCKN_DATE             DATE          NULL, 
   INTE_LSRK_DATE             DATE          NULL, 
   BASE_AMOUNT                NUMBER        NULL, 
   APPLIED_DAYS               NUMBER        NULL, 
   BASE_AMOUNT_COL            VARCHAR2(20)  NULL,
   POLOAN_PAYMENT_ELEMENT_ID  NUMBER(19)    NULL,
   FIN_TRAN_TYPE_CODE         VARCHAR2(10)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(9)   NULL,
   POLICY_NUMBER              VARCHAR2(9)   NULL,
   MIG_NUM                    NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_POLOAN_PAYMENT_ELEMENT_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_POLOAN_PAYMENT_ELEMENT_900
(
   ID                         NUMBER(19)    NOT NULL,
   CREATE_AT                  TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID             VARCHAR2(100) NOT NULL,
   CREATOR_ID                 VARCHAR2(100) NULL,
   CREATOR_IP                 VARCHAR2(100) NULL,
   LAST_MODIFIED_AT           TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NOT NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   LAST_MODIFIER_IP           VARCHAR2(100) NULL,
   LOCK_NO                    NUMBER(19)    NOT NULL,
   BASE_AMOUNT                NUMBER(24,12) NULL,
   BASE_CURRENCY_CODE         VARCHAR2(10)  NULL,
   BASE_SCALE                 NUMBER(10)    NULL,
   FIN_ELEMENT_TYPE_CODE      VARCHAR2(10)  NULL,
   APPLIED_DAYS               NUMBER(10)    NULL,
   CALC_END_ON                DATE          NULL,
   CALC_START_ON              DATE          NULL,
   LOAN_ELEMENT_RELATION_CODE VARCHAR2(10)  NULL,
   POLICY_LOAN_PAYMENT_ID     NUMBER(19)    NULL,
   DOMAIN_PART_KEY            VARCHAR2(2)   NULL,
   CONV_BASE_AMOUNT           NUMBER(29,9)  NULL,
   FIN_TRAN_TYPE_CODE         VARCHAR2(10)  NULL,
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_POLOAN_PAYMENT_ELEMENT_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_POLOAN_PAYMENT_ELEMENT_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_POLOAN_PAYMENT_ELEMENT_900_FIX
(
   ID                         NUMBER(19)    NOT NULL,
   CREATE_AT                  TIMESTAMP(6)  NULL,
   CREATE_PRGM_ID             VARCHAR2(100) NOT NULL,
   CREATOR_ID                 VARCHAR2(100) NULL,
   CREATOR_IP                 VARCHAR2(100) NULL,
   LAST_MODIFIED_AT           TIMESTAMP(6)  NULL,
   LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NOT NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   LAST_MODIFIER_IP           VARCHAR2(100) NULL,
   LOCK_NO                    NUMBER(19)    NOT NULL,
   BASE_AMOUNT                NUMBER(24,12) NULL,
   BASE_CURRENCY_CODE         VARCHAR2(10)  NULL,
   BASE_SCALE                 NUMBER(10)    NULL,
   FIN_ELEMENT_TYPE_CODE      VARCHAR2(10)  NULL,
   APPLIED_DAYS               NUMBER(10)    NULL,
   CALC_END_ON                DATE          NULL,
   CALC_START_ON              DATE          NULL,
   LOAN_ELEMENT_RELATION_CODE VARCHAR2(10)  NULL,
   POLICY_LOAN_PAYMENT_ID     NUMBER(19)    NULL,
   DOMAIN_PART_KEY            VARCHAR2(2)   NULL,
   CONV_BASE_AMOUNT           NUMBER(29,9)  NULL,
   FIN_TRAN_TYPE_CODE         VARCHAR2(10)  NULL,
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_POLOAN_PAYMENT_ELEMENT_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_STATUS */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_STATUS CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_STATUS
(
   PREM_PAYMENT_STATUS_ID     NUMBER       NULL,
   ASIS_TAB                   VARCHAR2(20) NULL,
   ASIS_PK_COL1               VARCHAR2(20) NULL,
   ASIS_PK_COL2               VARCHAR2(20) NULL,
   ASIS_PK_COL3               VARCHAR2(20) NULL,
   ASIS_PK_COL4               VARCHAR2(20) NULL,
   ASIS_PK_COL5               VARCHAR2(20) NULL,
   PGM_ID                     VARCHAR2(150) NULL, 
   CREATOR                    VARCHAR2(7)  NULL,
   LAST_CHNG_DTTM             DATE         NULL,
   LAST_CHMN_MPNO             VARCHAR2(12) NULL,
   START_AT                   TIMESTAMP    NULL,
   END_AT                     TIMESTAMP    NULL,
   PREM_PAYMENT_ID            NUMBER       NULL,
   PAYMENT_STATE_CODE         VARCHAR2(1)  NULL,
   PAYMENT_STATE_REASON_CODE  VARCHAR2(1)  NULL,
   PAMT_DUE_STATE_CODE        VARCHAR2(1)  NULL,
   PAMT_DUE_STATE_REASON_CODE VARCHAR2(1)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)  NULL,
   POLY_NO                    VARCHAR2(14) NULL,
   POLICY_NUMBER              VARCHAR2(14) NULL,
   MIG_NUM                    NUMBER       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_STATUS NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_STATUS_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_STATUS_FIX
(
   PREM_PAYMENT_STATUS_ID     NUMBER       NULL,
   ASIS_TAB                   VARCHAR2(20) NULL,
   ASIS_PK_COL1               VARCHAR2(20) NULL,
   ASIS_PK_COL2               VARCHAR2(20) NULL,
   ASIS_PK_COL3               VARCHAR2(20) NULL,
   ASIS_PK_COL4               VARCHAR2(20) NULL,
   ASIS_PK_COL5               VARCHAR2(20) NULL,
   PGM_ID                     VARCHAR2(150) NULL, 
   CREATOR                    VARCHAR2(7)  NULL,
   LAST_CHNG_DTTM             DATE         NULL,
   LAST_CHMN_MPNO             VARCHAR2(12) NULL,
   START_AT                   TIMESTAMP    NULL,
   END_AT                     TIMESTAMP    NULL,
   PREM_PAYMENT_ID            NUMBER       NULL,
   PAYMENT_STATE_CODE         VARCHAR2(1)  NULL,
   PAYMENT_STATE_REASON_CODE  VARCHAR2(1)  NULL,
   PAMT_DUE_STATE_CODE        VARCHAR2(1)  NULL,
   PAMT_DUE_STATE_REASON_CODE VARCHAR2(1)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)  NULL,
   POLY_NO                    VARCHAR2(14) NULL,
   POLICY_NUMBER              VARCHAR2(14) NULL,
   MIG_NUM                    NUMBER       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_STATUS_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_STATUS_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_STATUS_900
(
   ID                         NUMBER(19,0)  NOT NULL,
   CREATE_AT                  TIMESTAMP     NULL,
   CREATE_PRGM_ID             VARCHAR2(100) NULL,
   CREATOR_ID                 VARCHAR2(100) NULL,
   CREATOR_IP                 VARCHAR2(100) NULL,
   LAST_MODIFIED_AT           TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   LAST_MODIFIER_IP           VARCHAR2(100) NULL,
   LOCK_NO                    NUMBER        NOT NULL,
   DESCRIPTION                VARCHAR2(255) NULL,
   START_AT                   TIMESTAMP     NULL,
   END_AT                     TIMESTAMP     NULL,
   ADDITIONAL_DESCRIPTION     VARCHAR2(255) NULL,
   RESOLVE_PENDING_ON         DATE          NULL,
   PAYMENT_STATE_REASON_CODE  VARCHAR2(10)  NULL,
   PAYMENT_STATE_CODE         VARCHAR2(10)  NOT NULL,
   PREM_PAYMENT_ID            NUMBER(19,0)  NULL,  
   DOMAIN_PART_KEY            VARCHAR2(2)   NULL,
   PAMT_DUE_STATE_CODE        VARCHAR2(1)   NULL,
   PAMT_DUE_STATE_REASON_CODE VARCHAR2(1)   NULL, 
   ASIS_TAB                   VARCHAR2(11)  NULL,
   ASIS_PK_COL1               VARCHAR2(9)   NULL,
   ASIS_PK_COL2               VARCHAR2(10)  NULL,
   ASIS_PK_COL3               VARCHAR2(10)  NULL,
   ASIS_PK_COL4               VARCHAR2(10)  NULL,
   ASIS_PK_COL5               VARCHAR2(10)  NULL,
   POLY_NO                    VARCHAR2(14) NULL,
   VALD_DVSN_CODE             VARCHAR2(1)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_STATUS_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_STATUS_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_STATUS_900_FIX
(
   ID                         NUMBER(19,0)  NOT NULL,
   CREATE_AT                  TIMESTAMP     NULL,
   CREATE_PRGM_ID             VARCHAR2(100) NULL,
   CREATOR_ID                 VARCHAR2(100) NULL,
   CREATOR_IP                 VARCHAR2(100) NULL,
   LAST_MODIFIED_AT           TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   LAST_MODIFIER_IP           VARCHAR2(100) NULL,
   LOCK_NO                    NUMBER        NOT NULL,
   DESCRIPTION                VARCHAR2(255) NULL,
   START_AT                   TIMESTAMP     NULL,
   END_AT                     TIMESTAMP     NULL,
   ADDITIONAL_DESCRIPTION     VARCHAR2(255) NULL,
   RESOLVE_PENDING_ON         DATE          NULL,
   PAYMENT_STATE_REASON_CODE  VARCHAR2(10)  NULL,
   PAYMENT_STATE_CODE         VARCHAR2(10)  NOT NULL,
   PREM_PAYMENT_ID            NUMBER(19,0)  NULL,  
   DOMAIN_PART_KEY            VARCHAR2(2)   NULL,
   PAMT_DUE_STATE_CODE        VARCHAR2(1)   NULL,
   PAMT_DUE_STATE_REASON_CODE VARCHAR2(1)   NULL, 
   ASIS_TAB                   VARCHAR2(11)  NULL,
   ASIS_PK_COL1               VARCHAR2(9)   NULL,
   ASIS_PK_COL2               VARCHAR2(10)  NULL,
   ASIS_PK_COL3               VARCHAR2(10)  NULL,
   ASIS_PK_COL4               VARCHAR2(10)  NULL,
   ASIS_PK_COL5               VARCHAR2(10)  NULL,
   POLY_NO                    VARCHAR2(14) NULL,
   VALD_DVSN_CODE             VARCHAR2(1)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_PREM_PAYMENT_STATUS_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_DUE */
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_DUE_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_DUE_900
(
   ID                           NUMBER(19,0)  NOT NULL,       
   CREATE_AT                    TIMESTAMP     NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER        NOT NULL,       
   AGREEMENT_ID                 NUMBER(19,0)  NULL,
   AGREEMENT_NUMBER             VARCHAR2(255) NULL,
   AMOUNT                       NUMBER(24,12) NULL,
   SCALE                        NUMBER(10,0)  NULL,
   CONTRACT_PROC_NUMBER         VARCHAR2(255) NULL,
   CURRENCY_CODE                VARCHAR2(10)  NULL,
   DESCRIPTION                  VARCHAR2(255) NULL,
   EXTERNAL_REF                 VARCHAR2(255) NULL,
   FIN_TRAN_TYPE_CODE           VARCHAR2(10)  NULL,
   INN_REF                      VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE            VARCHAR2(10)  NULL,
   MONEY_PROV_ELEMENT_ID        NUMBER(19,0)  NULL,
   MONEY_PROV_ELEMENT_TYPE_CODE VARCHAR2(10)  NULL,
   POLICY_NUMBER                VARCHAR2(255) NULL,
   POSTED_ON                    DATE          NULL,
   DUE_ON                       DATE          NULL,
   ISSUE_ON                     DATE          NULL,
   PAYMENT_DUE_PERIOD_END_ON    DATE          NULL,
   PAYMENT_DUE_PERIOD_START_ON  DATE          NULL,
   WRITTEN_OFF_ON               DATE          NULL,
   CANCELLATION_REASON_CODE     VARCHAR2(6)   NULL,
   COLLECTION_METHOD_CODE       VARCHAR2(10)  NULL,
   END_OF_PAYMENT_PERIOD        VARCHAR2(6)   NULL,
   NUMBER_OF_PAYMENTS           NUMBER(10,0)  NULL,
   ORIG_PREMIUM_AMOUNT          NUMBER(24,12) NULL,
   ORIG_PREM_SCALE              NUMBER(10,0)  NULL,
   OVERDUE_INTEREST_AMOUNT      NUMBER(24,12) NULL,
   OVERDUE_INTEREST_SCALE       NUMBER(10,0)  NULL,
   PAYMENT_METHOD_CODE          VARCHAR2(10)  NULL,
   PAYMENT_PERIOD               VARCHAR2(6)   NULL,
   PREMIUM_AMOUNT               NUMBER(24,12) NULL,
   PREM_SCALE                   NUMBER(10,0)  NULL,
   PREMIUM_KIND_TYPE_CODE       VARCHAR2(10)  NULL,
   PREPAID_DISCOUNT_AMOUNT      NUMBER(24,12) NULL,
   PREPAID_DISCOUNT_SCALE       NUMBER(10,0)  NULL,
   PREM_PAYMENT_DUE_MIS_ID      NUMBER(19,0)  NULL,
   MONEY_PROV_ID                NUMBER(19,0)  NULL,
   MONEY_SCHEDULER_EXECUTION_ID NUMBER(19,0)  NULL,
   PAYMENT_PROCESSING_ID        NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
   ASIS_TAB                     VARCHAR2(11)  NULL,
   ASIS_PK_COL1                 VARCHAR2(9)   NULL,
   ASIS_PK_COL2                 VARCHAR2(10)  NULL,
   ASIS_PK_COL3                 VARCHAR2(10)  NULL,
   ASIS_PK_COL4                 VARCHAR2(10)  NULL,
   ASIS_PK_COL5                 VARCHAR2(10)  NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL,
   POLY_NO                      VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_DUE_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_DUE_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_DUE_900_FIX
(
   ID                           NUMBER(19,0)  NOT NULL,       
   CREATE_AT                    TIMESTAMP     NULL,
   CREATE_PRGM_ID               VARCHAR2(100) NULL,
   CREATOR_ID                   VARCHAR2(100) NULL,
   CREATOR_IP                   VARCHAR2(100) NULL,
   LAST_MODIFIED_AT             TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
   LAST_MODIFIER_ID             VARCHAR2(100) NULL,
   LAST_MODIFIER_IP             VARCHAR2(100) NULL,
   LOCK_NO                      NUMBER        NOT NULL,       
   AGREEMENT_ID                 NUMBER(19,0)  NULL,
   AGREEMENT_NUMBER             VARCHAR2(255) NULL,
   AMOUNT                       NUMBER(24,12) NULL,
   SCALE                        NUMBER(10,0)  NULL,
   CONTRACT_PROC_NUMBER         VARCHAR2(255) NULL,
   CURRENCY_CODE                VARCHAR2(10)  NULL,
   DESCRIPTION                  VARCHAR2(255) NULL,
   EXTERNAL_REF                 VARCHAR2(255) NULL,
   FIN_TRAN_TYPE_CODE           VARCHAR2(10)  NULL,
   INN_REF                      VARCHAR2(255) NULL,
   INN_REF_TYPE_CODE            VARCHAR2(10)  NULL,
   MONEY_PROV_ELEMENT_ID        NUMBER(19,0)  NULL,
   MONEY_PROV_ELEMENT_TYPE_CODE VARCHAR2(10)  NULL,
   POLICY_NUMBER                VARCHAR2(255) NULL,
   POSTED_ON                    DATE          NULL,
   DUE_ON                       DATE          NULL,
   ISSUE_ON                     DATE          NULL,
   PAYMENT_DUE_PERIOD_END_ON    DATE          NULL,
   PAYMENT_DUE_PERIOD_START_ON  DATE          NULL,
   WRITTEN_OFF_ON               DATE          NULL,
   CANCELLATION_REASON_CODE     VARCHAR2(6)   NULL,
   COLLECTION_METHOD_CODE       VARCHAR2(10)  NULL,
   END_OF_PAYMENT_PERIOD        VARCHAR2(6)   NULL,
   NUMBER_OF_PAYMENTS           NUMBER(10,0)  NULL,
   ORIG_PREMIUM_AMOUNT          NUMBER(24,12) NULL,
   ORIG_PREM_SCALE              NUMBER(10,0)  NULL,
   OVERDUE_INTEREST_AMOUNT      NUMBER(24,12) NULL,
   OVERDUE_INTEREST_SCALE       NUMBER(10,0)  NULL,
   PAYMENT_METHOD_CODE          VARCHAR2(10)  NULL,
   PAYMENT_PERIOD               VARCHAR2(6)   NULL,
   PREMIUM_AMOUNT               NUMBER(24,12) NULL,
   PREM_SCALE                   NUMBER(10,0)  NULL,
   PREMIUM_KIND_TYPE_CODE       VARCHAR2(10)  NULL,
   PREPAID_DISCOUNT_AMOUNT      NUMBER(24,12) NULL,
   PREPAID_DISCOUNT_SCALE       NUMBER(10,0)  NULL,
   PREM_PAYMENT_DUE_MIS_ID      NUMBER(19,0)  NULL,
   MONEY_PROV_ID                NUMBER(19,0)  NULL,
   MONEY_SCHEDULER_EXECUTION_ID NUMBER(19,0)  NULL,
   PAYMENT_PROCESSING_ID        NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
   ASIS_TAB                     VARCHAR2(11)  NULL,
   ASIS_PK_COL1                 VARCHAR2(9)   NULL,
   ASIS_PK_COL2                 VARCHAR2(10)  NULL,
   ASIS_PK_COL3                 VARCHAR2(10)  NULL,
   ASIS_PK_COL4                 VARCHAR2(10)  NULL,
   ASIS_PK_COL5                 VARCHAR2(10)  NULL,
   VALD_DVSN_CODE               VARCHAR2(1)   NULL,
   POLY_NO                      VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_PREM_PAYMENT_DUE_900_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_DUE_STATUS */
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_DUE_STATUS_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_DUE_STATUS_900
(
   ID                             NUMBER(19,0)  NOT NULL,
   CREATE_AT                      TIMESTAMP     NULL,
   CREATOR_ID                     VARCHAR2(100) NULL,
   CREATOR_IP                     VARCHAR2(100) NULL,
   LAST_MODIFIED_AT               TIMESTAMP     NULL,
   LAST_MODIFIER_ID               VARCHAR2(100) NULL,
   LAST_MODIFIER_IP               VARCHAR2(100) NULL,
   LOCK_NO                        NUMBER        NOT NULL,
   DESCRIPTION                    VARCHAR2(255) NULL,
   START_AT                       TIMESTAMP     NULL,
   END_AT                         TIMESTAMP     NULL,
   ADDITIONAL_DESCRIPTION         VARCHAR2(255) NULL,
   RESOLVE_PENDING_ON             DATE          NULL,
   PREMPAYM_DUE_STATE_REASON_CODE VARCHAR2(10)  NULL,
   PREM_PAYMENT_DUE_STATE_CODE    VARCHAR2(10)  NOT NULL,
   PREM_PAYMENT_DUE_ID            NUMBER(19,0)  NULL, 
   DOMAIN_PART_KEY                VARCHAR2(2)   NULL,
   CREATE_PRGM_ID                 VARCHAR2(100) NULL,
   LAST_MODIFIED_PRGM_ID          VARCHAR2(100) NULL,
   ASIS_TAB                       VARCHAR2(11)  NULL,
   ASIS_PK_COL1                   VARCHAR2(9)   NULL,
   ASIS_PK_COL2                   VARCHAR2(10)  NULL,
   ASIS_PK_COL3                   VARCHAR2(10)  NULL,
   ASIS_PK_COL4                   VARCHAR2(10)  NULL,
   ASIS_PK_COL5                   VARCHAR2(10)  NULL,
   VALD_DVSN_CODE                 VARCHAR2(1)   NULL,
   POLY_NO                        VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_DUE_STATUS_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_DUE_STATUS_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_DUE_STATUS_900_FIX
(
   ID                             NUMBER(19,0)  NOT NULL,
   CREATE_AT                      TIMESTAMP     NULL,
   CREATOR_ID                     VARCHAR2(100) NULL,
   CREATOR_IP                     VARCHAR2(100) NULL,
   LAST_MODIFIED_AT               TIMESTAMP     NULL,
   LAST_MODIFIER_ID               VARCHAR2(100) NULL,
   LAST_MODIFIER_IP               VARCHAR2(100) NULL,
   LOCK_NO                        NUMBER        NOT NULL,
   DESCRIPTION                    VARCHAR2(255) NULL,
   START_AT                       TIMESTAMP     NULL,
   END_AT                         TIMESTAMP     NULL,
   ADDITIONAL_DESCRIPTION         VARCHAR2(255) NULL,
   RESOLVE_PENDING_ON             DATE          NULL,
   PREMPAYM_DUE_STATE_REASON_CODE VARCHAR2(10)  NULL,
   PREM_PAYMENT_DUE_STATE_CODE    VARCHAR2(10)  NOT NULL,
   PREM_PAYMENT_DUE_ID            NUMBER(19,0)  NULL, 
   DOMAIN_PART_KEY                VARCHAR2(2)   NULL,
   CREATE_PRGM_ID                 VARCHAR2(100) NULL,
   LAST_MODIFIED_PRGM_ID          VARCHAR2(100) NULL,
   ASIS_TAB                       VARCHAR2(11)  NULL,
   ASIS_PK_COL1                   VARCHAR2(9)   NULL,
   ASIS_PK_COL2                   VARCHAR2(10)  NULL,
   ASIS_PK_COL3                   VARCHAR2(10)  NULL,
   ASIS_PK_COL4                   VARCHAR2(10)  NULL,
   ASIS_PK_COL5                   VARCHAR2(10)  NULL,
   VALD_DVSN_CODE                 VARCHAR2(1)   NULL,
   POLY_NO                        VARCHAR2(9)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_PREM_PAYMENT_DUE_STATUS_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_ELEMENT */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_100
(
    POLY_NO        VARCHAR2(9)  NULL,
    JOIN_GOOD_NO   NUMBER(3)    NULL,
    CHNG_HSNO      NUMBER(9)    NULL,
    SEQ_1          NUMBER       NULL,
    SEQ_2          NUMBER       NULL,
    ICCO_PREM      NUMBER(15)   NULL,
    ICCO_COLL_PREM NUMBER       NULL,
    ICCO_PREM_SUM  NUMBER(15)   NULL,
    RQST_DATE      VARCHAR2(24) NULL,
    LAST_PAYM_YM   VARCHAR2(18) NULL,
    VALD_DVSN_CODE VARCHAR2(1)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_200 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_200
(
    POLY_NO            VARCHAR2(9)  NULL,
    JOIN_GOOD_NO       NUMBER(3)    NULL,
    CHNG_HSNO          NUMBER(9)    NULL,
    ICCO_PREM          NUMBER       NULL,
    ICCO_COLL_PREM     NUMBER       NULL,
    SUM_ICCO_PREM      NUMBER       NULL,
    SUM_ICCO_COLL_PREM NUMBER       NULL,
    ICCO_PREM_SUM      NUMBER       NULL,
--    STRT_DATE          VARCHAR2(8) NULL,
--    END_DATE           VARCHAR2(8)  NULL,
    STRT_PAYM_YM       VARCHAR2(6)  NULL,
    END_PAYM_YM        VARCHAR2(6)  NULL,
    VALD_DVSN_CODE     VARCHAR2(1)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_200 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_250 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_250
(
    VALD_DVSN_CODE     VARCHAR2(1)  NULL,
    POLY_NO            VARCHAR2(9)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_250 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_300 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_300
(
    POLY_NO                     VARCHAR2(27) NULL,
    RECV_DLNG_SQNO              NUMBER(15)   NULL,
    RECV_SEQ_NO                 NUMBER(3)    NULL,
    PAYMENT_STATE_CODE          VARCHAR2(1)  NULL,
    PREM_KIND_DVCD              VARCHAR2(30) NULL,
    RCWC_METD_DVSN              VARCHAR2(30) NULL,
    PAYM_YM                     VARCHAR2(18) NULL,
    RECV_DLNG_DATE              VARCHAR2(24) NULL,
    SUM_ORIG_PREM               NUMBER(12)   NULL,
    COLL_PREM                   NUMBER(15)   NULL,
    DSCT_02                     NUMBER       NULL,
    DSCT_99                     NUMBER       NULL,
--    STRT_DATE                   VARCHAR2(24) NULL,
--    END_DATE                    VARCHAR2(8)  NULL,
    STRT_PAYM_YM                VARCHAR2(6)  NULL,
    END_PAYM_YM                 VARCHAR2(18) NULL,
    SUM_ICCO_PREM               NUMBER       NULL,
    SUM_ICCO_COLL_PREM_FROM_IPR NUMBER       NULL,
    SUM_ICCO_COLL_PREM_FROM_RCV NUMBER       NULL,
    DIFF_ICCO_IPR_MINUS_RCV     NUMBER       NULL,
    VALD_DVSN_CODE              VARCHAR2(1)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_300 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_400 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_400
(
    VALD_DVSN_CODE       VARCHAR2(1)  NULL,
    POLY_NO              VARCHAR2(14) NULL,
    PREM_PAYMENT_ID      NUMBER       NULL,
    PREM_PAYMENT_COMP_ID NUMBER       NULL,
    XTRC_PREM            NUMBER(12)   NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_400 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT
(
   PREM_PAYMENT_ELEMENT_ID  NUMBER        NULL,
   PREM_PAYMENT_ID          NUMBER        NULL,
   AGREEMENT_ID             NUMBER(19)    NULL,
   AGREEMENT_NUMBER         VARCHAR2(255) NULL,
   LAST_CHNG_DTTM           DATE          NULL,
   LAST_CHMN_MPNO           VARCHAR2(12)  NULL,
   COL_DVSN                 VARCHAR2(1)   NULL,
   DSCT_PREM                NUMBER(12)    NULL,
   PRDC_KIND_CD             VARCHAR2(15)  NULL,
   CREATOR_ID               VARCHAR2(7)   NULL,
   RECV_DLNG_DATE           DATE          NULL,
   RECV_DLNG_DT             VARCHAR2(12)  NULL,
   SUM_ORIG_PREM            NUMBER(12)    NULL,
   COLL_PREM                NUMBER(15)    NULL,
   REAL_RECV_PREM           NUMBER(13)    NULL,
   ASIS_TAB                 VARCHAR2(20)  NULL,
   ASIS_PK_COL1             VARCHAR2(20)  NULL,
   ASIS_PK_COL2             VARCHAR2(20)  NULL,
   ASIS_PK_COL3             VARCHAR2(20)  NULL,
   ASIS_PK_COL4             VARCHAR2(20)  NULL,
   ASIS_PK_COL5             VARCHAR2(20)  NULL,
   PGM_ID                   VARCHAR2(150) NULL,
   VALD_DVSN_CODE           VARCHAR2(1)   NULL, 
   POLY_NO                  VARCHAR2(14)  NULL, 
   POLICY_NUMBER            VARCHAR2(14)  NULL, 
   MIG_NUM                  NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID1 VALUES('1'),
   PARTITION VALID2 VALUES('2'),
   PARTITION DFLT   VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_FIX
(
   PREM_PAYMENT_ELEMENT_ID  NUMBER        NULL,
   PREM_PAYMENT_ID          NUMBER        NULL,
   AGREEMENT_ID             NUMBER(19)    NULL,
   AGREEMENT_NUMBER         VARCHAR2(255) NULL,
   LAST_CHNG_DTTM           DATE          NULL,
   LAST_CHMN_MPNO           VARCHAR2(12)  NULL,
   COL_DVSN                 VARCHAR2(1)   NULL,
   DSCT_PREM                NUMBER(12)    NULL,
   PRDC_KIND_CD             VARCHAR2(15)  NULL,
   CREATOR_ID               VARCHAR2(7)   NULL,
   RECV_DLNG_DATE           DATE          NULL,
   RECV_DLNG_DT             VARCHAR2(12)  NULL,
   SUM_ORIG_PREM            NUMBER(12)    NULL,
   COLL_PREM                NUMBER(15)    NULL,
   REAL_RECV_PREM           NUMBER(13)    NULL,
   ASIS_TAB                 VARCHAR2(20)  NULL,
   ASIS_PK_COL1             VARCHAR2(20)  NULL,
   ASIS_PK_COL2             VARCHAR2(20)  NULL,
   ASIS_PK_COL3             VARCHAR2(20)  NULL,
   ASIS_PK_COL4             VARCHAR2(20)  NULL,
   ASIS_PK_COL5             VARCHAR2(20)  NULL,
   PGM_ID                   VARCHAR2(150) NULL,
   VALD_DVSN_CODE           VARCHAR2(1)   NULL, 
   POLY_NO                  VARCHAR2(14)  NULL, 
   POLICY_NUMBER            VARCHAR2(14)  NULL, 
   MIG_NUM                  NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID1 VALUES('1'),
   PARTITION VALID2 VALUES('2'),
   PARTITION DFLT   VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_ELEMENT_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_ELEMENT_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_ELEMENT_900
(
   ID                         NUMBER(19,0)  NOT NULL,
   CREATE_AT                  TIMESTAMP     NULL,
   CREATE_PRGM_ID             VARCHAR2(100) NULL,
   CREATOR_ID                 VARCHAR2(100) NULL,
   CREATOR_IP                 VARCHAR2(100) NULL,
   LAST_MODIFIED_AT           TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   LAST_MODIFIER_IP           VARCHAR2(100) NULL,
   LOCK_NO                    NUMBER        NOT NULL,
   BASE_AMOUNT                NUMBER(24,12) NULL,
   BASE_CURRENCY_CODE         VARCHAR2(10)  NULL,
   BASE_SCALE                 NUMBER(10,0)  NULL,
   FIN_ELEMENT_TYPE_CODE      VARCHAR2(10)  NULL,
   APPLIED_RATE               NUMBER(18,12) NULL,
   APPLIED_RATE_SCALE         NUMBER(10,0)  NULL,
   FIN_ELEMENT_TYPE_KIND_CODE VARCHAR2(10)  NULL,
   PREM_ELEMENT_RELATION_CODE VARCHAR2(10)  NULL,
   PREM_PAYMENT_ID            NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY            VARCHAR2(2)   NULL,   
   ASIS_TAB                   VARCHAR2(11)  NULL,
   ASIS_PK_COL1               VARCHAR2(9)   NULL,
   ASIS_PK_COL2               VARCHAR2(10)  NULL,
   ASIS_PK_COL3               VARCHAR2(10)  NULL,
   ASIS_PK_COL4               VARCHAR2(10)  NULL,
   ASIS_PK_COL5               VARCHAR2(20)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL, 
   POLY_NO                    VARCHAR2(14)  NULL,
   MONEY_PROV_ID              NUMBER        NULL,
   MONEY_PROV_ELEMENT_ID      NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_ELEMENT_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_ELEMENT_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_ELEMENT_900_FIX
(
   ID                         NUMBER(19,0)  NOT NULL,
   CREATE_AT                  TIMESTAMP     NULL,
   CREATE_PRGM_ID             VARCHAR2(100) NULL,
   CREATOR_ID                 VARCHAR2(100) NULL,
   CREATOR_IP                 VARCHAR2(100) NULL,
   LAST_MODIFIED_AT           TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NULL,
   LAST_MODIFIER_ID           VARCHAR2(100) NULL,
   LAST_MODIFIER_IP           VARCHAR2(100) NULL,
   LOCK_NO                    NUMBER        NOT NULL,
   BASE_AMOUNT                NUMBER(24,12) NULL,
   BASE_CURRENCY_CODE         VARCHAR2(10)  NULL,
   BASE_SCALE                 NUMBER(10,0)  NULL,
   FIN_ELEMENT_TYPE_CODE      VARCHAR2(10)  NULL,
   APPLIED_RATE               NUMBER(18,12) NULL,
   APPLIED_RATE_SCALE         NUMBER(10,0)  NULL,
   FIN_ELEMENT_TYPE_KIND_CODE VARCHAR2(10)  NULL,
   PREM_ELEMENT_RELATION_CODE VARCHAR2(10)  NULL,
   PREM_PAYMENT_ID            NUMBER(19,0)  NULL,
   DOMAIN_PART_KEY            VARCHAR2(2)   NULL,   
   ASIS_TAB                   VARCHAR2(11)  NULL,
   ASIS_PK_COL1               VARCHAR2(9)   NULL,
   ASIS_PK_COL2               VARCHAR2(10)  NULL,
   ASIS_PK_COL3               VARCHAR2(10)  NULL,
   ASIS_PK_COL4               VARCHAR2(10)  NULL,
   ASIS_PK_COL5               VARCHAR2(20)  NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL, 
   POLY_NO                    VARCHAR2(14)  NULL,
   MONEY_PROV_ID              NUMBER        NULL,
   MONEY_PROV_ELEMENT_ID      NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_PREM_PAYMENT_ELEMENT_900_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
/* TBL_FIN_TRAN_RELATIONSHIP */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_FIN_TRAN_RELATIONSHIP CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_FIN_TRAN_RELATIONSHIP
(
   FIN_TRAN_RELATIONSHIP_ID   NUMBER        NULL,
   CREATOR_ID                 VARCHAR2(7)   NULL,
   LAST_CHNG_DTTM             DATE          NULL,
   LAST_CHMN_MPNO             VARCHAR2(12)  NULL,
   REAL_RECV_PREM             NUMBER(13)    NULL,
   START_AT                   DATE          NULL,
   END_AT                     DATE          NULL,
   FROM_PREM_PAYMENT_DUE_ID   NUMBER        NULL,
   FROM_PREM_PAYMENT_ID       NUMBER        NULL,
   TO_PREM_PAYMENT_DUE_ID     NUMBER        NULL,
   TO_PREM_PAYMENT_ID         NUMBER        NULL,
   FROM_PAYMENT_ID            NUMBER        NULL,
   TO_PAYMENT_ID              NUMBER        NULL,
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   ASIS_PK_COL3               VARCHAR2(20)  NULL,
   ASIS_PK_COL4               VARCHAR2(20)  NULL,
   ASIS_PK_COL5               VARCHAR2(20)  NULL,
   PGM_ID                     VARCHAR2(150) NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(14)  NULL,
   MIG_NUM                    NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_FIN_TRAN_RELATIONSHIP NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_FIN_TRAN_RELATIONSHIP_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_FIN_TRAN_RELATIONSHIP_FIX
(
   FIN_TRAN_RELATIONSHIP_ID   NUMBER        NULL,
   CREATOR_ID                 VARCHAR2(7)   NULL,
   LAST_CHNG_DTTM             DATE          NULL,
   LAST_CHMN_MPNO             VARCHAR2(12)  NULL,
   REAL_RECV_PREM             NUMBER(13)    NULL,
   START_AT                   DATE          NULL,
   END_AT                     DATE          NULL,
   FROM_PREM_PAYMENT_DUE_ID   NUMBER        NULL,
   FROM_PREM_PAYMENT_ID       NUMBER        NULL,
   TO_PREM_PAYMENT_DUE_ID     NUMBER        NULL,
   TO_PREM_PAYMENT_ID         NUMBER        NULL,
   FROM_PAYMENT_ID            NUMBER        NULL,
   TO_PAYMENT_ID              NUMBER        NULL,
   ASIS_TAB                   VARCHAR2(20)  NULL,
   ASIS_PK_COL1               VARCHAR2(20)  NULL,
   ASIS_PK_COL2               VARCHAR2(20)  NULL,
   ASIS_PK_COL3               VARCHAR2(20)  NULL,
   ASIS_PK_COL4               VARCHAR2(20)  NULL,
   ASIS_PK_COL5               VARCHAR2(20)  NULL,
   PGM_ID                     VARCHAR2(150) NULL,
   VALD_DVSN_CODE             VARCHAR2(1)   NULL,
   POLY_NO                    VARCHAR2(14)  NULL,
   MIG_NUM                    NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MAPKEY_TBL_FIN_TRAN_RELATIONSHIP_FIX NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_FIN_TRAN_RELATIONSHIP_900 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_FIN_TRAN_RELATIONSHIP_900
(
   ID                          NUMBER(19,0)  NOT NULL,
   CREATE_AT                   TIMESTAMP     NULL,
   CREATE_PRGM_ID              VARCHAR2(100) NULL,
   CREATOR_ID                  VARCHAR2(100) NULL,
   CREATOR_IP                  VARCHAR2(100) NULL,
   LAST_MODIFIED_AT            TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID       VARCHAR2(100) NULL,
   LAST_MODIFIER_ID            VARCHAR2(100) NULL,
   LAST_MODIFIER_IP            VARCHAR2(100) NULL,
   LOCK_NO                     NUMBER        NOT NULL,
   AMOUNT                      NUMBER(24,12) NULL,
   CURRENCY_CODE               VARCHAR2(10)  NULL,
   SCALE                       NUMBER(10,0)  NULL,
   DESCRIPTION                 VARCHAR2(255) NULL,
   START_ON                    DATE          NULL,
   END_ON                      DATE          NULL,
   FIN_TRAN_RELATION_TYPE_CODE VARCHAR2(10)  NULL,
   RELATION_DIRECTIVE_CODE     VARCHAR2(10)  NULL,
   FROM_PAYMENT_ID             NUMBER(19,0)  NULL,
   FROM_PAYMENT_DUE_ID         NUMBER(19,0)  NULL,
   FROM_PREM_PAYMENT_ID        NUMBER(19,0)  NULL,
   FROM_PREM_PAYMENT_DUE_ID    NUMBER(19,0)  NULL,
   TO_PAYMENT_ID               NUMBER(19,0)  NULL,
   TO_PAYMENT_DUE_ID           NUMBER(19,0)  NULL,
   TO_PREM_PAYMENT_ID          NUMBER(19,0)  NULL,
   TO_PREM_PAYMENT_DUE_ID      NUMBER(19,0)  NULL,
   ASIS_TAB                    VARCHAR2(20)  NULL,
   ASIS_PK_COL1                VARCHAR2(20)  NULL,
   ASIS_PK_COL2                VARCHAR2(20)  NULL,
   ASIS_PK_COL3                VARCHAR2(20)  NULL,
   ASIS_PK_COL4                VARCHAR2(20)  NULL,
   ASIS_PK_COL5                VARCHAR2(20)  NULL,
   VALD_DVSN_CODE              VARCHAR2(1)   NULL, 
   POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_FIN_TRAN_RELATIONSHIP_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_FIN_TRAN_RELATIONSHIP_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_FIN_TRAN_RELATIONSHIP_900_FIX
(
   ID                          NUMBER(19,0)  NOT NULL,
   CREATE_AT                   TIMESTAMP     NULL,
   CREATE_PRGM_ID              VARCHAR2(100) NULL,
   CREATOR_ID                  VARCHAR2(100) NULL,
   CREATOR_IP                  VARCHAR2(100) NULL,
   LAST_MODIFIED_AT            TIMESTAMP     NULL,
   LAST_MODIFIED_PRGM_ID       VARCHAR2(100) NULL,
   LAST_MODIFIER_ID            VARCHAR2(100) NULL,
   LAST_MODIFIER_IP            VARCHAR2(100) NULL,
   LOCK_NO                     NUMBER        NOT NULL,
   AMOUNT                      NUMBER(24,12) NULL,
   CURRENCY_CODE               VARCHAR2(10)  NULL,
   SCALE                       NUMBER(10,0)  NULL,
   DESCRIPTION                 VARCHAR2(255) NULL,
   START_ON                    DATE          NULL,
   END_ON                      DATE          NULL,
   FIN_TRAN_RELATION_TYPE_CODE VARCHAR2(10)  NULL,
   RELATION_DIRECTIVE_CODE     VARCHAR2(10)  NULL,
   FROM_PAYMENT_ID             NUMBER(19,0)  NULL,
   FROM_PAYMENT_DUE_ID         NUMBER(19,0)  NULL,
   FROM_PREM_PAYMENT_ID        NUMBER(19,0)  NULL,
   FROM_PREM_PAYMENT_DUE_ID    NUMBER(19,0)  NULL,
   TO_PAYMENT_ID               NUMBER(19,0)  NULL,
   TO_PAYMENT_DUE_ID           NUMBER(19,0)  NULL,
   TO_PREM_PAYMENT_ID          NUMBER(19,0)  NULL,
   TO_PREM_PAYMENT_DUE_ID      NUMBER(19,0)  NULL,
   ASIS_TAB                    VARCHAR2(20)  NULL,
   ASIS_PK_COL1                VARCHAR2(20)  NULL,
   ASIS_PK_COL2                VARCHAR2(20)  NULL,
   ASIS_PK_COL3                VARCHAR2(20)  NULL,
   ASIS_PK_COL4                VARCHAR2(20)  NULL,
   ASIS_PK_COL5                VARCHAR2(20)  NULL,
   VALD_DVSN_CODE              VARCHAR2(1)   NULL, 
   POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG04;
ALTER TABLE MIG_TBL_FIN_TRAN_RELATIONSHIP_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_COMP_ELEMENT */
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_100
(
    PREM_PAYMENT_ID             NUMBER        NULL,
    PREM_PAYMENT_ELEMENT_ID     NUMBER        NULL,
    PREM_KIND_DVCD              VARCHAR2(10)  NULL,  
    RCWC_METD_DVSN              VARCHAR2(10)  NULL,  
    AGREEMENT_ID                NUMBER(19)    NULL,
    AGREEMENT_NUMBER            VARCHAR2(255) NULL,
    DSCT_PREM                   NUMBER(12)    NULL,
    PRDC_KIND_CD                VARCHAR2(15)  NULL,
    RECV_DLNG_DT                VARCHAR2(12)  NULL,
    SUM_ORIG_PREM               NUMBER(12)    NULL,
    COLL_PREM                   NUMBER(15)    NULL,
    PREPAID_DISCOUNT_AMOUNT     NUMBER(24,12) NULL,
    MONEY_PROV_ID               NUMBER        NULL,
    MONEY_PROV_ELEMENT_ID       NUMBER        NULL,
    APPLIED_RATE                NUMBER(18,12) NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_200 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_200
(
    PREM_PAYMENT_ID             NUMBER        NULL,
    PREM_PAYMENT_COMP_ID        NUMBER        NULL,
    PREM_PAYMENT_ELEMENT_ID     NUMBER        NULL,
    PREM_KIND_DVCD              VARCHAR2(10)  NULL,  
    RCWC_METD_DVSN              VARCHAR2(10)  NULL, 
    P_AGREEMENT_ID              NUMBER(19)    NULL,
    P_AGREEMENT_NUMBER          VARCHAR2(255) NULL,
    AGREEMENT_ID                NUMBER(19)    NULL,
    AGREEMENT_NUMBER            VARCHAR2(255) NULL,
    GOOD_RELN_CODE              VARCHAR2(10)  NULL,
    BASE_AMOUNT                 NUMBER(12)    NULL,
    C_BASE_AMOUNT               NUMBER(12)    NULL,
    FIN_ELEMENT_TYPE_KIND_CODE  VARCHAR2(15)  NULL,
    RECV_DLNG_DT                VARCHAR2(12)  NULL,
    SUM_ORIG_PREM               NUMBER(12)    NULL,
    COLL_PREM                   NUMBER(15)    NULL,
    COMP_SUM_ORIG_PREM          NUMBER(12)    NULL,
    COMP_COLL_PREM              NUMBER(15)    NULL,
    XTRC_PREM                   NUMBER(15)    NULL,
    PREPAID_DISCOUNT_AMOUNT     NUMBER(24,12) NULL,
    MONEY_PROV_ID               NUMBER        NULL,
    MONEY_PROV_ELEMENT_ID       NUMBER        NULL,
    APPLIED_RATE                NUMBER(18,12) NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL,
    GUBUN                       VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_200 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_300 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_300
(
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL,
    PREM_PAYMENT_COMP_ID        NUMBER        NULL,
    BASE_AMOUNT                 NUMBER(12)    NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'), 
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_300 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT CASCADE CONSTRAINTS PURGE;

CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT
(
    AGREEMENT_ID                NUMBER(19)    NULL,
    AGREEMENT_NUMBER            VARCHAR2(255) NULL,
    PREM_PAYMENT_ID             NUMBER(19)    NULL,
    PREM_PAYMENT_ELEMENT_ID     NUMBER(19)    NULL,
    PREM_PAYMENT_COMP_ID        NUMBER(19)    NULL,
    GOOD_RELN_CODE              VARCHAR2(10)  NULL,
    PREM_KIND_DVCD              VARCHAR2(15)  NULL,
    FIN_ELEMENT_TYPE_KIND_CODE  VARCHAR2(10)  NULL,
    BASE_AMOUNT                 NUMBER(24,12) NULL,
    APPLIED_RATE                NUMBER(18,12) NULL,
    CREATOR_ID                  VARCHAR2(100) NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_010 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_010
(
    AGREEMENT_ID               NUMBER(19)    NULL,
    AGREEMENT_NUMBER           VARCHAR2(255) NULL,
    PREM_PAYMENT_ID            NUMBER(19)    NULL,
    PREM_PAYMENT_ELEMENT_ID    NUMBER(19)    NULL,
    PREM_PAYMENT_COMP_ID       NUMBER(19)    NULL,
    GOOD_RELN_CODE             VARCHAR2(10)  NULL,
    PREM_KIND_DVCD             VARCHAR2(15)  NULL,
    FIN_ELEMENT_TYPE_KIND_CODE VARCHAR2(10)  NULL,
    BASE_AMOUNT                NUMBER(24,12) NULL,
    POLICY_BASE_AMOUNT         NUMBER(24,12) NULL,
    APPLIED_RATE               NUMBER(18,12) NULL,
    CREATOR_ID                 VARCHAR2(100) NULL,
    VALD_DVSN_CODE             VARCHAR2(1)   NULL,
    POLY_NO                    VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_010 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_020 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_020
(
    PREM_PAYMENT_ELEMENT_ID     NUMBER(19)    NULL,
    AGREEMENT_ID                NUMBER(19)    NULL,
    SUM_BASE_AMOUNT             NUMBER(24)    NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_020 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_300 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_300
(
    VALD_DVSN_CODE       VARCHAR2(1)  NULL,
    POLY_NO              VARCHAR2(14) NULL,
    PREM_PAYMENT_COMP_ID NUMBER(19)   NULL,
    BASE_AMOUNT          NUMBER       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PREM_PAYMENT_COMP_ELEMENT_300 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_100
(
    FLAG                        VARCHAR2(1)   NULL,
    AGREEMENT_ID                NUMBER(19)    NULL,
    AGREEMENT_NUMBER            VARCHAR2(255) NULL,
    PREM_PAYMENT_ID             NUMBER(19)    NULL,
    PREM_PAYMENT_ELEMENT_ID     NUMBER(19)    NULL,
    PREM_PAYMENT_COMP_ID        NUMBER(19)    NULL,
    GOOD_RELN_CODE              VARCHAR2(10)  NULL,
    RECV_DLNG_DT                VARCHAR2(12)  NULL,
    PREM_KIND_DVCD              VARCHAR2(15)  NULL,
    SUM_ORIG_PREM               NUMBER(12)    NULL,
    COLL_PREM                   NUMBER(12)    NULL,
    COMP_SUM_ORIG_PREM          NUMBER(12)    NULL,
    COMP_COLL_PREM              NUMBER(12)    NULL,
    XTRC_PREM                   NUMBER(12)    NULL,
    MONEY_PROV_ID               NUMBER(19)    NULL,
    MONEY_PROV_ELEMENT_ID       NUMBER(19)    NULL,
    FIN_ELEMENT_TYPE_KIND_CODE  VARCHAR2(10)  NULL,
    BASE_AMOUNT                 NUMBER(24)    NULL,
    APPLIED_RATE                NUMBER(18,12) NULL,
    ARRE_INTE                   NUMBER(24)    NULL,
    PPAY_DSCT_PREM              NUMBER(24)    NULL,
    LAST_MODIFIED_AT            TIMESTAMP     NULL,
    LAST_MODIFIED_PRGM_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_ID            VARCHAR2(100) NULL,
    ASIS_TAB                    VARCHAR2(20)  NULL,
    ASIS_PK_COL1                VARCHAR2(20)  NULL,
    ASIS_PK_COL2                VARCHAR2(20)  NULL,
    ASIS_PK_COL3                VARCHAR2(20)  NULL,
    ASIS_PK_COL4                VARCHAR2(20)  NULL,
    ASIS_PK_COL5                VARCHAR2(20)  NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_110 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_110
(
    AGREEMENT_ID               NUMBER(19)    NULL,
    AGREEMENT_NUMBER           VARCHAR2(255) NULL,
    PREM_PAYMENT_ID            NUMBER(19)    NULL,
    PREM_PAYMENT_ELEMENT_ID    NUMBER(19)    NULL,
    PREM_PAYMENT_COMP_ID       NUMBER(19)    NULL,
    GOOD_RELN_CODE             VARCHAR2(10)  NULL,
    PREM_KIND_DVCD             VARCHAR2(15)  NULL,
    FIN_ELEMENT_TYPE_KIND_CODE VARCHAR2(10)  NULL,
    BASE_AMOUNT                NUMBER(24,12) NULL,
    POLICY_BASE_AMOUNT         NUMBER(24,12) NULL,
    APPLIED_RATE               NUMBER(18,12) NULL,
    LAST_MODIFIED_AT           TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NULL,
    LAST_MODIFIER_ID           VARCHAR2(100) NULL,
    ASIS_TAB                   VARCHAR2(20)  NULL,
    ASIS_PK_COL1               VARCHAR2(20)  NULL,
    ASIS_PK_COL2               VARCHAR2(20)  NULL,
    ASIS_PK_COL3               VARCHAR2(20)  NULL,
    ASIS_PK_COL4               VARCHAR2(20)  NULL,
    ASIS_PK_COL5               VARCHAR2(20)  NULL,
    CREATOR_ID                 VARCHAR2(100) NULL,
    VALD_DVSN_CODE             VARCHAR2(1)   NULL,
    POLY_NO                    VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_110 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_120 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_120
(
    PREM_PAYMENT_ID             NUMBER(19)    NULL,
    FIN_ELEMENT_TYPE_KIND_CODE  VARCHAR2(10)  NULL,
    AGREEMENT_ID                NUMBER(19)    NULL,
    SUM_BASE_AMOUNT             NUMBER(24)    NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_120 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_130 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_130
(
    AGREEMENT_ID               NUMBER(19)    NULL,
    AGREEMENT_NUMBER           VARCHAR2(255) NULL,
    PREM_PAYMENT_ID            NUMBER(19)    NULL,
    PREM_PAYMENT_ELEMENT_ID    NUMBER(19)    NULL,
    PREM_PAYMENT_COMP_ID       NUMBER(19)    NULL,
    GOOD_RELN_CODE             VARCHAR2(10)  NULL,
    PREM_KIND_DVCD             VARCHAR2(15)  NULL,
    FIN_ELEMENT_TYPE_KIND_CODE VARCHAR2(10)  NULL,
    BASE_AMOUNT                NUMBER(24,12) NULL,
    POLICY_BASE_AMOUNT         NUMBER(24,12) NULL,
    APPLIED_RATE               NUMBER(18,12) NULL,
    LAST_MODIFIED_AT           TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID      VARCHAR2(100) NULL,
    LAST_MODIFIER_ID           VARCHAR2(100) NULL,
    ASIS_TAB                   VARCHAR2(20)  NULL,
    ASIS_PK_COL1               VARCHAR2(20)  NULL,
    ASIS_PK_COL2               VARCHAR2(20)  NULL,
    ASIS_PK_COL3               VARCHAR2(20)  NULL,
    ASIS_PK_COL4               VARCHAR2(20)  NULL,
    ASIS_PK_COL5               VARCHAR2(20)  NULL,
    CREATOR_ID                 VARCHAR2(100) NULL,
    VALD_DVSN_CODE             VARCHAR2(1)   NULL,
    POLY_NO                    VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_130 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_140 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_140
(
    PREM_PAYMENT_ID             NUMBER(19)    NULL,
    FIN_ELEMENT_TYPE_KIND_CODE  VARCHAR2(10)  NULL,
    AGREEMENT_ID                NUMBER(19)    NULL,
    SUM_BASE_AMOUNT             NUMBER(24)    NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_140 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_150 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_150
(
    VALD_DVSN_CODE       VARCHAR2(1)  NULL,
    POLY_NO              VARCHAR2(14) NULL,
    PREM_PAYMENT_COMP_ID NUMBER(19)   NULL,
    BASE_AMOUNT          NUMBER       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_150 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_200 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_200
(
    AGREEMENT_ID                NUMBER(19)    NULL,
    AGREEMENT_NUMBER            VARCHAR2(255) NULL,
    PREM_PAYMENT_ID             NUMBER(19)    NULL,
    PREM_PAYMENT_ELEMENT_ID     NUMBER(19)    NULL,
    PREM_PAYMENT_COMP_ID        NUMBER(19)    NULL,
    GOOD_RELN_CODE              VARCHAR2(10)  NULL,
    PREM_KIND_DVCD              VARCHAR2(15)  NULL,
    FIN_ELEMENT_TYPE_KIND_CODE  VARCHAR2(10)  NULL,
    BASE_AMOUNT                 NUMBER(24,12) NULL,
    APPLIED_RATE                NUMBER(18,12) NULL,
    LAST_MODIFIED_AT            TIMESTAMP     NULL,
    LAST_MODIFIED_PRGM_ID       VARCHAR2(100) NULL,
    LAST_MODIFIER_ID            VARCHAR2(100) NULL,
    ASIS_TAB                    VARCHAR2(20)  NULL,
    ASIS_PK_COL1                VARCHAR2(20)  NULL,
    ASIS_PK_COL2                VARCHAR2(20)  NULL,
    ASIS_PK_COL3                VARCHAR2(20)  NULL,
    ASIS_PK_COL4                VARCHAR2(20)  NULL,
    ASIS_PK_COL5                VARCHAR2(20)  NULL,
    CREATOR_ID                  VARCHAR2(100) NULL,
    VALD_DVSN_CODE              VARCHAR2(1)   NULL,
    POLY_NO                     VARCHAR2(14)  NULL 
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_200 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_900 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_900
(
    ID                           NUMBER(19)    NOT NULL,
    CREATE_AT                    TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID               VARCHAR2(100) NULL,
    CREATOR_ID                   VARCHAR2(100) NULL,
    CREATOR_IP                   VARCHAR2(100) NULL,
    LAST_MODIFIED_AT             TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
    LAST_MODIFIER_ID             VARCHAR2(100) NULL,
    LAST_MODIFIER_IP             VARCHAR2(100) NULL,
    LOCK_NO                      NUMBER(19)    NOT NULL,
    BASE_AMOUNT                  NUMBER(24,12) NULL,
    BASE_CURRENCY_CODE           VARCHAR2(10)  NULL,
    BASE_SCALE                   NUMBER(10)    NULL,
    FIN_ELEMENT_TYPE_CODE        VARCHAR2(10)  NULL,
    APPLIED_RATE                 NUMBER(18,12) NULL,
    APPLIED_RATE_SCALE           NUMBER(10)    NULL,
    FIN_ELEMENT_TYPE_KIND_CODE   VARCHAR2(10)  NULL,
    PREM_ELEMENT_RELATION_CODE   VARCHAR2(10)  NULL,
    PREM_PAYMENT_COMP_ID         NUMBER(19)    NULL,
    DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
    ASIS_TAB                     VARCHAR2(50)  NULL,
    ASIS_PK_COL1                 VARCHAR2(20)  NULL,
    ASIS_PK_COL2                 VARCHAR2(20)  NULL,
    ASIS_PK_COL3                 VARCHAR2(20)  NULL, 
    ASIS_PK_COL4                 VARCHAR2(20)  NULL, 
    ASIS_PK_COL5                 VARCHAR2(20)  NULL,
    PREM_PAYMENT_ID              NUMBER        NULL, 
    PREM_PAYMENT_ELEMENT_ID      NUMBER        NULL, 
    VALD_DVSN_CODE               VARCHAR2(1)   NULL,
    POLY_NO                      VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_900 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_900_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_900_FIX
(
    ID                           NUMBER(19)    NOT NULL,
    CREATE_AT                    TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID               VARCHAR2(100) NULL,
    CREATOR_ID                   VARCHAR2(100) NULL,
    CREATOR_IP                   VARCHAR2(100) NULL,
    LAST_MODIFIED_AT             TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID        VARCHAR2(100) NULL,
    LAST_MODIFIER_ID             VARCHAR2(100) NULL,
    LAST_MODIFIER_IP             VARCHAR2(100) NULL,
    LOCK_NO                      NUMBER(19)    NOT NULL,
    BASE_AMOUNT                  NUMBER(24,12) NULL,
    BASE_CURRENCY_CODE           VARCHAR2(10)  NULL,
    BASE_SCALE                   NUMBER(10)    NULL,
    FIN_ELEMENT_TYPE_CODE        VARCHAR2(10)  NULL,
    APPLIED_RATE                 NUMBER(18,12) NULL,
    APPLIED_RATE_SCALE           NUMBER(10)    NULL,
    FIN_ELEMENT_TYPE_KIND_CODE   VARCHAR2(10)  NULL,
    PREM_ELEMENT_RELATION_CODE   VARCHAR2(10)  NULL,
    PREM_PAYMENT_COMP_ID         NUMBER(19)    NULL,
    DOMAIN_PART_KEY              VARCHAR2(2)   NULL,
    ASIS_TAB                     VARCHAR2(50)  NULL,
    ASIS_PK_COL1                 VARCHAR2(20)  NULL,
    ASIS_PK_COL2                 VARCHAR2(20)  NULL,
    ASIS_PK_COL3                 VARCHAR2(20)  NULL, 
    ASIS_PK_COL4                 VARCHAR2(20)  NULL, 
    ASIS_PK_COL5                 VARCHAR2(20)  NULL,
    PREM_PAYMENT_ID              NUMBER        NULL, 
    PREM_PAYMENT_ELEMENT_ID      NUMBER        NULL, 
    VALD_DVSN_CODE               VARCHAR2(1)   NULL,
    POLY_NO                      VARCHAR2(14)  NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_900_FIX NOLOGGING;

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_DUE_COMP */
----------------------------------------------------------------------------------------------------
-- TBL_PREM_PAYMENT_COMP의 테이블을 활용하여 TARGET에 바로 INSERT
-- MIG_PRC_MIG_TBL_PREM_PAYMENT_COMP_900_FIX 위치 조정

----------------------------------------------------------------------------------------------------
/* TBL_PREMPAYM_DUE_COMP_ELEMENT */
----------------------------------------------------------------------------------------------------
-- TBL_PREM_PAYMENT_COMP_ELEMENT의 테이블을 활용하여 TARGET에 바로 INSERT
-- MIG_PRC_MIG_TBL_PREM_PAYMENT_COMP_ELEMENT_900_FIX 위치 조정 

----------------------------------------------------------------------------------------------------
/* TBL_PREM_PAYMENT_DUE_ELEMENT */
----------------------------------------------------------------------------------------------------
-- TBL_PREM_PAYMENT_ELEMENT의 테이블을 활용하여 TARGET에 바로 INSERT




----------------------------------------------------------------------------------------------------
/* TBL_PARTY_ROLE_HQI */
----------------------------------------------------------------------------------------------------

DROP TABLE MAPKEY_TBL_PARTY_ROLE_HQI_100 CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PARTY_ROLE_HQI_100
(
    POLY_PLAN_NO            VARCHAR2(9)   NOT NULL,
    CNTT_PRTR_ROCD          VARCHAR2(30)  NULL,
    ROLE_PLAYER_TYPE_CODE   VARCHAR2(30)  NULL,
    FLAG                    VARCHAR2(1)   NULL,
    CUST_ID                 VARCHAR2(30)  NULL,
    IRKD_CODE_DTAL          VARCHAR2(12)  NULL,
    IRKD_CODE_ITEM          VARCHAR2(9)   NULL,
    SALE_CHNL_CODE          VARCHAR2(30)  NULL,
    GOOD_CODE_DTAL          VARCHAR2(4)   NULL,
    GOOD_CODE_ITEM          VARCHAR2(3)   NULL,
    GOOD_RELN_CODE          VARCHAR2(10)  NULL,
    ORIGIN_AGREEMENT_NUMBER VARCHAR2(30)  NULL,
    AGREEMENT_ID            NUMBER(19)    NULL,
    AGREEMENT_NUMBER        VARCHAR2(30)  NULL,
    STRT_DATE_DT            DATE          NULL,
    END_DATE_DT             DATE          NULL,
    LAST_CHMN_MPNO          VARCHAR2(24)  NULL,
    LAST_CHNG_DTTM          DATE          NULL,
    PGM_ID                  VARCHAR2(150) NULL,
    CREATOR_ID              VARCHAR2(20)  NULL,
    ASIS_TAB                VARCHAR2(11)  NULL,
    ASIS_PK_COL1            VARCHAR2(30)  NULL,
    ASIS_PK_COL2            VARCHAR2(30)  NULL,
    ASIS_PK_COL3            VARCHAR2(30)  NULL,
    AGMT_STATE_DTL_CODE     VARCHAR2(5)   NULL,
    VALD_DVSN_CODE          VARCHAR2(1)   NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_PLAN_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE_HQI_100 NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PARTY_ROLE_HQI CASCADE CONSTRAINTS PURGE;

CREATE TABLE MAPKEY_TBL_PARTY_ROLE_HQI
(
    PARTY_ROLE_ID           NUMBER        NULL,
    POLY_PLAN_NO            VARCHAR2(9)   NOT NULL,
    VALD_DVSN_CODE          VARCHAR2(1)   NOT NULL,
    CNTT_PRTR_ROCD          VARCHAR2(30)  NULL,
    ROLE_PLAYER_TYPE_CODE   VARCHAR2(30)  NULL,
    FLAG                    VARCHAR2(1)   NULL,
    CUST_ID                 VARCHAR2(30)  NULL,
    IRKD_CODE_DTAL          VARCHAR2(12)  NULL,
    IRKD_CODE_ITEM          VARCHAR2(9)   NULL,
    SALE_CHNL_CODE          VARCHAR2(30)  NULL,
    GOOD_CODE_DTAL          VARCHAR2(4)   NULL,
    GOOD_CODE_ITEM          VARCHAR2(3)   NULL,
    GOOD_RELN_CODE          VARCHAR2(10)  NULL,
    ORIGIN_AGREEMENT_NUMBER VARCHAR2(30)  NULL,
    AGREEMENT_ID            NUMBER(19)    NULL,
    AGREEMENT_NUMBER        VARCHAR2(30)  NULL,
    STRT_DATE_DT            DATE          NULL,
    END_DATE_DT             DATE          NULL,
    LAST_CHMN_MPNO          VARCHAR2(24)  NULL,
    LAST_CHNG_DTTM          DATE          NULL,
    PGM_ID                  VARCHAR2(150) NULL,
    CREATOR_ID              VARCHAR2(20)  NULL,
    ASIS_TAB                VARCHAR2(11)  NULL,
    ASIS_PK_COL1            VARCHAR2(30)  NULL,
    ASIS_PK_COL2            VARCHAR2(30)  NULL,
    ASIS_PK_COL3            VARCHAR2(30)  NULL,
    AGMT_STATE_DTL_CODE     VARCHAR2(5)   NULL,
    TARGET_RNO              NUMBER        NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_PLAN_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE_HQI NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MAPKEY_TBL_PARTY_ROLE_HQI_FIX CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAPKEY_TBL_PARTY_ROLE_HQI_FIX
(
    VALD_DVSN_CODE          VARCHAR2(1)  NOT NULL,
    POLY_PLAN_NO            VARCHAR2(9)  NOT NULL,
    AGMT_STATE_DTL_CODE     VARCHAR2(5)  NULL,
    CNTT_PRTR_ROCD          VARCHAR2(30) NULL,
    ROLE_PLAYER_TYPE_CODE   VARCHAR2(30) NULL,
    AGREEMENT_NUMBER        VARCHAR2(30) NULL,
    AGREEMENT_ID            NUMBER(19)   NULL,
    ASIS_TAB                VARCHAR2(11) NULL,
    ASIS_PK_COL1            VARCHAR2(30) NULL,
    ASIS_PK_COL2            VARCHAR2(30) NULL,
    ASIS_PK_COL3            VARCHAR2(30) NULL,
    PARTY_ROLE_ID           NUMBER       NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_PLAN_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MAPKEY_TBL_PARTY_ROLE_HQI NOLOGGING;
----------------------------------------------------------------------------------------------------
DROP TABLE MIG_TBL_PARTY_ROLE_HQI_900 CASCADE CONSTRAINTS PURGE;

CREATE TABLE MIG_TBL_PARTY_ROLE_HQI_900
(
    ID                    NUMBER(19)    NOT NULL,
    CREATE_AT             TIMESTAMP(6)  NULL,
    CREATE_PRGM_ID        VARCHAR2(100) NULL,
    CREATOR_ID            VARCHAR2(100) NULL,
    CREATOR_IP            VARCHAR2(100) NULL,
    LAST_MODIFIED_AT      TIMESTAMP(6)  NULL,
    LAST_MODIFIED_PRGM_ID VARCHAR2(100) NULL,
    LAST_MODIFIER_ID      VARCHAR2(100) NULL,
    LAST_MODIFIER_IP      VARCHAR2(100) NULL,
    LOCK_NO               NUMBER(19)    NOT NULL,
    DESCRIPTION           VARCHAR2(255) NULL,
    EXTERNAL_REF          VARCHAR2(255) NULL,
    CONTEXT_DOMAIN_TYPE   VARCHAR2(255) NULL,
    CONTEXT_REFERENCE     VARCHAR2(255) NULL,
    PARTY_ROLE_TYPE_CODE  VARCHAR2(10)  NULL,
    PARTY_ID              NUMBER(19)    NULL,
    DOMAIN_PART_KEY       VARCHAR2(2)   NULL,
    PRODUCT_TYPE_CODE     VARCHAR2(10)  NULL,
    APP_TYPE              VARCHAR2(10)  NULL,
    KIND_ID               NUMBER(19)    NULL,   
    ASIS_TAB              VARCHAR2(100) NULL,
    ASIS_PK_COL1          VARCHAR2(100) NULL,
    ASIS_PK_COL2          VARCHAR2(100) NULL,
    ASIS_PK_COL3          VARCHAR2(100) NULL,
    VALD_DVSN_CODE        VARCHAR2(1)   NOT NULL,
    POLY_PLAN_NO          VARCHAR2(9)   NOT NULL
)
PARTITION    BY LIST (VALD_DVSN_CODE)
SUBPARTITION BY HASH (POLY_PLAN_NO) SUBPARTITIONS 64
(
   PARTITION VALID   VALUES('1'),
   PARTITION INVALID VALUES('2'),
   PARTITION DFLT    VALUES(DEFAULT)
)
TABLESPACE TSD_MIG03;
ALTER TABLE MIG_TBL_PARTY_ROLE_HQI_900 NOLOGGING;
----------------------------------------------------------------------------------------------------

======================================
00. FK목록추출_이정헌_20201029
-- FK DISABLE 
SELECT 'ALTER TABLE '||C.OWNER||'.'||C.TABLE_NAME||' DISABLE CONSTRAINT '||C.CONSTRAINT_NAME||' CASCADE;' AS SQL_TXT
  FROM DBA_CONSTRAINTS@DL_DICR C, DBA_TABLES@DL_DICR U
 WHERE 1=1
   AND C.TABLE_NAME=U.TABLE_NAME
   AND C.OWNER=U.OWNER
   AND C.OWNER IN ('HPACNT','HPAFIN','HPAPTY')
   AND C.CONSTRAINT_TYPE='R'
   AND C.STATUS='ENABLED'
--AND U.TABLE_NAME IN ('TBL_AGMT_PYMT_STATUS')
;

-- FK ENABLE
SELECT 'ALTER TABLE '||C.OWNER||'.'||C.TABLE_NAME||' ENABLE CONSTRAINT '||C.CONSTRAINT_NAME||';'    AS SQL_TXT
  FROM DBA_CONSTRAINTS@DL_DICR C, DBA_TABLES@DL_DICR U 
 WHERE 1=1
   AND C.TABLE_NAME=U.TABLE_NAME
   AND C.OWNER=U.OWNER
   AND C.OWNER IN ('HPACNT','HPAFIN','HPAPTY')
   AND C.CONSTRAINT_TYPE='R'
   AND C.STATUS='DISABLED'
--AND U.TABLE_NAME IN ('TBL_AGMT_PYMT_STATUS')
;

-- FK 관련 테이블, 컬럼 조회
SELECT C.OWNER
     , C.CONSTRAINT_NAME
  -- , C.TABLE_NAME
  -- , C.R_CONSTRAINT_NAME
     , F1.TABLE_NAME                                                                                AS CHILD_TABLE_NAME
     , F1.COLUMN_NAME                                                                               AS CHILD_COLUMN_NAME
     , C.R_OWNER
     , F2.TABLE_NAME                                                                                AS PARENT_TABLE_NAME
     , F2.COLUMN_NAME                                                                               AS PARENT_COLUMN_NAME
FROM   DBA_CONSTRAINTS@DL_DICR C, DBA_TABLES@DL_DICR U
     , DBA_CONS_COLUMNS@DL_DICR F1
     , DBA_CONS_COLUMNS@DL_DICR F2
WHERE 1=1
  AND C.TABLE_NAME        = U.TABLE_NAME
  AND C.OWNER             = U.OWNER
  AND C.OWNER             = F1.OWNER
  AND C.CONSTRAINT_NAME   = F1.CONSTRAINT_NAME
  AND C.R_OWNER           = F2.OWNER
  AND C.R_CONSTRAINT_NAME = F2.CONSTRAINT_NAME
  AND C.OWNER            IN ('HPACNT','HPAFIN','HPAPTY')
  AND C.CONSTRAINT_TYPE   = 'R'
  AND C.STATUS            = 'ENABLED'
--AND U.TABLE_NAME IN ('TBL_ACCT_TRAN_DATA_CMPS')
;

ALTER TABLE HPACNT.TBL_AGMT_BUNDLE_REL DISABLE CONSTRAINT FK_AGBDREL_AGMTANC_AGMTANCID CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_BUNDLE_REL DISABLE CONSTRAINT FK_AGBDREL_AGBD_AGBDID CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_BUNDLE_REL_STATUS DISABLE CONSTRAINT FK_AGBDRELST_AGBDREL_AGBDRLID CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_BUNDLE_STATUS DISABLE CONSTRAINT FK_AGMTBNDLST_AGMTBNDL_AGBDID CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_OPTION DISABLE CONSTRAINT FK_AGMT_OPT_AGMTANC_AGMTANCID CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_PYMT_STATUS DISABLE CONSTRAINT FK_AGPYMTST_AGMTANC_AGMTANCID CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_REL_STATUS DISABLE CONSTRAINT FK_AGMTRELST_AGMTREL_AGMTRELID CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_STATE_DTL_REL DISABLE CONSTRAINT FK_AGSTDTREL_AGSTDTR_AGSTDTRCD CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_STATE_DTL_REL DISABLE CONSTRAINT FK_AGSTDTREL_AGSTDT_AGSTDTCD CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_STATE_REL DISABLE CONSTRAINT FK_AGSTREL_AGSTDT_AGSTDTCD CASCADE;
ALTER TABLE HPACNT.TBL_AGMT_STATE_REL DISABLE CONSTRAINT FK_AGSTREL_AGST_AGSTCD CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT DISABLE CONSTRAINT FK_AGMT_KIND_KINDID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT DISABLE CONSTRAINT FK_AGMT_AGMTANC_AGMTANCID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT DISABLE CONSTRAINT FK_AGMT_AGMTST_AGMTSTCD CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT DISABLE CONSTRAINT FK_AGMT_AGMT_ORGPRNTAGMTID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT DISABLE CONSTRAINT FK_AGMT_AGMT_TRGAGMTID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_CHILD_REL DISABLE CONSTRAINT FK_AGMTCHLREL_AGMT_AGMTID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_CHILD_REL DISABLE CONSTRAINT FK_AGMTCHLREL_AGMT_PRNTAGMTID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_RIA_REL DISABLE CONSTRAINT FK_AGMTRIAREL_RIA_RIAID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_RIA_REL DISABLE CONSTRAINT FK_AGMTRIAREL_AGMT_AGMTID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_VERSION DISABLE CONSTRAINT FK_AGMTVER_AGMTVER_NXVDMJVERID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_VERSION DISABLE CONSTRAINT FK_AGMTVER_AGMTVER_NEXTVERID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_VERSION DISABLE CONSTRAINT FK_AGMTVER_AGMTVER_PRVDMJVERID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_VERSION DISABLE CONSTRAINT FK_AGMTVER_AGMTVER_PREVVERID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_VERSION DISABLE CONSTRAINT FK_AGMTVER_AGMTVER_RNSTVERID CASCADE;
ALTER TABLE HPACNT.TBL_AGREEMENT_VERSION DISABLE CONSTRAINT FK_AGMTVER_VRSNDAG_VRSNDAGID CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION DISABLE CONSTRAINT FK_APPL_AGMTANC_AGMTANCID CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION DISABLE CONSTRAINT FK_APPL_OPT_OPTID CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_PROPERTY DISABLE CONSTRAINT FK_APPLPROP_APPL_AIID CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_APPL_AIID CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID1 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID10 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID11 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID12 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID13 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID14 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID15 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID16 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID17 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID18 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID19 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID2 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID20 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID3 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID4 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID5 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID6 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID7 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID8 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_SET_PROPERTY DISABLE CONSTRAINT FK_APPLSETPROP_KIND_KINDID9 CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_TX DISABLE CONSTRAINT FK_APPLTX_APPLPROP_APDID CASCADE;
ALTER TABLE HPACNT.TBL_APPLICATION_TX DISABLE CONSTRAINT FK_APPLTX_APPLSETPROP_ASPDID CASCADE;
ALTER TABLE HPACNT.TBL_BUNDLE_COMPOSITION DISABLE CONSTRAINT FK_BNDCMPS_AGMTANC_AGMTANCID CASCADE;
ALTER TABLE HPACNT.TBL_CNTEVTPRC_REQCONT_REL DISABLE CONSTRAINT FK_CNTEVTPRC_REQCONT_REQCONTID CASCADE;
ALTER TABLE HPACNT.TBL_CNTEVTPRC_REQCONT_REL DISABLE CONSTRAINT FK_CNTEVTPRC_REQCONT_CTEVPRID CASCADE;
ALTER TABLE HPACNT.TBL_COL_PROPERTY DISABLE CONSTRAINT FK_COLPROP_AGMT_AGMTID CASCADE;
ALTER TABLE HPACNT.TBL_COL_PROPERTY DISABLE CONSTRAINT FK_COLPROP_REQ_REQID CASCADE;
ALTER TABLE HPACNT.TBL_COL_PROPERTY DISABLE CONSTRAINT FK_COLPROP_RIA_RIAID CASCADE;
ALTER TABLE HPACNT.TBL_CONTRACT_EVENT_STATUS DISABLE CONSTRAINT FK_CNTEVTST_CTEVPR_CTEVPRID CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID1 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID10 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID11 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID12 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID13 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID14 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID15 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID16 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID17 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID18 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID19 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID2 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID20 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID3 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID4 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID5 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID6 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID7 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID8 CASCADE;
ALTER TABLE HPACNT.TBL_DRFT_APPL_SET_PROP DISABLE CONSTRAINT FK_DRFAPPSETPROP_KIND_KINDID9 CASCADE;
ALTER TABLE HPACNT.TBL_IRA_FUND_DTL DISABLE CONSTRAINT FK_CNTFNDDTL_CNTFNDRA_IRAID CASCADE;
ALTER TABLE HPACNT.TBL_IRA_FUND_ITEM DISABLE CONSTRAINT FK_FNDITM_CNTFNDDTL_DTLID CASCADE;
ALTER TABLE HPACNT.TBL_PREMIUM_PLAN DISABLE CONSTRAINT FK_PREMPLN_AGMTANC_AGMTANCID CASCADE;
ALTER TABLE HPACNT.TBL_PREMIUM_PLAN_TX DISABLE CONSTRAINT FK_PREMPLNTX_PREMPLN_PREMPLNID CASCADE;
ALTER TABLE HPACNT.TBL_PRODUCT_CATEGORY DISABLE CONSTRAINT FK_PRODCAT_PROD_PSMCD CASCADE;
ALTER TABLE HPACNT.TBL_PROPERTY DISABLE CONSTRAINT FK_PROP_AGMT_AGMTID CASCADE;
ALTER TABLE HPACNT.TBL_PROPERTY DISABLE CONSTRAINT FK_PROP_KIND_KINDID CASCADE;
ALTER TABLE HPACNT.TBL_PROPERTY DISABLE CONSTRAINT FK_PROP_REQ_REQID CASCADE;
ALTER TABLE HPACNT.TBL_PROPERTY DISABLE CONSTRAINT FK_PROP_RIA_RIAID CASCADE;
ALTER TABLE HPACNT.TBL_RA_ANN_CALC_DTL DISABLE CONSTRAINT FK_ANNCALCDTL_ANNCALCRA_RAID CASCADE;
ALTER TABLE HPACNT.TBL_RA_FP_DTL DISABLE CONSTRAINT FK_CNTFPDTL_CNTFPRA_RAID CASCADE;
ALTER TABLE HPACNT.TBL_RA_PLCY_SUPP_DTL DISABLE CONSTRAINT FK_PLCYSUPPDTL_PLCYSUPPRA_RAID CASCADE;
ALTER TABLE HPACNT.TBL_RA_TX DISABLE CONSTRAINT FK_PLCSPTX_PLCSPDTL_PLCSPID CASCADE;
ALTER TABLE HPACNT.TBL_RA_TX DISABLE CONSTRAINT FK_ANCCTX_ANCCDTL_ANCCID CASCADE;
ALTER TABLE HPACNT.TBL_RA_TX DISABLE CONSTRAINT FK_CNTFPTX_CNTFPDTL_CNTFPID CASCADE;
ALTER TABLE HPACNT.TBL_RA_TX DISABLE CONSTRAINT FK_CNTFNDTX_CNTFNDDTL_FUNDID CASCADE;
ALTER TABLE HPACNT.TBL_REQUEST DISABLE CONSTRAINT FK_REQ_KIND_KINDID CASCADE;
ALTER TABLE HPACNT.TBL_REQUEST DISABLE CONSTRAINT FK_REQ_REQCNTNR_REQCNTNRID CASCADE;
ALTER TABLE HPACNT.TBL_REQUEST DISABLE CONSTRAINT FK_REQ_TLA_RSLTTLAID CASCADE;
ALTER TABLE HPACNT.TBL_REQUEST DISABLE CONSTRAINT FK_REQ_TLA_TRGTTLAID CASCADE;
ALTER TABLE HPACNT.TBL_REQUEST_LCS DISABLE CONSTRAINT FK_REQLCS_REQ_REQID CASCADE;
ALTER TABLE HPACNT.TBL_REQUEST_RIA_REL DISABLE CONSTRAINT FK_REQRIAREL_RIA_RIAID CASCADE;
ALTER TABLE HPACNT.TBL_REQUEST_RIA_REL DISABLE CONSTRAINT FK_REQRIAREL_REQ_REQID CASCADE;
ALTER TABLE HPACNT.TBL_ROLE_IN_ACTUAL DISABLE CONSTRAINT FK_RIA_KIND_KINDID CASCADE;
ALTER TABLE HPACNT.TBL_ROLE_IN_ACTUAL DISABLE CONSTRAINT FK_RIA_AGMT_ORGAGMTID CASCADE;
ALTER TABLE HPACNT.TBL_ROLE_IN_ACTUAL DISABLE CONSTRAINT FK_RIA_REQ_ORGREQID CASCADE;
ALTER TABLE HPACNT.TBL_ROLE_IN_ACTUAL DISABLE CONSTRAINT FK_RIA_RIA_TRGRIAID CASCADE;
ALTER TABLE HPACNT.TBL_RULE_RESULT DISABLE CONSTRAINT FK_RLRSL_AGMT_AGMTID CASCADE;
ALTER TABLE HPACNT.TBL_RULE_RESULT DISABLE CONSTRAINT FK_RLRSL_KIND_KINDID CASCADE;
ALTER TABLE HPACNT.TBL_RULE_RESULT DISABLE CONSTRAINT FK_RLRSL_REQ_REQID CASCADE;
ALTER TABLE HPACNT.TBL_RULE_RESULT_PARAM DISABLE CONSTRAINT FK_RLRSLPRM_RLRSL_RLRSLID CASCADE;
ALTER TABLE HPACNT.TBL_TLA_CHILD_REL DISABLE CONSTRAINT FK_TLACHLREL_TLA_TLAID CASCADE;
ALTER TABLE HPACNT.TBL_TLA_CHILD_REL DISABLE CONSTRAINT FK_TLACHLREL_TLA_PRNTTLAID CASCADE;
ALTER TABLE HPACNT.TBL_TOP_LEVEL_AGREEMENT DISABLE CONSTRAINT FK_TLA_AGMTVER_MJRAGMTVERID CASCADE;
ALTER TABLE HPACNT.TBL_TOP_LEVEL_AGREEMENT DISABLE CONSTRAINT FK_TLA_AGMTVER_AGMTVERID CASCADE;
ALTER TABLE HPACNT.TBL_TOP_LEVEL_AGREEMENT DISABLE CONSTRAINT FK_TLA_TLA_ORGPRNTTLAID CASCADE;
ALTER TABLE HPACNT.TBL_TOP_LEVEL_AGREEMENT DISABLE CONSTRAINT FK_TLA_AGMT_ID CASCADE;
ALTER TABLE HPACNT.TBL_VAO_PREM_COLL_VERSION DISABLE CONSTRAINT FK_PREMCOLLVER_PREMCOLL_VAOID CASCADE;
ALTER TABLE HPAFIN.TBL_ACCOUNT_ENTRY_RULE_STATUS DISABLE CONSTRAINT FK_MAE_AMR_ACCOUNTRULEID CASCADE;
ALTER TABLE HPAFIN.TBL_ACCOUNT_MAPP_PARA_VALUE DISABLE CONSTRAINT FK_ACCTMAPPARVAL_ACTTRTP_TYPCD CASCADE;
ALTER TABLE HPAFIN.TBL_ACCOUNT_MAPP_PARAMETER DISABLE CONSTRAINT FK_ACCTMAPPAR_ACTTRTP_TYPCD CASCADE;
ALTER TABLE HPAFIN.TBL_ACCT_TRAN_DATA_CMPS DISABLE CONSTRAINT FK_ACCTTRANDTCMP_ACTTRTP_TYPCD CASCADE;
ALTER TABLE HPAFIN.TBL_ACCT_TRAN_DATA_CMPS_STATUS DISABLE CONSTRAINT FK_MAE_AMR_ACCOUNTTRANCMPSID CASCADE;
ALTER TABLE HPAFIN.TBL_ACCT_TRAN_TYPE_STATUS DISABLE CONSTRAINT FK_ATS_AMR_ACCTTRNACODE CASCADE;
ALTER TABLE HPAFIN.TBL_ASSET_HOLDING_ACCOUNT DISABLE CONSTRAINT FK_AH_FA_FAID CASCADE;
ALTER TABLE HPAFIN.TBL_ASSET_HOLDING_STATUS DISABLE CONSTRAINT FK_AHS_AH_AHACTID CASCADE;
ALTER TABLE HPAFIN.TBL_ASSET_OPERATING_FEE DISABLE CONSTRAINT FK_AOF_FA_FAID CASCADE;
ALTER TABLE HPAFIN.TBL_ASSET_PRICE DISABLE CONSTRAINT FK_AP_FA_FAID CASCADE;
ALTER TABLE HPAFIN.TBL_BALANCE_ENTRY DISABLE CONSTRAINT FK_UBE_AH_AHCTID CASCADE;
ALTER TABLE HPAFIN.TBL_DIVIDEND_PAYMENT_DETAIL DISABLE CONSTRAINT FK_DIVDPAYMDTL_PAYMC_PARCID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_ASSET DISABLE CONSTRAINT FK_FUND_MACT_FPACTID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_ASSET DISABLE CONSTRAINT FK_FUND_MACT_FRACTID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_ASSET DISABLE CONSTRAINT FK_FUND_AHACT_FUTACTID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PAYM_FRPAYMID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PAYMD_FRPAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PREMP_FRPREMPID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PPAYMD_FRPPAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PAYM_TOPAYMID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PAYMD_TOPAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PREMP_TOPREMPID CASCADE;
ALTER TABLE HPAFIN.TBL_FIN_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_FINREL_PPAYMD_TOPPAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_INV_TRAN DISABLE CONSTRAINT FK_INVT_FA_FAID CASCADE;
ALTER TABLE HPAFIN.TBL_INV_TRAN DISABLE CONSTRAINT FK_INVT_MS_MISID CASCADE;
ALTER TABLE HPAFIN.TBL_INV_TRAN DISABLE CONSTRAINT FK_INVT_MS_MOSID CASCADE;
ALTER TABLE HPAFIN.TBL_INV_TRAN DISABLE CONSTRAINT FK_INVT_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_INV_TRAN DISABLE CONSTRAINT FK_INVT_MSE_MSEID CASCADE;
ALTER TABLE HPAFIN.TBL_INV_TRAN_STATUS DISABLE CONSTRAINT FK_INVTS_INVT_INVTID CASCADE;
ALTER TABLE HPAFIN.TBL_MONETARY_ACCOUNT_STATUS DISABLE CONSTRAINT FK_MAS_MA_MONETARYACCOUNTID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV DISABLE CONSTRAINT FK_MP_MPA_MPAID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV DISABLE CONSTRAINT FK_MP_MS_MSID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV DISABLE CONSTRAINT FK_ACB_MA_ACCOUNTID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV_ELEMENT DISABLE CONSTRAINT FK_MPE_PARMP_PARMPID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV_RELATIONSHIP DISABLE CONSTRAINT FK_MPREL_MP_FRMPID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV_RELATIONSHIP DISABLE CONSTRAINT FK_MPREL_MP_TOMPID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV_ROLE DISABLE CONSTRAINT FK_MPROLE_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_PROV_STATUS DISABLE CONSTRAINT FK_MPST_MP_MPSTID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_SCHEDULER_EXECUTION DISABLE CONSTRAINT FK_MSEXE_MS_MSID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_SCHEDULER_SCHED_DATE DISABLE CONSTRAINT FK_SCHDT_MS_MSID CASCADE;
ALTER TABLE HPAFIN.TBL_MONEY_SCHEDULER_STATUS DISABLE CONSTRAINT FK_MSST_MS_MSID CASCADE;
ALTER TABLE HPAFIN.TBL_MONTHLY_FIN_STATUS DISABLE CONSTRAINT FK_MNTFINST_MNTFINFR_MNTFINID CASCADE;
ALTER TABLE HPAFIN.TBL_MONTHLY_FINFR_RESERVE DISABLE CONSTRAINT FK_MFR_MS_MISID CASCADE;
ALTER TABLE HPAFIN.TBL_MONTHLY_FINFR_RESERVE DISABLE CONSTRAINT FK_MFR_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_MONTHLY_FINFR_RESERVE DISABLE CONSTRAINT FK_MFR_MSE_MSEID CASCADE;
ALTER TABLE HPAFIN.TBL_MONTHLY_FINREV_COMP DISABLE CONSTRAINT FK_MFRCMP_MFRCMP_MFRCMPID CASCADE;
ALTER TABLE HPAFIN.TBL_MONTHLY_FINREV_COMP DISABLE CONSTRAINT FK_MFRCMP_MFR_MFRID CASCADE;
ALTER TABLE HPAFIN.TBL_MS_ATTACHED_STATUS DISABLE CONSTRAINT FK_MSAST_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT DISABLE CONSTRAINT FK_PAYM_MS_MISID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT DISABLE CONSTRAINT FK_PAYM_MS_MOSID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT DISABLE CONSTRAINT FK_PAYM_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT DISABLE CONSTRAINT FK_PAYM_MSE_MSEID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT DISABLE CONSTRAINT FK_PAYM_PAYMP_PAYMPID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_COMP DISABLE CONSTRAINT FK_PAYMC_PAYMC_PARCID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_COMP DISABLE CONSTRAINT FK_PAYMC_PAYM_PAYMID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_COMP_ELEMENT DISABLE CONSTRAINT FK_PAYMCE_PAYMC_PAYMCID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE DISABLE CONSTRAINT FK_PAYMD_MS_MOSID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE DISABLE CONSTRAINT FK_PAYMD_MS_MISID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE DISABLE CONSTRAINT FK_PAYMD_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE DISABLE CONSTRAINT FK_PAYMD_MSE_MSEID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE DISABLE CONSTRAINT FK_PAYMD_PAYMP_PAYMPID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE_COMP DISABLE CONSTRAINT FK_PAYMDC_PAYMDC_PARCID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE_COMP DISABLE CONSTRAINT FK_PAYMDC_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE_COMP DISABLE CONSTRAINT FK_PAYMDC_PAYMD_PAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE_COMP_ELEMENT DISABLE CONSTRAINT FK_PAYMDCE_PAYDC_PAYDCID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE_ELEMENT DISABLE CONSTRAINT FK_PAYMDE_PAYMD_PAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_DUE_STATUS DISABLE CONSTRAINT FK_PAYMDST_PAYMD_PAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_ELEMENT DISABLE CONSTRAINT FK_PAYME_PAYM_PAYMID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_PROCESSING_STATUS DISABLE CONSTRAINT FK_PPRST_PPR_PPRID CASCADE;
ALTER TABLE HPAFIN.TBL_PAYMENT_STATUS DISABLE CONSTRAINT FK_PAYMST_PAYM_PAYMID CASCADE;
ALTER TABLE HPAFIN.TBL_POLICY_LOAN_COMP DISABLE CONSTRAINT FK_PLC_PL_PLOANID CASCADE;
ALTER TABLE HPAFIN.TBL_POLICY_LOAN_COMP_VERSION DISABLE CONSTRAINT FK_PLOANCPVER_PLOANCPID CASCADE;
ALTER TABLE HPAFIN.TBL_POLICY_LOAN_PAYMENT DISABLE CONSTRAINT FK_PLOANPAY_PAYMP_PAYMPID CASCADE;
ALTER TABLE HPAFIN.TBL_POLICY_LOAN_VERSION DISABLE CONSTRAINT FK_PLOANVER_PLOANID CASCADE;
ALTER TABLE HPAFIN.TBL_POLOAN_PAYM_COMP_ELEMENT DISABLE CONSTRAINT FK_PLAPCE_PLAPC_PLAPCID CASCADE;
ALTER TABLE HPAFIN.TBL_POLOAN_PAYM_STATUS DISABLE CONSTRAINT FK_PLPAYSTATUS_PLPAYM_PLPAYMID CASCADE;
ALTER TABLE HPAFIN.TBL_POLOAN_PAYMENT_COMP DISABLE CONSTRAINT FK_PLPMTCMP_PLPMTCMP_PRNTCMPID CASCADE;
ALTER TABLE HPAFIN.TBL_POLOAN_PAYMENT_COMP DISABLE CONSTRAINT FK_PLPAYMCMP_PLPMT_PLPMTID CASCADE;
ALTER TABLE HPAFIN.TBL_POLOAN_PAYMENT_ELEMENT DISABLE CONSTRAINT FK_PLOANPE_PLPAYM_PLOANPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT DISABLE CONSTRAINT FK_PREMPAY_MS_MISID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT DISABLE CONSTRAINT FK_PREMPAY_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT DISABLE CONSTRAINT FK_PREMPAY_MSE_MSEID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT DISABLE CONSTRAINT FK_PREMPAY_PAYMP_PAYMPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_COMP DISABLE CONSTRAINT FK_PRPMTCMP_PRPMTCMP_PRNTCMPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_COMP DISABLE CONSTRAINT FK_PRPMTCMP_MNPROV_MNPROVID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_COMP DISABLE CONSTRAINT FK_PRPMTCMP_PRPMT_PRPMTID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_COMP_ELEMENT DISABLE CONSTRAINT FK_PREMPCE_PREPC_PREPCID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE DISABLE CONSTRAINT FK_PPAYMD_MS_MISID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE DISABLE CONSTRAINT FK_PPAYMD_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE DISABLE CONSTRAINT FK_PPAYMD_MSE_MSEID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE DISABLE CONSTRAINT FK_PPAYMD_PAYMP_PAYMPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE_COMP DISABLE CONSTRAINT FK_PPAYMDC_PPAYMDC_PARCID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE_COMP DISABLE CONSTRAINT FK_PPAYMDC_MP_MPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE_COMP DISABLE CONSTRAINT FK_PPAYMDC_PPAYMD_PPAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE_ELEMENT DISABLE CONSTRAINT FK_PPAYMDE_PPAYMD_PPAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_DUE_STATUS DISABLE CONSTRAINT FK_PPAYMDST_PPAYMD_PPAYMDID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_ELEMENT DISABLE CONSTRAINT FK_PREMPE_PREMP_PREMPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREM_PAYMENT_STATUS DISABLE CONSTRAINT FK_PREMPAYST_PREMP_PREMPID CASCADE;
ALTER TABLE HPAFIN.TBL_PREMPAYM_DUE_COMP_ELEMENT DISABLE CONSTRAINT FK_PPAYMDCE_PPAYDC_PPAYDCID CASCADE;
ALTER TABLE HPAFIN.TBL_PUEN_PAYMENT_CALC DISABLE CONSTRAINT FK_PUENPC_PAYM_PAYMID CASCADE;
ALTER TABLE HPAFIN.TBL_PUEN_PAYMENT_CALC DISABLE CONSTRAINT FK_PUENPC_PUEN_PUENPID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_ACCOUNT_ENTRY DISABLE CONSTRAINT FK_UAE_AHSCT_AHACTID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_ACCOUNT_ENTRY DISABLE CONSTRAINT FK_UAE_UAE_OPPACTEID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_ACCOUNT_ENTRY DISABLE CONSTRAINT FK_UAE_UNITTR_UNITTRID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_INV_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_UNITINVREL_INVTR_INVTRID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_INV_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_UNITINVREL_UTR_UTRID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_TRAN DISABLE CONSTRAINT FK_UNITTRN_FINASS_UNTRFINASSID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_TRAN DISABLE CONSTRAINT FK_UNITTRN_ASSHLD_UNTRSRCID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_TRAN DISABLE CONSTRAINT FK_UNITTRN_ASSHLD_UNTRTRGTID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_UNITTRREL_UTR_FRUTRID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_TRAN_RELATIONSHIP DISABLE CONSTRAINT FK_UNITTRREL_UTR_TOUTRID CASCADE;
ALTER TABLE HPAFIN.TBL_UNIT_TRAN_STATUS DISABLE CONSTRAINT FK_UNITTRNST_UNITTRN_UNITTRNID CASCADE;
ALTER TABLE HPAFIN.TBL_WITHHOLDING_TAX DISABLE CONSTRAINT FK_WHTAX_OGPAY_OGPAYID CASCADE;
ALTER TABLE HPAFIN.TBL_WITHHOLDING_TAX DISABLE CONSTRAINT FK_WHTAX_OGPAY_TAXRFPAYID CASCADE;
ALTER TABLE HPAFIN.TBL_WITHHOLDING_TAX_DUE DISABLE CONSTRAINT FK_WHTAXD_PAYD_PAYDID CASCADE;
ALTER TABLE HPAPTY.TBL_CONTACT_POINT DISABLE CONSTRAINT FK_CNTPT_PTY_PTYID CASCADE;
ALTER TABLE HPAPTY.TBL_CONTACT_POINT_AND_PREF DISABLE CONSTRAINT FK_CNTPTPRF_CNTPT_CNTPTID CASCADE;
ALTER TABLE HPAPTY.TBL_CONTACT_POINT_AND_PREF DISABLE CONSTRAINT FK_CNTPTPRF_CNTPRF_CNTPRFID CASCADE;
ALTER TABLE HPAPTY.TBL_CONTACT_PREF DISABLE CONSTRAINT FK_CNTPRF_PTY_PTYID CASCADE;
ALTER TABLE HPAPTY.TBL_CONTACT_PREF DISABLE CONSTRAINT FK_CNTPRF_PRSN_PRFPRSNID CASCADE;
ALTER TABLE HPAPTY.TBL_CONTACT_PREF DISABLE CONSTRAINT FK_CNTPRF_PTYNM_PRFNMID CASCADE;
ALTER TABLE HPAPTY.TBL_ORGANISATION DISABLE CONSTRAINT FK_ORG_PTY_ID CASCADE;
ALTER TABLE HPAPTY.TBL_ORGANISATION_MEMBER DISABLE CONSTRAINT FK_ORGMEM_PRSN_PRSID CASCADE;
ALTER TABLE HPAPTY.TBL_ORGANISATION_MEMBER DISABLE CONSTRAINT FK_ORGMEM_ORG_ORGID CASCADE;
ALTER TABLE HPAPTY.TBL_PARENT_ORGANISATION DISABLE CONSTRAINT FK_ORG_ORG_CHILDID CASCADE;
ALTER TABLE HPAPTY.TBL_PARENT_ORGANISATION DISABLE CONSTRAINT FK_ORG_ORG_PARENTID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_BI_TEMP_TX DISABLE CONSTRAINT FK_PTYTX_CNTPT_CNTPTID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_BI_TEMP_TX DISABLE CONSTRAINT FK_PTYTX_CNTPRF_CNTPRFID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_BI_TEMP_TX DISABLE CONSTRAINT FK_PTYTX_PTYNM_PTYNMID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_BI_TEMP_TX DISABLE CONSTRAINT FK_PTYTX_PTYREG_PTYREGID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_BI_TEMP_TX DISABLE CONSTRAINT FK_PTYTX_RLPLREL_RELID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_NAME DISABLE CONSTRAINT FK_PTYNM_PTY_PTYID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_REGISTRATION DISABLE CONSTRAINT FK_PTYREG_PTY_PTYID CASCADE;
ALTER TABLE HPAPTY.TBL_PARTY_ROLE DISABLE CONSTRAINT FK_PTYRL_PTY_PTYID CASCADE;
ALTER TABLE HPAPTY.TBL_PERSON DISABLE CONSTRAINT FK_PRSN_PTY_ID CASCADE;
ALTER TABLE HPAPTY.TBL_ROLE_PLAYER_RELATIONSHIP DISABLE CONSTRAINT FK_RLPLREL_PTY_PTYID CASCADE;
ALTER TABLE HPAPTY.TBL_RP_RELATIONSHIP_MEMBER DISABLE CONSTRAINT FK_RLPLRELMEM_PTY_RELFROMID CASCADE;
ALTER TABLE HPAPTY.TBL_RP_RELATIONSHIP_MEMBER DISABLE CONSTRAINT FK_RLPLRELMEM_PTY_RELTOID CASCADE;
ALTER TABLE HPAPTY.TBL_RP_RELATIONSHIP_MEMBER DISABLE CONSTRAINT FK_RLPLRELMEM_RLPLREL_RELID CASCADE;
===============================
00. HPAS_MIG_LIST 생성

DROP TABLE MIG_HPAS_LIST CASCADE CONSTRAINTS PURGE;
CREATE TABLE MIG_HPAS_LIST
(
    SUBJECT    VARCHAR2(100),
    TABLE_ID   VARCHAR2(255),
    TABLE_NAME VARCHAR2(255),
    MIG_YN     VARCHAR2(100),
    MIG_TOOL   VARCHAR2(100),
    MIG_MAN    VARCHAR2(255),
    ETC        VARCHAR2(255)
);

ALTER TABLE MIG_HPAS_LIST NOLOGGING;

TRUNCATE TABLE MIG_HPAS_LIST; COMMIT; 

INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_PYMT_STATUS','계약납입상태','Y','ETL','윤병천->박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGREEMENT','계약(Agreement)','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGREEMENT_ANCHOR','계약(Agreement)의 Anchor','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_REL','계약간관계','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_APPLICATION','신청정보','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_APPLICATION_PROPERTY','신청정보상세','Y','ETL','윤병천->김성민->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_COL_PROPERTY','고정속성','Y','ETL','윤병천->김성민->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_BUNDLE_COMPOSITION','판매상품번들(Bundle)구성','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_DIVIDEND_PAYMENT_DETAIL','배당지급상세','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_FIN_TRAN_RELATIONSHIP','입출금 거래간관계','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_IRA','Role Anchor (다중)','Y','ETL','윤병천->이정헌->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_IRA_FUND_DTL','펀드','Y','ETL','윤병천->이정헌->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_IRA_FUND_ITEM','펀드항목','Y','ETL','윤병천->이정헌->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONEY_PROV','머니프로비젼','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONEY_PROV_ANCHOR','머니프로비젼 앵커','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONEY_PROV_ELEMENT','머니프로비젼 항목','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONEY_PROV_STATUS','머니프로비젼 상태','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONEY_SCHEDULER','입출금 스케쥴러','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONEY_SCHEDULER_STATUS','입출금 스케쥴러 상태','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONTHLY_FINFR_RESERVE','월대체','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONTHLY_FIN_STATUS','월대체 상태','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONTHLY_FINREV_COMP','상품별월대체','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PAYMENT','입출금','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PAYMENT_COMP','상품별 입출금','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PAYMENT_COMP_ELEMENT','상품별 입출금 항목','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_DUE','입출금예정','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_DUE_COMP','상품별 입출금예정','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREMPAYM_DUE_COMP_ELEMENT','상품별 입출금예정 항목','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_DUE_ELEMENT','입출금예정 항목','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PAYMENT_ELEMENT','입출금 항목','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PAYMENT_PROCESSING','입출금처리','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PAYMENT_PROCESSING_STATUS','입출금처리 상태','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PAYMENT_STATUS','입출금상태','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_PREMIUM_PLAN','납입제도','Y','ETL','윤병천->박란영->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT','보험료입금','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_ELEMENT','보험료입금 항목','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_STATUS','보험료입금 상태','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_PROPERTY','속성','Y','ETL','윤병천->김성민->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_RA_ANN_CALC_DTL','연금산출','Y','ETL','윤병천->이정헌->한정인','보류(연금급부)') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_RA_FP_DTL','계약FP','Y','ETL','윤병천->이정헌->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_RA_PLCY_SUPP_DTL','계약부속정보','Y','ETL','윤병천->이정헌->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_ROLE_IN_ACTUAL','Role의 Actual데이터','Y','ETL','윤병천->이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_TOP_LEVEL_AGREEMENT','계약(TopLevelAgreement) (HPS의 단위상품 기준)','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_VAO_PREM_COLL','수금정보','Y','ETL','윤병천->박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_VAO_PREM_COLL_VERSION','수금정보 이력','Y','ETL','윤병천->박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_WITHHOLDING_TAX','원천세','Y','ETL','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_STATE','계약상태','Y','파일업로드','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_STATE_DTL','계약상태상세','Y','파일업로드','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_STATE_DTL_REASON','계약상태상세사유','Y','파일업로드','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_STATE_DTL_REL','계약상태상세의 상태상세사유(관계 테이블)','Y','파일업로드','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_STATE_REL','계약상태의 상태상세(관계 테이블)','Y','파일업로드','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_REL_STATUS','계약간관계상태','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGREEMENT_VERSION','계약버전','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_APPLICATION_TX','신청정보처리이력','Y','ETL','윤병천->김성민->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_KIND','Kind(상품기반 Actual의 식별자, HPS에서 정의)','Y','파일업로드','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_PREMIUM_PLAN_TX','납입제도처리 이력','Y','ETL','윤병천->김성민->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_RA','Role Anchor','Y','ETL','윤병천->이정헌->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_RA_TX','RoleAnchor 처리이력','Y','ETL','윤병천->김성민->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_REQUEST','요청(Request)','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_REQUEST_CONTAINER','계약기준의 Request의 묶음 관리','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_REQUEST_LCS','Request의 상태이력','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_TLA_CHILD_REL','계약과 가입상품간의 관계 (parent child 구조)','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_VERSIONED_AGREEMENT','계약버전의 묶음 관리','Y','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCOUNT_ENTRY_RULE','분개규칙','Y','ETL','이정헌->한정인','재무HUB') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCOUNT_ENTRY_RULE_STATUS','분개규칙 상태','Y','파일업로드','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCOUNT_MAPP_PARAMETER','분개조건','Y','ETL','이정헌->한정인','재무HUB') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCOUNT_MAPP_PARA_VALUE','분개조건 값','Y','ETL','이정헌->한정인','재무HUB') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCOUNT_TRANSACTION_TYPE','거래유형','Y','ETL','이정헌->한정인','재무HUB') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCT_TRAN_DATA_CMPS','거래 레이아웃정보','Y','ETL','이정헌->한정인','재무HUB') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCT_TRAN_DATA_CMPS_STATUS','거래 레이아웃정보 상태','Y','파일업로드','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_ACCT_TRAN_TYPE_STATUS','거래유형 상태','Y','파일업로드','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONETARY_ACCOUNT','계정과목','Y','파일업로드','이정헌->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MONETARY_ACCOUNT_STATUS','계정과목 상태','Y','파일업로드','이정헌','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_MS_ATTACHED_STATUS','입출금 스케쥴러 첨부상태','N','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_DUE_STATUS','입출금예정 상태','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_POLICY_LOAN','보험계약대출','N','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_POLICY_LOAN_PAYMENT','보험계약대출 입출금','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_POLICY_LOAN_VERSION','보험계약대출 이력','N','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_POLOAN_PAYMENT_ELEMENT','보험계약대출 입출금 항목','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_POLOAN_PAYM_STATUS','보험계약대출 입출금 상태','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_COMP','상품별 보험료입금','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('입출금','TBL_PREM_PAYMENT_COMP_ELEMENT','상품별 보험료입금 항목','Y','ETL','박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_PARTY_ROLE','당사자 역할','Y','ETL','윤병천->박란영','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_BUNDLE','Agreement묶음','N','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_BUNDLE_REL','Agreement묶음관계','N','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_BUNDLE_REL_STATUS','Agreement묶음관계상태','N','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_BUNDLE_STATUS','Agreement묶음상태','N','ETL','윤병천','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGMT_OPTION','Agreement제도','Y','ETL','윤병천->김성민->한정인','보류(연금급부)') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_APPLICATION_SET_PROPERTY','세트신청정보속성','Y','ETL','윤병천->박란영->한정인','') ; COMMIT;
INSERT INTO MIG_HPAS_LIST(SUBJECT,TABLE_ID,TABLE_NAME,MIG_YN,MIG_TOOL,MIG_MAN,ETC) VALUES('계약','TBL_AGREEMENT_RIA_REL','Agreement_RIA관계','Y','ETL','이정헌','') ; COMMIT;


======================
00. Procedure생성 

아래의 sql을 참고하여서 프로시져를 생성하시기 바랍니다.
 

-- 1. Procedure 생성문 조회 SQL
SELECT A.OWNER, A.NAME, A.LINE, A.TEXT
     , CASE WHEN LINE = 1
            THEN 'CREATE OR REPLACE '||REPLACE(REPLACE(A.TEXT,CHR(10)),CHR(13))
            WHEN LINE = (SELECT MAX(LINE) FROM ALL_SOURCE X WHERE A.OWNER = X.OWNER AND A.NAME = X.NAME GROUP BY NAME)
            THEN REPLACE(REPLACE(A.TEXT,CHR(10)),CHR(13))||CHR(13)||'/'
            ELSE REPLACE(REPLACE(A.TEXT,CHR(10)),CHR(13))
       END AS MODIFY_TEXT
FROM   ALL_SOURCE A
WHERE  1 = 1
AND    OWNER = 'MIG01'  /* <------오너 확인 필요 ----*/
AND    NAME IN
      (
       SELECT X.SESSION_NAME
       FROM   MIG_INFA_SESS_CONFIG X
       WHERE  1=1
       AND    X.WORKFLOW_ID > 0
       AND    X.SUBJECT_AREA = 'U01.TRN_HPS_01'
       AND    X.WORKFLOW_NAME IN ('wf_MIG_HPAS_HPA', 'wf_MIG_HPAS_HQI', 'wf_MAPKEY_HPAS_HQI')
       AND    X.WORKLET_NAME  LIKE '%MIG_DATA_VERIFICATION%'
      )
AND    NAME LIKE '%MIG_DATA_VERIFICATION_043%'
;

=======================================
INFA작업 모니터링(이정헌)
-- DMIG DB의 MIG02에서 수행하시면 됩니다.
 

WITH WI_VERF AS
(
 SELECT  A.*
       , ROW_NUMBER() OVER(PARTITION BY A.TOBE_TAB, A.VRFC_GBN ORDER BY A.VRFC_DT DESC) RN
 FROM    CMMASV.MIG_DATA_VERIFICATION@DL_DMIG A
 WHERE   1=1
 AND     A.VRFC_GBN IN ('집합검증', '중복검증')
 AND     A.VRFC_DT >= TO_DATE('20201102', 'YYYYMMDD')
)
SELECT A.시스템
     , B.SUBJ_NAME
     , CASE WHEN A.시스템 = '코어솔루션'
            THEN CASE WHEN SUBSTR(A.ID, -3) = 'HQI' THEN 'HQI' ELSE 'HPA' END
       END AS HPAS_GBN
     , A.ID                            AS TABLE_NM
     , A.명                             AS TABLE_HNM
     , TO_CHAR(A.계획시작일, 'YYYY-MM-DD') AS 계획시작일
     , TO_CHAR(A.계획종료일, 'YYYY-MM-DD') AS 계획종료일
     , TO_CHAR(B.START_TIME, 'YYYY-MM-DD')  AS 실적시작일
     , TO_CHAR(B.END_TIME, 'YYYY-MM-DD')    AS 실적종료일
     , A.작업자
     , CASE WHEN B.RESULT  = 'SUCCEEDED' THEN '2.성공'
            WHEN B.RESULT  = 'FAILD'     THEN '3.실패'
            WHEN B.END_TIME IS NOT NULL AND NVL(B.RESULT, 'RUNNING') = 'RUNNING'
            THEN '1.수행중'
            WHEN B.END_TIME IS NULL     AND B.RESULT IS NULL
            THEN '4.미수행'
       END                                                  AS 성공여부
     , B.ERR_JOB_CNT                                        AS 실패작업건수
     , B.SUCCESSFUL_ROWS                                    AS 성공건수
     , ROUND(B.DULATION_TIME*60*60*24)                      AS 전체작업시간_초
     , TRUNC(B.DULATION_TIME)                               AS 전체작업시간_DAY
     , LPAD(TRUNC(MOD(B.DULATION_TIME, 1)*24), 2, '0')||':'||
       LPAD(TRUNC(MOD(B.DULATION_TIME*24, 1)*60), 2, '0')||':'||
       LPAD(TRUNC(MOD(B.DULATION_TIME*24*60, 1)*60), 2, '0')     AS 전체작업시간
     , ROUND(B.DULATION*60*60*24)                                AS 프로그램수행시간_초
     , LPAD(TRUNC(MOD(B.DULATION, 1)*24), 2, '0')||':'||
       LPAD(TRUNC(MOD(B.DULATION*24, 1)*60), 2, '0')||':'||
       LPAD(TRUNC(MOD(B.DULATION*24*60, 1)*60), 2, '0')          AS 프로그램수행시간
     , B.ASIS_VAL, B.TOBE_VAL
     , B.집합검증정상여부
     , B.중복검증정상여부
     , B.RI검증정상여부
     , B.START_TIME, B.END_TIME
FROM   CMMASV.MIG_TBL_TAR_PMS@DL_DMIG A -- 3038
     , (
        SELECT A.*, B.ASIS_VAL, B.TOBE_VAL
             , CASE WHEN B.ASIS_VAL = B.TOBE_VAL THEN 'Y' 
                    WHEN B.ASIS_VAL <> B.TOBE_VAL THEN 'N' 
               END AS 집합검증정상여부
             , CASE WHEN C.TOBE_VAL = 0 THEN 'Y'
                    WHEN C.TOBE_VAL > 0 THEN 'N'
               END AS 중복검증정상여부
             , CASE WHEN (SELECT SUM(S1.TOBE_VAL)   AS TOBE_VAL
                          FROM   CMMASV.MIG_DATA_VERIFICATION@DL_DMIG S1
                          WHERE  1=1
                          AND    S1.VRFC_GBN = 'RI검증'
                          AND    S1.VRFC_NM LIKE '[FK]%'
                          AND    S1.TOBE_TAB = A.TOBE_TAB
                          AND    S1.VRFC_DT >= A.START_TIME
                         ) = 0 THEN 'Y'
               END AS RI검증정상여부
        FROM  (
               SELECT  A.SUBJ_NAME
                     , A.TOBE_TAB
                     , MIN(A.RESULT) AS RESULT
                     , MIN(A.START_TIME) AS START_TIME
                     , MAX(A.END_TIME)   AS END_TIME
                     , (MAX(A.END_TIME) - MIN(A.START_TIME))*60*60*24         AS DULATION_TIME_SS
                     , (MAX(A.END_TIME) - MIN(A.START_TIME))*60*24            AS DULATION_TIME_MI
                     , (MAX(A.END_TIME) - MIN(A.START_TIME))                  AS DULATION_TIME
                     , SUM(A.DULATION)                                        AS DULATION
                     , MIN(A.SUCCESSFUL_ROWS)                                 AS SUCCESSFUL_ROWS
                     , SUM(A.ERR_JOB_CNT)                                     AS ERR_JOB_CNT
               FROM
                      (
                       SELECT  /*+ PARALLEL(A,4) */
                               A.SUBJ_NAME, A.WORKFLOW_RUN_ID, A.SESSION_ID, A.TABLE_NAME, A.SESSION_NAME, A.WORKLET_NAME
                             , A.START_TIME
                             , CASE WHEN TO_CHAR(A.END_TIME, 'YYYYMMDD') = '29991231' THEN SYSDATE
                                    ELSE A.END_TIME
                               END                                                                  AS END_TIME
                             , CASE WHEN TO_CHAR(A.END_TIME, 'YYYYMMDD') = '29991231' THEN SYSDATE
                                    ELSE A.END_TIME
                               END - A.START_TIME                                                   AS DULATION
                             , CASE WHEN A.TABLE_NAME LIKE 'TBL%'     THEN A.RESULT
                                    WHEN A.TABLE_NAME LIKE 'ETL_TBL%' THEN A.RESULT
                               END                                                                  AS RESULT
                             , CASE WHEN A.RESULT = 'FAILD' THEN 1 END                              AS ERR_JOB_CNT
                             , A.DURATION
                             , CASE WHEN A.TABLE_NAME LIKE 'TBL%'     THEN A.SUCCESSFUL_ROWS
                                    WHEN A.TABLE_NAME LIKE 'ETL_TBL%' THEN A.SUCCESSFUL_ROWS
                               END                                                                  AS SUCCESSFUL_ROWS
                             , CASE WHEN A.SUBJ_NAME LIKE 'U0%'                                                                    -- HPAS
                                    THEN SUBSTR(A.WORKLET_NAME, INSTR(A.WORKLET_NAME, 'TBL'))
                                    ELSE SUBSTR(A.WORKLET_NAME, INSTR(A.WORKLET_NAME, 'TBL'), 14)                                  -- HPAS 外
                               END                                                                  AS TOBE_TAB
                       FROM    CMMASV.MIG_INFA_LOG@DL_DMIG A
                       WHERE   1 = 1
                       AND     A.WORKLET_NAME NOT LIKE '%wl_QUL%'
                       AND     CASE WHEN A.WORKFLOW_NAME LIKE 'wf_MAPKEY%'
                                    THEN 1
                                    WHEN A.WORKFLOW_NAME LIKE 'wf_MIG%'
                                    THEN 1
                                    WHEN A.WORKFLOW_NAME LIKE 'wf_ETL%'
                                    THEN 1
         WHEN A.WORKFLOW_NAME LIKE 'wf_TEST%'
                                    THEN 1
                               END = 1
                       /* 결과 확인시 수정해야함 */
                       AND     A.START_TIME >= TO_DATE('20210217010101', 'YYYYMMDDHH24MISS')                                      -- 과거에 수행한 이력은 제외
                       AND     A.START_TIME <= TO_DATE('20210217235959', 'YYYYMMDDHH24MISS')                                      -- 과거에 수행한 이력은 제외
                       AND     A.DB_NAME     = 'PDNA'
                       AND     A.USER_NAME   = 'MIG02'
                      ) A
               WHERE  1 = 1
               GROUP BY A.SUBJ_NAME, A.TOBE_TAB--, A.WORKLET_NAME, A.WORKFLOW_RUN_ID
               ) A
             , WI_VERF B
             , WI_VERF C
        WHERE   1 = 1
        AND     A.TOBE_TAB      = B.TOBE_TAB(+)
        AND     A.START_TIME   <= B.VRFC_DT (+)
        AND     B.VRFC_GBN(+)   = '집합검증'
        AND     B.RN(+)         = 1
        AND     A.TOBE_TAB      = C.TOBE_TAB(+)
        AND     A.START_TIME   <= C.VRFC_DT (+)
        AND     C.VRFC_GBN(+)   = '중복검증'
        AND     C.RN(+)         = 1
        ) B
WHERE   1 = 1
AND     A.ID      = B.TOBE_TAB(+)
AND     A.TBL_GBN = 'PMS'
AND     A.시스템    = '코어솔루션'
AND     A.등록상태  != '삭제'
--AND     A.ID = 'TBL_CTCCCPBCDL'
--ORDER BY 시스템, 작업자, 계획시작일, 상세공정ID
AND     CASE WHEN SUBSTR(A.ID, -3) = 'HQI' THEN 'HQI' ELSE 'HPA' END = 'HPA'
ORDER BY 시스템, 11, B.START_TIME, A.ID
;

 
====================================
MIG_DATA_VERIFICATION_042
CREATE OR REPLACE PROCEDURE MIG02.MIG_PRC_MIG_DATA_VERIFICATION_042 (
   I_WORKFLOW_RUN_ID   NUMBER      DEFAULT NULL,     -- INFA 워크플로우실행ID
   I_SESSION_NAME      VARCHAR2    DEFAULT NULL,     -- INFA 세션명
   I_PARAM3            VARCHAR2    DEFAULT NULL,     -- PARAMETER3
   I_PARAM4            VARCHAR2    DEFAULT NULL,     -- PARAMETER4
   I_PARAM5            VARCHAR2    DEFAULT NULL,     -- PARAMETER5
   I_PARAM6            VARCHAR2    DEFAULT NULL,     -- PARAMETER6
   I_PARAM7            VARCHAR2    DEFAULT NULL,     -- PARAMETER7
   I_PARAM8            VARCHAR2    DEFAULT NULL      -- PARAMETER8
)
AUTHID CURRENT_USER IS
   V_OWNER            VARCHAR2(100)  := NULL;
   V_TABLE_NAME       VARCHAR2(100)  := NULL;
   V_ROW_CNT          NUMBER         := 0;
   V_SQLERRM          VARCHAR2(1000) := NULL;
   
BEGIN
   /* --------------- 작업로그(START) --------------- */
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=1024';
   EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
   EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''YYYY-MM-DD HH24:MI:SS.FF3''';
   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 9, LENGTH(I_SESSION_NAME)-12);
   SELECT  OWNER INTO V_OWNER
    FROM   (SELECT USER AS OWNER FROM USER_TABLES WHERE TABLE_NAME = UPPER(V_TABLE_NAME) UNION  ALL
            SELECT TABLE_OWNER AS OWNER FROM USER_SYNONYMS WHERE SYNONYM_NAME = UPPER(V_TABLE_NAME));
   
   /* ------------------ ERR LOG ----------------------
    -- DROP TABLE ERR$TABLE_NAME PURGE;
    -- CALL DBMS_ERRLOG.CREATE_ERROR_LOG('TRG_TABLE_NAME', 'ERR$TABLE_NAME');
    -- LOG ERRORS INTO ERR$TABLE_NAME REJECT LIMIT UNLIMITED
   ------------------------------------------------ */ 

   /* ------------------ 이행로직 -------------------- */
   
-- DROP TABLE HPS_SPEC CASCADE CONSTRAINTS PURGE;
-- CREATE TABLE HPS_SPEC AS SELECT * FROM HPACNT.HPS_SPEC@DL_DICR; COMMIT;  
MIG_PRC_TRUNCATE('HPS_SPEC');
INSERT INTO HPS_SPEC SELECT * FROM HPACNT.HPS_SPEC@DL_DICR; COMMIT;  

-- DROP TABLE TBL_META_CODE_ITEM CASCADE CONSTRAINTS PURGE;
-- CREATE TABLE TBL_META_CODE_ITEM AS SELECT * FROM HMS.TBL_META_CODE_ITEM@DL_DICR; COMMIT;  
MIG_PRC_TRUNCATE('TBL_META_CODE_ITEM');
INSERT INTO TBL_META_CODE_ITEM SELECT * FROM  HMS.TBL_META_CODE_ITEM@DL_DICR; COMMIT;  


/* TBL_AGMT_COL_PROPERTY 구 버전 */

-- SELECT /*+ PARALLEL(8) */
-- 'INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
-- WITH
-- SPEC AS
-- (
-- SELECT S.*
--   FROM TBL_SPEC S
--      , (SELECT R.*
--              , ROW_NUMBER() OVER (PARTITION BY VER_CONT_ID ORDER BY CASE WHEN NEXT_VER_ID IS NULL THEN 1 ELSE 2 END, ID DESC) RNUM
--           FROM TBL_RESOURCE_VERSION R
--        ) R
--  WHERE R.RNUM = 1
--    AND S.PROD_ID = R.RESOURCE_ID
-- )
-- SELECT /*+ PARALLEL(4) */
--        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
--      , ''상품논리검증'' AS VRFC_GBN
--      , A.*
--   FROM (
-- SELECT /*+ PARALLEL(8) */
--        ''HPAS NOT NULL 검증'' AS VRFC_NM
--      , SYSDATE AS VRFC_DT
--      , ''TBL_AGMT_COL_PROPERTY'' AS TOBE_TAB
--      , ''COL_PROPERTY'' AS TOBE_COL
--      , NVL(COUNT(*),0) AS ASIS_VAL
--      , NVL(SUM(CASE WHEN M.'||COL_NAME||' IS NULL THEN 1 ELSE 0 END),0) AS TOBE_VAL
--   FROM TBL_AGMT_COL_PROPERTY M  -- 대상 DB에 따라 오너, 링크명 수정
--      , (SELECT DISTINCT P.UUID PUUID
--           FROM TBL_CMP_PROPERTY A, SPEC C, SPEC P, TBL_KIND_VERI K
--          WHERE A.ID = C.ID
--            AND A.COMPONENT_ID = P.ID
--            AND C.KIND_ID = K.ID
--            AND K.NAME = '''||COL_NAME||'''
--            AND A.OPTIONAL_YN = ''N''
--        ) X
--  WHERE M.SPEC_UUID = X.PUUID) A ;
-- COMMIT ;
-- ' SQLTXT
--   FROM (SELECT M.*
--           FROM (SELECT DISTINCT K.NAME COL_NAME, K.DESCRIPTION COL_KNAME
--                   FROM TBL_CMP_PROPERTY A, TBL_SPEC C, TBL_KIND_VERI K
--                      , (SELECT *
--                           FROM (SELECT R.*
--                                      , ROW_NUMBER() OVER (PARTITION BY VER_CONT_ID ORDER BY CASE WHEN NEXT_VER_ID IS NULL THEN 1 ELSE 2 END, ID DESC) RNUM
--                                   FROM TBL_RESOURCE_VERSION R
--                                )
--                          WHERE RNUM = 1
--                        ) R -- UUID가 동일한 SPEC에 대해 최종 것만 선택하기 위한 목적
--                  WHERE A.ID = C.ID
--                    AND C.KIND_ID = K.ID
--                    AND A.OPTIONAL_YN = 'N'
--                    AND C.PROD_ID = R.RESOURCE_ID
--                    ORDER BY 1
--                ) M
--           JOIN
--                (SELECT COLUMN_NAME
--                   FROM ALL_TAB_COLUMNS
--                  WHERE TABLE_NAME = 'TBL_AGMT_COL_PROPERTY'
--                    AND OWNER = 'HPACNT'
--                ) X
--             ON M.COL_NAME = X.COLUMN_NAME
--        ) M
-- ;

/* NOT NULL 점검(TBL_AGMT_COL_PROPERTY, TBL_RIA_COL_PROPERTY) 쿼리 생성 로직 신 버전 */

-- SELECT 'INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
--  SELECT /*+ PARALLEL(4) */
--         CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
--       , ''상품논리검증'' AS VRFC_GBN
--       , A.*
--    FROM (
--  SELECT /*+ PARALLEL(4) USE_HASH(M S) */
--         ''HPAS NOT NULL 검증'' AS VRFC_NM
--       , SYSDATE AS VRFC_DT
--       , '''||A.TABLE_NAME||''' AS TOBE_TAB
--       , M.COLUMN_NAME AS TOBE_COL
--       , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
--       , NVL(SUM(CASE WHEN S.OPTIONAL_YN = ''N'' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
-- FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
--                K.KIND_NAME COLUMN_NAME, A.PSM_CODE||''_''||A.KIND_ID||'||
--                CASE WHEN A.TABLE_NAME = 'TBL_RIA_COL_PROPERTY' THEN '''_''||R.KIND_ID||' ELSE '' END||
--                '''_''||K.KIND_ID KIND_PATH
--              , COUNT(*) TOT_ROWS
--              , SUM(CASE WHEN I.'||S.COLUMN_NAME||' IS NULL THEN 1 ELSE 0 END) ERR_ROWS
--         FROM '||A.TABLE_NAME||' I, '||CASE WHEN A.TABLE_NAME = 'TBL_RIA_COL_PROPERTY' THEN 'TBL_ROLE_IN_ACTUAL R, ' ELSE '' END||'TBL_AGREEMENT A
--            , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND_VERI WHERE KIND_NAME = '''||S.COLUMN_NAME||''') K
--         WHERE 1 = 1
--         AND   '||CASE WHEN A.TABLE_NAME = 'TBL_RIA_COL_PROPERTY' THEN 'I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID' ELSE 'I.AGREEMENT_ID = A.ID' END||'
--         GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, '||
--         CASE WHEN A.TABLE_NAME = 'TBL_RIA_COL_PROPERTY' THEN 'R.KIND_ID, ' ELSE '' END||'K.KIND_ID
--        ) M
-- LEFT OUTER JOIN
--        HPACNT.HPS_SPEC@DL_DICR S
-- ON     M.KIND_PATH = S.KIND_PATH
-- GROUP BY M.COLUMN_NAME) A ;
--  COMMIT ;' DR_SQL
-- FROM   ALL_TAB_COLUMNS A
--    ,   (SELECT DISTINCT K.KIND COLUMN_NAME
--         FROM   HPACNT.HPS_SPEC@DL_DICR K
--         WHERE  K.OPTIONAL_YN = 'N'
--        ) S
-- WHERE  A.OWNER = 'TRG02'
-- AND    A.TABLE_NAME IN ('TBL_AGMT_COL_PROPERTY', 'TBL_RIA_COL_PROPERTY')
-- AND    A.COLUMN_NAME = S.COLUMN_NAME
-- ORDER BY A.TABLE_NAME, S.COLUMN_NAME
-- ;

  
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(8) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(8) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(8) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME
             , A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ACPY_TERM IS NULL THEN 1 ELSE 0 END) ERR_ROWS
          FROM TBL_AGMT_COL_PROPERTY I
             , TBL_AGREEMENT A
             , (SELECT ID        AS KIND_ID
                     , KIND_NAME AS KIND_NAME
                  FROM TBL_KIND 
                 WHERE KIND_NAME = 'ACPY_TERM') K
        WHERE 1 = 1
          AND   I.AGREEMENT_ID = A.ID
          AND   A.KIND_ID      = K.KIND_ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ACPY_TERM_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ACPY_TERM_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ACTL_ISRN_TERM IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ACTL_ISRN_TERM') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ACTL_ISRN_TERM_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ACTL_ISRN_TERM_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ANUT_DTL_TYPE_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ANUT_DTL_TYPE_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ANUT_GURT_TERM_TYPE_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ANUT_GURT_TERM_TYPE_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ANUT_OTPY_STRT_AG IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ANUT_OTPY_STRT_AG') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ANUT_OTPY_STRT_DATE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ANUT_OTPY_STRT_DATE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ANUT_OTPY_TRGT_TYPE_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ANUT_OTPY_TRGT_TYPE_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ANUT_STRT_POTM_ACVL_DBRT IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ANUT_STRT_POTM_ACVL_DBRT') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ANUT_TYPE_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ANUT_TYPE_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.CNTC_CNTG_YYMM IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'CNTC_CNTG_YYMM') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.CTDT IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'CTDT') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.FRST_CTDT IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'FRST_CTDT') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ISRN_FAMT IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ISRN_FAMT') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ISRN_TERM IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ISRN_TERM') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.ISRN_TERM_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'ISRN_TERM_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.LNTP_ANUT_BNET_SQNO IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'LNTP_ANUT_BNET_SQNO') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.MTRT_DATE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'MTRT_DATE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PAYM_CYCL_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PAYM_CYCL_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PAYM_CYCL_VAL IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PAYM_CYCL_VAL') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PAYM_TERM IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PAYM_TERM') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PAYM_TERM_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PAYM_TERM_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PREM_APLY_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PREM_APLY_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PREM_PDUP_APLB_YYMM IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PREM_PDUP_APLB_YYMM') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PROD_INQY_RFDT IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PROD_INQY_RFDT') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.SALE_CHNL_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'SALE_CHNL_CODE') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_AGMT_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.WITM_YN IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_AGMT_COL_PROPERTY I, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'WITM_YN') K
        WHERE 1 = 1
        AND   I.AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.BNFC_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'BNFC_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.BNFC_PROY IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'BNFC_PROY') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.CNTC_GNDR_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'CNTC_GNDR_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.CUST_ROLE_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'CUST_ROLE_CODE') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.DONT_GROU_YN IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'DONT_GROU_YN') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.INUR_JOIN_DVSN_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'INUR_JOIN_DVSN_CODE') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.INUR_NO IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'INUR_NO') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.JOIN_AG IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'JOIN_AG') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.MINU_RLTS_CODE IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'MINU_RLTS_CODE') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.POLR_COBD_YN IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'POLR_COBD_YN') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.PREM_CALC_APLY_AG IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'PREM_CALC_APLY_AG') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;
INSERT INTO MIG02.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
 SELECT /*+ PARALLEL(4) */
        CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
      , '상품논리검증' AS VRFC_GBN
      , A.*
   FROM (
 SELECT /*+ PARALLEL(4) USE_HASH(M S) */
        'HPAS NOT NULL 검증' AS VRFC_NM
      , SYSDATE AS VRFC_DT
      , 'TBL_RIA_COL_PROPERTY' AS TOBE_TAB
      , M.COLUMN_NAME AS TOBE_COL
      , NVL(SUM(M.TOT_ROWS),0) AS ASIS_VAL
      , NVL(SUM(CASE WHEN S.OPTIONAL_YN = 'N' THEN M.ERR_ROWS ELSE 0 END),0) AS TOBE_VAL
FROM   (SELECT /*+ PARALLEL(4) USE_HASH(I A) */
               K.KIND_NAME COLUMN_NAME, A.PSM_CODE||'_'||A.KIND_ID||'_'||R.KIND_ID||'_'||K.KIND_ID KIND_PATH
             , COUNT(*) TOT_ROWS
             , SUM(CASE WHEN I.RIPT_RATO IS NULL THEN 1 ELSE 0 END) ERR_ROWS
        FROM TBL_RIA_COL_PROPERTY I, TBL_ROLE_IN_ACTUAL R, TBL_AGREEMENT A
           , (SELECT ID KIND_ID, KIND_NAME FROM TBL_KIND WHERE KIND_NAME = 'RIPT_RATO') K
        WHERE 1 = 1
        AND   I.ROLE_IN_ACTUAL_ID = R.ID AND ORIGIN_AGREEMENT_ID = A.ID
        GROUP BY K.KIND_NAME, A.PSM_CODE, A.KIND_ID, R.KIND_ID, K.KIND_ID
       ) M
LEFT OUTER JOIN
       HPS_SPEC S
ON     M.KIND_PATH = S.KIND_PATH
GROUP BY M.COLUMN_NAME) A ;
 COMMIT ;

   /* --------------- 작업로그( END ) --------------- */
   V_ROW_CNT := SQL%ROWCOUNT;
   COMMIT;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, NULL);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   
EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   /* --------------- 오류로그( END ) --------------- */
   V_SQLERRM := SQLERRM;
   MIG_PRC_INFA_LOG(I_WORKFLOW_RUN_ID, I_SESSION_NAME, V_OWNER, V_TABLE_NAME, V_ROW_CNT, 0, V_SQLERRM);
   EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT=128';
   EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
   RAISE_APPLICATION_ERROR(-20001, V_SQLERRM);
   
END;


======================================
ROWNUM으로FIX생성




   V_TABLE_NAME := SUBSTR(I_SESSION_NAME, 13, LENGTH(I_SESSION_NAME)-16);   
   
   -- SUBSTR(I_SESSION_NAME, 13, LENGTH(I_SESSION_NAME)-12);
   
   
   
   /* ------------------ 검증로직 -------------------- */

INSERT INTO CMMASV.MIG_DATA_VERIFICATION@DL_DMIG ( SEQ_NO, VRFC_GBN, VRFC_NM, VRFC_DT, TOBE_TAB, TOBE_COL, ASIS_VAL, TOBE_VAL)
SELECT /*+ PARALLEL(A 4) */
       CMMASV.SEQ_MIG_DATA_VERIFICATION.NEXTVAL@DL_DMIG AS SEQ_NO
     ,'중복검증' AS VRFC_GBN
     , '[ID] TBL_POLOAN_PAYMENT_ELEMENT의 KEY Unique검증' AS VRFC_NM
     , SYSDATE AS VRFC_DT
     , 'TBL_POLOAN_PAYMENT_ELEMENT' AS TOBE_TAB
     , 'ID' AS TOBE_COL
     , 0 AS ASIS_VAL
     , A.TOBE_VAL AS TOBE_VAL
  FROM ( SELECT COUNT(1) AS TOBE_VAL
           FROM ( SELECT /*+ FULL(A) PARALLEL(A 4) */ 
                         A.VALD_DVSN_CODE, A.POLY_NO, A.ASIS_TAB, A.ASIS_PK_COL1, A.ASIS_PK_COL2, A.BASE_AMOUNT_COL
                    FROM MAPKEY_TBL_POLOAN_PAYMENT_ELEMENT_100 A
                   GROUP BY A.VALD_DVSN_CODE, A.POLY_NO, A.ASIS_TAB, A.ASIS_PK_COL1, A.ASIS_PK_COL2, A.BASE_AMOUNT_COL
                  HAVING COUNT(1) > 1 ) )A ;
COMMIT; 

   /* ------------------ 오류발생  -------------------- */
   
SELECT COUNT(DECODE(TOBE_VAL,0,0,'ERR') / 1 ) / COUNT(DECODE(TOBE_VAL,0,0,'ERR') / 1 )
INTO   V_SQLERRM
FROM   CMMASV.MIG_DATA_VERIFICATION@DL_DMIG A
WHERE  1=1
AND    A.TOBE_TAB = V_TABLE_NAME
AND    A.VRFC_DT >=(SELECT MAX(B.START_TIME)  --   MAX(B.END_TIME)
                    FROM   CMMASV.MIG_INFA_LOG@DL_DMIG B
                    WHERE  1=1
                    AND    B.WORKFLOW_RUN_ID = I_WORKFLOW_RUN_ID
                    AND    replace(B.TABLE_NAME,'VER_','')  = V_TABLE_NAME --B.TABLE_NAME = V_TABLE_NAME
                   )
AND    CASE WHEN A.VRFC_GBN = '중복검증' AND A.VRFC_NM LIKE '%KEY Unique검증%'
            THEN 1
       END = 1
;


   /* ------------------ 오류발생  -------------------- */
SELECT COUNT(DECODE(TOBE_VAL,0,0,'ERR') / 1 ) / COUNT(DECODE(TOBE_VAL,0,0,'ERR') / 1 )
INTO   V_SQLERRM
FROM   CMMASV.MIG_DATA_VERIFICATION@DL_DMIG A
WHERE  1=1
AND    A.TOBE_TAB = V_TABLE_NAME
AND    A.VRFC_DT >=(SELECT MAX(B.START_TIME)  --   MAX(B.END_TIME)
                    FROM   CMMASV.MIG_INFA_LOG@DL_DMIG B
                    WHERE  1=1
                    AND    B.WORKFLOW_RUN_ID = I_WORKFLOW_RUN_ID
                    AND    replace(B.TABLE_NAME,'VER_','')  = V_TABLE_NAME --B.TABLE_NAME = V_TABLE_NAME
                   )
AND    CASE WHEN A.VRFC_GBN = 'RI검증'  AND A.VRFC_NM LIKE '[FK]%'
            THEN 1
            WHEN A.VRFC_GBN = '중복검증' AND A.VRFC_NM LIKE '%ID Unique검증%'
            THEN 1
       END = 1
;



WITH MAX_ID AS (SELECT /*+ MATERIALIZE FULL(F) PARALLEL(F 4) */ 
                   NVL(MAX(F.MONEY_SCHEDULER_ID),100000000000)                                      AS MAX_ID 
              FROM MAPKEY_TBL_MONEY_SCHEDULER_FIX F )
              
			  
			  
=============================
납입상태_선분이력생성예제 (박란영 수정)
	/*

2020.02.11 홍정우 과장님 전달 문서

*/



-- 증권번호 158480431, 가입상품번호 13 : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중, 납입면제)
-- 증권번호 111524491, 가입상품번호 2  : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중 반복)
-- 증권번호 118899493, 가입상품번호 1  : 계약상태로 납입상태를 판단할 수 있는 예제 (여러번 실효, 납입면제 후 해약(계약 감소 시 납입상태 논의 필요))
-- 증권번호 180644087, 가입상품번호 5  : 계약상태로 납입상태를 판단할 수 있는 예제 (예약가입)
-- 증권번호 142700341, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예)를 판단할 수 있는 예제
-- 증권번호 168740716, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입종료)를 판단할 수 있는 예제
-- 증권번호 133070795, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예(납입일시중지))를 판단할 수 있는 예제
-- 증권번호 141869385, 가입상품번호 1  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입완료 후 납면)
-- 증권번호 118487134, 가입상품번호 5  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입중 납면)
-- 증권번호 113914076, 가입상품번호 6  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입중 납면 이후 완납)
-- 증권번호 125916247, 가입상품번호 5  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입완료(일시납) 이후 납면)


WITH COVERAGE   AS (SELECT A.*,
					       '20220210' AS STDD_DATE -- <-- 마이그레이션 작업 기준일자
					FROM TB_ISAPLCJG A /*가입상품*/
					WHERE A.POLY_NO = '180644087' -- <-- 증권번호 설정
					      AND A.JOIN_GOOD_NO = 5  -- <-- 가입상품번호 설정
						  AND A.END_DATE = '99991231'
						  AND A.DEL_YN = 'N'),
     PAYMSTAT01 AS (/**/
					SELECT POLY_NO,
                           JOIN_GOOD_NO,
                    	   CASE WHEN CNTT_STAT_CODE IN ('1','4')  -- 유지, 효력상실
						        THEN CASE WHEN CNTT_STAT_DTCD IN ('17','40')   -- 주계약 유지 특약예약가입(17), 효력상실(41)
								          THEN '납입불가'
										  ELSE '납입중'
								     END
	                            WHEN CNTT_STAT_CODE IN ('2')     -- 완납(2)
								THEN '납입완료'
	                            WHEN CNTT_STAT_CODE IN ('9')     -- 만기경과(9) 
								THEN CASE WHEN BEFO_CTS_CODE IN ('3')     -- 납면(3)
								          THEN '납입면제'
										  ELSE '납입완료'
									 END
	                            WHEN CNTT_STAT_CODE IN ('3')     -- 납면(3)
								THEN '납입면제'
                           END AS PAYM_STAT_CODE,
						   CASE WHEN CNTT_STAT_CODE IN ('1','4')  -- 유지, 효력상실
						        THEN CASE WHEN CNTT_STAT_DTCD IN ('17','40')   -- 주계약 유지 특약예약가입(17), 효력상실(41)
								          THEN '납입미개시(예약가입)'
										  ELSE '없음'
								     END
	                            WHEN CNTT_STAT_CODE IN ('2')     -- 완납(2)
								THEN '완납(유지)'
	                            WHEN CNTT_STAT_CODE IN ('9')   -- 만기경과(9) 
								THEN CASE WHEN BEFO_CTS_CODE IN ('3')      -- 납면(3)
								          THEN '없음'
										  ELSE '완납(유지)'
									 END
	                            WHEN CNTT_STAT_CODE IN ('3')   -- 납면(3)
								THEN '없음'
                           END AS PAYM_STAT_DTCD,
	                       STRT_DATE,
						   JNGD_HSNO
                    FROM TB_ISAPLCJG
                    WHERE (POLY_NO, JOIN_GOOD_NO) IN (SELECT POLY_NO, JOIN_GOOD_NO
					                                  FROM COVERAGE)
	                      AND DEL_YN = 'N'), -- 가입상품 납입상태 나열
	 PAYMSTAT02 AS (SELECT A.POLY_NO,
                           A.JOIN_GOOD_NO,
	                       CASE WHEN A.PRPY_SYS_DVCD IN ('3','7')       -- 보험료납입관련제도구분 3(보험료납입종료제도), 7(보험료납입중지제도)  
	                            THEN DECODE(B.NO,1,'납입완료','납입중')   -- 
			                    ELSE '납입중'
	                       END AS PAYM_STAT_CODE,
	                       CASE WHEN A.PRPY_SYS_DVCD IN ('1','2','5')   -- 1 (보험료납입유예제도), 2 (보험료부분납입유예제도), 5(보험료납입일시중지제도)
								     AND A.PAYM_GRAC_RATO = 1
	                            THEN DECODE(B.NO,1,'납입유예','없음')
			                    WHEN A.PRPY_SYS_DVCD IN ('3','7')      -- 3(보험료납입종료제도), 7(보험료납입중지제도)
	                            THEN DECODE(B.NO,1,'납입종료','없음')
			                    WHEN A.PRPY_SYS_DVCD = '6'                  -- 6 (특약보험료 자동인출납입제도) 
	                            THEN DECODE(B.NO,1,'자동인출','없음') 
			                    ELSE '없음'
	                       END AS PAYM_STAT_DTCD,
	                       DECODE(B.NO,1,A.PRPY_SYS_RQDT,A.PRPY_SYS_ENDT) AS STRT_DATE,
						   RANK() OVER (PARTITION BY A.POLY_NO, A.JOIN_GOOD_NO ORDER BY A.CHRG_DLNG_SQNO, B.NO)+1000 AS JNGD_HSNO
                    FROM TB_ISPRMPYS A, /*보험료납입제도*/
                         TB_UVDUM001 B
                    WHERE (A.POLY_NO, A.JOIN_GOOD_NO) IN (SELECT POLY_NO, JOIN_GOOD_NO
					                                      FROM COVERAGE)
						  AND A.DEL_YN = 'N'
	                      AND B.NO <= 2),
	 PAYMSTAT03 AS (SELECT A.POLY_NO,
                           A.JOIN_GOOD_NO,
	                       DECODE(A.CNTT_STAT_CODE,'2','납입완료','납입면제') AS PAYM_STAT_CODE,
						   CASE WHEN SUBSTR(E.PYRC_ITEM,3,2) IN ('11','12','14','15','16','18','19')
						        THEN DECODE(A.CNTT_STAT_CODE,'2','완납(준비금변동납면)','준비금변동납면')
								ELSE DECODE(A.CNTT_STAT_CODE,'2','완납(준비금미변동납면)','없음')
						   END AS PAYM_STAT_DTCD,
	                       B.PAYM_DATE AS STRT_DATE,
						   D.PAYM_DLNG_NO AS JNGD_HSNO
                    FROM COVERAGE A,
                         TB_PARCPCTR B,     -- 계약별사고접수
						 TB_PAJNGDCH C,     -- 가입상품변경사유일자
						 TB_PABEFMAS D,     -- 보험금지급  (PK,  지급처리번호(PAYM_DLNG_NO), 증권번호(POLY_NO))
						 TB_PAADTPMT E      -- 사고지급    (PK.   지급처리번호(PAYM_DLNG_NO), 증권번호(POLY_NO), 사고지급일련번호(ACCI_PAYM_SQNO))
                    WHERE A.POLY_NO = B.POLY_NO
						  AND B.RECP_VLID_DVSN = '1'   -- 사고접수유효구분 :  1(접수완료), 2(취소), 0(접수중)
						  AND B.CNCL_DATE IS NULL
						  
						  AND B.CNTT_RECP_SQNO = C.CNTT_RECP_SQNO
						  AND A.POLY_NO		 = C.POLY_NO
  					      AND A.JOIN_GOOD_NO = C.JOIN_GOOD_NO
  					      AND C.CHNG_DVSN_CODE = '1'    -- 변경구분코드 1 ??
  					      AND C.VLID_DVSN = '1'          -- 유효구분     ??
						  
						  AND B.CNTT_RECP_SQNO = D.CNTT_RECP_SQNO
						  AND D.CNCL_DATE IS NULL
						  AND D.PAYM_DLNG_NO = E.PAYM_DLNG_NO
						  
						  AND A.POLY_NO = E.POLY_NO
  					      AND A.JOIN_GOOD_NO = E.JOIN_GOOD_NO),
	 PAYMSTAT04 AS (SELECT B.*,
                           RANK() OVER (PARTITION BY B.POLY_NO, B.JOIN_GOOD_NO ORDER BY B.STRT_DATE, B.JNGD_HSNO) AS SEQ
					FROM (SELECT *
                          FROM PAYMSTAT01 A
                          WHERE CASE WHEN A.PAYM_STAT_CODE = '납입면제'
	                                 THEN (SELECT COUNT(POLY_NO) AS CNT
	                                       FROM PAYMSTAT03
					                       WHERE POLY_NO = A.POLY_NO
					                             AND JOIN_GOOD_NO = A.JOIN_GOOD_NO
							                     AND PAYM_STAT_CODE = A.PAYM_STAT_CODE
							                     AND STRT_DATE = A.STRT_DATE)
			                         ELSE 0
			                    END = 0
                          UNION
                          SELECT *
                          FROM PAYMSTAT02
                          UNION
                          SELECT POLY_NO,
                                 JOIN_GOOD_NO,
	                             PAYM_STAT_CODE,
                                 CASE WHEN COUNT(DISTINCT PAYM_STAT_DTCD) > 1
	                                  THEN MAX(CASE WHEN PAYM_STAT_DTCD IN ('완납(준비금미변동납면)','없음')
			                                        THEN ''
					                                ELSE PAYM_STAT_DTCD
				                               END)
		                              ELSE MAX(PAYM_STAT_DTCD)
	                             END AS PAYM_STAT_DTCD,
	                             STRT_DATE,
	                             MIN(JNGD_HSNO) AS JNGD_HSNO
                          FROM PAYMSTAT03
						  
                          GROUP BY POLY_NO,
                                   JOIN_GOOD_NO,
		                           PAYM_STAT_CODE,
		                           STRT_DATE) B
                    WHERE B.STRT_DATE != '99991231'
                    ORDER BY B.POLY_NO,
                             B.JOIN_GOOD_NO,
		                     B.STRT_DATE,
		                     B.JNGD_HSNO)
SELECT POLY_NO,
	   JOIN_GOOD_NO,
	   PAYM_STAT_CODE,
	   PAYM_STAT_DTCD,
	   STRT_DATE
FROM (SELECT A.POLY_NO,
	   	     A.JOIN_GOOD_NO,
	   	     A.PAYM_STAT_CODE,
	   	   	 A.PAYM_STAT_DTCD,
	   	     A.STRT_DATE,
	   	     0 AS SEQ
	  FROM PAYMSTAT04 A
	  WHERE A.SEQ = 1
	  UNION
	  SELECT A.POLY_NO,
	   	     A.JOIN_GOOD_NO,
	         B.PAYM_STAT_CODE,
	         B.PAYM_STAT_DTCD,
	         B.STRT_DATE,
	         A.SEQ
      FROM PAYMSTAT04 A,
           PAYMSTAT04 B
      WHERE A.POLY_NO = B.POLY_NO
            AND A.JOIN_GOOD_NO = B.JOIN_GOOD_NO
	        AND A.SEQ = B.SEQ - 1
	        AND A.PAYM_STAT_CODE||A.PAYM_STAT_DTCD != B.PAYM_STAT_CODE||B.PAYM_STAT_DTCD
	  UNION
      SELECT A.POLY_NO,
             A.JOIN_GOOD_NO,
	         '납입완료' AS PAYM_STAT_CODE,
	         DECODE(A.PAYM_STAT_DTCD,'준비금미변동납면','완납(준비금미변동납면)','완납(준비금변동납면)') AS PAYM_STAT_DTCD,
	         B.PREM_CPAY_REYM||SUBSTR(B.CNTT_DATE,7,2) AS STRT_DATE,
	         A.SEQ + 1 AS SEQ
      FROM PAYMSTAT04 A,
           COVERAGE B
      WHERE A.PAYM_STAT_CODE = '납입면제'
            AND A.SEQ = (SELECT MAX(SEQ) AS SEQ
                         FROM PAYMSTAT04
				         WHERE POLY_NO = A.POLY_NO
					           AND JOIN_GOOD_NO = A.JOIN_GOOD_NO)
            AND A.POLY_NO = B.POLY_NO
	        AND A.JOIN_GOOD_NO = B.JOIN_GOOD_NO
	        AND B.STDD_DATE >= B.PREM_CPAY_REYM||SUBSTR(B.CNTT_DATE,7,2))      
/*  
    상품별 마지막이력이 납입면제이고
    보험료완납해당년월(PREM_CPAY_REYM)||계약일자(CNTT_DATE)의 일이  마이그기준일자 보다 미래이면
    => 납입상태는 => 납입완료 
       납입상태상세는 =>   준비금미변동납면=> 완납(준비금미변동납면), 그외 '완납(준비금변동납면)'로 변경
    
    
*/
ORDER BY SEQ
;
============================
납입상태_선분이력생성예제_v0.3(From홍정우)
		  
/*

2020.02.11 홍정우 과장 전달 문서

*/

-- 증권번호 158480431, 가입상품번호 13 : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중, 납입면제)
-- 증권번호 111524491, 가입상품번호 2  : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중 반복)
-- 증권번호 118899493, 가입상품번호 1  : 계약상태로 납입상태를 판단할 수 있는 예제 (여러번 실효, 납입면제 후 해약(계약 감소 시 납입상태 논의 필요))
-- 증권번호 180644087, 가입상품번호 5  : 계약상태로 납입상태를 판단할 수 있는 예제 (예약가입)
-- 증권번호 142700341, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예)를 판단할 수 있는 예제
-- 증권번호 168740716, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입종료)를 판단할 수 있는 예제
-- 증권번호 133070795, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예(납입일시중지))를 판단할 수 있는 예제
-- 증권번호 141869385, 가입상품번호 1  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입완료 후 납면)
-- 증권번호 118487134, 가입상품번호 5  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입중 납면)
-- 증권번호 113914076, 가입상품번호 6  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입중 납면 이후 완납)
-- 증권번호 125916247, 가입상품번호 5  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입완료(일시납) 이후 납면)


WITH COVERAGE   AS (SELECT A.*,
					       '20220210' AS STDD_DATE -- <-- 마이그레이션 작업 기준일자
					FROM TB_ISAPLCJG A
					WHERE A.POLY_NO = '184579292' -- <-- 증권번호 설정
					      AND A.JOIN_GOOD_NO = 1  -- <-- 가입상품번호 설정
						  AND A.END_DATE = '99991231'
						  AND A.DEL_YN = 'N'),
     PAYMSTAT01 AS (SELECT POLY_NO,
                           JOIN_GOOD_NO,
                    	   CASE WHEN CNTT_STAT_CODE IN ('1','4')  -- 유지, 효력상실
						        THEN CASE WHEN CNTT_STAT_DTCD IN ('17','40')   -- 주계약 유지 특약예약가입(17), 효력상실(41)
								          THEN '납입불가'
										  ELSE '납입중'
								     END
	                            WHEN CNTT_STAT_CODE IN ('2')     -- 완납(2)
								THEN '납입완료'
	                            WHEN CNTT_STAT_CODE IN ('9')     -- 만기경과(9) 
								THEN CASE WHEN BEFO_CTS_CODE IN ('3')     -- 납면(3)
								          THEN '납입면제'
										  ELSE '납입완료'
									 END
	                            WHEN CNTT_STAT_CODE IN ('3')     -- 납면(3)
								THEN '납입면제'
                           END AS PAYM_STAT_CODE,
						   CASE WHEN CNTT_STAT_CODE IN ('1','4')  -- 유지, 효력상실
						        THEN CASE WHEN CNTT_STAT_DTCD IN ('17','40')   -- 주계약 유지 특약예약가입(17), 효력상실(41)
								          THEN '납입미개시(예약가입)'
										  ELSE '없음'
								     END
	                            WHEN CNTT_STAT_CODE IN ('2')     -- 완납(2)
								THEN '완납(유지)'
	                            WHEN CNTT_STAT_CODE IN ('9')   -- 만기경과(9) 
								THEN CASE WHEN BEFO_CTS_CODE IN ('3')      -- 납면(3)
								          THEN '없음'
										  ELSE '완납(유지)'
									 END
	                            WHEN CNTT_STAT_CODE IN ('3')   -- 납면(3)
								THEN '없음'
                           END AS PAYM_STAT_DTCD,
	                       STRT_DATE,
						   JNGD_HSNO
                    FROM TB_ISAPLCJG
                    WHERE (POLY_NO, JOIN_GOOD_NO) IN (SELECT POLY_NO, JOIN_GOOD_NO
					                                  FROM COVERAGE)
	                      AND DEL_YN = 'N'), -- 가입상품 납입상태 나열
	 PAYMSTAT02 AS (SELECT A.POLY_NO,
                           A.JOIN_GOOD_NO,
	                       CASE WHEN A.PRPY_SYS_DVCD IN ('3','7')       -- 보험료납입관련제도구분 3(보험료납입종료제도), 7(보험료납입중지제도)  
	                            THEN DECODE(B.NO,1,'납입완료','납입중')   -- 
			                    ELSE '납입중'
	                       END AS PAYM_STAT_CODE,
	                       CASE WHEN A.PRPY_SYS_DVCD IN ('1','2','5')   -- 1 (보험료납입유예제도), 2 (보험료부분납입유예제도), 5(보험료납입일시중지제도)
								     AND A.PAYM_GRAC_RATO = 1
	                            THEN DECODE(B.NO,1,'납입유예','없음')
			                    WHEN A.PRPY_SYS_DVCD IN ('3','7')      -- 3(보험료납입종료제도), 7(보험료납입중지제도)
	                            THEN DECODE(B.NO,1,'납입종료','없음')
			                    WHEN A.PRPY_SYS_DVCD = '6'                  -- 6 (특약보험료 자동인출납입제도) 
	                            THEN DECODE(B.NO,1,'자동인출','없음') 
			                    ELSE '없음'
	                       END AS PAYM_STAT_DTCD,
	                       DECODE(B.NO,1,A.PRPY_SYS_RQDT,A.PRPY_SYS_ENDT) AS STRT_DATE,
						   RANK() OVER (PARTITION BY A.POLY_NO, A.JOIN_GOOD_NO ORDER BY A.CHRG_DLNG_SQNO, B.NO)+1000 AS JNGD_HSNO
                    FROM TB_ISPRMPYS A,
                         TB_UVDUM001 B
                    WHERE (A.POLY_NO, A.JOIN_GOOD_NO) IN (SELECT POLY_NO, JOIN_GOOD_NO
					                                      FROM COVERAGE)
						  AND A.DEL_YN = 'N'
	                      AND B.NO <= 2),
	 PAYMSTAT03 AS (SELECT A.POLY_NO,
                           A.JOIN_GOOD_NO,
	                       DECODE(A.CNTT_STAT_CODE,'2','납입완료','납입면제') AS PAYM_STAT_CODE,
						   CASE WHEN SUBSTR(E.PYRC_ITEM,3,2) IN ('11','12','14','15','16','18','19')
						        THEN DECODE(A.CNTT_STAT_CODE,'2','완납(준비금변동납면)','준비금변동납면')
								ELSE DECODE(A.CNTT_STAT_CODE,'2','완납(준비금미변동납면)','없음')
						   END AS PAYM_STAT_DTCD,
	                       B.PAYM_DATE AS STRT_DATE,
						   D.PAYM_DLNG_NO AS JNGD_HSNO
                    FROM COVERAGE A,
                         TB_PARCPCTR B,     -- 계약별사고접수
						 TB_PAJNGDCH C,     -- 가입상품변경사유일자
						 TB_PABEFMAS D,     -- 보험금지급  (PK,  지급처리번호(PAYM_DLNG_NO), 증권번호(POLY_NO))
						 TB_PAADTPMT E      -- 사고지급    (PK.   지급처리번호(PAYM_DLNG_NO), 증권번호(POLY_NO), 사고지급일련번호(ACCI_PAYM_SQNO))
                    WHERE A.POLY_NO = B.POLY_NO
						  AND B.RECP_VLID_DVSN = '1'   -- 사고접수유효구분 :  1(접수완료), 2(취소), 0(접수중)
						  AND B.CNCL_DATE IS NULL
						  AND B.CNTT_RECP_SQNO = C.CNTT_RECP_SQNO
						  AND A.POLY_NO = C.POLY_NO
  					      AND A.JOIN_GOOD_NO = C.JOIN_GOOD_NO
  					      AND C.CHNG_DVSN_CODE = '1'    -- 변경구분코드 1 ??
  					      AND C.VLID_DVSN = '1'          -- 유효구분     ??
						  AND B.CNTT_RECP_SQNO = D.CNTT_RECP_SQNO
						  AND D.CNCL_DATE IS NULL
						  AND D.PAYM_DLNG_NO = E.PAYM_DLNG_NO
						  AND A.POLY_NO = E.POLY_NO
  					      AND A.JOIN_GOOD_NO = E.JOIN_GOOD_NO),
	 PAYMSTAT04 AS (SELECT B.*,
                           RANK() OVER (PARTITION BY B.POLY_NO, B.JOIN_GOOD_NO ORDER BY B.STRT_DATE, B.JNGD_HSNO) AS SEQ
					FROM (SELECT *
                          FROM PAYMSTAT01 A
                          WHERE CASE WHEN A.PAYM_STAT_CODE = '납입면제'
	                                 THEN (SELECT COUNT(POLY_NO) AS CNT
	                                       FROM PAYMSTAT03
					                       WHERE POLY_NO = A.POLY_NO
					                             AND JOIN_GOOD_NO = A.JOIN_GOOD_NO
							                     AND PAYM_STAT_CODE = A.PAYM_STAT_CODE
							                     AND STRT_DATE = A.STRT_DATE)
			                         ELSE 0
			                    END = 0
                          UNION
                          SELECT *
                          FROM PAYMSTAT02
                          UNION
                          SELECT POLY_NO,
                                 JOIN_GOOD_NO,
	                             PAYM_STAT_CODE,
                                 CASE WHEN COUNT(DISTINCT PAYM_STAT_DTCD) > 1
	                                  THEN MAX(CASE WHEN PAYM_STAT_DTCD IN ('완납(준비금미변동납면)','없음')
			                                        THEN ''
					                                ELSE PAYM_STAT_DTCD
				                               END)
		                              ELSE MAX(PAYM_STAT_DTCD)
	                             END AS PAYM_STAT_DTCD,
	                             STRT_DATE,
	                             MIN(JNGD_HSNO) AS JNGD_HSNO
                          FROM PAYMSTAT03
                          GROUP BY POLY_NO,
                                   JOIN_GOOD_NO,
		                           PAYM_STAT_CODE,
		                           STRT_DATE) B
                    WHERE B.STRT_DATE != '99991231'
                    ORDER BY B.POLY_NO,
                             B.JOIN_GOOD_NO,
		                     B.STRT_DATE,
		                     B.JNGD_HSNO)
SELECT POLY_NO,
	   JOIN_GOOD_NO,
	   PAYM_STAT_CODE,
	   PAYM_STAT_DTCD,
	   STRT_DATE
FROM (SELECT A.POLY_NO,
	   	     A.JOIN_GOOD_NO,
	   	     A.PAYM_STAT_CODE,
	   	   	 A.PAYM_STAT_DTCD,
	   	     A.STRT_DATE,
	   	     0 AS SEQ
	  FROM PAYMSTAT04 A
	  WHERE A.SEQ = 1
	  UNION
	  SELECT A.POLY_NO,
	   	     A.JOIN_GOOD_NO,
	         B.PAYM_STAT_CODE,
	         B.PAYM_STAT_DTCD,
	         B.STRT_DATE,
	         A.SEQ
      FROM PAYMSTAT04 A,
           PAYMSTAT04 B
      WHERE A.POLY_NO = B.POLY_NO
            AND A.JOIN_GOOD_NO = B.JOIN_GOOD_NO
	        AND A.SEQ = B.SEQ - 1
	        AND A.PAYM_STAT_CODE||A.PAYM_STAT_DTCD != B.PAYM_STAT_CODE||B.PAYM_STAT_DTCD
	  UNION
      SELECT A.POLY_NO,
             A.JOIN_GOOD_NO,
	         '납입완료' AS PAYM_STAT_CODE,
	         DECODE(A.PAYM_STAT_DTCD,'준비금미변동납면','완납(준비금미변동납면)','완납(준비금변동납면)') AS PAYM_STAT_DTCD,
	         B.PREM_CPAY_REYM||SUBSTR(B.CNTT_DATE,7,2) AS STRT_DATE,
	         A.SEQ + 1 AS SEQ
      FROM PAYMSTAT04 A,
           COVERAGE B
      WHERE A.PAYM_STAT_CODE = '납입면제'
            AND A.SEQ = (SELECT MAX(SEQ) AS SEQ
                         FROM PAYMSTAT04
				         WHERE POLY_NO = A.POLY_NO
					           AND JOIN_GOOD_NO = A.JOIN_GOOD_NO)
            AND A.POLY_NO = B.POLY_NO
	        AND A.JOIN_GOOD_NO = B.JOIN_GOOD_NO
	        AND B.STDD_DATE >= B.PREM_CPAY_REYM||SUBSTR(B.CNTT_DATE,7,2))      
/*  
    상품별 마지막이력이 납입면제이고
    보험료완납해당년월(PREM_CPAY_REYM)||계약일자(CNTT_DATE)의 일이  마이그기준일자 보다 미래이면
    => 납입상태는 => 납입완료 
       납입상태상세는 =>   준비금미변동납면=> 완납(준비금미변동납면), 그외 '완납(준비금변동납면)'로 변경
    
    
*/
ORDER BY SEQ
;


=============================
납입상태_선분이력생성예제_v0.3
-- 증권번호 158480431, 가입상품번호 13 : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중, 납입면제)
-- 증권번호 111524491, 가입상품번호 2  : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중 반복)
-- 증권번호 118899493, 가입상품번호 1  : 계약상태로 납입상태를 판단할 수 있는 예제 (여러번 실효, 납입면제 후 해약(계약 감소 시 납입상태 논의 필요))
-- 증권번호 180644087, 가입상품번호 5  : 계약상태로 납입상태를 판단할 수 있는 예제 (예약가입)
-- 증권번호 142700341, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예)를 판단할 수 있는 예제
-- 증권번호 168740716, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입종료)를 판단할 수 있는 예제
-- 증권번호 133070795, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예(납입일시중지))를 판단할 수 있는 예제
-- 증권번호 141869385, 가입상품번호 1  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입완료 후 납면)
-- 증권번호 118487134, 가입상품번호 5  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입중 납면)
-- 증권번호 113914076, 가입상품번호 6  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입중 납면 이후 완납)
-- 증권번호 125916247, 가입상품번호 5  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제 (납입완료(일시납) 이후 납면)


WITH coverage   AS (SELECT A.*,
					       '20220210' AS stdd_date -- <-- 마이그레이션 작업 기준일자
					FROM tb_isaplcjg A
					WHERE A.poly_no = '180644087' -- <-- 증권번호 설정
					      AND A.join_good_no = 5  -- <-- 가입상품번호 설정
						  AND A.end_date = '99991231'
						  AND A.del_yn = 'N'),
     paymstat01 AS (SELECT poly_no,
                           join_good_no,
                    	   CASE WHEN cntt_stat_code IN ('1','4')
						        THEN CASE WHEN cntt_stat_dtcd IN ('17','40')
								          THEN '납입불가'
										  ELSE '납입중'
								     END
	                            WHEN cntt_stat_code IN ('2')
								THEN '납입완료'
	                            WHEN cntt_stat_code IN ('9')
								THEN CASE WHEN befo_cts_code IN ('3')
								          THEN '납입면제'
										  ELSE '납입완료'
									 END
	                            WHEN cntt_stat_code IN ('3')
								THEN '납입면제'
                           END AS paym_stat_code,
						   CASE WHEN cntt_stat_code IN ('1','4')
						        THEN CASE WHEN cntt_stat_dtcd IN ('17','40')
								          THEN '납입미개시(예약가입)'
										  ELSE '없음'
								     END
	                            WHEN cntt_stat_code IN ('2')
								THEN '완납(유지)'
	                            WHEN cntt_stat_code IN ('9')
								THEN CASE WHEN befo_cts_code IN ('3')
								          THEN '없음'
										  ELSE '완납(유지)'
									 END
	                            WHEN cntt_stat_code IN ('3')
								THEN '없음'
                           END AS paym_stat_dtcd,
	                       strt_date,
						   jngd_hsno
                    FROM tb_isaplcjg
                    WHERE (poly_no, join_good_no) IN (SELECT poly_no, join_good_no
					                                  FROM coverage)
	                      AND del_yn = 'N'), -- 가입상품 납입상태 나열
	 paymstat02 AS (SELECT A.poly_no,
                           A.join_good_no,
	                       CASE WHEN A.prpy_sys_dvcd IN ('3','7')
	                            THEN DECODE(B.no,1,'납입완료','납입중')
			                    ELSE '납입중'
	                       END AS paym_stat_code,
	                       CASE WHEN A.prpy_sys_dvcd IN ('1','2','5')
								     AND A.paym_grac_rato = 1
	                            THEN DECODE(B.no,1,'납입유예','없음')
			                    WHEN A.prpy_sys_dvcd IN ('3','7')
	                            THEN DECODE(B.no,1,'납입종료','없음')
			                    WHEN A.prpy_sys_dvcd = '6'
	                            THEN DECODE(B.no,1,'자동인출','없음')
			                    ELSE '없음'
	                       END AS paym_stat_dtcd,
	                       DECODE(B.no,1,A.prpy_sys_rqdt,A.prpy_sys_endt) AS strt_date,
						   RANK() OVER (PARTITION BY A.poly_no, A.join_good_no ORDER BY A.chrg_dlng_sqno, B.no)+1000 AS jngd_hsno
                    FROM tb_isprmpys A,
                         tb_uvdum001 B
                    WHERE (A.poly_no, A.join_good_no) IN (SELECT poly_no, join_good_no
					                                      FROM coverage)
						  AND A.del_yn = 'N'
	                      AND B.no <= 2),
	 paymstat03 AS (SELECT A.poly_no,
                           A.join_good_no,
	                       DECODE(A.cntt_stat_code,'2','납입완료','납입면제') AS paym_stat_code,
						   CASE WHEN SUBSTR(E.pyrc_item,3,2) IN ('11','12','14','15','16','18','19')
						        THEN DECODE(A.cntt_stat_code,'2','완납(준비금변동납면)','준비금변동납면')
								ELSE DECODE(A.cntt_stat_code,'2','완납(준비금미변동납면)','없음')
						   END AS paym_stat_dtcd,
	                       B.paym_date AS strt_date,
						   D.paym_dlng_no AS jngd_hsno
                    FROM coverage A,
                         tb_parcpctr B,
						 tb_pajngdch C,
						 tb_pabefmas D,
						 tb_paadtpmt E
                    WHERE A.poly_no = B.poly_no
						  AND B.recp_vlid_dvsn = '1'
						  AND B.cncl_date IS NULL
						  AND B.cntt_recp_sqno = C.cntt_recp_sqno
						  AND A.poly_no = C.poly_no
  					      AND A.join_good_no = C.join_good_no
  					      AND C.chng_dvsn_code = '1'
  					      AND C.vlid_dvsn = '1'
						  AND B.cntt_recp_sqno = D.cntt_recp_sqno
						  AND D.cncl_date IS NULL
						  AND D.paym_dlng_no = E.paym_dlng_no
						  AND A.poly_no = E.poly_no
  					      AND A.join_good_no = E.join_good_no),
	 paymstat04 AS (SELECT B.*,
                           RANK() OVER (PARTITION BY B.poly_no, B.join_good_no ORDER BY B.strt_date, B.jngd_hsno) AS seq
					FROM (SELECT *
                          FROM paymstat01 A
                          WHERE CASE WHEN A.paym_stat_code = '납입면제'
	                                 THEN (SELECT COUNT(poly_no) AS cnt
	                                       FROM paymstat03
					                       WHERE poly_no = A.poly_no
					                             AND join_good_no = A.join_good_no
							                     AND paym_stat_code = A.paym_stat_code
							                     AND strt_date = A.strt_date)
			                         ELSE 0
			                    END = 0
                          UNION
                          SELECT *
                          FROM paymstat02
                          UNION
                          SELECT poly_no,
                                 join_good_no,
	                             paym_stat_code,
                                 CASE WHEN COUNT(DISTINCT paym_stat_dtcd) > 1
	                                  THEN MAX(CASE WHEN paym_stat_dtcd IN ('완납(준비금미변동납면)','없음')
			                                        THEN ''
					                                ELSE paym_stat_dtcd
				                               END)
		                              ELSE MAX(paym_stat_dtcd)
	                             END AS paym_stat_dtcd,
	                             strt_date,
	                             MIN(jngd_hsno) AS jngd_hsno
                          FROM paymstat03
                          GROUP BY poly_no,
                                   join_good_no,
		                           paym_stat_code,
		                           strt_date) B
                    WHERE B.strt_date != '99991231'
                    ORDER BY B.poly_no,
                             B.join_good_no,
		                     B.strt_date,
		                     B.jngd_hsno)
SELECT poly_no,
	   join_good_no,
	   paym_stat_code,
	   paym_stat_dtcd,
	   strt_date
FROM (SELECT A.poly_no,
	   	     A.join_good_no,
	   	     A.paym_stat_code,
	   	   	 A.paym_stat_dtcd,
	   	     A.strt_date,
	   	     0 AS seq
	  FROM paymstat04 A
	  WHERE A.seq = 1
	  UNION
	  SELECT A.poly_no,
	   	     A.join_good_no,
	         B.paym_stat_code,
	         B.paym_stat_dtcd,
	         B.strt_date,
	         A.seq
      FROM paymstat04 A,
           paymstat04 B
      WHERE A.poly_no = B.poly_no
            AND A.join_good_no = B.join_good_no
	        AND A.seq = B.seq - 1
	        AND A.paym_stat_code||A.paym_stat_dtcd != B.paym_stat_code||B.paym_stat_dtcd
	  UNION
      SELECT A.poly_no,
             A.join_good_no,
	         '납입완료' AS paym_stat_code,
	         DECODE(A.paym_stat_dtcd,'준비금미변동납면','완납(준비금미변동납면)','완납(준비금변동납면)') AS paym_stat_dtcd,
	         B.prem_cpay_reym||SUBSTR(B.cntt_date,7,2) AS strt_date,
	         A.seq + 1 AS seq
      FROM paymstat04 A,
           coverage B
      WHERE A.paym_stat_code = '납입면제'
            AND A.seq = (SELECT MAX(seq) AS seq
                         FROM paymstat04
				         WHERE poly_no = A.poly_no
					           AND join_good_no = A.join_good_no)
            AND A.poly_no = B.poly_no
	        AND A.join_good_no = B.join_good_no
	        AND B.stdd_date >= B.prem_cpay_reym||SUBSTR(B.cntt_date,7,2))
ORDER BY seq
;

===========================
납입상태_선분이력생성예제_v0.1
-- 증권번호 158480431, 가입상품번호 13 : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중, 납입면제)
-- 증권번호 111524491, 가입상품번호 2  : 계약상태로 납입상태를 판단할 수 있는 예제 (갱신으로 인한 납입완료, 납입중 반복)
-- 증권번호 118899493, 가입상품번호 1  : 계약상태로 납입상태를 판단할 수 있는 예제 (여러번 실효, 납입면제 후 해약(계약 감소 시 납입상태 논의 필요))
-- 증권번호 142700341, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예)를 판단할 수 있는 예제
-- 증권번호 168740716, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입종료)를 판단할 수 있는 예제
-- 증권번호 133070795, 가입상품번호 1  : 계약상태 + 보험료납입제도로 납입상태(납입유예(납입일시중지))를 판단할 수 있는 예제
-- 증권번호 141869385, 가입상품번호 1  : 계약상태 + 납입면제로 납입상태를 판단할 수 있는 예제


WITH contract   AS (SELECT poly_no,
                           join_good_no,
						   good_code_dtal,
						   good_code_item,
						   cntt_stat_code
					FROM tb_isaplcjg
					WHERE poly_no = '141869385' -- <-- 증권번호 설정
					      AND join_good_no = 1  -- <-- 가입상품번호 설정
						  AND end_date = '99991231'
						  AND del_yn = 'N'),
     paymstat01 AS (SELECT poly_no,
                           join_good_no,
                    	   CASE WHEN cntt_stat_code IN ('1','4')
						        THEN '납입중'
	                            WHEN cntt_stat_code IN ('2')
								THEN '납입완료'
	                            WHEN cntt_stat_code IN ('9')
								THEN CASE WHEN befo_cts_code IN ('3')
								          THEN '납입면제'
										  ELSE '납입완료'
									 END
	                            WHEN cntt_stat_code IN ('3')
								THEN '납입면제'
                           END AS paym_stat_code,
						   '없음' AS paym_stat_dtcd,
	                       strt_date,
						   jngd_hsno
                    FROM tb_isaplcjg
                    WHERE (poly_no, join_good_no) IN (SELECT poly_no, join_good_no
					                                  FROM contract)
	                      AND del_yn = 'N'), -- 가입상품 납입상태 나열
	 paymstat02 AS (SELECT A.*,
	                       RANK() OVER (PARTITION BY A.poly_no ORDER BY A.strt_date, jngd_hsno) AS seq
	                FROM paymstat01 A), -- 중복제거를 위한 중간작업
	 paymstat03 AS (SELECT A.*,
	                       RANK() OVER (PARTITION BY A.poly_no ORDER BY A.strt_date, jngd_hsno) - 1 AS seq
	                FROM paymstat01 A), -- 중복제거를 위한 중간작업
	 paymstat04 AS (SELECT A.poly_no,
						   A.join_good_no,
						   A.paym_stat_code,
						   A.paym_stat_dtcd,
						   A.strt_date
	                FROM paymstat02 A
	                WHERE A.seq = 1), -- 가입상품 맨 처음 1개
	 paymstat05 AS (SELECT A.poly_no,
						   A.join_good_no,
						   B.paym_stat_code,
						   B.paym_stat_dtcd,
						   B.strt_date
	                FROM paymstat02 A,
     	                 paymstat03 B
	                WHERE A.poly_no = B.poly_no
      	                  AND A.join_good_no = B.join_good_no
	  	                  AND A.seq = B.seq
						  AND A.paym_stat_code != B.paym_stat_code
	                ORDER BY A.seq), -- 가입상품 납입상태 중복 제거 후
	 paymstat06 AS (SELECT A.poly_no,
                           A.join_good_no,
	                       CASE WHEN A.prpy_sys_dvcd IN ('3','7')
	                            THEN DECODE(B.NO,1,'납입완료','납입중')
			                    ELSE '납입중'
	                       END AS paym_stat_code,
	                       CASE WHEN A.prpy_sys_dvcd IN ('1','2','5')
								     AND A.paym_grac_rato = 1
	                            THEN DECODE(B.NO,1,'납입유예','없음')
			                    WHEN A.prpy_sys_dvcd IN ('3','7')
	                            THEN DECODE(B.NO,1,'납입종료','없음')
			                    WHEN A.prpy_sys_dvcd = '6'
	                            THEN DECODE(B.NO,1,'자동인출','없음')
			                    ELSE '없음'
	                       END AS paym_stat_dtcd,
	                       DECODE(B.NO,1,A.prpy_sys_rqdt,A.prpy_sys_endt) AS strt_date
                    FROM tb_isprmpys A,
                         tb_uvdum001 B
                    WHERE (A.poly_no, A.join_good_no) IN (SELECT poly_no, join_good_no
					                                      FROM contract)
						  AND A.del_yn = 'N'
	                      AND B.NO <= 2),
	 paymstat07 AS (SELECT A.poly_no,
                           A.join_good_no,
	                       '납입면제' AS paym_stat_code,
	                       '없음' AS paym_stat_dtcd,
	                       B.paym_date AS strt_date
                    FROM contract A,
                         tb_parcpctr B,
						 tb_pajngdch C
                    WHERE A.cntt_stat_code = '2'
					      AND A.poly_no = B.poly_no
						  AND B.recp_vlid_dvsn = '1'
						  AND B.cncl_date IS NULL
						  AND B.cntt_recp_sqno = C.cntt_recp_sqno
						  AND C.good_code_dtal = A.good_code_dtal
  					      AND C.good_code_item = A.good_code_item
  					      AND C.chng_dvsn_code = '1'
  					      AND C.vlid_dvsn = '1')
SELECT *
FROM (SELECT *
      FROM paymstat04
      UNION
      SELECT *
      FROM paymstat05
      UNION
      SELECT *
      FROM paymstat06
      UNION
      SELECT *
      FROM paymstat07)
WHERE strt_date != '99991231'
ORDER BY poly_no,
         join_good_no,
		 strt_date
;


==========================
TAB_COL_LAYOUT SCRIPT

/* 테이블 관리 유저 MARTDATA 사용 조건 */

/*유저 권한 부여*/
GRANT CREATE SESSION TO MARTDATA;
GRANT RESOURCE TO MARTDATA;
GRANT CREATE TABLE TO MARTDATA;
GRANT DROP ANY TABLE TO MARTDATA;


/*모델 데이터 수집용 TABLE 생성 , 총 11개*/
--DROP TABLE MARTDATA.ER_MODEL_MS CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_MODEL_MS
( 
  CATALOG_NAME       VARCHAR2(1000 BYTE) 	NOT NULL,
  MODEL_NAME         VARCHAR2(1000) 	 	NOT NULL ,
  VERSION            NUMBER(22)          	NOT NULL ,
  MODEL_ID           VARCHAR2(1000) 	 	NULL ,
  TARGET_DBMS        VARCHAR2(1000)  	 	NOT NULL ,
  AUTHOR             VARCHAR2(1000) 	 	NULL  ,
  CREATE_DATE        VARCHAR2(8) 	 	NOT NULL  
);

CREATE UNIQUE INDEX XPKER_MODEL_MS ON MARTDATA.ER_MODEL_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC);


--DROP TABLE MARTDATA.ER_SUBJECTAREA_MS CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_SUBJECTAREA_MS
( 
  CATALOG_NAME       VARCHAR2(1000 BYTE)	NOT NULL,
  MODEL_NAME         VARCHAR2(1000)	        NOT NULL,
  VERSION            NUMBER(22)                 NOT NULL,
  SUBJECT_AREA_ID    VARCHAR2(1000)	        NOT NULL,
  SUBJECT_AREA_NAME  VARCHAR2(1000)	 	NULL, 
  DEFINITION         VARCHAR2(1000)		NULL,	
  AUTHOR             VARCHAR2(1000)		NULL,
  CREATE_DATE        VARCHAR2(8) 	 	NOT NULL
);

CREATE UNIQUE INDEX XPKER_SUBJECTAREA_MS ON MARTDATA.ER_SUBJECTAREA_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, SUBJECT_AREA_ID   ASC);


--DROP TABLE MARTDATA.ER_SUBJECTAREA_ENTITY_MS  CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_SUBJECTAREA_ENTITY_MS
(
  CATALOG_NAME       VARCHAR2(1000 BYTE) 	NOT NULL,
  MODEL_NAME         VARCHAR2(1000)	        NOT NULL,
  VERSION            NUMBER(22)                 NOT NULL,
  SUBJECT_AREA_ID    VARCHAR2(1000)	        NOT NULL,
  SUBJECT_AREA_NAME  VARCHAR2(1000)	        NULL,
  ENTITY_ID          VARCHAR2(1000)	        NOT NULL,
  ENTITY_NAME        VARCHAR2(1000)		NULL,
  TABLE_NAME         VARCHAR2(1000)		NULL,
  CREATE_DATE        VARCHAR2(8) 	 	NOT NULL
);

CREATE UNIQUE INDEX XPKER_SUBJECTAREA_ENTITY_MS ON MARTDATA.ER_SUBJECTAREA_ENTITY_MS
(CATALOG_NAME   ASC,MODEL_NAME   ASC, VERSION   ASC, SUBJECT_AREA_ID   ASC,ENTITY_ID   ASC);


--DROP TABLE  MARTDATA.ER_DIAGRAM_MS CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_DIAGRAM_MS
( 
  CATALOG_NAME       VARCHAR2(1000 BYTE)	NOT NULL,  
  MODEL_NAME         VARCHAR2(1000)        	NOT NULL,
  VERSION            NUMBER(22)                 NOT NULL,
  DIAGRAM_ID         VARCHAR2(1000)        	NOT NULL,
  DIAGRAM_NAME       VARCHAR2(1000)		NULL,
  SUBJECT_AREA_ID    VARCHAR2(1000)		NULL,
  SUBJECT_AREA_NAME  VARCHAR2(1000)		NULL,
  CREATE_DATE        VARCHAR2(8) 	 	NOT NULL
);

CREATE UNIQUE INDEX XPKER_DIAGRAM_MS ON MARTDATA.ER_DIAGRAM_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, DIAGRAM_ID   ASC);



--DROP TABLE  MARTDATA.ER_DIAGRAM_ENTITY_MS CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_DIAGRAM_ENTITY_MS
( 
  CATALOG_NAME  VARCHAR2(1000 BYTE)	NOT NULL,    
  MODEL_NAME    VARCHAR2(1000)          NOT NULL,
  VERSION       NUMBER(22)              NOT NULL,
  DIAGRAM_ID    VARCHAR2(1000)          NOT NULL,
  ENTITY_ID     VARCHAR2(1000)          NOT NULL,
  DIAGRAM_NAME  VARCHAR2(1000)		NULL,  
  ENTITY_NAME   VARCHAR2(1000)		NULL,
  TABLE_NAME    VARCHAR2(1000)		NULL,
  CREATE_DATE   VARCHAR2(8)	 	NOT NULL
);
CREATE UNIQUE INDEX XPKER_DIAGRAM_ENTITY_MS ON MARTDATA.ER_DIAGRAM_ENTITY_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, DIAGRAM_ID   ASC,ENTITY_ID   ASC);



--DROP TABLE MARTDATA.ER_ENTITY_MS  CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_ENTITY_MS
(
	CATALOG_NAME         VARCHAR2(1000) NOT NULL ,
	MODEL_NAME           VARCHAR2(1000) NOT NULL ,
	VERSION              NUMBER(22) NOT NULL ,
	ENTITY_ID            VARCHAR2(1000) NOT NULL ,
	ENTITY_NAME          VARCHAR2(1000) NULL ,
	TABLE_NAME           VARCHAR2(1000) NULL ,
	LOGICAL_ONLY         VARCHAR2(1000) NULL ,
	DEFINITION           VARCHAR2(4000) NULL ,
	ILM대상여부          VARCHAR2(4000) NULL ,
	백업기간개월수       VARCHAR2(4000) NULL ,
	보관기간개월수       VARCHAR2(4000) NULL ,
	보관기간판단조건     VARCHAR2(4000) NULL ,
	비표준여부           VARCHAR2(4000) NULL ,
	뷰여부               VARCHAR2(4000) NULL ,
	INITIALROWS          VARCHAR2(1000) NULL ,
	MAXROWS              VARCHAR2(1000) NULL ,
	GROWBY               VARCHAR2(1000) NULL ,
	CREATE_DATE          VARCHAR2(8) NULL 
);

CREATE UNIQUE INDEX XPKER_ENTITY_MS ON MARTDATA.ER_ENTITY_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, ENTITY_ID   ASC);


--DROP TABLE MARTDATA.ER_ATTRIBUTE_MS  CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_ATTRIBUTE_MS
(
	CATALOG_NAME         VARCHAR2(1000) NOT NULL ,
	MODEL_NAME           VARCHAR2(1000) NOT NULL ,
	VERSION              NUMBER(22) NOT NULL ,
	ENTITY_ID            VARCHAR2(1000) NOT NULL ,
	ATTRIBUTE_ID         VARCHAR2(1000) NOT NULL ,
	ENTITY_NAME          VARCHAR2(1000) NULL ,
	TABLE_NAME           VARCHAR2(1000) NULL ,
	ATTRIBUTE_NAME       VARCHAR2(1000) NULL ,
	COLUMN_NAME          VARCHAR2(1000) NULL ,
	ATTRIBUTE_TYPE       VARCHAR2(1000) NULL ,
	NULL_OPTION          VARCHAR2(1000) NULL ,
	DEFAULT_NAME         VARCHAR2(1000) NULL ,
	DEFAULT_VALUE        VARCHAR2(1000) NULL ,
	IS_PK                CHAR(18) NULL ,
	IS_FK                CHAR(18) NULL ,
	DOMAIN_ID            VARCHAR2(1000) NULL ,
	DOMAIN_NAME       	 VARCHAR2(1000) NULL ,
	PHYSICAL_DATA_TYPE   VARCHAR2(1000) NULL ,
	ATTRIBUTE_ORDER      NUMBER(22) NULL ,
	COLUMN_ORDER         NUMBER(22) NULL ,
	PARENT_ATTRIBUTE_REF VARCHAR2(1000) NULL ,
	PARENT_RELATIONSHIP_REF VARCHAR2(1000) NULL ,
	DEFINITION           VARCHAR2(4000) NULL ,
	CREATE_DATE          VARCHAR2(8) NULL 
);

CREATE UNIQUE INDEX XPKER_ATTRIBUTE_MS ON MARTDATA.ER_ATTRIBUTE_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, ENTITY_ID   ASC, ATTRIBUTE_ID   ASC);


--DROP TABLE MARTDATA.ER_DOMAIN_MS  CASCADE CONSTRAINTS;  
CREATE TABLE MARTDATA.ER_DOMAIN_MS
( 
  CATALOG_NAME	    	   	VARCHAR2(1000 BYTE)	NOT NULL,    
  MODEL_NAME   			VARCHAR2(1000)		NOT NULL,
  VERSION      			NUMBER(22)           	NOT NULL,
  DOMAIN_ID    			VARCHAR2(1000)  	NOT NULL,
  DOMAIN_NAME  			VARCHAR2(1000)		NULL,  	
  LOGICAL_DATATYPE             	VARCHAR2(1000)		NULL,
  PHYSICAL_DATATYPE             VARCHAR2(1000)		NULL,
  CREATE_DATE         		VARCHAR2(8)		NOT NULL   
);

CREATE UNIQUE INDEX XPKER_DOMAIN_MS ON MARTDATA.ER_DOMAIN_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, DOMAIN_ID   ASC);


--DROP TABLE MARTDATA.ER_KEYGROUP_MS  CASCADE CONSTRAINTS;  
CREATE TABLE MARTDATA.ER_KEYGROUP_MS
( 
  CATALOG_NAME	  VARCHAR2(1000 BYTE)	NOT NULL,      
  MODEL_NAME      VARCHAR2(1000)   	NOT NULL,
  VERSION         NUMBER(22)            NOT NULL,
  ENTITY_ID       VARCHAR2(1000)        NOT NULL,
  KEYGROUP_ID     VARCHAR2(1000)        NOT NULL,
  KEYMEMBER_ID    VARCHAR2(1000)        NOT NULL,
  ENTITY_NAME     VARCHAR2(1000)	NULL,
  KEYGROUP_NAME   VARCHAR2(1000)	NULL,
  INDEX_NAME      VARCHAR2(1000)	NULL,
  KEYGROUP_TYPE   VARCHAR2(1000)	NULL,
  ATTRIBUTE_NAME  VARCHAR2(1000)	NULL,
  INDEX_ORDER     VARCHAR2(1000)	NULL,
  ATTRIBUTE_ID    VARCHAR2(1000)	NULL,
  CREATE_DATE     VARCHAR2(8)		NOT NULL
);

CREATE UNIQUE INDEX XPKER_KEYGROUP_MS ON MARTDATA.ER_KEYGROUP_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC,VERSION   ASC,ENTITY_ID   ASC,KEYGROUP_ID   ASC,KEYMEMBER_ID   ASC);


--DROP TABLE MARTDATA.ER_RELATIONSHIP_MS  CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_RELATIONSHIP_MS
( 
  CATALOG_NAME	  		        VARCHAR2(1000 BYTE)	NOT NULL,  
  MODEL_NAME                   	VARCHAR2(1000)		NOT NULL,
  VERSION                      	NUMBER(22)       	NOT NULL,
  RELATIONSHIP_ID              	VARCHAR2(1000) 		NOT NULL,
  RELATIONSHIP_NAME            	VARCHAR2(1000)		NULL,
  IDENTIFYING_TYPE             	VARCHAR2(1000)		NULL,
  OPTIONALITY                  	VARCHAR2(1000)		NULL,
  CARDINALITY                  	VARCHAR2(1000)		NULL,
  PARENT_ENTITY_ID            	VARCHAR2(1000)		NULL,
  PARENT_ENTITY_REF            	VARCHAR2(1000)		NULL,
  CHILD_ENTITY_ID             	VARCHAR2(1000)		NULL,
  CHILD_ENTITY_REF             	VARCHAR2(1000)		NULL,
  CREATE_DATE     		        VARCHAR2(8)		NOT NULL
);

CREATE UNIQUE INDEX XPKER_RELATIONSHIP_MS ON MARTDATA.ER_RELATIONSHIP_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, RELATIONSHIP_ID   ASC);


--DROP TABLE MARTDATA.ER_SUBTYPE_MS  CASCADE CONSTRAINTS; 
CREATE TABLE MARTDATA.ER_SUBTYPE_MS
( 
  CATALOG_NAME	    VARCHAR2(1000 BYTE)		NOT NULL,    
  MODEL_NAME        VARCHAR2(1000)		NOT NULL,
  VERSION           NUMBER(22)			NOT NULL,
  SUBTYPE_ID        VARCHAR2(1000)		NOT NULL,
  SUBTYPE_NAME      VARCHAR2(1000)		NULL,
  TYPE              VARCHAR2(1000)		NULL,
  DISCRIMINATOR     VARCHAR2(1000)		NULL,
  RELATIONSHIP_REF  VARCHAR2(1000)		NULL,
  CREATE_DATE       VARCHAR2(8)			NOT NULL
);

CREATE UNIQUE INDEX XPKER_SUBTYPE_MS ON MARTDATA.ER_SUBTYPE_MS
(CATALOG_NAME   ASC, MODEL_NAME   ASC, VERSION   ASC, SUBTYPE_ID   ASC);

/*접속유저를 다른유저로 사용 시 테이블에 권한부여*/
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_MODEL_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_SUBJECTAREA_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_SUBJECTAREA_ENTITY_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_DIAGRAM_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_DIAGRAM_ENTITY_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_ENTITY_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_ATTRIBUTE_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_DOMAIN_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_KEYGROUP_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_RELATIONSHIP_MS TO 접속계정;
GRANT INSERT, UPDATE, DELETE ON MARTDATA.ER_SUBTYPE_MS TO 접속계정;


===================
# 암호화 대상 관리 테이블 #
DROP TABLE MIG_DBSEC_LIST ; 

CREATE TABLE MIG_DBSEC_LIST 
( OWNER VARCHAR2(50), 
  TABLE_NAME VARCHAR2(50), 
  COLUMN_NAME VARCHAR2(50), 
  ATTR_NAME VARCHAR2(500), 
  DOMAIN_NAME VARCHAR2(50), 
  KOR_TYPE_YN VARCHAR2(1), 
  SEC_TYPE_YN VARCHAR2(1),
  JOIN_STR VARCHAR2(500), 
  LIST_DATE DATE
) 
NOLOGGING 
; 


ALTER TABLE MIG_DBSEC_LIST 
RENAME COLUMN MIG_DESC TO JOIN_STR; 


ALTER TABLE MIG_DBSEC_LIST
ADD CONSTRAINTS PK_MIG_DBSEC_LIST PRIMARY KEY 
( TABLE_NAME, COLUMN_NAME ) 
NOLOGGING 
; 

SELECT DOMAIN_NAME, COUNT(*)
FROM MIG_DBSEC_LIST
GROUP BY DOMAIN_NAME 
;


CREATE TABLE MAPKEY_RRNO_U8
(
    SOR_TABLE_NAME VARCHAR2(50) NULL, 
    RRNO_ENC_KR VARCHAR2(2000) NULL,
    RRNO_ENC_U8 VARCHAR2(2000) NULL
); 


ALTER TABLE MAPKEY_RRNO_U8
ADD CONSTRAINTS PK_MAPKEY_RRNO_U8 PRIMARY KEY 
( RRNO_ENC_KR ) 
NOLOGGING
; 



CREATE INDEX MAPKEY_RRNO_U8_IDX01 ON MAPKEY_RRNO_U8 
( SOR_TABLE_NAME ) 
NOLOGGING 
; 



DROP TABLE MIG_SEC_U8_LOG; 

CREATE TABLE MIG_SEC_U8_LOG 
( 
   DOMAIN_NAME VARCHAR2(50),
   TABLE_NAME VARCHAR2(50), 
   COLUMN_NAME VARCHAR2(50),
   NEW_DATA_CNT NUMBER(12), 
   SEC_DATA_CNT NUMBER(12), 
   SEC_ERR_CNT NUMBER(12), 
   PROC_START_DATE DATE, 
   START_DATE DATE, 
   END_DATE DATE, 
   SEC_STATUS VARCHAR2(20), 
   ERR_CODE VARCHAR2(200), 
   ERR_LOG VARCHAR2(4000) 
); 


ALTER TABLE MIG_SEC_U8_LOG 
ADD CONSTRAINTS PK_MIG_SEC_U8_LOG PRIMARY KEY 
( TABLE_NAME, COLUMN_NAME, PROC_START_DATE ) 
USING INDEX 
NOLOGGING 
; 




CREATE TABLE MAPKEY_ADDR_U8
(
    SOR_TABLE_NAME VARCHAR2(50) NULL, 
    ADDR_ENC_KR VARCHAR2(4000) NULL,
    ADDR_ENC_U8 VARCHAR2(4000) NULL
); 

ALTER TABLE MAPKEY_ADDR_U8
ADD CONSTRAINTS PK_MAPKEY_ADDR_U8 PRIMARY KEY 
( ADDR_ENC_KR ) 
NOLOGGING
; 



CREATE INDEX MAPKEY_ADDR_U8_IDX01 ON MAPKEY_ADDR_U8 
( SOR_TABLE_NAME ) 
NOLOGGING 
; 



COMMIT; 


CREATE TABLE MAPKEY_ACNT_U8
(
    SOR_TABLE_NAME VARCHAR2(50) NULL, 
    ACNT_ENC_KR VARCHAR2(4000) NULL,
    ACNT_ENC_U8 VARCHAR2(4000) NULL
); 

ALTER TABLE MAPKEY_ACNT_U8
ADD CONSTRAINTS PK_MAPKEY_ACNT_U8 PRIMARY KEY 
( ACNT_ENC_KR ) 
USING INDEX 
NOLOGGING 
; 


INSERT INTO MAPKEY_ACNT_U8 ( SOR_TABLE_NAME, ACNT_ENC_KR ) 
SELECT DISTINCT 'TB_CSSFM010', ACNT_NO
FROM MAPKEY_TBL_ICMFNFAC10 
; 

COMMIT; 







========================
# 암호화 대상 테스트 쿼리 #

TRUNCATE TABLE MIG_SEC_U8_LOG; 


SELECT A.*
     , ROUND((NVL(A.END_DATE,SYSDATE) - A.START_DATE) * 24 * 60, 1)  MIN_DIFF 
  FROM MIG_SEC_U8_LOG A
 ORDER BY START_DATE DESC
;





EXEC PROC_SEC_RGST; 


SELECT SOR_TABLE_NAME, COUNT(*)
FROM MAPKEY_RRNO_U8
GROUP BY SOR_TABLE_NAME; 


SELECT * 
FROM MIG_SEC_U8_LOG; 


DELETE FROM MAPKEY_RRNO_U8 
 WHERE SOR_TABLE_NAME <> 'IDENTIFIER'
; 


DELETE FROM MAPKEY_RRNO_U8 
 WHERE SOR_TABLE_NAME = 'TB_CSCJHCNS'
; 


COMMIT; 








============================
## 중복체크 쿼리 잡 생성 ##

--매핑정의서, 메타 비교 불일치 검출 쿼리
WITH TBL AS ( 
SELECT /*+ MATERIALIZE */ 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo
	   --TGT_TBL
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND tbl.OBJ_RMK1 IN ('BSM','ICS','ICM') 
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
)
SELECT 's_m_'||A.TBL_ID||'_Duplicate' session_name, 
'
SELECT SEQ_MIG_DATA_VERIFICATION.NEXTVAL AS SEQ_NO
     , ''중복검증'' AS VRFC_GBN
     , '''||A.TBL_NM||''' AS VRFC_NM
     , SYSDATE AS VRFC_DT
     , '''||A.TBL_ID||''' AS TOBE_TAB
     , NULL AS TOBE_COL
     , NULL AS ASIS_VAL
     , A.TOBE_VAL AS TOBE_VAL
FROM  (
       SELECT COUNT(*) AS TOBE_VAL
       FROM  (
	          SELECT /*+ PARALLEL(A,8) */
                     '||LISTAGG(COL_ID, ', ') WITHIN GROUP (ORDER BY SEQ)||', COUNT(*) CNT
              FROM   '||A.TBL_ID||' A
              GROUP BY '||LISTAGG(COL_ID, ', ') WITHIN GROUP (ORDER BY SEQ)||'
              HAVING COUNT(*) > 1
             ) A
      ) A
' AS SQLSTR
  FROM TBL A 
 WHERE TBL_ID LIKE 'TBL_ICS%'
   AND PK = 'Y'
 GROUP BY TBL_ID, TBL_NM
 ORDER BY 1
;

==================================
META_TBLOBJECT 비교검증



WITH META AS (
SELECT * 
  FROM MIG_TAB_COL_INFO A
 WHERE 1=1 
   AND A.SUB_2 IN ('통합고객관리','통합고객지원','공통','영엽관리')
   AND A.DT = TRUNC(SYSDATE)
), OBJ AS (
SELECT A.TABLE_NAME 
     , B.COLUMN_ID 
	 , B.COLUMN_NAME 
	 , C.COMMENTS AS ATTR_NAME
	 , CASE WHEN B.DATA_TYPE = 'NUMBER' THEN B.DATA_TYPE ||'('||B.DATA_PRECISION||')' 
	        WHEN B.DATA_TYPE = 'DATE' THEN B.DATA_TYPE
			ELSE B.DATA_TYPE||'('||B.DATA_LENGTH||')'
	   END DATA_TYPE 
	 , CASE WHEN D.COLUMN_NAME IS NOT NULL THEN 'Y' 
	   END IS_PK
  FROM ALL_TAB_COMMENTS A 
     , ALL_TAB_COLUMNS B 
	 , ALL_COL_COMMENTS C 
	 , (
		SELECT A.TABLE_NAME
			 , B.COLUMN_NAME 
			 , B.POSITION
		  FROM ALL_CONSTRAINTS A 
			 , ALL_CONS_COLUMNS B 
		 WHERE A.OWNER = 'TRG01' 
		   AND A.OWNER = B.OWNER 
		   AND A.CONSTRAINT_NAME = B.CONSTRAINT_NAME 
		   AND A.CONSTRAINT_TYPE = 'P' 
       ) D 
 WHERE 1=1 
   AND A.OWNER = 'TRG01' 
   AND A.OWNER = B.OWNER
   AND A.TABLE_NAME = B.TABLE_NAME
   AND B.OWNER = C.OWNER
   AND B.TABLE_NAME = C.TABLE_NAME
   AND B.COLUMN_NAME = C.COLUMN_NAME 
   AND B.TABLE_NAME = D.TABLE_NAME (+) 
   AND B.COLUMN_NAME = D.COLUMN_NAME (+) 
), LST AS ( 
SELECT A.SUB_2
	 , A.TABLE_NM
	 , A.TABLE_NM_KR 
	 , A.COLUMN_NO 
	 , A.COLUMN_NM 
	 , A.COLUMN_NM_KR 
	 , A.DATA_TYPE 
	 , A.PK 
	 , B.TABLE_NAME
	 , B.COLUMN_ID
	 , B.COLUMN_NAME 
	 , B.ATTR_NAME
	 , B.DATA_TYPE AS OBJ_DATA_TYPE 
	 , B.IS_PK 
  FROM META A 
	 , OBJ B 
 WHERE 1=1 
   AND A.TABLE_NM = B.TABLE_NAME (+) 
   AND A.COLUMN_NM = B.COLUMN_NAME (+) 
 ORDER BY A.SUB_2 
        , A.TABLE_NM
		, A.COLUMN_NO 
) 
SELECT * 
  FROM (
		SELECT CASE WHEN A.COLUMN_NO <> A.COLUMN_ID THEN '컬럼순서변경' 
			   END DFF_1 
			 , CASE WHEN A.DATA_TYPE <> A.OBJ_DATA_TYPE THEN '데이터타입변경' 
			   END DFF_2 
			 , CASE WHEN A.PK <> A.IS_PK THEN 'pk변경' 
			   END DFF_3 
			 , CASE WHEN A.COLUMN_ID IS NULL THEN '컬럼추가' 
			   END DFF_4 
			 , A.*
		  FROM LST A 
		 WHERE 1=1 
       ) 
 WHERE DFF_1 IS NOT NULL
    OR DFF_2 IS NOT NULL
    OR DFF_3 IS NOT NULL
    OR DFF_4 IS NOT NULL
 ORDER BY TABLE_NM
        , COLUMN_NO 
;




=======================
mig-dev 비교쿼리

WITH LST AS (
SELECT 'TBL_ICMPSCCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMPSCCU11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMPSCDH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMPSCFR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMPSCFR11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTDAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTDPC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTDOR04' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTDOR02' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTDOR06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTDOR08' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCADCP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCADPE10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCADPF10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCADPP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCADPW10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCADVP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRCE10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRCR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRCU20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRGN10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRGR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRGR20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRID10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRIR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRPN10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRPS10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCCRPS20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMFNFAC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMFNFCC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMFNFSM10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMFNFSR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTAC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTAC20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTAC30' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTAC40' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTCR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTCR20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTDL10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICMCTTTL10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPAD11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPCT11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPCU11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPDF10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPDH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPFR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSPCPFR11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPCC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPMA20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPMA22' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPMC44' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPME01' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPMG06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPMP06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCMPMU03' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCSSCN20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCSSCN21' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCSSCN22' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNAU30' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNCU51' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNFA10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNFA11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNFA12' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNFA14' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNFA15' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNPW01' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNPW02' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCBNPW03' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCPVAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCPVCA10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCPVCD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCPVCH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_ICSCPVCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORG0102' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORG0201' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORG0202' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORGH202' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORG0203' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORG0204' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORGH204' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORG0205' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORGH205' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORGH201' TABLE_NAME FROM DUAL UNION ALL 
SELECT 'TBL_COMORG0206' TABLE_NAME FROM DUAL 
), TRG02 AS ( 
SELECT A.TABLE_NAME 
	 , B.COLUMN_NAME 
	 , B.COLUMN_ID 
	 , B.DATA_TYPE 
	 , CASE WHEN B.DATA_TYPE = 'NUMBER' THEN DATA_PRECISION 
	        WHEN B.DATA_TYPE IN ('VARCHAR2','CHAR') THEN DATA_LENGTH 
	   END DATA_LENGTH 
	 , NULLABLE 
  FROM LST A 
     , ALL_TAB_COLUMNS B 
 WHERE A.TABLE_NAME = B.TABLE_NAME 
   AND B.OWNER = 'TRG02' 
), DCUS AS ( 
SELECT A.TABLE_NAME 
	 , B.COLUMN_NAME 
	 , B.COLUMN_ID 
	 , B.DATA_TYPE 
	 , CASE WHEN B.DATA_TYPE = 'NUMBER' THEN DATA_PRECISION 
	        WHEN B.DATA_TYPE IN ('VARCHAR2','CHAR') THEN DATA_LENGTH 
	   END DATA_LENGTH 
	 , NULLABLE 
  FROM LST A 
     , ALL_TAB_COLUMNS@DL_DCUS B 
 WHERE A.TABLE_NAME = B.TABLE_NAME 
   AND B.OWNER IN ('ICMOWN', 'ICSOWN') 
)
SELECT * 
  FROM (
SELECT CASE WHEN A.COLUMN_ID <> B.COLUMN_ID THEN '컬럼순서오류' END AS ERR_1
     , CASE WHEN A.DATA_TYPE || A.DATA_LENGTH <> B.DATA_TYPE || B.DATA_LENGTH AND A.DATA_LENGTH > B.DATA_LENGTH THEN '데이터타입오류' END ERR_2 
	 , CASE WHEN A.NULLABLE <> B.NULLABLE THEN 'NULL오류' END ERR_3 
	 , A.TABLE_NAME AS TRG02_TABLE_NAME
	 , A.COLUMN_NAME AS TRG02_COLUMN_NAME
	 , A.COLUMN_ID AS TRG02_COLUMN_ID
	 , A.DATA_TYPE AS TRG02_DATA_TYPE
	 , A.DATA_LENGTH AS TRG02_DATA_LENGTH
	 , A.NULLABLE AS TRG02_NULLABLE 
	 , B.TABLE_NAME
	 , B.COLUMN_NAME
	 , B.COLUMN_ID
	 , B.DATA_TYPE
	 , B.DATA_LENGTH
	 , B.NULLABLE 
  FROM TRG02 A
     , DCUS B 
 WHERE A.TABLE_NAME = B.TABLE_NAME (+) 
   AND A.COLUMN_NAME = B.COLUMN_NAME (+) 
   AND A.TABLE_NAME NOT LIKE 'TBL_COM%'
 ORDER BY A.TABLE_NAME 
        , A.COLUMN_ID 
	   ) 
 WHERE ERR_1 IS NOT NULL 
    OR ERR_2 IS NOT NULL 
	OR ERR_3 IS NOT NULL 
; 


================================
INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICSCSSSU90 A
(
   MGMT_RFDT
 , CUST_CMMN_LOG_MGMT_SQNO
 , RGSR_EMNB
 , RGST_DTTM
 , RGST_PRGM_ID
 , LAST_CHNR_EMNB
 , LAST_CHNG_DTTM
 , LAST_CHNG_PRGM_ID
 , DLTN_YN
 , TABL_NM
 , CLMN_NM
 , CHNG_PRMK_VAL
 , CHNG_DVSN_CODE
 , CHNG_BEFO_DAT_VAL
 , CHNG_AFTR_DAT_VAL
)
SELECT /*+ PARALLEL (A 8) */ 
	   ( SELECT X.YMDT FROM COPY_YMD X WHERE A.DLNG_DATE = X.YMD ) AS MGMT_RFDT                 /* 관리기준일자 */ 
     , A.SEQ_NO           AS CUST_CMMN_LOG_MGMT_SQNO   /* 고객공통로그관리일련번호 */ 
     , A.LAST_CHMN_MPNO   AS RGSR_EMNB                 /* 등록자사원번호 */ 
     , A.LAST_CHNG_DTTM   AS RGST_DTTM                 /* 등록일시 */ 
     , A.PGM_ID           AS RGST_PRGM_ID              /* 등록프로그램ID */ 
     , A.LAST_CHMN_MPNO   AS LAST_CHNR_EMNB            /* 최종변경자사원번호 */ 
     , A.LAST_CHNG_DTTM   AS LAST_CHNG_DTTM            /* 최종변경일시 */ 
     , A.PGM_ID           AS LAST_CHNG_PRGM_ID         /* 최종변경프로그램ID */ 
     , 'N'                AS DLTN_YN                   /* 삭제여부 */ 
     , A.TABL_NAME        AS TABL_NM                   /* 테이블명 */ 
     , A.COLM_NAME        AS CLMN_NM                   /* 컬럼명 */ 
     , A.CHNG_PK          AS CHNG_PRMK_VAL             /* 변경기본키값 */ 
     , A.CHNG_DVSN        AS CHNG_DVSN_CODE            /* 변경구분코드 */ 
     , A.CHBF_DATA        AS CHNG_BEFO_DAT_VAL         /* 변경이전데이터값 */ 
     , A.CHAF_DATA        AS CHNG_AFTR_DAT_VAL         /* 변경이후데이터값 */ 
  FROM TB_CSCOMLOG A 
 WHERE 1=1 
; 

COMMIT; 

=================================
매핑정의서_메타 불일치 검출_20200522


--매핑정의서, 메타 비교 불일치 검출 쿼리


--매핑정의서, 메타 비교 불일치 검출 쿼리
WITH TGT_TBL AS
 ( 
    SELECT 'TBL_ICM%' AS TBL FROM DUAL 
	--UNION ALL 
    --SELECT 'TBL_BSM%' AS TBL FROM DUAL 
 ) 
,META_1 AS
(
--모델  컬럼조회 쿼리 (매핑정의서 존재 테이블만 조회)
SELECT /*+ MATERIALIZE */ 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo,
	   TGT_TBL
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND tbl.OBJ_RMK1 IN ('BSM','ICS','ICM') 
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   --    and tbl.object_id = 1324418
	   AND TBL.ABBR_NAME LIKE TGT_TBL.TBL --고객계
	   AND TBL.ABBR_NAME IN ( SELECT TAR_TBL_ID FROM TB_MAP_MST ) --MAPPING존재 테이블만 
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
--ORDER  BY TBL.ABBR_NAME , col.obj_seq						  
)
, MAPPING_1 AS
 (
 --매핑정의서 조회
SELECT /*+ MATERIALIZE */ 
       A.TAR_TBL_ID    AS TBL_ID
     , A.TAR_TBL_NM    AS TBL_NM
     , ROW_NUMBER() OVER (PARTITION BY A.TAR_TBL_ID ORDER BY REG_SEQ ASC) AS SEQ  --순서오류 수정 
	 , B.TAR_COL_ID    AS COL_ID
	 , B.TAR_COL_NM    AS COL_NM
	 , B.TAR_PK        AS PK
	 , B.TAR_DATA_TYPE AS DATATYPE
	 , B.TAR_LENGTH    AS LEN
	 , B.TAR_NULL      AS NOTNULL
	 , B.SYSTEM_REGISTER_DT
	 , CASE WHEN TRIM(B.TAR_LENGTH) IS NULL THEN B.TAR_DATA_TYPE 
	        ELSE B.TAR_DATA_TYPE || '(' || REPLACE(REPLACE(B.TAR_LENGTH, ' ', ''), ',0', '')  || ')'
		END            AS PDATATYPE	
FROM TB_MAP_MST A, TB_MAP_DTL B, TGT_TBL
WHERE A.TAR_TBL_ID LIKE TGT_TBL.TBL  --고객계 테이블
AND   A.TAR_TBL_ID = B.TAR_TBL_ID 
AND   B.GRP_NO = 1 --GRP 1만 체크
 )
SELECT *
FROM (
		SELECT   
				 CASE WHEN X.COL_NM IS NULL THEN '매핑컬럼 누락|'
				 END ||
				 CASE WHEN Y.COL_NM IS NULL THEN '메타컬럼 미존재|'
				 END ||
				 CASE WHEN X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.COL_ID),'@') <> NVL(UPPER(Y.COL_ID), '@')  THEN '영문컬럼 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PK),'@') <> NVL(UPPER(Y.PK), '@')  THEN 'PK 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(X.SEQ, 0) <> NVL(Y.SEQ, 0)  THEN '순서 불일치|'
				 END ||	
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PDATATYPE),'@') <> NVL(UPPER(Y.PDATATYPE), '@')  THEN '타입길이 불일치|'
				 END ||			 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.NOTNULL),'@') <> NVL(UPPER(Y.NOTNULL), '@')  THEN 'NOTNULL 불일치|'
				 END 		 
						   AS "불일치사유"
			   , X.TBL_ID
			   , X.TBL_NM
			   , X.SEQ
			   , X.COL_ID
			   , X.COL_NM
			   , X.PK
			   , X.PDATATYPE	  
			   , X.NOTNULL
			   , Y.TBL_ID    AS TBL_ID_META
			   , Y.TBL_NM    AS TBL_NM_META
			   , Y.SEQ       AS SEQ_META
			   , Y.COL_ID    AS COL_ID_META
			   , Y.COL_NM    AS COL_NM_META
			   , Y.PK        AS PK_META
			   , Y.PDATATYPE AS PDATATYPE_META	  
			   , Y.NOTNULL   AS NOTNULL_META
		FROM MAPPING_1 X FULL OUTER JOIN META_1 Y
		ON  (X.TBL_ID = Y.TBL_ID AND X.COL_NM = Y.COL_NM ) -- 매칭 조건 테이블 물리명, 컬럼한글명
		ORDER BY X.TBL_ID, X.SEQ, Y.TBL_ID, Y.SEQ
     )
WHERE "불일치사유" IS NOT NULL	 
AND TBL_ID NOT LIKE 'TBL_ICMCQL%'
ORDER BY NVL(TBL_ID,TBL_ID_META), NVL(TBL_ID_META,TBL_ID)
       , SEQ_META
;





======================
매핑정의서_메타 불일치 검출_20201104

--매핑정의서, 메타 비교 불일치 검출 쿼리
WITH META_1 AS
(
--모델  컬럼조회 쿼리 (매핑정의서 존재 테이블만 조회)
SELECT /*+ MATERIALIZE */ 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND tbl.OBJ_RMK1 IN ('COM','ICS','ICM') 
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   AND TBL.ABBR_NAME IN ( SELECT TAR_TBL_ID FROM TB_MAP_MST ) --MAPPING존재 테이블만 
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
--ORDER  BY TBL.ABBR_NAME , col.obj_seq						  
)
, MAPPING_1 AS
 (
 --매핑정의서 조회
SELECT /*+ MATERIALIZE */ 
       A.TAR_TBL_ID    AS TBL_ID
     , A.TAR_TBL_NM    AS TBL_NM
     , ROW_NUMBER() OVER (PARTITION BY A.TAR_TBL_ID ORDER BY REG_SEQ ASC) AS SEQ  --순서오류 수정 
	 , B.TAR_COL_ID    AS COL_ID
	 , B.TAR_COL_NM    AS COL_NM
	 , B.TAR_PK        AS PK
	 , B.TAR_DATA_TYPE AS DATATYPE
	 , B.TAR_LENGTH    AS LEN
	 , B.TAR_NULL      AS NOTNULL
	 , B.SYSTEM_REGISTER_DT
	 , CASE WHEN TRIM(B.TAR_LENGTH) IS NULL THEN B.TAR_DATA_TYPE 
	        ELSE B.TAR_DATA_TYPE || '(' || REPLACE(REPLACE(B.TAR_LENGTH, ' ', ''), ',0', '')  || ')'
		END            AS PDATATYPE	
FROM TB_MAP_MST A, TB_MAP_DTL B
WHERE A.TAR_TBL_ID = B.TAR_TBL_ID 
AND   B.GRP_NO = 1 --GRP 1만 체크
 )
SELECT *
FROM (
		SELECT   
				 CASE WHEN X.COL_NM IS NULL THEN '매핑컬럼 누락|'
				 END ||
				 CASE WHEN Y.COL_NM IS NULL THEN '메타컬럼 미존재|'
				 END ||
				 CASE WHEN X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.COL_ID),'@') <> NVL(UPPER(Y.COL_ID), '@')  THEN '영문컬럼 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PK),'@') <> NVL(UPPER(Y.PK), '@')  THEN 'PK 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(X.SEQ, 0) <> NVL(Y.SEQ, 0)  THEN '순서 불일치|'
				 END ||	
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PDATATYPE),'@') <> NVL(UPPER(Y.PDATATYPE), '@')  THEN '타입길이 불일치|'
				 END ||			 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.NOTNULL),'@') <> NVL(UPPER(Y.NOTNULL), '@')  THEN 'NOTNULL 불일치|'
				 END 		 
						   AS "불일치사유"
			   , NVL(X.TBL_ID, Y.TBL_ID) AS TBL_ID
			   , X.TBL_NM
			   , X.SEQ
			   , X.COL_ID
			   , X.COL_NM
			   , X.PK
			   , X.PDATATYPE	  
			   , X.NOTNULL
			   , Y.TBL_ID    AS TBL_ID_META
			   , Y.TBL_NM    AS TBL_NM_META
			   , Y.SEQ       AS SEQ_META
			   , Y.COL_ID    AS COL_ID_META
			   , Y.COL_NM    AS COL_NM_META
			   , Y.PK        AS PK_META
			   , Y.PDATATYPE AS PDATATYPE_META	  
			   , Y.NOTNULL   AS NOTNULL_META
		FROM MAPPING_1 X FULL OUTER JOIN META_1 Y
		ON  (X.TBL_ID = Y.TBL_ID AND X.COL_NM = Y.COL_NM ) -- 매칭 조건 테이블 물리명, 컬럼한글명
		ORDER BY X.TBL_ID, X.SEQ, Y.TBL_ID, Y.SEQ
     )
WHERE "불일치사유" IS NOT NULL	 
AND TBL_ID LIKE 'TBL_IC%'
AND TBL_ID = 'TBL_ICSCSSVC50'
ORDER BY NVL(TBL_ID,TBL_ID_META), NVL(TBL_ID_META,TBL_ID)
       , SEQ_META
;

=================================
메타기준 테이블생성

--매핑정의서, 메타 비교 불일치 검출 쿼리
WITH TBL AS ( 
SELECT /*+ MATERIALIZE */ 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo
	   --TGT_TBL
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND tbl.OBJ_RMK1 IN ('BSM','ICS','ICM') 
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   --    and tbl.object_id = 1324418
	   --AND TBL.ABBR_NAME LIKE TGT_TBL.TBL --고객계
	   --AND TBL.ABBR_NAME IN ( SELECT TAR_TBL_ID FROM TB_MAP_MST) --MAPPING존재 테이블만
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
)
SELECT 'DROP TABLE '||TBL_ID||'; 
CREATE TABLE '||TBL_ID||' ( 
' || LISTAGG(COL_TXT,  ' , ' ||CHR(13)||CHR(10)) WITHIN GROUP (ORDER BY SEQ) || ' 
)
NOLOGGING ; 
' AS SQL_TXT
FROM (
		SELECT TBL_ID
			 , COL_ID || ' ' || PDATATYPE || ' ' || NOTNULL AS COL_TXT 
			 , SEQ 
			 , ( SELECT LISTAGG (COL_ID, ', ') WITHIN GROUP (ORDER BY SEQ) 
			       FROM TBL B 
				  WHERE A.TBL_ID = B.TBL_ID 
				    AND A.COL_ID = B.COL_ID 
					AND B.PK = 'Y' ) PK_TXT 
		  FROM TBL A 
		 WHERE TBL_ID = :1 
      ) A 
GROUP BY TBL_ID
UNION ALL 
SELECT 'COMMENT ON TABLE '||TBL_ID||' IS '''||TBL_NM||''' ; 
GRANT SELECT, INSERT, UPDATE, DELETE ON '||TBL_ID||' TO MIG02 ; 
--CREATE OR REPLACE SYNONYM '||TBL_ID||' FOR TRG02.'||TBL_ID||' ; ' 
  FROM (
		SELECT 'COMMENT ON COLUMN '||TBL_ID||'.'||COL_ID||' IS '''||COL_NM||''' ; ' CMT_TXT 
			 , TBL_ID
			 , TBL_NM
			 , SEQ 
		  FROM TBL 
		 WHERE TBL_ID = :1 
       ) 
 GROUP BY TBL_ID, TBL_NM
UNION ALL 
SELECT 'COMMENT ON COLUMN '||TBL_ID||'.'||COL_ID||' IS '''||COL_NM||''' ; ' CMT_TXT 
  FROM TBL 
 WHERE TBL_ID = :1 
;




=================================
킬 세션
SELECT A.SESSION_ID 
     , B.SERIAL# SERIAL_NO 
	 , A.OS_USER_NAME
	 , A.ORACLE_USERNAME
	 , B.STATUS 
  FROM V$LOCKED_OBJECT A
     , V$SESSION B 
 WHERE A.SESSION_ID = B.SID
; 

ALTER SYSTEM KILL SESSION '436, 40256' ; 
=========================
테이블 건수확인 쿼리 (2020.07.09)

WITH LST AS (
SELECT 1 SORT_NUM,  'TBL_ICSCMPCC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCPVCH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCTTCR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCTTCR20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTTAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCMPMU03' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTTCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCADPP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSPCPAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSPCPAD11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCCRCR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSPCPFR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSPCPCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMPSCFR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSPCPCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMPSCCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCPVCA10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCADPF10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNPW03' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCADPE10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCMPMA20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCPVCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMFNFSR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCCRCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRIR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMFNFAC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCCRCE10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCCRPN10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCCRPS20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRID10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCTTTL10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMFNFSM10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCPVAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNFA12' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRPS10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCCRCU20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSPCPDF10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCTDAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCSSCN22' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSCMPME01' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCSSCN20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCBNFA10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCBNPW02' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCMPMP06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSCMPMA22' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSPCPCU11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMPSCCU11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCADPW10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNPW01' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTTDL10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCPVCD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSPCPCT11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSPCPFR11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMPSCFR11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRGN10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCTDPC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCMPMG06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSPCPDH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMPSCDH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRGR20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCCRGR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTTAC20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMFNFCC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNCU51' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTTAC40' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCSSCN21' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCADCP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCTTAC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCTDOR04' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTDOR02' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCTDOR06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTDOR08' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCBNFA14' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCADVP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSCMPMC44' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCBNAU30' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTTAC30' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCBNFA11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNFA15' TABLE_NAME FROM DUAL 
)
SELECT 'SELECT /*+ PARALLEL (8) */ '''||TABLE_NAME||''' TABLE_NAME,  COUNT(*) FROM '||OWNER_NAME||'.'||TABLE_NAME||DB_LINK_NAME||' UNION ALL ' AS SQL_TXT 
  FROM ( 
		SELECT A.TABLE_NAME
		     , CASE WHEN A.TABLE_NAME LIKE 'TBL_ICM%' THEN 'ICMOWN'
			        WHEN A.TABLE_NAME LIKE 'TBL_ICS%' THEN 'ICSOWN'
			   END OWNER_NAME
		     , CASE WHEN A.TABLE_NAME LIKE 'TBL_ICM%' THEN '@DL_DCUS'
			        WHEN A.TABLE_NAME LIKE 'TBL_ICS%' THEN '@DL_DICR'
			   END DB_LINK_NAME
			 , LISTAGG (COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY B.COLUMN_ID) COL_TXT 
		  FROM LST A 
			 , ALL_TAB_COLUMNS B 
		 WHERE A.TABLE_NAME = B.TABLE_NAME 
		   AND B.OWNER = 'TRG02' 
		 GROUP BY A.TABLE_NAME 
       ) A 
 WHERE TABLE_NAME LIKE 'TBL_ICM%' 
; 


====================
테이블 복제 쿼리 (2020.07.09)

WITH LST AS (
SELECT 1 SORT_NUM,  'TBL_ICSCMPCC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCPVCH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCTTCR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCTTCR20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTTAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCMPMU03' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTTCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCADPP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSPCPAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSPCPAD11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCCRCR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSPCPFR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSPCPCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMPSCFR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSPCPCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMPSCCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCPVCA10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCADPF10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNPW03' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCADPE10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCMPMA20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCPVCT10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMFNFSR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCCRCU10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRIR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMFNFAC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCCRCE10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCCRPN10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCCRPS20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRID10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCTTTL10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMFNFSM10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCPVAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNFA12' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRPS10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCCRCU20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSPCPDF10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCTDAD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCSSCN22' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSCMPME01' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCSSCN20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCBNFA10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCBNPW02' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCMPMP06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSCMPMA22' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSPCPCU11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMPSCCU11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCADPW10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNPW01' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTTDL10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCPVCD10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSPCPCT11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSPCPFR11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMPSCFR11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRGN10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCTDPC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICSCMPMG06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSPCPDH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMPSCDH10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCCRGR20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCCRGR10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTTAC20' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMFNFCC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNCU51' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTTAC40' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCSSCN21' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCADCP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICMCTTAC10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCTDOR04' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICMCTDOR02' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICMCTDOR06' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTDOR08' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCBNFA14' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICMCADVP10' TABLE_NAME FROM DUAL UNION ALL 
SELECT 5 SORT_NUM,  'TBL_ICSCMPMC44' TABLE_NAME FROM DUAL UNION ALL 
SELECT 1 SORT_NUM,  'TBL_ICSCBNAU30' TABLE_NAME FROM DUAL UNION ALL 
SELECT 2 SORT_NUM,  'TBL_ICMCTTAC30' TABLE_NAME FROM DUAL UNION ALL 
SELECT 3 SORT_NUM,  'TBL_ICSCBNFA11' TABLE_NAME FROM DUAL UNION ALL 
SELECT 4 SORT_NUM,  'TBL_ICSCBNFA15' TABLE_NAME FROM DUAL 
)
SELECT 'INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO '||OWNER_NAME||'.'||TABLE_NAME||DB_LINK_NAME||' A 
( '||COL_TXT||' ) 
SELECT /*+ PARALLEL (A 8) */ 
      '||COL_TXT||' 
FROM '||TABLE_NAME||' A 
; 
COMMIT; 
' SQL_TXT 
  FROM ( 
		SELECT A.TABLE_NAME
		     , CASE WHEN A.TABLE_NAME LIKE 'TBL_ICM%' THEN 'ICMOWN'
			        WHEN A.TABLE_NAME LIKE 'TBL_ICS%' THEN 'ICSOWN'
			   END OWNER_NAME
		     , CASE WHEN A.TABLE_NAME LIKE 'TBL_ICM%' THEN '@DL_DCUS'
			        WHEN A.TABLE_NAME LIKE 'TBL_ICS%' THEN '@DL_DICR'
			   END DB_LINK_NAME
			 , LISTAGG (COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY B.COLUMN_ID) COL_TXT 
		  FROM LST A 
			 , ALL_TAB_COLUMNS B 
		 WHERE A.TABLE_NAME = B.TABLE_NAME 
		   AND B.OWNER = 'TRG02' 
		 GROUP BY A.TABLE_NAME 
       ) A 
 WHERE TABLE_NAME LIKE 'TBL_ICS%' 
; 


==========================
계좌번호 수정

--CREATE TABLE TEMP_ORG_ACNO
--( 
--    CONT_ID NUMBER(19) NULL,
--	ACNT_NO VARCHAR2(50) ,
--	FNNC_ORGN_CODE VARCHAR2(10) NULL, 
--	RGST_DATE VARCHAR2(8)
--) 
--;

INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'DzCNzJwKjBe', '23', '20050805' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'DzCNzJwUZtl', '23', '20140227' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'LjLekxLLLrl', '23', '20010424' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'LseteMgzjrlgcQ', '4', '20051118' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'atzRloltZhc', '23', '20091126' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'atztuqDtztMzC', '90', '20180309' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'gKitbdaKkBkkXZ', '81', '20040216' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'kzkyFxLciBbC', '25', '20020112' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '2377010', 'lKLlkZSLelkje', '20', '20190220' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'DaCtkJkaZBumaZ', '20', '20110520' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'DjQRbLmjQVFL', '238', '20090914' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'DjfNSogtQRu', '53', '20090828' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'DtjhkqDsZlFL', '4', '20100104' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'LaCNSMDLjhwtQ', '20', '20050705' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'MLkBedaszekaC', '45', '20070730' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'MaQlFMMjLlbo', '48', '20090824' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'MceRudkjCBbDXz', '4', '20081205' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'SKLebdwLZrgjC', '20', '20121213' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'SLiVkdSLLtbC', '5', '20130813' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'SLjtzomsiybx', '37', '20120503' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'SszNNYaajlSmaZ', '20', '20030521' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'kKkNFZwsjRFSKk', '4', '20090526' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'kXZtlLlLZVkC', '5', '20130622' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'kXkNboLtzrNgKQ', '4', '20140508' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'lLerboLzZNmck', '48', '20090824' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'lakVNJgLZNFo', '54', '20091221' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'lcjleLmjjBz', '11', '20100105' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'lsjteCDXfBNlXf', '81', '20120509' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'ltQNlYMXft', '53', '20090224' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'ltjlFqgXfRF', '23', '20110808' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'lzerNJMUjBN', '269', '20091013' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'lzerNJkLfVz', '269', '20090814' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5593960', 'wsLhzLljztbase', '81', '20080506' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5601840', 'LKLVcZMLjymtQ', '20', '20061122' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5601840', 'LcZReMStCezMtj', '4', '20090119' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5601840', 'MLeebLmjZtkasQ', '20', '20021129' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5601840', 'kUeRFYatfRu', '20', '20040831' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5625170', 'SckBuCwsjhl', '21', '20020326' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5625170', 'lKkVSokzjBkze', '90', '20180717' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5625170', 'lsCNSJgcZNF', '269', '20090904' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5625170', 'wsLhzLDsQlekXZ', '81', '20040217' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '10017510', 'MUzhzZMsZtb', '20', '20031016' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '10017510', 'MjfBkMMsZtb', '20', '20030111' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '27367790', 'gKitbdgKLhSkUi', '81', '20040216' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '27367790', 'ktituxwzjhSji', '20', '20110211' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '27367790', 'kzkyFxgceeFq', '25', '20000510' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '27367790', 'wtelcCStCezLjQ', '4', '20050922' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '53298660', 'gsjyNqgULNkmaZ', '20', '20060116' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '58625630', 'mUfhFCSULylmLz', '4', '20160428' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '58625630', 'wXjeFqlskrbmaZ', '20', '20170707' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '1054658091', 'gLCrSqlKire', '26', '20070705' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '1054658091', 'lsCNSJLXfRc', '269', '20090914' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '1054658091', 'wsLhzLDcLVSmUj', '81', '20070828' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '1054658091', 'wsLhzLlUfezmUj', '81', '20130726' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '1055418721', 'LseteMMUkBcLKi', '4', '20120201' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '1055418721', 'gXiVbowLzyFJ', '26', '20080710' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '1055418721', 'lsCNSJDtihu', '269', '20090908' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'DaLNeqwKjBe', '5', '20041029' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'DtZhSCwckh', '35', '20140730' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'LzCteJwtZBz', '4', '20100903' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'MtiyeoLtiBSjQ', '11', '20181112' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'SXClNZDLZVl', '26', '20021113' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'SzLBbJkUihS', '11', '20071112' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'asCyNqMjQrko', '4', '20040330' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'gKitbdgtCRkmUj', '81', '20040216' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'gKitbdkXeNuMXQ', '81', '20060131' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'gKitbdkjCRNkUi', '81', '20080731' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'gXiyldkUZellLQ', '20', '20050110' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'gjiluMSskRuo', '25', '20030510' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'gjiluMSskRuo', '81', '20020521' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'kKCludktLlewte', '81', '20150108' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'kzCtkxwazhkq', '4', '19990728' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'lKZyexSaZVu', '20', '20110329' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'lsCNSJajfNe', '269', '20111123' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'mUZebqLUChbC', '25', '19980923' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'mUZebqLUChbC', '81', '19950225' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'makrSdwszVkmKj', '4', '20111117' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'mciBeMwLZrkzj', '12', '20110325' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'mjQRzMlXjNSSKZ', '20', '20080121' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'mjzBSoMjfrFwLz', '12', '20000508' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'wcilkZDsfhbwXi', '81', '20040202' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'wsLhzLSzitugak', '81', '20050131' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'wsLhzLasQlFMXQ', '81', '20080731' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'wsLhzLlXZVlDLj', '81', '20060203' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3002220133', 'wsLhzLwazRewte', '81', '20060131' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '3005621073', 'wKiyeJSLieSmaZ', '20', '19990326' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'DUQeuxgaZru', '5', '19970714' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'DcQBuYDczRlSKZ', '20', '20070410' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'LseteMLzeBNazz', '4', '20040923' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'SjktSdMtCBe', '5', '19970714' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'ajQyzMKL', '240', '20091008' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'gKitbdaXChkkXZ', '81', '20040216' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'gjiluMLKLRlM', '81', '20030611' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'maeVNCSzzl', '240', '20140916' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4001920144', 'wsLhzLmtituwte', '81', '20100305' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'MULBSdaXjhS', '21', '20030625' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'SKZykqMLQtu', '269', '20091008' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'SakreogXelb', '21', '20010710' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'gKitbdlaercwte', '81', '20060131' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'gteruZLaLlumUj', '81', '20141027' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'kjLhFoljQrS', '21', '20070725' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'kjLhFoljQrS', '26', '20120713' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005583874', 'wsLhzLDcZRNmUj', '81', '20090916' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005624374', 'DaClNYkLZNFwXi', '81', '20120607' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005624374', 'LjQBzJlzLNcY', '4', '19960628' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005624374', 'SLZtlJMUQNzLaj', '4', '20091118' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005624374', 'lsCNSJLczez', '269', '20091118' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4005624374', 'makrSdDULyegcZ', '4', '20170510' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4030907094', 'MLZeedlUelktf', '90', '20190712' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4030907094', 'lzZVkxmULrltf', '20', '20120806' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4030907094', 'wUeRcCDXeVFMUL', '4', '20190625' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4040778354', 'DKkNkJMzCtemaZ', '20', '20090203' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4040778354', 'MtkBNoMKzNewte', '81', '20090203' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4040778354', 'gaiVNJgazlklze', '71', '20140711' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '4040778354', 'lLfRzJMszhaaj', '45', '20171017' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5001950545', 'gKitbdaaQBlase', '81', '20040216' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5001950545', 'gjiluMgLjyed', '25', '20011115' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5001950545', 'gjiluMgLjyed', '81', '19960403' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5005606845', 'DzflSdDLkVkmzQ', '20', '20060817' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5005606845', 'gKitbdaceeekUi', '81', '20040611' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5005606845', 'kLkhNLltQVSmaZ', '20', '20020821' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5005606845', 'lKQVeYLzjhu', '5', '20080827' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5005606845', 'lKZreZmsfrk', '5', '20080827' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5005606845', 'laeybdDLLrcd', '89', '20170418' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5005606845', 'lsCNSJmKkeN', '269', '20090904' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5027037005', 'MzzeeLaLCeDtf', '20', '20140416' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5027037005', 'gsLRNJMjehkd', '4', '20040908' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5027037005', 'kXQtuMDzChlmUj', '81', '20090723' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5027037005', 'kzitkMMUetzLXk', '20', '20060829' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5027037005', 'lKkVSoaLjrDtL', '90', '20180928' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5027037005', 'lsCNSJDUZrS', '269', '20090904' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5027037005', 'maeRkZkXLeuDai', '4', '20060526' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'DXCRudkXkrNmaZ', '20', '20041012' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'DceVkZktCtkLz', '11', '20190131' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'DjfReZMjjyFZ', '5', '20130719' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'DsZReoSKZ', '263', '20131007' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'DsZReoaLZhz', '263', '20130705' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'LseteMazjtzScj', '4', '20040913' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'MLZeedDUkBLjL', '90', '20181024' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'aLZhzSKZ', '263', '20150630' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5039504205', 'wsLhzLazkVSase', '81', '20150330' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '5056453755', 'kXztuqaXCRDjk', '20', '20130111' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '6002363746', 'DjQrkowtjBSL', '32', '20010625' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '6002363746', 'lLeVuMmLZRS', '26', '19991216' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '6010017506', 'gKihcCSazrSY', '26', '20160314' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '6010017506', 'mLLrkomjQNF', '20', '20030113' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '6030179166', 'LjiReJLafyux', '4', '20030321' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '6030179166', 'MtztcqMzfhbwXi', '81', '20180108' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '6030179166', 'kUQezdDKQrSSaj', '4', '20120130' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'MjfrFLkszRS', '20', '19990920' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'aUQllMljCeDLi', '4', '19981128' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'gKfylMazktSL', '4', '20000421' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'lKZreZwUitu', '5', '20021031' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'ltLrzJkzftSktL', '4', '20160429' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'msZVFMwXftbM', '5', '20161006' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'mskVNoktLBk', '21', '20010110' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7005580087', 'wLCNlZkjiVFMsk', '4', '19971128' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7026027017', 'DzCNzJmKkru', '23', '20140228' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7026027017', 'MKZhlxLUCVe', '23', '20070723' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7026027017', 'McirlCMcQlwjC', '20', '20170421' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7053298667', 'LLileokUZRltf', '20', '20081127' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7053298667', 'kXetkJatiNSsQ', '20', '20060303' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7053298667', 'mterSJlXzVF', '26', '20060116' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7057145547', 'gKCNSMSjjymsC', '20', '20190715' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7057145547', 'kLQhkYlcihMtL', '20', '20190715' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7058625647', 'lszezCmjZeNaLk', '4', '20160428' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7060824527', 'SjeRzomzjtlwXL', '4', '20140106' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7060824527', 'ajiyzZkczlckUi', '81', '20140509' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '7060824527', 'waZNldmakRSwte', '81', '20140325' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8001971058', 'aXkBzCSjkhl', '5', '19971114' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8001971058', 'wsLhzLLXQNbwXi', '81', '20050207' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005597308', 'DaCRkqLUZtu', '5', '20080414' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005597308', 'DjftzomLQVlasQ', '20', '20081212' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005597308', 'ljZlkJgLzlNmaZ', '31', '20050824' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005597308', 'lzerNJLzCVk', '269', '20081211' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005597308', 'mcQVudgjfRz', '11', '20020307' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005597308', 'wUelbdkXiBkLsi', '4', '20060630' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005611148', 'lKfhlMaKjylkse', '20', '20001103' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005611148', 'mLLhlMmjiyF', '20', '20050526' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005611148', 'mUzRbdStLrNwXe', '20', '20040831' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005621568', 'aULeFCDKzybd', '4', '19990427' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005621568', 'gKitbdkjieeMXQ', '81', '20031010' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005621568', 'gjiluMlKiNko', '81', '19990118' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005621568', 'lsCNSJatkyk', '269', '20110915' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8005621568', 'mtZtFqLjLNe', '5', '19960910' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8026362968', 'SjZtkCaXLNe', '20', '20040813' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8026362968', 'gKQeuZmtLre', '21', '20070619' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8026362968', 'makrSdajiRblUL', '4', '20160721' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8026362968', 'mzZhlJMjehSwLj', '12', '20050518' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8026362968', 'wsLhzLwKeeumUj', '81', '20041008' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8030260728', 'LLileoMsjNwaL', '20', '20180705' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8030260728', 'LsfNuowaflSci', '90', '20200203' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8030260728', 'MKZNzZDtitc', '23', '20130802' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8055458718', 'LXeRuqLtiyud', '238', '20161026' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8055458718', 'SzihuLSaCllje', '20', '20080901' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8055458718', 'aXjRFqkzeeuL', '26', '20160816' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8055458718', 'gXCNuxwXilSo', '26', '20080725' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8055458718', 'gsQhcMaXQreatQ', '20', '20080901' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '8055458718', 'makrSdLaLebDak', '4', '20081218' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'DKZtzLMLfrkzZ', '71', '19990930' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'DcLluxLtkywKz', '90', '20170801' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'LUirNLLciNk', '31', '20080804' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'SXfhNMSKiBk', '11', '19990630' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'aKZrNogjiBSsC', '71', '20000707' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'ateVFZaLzrl', '23', '20020917' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'gKitbdDXCBFkUi', '81', '20040329' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'gKitbdLsLRcMXQ', '81', '20040218' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'gKitbdaKCybwte', '81', '20040216' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'gKitbdkLQNSmUj', '81', '20040412' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'gKitbdmcQBuMjZ', '81', '20030729' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'gXLrNJgUChbLzC', '4', '20070315' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'lsCNFqMKZVlY', '81', '20010901' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'lsCNFqwtjezo', '25', '19991209' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'lsCNFqwtjezo', '81', '20000617' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'lsiRSZMKChFkUf', '4', '20161124' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'lzerNJljklu', '269', '20090921' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'mXLhudMsfRbZ', '5', '20110221' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'makrSdazjtzMse', '4', '20070919' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'mcQtFqmserz', '27', '20010711' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'wsLhzLLseVbkXZ', '81', '20160302' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'wsLhzLSaZrSMjZ', '81', '20180402' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9005586419', 'wsLhzLkzZyFkXZ', '81', '20070621' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9010052149', 'aaLlSJlcCymKf', '90', '20190513' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9010052149', 'kckVbdwKfteL', '4', '20010614' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9010052149', 'lsCNSJmzeyl', '269', '20180828' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9010052149', 'wsLhzLwUQhckXZ', '81', '20200507' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9029270959', 'LskeeMLXZNNq', '81', '20151030' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9029270959', 'gKitbdkLzeekUi', '81', '20130611' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9029270959', 'lcCtzYkLCrcmaZ', '20', '20100206' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9029270959', 'wsLhzLSUCrNwte', '81', '20160426' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9039081769', 'lXjNcZmUjyS', '23', '20040830' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9039081769', 'wsLhzLLUztFkXZ', '81', '20060602' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9039081769', 'wsLhzLlaQNlMXQ', '81', '20050712' ) ; 
INSERT INTO TEMP_ORG_ACNO VALUES ( '9055995529', 'MaihkqmajRkaXj', '4', '20150812' ) ; 

COMMIT; 

SELECT *
  FROM TEMP_ORG_ACNO A 
 WHERE A.CONT_ID = '7026027017'
; 
--234 

-- 계좌 입력

DROP TABLE TEMP_ORG_ACNO_BAK; 


CREATE TABLE TEMP_ORG_ACNO_BAK
AS 
SELECT A.*
     , 9999999999999999999 CONT_ID 
FROM TBL_ICMFNFAC10 A
WHERE 1=2 ; 



INSERT INTO TEMP_ORG_ACNO_BAK
SELECT B.STLM_MEAN_SUID + ROWNUM AS STLM_MEAN_SUID
     , 'MIG' RGSR_EMNB
     , SYSDATE RGST_DTTM
     , 'MIG_ORG_TEST' RGST_PRGM_ID
     , 'MIG' LAST_CHNR_EMNB
     , SYSDATE LAST_CHNG_DTTM
     , 'MIG_ORG_TEST' LAST_CHNG_PRGM_ID
     , 'N' DLTN_YN
     , 0 RGST_TRSC_ID 
     , 0 LAST_TRSC_ID
     , LPAD(FNNC_ORGN_CODE, 3, '0') FNNC_ORGN_CODE
     , NULL FNNC_ORGN_BROC_CODE
     , ACNT_NO
     , 'ORG_TEST' AS ACHR_NM
     , 0 ACNT_STTS_CODE -- 정상 
     , NULL ACNT_OPNG_DATE 
     , NULL ACNT_RSCS_DATE
     , SYSDATE - 10 AS TRNN_STRT_DATE
     , NULL TRNN_END_DATE
     , NULL ACNT_RMRK_CNTN
	 , A.CONT_ID 
  FROM TEMP_ORG_ACNO A 
     , ( SELECT MAX(STLM_MEAN_SUID) STLM_MEAN_SUID FROM TBL_ICMFNFAC10 ) B 
 WHERE 1=1
; 

COMMIT; 


INSERT INTO TBL_ICMFNFAC10 
SELECT STLM_MEAN_SUID
     , RGSR_EMNB
     , RGST_DTTM
     , RGST_PRGM_ID
     , LAST_CHNR_EMNB
     , LAST_CHNG_DTTM
     , LAST_CHNG_PRGM_ID
     , DLTN_YN
     , RGST_TRSC_ID
     , LAST_TRSC_ID
     , FNNC_ORGN_CODE
     , FNNC_ORGN_BROC_CODE
     , ACNT_NO
     , ACHR_NM
     , ACNT_STTS_CODE
     , ACNT_OPNG_DATE
     , ACNT_RSCS_DATE
     , TRNN_STRT_DATE
     , TRNN_END_DATE
     , ACNT_RMRK_CNTN
FROM TEMP_ORG_ACNO_BAK
; 

COMMIT; 



INSERT INTO TBL_ICMFNFSM10 
SELECT STLM_MEAN_SUID
     , RGSR_EMNB
     , RGST_DTTM
     , RGST_PRGM_ID
     , LAST_CHNR_EMNB
     , LAST_CHNG_DTTM
     , LAST_CHNG_PRGM_ID
     , DLTN_YN
     , RGST_TRSC_ID
     , LAST_TRSC_ID
	 , TO_DATE('20200101','YYYYMMDD') AS VALD_STRT_DTTM 
	 , TO_DATE('99991231235959','YYYYMMDDHH24MISS') AS VALD_STRT_DTTM 
	 , '001' STLM_MEAN_DVSN_CODE 
	 , NULL CUST_INFO_INPT_PATH_CODE 
  FROM TEMP_ORG_ACNO_BAK; 

COMMIT; 


INSERT INTO TBL_ICMFNFSR10 
SELECT B.STLM_MEAN_RLTS_SUID + ROWNUM 
     , RGSR_EMNB
     , RGST_DTTM
     , RGST_PRGM_ID
     , LAST_CHNR_EMNB
     , LAST_CHNG_DTTM
     , LAST_CHNG_PRGM_ID
     , DLTN_YN
     , RGST_TRSC_ID
     , LAST_TRSC_ID
	 , TO_DATE('20200101','YYYYMMDD') AS VALD_STRT_DTTM 
	 , TO_DATE('99991231235959','YYYYMMDDHH24MISS') AS VALD_STRT_DTTM 
     , A.CONT_ID CUST_SUID
     , A.STLM_MEAN_SUID
     , '001' STLM_MEAN_DVSN_CODE
     , '11' STLM_MEAN_RLTS_TYPE_CODE
  FROM TEMP_ORG_ACNO_BAK A 
     , ( SELECT MAX(STLM_MEAN_RLTS_SUID) STLM_MEAN_RLTS_SUID FROM TBL_ICMFNFSR10 ) B 
 WHERE 1=1
; 


COMMIT; 



--DROP TABLE TEMP_ORG_ACNTNO_BAK; 
--
--CREATE TABLE TEMP_ORG_ACNTNO_BAK
--AS 
--SELECT DISTINCT 
--       A.CONT_ID
--	 , A.ACNT_NO
--	 , LPAD(A.FNNC_ORGN_CODE, 3, '0') FNNC_ORGN_CODE
--     , C.STLM_MEAN_SUID
--	 , C.ACNT_NO AS QA_ACNT_NO
--  FROM TEMP_ORG_ACNO A 
--     , TBL_ICMFNFSR10 B 
--	 , TBL_ICMFNFAC10 C 
-- WHERE 1=1 
--   AND A.CONT_ID = B.CUST_SUID 
--   AND B.VALD_END_DTTM = TO_DATE('99991231235959','YYYYMMDDHH24MISS') 
--   AND B.STLM_MEAN_SUID = C.STLM_MEAN_SUID 
--   AND LPAD(A.FNNC_ORGN_CODE, 3,'0') = C.FNNC_ORGN_CODE 
--   AND A.CONT_ID = '7026027017'
--; 
--

SELECT CONT_ID, ACNT_NO, COUNT(*)
FROM TEMP_ORG_ACNTNO_BAK
GROUP BY CONT_ID, ACNT_NO
HAVING COUNT(*) > 1 ; 

SELECT * 
FROM TEMP_ORG_ACNTNO_BAK A
WHERE CONT_ID = '7005580087'
AND A.ACNT_NO = 'wLCNlZkjiVFMsk' 
;


-- 변환 
SELECT DISTINCT 'UPDATE TBL_ICMCCRID10 SET INID_VAL = '''||REF_NUM||''' WHERE INID_SUID = '''||INID_SUID||''' AND IDNR_DVSN_CODE = ''11'' ; ' STR
     , A.*
  FROM TEMP_ORG_RRNO_BAK A 
; 


-- 복구 
SELECT DISTINCT 'UPDATE TBL_ICMCCRID10 SET INID_VAL = '''||REF_NUM||''' WHERE INID_SUID = '''||INID_SUID||''' AND IDNR_DVSN_CODE = ''11''  ; ' STR
     , A.*
  FROM TEMP_ORG_RRNO_BAK A 
; 




========================
외국인등록번호_(오류)

--CREATE TABLE MIG02.TEMP_ORG_FRNR
--(
--    CONT_ID NUMBER(19) NULL,
--    REF_NUM VARCHAR2(20) NULL
--)
--; 
--

INSERT INTO TEMP_ORG_FRNR VALUES ('2377010', '7201061aLzlNM' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5593960', '7112121kLztbo' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5601840', '7210141DskRSo' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5625170', '7807282MaLeSL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('10017510', '6601201kzfeuY' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('27367790', '7405191DcCVFY' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('31899990', '9303231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('50238840', '7201012mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('52292650', '6502011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('53298660', '7703181kLkBcx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('58625630', '8202241DUkNSq' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('58625630', '8202241kzQRSd' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('58625630', '8202241DUkNSq' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('61662240', '8402021mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('62098810', '6412151mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1031899991', '9303231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1038086851', '6602101mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1050250631', '6302191mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1051882451', '7011011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1051882451', '6911011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1052142351', '6702221mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1053308671', '7905131mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1054658091', '8008261ScfVuM' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1055418721', '8205111Dczrbo' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1061241121', '8009101mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1061989831', '7801011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1062098961', '7311011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('1062553691', '8102041mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2039535542', '7301241mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2050451972', '7704221mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2052733102', '7602221mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2052733102', '4511231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2052733102', '7201301mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2052733102', '7401301mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2052733102', '7712281mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2053675332', '8001011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2056441832', '7412031mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2062098642', '7207281mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2062099162', '8012141mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2062099272', '8310181mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2062099332', '8505211mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2062483532', '7106211mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('2062866262', '8110011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3002220133', '7701032kzZRcx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3005621073', '7603232mcirSJ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3031156123', '8902241mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3052951193', '7007101mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3055369053', '8012311mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3061493693', '7003201mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3062098473', '8111051mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3062099003', '7601231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('3062099223', '8206091mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4001920144', '7310102gsClNx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4005583874', '7101271SKeBlM' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4005624374', '7712172SKeluo' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4030907094', '8708292Lsflex' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4040686454', '7912051mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4040778354', '8007141ksjlFx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4052776194', '4600000000000' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4052776194', '4611111mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4052776194', '8202111mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4053007114', '7705071mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062020874', '6502011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062098564', '7709281mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062098654', '7111011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062098684', '6608111mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062098834', '6612111mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062098954', '7306241mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062099004', '7601251mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062099194', '8110191mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('4062836784', '8001021mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5001950545', '6802101gUeeux' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5005606845', '7305111gszNlC' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5027037005', '7309091lUClcJ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5031446595', '9011111mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5032277795', '9503082mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5039086165', '7012041mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5039504205', '7212031gafelZ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5056453755', '8702182aaLeFq' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5062098415', '8402281mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5062098465', '8201181mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5062098825', '6512141mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5062098925', '7201251mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5062099085', '7904091mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5062728165', '6911101mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('5062909415', '8106251mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6002363746', '8001021mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6010017506', '6701071gzzBFY' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6025833566', '7103102gXercM' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6025833566', '7103101mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6030179166', '8309261mXCrSJ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6053372096', '7202231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6056497236', '7911111mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6062098936', '7206301mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('6062099246', '8212211mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7005580087', '7010131gcZhkx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7026027017', '7108011SsCBeZ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7029570787', '8102041mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7052040047', '8311261mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7053298667', '7903251atirzo' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7053449907', '7704271mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7056431967', '7201251mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7057145547', '8201181mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7058625647', '8812032DaihuJ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7060824527', '8809132wXzhbo' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7062098607', '7503161mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7062099157', '8011141mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7062099207', '8202111mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7062099287', '8402021mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7062278027', '7301281mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7062440947', '7711071mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('7062707187', '7903251mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8001971058', '7407161MXjrcM' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8005597308', '7204061LszNNM' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8005611148', '7312241MKktlC' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8005621568', '7606202kjChbZ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8005621568', '7706202kjChbZ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8005621568', '7606202kjChbZ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8024677498', '6901101mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8026362968', '7203261lKzycq' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8026769608', '7302062mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8030260728', '8402172kKzylM' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8050248878', '7108011mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8053449888', '7207301mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8053673548', '7701231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8055458718', '8502192ktjhkJ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8059039338', '8311231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8062098628', '7311281mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8062098828', '6602101mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8062098838', '6702171mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8062099248', '8301051mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8062099278', '8311261mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8062099438', '8912091mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('8062534458', '7303231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9005586419', '7104071DLiebx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9010052149', '7402141SXiNcx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9029270959', '8001091aXjekJ' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9030663049', '8603201mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9031483249', '9101252mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9032171799', '9408241mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9039081769', '7011271wjzyzx' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9039455389', '7209021mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9039641079', '7308131mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9041839689', '9211081mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9050317459', '7903251mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9052353549', '7212211mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9053673549', '8412271mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9055330809', '7305231mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9055995529', '7903201DzjrNd' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9062098609', '7502281mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9062098799', '6406061mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9062099089', '7905131mLLNeL' ); 
INSERT INTO TEMP_ORG_FRNR VALUES ('9062099209', '8202151mLLNeL' ); 

COMMIT; 





CREATE TABLE TEMP_ORG_FRNR_BAK
AS 
SELECT A.* 
     , B.INID_SUID 
	 , C.INID_VAL 
	 , C.IDNR_DVSN_CODE 
  FROM TEMP_ORG_RRNO A 
     , TBL_ICMCCRIR10 B
	 , TBL_ICMCCRID10 C 
 WHERE 1=1 
   AND A.CONT_ID = B.CUST_SUID 
   AND B.VALD_END_DTTM = TO_DATE('99991231235959','YYYYMMDDHH24MISS')
   AND B.INID_SUID = C.INID_SUID 
   AND C.IDNR_DVSN_CODE = '14' 
; 
======================
-- 04. 계좌번호 



INSERT INTO ICSOWN.TBL_ICMFNFAC10@DL_DICR 
SELECT STLM_MEAN_SUID
     , RGSR_EMNB
     , RGST_DTTM
     , RGST_PRGM_ID
     , LAST_CHNR_EMNB
     , LAST_CHNG_DTTM
     , LAST_CHNG_PRGM_ID
     , DLTN_YN
     , RGST_TRSC_ID
     , LAST_TRSC_ID
     , FNNC_ORGN_CODE
     , FNNC_ORGN_BROC_CODE
     , ACNT_NO
     , ACHR_NM
     , ACNT_STTS_CODE
     , ACNT_OPNG_DATE
     , ACNT_RSCS_DATE
     , TRNN_STRT_DATE
     , TRNN_END_DATE
     , ACNT_RMRK_CNTN
FROM TEMP_ORG_ACNO_BAK
; 

COMMIT; 



INSERT INTO ICSOWN.TBL_ICMFNFSM10@DL_DICR  
SELECT STLM_MEAN_SUID
     , RGSR_EMNB
     , RGST_DTTM
     , RGST_PRGM_ID
     , LAST_CHNR_EMNB
     , LAST_CHNG_DTTM
     , LAST_CHNG_PRGM_ID
     , DLTN_YN
     , RGST_TRSC_ID
     , LAST_TRSC_ID
	 , TO_DATE('20200101','YYYYMMDD') AS VALD_STRT_DTTM 
	 , TO_DATE('99991231235959','YYYYMMDDHH24MISS') AS VALD_STRT_DTTM 
	 , '001' STLM_MEAN_DVSN_CODE 
	 , NULL CUST_INFO_INPT_PATH_CODE 
  FROM TEMP_ORG_ACNO_BAK; 

COMMIT; 


INSERT INTO ICSOWN.TBL_ICMFNFSR10@DL_DICR 
SELECT B.STLM_MEAN_RLTS_SUID + ROWNUM 
     , RGSR_EMNB
     , RGST_DTTM
     , RGST_PRGM_ID
     , LAST_CHNR_EMNB
     , LAST_CHNG_DTTM
     , LAST_CHNG_PRGM_ID
     , DLTN_YN
     , RGST_TRSC_ID
     , LAST_TRSC_ID
	 , TO_DATE('20200101','YYYYMMDD') AS VALD_STRT_DTTM 
	 , TO_DATE('99991231235959','YYYYMMDDHH24MISS') AS VALD_STRT_DTTM 
     , A.CONT_ID CUST_SUID
     , A.STLM_MEAN_SUID
     , '001' STLM_MEAN_DVSN_CODE
     , '11' STLM_MEAN_RLTS_TYPE_CODE
  FROM TEMP_ORG_ACNO_BAK A 
     , ( SELECT MAX(STLM_MEAN_RLTS_SUID) STLM_MEAN_RLTS_SUID FROM TBL_ICMFNFSR10 ) B 
 WHERE 1=1
; 


COMMIT; 
===================================
INSERT INTO TEMP_ORG_EMAIL VALUES ('8026362968', '291412116939779000', '678441211693977000', 'cdcV94MdZEvMvIEZd1YqhQ==@naver.com' ) ; 
INSERT INTO TEMP_ORG_EMAIL VALUES ('9029270959', '329037618420402000', '873037618420399000', 'J1wr+Cbooj4zoFjO0U+BEw==@daum.net' ) ; 
INSERT INTO TEMP_ORG_EMAIL VALUES ('9029270959', '222644620686226000', '238444620686223000', 'J1wr+Cbooj4zoFjO0U+BEw==@daum.net' ) ; 
INSERT INTO TEMP_ORG_EMAIL VALUES ('9029270959', '990000094210395', '990000094210395', '_%_DEL_%_' ) ; 

COMMIT; 



SELECT COUNT(*)
  FROM TEMP_ORG_EMAIL; 
--431
;

CREATE TABLE TEMP_ORG_EMAIL_BAK
AS 
SELECT A.* 
     , B.CNPL_SUID 
	 , C.ELCT_LOCT_VAL 
  FROM TEMP_ORG_EMAIL A
     , MIG_TBL_ICMCTTCR10_032 B
	 , TBL_ICMCTTDL10 C 
 WHERE A.CONTACT_METHOD_ID = B.CONTACT_METHOD_ID
   AND B.CNPL_SUID = C.CNPL_SUID 
; 

SELECT * 
FROM TEMP_ORG_EMAIL_BAK;


-- 변환 
SELECT DISTINCT 'UPDATE TBL_ICMCTTDL10 SET ELCT_LOCT_VAL = '''||EMAIL||''' WHERE CNPL_SUID = '''||CNPL_SUID||''' ; ' STR
  FROM TEMP_ORG_EMAIL_BAK A 
; 


-- 복구 
SELECT DISTINCT 'UPDATE TBL_ICMCTTDL10 SET ELCT_LOCT_VAL = '''||ELCT_LOCT_VAL||''' WHERE CNPL_SUID = '''||CNPL_SUID||''' ; ' STR
  FROM TEMP_ORG_EMAIL_BAK A 
; 

--CREATE TABLE MIG02.TEMP_ORG_TEL_NO
--(
--    CONT_ID NUMBER(19) NULL,
--    LOCATION_GROUP_ID NUMBER(19) NULL,
--    CONTACT_METHOD_ID NUMBER(19) NULL,
--    AREA_CODE VARCHAR2(30) NULL,
--    EXCHANGE VARCHAR2(30) NULL,
--    PH_NUMBER VARCHAR2(30) NULL
--)

SELECT COUNT(*)
  FROM TEMP_ORG_TEL_NO A
; 

SELECT COUNT(*)
  FROM TEMP_ORG_TEL_NO A
     , MIG_TBL_ICMCTTCR10_022 B 
 WHERE 1=1 
   AND A.CONTACT_METHOD_ID = B.CONTACT_METHOD_ID 
;

--636

DROP TABLE TEMP_ORG_TEL_NO_BAK;

CREATE TABLE TEMP_ORG_TEL_NO_BAK
AS 
SELECT A.*
     , B.CNPL_SUID
     , C.TLPH_IDNF_CODE
     , C.TLPH_OFNO
     , C.TLPH_SBNO
  FROM TEMP_ORG_TEL_NO A
     , MIG_TBL_ICMCTTCR10_022 B 
	 , TBL_ICMCTTTL10 C 
 WHERE 1=1 
   AND A.CONTACT_METHOD_ID = B.CONTACT_METHOD_ID 
   AND B.CNPL_SUID = C.CNPL_SUID 
;

-- 변환 
SELECT DISTINCT 'UPDATE ICMOWN.TBL_ICMCTTTL10 SET TLPH_SBNO = '''||PH_NUMBER||''' WHERE CNPL_SUID = '''||CNPL_SUID||''' ; ' STR
FROM TEMP_ORG_TEL_NO_BAK A
WHERE EXCHANGE IS NOT NULL 
;

-- 복구 
SELECT DISTINCT 'UPDATE ICMOWN.TBL_ICMCTTTL10 SET TLPH_SBNO = '''||TLPH_SBNO||''' WHERE CNPL_SUID = '''||CNPL_SUID||''' ; ' STR
FROM TEMP_ORG_TEL_NO_BAK A
WHERE EXCHANGE IS NOT NULL 
;



SELECT DISTINCT A.CONT_ID 
  FROM TEMP_ORG_TEL_NO_BAK A
     , TEMP_ORG_EMAIL_BAK B
     , TEMP_ORG_RRNO_BAK C
     , TEMP_ORG_ACNO_BAK D
 WHERE A.CONT_ID = B.CONT_ID
   AND A.CONT_ID = C.CONT_ID
   AND A.CONT_ID = D.CONT_ID 
; 



======================================
코드 변환 작업 (2020.11.13)

--CREATE TABLE MAPKEY_CODE_MAPPING_ICM
--(
--  CODE_ID  VARCHAR2(50), 
--  ASIS_CODE VARCHAR2(50), 
--  TOBE_CODE VARCHAR2(50), 
--  MIG_DATE DATE
--)
--; 
--
--CREATE UNIQUE INDEX PK_MAPKEY_CODE_MAPPING_ICM ON MAPKEY_CODE_MAPPING_ICM
--( CODE_ID, ASIS_CODE ) 
--;
--

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ADDR_KIND_CODE', NULL, '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ADDR_KIND_CODE', '1', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ADDR_KIND_CODE', '211', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ADDR_KIND_CODE', '5', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ADDR_KIND_CODE', '4', '11', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGGB_DVSN_CODE', '1', 'AGE1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGGB_DVSN_CODE', '2', 'AGE2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGGB_DVSN_CODE', '3', 'AGE3', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGGB_DVSN_CODE', '4', 'AGE4', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'FMLY_DVSN_CODE', '1', 'FML1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'FMLY_DVSN_CODE', '2', 'FML2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'FMLY_DVSN_CODE', '3', 'FML3', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'GNDR_DVSN_CODE', '남', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'GNDR_DVSN_CODE', '여', '2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'GNDR_DVSN_CODE', '9', '3', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGNT_IDCD_CODE', '4', '0', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGNT_IDCD_CODE', '011', '0', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGNT_IDCD_CODE', '004', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGNT_IDCD_CODE', '991', '3', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGNT_IDCD_CODE', '017', '2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AGNT_IDCD_CODE', 'N', '9', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLOW_DVSN_CODE', '0', '06', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '1', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '3', '13', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '2', '12', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '9', '99', SYSDATE ) ; 

COMMIT; 



INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_KIND_CODE', 'OUT 02', '02', SYSDATE ) ; 

COMMIT; 



INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CMMN_RCRG_BSWR_DVSN_CODE', '51', '99', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RCVE_DSMG_DVSN_CODE', '2', '0', SYSDATE ) ; 

COMMIT; 



INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNPL_EROR_CNFM_RSLT_CODE', '0', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNPL_EROR_CNFM_RSLT_CODE', 'N', '2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNPL_EROR_CNFM_RSLT_CODE', 'Y', '1', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '17', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '1', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '7', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', 'undefined', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '2', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '4', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '01', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '3', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '6', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '02', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_CHNL_CODE', '212', '11', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '1', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '01', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '08', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '03', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '02', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '10', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '04', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '09', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '07', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '06', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'AML_RLTS_CODE', '05', '11', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '01', '0', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '02', '4', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '011', '0', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '004', '4', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '04', '4', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '03', '4', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '017', '2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_KIND_CODE', '991', '9', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'APCT_RLTS_CODE', '11', '1', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_RSLT_CODE', '1', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_RSLT_CODE', '2', '02', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_RSLT_CODE', '3', '03', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_RSLT_CODE', '4', '04', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_RSLT_CODE', '5', '04', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_RSLT_CODE', '19', '04', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CALL_RSLT_CODE', '99', '04', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CHNL_DVSN_CODE', 'null', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CHNL_DVSN_CODE', '03', '3', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNPL_EROR_CNFM_RSLT_CODE', '0', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNPL_EROR_CNFM_RSLT_CODE', 'N', '2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNPL_EROR_CNFM_RSLT_CODE', 'Y', '1', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CRDT_INFO_LIMT_TYPE_CODE', NULL, '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CRDT_INFO_LIMT_TYPE_CODE', '0', '1', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNTA_MTHO_DVSN_CODE', '00', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNTA_MTHO_DVSN_CODE', '전체', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNTA_MTHO_DVSN_CODE', '문자', '03', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'MRKT_CHNL_DVSN_CODE', '03', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'MRKT_CHNL_DVSN_CODE', 'null', '1', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '001', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '08', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '003', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '005', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '002', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100719', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '004', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091228', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100723', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100721', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100122', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091221', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091222', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100123', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100127', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100708', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091231', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100705', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100707', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091203', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100712', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100713', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100730', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100716', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100720', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100702', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091211', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100714', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100729', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091214', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100706', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100727', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091207', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091209', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100701', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100728', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100709', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100726', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100715', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091201', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20100722', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091204', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091215', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTAC_BSWR_CLSF_CODE', '20091208', '99', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUSL_DVSN_CODE', '26', '1', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CTPR_DVSN_CODE', 'Z', 'A', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'REPT_PATH_CODE', '31', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'REPT_PATH_CODE', '0', '99', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_PRTR_MATR_DVSN_CODE', '1000', '001', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'KT_CHNG_RSLT_CODE', '99', '09', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_RLTS_TYPE_CODE', '88', '99', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_TYPE_CODE', '10', '11', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'DRVN_KNCR_CODE', '99', '09', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '6', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2109', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2918', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '305', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '7', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2118', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '240', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2343', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '969', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '1266', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '527', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '1070', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '101', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '507', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '632', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '940', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '45', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '62', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '552', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '767', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '964', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '1490', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2229', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '787', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '508', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '133', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '158', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2105', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '537', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '59', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '207', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2130', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '984', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '434', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2121', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '595', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '905', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '205', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '4', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '2910', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '501', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '1105', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '846', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '136', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'PSCD_ATRB_CODE', '977', '1', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_VRFC_MTHD_CODE', '11', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_VRFC_MTHD_CODE', '15', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'IDCD_VRFC_MTHD_CODE', '13', '99', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TRNN_MNEY_SURC_DVSN_CODE', '2', '12', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TRNN_MNEY_SURC_DVSN_CODE', '3', '13', SYSDATE ) ; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TRNN_MNEY_SURC_DVSN_CODE', '02', '12', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TRNN_MNEY_SURC_DVSN_CODE', '05', '15', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TRNN_MNEY_SURC_DVSN_CODE', '04', '14', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ENTP_DVSN_CODE', 'B', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ENTP_DVSN_CODE', 'A', '2', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'ENTP_DVSN_CODE', '0', '1', SYSDATE ) ; 

COMMIT; 



INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '본인', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '부부', '12', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '배우자', '12', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '형제', '15', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '부모', '13', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '대표', '21', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '모', '13', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '자녀', '14', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', NULL, '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'RLTS_CODE', '1', '11', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'STCH_DVSN_CODE', '11', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'STCH_DVSN_CODE', '12', '02', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'STCH_DVSN_CODE', '21', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'STCH_DVSN_CODE', '22', '02', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_CNFM_RSLT_CODE', 'CDD', '1', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_CNFM_RSLT_CODE', 'EDD', '2', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'EROR_DVSN_CODE', '1', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'EROR_DVSN_CODE', '2', '02', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'EROR_DVSN_CODE', '3', '03', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TXPR_DVSN_CODE', '1', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TXPR_DVSN_CODE', '2', '02', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TXPR_DVSN_CODE', '3', '03', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TXPR_NO_UNRG_RESN_CODE', '0', '00', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'GROU_CNVN_APRV_STTS_DVSN_CODE', '1', '01', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'GROU_CNVN_APRV_STTS_DVSN_CODE', '0', '03', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'GROU_CNVN_APRV_STTS_DVSN_CODE', '2', '02', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TOCH_RSLT_CODE', 'S', '00', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_CTPR_DVSN_CODE', 'Z', 'A', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '13', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '14', '99', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '15', '13', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '11', '11', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'TLPH_DVSN_CODE', '12', '12', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_PRTR_MATR_DVSN_CODE', '1000', '001', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'STPL_POSE_FORM_CODE', '#', '01', SYSDATE ) ; 

COMMIT; 

INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CNTC_RLPS_DVSN_CODE', '05', '99', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_RCDG_CODE', '.', '4', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_RCDG_CODE', '-', '5', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_RCDG_CODE', '/', '5', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_RCDG_CODE', ',', '5', SYSDATE ) ; 
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'CUST_RCDG_CODE', 'Q', '5', SYSDATE ) ; 

COMMIT; 


INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '602', '0602', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '604', '0604', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '10', '010', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '603', '0603', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '601', '0601', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '606', '0606', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '605', '0605', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '103', '0103', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '106', '0106', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '6', '06', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '8', '08', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '2', '02', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '104', '0104', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '3', '03', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '102', '0102', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '9', '09', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '105', '0105', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '107', '0107', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '5', '05', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '1', '01', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '101', '0101', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '7', '07', SYSDATE ) ;
INSERT INTO MAPKEY_CODE_MAPPING_ICM VALUES ( 'VOC_PRCS_TYPE_SMCF_CODE', '4', '04', SYSDATE ) ;

COMMIT; 




----------------------------------------------------------------------------------------------------- 

DELETE FROM MAPKEY_CODE_MAPPING_ICM
 WHERE CODE_ID = 'VOC_PRCS_TYPE_SMCF_CODE'
;

COMMIT; 

=============================
코드검증쿼리 (2020.11.09)

--TRG02.TBL_ICMCADCP10	고객특이사항	CUST_PRTR_MATR_DVSN_CODE

SELECT * 
  FROM TBL_ICMCADKT10
; 

SELECT MISCVALUE_TP_CD
     , COUNT(*)
  FROM MISCVALUE
 GROUP BY MISCVALUE_TP_CD
 ORDER BY 1
; 




--TB_CDMDM090 CHNG_RESL_CODE 변경결과코드

SELECT CHNG_RESL_CODE, COUNT(*)
  FROM TB_CDMDM090
 GROUP BY CHNG_RESL_CODE
 ORDER BY 1 
;  






--PPREFENTITY  PNP엔티티 SOURCE_IDENT_TP_CD

SELECT SOURCE_IDENT_TP_CD, COUNT(*)
  FROM PPREFENTITY
 GROUP BY SOURCE_IDENT_TP_CD
 ORDER BY 1 
;



--TB_CDMDM060  LAST_SLCT_GRAD  최종선정등급

SELECT LAST_SLCT_GRAD, COUNT(*)
  FROM TB_CDMDM060
 GROUP BY LAST_SLCT_GRAD
 ORDER BY 1 
;



--CONTEQUIV  ADMIN_SYS_TP_CD  원천시스템유형코드

SELECT ADMIN_SYS_TP_CD, COUNT(*)
  FROM CONTEQUIV
 GROUP BY ADMIN_SYS_TP_CD
 ORDER BY 1 
;



--CONTACTREL  REL_TP_CD  관계유형코드

SELECT REL_TP_CD, COUNT(*)
  FROM CONTACTREL
 GROUP BY REL_TP_CD
 ORDER BY 1 
;




--CONTACTEXT  CUST_TYPE_CODE  고객유형코드

SELECT CUST_TYPE_CODE, COUNT(*)
  FROM CONTACTEXT
 GROUP BY CUST_TYPE_CODE
 ORDER BY 1 
;





--ORGEXT  BNTP_CODE  업종코드

SELECT BNTP_CODE, COUNT(*)
  FROM ORGEXT
 GROUP BY BNTP_CODE
 ORDER BY 1 
;



--PERSONEXT  RLNM_CNFM_CODE  실명확인코드

SELECT RLNM_CNFM_CODE, COUNT(*)
  FROM PERSONEXT
 GROUP BY RLNM_CNFM_CODE
 ORDER BY 1 
;



--TB_CSPCH001   DSRT_STDD_CODE  파기기준코드
SELECT DSRT_STDD_CODE, COUNT(*)
  FROM TB_CSPCH001
 GROUP BY DSRT_STDD_CODE
 ORDER BY 1 
;

--TB_UVFNA001  FIOG_KDDV  금융기관종류구분
SELECT FIOG_KDDV, COUNT(*)
  FROM TB_UVFNA001
 GROUP BY FIOG_KDDV
 ORDER BY 1 
;


--TB_UVFNA001  FINA_ORGN_CODE  
SELECT FINA_ORGN_CODE, COUNT(*)
  FROM TB_UVFNA001 A 
 WHERE NOT EXISTS ( SELECT '' FROM TBL_COMCMD0104 B 
                     WHERE A.FINA_ORGN_CODE = B.FNNC_ORGN_CODE ) 
 GROUP BY FINA_ORGN_CODE
 ORDER BY 1 
;

--TB_UVFNA001  RPRS_FIOG_CODE  대표금융기관코드
SELECT RPRS_FIOG_CODE, COUNT(*)
  FROM TB_UVFNA001 A 
 WHERE NOT EXISTS ( SELECT '' FROM TBL_COMCMD0104 B 
                     WHERE A.RPRS_FIOG_CODE = B.FNNC_ORGN_CODE ) 
 GROUP BY RPRS_FIOG_CODE
 ORDER BY 1 
;



--TB_CDCOM030  DRVE_CATP_CODE  운전차종코드
SELECT DRVE_CATP_CODE, COUNT(*)
  FROM TB_CDCOM030
 GROUP BY DRVE_CATP_CODE
 ORDER BY 1 
;




--TB_CDCOM030  INJR_RISK_GRCD  상해위험등급코드
SELECT INJR_RISK_GRCD, COUNT(*)
  FROM TB_CDCOM030
 GROUP BY INJR_RISK_GRCD
 ORDER BY 1 
;


--CONTACTMETHOD
--CASE WHEN CONT_METH_CAT_CD = '40' THEN '001'WHEN CONT_METH_CAT_CD = '41' THEN '002' WHEN CONT_METH_CAT_CD = '42' THEN '003' ELSE '' END
SELECT ELCT_LOCT_DVSN_CODE, COUNT(*)
FROM TBL_ICMCTTDL10
GROUP BY ELCT_LOCT_DVSN_CODE
;


SELECT MAIL_DMAN_CODE, COUNT(*)
FROM TBL_ICMCTTDL10
GROUP BY MAIL_DMAN_CODE
ORDER BY 1
;




--TB_MASCM030  ADDR_STCD  연락처오류확인결과코드
SELECT ADDR_STCD, COUNT(*)
FROM TB_MASCM030
GROUP BY ADDR_STCD
ORDER BY 1
;


--TB_MASCM030  OBTA_ROUT_CODE  가망고객입력경로코드
SELECT OBTA_ROUT_CODE, COUNT(*)
FROM TB_MASCM030
GROUP BY OBTA_ROUT_CODE
ORDER BY 1
;

--TBL_ICSPSCAD11  CNPL_EROR_CNFM_RSLT_CODE  연락처오류확인결과코드
SELECT CNPL_EROR_CNFM_RSLT_CODE, COUNT(*)
FROM TBL_ICSPSCAD11
GROUP BY CNPL_EROR_CNFM_RSLT_CODE
ORDER BY 1
;


--TB_MASCM500  INPT_ROUT_DVSN  입력경로구분
SELECT INPT_ROUT_DVSN, COUNT(*)
FROM TB_MASCM500
GROUP BY INPT_ROUT_DVSN
ORDER BY 1
;


--TB_CSSCS240  ADDR_KDCD  주소종류코드
SELECT ADDR_KDCD, COUNT(*)
FROM TB_CSSCS240
GROUP BY ADDR_KDCD
ORDER BY 1
;

--TB_CSCOMZER   ADDR_KDCD  주소종류코드
SELECT ADDR_KDCD, COUNT(*)
FROM TB_CSCOMZER
GROUP BY ADDR_KDCD
ORDER BY 1
;


--TB_CSSCM510  AGE_RNGE  연령대
SELECT AGE_RNGE, COUNT(*)
FROM TB_CSSCM510
GROUP BY AGE_RNGE
ORDER BY 1
;



--TB_MABGD030  AGGB_DVSN_CODE  연령대구분코드
SELECT AGGB_DVSN_CODE, COUNT(*)
FROM TB_MABGD030
GROUP BY AGGB_DVSN_CODE
ORDER BY 1
;


--TB_MABGD120  AGE_DVCD  연령구분코드
SELECT AGE_DVCD, COUNT(*)
FROM TB_MABGD120
GROUP BY AGE_DVCD
ORDER BY 1
;

--TB_CSSCM500  AGE_RNGE  연령대
SELECT AGE_RNGE, COUNT(*)
FROM TB_CSSCM500
GROUP BY AGE_RNGE
ORDER BY 1
;



--TB_MABGD070  AGGB_DVSN_CODE  연령대구분코드
SELECT AGGB_DVSN_CODE, COUNT(*)
FROM TB_MABGD070
GROUP BY AGGB_DVSN_CODE
ORDER BY 1
;

--TB_MABGD040  AGGB_DVSN_CODE  연령대구분코드
SELECT AGGB_DVSN_CODE, COUNT(*)
FROM TB_MABGD040
GROUP BY AGGB_DVSN_CODE
ORDER BY 1
;

--TB_MACIM500  AGE_RNGE  연령대
SELECT AGE_RNGE, COUNT(*)
FROM TB_MACIM500
GROUP BY AGE_RNGE
ORDER BY 1
;


--TB_MABGD060  AGGB_DVSN_CODE  연령대구분코드
SELECT AGGB_DVSN_CODE, COUNT(*)
FROM TB_MABGD060
GROUP BY AGGB_DVSN_CODE
ORDER BY 1
;

--TB_CSAML010  AGNT_ADDR_KDCD  대리인주소종류코드
SELECT AGNT_ADDR_KDCD, COUNT(*)
FROM TB_CSAML010
GROUP BY AGNT_ADDR_KDCD
ORDER BY 1
;
===========================
### 주소 암호화 변환 쿼리 ###

SELECT * FROM MAPKEY_ADDR_ENC_TMP1; 

TRUNCATE TABLE MAPKEY_ADDR_ENC_TMP1; 


-- ### 암호화 변환 대상 테이블 데이터 입력 작업 ### -- 

INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL (A 8) */ INTO MAPKEY_ADDR_ENC A ( ADDR_ENC_KR ) 
SELECT /*+ PARALLEL (8) */ 
       A.WHOL_ADDR
  FROM TB_CPLNDCUT A 
 WHERE NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC B 
                     WHERE A.WHOL_ADDR = B.ADDR_ENC_KR ) 
; 

COMMIT; 


SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A 
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 




--1 
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A 
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 

--2 


INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 


COMMIT; 

--3
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 

--4
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 

--5
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 

--6
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 

--7
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 

--8
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 
COMMIT; 

--9
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 

--10
INSERT  INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR, ADDR_ENC_U8) 
SELECT ADDR_ENC_KR
	 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
 WHERE 1=1 
   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP1 B 
                     WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
   AND ADDR_ENC_KR IS NOT NULL 
   AND ADDR_ENC_U8 IS NULL 
   AND ROWNUM <= 5000
; 

COMMIT; 


SELECT COUNT(*) FROM MAPKEY_ADDR_ENC_TMP1; 



--INSERT INTO MAPKEY_ADDR_ENC_TMP2 ( ADDR_ENC_KR, ADDR_ENC_U8 ) 
--; 

SELECT A.ADDR_ENC_KR 
     , B.ADDR_ENC_U8
     , NVL(B.ADDR_ENC_U8, A.ADDR_ENC_U8) AS ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC A
     , MAPKEY_ADDR_ENC_TMP1 B
 WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR (+) 
; 

--COMMIT; 
--
--
--SELECT COUNT(*) FROM MAPKEY_ADDR_ENC 
--UNION ALL 
--SELECT COUNT(*) FROM MAPKEY_ADDR_ENC_TMP2 
--; 

	SELECT TABLE_NAME
         , NVL(DETL_ADDR_COL_NM, ADDR_FULL_COL_NM) ADDR_COL_NM 
	  FROM MIG_SUID_ADDR
	; 

SELECT COUNT(*)
FROM MIG_SUID_ADDR; 


DELETE FROM MIG_SEC_U8_LOG 
WHERE DOMAIN_NAME IN ('ENC_ADDR_U8','ADDR_ENC');

COMMIT; 


SELECT *  
  FROM MIG_SEC_U8_LOG
 WHERE DOMAIN_NAME IN ('ENC_ADDR_U8','ADDR_ENC')
 ORDER BY PROC_START_DATE DESC, START_DATE DESC
; 

TRUNCATE TABLE MAPKEY_ADDR_ENC_TMP2; 

SELECT * 
FROM MAPKEY_ADDR_ENC_TMP2
WHERE ADDR_ENC_U8 <> 'SEC_ERROR'
;


INSERT /*+ ENABLE_PARALLEL_DML APEND PARALLEL (A 8) */ INTO MAPKEY_ADDR_ENC_TMP1 A (ADDR_ENC_KR) 
SELECT /*+ PARALLEL (8) */ 
       ADDR_ENC_KR
FROM MAPKEY_ADDR_ENC
WHERE 1=1 
AND ADDR_ENC_U8 IS NULL 
; 


COMMIT; 


DELETE 
FROM MAPKEY_ADDR_ENC
WHERE 1=1 
AND ADDR_ENC_U8 IS NULL 
; 

COMMIT; 


SELECT * 
FROM MAPKEY_ADDR_ENC_TMP1; 




		SELECT /*+ PARALLEL (8) */ 
		       ADDR_ENC_KR
			 , FN_ADDR_SEC (ADDR_ENC_KR) ADDR_ENC_U8 
		  FROM MAPKEY_ADDR_ENC_TMP1 A 
		 WHERE 1=1 
--		   AND NOT EXISTS ( SELECT '' FROM MAPKEY_ADDR_ENC_TMP2 B 
--							 WHERE A.ADDR_ENC_KR = B.ADDR_ENC_KR ) 
		   AND ROWNUM <= 5000
		; 




SELECT /*+ PARALLEL (8) */ 
	   ADDR_ENC_KR
	 , DBSEC.ENC_ADDR(DBSEC.DEC_ADDR@DL_MIG(ADDR_ENC_KR), 'select') ADDR_ENC_U8 
  FROM MAPKEY_ADDR_ENC_TMP1 A 
 WHERE 1=1 
   AND ROWNUM <= 100 
; 


SELECT CONT_ID
     , REF_NUM
     , DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM)  AS "주민등록번호(운영-복호화)"
     , DBSEC.spin_crypto.spindec('P001', REF_NUM)   AS "주민등록번호(복호화)"
	 , DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P001', DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM ) ) )AS "(운영)복호화-(개발)복호화"
FROM IDENTIFIER
WHERE 1=1
  AND ID_TP_CD = '11' 
  AND ROWNUM <= 10 
;


SELECT * 
FROM ALL_SYNONYMS
WHERE SYNONYM_NAME LIKE 'MAPKEY%ENC%'
;




SELECT COUNT(*)
  FROM MAPKEY_ADDR_ENC
 WHERE ADDR_ENC_KR = ADDR_ENC_U8 
; 

2,141,539


=================================
INDEX 작업
SELECT 'ALTER TABLE '||TABLE_NAME||' DROP CONSTRAINTS '||CONSTRAINT_NAME||' ; ' 
  FROM ALL_CONSTRAINTS 
 WHERE OWNER = 'TRG02'
   AND TABLE_NAME = 'TBL_ICMCTDPC10'
   AND CONSTRAINT_TYPE = 'P'
;

SELECT 'ALTER TABLE '||A.TABLE_NAME||' 
ADD CONSTRAINTS '||A.CONSTRAINT_NAME||' PRIMARY KEY 
( '|| LISTAGG(B.COLUMN_NAME, ', ') WITHIN GROUP (ORDER BY POSITION) || ')
USING INDEX 
NOLOGGING 
; '  SQL 
  FROM ALL_CONSTRAINTS A
     , ALL_CONS_COLUMNS B 
 WHERE A.OWNER = 'TRG02'
   AND A.TABLE_NAME = 'TBL_ICMCTDPC10'
   AND A.CONSTRAINT_TYPE = 'P'
   AND A.OWNER = B.OWNER
   AND A.CONSTRAINT_NAME = B.CONSTRAINT_NAME 
 GROUP BY A.TABLE_NAME, A.CONSTRAINT_NAME
;


============================
MAPP_CODE UPDATE

/*
SELECT 'UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '''' 
 WHERE TABLE_NAME = '''||TABLE_NAME||''' 
   AND CODE_ID = '''||CODE_ID||''' ;
COMMIT; 
'
FROM ( 
		SELECT DISTINCT TABLE_NAME, CODE_ID 
		FROM MAPP_CODE_JJC
		WHERE CODE_NAME IS NULL 
     )
;
*/ 


UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '고객분류코드' 
 WHERE TABLE_NAME = 'CONTACT' 
   AND CODE_ID = 'ACCE_COMP_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '통합고객상태코드' 
 WHERE TABLE_NAME = 'CONTACT' 
   AND CODE_ID = 'CLIENT_ST_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '고객구분코드' 
 WHERE TABLE_NAME = 'CONTACT' 
   AND CODE_ID = 'PERSON_ORG_CODE' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '식별번호점검상태코드' 
 WHERE TABLE_NAME = 'CONTACTEXT' 
   AND CODE_ID = 'DCNO_CHEK_STCD' ;
COMMIT; 


UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '최초입력경로코드' 
 WHERE TABLE_NAME = 'CONTACTREL' 
   AND CODE_ID = 'REL_ASSIGN_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '관계유형코드' 
 WHERE TABLE_NAME = 'CONTACTREL' 
   AND CODE_ID = 'REL_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '원천시스템유형코드' 
 WHERE TABLE_NAME = 'CONTEQUIV' 
   AND CODE_ID = 'ADMIN_SYS_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '식별번호상태코드' 
 WHERE TABLE_NAME = 'IDENTIFIER' 
   AND CODE_ID = 'ID_STATUS_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '식별번호구분코드' 
 WHERE TABLE_NAME = 'IDENTIFIER' 
   AND CODE_ID = 'ID_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '' 
 WHERE TABLE_NAME = 'IDENTIFIER' 
   AND CODE_ID = 'SOURCE_IDENT_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '입력경로코드' 
 WHERE TABLE_NAME = 'ORG' 
   AND CODE_ID = 'BUY_SELL_AGR_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '기업형태구분코드' 
 WHERE TABLE_NAME = 'ORG' 
   AND CODE_ID = 'INDUSTRY_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '법인형태코드' 
 WHERE TABLE_NAME = 'ORG' 
   AND CODE_ID = 'ORG_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '업종코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'BNTP_CODE' ;
COMMIT; 


UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '한신평그룹사코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'HSP_GPCP_CODE' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '융자거래자별형태코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'LOAN_TRDR_TPCD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '주거래은행코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'MNTR_BANK_CODE' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '비영리단체인허가구분코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'NFGR_PRAP_DVCD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '기업규모코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'NTPR_SCAL_CODE' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '위험급수코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'RISK_GRAD_CODE' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '표준산업분류코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'STDD_INDT_CLCD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '종구분코드' 
 WHERE TABLE_NAME = 'ORGEXT' 
   AND CODE_ID = 'TYPE_DVCD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '단체고객명유형코드' 
 WHERE TABLE_NAME = 'ORGNAME' 
   AND CODE_ID = 'ORG_NAME_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '입력경로코드' 
 WHERE TABLE_NAME = 'ORGNAME' 
   AND CODE_ID = 'SOURCE_IDENT_TP_CD' ;
COMMIT; 


UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '고객명사용유형코드' 
 WHERE TABLE_NAME = 'PERSONNAME' 
   AND CODE_ID = 'NAME_USAGE_TP_CD' ;
COMMIT; 

UPDATE MAPP_CODE_JJC 
   SET CODE_NAME = '입력경로코드' 
 WHERE TABLE_NAME = 'PERSONNAME' 
   AND CODE_ID = 'SOURCE_IDENT_TP_CD' ;
COMMIT; 


=================================
MIG02.PROC_SEC_ADDR_BAK

CREATE OR REPLACE PROCEDURE MIG02.PROC_SEC_ADDR
AS 

	CURSOR SEC_LIST IS 
	SELECT TABLE_NAME, COLUMN_NAME, JOIN_STR
	  FROM MIG_DBSEC_LIST 
	 WHERE DOMAIN_NAME = '주소'
	   --AND SEC_TYPE_YN = 'Y' 
	   AND ROWNUM <= 10
	; 

	V_TABLE_NAME VARCHAR2(50); 
	V_COLUMN_NAME VARCHAR2(50); 
	V_JOIN_STR VARCHAR2(500); 
	V_SQL VARCHAR2(4000); 
	V_INDEX NUMBER; 

    V_ERR_CODE NUMBER; 
    V_ERR_MSG VARCHAR2(1000); 
	
	V_DOMAIN_NAME VARCHAR2(50); 
	V_NEW_DATA_CNT NUMBER(12); 
	V_SEC_DATA_CNT NUMBER(12); 
	V_SEC_ERR_CNT NUMBER(12); 
	
	V_START_DATE DATE; 
	V_END_DATE DATE; 
	V_PROC_START_DATE DATE; 

	V_VALUES1 VARCHAR2(500); 
	V_VALUES2 VARCHAR2(500); 
	
BEGIN

	V_DOMAIN_NAME := '주소'; 
	V_PROC_START_DATE := SYSDATE; 

	FOR LST IN SEC_LIST 
	LOOP 

		V_START_DATE := SYSDATE; 
	
		V_TABLE_NAME := LST.TABLE_NAME ; 
		V_COLUMN_NAME := LST.COLUMN_NAME ; 
		V_JOIN_STR := LST.JOIN_STR ;
		
		IF LENGTH(V_JOIN_STR) > 3 THEN 
		    V_JOIN_STR := ' AND ' || V_JOIN_STR ;
		END IF; 

        V_SQL := 'INSERT /*+ ENELGL_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO MAPKEY_ADDR_ENC A (SOR_TABLE_NAME, ADDR_ENC_KR) 
SELECT /*+ PARALLEL (8) */ DISTINCT '''||V_TABLE_NAME||''' TABLE_NAME, '||V_COLUMN_NAME||' COLUMN_NAME FROM '||V_TABLE_NAME||' A 
WHERE TRIM('||V_COLUMN_NAME||') IS NOT NULL 
AND NOT EXISTS ( SELECT '''' FROM MAPKEY_ADDR_U8 B WHERE A.'||V_COLUMN_NAME||' = B.ADDR_ENC_KR ) ' || V_JOIN_STR ; 

		EXECUTE IMMEDIATE V_SQL;
		
		V_NEW_DATA_CNT := SQL%ROWCOUNT; 
		
		
		COMMIT; 
		
		V_INDEX := 0; 

		INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS) 
		VALUES 
		(V_DOMAIN_NAME, V_TABLE_NAME, V_COLUMN_NAME, V_NEW_DATA_CNT, V_INDEX, V_PROC_START_DATE, V_START_DATE, NULL, 'RUNNING') ; 

		COMMIT; 

		--### 암호화 변환 ###-- 
		FOR SEC_DATA IN (
			SELECT ADDR_ENC_KR
			  FROM MAPKEY_ADDR_U8 
			 WHERE SOR_TABLE_NAME = V_TABLE_NAME 
			   AND ADDR_ENC_U8 IS NULL 
		) 
		LOOP
		
--			V_VALUES1 := DBSEC.DEC_ADDR@DL_MIG(SEC_DATA.ADDR_ENC_KR) ;
			V_VALUES1 := DBSEC.DEC_ADDR(SEC_DATA.ADDR_ENC_KR) ;
			V_VALUES2 := DBSEC.ENC_ADDR(V_VALUES1,'select') ;
			
			UPDATE MAPKEY_ADDR_U8 
			   SET ADDR_ENC_U8 = V_VALUES2 
			 WHERE ADDR_ENC_KR = SEC_DATA.ADDR_ENC_KR
			; 

			V_INDEX := V_INDEX + 1; 

			IF MOD(V_INDEX, 1000) = 0 THEN 
			
				UPDATE MIG_SEC_U8_LOG 
				   SET SEC_DATA_CNT = V_INDEX 
				 WHERE TABLE_NAME = V_TABLE_NAME
				   AND COLUMN_NAME = V_COLUMN_NAME 
				   AND PROC_START_DATE = V_PROC_START_DATE
				   AND SEC_STATUS = 'RUNNING' ; 
			
				COMMIT; 
				
			END IF; 
			
		END LOOP;
        --### 암호화 변환 END ###-- 

		UPDATE MIG_SEC_U8_LOG 
		   SET SEC_DATA_CNT = V_INDEX 
			 , END_DATE = SYSDATE
			 , SEC_STATUS = 'SUCCESS' 
		 WHERE TABLE_NAME = V_TABLE_NAME
		   AND COLUMN_NAME = V_COLUMN_NAME 
		   AND PROC_START_DATE = V_PROC_START_DATE
		   AND SEC_STATUS = 'RUNNING'  ; 

		COMMIT; 
		
	END LOOP; 


	   
	COMMIT; 


EXCEPTION 
    WHEN others THEN 
      V_ERR_CODE := sqlcode; 
      V_ERR_MSG  := SUBSTR(sqlerrm, 1, 500); 
      DBMS_OUTPUT.PUT_LINE('ERROR_CODE: ' || V_ERR_CODE);
	  DBMS_OUTPUT.PUT_LINE('ERROR_MSG: ' || V_ERR_MSG);

      INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
      VALUES 
      (V_DOMAIN_NAME, V_TABLE_NAME, V_COLUMN_NAME, V_NEW_DATA_CNT, V_INDEX, V_PROC_START_DATE, V_START_DATE, SYSDATE, 'ERROR', V_ERR_CODE, V_ERR_MSG || ' SQL : '||V_SQL) ; 

      COMMIT; 

      RETURN; 
END ;

===========================
PROC_SUID_EMAIL

CREATE OR REPLACE PROCEDURE PROC_SUID_EMAIL
AS 

	CURSOR SUID_LIST IS 
	SELECT TABLE_NAME
         , EMAIL_TYPE
	     , EMAIL_COL_NM
		 , JOIN_STR
	  FROM MIG_SUID_EMAIL 
	 WHERE 1=1 
	   AND ROWNUM <= 10
	; 

    V_ERR_CODE NUMBER; 
    V_ERR_MSG VARCHAR2(1000); 

	V_DOMAIN_NAME VARCHAR2(50); 
	
	V_TABLE_NAME VARCHAR2(50); 
	V_EMAIL_TYPE VARCHAR2(30); 
	V_EMAIL_COL_NM VARCHAR2(30);  
	V_JOIN_STR VARCHAR2(500); 
	
	V_SQL VARCHAR2(4000); 
	V_INDEX NUMBER; 
	V_COUNT NUMBER; 
	V_COLUMN_TYPE VARCHAR2(20); 
	
	V_START_DATE DATE; 
	V_PROC_START_DATE DATE; 

BEGIN 

	V_INDEX := 1; 
	V_PROC_START_DATE := SYSDATE; 
	V_DOMAIN_NAME := 'SUID_EMAIL'; 

	FOR LST IN SUID_LIST 
	LOOP 	
	
		V_TABLE_NAME := LST.TABLE_NAME; 
		V_EMAIL_TYPE := LST.EMAIL_TYPE; 
		V_EMAIL_COL_NM := LST.EMAIL_COL_NM; 
		V_JOIN_STR := LST.JOIN_STR; 
		
		IF V_JOIN_STR IS NOT NULL THEN 
			V_JOIN_STR := '        AND '||V_JOIN_STR ;
		END IF; 
		
		V_START_DATE := SYSDATE;

		V_SQL :=          'INSERT /*+ ENELGL_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO MAPKEY_TBL_ICMCTTCT10_031 A ( CNPL_SUID, ELCT_LOCT_DVSN_CODE, ELCT_LOCT_VAL_KR, MIG_DATE, MIG_TABLE) ' ; 
		V_SQL := V_SQL || 'SELECT NVL(B.MAX_CNPL_SUID,9200000000000000000) + ROWNUM AS CNPL_SUID  ';  
		V_SQL := V_SQL || '     , A.EMAIL_TYPE '; 
		V_SQL := V_SQL || '     , A.EMAIL_COL_NM  '; 
		V_SQL := V_SQL || '     , SYSDATE AS MIG_DATE '; 
		V_SQL := V_SQL || '	 , '''||V_TABLE_NAME||''' AS MIG_TABLE  '; 
		V_SQL := V_SQL || '  FROM ( '; 
		V_SQL := V_SQL || '		SELECT /*+ PARALLEL (8) */  '; 
		V_SQL := V_SQL || '			   DISTINCT  '; 
		V_SQL := V_SQL || '			   A.'||V_EMAIL_COL_NM||'        AS EMAIL_COL_NM '; 
		V_SQL := V_SQL || '			 , '''||V_EMAIL_TYPE||'''        AS EMAIL_TYPE '; 
		V_SQL := V_SQL || '		  FROM '||V_TABLE_NAME||' A  '; 
		V_SQL := V_SQL || '		  WHERE NOT EXISTS ( SELECT '''' FROM MAPKEY_TBL_ICMCTTCT10_031 B  '; 
		V_SQL := V_SQL || '							  WHERE A.'||V_EMAIL_COL_NM||' = B.ELCT_LOCT_VAL_KR '; 
		V_SQL := V_SQL || '								AND B.ELCT_LOCT_DVSN_CODE = '''||V_EMAIL_TYPE||''' ) '; 
		V_SQL := V_SQL || '         AND LENGTH(TRIM('||V_EMAIL_COL_NM||')) > 0 '; 
		V_SQL := V_SQL || V_JOIN_STR;
		V_SQL := V_SQL || '       ) A  '; 
		V_SQL := V_SQL || '	 , ( SELECT MAX(CNPL_SUID) AS MAX_CNPL_SUID FROM MAPKEY_TBL_ICMCTTCT10_031 ) B  '; 
		V_SQL := V_SQL || ' WHERE 1=1  '; 

--		DBMS_OUTPUT.PUT_LINE(V_SQL); 

        EXECUTE IMMEDIATE V_SQL;
		
		V_COUNT := SQL%ROWCOUNT; 		

        INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS) 
		VALUES 
		(V_DOMAIN_NAME, V_TABLE_NAME, V_EMAIL_COL_NM, V_COUNT, 0, V_START_DATE, V_START_DATE, SYSDATE, V_DOMAIN_NAME) ; 

		COMMIT; 
		
		V_INDEX := V_INDEX + 1; 
		
	END LOOP; 
	
	COMMIT; 

EXCEPTION 
    WHEN others THEN 
      V_ERR_CODE := sqlcode; 
      V_ERR_MSG  := SUBSTR(sqlerrm, 1, 200); 
      DBMS_OUTPUT.PUT_LINE('ERROR_CODE: ' || V_ERR_CODE);
	  DBMS_OUTPUT.PUT_LINE('ERROR_MSG: ' || V_ERR_MSG);
	  DBMS_OUTPUT.PUT_LINE('ERROR_SQL: ' || V_SQL);

      INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
      VALUES 
      (V_DOMAIN_NAME, V_TABLE_NAME, V_EMAIL_COL_NM, V_COUNT, 0, SYSDATE, V_START_DATE, SYSDATE, 'ERROR', V_ERR_CODE, V_ERR_MSG) ; 

      RETURN; 
END;
/ 


===================================
PROC_SUID_TELNO

CREATE OR REPLACE PROCEDURE PROC_SUID_TELNO
AS 

	CURSOR SUID_LIST IS 
	SELECT TABLE_NAME
         , TEL1_COL_NM
	     , TEL2_COL_NM
         , TEL3_COL_NM
	     , TELNO_COL_NM
		 , JOIN_STR
	  FROM MIG_SUID_TELNO 
	 WHERE 1=1 
	; 

    V_ERR_CODE NUMBER; 
    V_ERR_MSG VARCHAR2(1000); 

	V_DOMAIN_NAME VARCHAR2(50); 
	
	V_TABLE_NAME VARCHAR2(50); 
	V_TEL1_COL_NM VARCHAR2(20); 
	V_TEL2_COL_NM VARCHAR2(20); 
	V_TEL3_COL_NM VARCHAR2(20);
	V_TELNO_COL_NM VARCHAR2(20);  
	V_JOIN_STR VARCHAR2(500); 
	V_SQL VARCHAR2(4000); 
	V_INDEX NUMBER; 
	V_COUNT NUMBER; 
	V_COLUMN_TYPE VARCHAR2(20); 
	
	V_START_DATE DATE; 
	V_PROC_START_DATE DATE; 

BEGIN 

	V_INDEX := 1; 
	V_PROC_START_DATE := SYSDATE; 
	V_DOMAIN_NAME := 'SUID_TELNO'; 

	FOR LST IN SUID_LIST 
	LOOP 	
	
		V_TABLE_NAME := LST.TABLE_NAME; 
		V_TEL1_COL_NM := LST.TEL1_COL_NM; 
		V_TEL2_COL_NM := LST.TEL2_COL_NM; 
		V_TEL3_COL_NM := LST.TEL3_COL_NM; 
		V_TELNO_COL_NM := LST.TELNO_COL_NM; 
		V_JOIN_STR := LST.JOIN_STR; 
		
		IF V_JOIN_STR IS NOT NULL THEN 
			V_JOIN_STR := '        AND '||V_JOIN_STR ;
		END IF; 
		
		V_START_DATE := SYSDATE;
		
		IF V_TELNO_COL_NM IS NULL THEN 
			
			V_COLUMN_TYPE := 'SPLIT'; 
		
			V_SQL :=          'INSERT /*+ ENELGL_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO MAPKEY_TBL_ICMCTTCT10_021 A ( CNPL_SUID, TLPH_IDNF_CODE, TLPH_OFNO, TLPH_SBNO_KR, MIG_DATE, MIG_TABLE) ' ; 
			V_SQL := V_SQL || 'SELECT NVL(B.MAX_CNPL_SUID,9300000000000000000) + ROWNUM AS CNPL_SUID  ';  
			V_SQL := V_SQL || '     , A.TLPH_IDNF_CODE  '; 
			V_SQL := V_SQL || '     , A.TLPH_OFNO '; 
			V_SQL := V_SQL || '     , A.TLPH_SBNO  '; 
			V_SQL := V_SQL || '     , SYSDATE AS MIG_DATE '; 
			V_SQL := V_SQL || '	 , '''||V_TABLE_NAME||''' AS MIG_TABLE  '; 
			V_SQL := V_SQL || '  FROM ( '; 
			V_SQL := V_SQL || '		SELECT /*+ PARALLEL (A 8) */  '; 
			V_SQL := V_SQL || '			   DISTINCT  '; 
			V_SQL := V_SQL || '			   A.'||V_TEL1_COL_NM||'        AS TLPH_IDNF_CODE '; 
			V_SQL := V_SQL || '			 , A.'||V_TEL2_COL_NM||'        AS TLPH_OFNO '; 
			V_SQL := V_SQL || '			 , A.'||V_TEL3_COL_NM||'        AS TLPH_SBNO '; 
			V_SQL := V_SQL || '		  FROM '||V_TABLE_NAME||' A  '; 
			V_SQL := V_SQL || '		  WHERE NOT EXISTS ( SELECT '''' FROM MAPKEY_TBL_ICMCTTCT10_021 B  '; 
			V_SQL := V_SQL || '							  WHERE A.'||V_TEL1_COL_NM||' = B.TLPH_IDNF_CODE '; 
			V_SQL := V_SQL || '								AND A.'||V_TEL2_COL_NM||' = B.TLPH_OFNO '; 
			V_SQL := V_SQL || '								AND A.'||V_TEL3_COL_NM||' = B.TLPH_SBNO_KR ) '; 
			V_SQL := V_SQL || V_JOIN_STR;
			V_SQL := V_SQL || '       ) A  '; 
			V_SQL := V_SQL || '	 , ( SELECT MAX(CNPL_SUID) AS MAX_CNPL_SUID FROM MAPKEY_TBL_ICMCTTCT10_021 ) B  '; 
			V_SQL := V_SQL || ' WHERE 1=1  '; 
		
		ELSE 
		
			V_COLUMN_TYPE := 'MERGE'; 
		
			V_SQL :=          'INSERT /*+ ENELGL_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO MAPKEY_TBL_ICMCTTCT10_021 A ( CNPL_SUID, TLNO_KR, MIG_DATE, MIG_TABLE) ' ; 
			V_SQL := V_SQL || 'SELECT NVL(B.MAX_CNPL_SUID,9300000000000000000) + ROWNUM AS CNPL_SUID '; 
			V_SQL := V_SQL || '     , A.TLNO  '; 
	 		V_SQL := V_SQL || '     , SYSDATE AS MIG_DATE '; 
			V_SQL := V_SQL || '	    , '''||V_TABLE_NAME||''' AS MIG_TABLE '; 
			V_SQL := V_SQL || '  FROM ( '; 
			V_SQL := V_SQL || '		    SELECT /*+ PARALLEL (A 8) */  '; 
			V_SQL := V_SQL || '			       DISTINCT A.'||V_TELNO_COL_NM||' AS TLNO '; 
			V_SQL := V_SQL || '		      FROM '||V_TABLE_NAME||' A '; 
			V_SQL := V_SQL || '		     WHERE 1=1  '; 
			V_SQL := V_SQL || '	    	   AND A.'||V_TELNO_COL_NM||' IS NOT NULL  '; 
			V_SQL := V_SQL || '	           AND NOT EXISTS ( SELECT '''' FROM MAPKEY_TBL_ICMCTTCT10_021 X  '; 
			V_SQL := V_SQL || '                              WHERE A.'||V_TELNO_COL_NM||' = X.TLNO_KR ) '; 
			V_SQL := V_SQL || V_JOIN_STR;
			V_SQL := V_SQL || '       ) A '; 
			V_SQL := V_SQL || '     , ( SELECT MAX(CNPL_SUID) AS MAX_CNPL_SUID FROM MAPKEY_TBL_ICMCTTCT10_021 ) B  '; 
			V_SQL := V_SQL || ' WHERE 1=1 '; 

        END IF; 
		
        EXECUTE IMMEDIATE V_SQL;
		
		V_COUNT := SQL%ROWCOUNT; 		

        INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS) 
		VALUES 
		(V_DOMAIN_NAME, V_TABLE_NAME, V_COLUMN_TYPE, V_COUNT, 0, V_START_DATE, V_START_DATE, SYSDATE, 'SUID_TELNO') ; 

		COMMIT; 
		
		V_INDEX := V_INDEX + 1; 
		
	END LOOP; 
	
	COMMIT; 

EXCEPTION 
    WHEN others THEN 
      V_ERR_CODE := sqlcode; 
      V_ERR_MSG  := SUBSTR(sqlerrm, 1, 200); 
      DBMS_OUTPUT.PUT_LINE('ERROR_CODE: ' || V_ERR_CODE);
	  DBMS_OUTPUT.PUT_LINE('ERROR_MSG: ' || V_ERR_MSG);

      INSERT INTO MIG_SEC_U8_LOG (DOMAIN_NAME, TABLE_NAME, COLUMN_NAME, NEW_DATA_CNT, SEC_DATA_CNT, PROC_START_DATE, START_DATE, END_DATE, SEC_STATUS, ERR_CODE, ERR_LOG) 
      VALUES 
      (V_DOMAIN_NAME, V_TABLE_NAME, V_COLUMN_TYPE, V_COUNT, 0, SYSDATE, V_START_DATE, SYSDATE, 'ERROR', V_ERR_CODE, V_ERR_MSG) ; 

      RETURN; 
END;
/ 
============================
TBL_ICMCTDAD010 insert query

SELECT 'INSERT INTO TBL_ICMCTDAD010 VALUES ( '''||BLDN_MGMT_NO||'''
     , '''||RGSR_EMNB|||''' 
     , TO_DATE('''||TO_CHAR(RGST_DTTM,'YYYY-MM-DD')||''',''YYYY-MM-DD'') 
     , RGST_PRGM_ID
     , LAST_CHNR_EMNB
     , TO_CHAR(LAST_CHNG_DTTM,'YYYY-MM-DD') LAST_CHNG_DTTM
     , LAST_CHNG_PRGM_ID
     , DLTN_YN
     , RGST_TRSC_ID
     , LAST_TRSC_ID
     , TO_CHAR(VALD_STAR_DTTM,'YYYY-MM-DD') VALD_STAR_DTTM
     , TO_CHAR(VALD_END_DTTM,'YYYY-MM-DD') VALD_END_DTTM
     , CTPR_NM
     , MNCP_NM
     , EMD_NM
     , ROAD_NM
     , UNDG_YN
     , MNBD_MGMT_NO
     , SBBD_MGMT_NO
     , MNBD_NM
     , BLDN_NM_DETL_CNTN
     , NW_PSCD
     , ROAD_NM_PSCD_SQNO
     , LDNB_PSCD_SQNO
     , ODN1_ROAD_NM_ADDR
     , ODN2_ROAD_NM_ADDR
     , RFRC_ITM_CNTN
     , DGLI_NM
     , PSSV_EMD_NM
     , STNO_DVSN_CODE
     , MSTN_HNO
     , SSTN_HNO
     , OLD_PSCD
  FROM TBL_ICMCTDAD10 
 WHERE 
; 


INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO XXXXXXXX A

SELECT /*+ PARALLEL (A 8) */ 

  FROM XXXXXXXX A 
 WHERE 1=1 
; 

COMMIT; 

EXEC DBMS_STATS.GATHER_TABLE_STATS ( 'MIG02', 'MAPKEY_TBL_ICMCTTCT10_021', METHOD_OPT=> 'for all indexed columns', CASCADE => TRUE); 




SELECT A.*
FROM VW_META_DB_COMP_JHL A 
WHERE 1=1 
AND "불일치사유" IS NOT NULL 
AND ( "기준테이블" LIKE 'TBL_IC%' OR "기준테이블" LIKE 'TBL_COM%' ) 
AND LENGTH("기준테이블") = 14
;


SELECT * 
FROM VW_TBL_SCR 
WHERE TBL_ID = 'TBL_COMORGH202'
;



SELECT A.* 
     , ROUND((END_DATE-START_DATE)*24*60*60, 2) RUNTIME
FROM MIG_SEC_U8_LOG A 
WHERE 1=1 
AND START_DATE >= TO_DATE('20201021','YYYYMMDD') 
ORDER BY PROC_START_DATE DESC, START_DATE DESC
;





SELECT A.SID
     , A.SERIAL# 
	 , A.SCHEMANAME
     , C.SQL_TEXT
	 , 'ALTER SYSTEM KILL SESSION '''||A.SID||', '||A.SERIAL#||''' ; ' 
  FROM V$SESSION A 
     , V$PROCESS B 
	 , V$SQLAREA C 
 WHERE 1=1 
   AND A.PADDR = B.ADDR
   AND A.STATUS = 'ACTIVE'
   AND A.SQL_HASH_VALUE = C.HASH_VALUE
   AND A.SQL_ADDRESS = C.ADDRESS
;

SELECT DISTINCT 
       TAR_TBL_ID
     , TAR_COL_ID
	 , TAR_COL_NM
	 , SOUR_TBL_ID
	 , SOUR_TBL_NM 
	 , SOUR_COL_ID
	 , SOUR_COL_NM
FROM TB_MAP_DTL A
WHERE TAR_TBL_ID LIKE 'TBL_IC%'
AND TAR_COL_ID LIKE '%INID_SUID'
ORDER BY 1, 2 
; 




SELECT "기준테이블" 
     , "불일치사유" 
	 , A.TBL_ID
	 , A.TBL_NM
	 , A.SEQ 
	 , A.COL_ID 
	 , A.COL_NM
FROM VW_META_DB_COMP_ICM A 
   , MIG_TBL_20200831 B 
WHERE A.TBL_ID = B.TBL_ID 
AND "불일치사유" IS NOT NULL 
UNION ALL 
SELECT "기준테이블"
     , "불일치사유" 
	 , A.TBL_ID
	 , A.TBL_NM
	 , A.SEQ 
	 , A.COL_ID 
	 , A.COL_NM
FROM VW_META_DB_COMP_ICS A 
   , MIG_TBL_20200831 B 
WHERE A.TBL_ID = B.TBL_ID 
AND "불일치사유" IS NOT NULL 
;

--ETL LIST 
SELECT * 
FROM MIG02.MIG_INFA_SQL
WHERE SUBJ_NAME = 'L01.TRN_ICM' 
OR SUBJ_NAME = 'M01.TRN_ICS'
;
SELECT * 
FROM CMMASV.MIG_INFA_SESS_CONFIG
;


SELECT DISTINCT A.TBL_ID
	 , A.TBL_NM
--	 , A.SEQ 
--	 , A.COL_ID 
--	 , A.COL_NM
FROM VW_META_DB_COMP_JHL A 
   , MIG_TBL_20200831 B 
WHERE A.TBL_ID = B.TBL_ID 
AND "불일치사유" IS NOT NULL 
;

SELECT * 
FROM CMMASV.MIG_INFA_LOG 
;


--## 이행 테이블 카운트 
TRUNCATE TABLE MIG_TAR_COUNT; 
TRUNCATE TABLE MIG_SOR_COUNT; 



SELECT DISTINCT 
'INSERT INTO MIG_TAR_COUNT
SELECT /*+ PARALLEL (A 8) */ '''||A.BIZ_TYPE||''' BIZ_TYPE, '''||A.SUBJECT_AREA_NM||''' AREA_NM, '''||A.TAR_TBL_NM||''' ENTITY_NAME, '''||TAR_TBL_ID||''' TABLE_NAME, COUNT(*) CNT FROM '||TAR_TBL_ID||' A;
' AS "--TXT "
  FROM TB_MAP_MST A 
 WHERE BIZ_TYPE IN ('통합고객관리','통합고객지원','영업관리','공통')
   AND EXISTS ( SELECT '' FROM ALL_TAB_COMMENTS B 
                 WHERE A.TAR_TBL_ID = B.TABLE_NAME ) 
; 



SELECT * 
  FROM MIG_TAR_COUNT A
     , MIG_SOR_COUNT B 
 WHERE A.TABLE_NAME = B.ENTITY_NAME (+) 
 ORDER BY 1, 2, 4
;


WITH LST AS ( 
SELECT BIZ_TYPE
     , SUBJECT_AREA_NM
	 , TAR_TBL_ID
	 , TAR_TBL_NM
	 , COUNT(SOUR_TBL_ID) SOUR_CNT
	 , LISTAGG(SOUR_TBL_ID, ', ') WITHIN GROUP (ORDER BY SOUR_TBL_ID) SOUR_TBL_ID 
  FROM (
		SELECT A.BIZ_TYPE
			 , A.SUBJECT_AREA_NM 
			 , A.TAR_TBL_ID
			 , A.TAR_TBL_NM 
			 , B.SOUR_TBL_ID
		  FROM TB_MAP_MST A 
			 , TB_MAP_DTL B 
		 WHERE 1=1
		   AND A.BIZ_TYPE IN ('통합고객관리','통합고객지원','영업관리','공통')
		   AND A.TAR_TBL_ID = B.TAR_TBL_ID 
		   AND B.TAR_TBL_ID <> 'TB_CDCOM090'
           AND EXISTS ( SELECT '' FROM ALL_TAB_COMMENTS C
                         WHERE A.TAR_TBL_ID = C.TABLE_NAME ) 
		 GROUP BY A.BIZ_TYPE
				, A.SUBJECT_AREA_NM 
				, A.TAR_TBL_ID
				, A.TAR_TBL_NM 
				, B.SOUR_TBL_ID
       ) 
 GROUP BY BIZ_TYPE
        , SUBJECT_AREA_NM
	    , TAR_TBL_ID
        , TAR_TBL_NM
) 
SELECT 
'INSERT INTO MIG_TAR_COUNT
SELECT /*+ PARALLEL (A 8) */ '''||BIZ_TYPE||''' BIZ_TYPE, '''||SUBJECT_AREA_NM||''' AREA_NM, '''||TAR_TBL_NM||''' ENTITY_NAME, '''||TAR_TBL_ID||''' TABLE_NAME, COUNT(*) CNT FROM '||TAR_TBL_ID||' A;
' AS "--TO_TXT "
     , CASE WHEN SOUR_CNT = 1 THEN 'INSERT INTO MIG_SOR_COUNT SELECT /*+ PARALLEL (A 8) */  '''||TAR_TBL_NM||''', '''||SOUR_TBL_ID||''', COUNT(*) CNT FROM '||SOUR_TBL_ID||' A ;  ' 
	   END SOUR_CNT_TXT 
FROM LST A
; 




--## 이행대상 매핑정의서 메타 추출 쿼리 
SELECT BIZ_TYPE
	 , SUBJECT_AREA_NM
	 , TAR_TBL_ID
	 , TAR_TBL_NM
	 , SYSTEM_REGISTER_DT
  FROM (
		SELECT BIZ_TYPE
			 , SUBJECT_AREA_NM
			 , TAR_TBL_ID
			 , TAR_TBL_NM
			 , TO_CHAR(SYSTEM_REGISTER_DT,'YYYY-MM-DD') SYSTEM_REGISTER_DT
			 , ROW_NUMBER() OVER (PARTITION BY TAR_TBL_ID ORDER BY SYSTEM_REGISTER_DT DESC) RNUM 
		  FROM TB_MAP_MST 
		 WHERE BIZ_TYPE IN ('통합고객지원','통합고객관리','영업관리','영업지원') 
       ) 
 WHERE RNUM = 1 
 ORDER BY BIZ_TYPE, TAR_TBL_ID 
; 



--## 상세주소 컬럼 추출 쿼리 
SELECT TAR_TBL_ID
     , TAR_COL_ID
	 , TAR_COL_NM
	 , SOUR_TBL_ID 
	 , SOUR_TBL_NM
	 , SOUR_COL_ID
	 , SOUR_COL_NM 
FROM TB_MAP_DTL
WHERE TAR_COL_ID = 'DETL_ADDR'
; 



---- AS-IS // TO-BE  주소 검증 .. 
SELECT * 
  FROM TBL_ICMCTTAD10 A 
     , MAPKEY_TBL_ICMCTTCT10_010 B 
 WHERE A.CNPL_SUID = '9100000000096376170'
   AND A.CNPL_SUID = B.CNPL_SUID 
;

SELECT C.*
     , D.*
  FROM LOCATIONGROUP A 
     , ADDRESSGROUP B 
	 , ADDRESS C 
	 , TB_CDCOM040 D 
 WHERE A.CONT_ID = '23995600'
   AND B.ADDRESS_ID = '990000061607676'
   AND A.LOCATION_GROUP_ID = B.LOCATION_GROUP_ID 
   AND B.ADDRESS_ID = C.ADDRESS_ID 
   AND C.POSTAL_CODE = D.ZPNO_ID 
; 


SELECT 'INSERT INTO TEMP_JJC_0630
SELECT '''||TABLE_NAME||''' TBL_ID, '''||COLUMN_NAME||''' COL_ID, COUNT(*) CNT FROM '||TABLE_NAME||' 
WHERE '||COLUMN_NAME||' = TO_DATE(''99991231'',''YYYYMMDD'') ; 
COMMIT; 
' TXT 
FROM ALL_TAB_COLUMNS 
WHERE TABLE_NAME LIKE 'TBL_IC%'
AND COLUMN_NAME LIKE '%DTTM' 
; 



CREATE OR REPLACE PACKAGE DBSEC.SPIN_CRYPTO AS
    FUNCTION SPINDEC(POLICY_ID in VARCHAR, INPUT in VARCHAR2) RETURN VARCHAR2 PARALLEL_ENABLE DETERMINISTIC;
    FUNCTION SPINENC(POLICY_ID in VARCHAR, INPUT in VARCHAR2) RETURN VARCHAR2 PARALLEL_ENABLE DETERMINISTIC;
    FUNCTION SPINDEC_FAILOVER(POLICY_ID in VARCHAR, INPUT in VARCHAR2) RETURN VARCHAR2 PARALLEL_ENABLE DETERMINISTIC;
    FUNCTION SPINENC_FAILOVER(POLICY_ID in VARCHAR, INPUT in VARCHAR2) RETURN VARCHAR2 PARALLEL_ENABLE DETERMINISTIC;
END SPIN_CRYPTO;



INSERT INTO MAPKEY_RGST_NO_ENC_U8
SELECT RGST_NO
     , DBSEC.SPIN_CRYPTO.SPINENC('P001', RGST_NO_ENC) RGST_NO_U8
  FROM (
		SELECT RGST_NO
			 , DBSEC.SPIN_CRYPTO.SPINDEC@DL_MIG('P001',RGST_NO) AS RGST_NO_ENC 
		  FROM MAPKEY_RGST_NO_ENC 
		 WHERE SUBSTR(RGST_NO,1,1) IN ('5') 
       ) 
; 





테이블명 변경 : TBL_ICSPSC -> TBL_ICSPCP

SELECT 
DRVE_LICE_NO,
REPLACE(SUBSTR(DRVE_LICE_NO,3),'-','')
FROM STG02.TB_CSAML010
WHERE REGEXP_LIKE(DRVE_LICE_NO,'[가-힝]{2,}[[:digit:]]{1,}');



================================
개발현황추출



SELECT A.*
     , B.WL_NM
	 , B.SESSION_NAME 
	 , B.SESS_SEQ 
	 , B.SESS_TYPE
	 , C.ASIS_VAL
	 , C.TOBE_VAL 
  FROM (
		SELECT DISTINCT 
			   SUB_1
			 , SUB_2
			 , SUB_3
			 , TBL_ID
			 , TBL_NM 
		  FROM VW_META_DB_COMP_JHL A
		 WHERE (TBL_ID LIKE 'TBL_IC%' OR TBL_ID LIKE 'TBL_COM%')
		   AND LENGTH(TBL_ID) = 14
		   AND TBL_ID IS NOT NULL 
		   AND NOT EXISTS ( SELECT '' FROM MIG_DROP_TBL X WHERE A.TBL_ID = X.TABLE_NAME ) 
       ) A 
	 , (
		SELECT WORKFLOW_NAME WL_NM 
			 , REPLACE(WORKFLOW_NAME, 'wl_','') AS TBL_NM 
			 , SESSION_NAME 
			 , CASE WHEN SESSION_NAME LIKE 'MIG%' THEN 'PROC'
			        WHEN SESSION_NAME LIKE 's_m_%' THEN 'MAPP' 
			   END SESS_TYPE
			 , ROW_NUMBER() OVER (PARTITION BY WORKFLOW_NAME ORDER BY SESSION_NAME) AS SESS_SEQ
		  FROM CMMASV.MIG_INFA_SESS_CONFIG
		 WHERE SUBJECT_AREA IN ('L01.TRN_ICM','M01.TRN_ICS','X01.TRN_COM') 
		   AND WORKFLOW_NAME NOT LIKE '%VER'
		   AND WORKFLOW_NAME NOT LIKE '%TEST%'
	   ) B 
	 , (
		SELECT TOBE_TAB, ASIS_VAL, TOBE_VAL
		     , ROW_NUMBER() OVER (PARTITION BY TOBE_TAB ORDER BY VRFC_DT DESC) RNUM 
  		  FROM MIG_DATA_VERIFICATION
		 WHERE ( TOBE_TAB LIKE 'TBL_IC%' OR TOBE_TAB LIKE 'TBL_COM%' ) 
		   AND VRFC_NM LIKE '%집합검증'
       ) C
 WHERE 1=1 
   AND A.TBL_ID = B.TBL_NM (+) 
   AND A.TBL_ID = C.TOBE_TAB (+)
   AND C.RNUM (+) = 1 
 ORDER BY 4
;

========================================
검증쿼리

SELECT DISTINCT 
       A.*
	 , C.ASIS_VAL
	 , C.TOBE_VAL
	 , (C.ASIS_VAL - C.TOBE_VAL) AS DIFF
	 , D.PK_ERR
  FROM (
		SELECT DISTINCT 
			   CASE WHEN TBL_ID LIKE 'TBL_COM%' THEN '공통'
			        WHEN TBL_ID LIKE 'TBL_ICM%' THEN '통합고객관리'
					WHEN TBL_ID LIKE 'TBL_ICS%' THEN '통합고객지원'
			   END SUB_1 
			 , SUBSTR(TBL_ID, 8,3) AS SUB_2 
			 , TBL_ID
			 , TBL_NM 
		  FROM VW_META_DB_COMP_JHL A
		 WHERE (TBL_ID LIKE 'TBL_IC%' OR TBL_ID LIKE 'TBL_COM%')
		   AND LENGTH(TBL_ID) = 14
		   AND TBL_ID IS NOT NULL 
		   AND NOT (TBL_ID = 'TBL_ICSCBNSU30' AND SUB_1 IS NULL)
		   AND NOT EXISTS ( SELECT '' FROM MIG_DROP_TBL X WHERE A.TBL_ID = X.TABLE_NAME ) 
       ) A 
	 , (
		SELECT TOBE_TAB, ASIS_VAL, TOBE_VAL
		     , ROW_NUMBER() OVER (PARTITION BY TOBE_TAB ORDER BY VRFC_DT DESC) RNUM 
  		  FROM MIG_DATA_VERIFICATION
		 WHERE ( TOBE_TAB LIKE 'TBL_IC%' OR TOBE_TAB LIKE 'TBL_COM%' ) 
		   AND VRFC_NM LIKE '%집합검증'
		   AND VRFC_DT >= TO_DATE('20201026','YYYYMMDD')
       ) C
	 , (
		SELECT TOBE_TAB, TOBE_VAL AS PK_ERR
		     , ROW_NUMBER() OVER (PARTITION BY TOBE_TAB ORDER BY VRFC_DT DESC) RNUM 
  		  FROM MIG_DATA_VERIFICATION
		 WHERE ( TOBE_TAB LIKE 'TBL_IC%' OR TOBE_TAB LIKE 'TBL_COM%' ) 
		   AND VRFC_NM LIKE '%중복검증'
		   AND VRFC_DT >= TO_DATE('20201026','YYYYMMDD')
       ) D
 WHERE 1=1 
   AND A.TBL_ID = C.TOBE_TAB (+)
   AND C.RNUM (+) = 1 
   AND A.TBL_ID = D.TOBE_TAB (+)
   AND D.RNUM (+) = 1 
 ORDER BY 1,2,3
;


SELECT * 
  FROM (
		SELECT A.*
		     , ROW_NUMBER() OVER (PARTITION BY TOBE_TAB ORDER BY VRFC_DT DESC) RNUM 
  		  FROM MIG_DATA_VERIFICATION A
		 WHERE ( TOBE_TAB LIKE 'TBL_IC%' OR TOBE_TAB LIKE 'TBL_COM%' ) 
		   AND VRFC_NM LIKE '%값검증'
		   AND VRFC_DT >= TO_DATE('20201026','YYYYMMDD')
       ) 
 WHERE RNUM = 1
; 



SELECT 'COMMENT ON TABLE TRG02.'||TABLE_NAME||' IS '''' ; ' 
FROM DBA_TAB_COMMENTS 
WHERE OWNER = 'TRG02'
AND (TABLE_NAME LIKE 'TBL_IC%' OR TABLE_NAME LIKE 'TBL_COM%' ) 
AND COMMENTS IS NULL
AND LENGTH(TABLE_NAME) = 14
;


COMMENT ON TABLE TRG02.TBL_ICMPSCCT11 IS '가망고객통신이력' ; 
COMMENT ON TABLE TRG02.TBL_ICSCBNAM10 IS '고객AML관리' ; 
COMMENT ON TABLE TRG02.TBL_ICSCPVCU10 IS 'PV_고객' ; 
COMMENT ON TABLE TRG02.TBL_ICSCPVPS10 IS 'PV_개인' ; 
COMMENT ON TABLE TRG02.TBL_COMORG0102 IS 'FP인사확정' ; 
COMMENT ON TABLE TRG02.TBL_COMORG0201 IS '기관' ; 
COMMENT ON TABLE TRG02.TBL_COMORG0202 IS '기관계층구성' ; 
COMMENT ON TABLE TRG02.TBL_COMORG0206 IS '기관조정내역' ; 
COMMENT ON TABLE TRG02.TBL_COMORGH201 IS '기관이력' ; 
COMMENT ON TABLE TRG02.TBL_COMORGH202 IS '기관계층구성이력' ; 



==============================
대상 테이블 목록 추출

SELECT A.OWNER 
     , A.TABLE_NAME
	 , ( SELECT COMMENTS 
	       FROM ALL_TAB_COMMENTS B 
		  WHERE A.OWNER = B.OWNER 
		    AND A.TABLE_NAME = B.TABLE_NAME ) AS ENTITY_NAME 
     , A.NUM_ROWS 
	 , ( SELECT ROUND(BYTES/1024/1024/1024,3) 
	       FROM DBA_SEGMENTS C 
		  WHERE A.OWNER = C.OWNER 
		    AND A.TABLE_NAME = C.SEGMENT_NAME ) AS GB
FROM ALL_TABLES A
WHERE OWNER = 'CDISUSR'
;

SELECT A.OWNER 
     , A.TABLE_NAME
	 , ( SELECT COMMENTS 
	       FROM ALL_TAB_COMMENTS B 
		  WHERE A.OWNER = B.OWNER 
		    AND A.TABLE_NAME = B.TABLE_NAME ) AS ENTITY_NAME 
     , A.NUM_ROWS 
	 , ( SELECT ROUND(BYTES/1024/1024/1024,3) 
	       FROM DBA_SEGMENTS C 
		  WHERE A.OWNER = C.OWNER 
		    AND A.TABLE_NAME = C.SEGMENT_NAME ) AS GB
FROM ALL_TABLES A
WHERE OWNER = 'SDQADMIN'
;




=========================
매핑정의(승인전)_메타비교_20200610



--임시매핑정의서(업로드하고, 승인 안한 상태), 메타 비교 불일치 검출 쿼리


WITH TGT_TBL AS
 ( SELECT 'TBL_IC%' AS TBL  --***테이블검색 문자열
   --SELECT 'TBL_ICSCMPCC10' AS TBL  --테이블검색 문자열
   FROM DUAL
  ) 
,META_1 AS
(
--모델  컬럼조회 쿼리 (매핑정의서 존재 테이블만 조회)
SELECT /*+ MATERIALIZE */ 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq, COL.OBJECT_ID ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo,
	   TGT_TBL
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   --    and tbl.object_id = 1324418
	   AND TBL.ABBR_NAME LIKE TGT_TBL.TBL --고객계
	   AND TBL.ABBR_NAME IN ( SELECT TAR_TBL_ID FROM TB_MAP_MST_HIST WHERE USER_ID = 1073833     --*** 작업자 사용자ID 
	                          AND APR_USER_ID IS NULL ) --MAPPING존재 테이블만
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
--ORDER  BY TBL.ABBR_NAME , col.obj_seq						  
)
, MAPPING_1 AS
 (
 --매핑정의서 조회
SELECT /*+ MATERIALIZE */ 
       A.TAR_TBL_ID    AS TBL_ID
     , A.TAR_TBL_NM    AS TBL_NM
     , ROW_NUMBER() OVER (PARTITION BY A.TAR_TBL_ID ORDER BY REG_SEQ ASC) AS SEQ  --순서오류 수정 
	 , B.TAR_COL_ID    AS COL_ID
	 , B.TAR_COL_NM    AS COL_NM
	 , B.TAR_PK        AS PK
	 , B.TAR_DATA_TYPE AS DATATYPE
	 , B.TAR_LENGTH    AS LEN
	 , B.TAR_NULL      AS NOTNULL
	 , B.SYSTEM_REGISTER_DT
	 , CASE WHEN TRIM(B.TAR_LENGTH) IS NULL THEN B.TAR_DATA_TYPE 
	        ELSE B.TAR_DATA_TYPE || '(' || REPLACE(REPLACE(B.TAR_LENGTH, ' ', ''), ',0', '')  || ')'
		END            AS PDATATYPE	
FROM TB_MAP_MST_HIST A, TB_MAP_DTL_HIST B, TGT_TBL
WHERE A.TAR_TBL_ID LIKE TGT_TBL.TBL  --고객계 테이블
AND   A.TAR_TBL_ID = B.TAR_TBL_ID 
AND   TRIM(B.GRP_NO) = '1' --GRP 1만 체크
AND A.USER_ID = 1073833     --*** 작업자 사용자ID 
AND A.APR_USER_ID IS NULL
AND A.MAP_APY_SEQ = B.MAP_APY_SEQ
 )
SELECT *
FROM (
		SELECT   
				 CASE WHEN X.COL_NM IS NULL THEN '매핑컬럼 누락|'
				 END ||
				 CASE WHEN Y.COL_NM IS NULL THEN '메타컬럼 미존재|'
				 END ||
				 CASE WHEN X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.COL_ID),'@') <> NVL(UPPER(Y.COL_ID), '@')  THEN '영문컬럼 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PK),'@') <> NVL(UPPER(Y.PK), '@')  THEN 'PK 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(X.SEQ, 0) <> NVL(Y.SEQ, 0)  THEN '순서 불일치|'
				 END ||	
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PDATATYPE),'@') <> NVL(UPPER(Y.PDATATYPE), '@')  THEN '타입길이 불일치|'
				 END ||			 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.NOTNULL),'@') <> NVL(UPPER(Y.NOTNULL), '@')  THEN 'NOTNULL 불일치|'
				 END 		 
						   AS "불일치사유"
			   , X.TBL_ID
			   , X.TBL_NM
			   , X.SEQ
			   , X.COL_ID
			   , X.COL_NM
			   , X.PK
			   , X.PDATATYPE	  
			   , X.NOTNULL
			   , Y.TBL_ID    AS TBL_ID_META
			   , Y.TBL_NM    AS TBL_NM_META
			   , Y.SEQ       AS SEQ_META
			   , Y.COL_ID    AS COL_ID_META
			   , Y.COL_NM    AS COL_NM_META
			   , Y.PK        AS PK_META
			   , Y.PDATATYPE AS PDATATYPE_META	  
			   , Y.NOTNULL   AS NOTNULL_META
		FROM MAPPING_1 X FULL OUTER JOIN META_1 Y
		ON  (X.TBL_ID = Y.TBL_ID AND X.COL_NM = Y.COL_NM ) -- 매칭 조건 테이블 물리명, 컬럼한글명
		ORDER BY X.TBL_ID, X.SEQ, Y.TBL_ID, Y.SEQ
     )
WHERE "불일치사유" IS NOT NULL	 
ORDER BY NVL(TBL_ID, TBL_ID_META), SEQ
;


===========================
매핑정의서_메타 불일치 검출_20200609



--매핑정의서, 메타 비교 불일치 검출 쿼리


WITH TGT_TBL AS
 ( SELECT 'TBL_ICS%' AS TBL  --테이블검색 문자열
   --SELECT 'TBL_ICSCMPCC10' AS TBL  --테이블검색 문자열
   FROM DUAL
  ) 
,META_1 AS
(
--모델  컬럼조회 쿼리 (매핑정의서 존재 테이블만 조회)
SELECT /*+ MATERIALIZE */ 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq, COL.OBJECT_ID ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo,
	   TGT_TBL
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   --    and tbl.object_id = 1324418
	   AND TBL.ABBR_NAME LIKE TGT_TBL.TBL --고객계
	   AND TBL.ABBR_NAME IN ( SELECT TAR_TBL_ID FROM TB_MAP_MST) --MAPPING존재 테이블만
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
--ORDER  BY TBL.ABBR_NAME , col.obj_seq						  
)
, MAPPING_1 AS
 (
 --매핑정의서 조회
SELECT /*+ MATERIALIZE */ 
       A.TAR_TBL_ID    AS TBL_ID
     , A.TAR_TBL_NM    AS TBL_NM
     , ROW_NUMBER() OVER (PARTITION BY A.TAR_TBL_ID ORDER BY REG_SEQ ASC) AS SEQ  --순서오류 수정 
	 , B.TAR_COL_ID    AS COL_ID
	 , B.TAR_COL_NM    AS COL_NM
	 , B.TAR_PK        AS PK
	 , B.TAR_DATA_TYPE AS DATATYPE
	 , B.TAR_LENGTH    AS LEN
	 , B.TAR_NULL      AS NOTNULL
	 , B.SYSTEM_REGISTER_DT
	 , CASE WHEN TRIM(B.TAR_LENGTH) IS NULL THEN B.TAR_DATA_TYPE 
	        ELSE B.TAR_DATA_TYPE || '(' || REPLACE(REPLACE(B.TAR_LENGTH, ' ', ''), ',0', '')  || ')'
		END            AS PDATATYPE	
FROM TB_MAP_MST A, TB_MAP_DTL B, TGT_TBL
WHERE A.TAR_TBL_ID LIKE TGT_TBL.TBL  --고객계 테이블
AND   A.TAR_TBL_ID = B.TAR_TBL_ID 
AND   TRIM(B.GRP_NO) = '1' --GRP 1만 체크
 )
SELECT *
FROM (
		SELECT   
				 CASE WHEN X.COL_NM IS NULL THEN '매핑컬럼 누락|'
				 END ||
				 CASE WHEN Y.COL_NM IS NULL THEN '메타컬럼 미존재|'
				 END ||
				 CASE WHEN X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.COL_ID),'@') <> NVL(UPPER(Y.COL_ID), '@')  THEN '영문컬럼 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PK),'@') <> NVL(UPPER(Y.PK), '@')  THEN 'PK 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(X.SEQ, 0) <> NVL(Y.SEQ, 0)  THEN '순서 불일치|'
				 END ||	
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PDATATYPE),'@') <> NVL(UPPER(Y.PDATATYPE), '@')  THEN '타입길이 불일치|'
				 END ||			 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.NOTNULL),'@') <> NVL(UPPER(Y.NOTNULL), '@')  THEN 'NOTNULL 불일치|'
				 END 		 
						   AS "불일치사유"
			   , X.TBL_ID
			   , X.TBL_NM
			   , X.SEQ
			   , X.COL_ID
			   , X.COL_NM
			   , X.PK
			   , X.PDATATYPE	  
			   , X.NOTNULL
			   , Y.TBL_ID    AS TBL_ID_META
			   , Y.TBL_NM    AS TBL_NM_META
			   , Y.SEQ       AS SEQ_META
			   , Y.COL_ID    AS COL_ID_META
			   , Y.COL_NM    AS COL_NM_META
			   , Y.PK        AS PK_META
			   , Y.PDATATYPE AS PDATATYPE_META	  
			   , Y.NOTNULL   AS NOTNULL_META
		FROM MAPPING_1 X FULL OUTER JOIN META_1 Y
		ON  (X.TBL_ID = Y.TBL_ID AND X.COL_NM = Y.COL_NM ) -- 매칭 조건 테이블 물리명, 컬럼한글명
		ORDER BY X.TBL_ID, X.SEQ, Y.TBL_ID, Y.SEQ
     )
WHERE "불일치사유" IS NOT NULL	 
AND NVL(TBL_ID, TBL_ID_META) = 'TBL_ICSCSSSB01'
--AND "불일치사유" <> '메타컬럼 미존재|'
ORDER BY NVL(TBL_ID, TBL_ID_META), SEQ
;




--특정일자 이후 매핑변경 조회
SELECT *
FROM TB_MAP_MST 
WHERE SYSTEM_REGISTER_DT >= TO_DATE('20200526','YYYYMMDD')
;


--특정일자 이후 메타 변경 조회
SELECT 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq ASC, COL.OBJECT_ID ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID,
	   TBL.CREATE_DT,
	   TBL.MODIFY_DT,
	   TBL.PROCESS_DT,
	   COL.CREATE_DT,
	   COL.MODIFY_DT,
	   COL.PROCESS_DT	   
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo
	  
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   --    and tbl.object_id = 1324418
	  -- AND TBL.ABBR_NAME LIKE 'TBL_IC%' --고객계
	   --AND TBL.ABBR_NAME IN ( SELECT TAR_TBL_ID FROM TB_MAP_MST) --MAPPING존재 테이블만
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
	   AND  TBL.MODIFY_DT >= TO_DATE('20200526', 'YYYYMMDD')  --특정일자
    ORDER  BY TBL.ABBR_NAME , col.obj_seq		


	

-- 타입불일치 제외 불일치 테이블 목록

WITH TGT_TBL AS
 ( SELECT 'TBL_COM%' AS TBL  --테이블검색 문자열
   --SELECT 'TBL_ICSCMPCC10' AS TBL  --테이블검색 문자열
   FROM DUAL
  ) 
,META_1 AS
(
--모델  컬럼조회 쿼리 (매핑정의서 존재 테이블만 조회)
SELECT /*+ MATERIALIZE */ 
       col.object_id AS COL_object_id,
	   col.obj_seq AS colseq,
	   col.obj_ind4 AS chgType,
	   TBL.OBJECT_ID   AS TBL_OBJECT_ID,  --추가
	   TBL.ABBR_NAME   AS TBL_ID,                  --추가
	   TBL.OBJECT_NAME AS TBL_NM ,                --추가
	   ROW_NUMBER() OVER (PARTITION BY TBL.OBJECT_ID ORDER BY col.obj_seq, COL.OBJECT_ID ASC) AS SEQ, --추가
	   col.object_name AS COL_NM,
	   col.abbr_name   AS COL_ID,
	   col.obj_rmk1 AS datatype,
	   col.obj_rmk8 AS pdatatype,
	   col.obj_rmk2 AS domain,
	   CASE
		 WHEN col.obj_ind1 = '1' THEN 'Y'
		 ELSE ''
	   END AS PK,
	   CASE
		 WHEN col.obj_ind2 = '1' THEN 'Y'
		 ELSE ' '
	   END AS FK,
	   CASE
		 WHEN col.obj_ind3 = '1' THEN 'NOT NULL'
		 ELSE 'NULL'
	   END AS NOTNULL,
	   col.obj_rmk15 AS defaultvalue,
	   TBL.class_id TBL_CLASS_ID,
	   COL.class_id COL_CLASS_ID
FROM   meta_object tbl,
	   mobj_inv inv,
	   meta_object col,
	   mobj_property dsc,
	   META_OBJECT DM,
	   mobj_property pinfo,
	   TGT_TBL
WHERE  1 = 1
	   --    AND tbl.class_id = 211                                           
	   AND col.class_id = 220
	   AND dsc.property_id (+) = 22121
	   AND pinfo.property_id (+) = 22132
	   AND tbl.obj_ind1 = '1'
	   AND col.object_id = dsc.object_id(+)
	   AND col.object_id = pinfo.object_id(+)
	   AND tbl.object_id = inv.object_id1
	   AND col.object_id = inv.object_id2
	   --    and tbl.object_id = 1324418
	   AND TBL.ABBR_NAME LIKE TGT_TBL.TBL --고객계
	   AND TBL.ABBR_NAME IN ( SELECT TAR_TBL_ID FROM TB_MAP_MST) --MAPPING존재 테이블만
	   AND DM.CLASS_ID(+) = 5
	   AND DM.OBJECT_NAME(+) = COL.OBJ_RMK2
--ORDER  BY TBL.ABBR_NAME , col.obj_seq						  
)
, MAPPING_1 AS
 (
 --매핑정의서 조회
SELECT /*+ MATERIALIZE */ 
       A.TAR_TBL_ID    AS TBL_ID
     , A.TAR_TBL_NM    AS TBL_NM
     , ROW_NUMBER() OVER (PARTITION BY A.TAR_TBL_ID ORDER BY REG_SEQ ASC) AS SEQ  --순서오류 수정 
	 , B.TAR_COL_ID    AS COL_ID
	 , B.TAR_COL_NM    AS COL_NM
	 , B.TAR_PK        AS PK
	 , B.TAR_DATA_TYPE AS DATATYPE
	 , B.TAR_LENGTH    AS LEN
	 , B.TAR_NULL      AS NOTNULL
	 , B.SYSTEM_REGISTER_DT
	 , CASE WHEN TRIM(B.TAR_LENGTH) IS NULL THEN B.TAR_DATA_TYPE 
	        ELSE B.TAR_DATA_TYPE || '(' || REPLACE(REPLACE(B.TAR_LENGTH, ' ', ''), ',0', '')  || ')'
		END            AS PDATATYPE	
FROM TB_MAP_MST A, TB_MAP_DTL B, TGT_TBL
WHERE A.TAR_TBL_ID LIKE TGT_TBL.TBL  --고객계 테이블
AND   A.TAR_TBL_ID = B.TAR_TBL_ID 
AND   TRIM(B.GRP_NO) = '1' --GRP 1만 체크
 )
SELECT  NVL(TBL_ID, TBL_ID_META) AS TBL
      , MAX(TBL_NM)
	  , COUNT(1)
FROM (
		SELECT   
				 CASE WHEN X.COL_NM IS NULL THEN '매핑컬럼 누락|'
				 END ||
				 CASE WHEN Y.COL_NM IS NULL THEN '메타컬럼 미존재|'
				 END ||
				 CASE WHEN X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.COL_ID),'@') <> NVL(UPPER(Y.COL_ID), '@')  THEN '영문컬럼 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PK),'@') <> NVL(UPPER(Y.PK), '@')  THEN 'PK 불일치|'
				 END ||		 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(X.SEQ, 0) <> NVL(Y.SEQ, 0)  THEN '순서 불일치|'
				 END ||	
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.PDATATYPE),'@') <> NVL(UPPER(Y.PDATATYPE), '@')  THEN '타입길이 불일치|'
				 END ||			 
				 CASE WHEN  X.COL_NM IS NOT NULL AND Y.COL_NM IS NOT NULL AND NVL(UPPER(X.NOTNULL),'@') <> NVL(UPPER(Y.NOTNULL), '@')  THEN 'NOTNULL 불일치|'
				 END 		 
						   AS "불일치사유"
			   , X.TBL_ID
			   , X.TBL_NM
			   , X.SEQ
			   , X.COL_ID
			   , X.COL_NM
			   , X.PK
			   , X.PDATATYPE	  
			   , X.NOTNULL
			   , Y.TBL_ID    AS TBL_ID_META
			   , Y.TBL_NM    AS TBL_NM_META
			   , Y.SEQ       AS SEQ_META
			   , Y.COL_ID    AS COL_ID_META
			   , Y.COL_NM    AS COL_NM_META
			   , Y.PK        AS PK_META
			   , Y.PDATATYPE AS PDATATYPE_META	  
			   , Y.NOTNULL   AS NOTNULL_META
		FROM MAPPING_1 X FULL OUTER JOIN META_1 Y
		ON  (X.TBL_ID = Y.TBL_ID AND X.COL_NM = Y.COL_NM ) -- 매칭 조건 테이블 물리명, 컬럼한글명
		ORDER BY X.TBL_ID, X.SEQ, Y.TBL_ID, Y.SEQ
     )
WHERE "불일치사유" IS NOT NULL	 
AND  "불일치사유" NOT LIKE '타입%'
GROUP BY NVL(TBL_ID, TBL_ID_META)
;
	
	 
	  
================================
암호화 테스트 (운영키방식) - 테스트 데이터 생성 쿼리
INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICMCADCH10 A
(
)
SELECT /*+ PARALLEL (A 8) */ 
       A.CONT_ID
     , A.LAST_UPDATE_USER
     , A.LAST_UPDATE_DT
     , A.PGM_ID
     , A.LAST_UPDATE_USER
     , A.LAST_UPDATE_DT
     , A.PGM_ID
     , A.
     , A.LAST_UPDATE_TX_ID
     , A.LAST_UPDATE_TX_ID
     , A.CONT_ID
     , A.CHNG_ITEM_CODE
     , A.CHBF_VAL
     , A.OBTA_ROUT_CODE
     , A.DLNG_ORGN_CODE
     , A.STRT_DATE
     , A.END_DATE
  FROM TB_CDMDM010 A 
 WHERE 1=1 
; 

COMMIT; 



----- 암호화 테스트 ----- 
TRUNCATE TABLE TRG02.TBL_ICMCADCH10; 

SELECT CUST_INFO_CHNG_ITM_CODE, COUNT(*)
FROM TBL_ICMCADCH10
GROUP BY CUST_INFO_CHNG_ITM_CODE
;

INSERT /*+ APPEND */ INTO ICMOWN.TBL_ICMCADCH10@DL_DCUS 
SELECT * 
FROM TBL_ICMCADCH10 
; 

COMMIT; 


INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICMCADCH10 A
(
   CUST_SUID
 , HIST_SQNO
 , RGSR_EMNB
 , RGST_DTTM
 , RGST_PRGM_ID
 , LAST_CHNR_EMNB
 , LAST_CHNG_DTTM
 , LAST_CHNG_PRGM_ID
 , DLTN_YN
 , RGST_TRSC_ID
 , LAST_TRSC_ID
 , CUST_INFO_CHNG_ITM_CODE
 , CHNG_BEFO_VAL
 , CHNG_AFTR_VAL
 , CUST_INFO_INPT_PATH_CODE
 , PRCS_ORGN_CODE
 , STAR_DTTM
 , END_DTTM
)
SELECT /*+ PARALLEL (A 8) */ 
       A.CONT_ID                                                               AS CUST_SUID                /* 고객변경이력SUID */ 
     , ROW_NUMBER() OVER (PARTITION BY A.CONT_ID ORDER BY A.LAST_UPDATE_DT)    AS HIST_SQNO                          /* 등록자사원번호 */ 
	 , A.LAST_UPDATE_USER                                                      AS RGSR_EMNB
     , A.LAST_UPDATE_DT                                                        AS RGST_DTTM                          /* 등록일시 */ 
     , 'MIG'                                                                   AS RGST_PRGM_ID                       /* 등록프로그램ID */ 
     , A.LAST_UPDATE_USER                                                      AS LAST_CHNR_EMNB                     /* 최종변경자사원번호 */ 
     , A.LAST_UPDATE_DT                                                        AS LAST_CHNG_DTTM                     /* 최종변경일시 */ 
     , 'MIG'                                                                   AS LAST_CHNG_PRGM_ID                  /* 최종변경프로그램ID */ 
     , 'N'                                                                     AS DLTN_YN                            /* 삭제여부 */ 
     , A.LAST_UPDATE_TX_ID                                                     AS RGST_TRSC_ID                       /* 등록트랜잭션ID */ 
     , A.LAST_UPDATE_TX_ID                                                     AS LAST_TRSC_ID                       /* 최종트랜잭션ID */ 
     , CASE WHEN ID_TP_CD = '11' THEN 'JUMIN' 
            WHEN ID_TP_CD = '14' THEN 'FRNR' 
       END                                                                     AS CUST_INFO_CHNG_ITM_CODE            /* 변경항목코드 */ 
     , A.REF_NUM                                                               AS CHNG_BEFO_VAL                      /* 변경전값 */ 
     , A.REF_NUM                                                               AS CHNG_AFTR_VAL                      /* 변경후값 */ 
     , '11'                                                                    AS CUST_INFO_INPT_PATH_CODE           /* 고객정보입력경로코드 */ 
     , '5000'                                                                  AS PROC_ORGN_CODE                     /* 처리기관코드 */ 
     , A.LAST_UPDATE_DT                                                        AS STRT_DTTM                          /* 시작일시 */ 
     , TO_DATE('99991231235959','YYYYMMDDHH24MISS')                            AS END_DTTM                           /* 종료일시 */ 
  FROM IDENTIFIER A 
 WHERE 1=1 
   AND LAST_UPDATE_DT >= TO_DATE('20200401','YYYYMMDD') 
   AND ID_TP_CD = '11' 
   AND ROWNUM <= 100 
; 

COMMIT; 

INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICMCADCH10 A
(
   CUST_SUID
 , HIST_SQNO
 , RGSR_EMNB
 , RGST_DTTM
 , RGST_PRGM_ID
 , LAST_CHNR_EMNB
 , LAST_CHNG_DTTM
 , LAST_CHNG_PRGM_ID
 , DLTN_YN
 , RGST_TRSC_ID
 , LAST_TRSC_ID
 , CUST_INFO_CHNG_ITM_CODE
 , CHNG_BEFO_VAL
 , CHNG_AFTR_VAL
 , CUST_INFO_INPT_PATH_CODE
 , PRCS_ORGN_CODE
 , STAR_DTTM
 , END_DTTM
)
SELECT /*+ PARALLEL (A 8) */ 
       A.CONT_ID                                                               AS CUST_SUID                /* 고객변경이력SUID */ 
     , ROW_NUMBER() OVER (PARTITION BY A.CONT_ID ORDER BY A.LAST_UPDATE_DT)    AS HIST_SQNO                          /* 등록자사원번호 */ 
	 , A.LAST_UPDATE_USER                                                      AS RGSR_EMNB
     , A.LAST_UPDATE_DT                                                        AS RGST_DTTM                          /* 등록일시 */ 
     , 'MIG'                                                                   AS RGST_PRGM_ID                       /* 등록프로그램ID */ 
     , A.LAST_UPDATE_USER                                                      AS LAST_CHNR_EMNB                     /* 최종변경자사원번호 */ 
     , A.LAST_UPDATE_DT                                                        AS LAST_CHNG_DTTM                     /* 최종변경일시 */ 
     , 'MIG'                                                                   AS LAST_CHNG_PRGM_ID                  /* 최종변경프로그램ID */ 
     , 'N'                                                                     AS DLTN_YN                            /* 삭제여부 */ 
     , A.LAST_UPDATE_TX_ID                                                     AS RGST_TRSC_ID                       /* 등록트랜잭션ID */ 
     , A.LAST_UPDATE_TX_ID                                                     AS LAST_TRSC_ID                       /* 최종트랜잭션ID */ 
     , CASE WHEN ID_TP_CD = '11' THEN 'JUMIN' 
            WHEN ID_TP_CD = '14' THEN 'FRNR' 
       END                                                                     AS CUST_INFO_CHNG_ITM_CODE            /* 변경항목코드 */ 
     , A.REF_NUM                                                               AS CHNG_BEFO_VAL                      /* 변경전값 */ 
     , A.REF_NUM                                                               AS CHNG_AFTR_VAL                      /* 변경후값 */ 
     , '11'                                                                    AS CUST_INFO_INPT_PATH_CODE           /* 고객정보입력경로코드 */ 
     , '5000'                                                                  AS PROC_ORGN_CODE                     /* 처리기관코드 */ 
     , A.LAST_UPDATE_DT                                                        AS STRT_DTTM                          /* 시작일시 */ 
     , TO_DATE('99991231235959','YYYYMMDDHH24MISS')                            AS END_DTTM                           /* 종료일시 */ 
  FROM IDENTIFIER A 
 WHERE 1=1 
   AND LAST_UPDATE_DT >= TO_DATE('20200401','YYYYMMDD') 
   AND ID_TP_CD = '14' 
   AND ROWNUM <= 100 
; 

COMMIT; 

-- 전화번호 

INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICMCADCH10 A
(
   CUST_SUID
 , HIST_SQNO
 , RGSR_EMNB
 , RGST_DTTM
 , RGST_PRGM_ID
 , LAST_CHNR_EMNB
 , LAST_CHNG_DTTM
 , LAST_CHNG_PRGM_ID
 , DLTN_YN
 , RGST_TRSC_ID
 , LAST_TRSC_ID
 , CUST_INFO_CHNG_ITM_CODE
 , CHNG_BEFO_VAL
 , CHNG_AFTR_VAL
 , CUST_INFO_INPT_PATH_CODE
 , PRCS_ORGN_CODE
 , STAR_DTTM
 , END_DTTM
)
SELECT B.CUST_SUID 
     , A.HIST_SQNO
	 , A.RGSR_EMNB
	 , A.RGST_DTTM
	 , A.RGST_PRGM_ID
	 , A.LAST_CHNR_EMNB
	 , A.LAST_CHNG_DTTM
	 , A.LAST_CHNG_PRGM_ID
	 , A.DLTN_YN
	 , A.RGST_TRSC_ID
	 , A.LAST_TRSC_ID
	 , A.CUST_INFO_CHNG_ITM_CODE
	 , A.CHNG_BEFO_VAL
	 , A.CHNG_AFTR_VAL
	 , A.CUST_INFO_INPT_PATH_CODE
	 , A.PRCS_ORGN_CODE
	 , A.STAR_DTTM
	 , A.END_DTTM
  FROM (
		SELECT B.HIST_SQNO + ROWNUM HIST_SQNO
			 , A.RGSR_EMNB
			 , A.RGST_DTTM
			 , A.RGST_PRGM_ID
			 , A.LAST_CHNR_EMNB
			 , A.LAST_CHNG_DTTM
			 , A.LAST_CHNG_PRGM_ID
			 , A.DLTN_YN
			 , A.RGST_TRSC_ID
			 , A.LAST_TRSC_ID
			 , 'TEL' AS CUST_INFO_CHNG_ITM_CODE
			 , TLPH_IDNF_CODE||TLPH_OFNO||TLPH_SBNO AS CHNG_BEFO_VAL
			 , TLPH_IDNF_CODE||TLPH_OFNO||TLPH_SBNO AS CHNG_AFTR_VAL
			 , '11' CUST_INFO_INPT_PATH_CODE
			 , '5000' PRCS_ORGN_CODE
			 , LAST_CHNG_DTTM AS STAR_DTTM
			 , LAST_CHNG_DTTM AS END_DTTM
			 , ROWNUM RNUM 
		  FROM TBL_ICMCTTTL10 A
			 , ( SELECT MAX(HIST_SQNO) AS HIST_SQNO FROM TBL_ICMCADCH10 ) B 
		 WHERE 1=1 
		   AND LAST_CHNG_DTTM >= TO_DATE('20200401','YYYYMMDD') 
		   AND ROWNUM <= 100 
       ) A 
	 , (
	    SELECT ROWNUM AS RNUM, CUST_SUID 
          FROM TBL_ICMCCRCU10
         WHERE RGST_DTTM >= TO_DATE('20200401','YYYYMMDD') 
           AND ROWNUM <= 100 
	   ) B 
 WHERE A.RNUM = B.RNUM 
; 

COMMIT; 



INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICMCADCH10 A
(
   CUST_SUID
 , HIST_SQNO
 , RGSR_EMNB
 , RGST_DTTM
 , RGST_PRGM_ID
 , LAST_CHNR_EMNB
 , LAST_CHNG_DTTM
 , LAST_CHNG_PRGM_ID
 , DLTN_YN
 , RGST_TRSC_ID
 , LAST_TRSC_ID
 , CUST_INFO_CHNG_ITM_CODE
 , CHNG_BEFO_VAL
 , CHNG_AFTR_VAL
 , CUST_INFO_INPT_PATH_CODE
 , PRCS_ORGN_CODE
 , STAR_DTTM
 , END_DTTM
)
SELECT B.CUST_SUID 
     , A.HIST_SQNO
	 , A.RGSR_EMNB
	 , A.RGST_DTTM
	 , A.RGST_PRGM_ID
	 , A.LAST_CHNR_EMNB
	 , A.LAST_CHNG_DTTM
	 , A.LAST_CHNG_PRGM_ID
	 , A.DLTN_YN
	 , A.RGST_TRSC_ID
	 , A.LAST_TRSC_ID
	 , A.CUST_INFO_CHNG_ITM_CODE
	 , A.CHNG_BEFO_VAL
	 , A.CHNG_AFTR_VAL
	 , A.CUST_INFO_INPT_PATH_CODE
	 , A.PRCS_ORGN_CODE
	 , A.STAR_DTTM
	 , A.END_DTTM
  FROM (
		SELECT B.HIST_SQNO + ROWNUM HIST_SQNO
			 , A.RGSR_EMNB
			 , A.RGST_DTTM
			 , A.RGST_PRGM_ID
			 , A.LAST_CHNR_EMNB
			 , A.LAST_CHNG_DTTM
			 , A.LAST_CHNG_PRGM_ID
			 , A.DLTN_YN
			 , A.RGST_TRSC_ID
			 , A.LAST_TRSC_ID
			 , 'ACCOUNT' AS CUST_INFO_CHNG_ITM_CODE
			 , ACNT_NO AS CHNG_BEFO_VAL
			 , ACNT_NO AS CHNG_AFTR_VAL
			 , '11' CUST_INFO_INPT_PATH_CODE
			 , '5000' PRCS_ORGN_CODE
			 , LAST_CHNG_DTTM AS STAR_DTTM
			 , LAST_CHNG_DTTM AS END_DTTM
			 , ROWNUM RNUM 
		  FROM TBL_ICMFNFAC10 A
			 , ( SELECT MAX(HIST_SQNO) AS HIST_SQNO FROM TBL_ICMCADCH10 ) B 
		 WHERE 1=1 
		   AND LAST_CHNG_DTTM >= TO_DATE('20200401','YYYYMMDD') 
		   AND ROWNUM <= 100 
       ) A 
	 , (
	    SELECT ROWNUM AS RNUM, CUST_SUID 
          FROM TBL_ICMCCRCU10
         WHERE RGST_DTTM >= TO_DATE('20200401','YYYYMMDD') 
           AND ROWNUM <= 100 
	   ) B 
 WHERE A.RNUM = B.RNUM 
; 

COMMIT; 



INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICMCADCH10 A
(
   CUST_SUID
 , HIST_SQNO
 , RGSR_EMNB
 , RGST_DTTM
 , RGST_PRGM_ID
 , LAST_CHNR_EMNB
 , LAST_CHNG_DTTM
 , LAST_CHNG_PRGM_ID
 , DLTN_YN
 , RGST_TRSC_ID
 , LAST_TRSC_ID
 , CUST_INFO_CHNG_ITM_CODE
 , CHNG_BEFO_VAL
 , CHNG_AFTR_VAL
 , CUST_INFO_INPT_PATH_CODE
 , PRCS_ORGN_CODE
 , STAR_DTTM
 , END_DTTM
)
SELECT B.CUST_SUID 
     , A.HIST_SQNO
	 , A.RGSR_EMNB
	 , A.RGST_DTTM
	 , A.RGST_PRGM_ID
	 , A.LAST_CHNR_EMNB
	 , A.LAST_CHNG_DTTM
	 , A.LAST_CHNG_PRGM_ID
	 , A.DLTN_YN
	 , A.RGST_TRSC_ID
	 , A.LAST_TRSC_ID
	 , A.CUST_INFO_CHNG_ITM_CODE
	 , A.CHNG_BEFO_VAL
	 , A.CHNG_AFTR_VAL
	 , A.CUST_INFO_INPT_PATH_CODE
	 , A.PRCS_ORGN_CODE
	 , A.STAR_DTTM
	 , A.END_DTTM
  FROM (
		SELECT B.HIST_SQNO + ROWNUM HIST_SQNO
			 , A.RGSR_EMNB
			 , A.RGST_DTTM
			 , A.RGST_PRGM_ID
			 , A.LAST_CHNR_EMNB
			 , A.LAST_CHNG_DTTM
			 , A.LAST_CHNG_PRGM_ID
			 , A.DLTN_YN
			 , A.RGST_TRSC_ID
			 , A.LAST_TRSC_ID
			 , 'CARD' AS CUST_INFO_CHNG_ITM_CODE
			 , CRDT_CARD_NO AS CHNG_BEFO_VAL
			 , CRDT_CARD_NO AS CHNG_AFTR_VAL
			 , '11' CUST_INFO_INPT_PATH_CODE
			 , '5000' PRCS_ORGN_CODE
			 , LAST_CHNG_DTTM AS STAR_DTTM
			 , LAST_CHNG_DTTM AS END_DTTM
			 , ROWNUM RNUM 
		  FROM TBL_ICMFNFCC10 A
			 , ( SELECT MAX(HIST_SQNO) AS HIST_SQNO FROM TBL_ICMCADCH10 ) B 
		 WHERE 1=1 
--		   AND LAST_CHNG_DTTM >= TO_DATE('20190101','YYYYMMDD') 
		   AND ROWNUM <= 100 
       ) A 
	 , (
	    SELECT ROWNUM AS RNUM, CUST_SUID 
          FROM TBL_ICMCCRCU10
         WHERE RGST_DTTM >= TO_DATE('20200401','YYYYMMDD') 
           AND ROWNUM <= 100 
	   ) B 
 WHERE A.RNUM = B.RNUM 
; 

COMMIT; 




INSERT /*+ ENABLE_PARALLEL_DML APPEND PARALLEL(A 8) */ INTO TBL_ICMCADCH10 A
(
   CUST_SUID
 , HIST_SQNO
 , RGSR_EMNB
 , RGST_DTTM
 , RGST_PRGM_ID
 , LAST_CHNR_EMNB
 , LAST_CHNG_DTTM
 , LAST_CHNG_PRGM_ID
 , DLTN_YN
 , RGST_TRSC_ID
 , LAST_TRSC_ID
 , CUST_INFO_CHNG_ITM_CODE
 , CHNG_BEFO_VAL
 , CHNG_AFTR_VAL
 , CUST_INFO_INPT_PATH_CODE
 , PRCS_ORGN_CODE
 , STAR_DTTM
 , END_DTTM
)
SELECT B.CUST_SUID 
     , A.HIST_SQNO
	 , A.RGSR_EMNB
	 , A.RGST_DTTM
	 , A.RGST_PRGM_ID
	 , A.LAST_CHNR_EMNB
	 , A.LAST_CHNG_DTTM
	 , A.LAST_CHNG_PRGM_ID
	 , A.DLTN_YN
	 , A.RGST_TRSC_ID
	 , A.LAST_TRSC_ID
	 , A.CUST_INFO_CHNG_ITM_CODE
	 , A.CHNG_BEFO_VAL
	 , A.CHNG_AFTR_VAL
	 , A.CUST_INFO_INPT_PATH_CODE
	 , A.PRCS_ORGN_CODE
	 , A.STAR_DTTM
	 , A.END_DTTM
  FROM (
		SELECT B.HIST_SQNO + ROWNUM HIST_SQNO
			 , A.RGSR_EMNB
			 , A.RGST_DTTM
			 , A.RGST_PRGM_ID
			 , A.LAST_CHNR_EMNB
			 , A.LAST_CHNG_DTTM
			 , A.LAST_CHNG_PRGM_ID
			 , A.DLTN_YN
			 , A.RGST_TRSC_ID
			 , A.LAST_TRSC_ID
			 , 'EMAIL' AS CUST_INFO_CHNG_ITM_CODE
			 , ELCT_LOCT_VAL AS CHNG_BEFO_VAL
			 , ELCT_LOCT_VAL AS CHNG_AFTR_VAL
			 , '11' CUST_INFO_INPT_PATH_CODE
			 , '5000' PRCS_ORGN_CODE
			 , LAST_CHNG_DTTM AS STAR_DTTM
			 , LAST_CHNG_DTTM AS END_DTTM
			 , ROWNUM RNUM 
		  FROM TBL_ICMCTTDL10 A
			 , ( SELECT MAX(HIST_SQNO) AS HIST_SQNO FROM TBL_ICMCADCH10 ) B 
		 WHERE 1=1 
--		   AND LAST_CHNG_DTTM >= TO_DATE('20190101','YYYYMMDD') 
		   AND ROWNUM <= 100 
       ) A 
	 , (
	    SELECT ROWNUM AS RNUM, CUST_SUID 
          FROM TBL_ICMCCRCU10
         WHERE RGST_DTTM >= TO_DATE('20200401','YYYYMMDD') 
           AND ROWNUM <= 100 
	   ) B 
 WHERE A.RNUM = B.RNUM 
; 

COMMIT; 

========================================
암호화 테스트 쿼리

--주민등록번호 
SELECT CONT_ID
     , REF_NUM
     , DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM)  AS "주민등록번호(운영-복호화)"
     , DBSEC.spin_crypto.spindec('P001', REF_NUM)   AS "주민등록번호(복호화)"
	 , DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P001', DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM ) ) )AS "(운영)복호화-(개발)복호화"
FROM IDENTIFIER
WHERE 1=1
  AND ID_TP_CD = '11' 
  AND ROWNUM <= 10 
;

--여권번호  
SELECT CONT_ID
     , REF_NUM
     , DBSEC.DEC_PASSPORT@DL_MIG(REF_NUM)  AS "여권번호(운영-복호화)"
     , DBSEC.DEC_PASSPORT(REF_NUM)  AS "여권번호(개발-복호화)"
     , DBSEC.ENC_PASSPORT(DBSEC.DEC_PASSPORT(REF_NUM),'select') AS "여권번호(개발-복/암호화)"
  FROM IDENTIFIER
 WHERE 1=1
   AND ID_TP_CD = '16' 
;


-- 발신자번호 (전화번호)
SELECT SNDR_NO
     , DBSEC.spin_crypto.spindec@DL_MIG('P007', SNDR_NO)  AS "발신자번호(운영-복호화)"
     , DBSEC.spin_crypto.spindec('P007', SNDR_NO)   AS "발신자번호(복호화)"
	 , DBSEC.spin_crypto.spinenc('P007', DBSEC.spin_crypto.spindec@DL_MIG('P007', SNDR_NO ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P007', DBSEC.spin_crypto.spinenc('P007', DBSEC.spin_crypto.spindec@DL_MIG('P007', SNDR_NO ) ) )AS "(운영)복호화-(개발)복호화"
  FROM (
		SELECT DISTINCT WORK_NO
			 , SNDR_NO
		  FROM TB_UVMMTSDL
		 WHERE ROWNUM <= 83 
       ) 
; 


-- 사차관리번호 (TB_PAASEAT3) 
SELECT DRTG_ADMN_NO
     , DBSEC.spin_crypto.spindec@DL_MIG('P001', DRTG_ADMN_NO)  AS "사차관리번호(운영-복호화)"
     , DBSEC.spin_crypto.spindec('P001', DRTG_ADMN_NO)   AS "사차관리번호(복호화)"
	 , DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', DRTG_ADMN_NO ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P001', DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', DRTG_ADMN_NO ) ) )AS "(운영)복호화-(개발)복호화"
  FROM (
		SELECT DISTINCT DRTG_ADMN_NO
		  FROM TB_PAASEAT3
		 WHERE ROWNUM <= 30
       ) 
; 


-- 발신자번호 (전화번호)
SELECT SNDR_NO
     , DBSEC.spin_crypto.spindec@DL_MIG('P007', SNDR_NO)  AS "발신자번호(운영-복호화)"
     , DBSEC.spin_crypto.spindec('P007', SNDR_NO)   AS "발신자번호(개발-복호화)"
	 , DBSEC.spin_crypto.spinenc('P007', DBSEC.spin_crypto.spindec@DL_MIG('P007', SNDR_NO ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P007', DBSEC.spin_crypto.spinenc('P007', DBSEC.spin_crypto.spindec@DL_MIG('P007', SNDR_NO ) ) )AS "(운영)복호화-(개발)복호화"
  FROM (
		SELECT DISTINCT WORK_NO
			 , SNDR_NO
		  FROM TB_UVMMTSDL
		 WHERE ROWNUM <= 83 
       ) 
; 

-- 이메일 (TB_PARPTSOB) 
SELECT EMAL_1
     , DBSEC.DEC_EMAIL@DL_MIG(EMAL_1) AS "이메일(운영키-복호화)"
     , DBSEC.DEC_EMAIL(EMAL_1) AS "이메일(개발키-복호화)"
     , DBSEC.ENC_EMAIL(DBSEC.DEC_EMAIL@DL_MIG(EMAL_1),'select') AS "(운영)복호화-(개발)암호화"
	 , DBSEC.DEC_EMAIL(DBSEC.ENC_EMAIL(DBSEC.DEC_EMAIL@DL_MIG(EMAL_1),'select')) AS "(운영)복호화-(개발)암복호화"
  FROM (
		SELECT EMAL_1  
		  FROM TB_PARPTSOB 
		 WHERE ROWNUM <= 10 
       ) 
; 


-- 운전면허번호 (TB_CSAML010) 
SELECT DRVE_LICE_NO
     , DBSEC.spin_crypto.spindec@DL_MIG('P005', DRVE_LICE_NO)  AS "운전면허번호(운영키-복호화)"
     , DBSEC.spin_crypto.spindec('P005', DRVE_LICE_NO)   AS "운전면허번호(개발키-복호화)"
	 , DBSEC.spin_crypto.spinenc('P005', DBSEC.spin_crypto.spindec@DL_MIG('P001', DRVE_LICE_NO ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P005', DBSEC.spin_crypto.spinenc('P005', DBSEC.spin_crypto.spindec@DL_MIG('P005', DRVE_LICE_NO ) ) )AS "(운영)복호화-(개발)복호화"
  FROM (
		SELECT DRVE_LICE_NO
		  FROM STG02.TB_CSAML010
		 WHERE ROWNUM <= 10
		   AND DRVE_LICE_NO IS NOT NULL 
       ) 
; 


-- 계좌번호 (TB_CSSFM010) 
SELECT ACCT_NO 
     , DBSEC.spin_crypto.spindec@DL_MIG('P003', ACCT_NO)  AS "계좌번호(운영키-복호화)"
     , DBSEC.spin_crypto.spindec('P003', ACCT_NO)   AS "계좌번호(개발키-복호화)"
	 , DBSEC.spin_crypto.spinenc('P003', DBSEC.spin_crypto.spindec@DL_MIG('P003', ACCT_NO ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P003', DBSEC.spin_crypto.spinenc('P003', DBSEC.spin_crypto.spindec@DL_MIG('P003', ACCT_NO ) ) )AS "(운영)복호화-(개발)복호화"
  FROM (
		SELECT ACCT_NO
		  FROM TB_CSSFM010 
		 WHERE ROWNUM <= 10 
       ) 
; 


-- 카드번호 (TB_CSSFM040) 
SELECT CARD_NO
     , DBSEC.spin_crypto.spindec@DL_MIG('P002', CARD_NO)  AS "카드번호(운영키-복호화)"
     , DBSEC.spin_crypto.spindec('P002', CARD_NO)   AS "카드번호(개발키-복호화)"
	 , DBSEC.spin_crypto.spinenc('P002', DBSEC.spin_crypto.spindec@DL_MIG('P002', CARD_NO ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P002', DBSEC.spin_crypto.spinenc('P002', DBSEC.spin_crypto.spindec@DL_MIG('P002', CARD_NO ) ) )AS "(운영)복호화-(개발)복호화"
  FROM (
		SELECT DISTINCT CARD_NO
		  FROM TB_CSSFM040 
		 WHERE ROWNUM <= 10
       ) 
; 



-- 주소 (ADDRESS) 
SELECT ADDR_LINE_ONE
     , DBSEC.DEC_ADDR@DL_MIG(ADDR_LINE_ONE) AS "주소(운영키-복호화)"
     , DBSEC.DEC_ADDR(ADDR_LINE_ONE) AS "주소(개발키-복호화)"
     , DBSEC.ENC_ADDR(DBSEC.DEC_ADDR@DL_MIG(ADDR_LINE_ONE),'select') AS "(운영)복호화-(개발)암호화"
	 , DBSEC.DEC_ADDR(DBSEC.ENC_ADDR(DBSEC.DEC_ADDR@DL_MIG(ADDR_LINE_ONE),'select')) AS "(운영)복호화-(개발)암복호화"
  FROM (
		SELECT ADDR_LINE_ONE  
		  FROM ADDRESS 
		 WHERE ROWNUM <= 10 
       ) 
; 


-- 외국인등록번호 (IDENTIFIER)  
SELECT REF_NUM
     , DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM)  AS "외국인등록번호(운영-복호화)"
     , DBSEC.spin_crypto.spindec('P001', REF_NUM)   AS "외국인등록번호(복호화)"
	 , DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P001', DBSEC.spin_crypto.spinenc('P001', DBSEC.spin_crypto.spindec@DL_MIG('P001', REF_NUM ) ) )AS "(운영)복호화-(개발)복호화"
  FROM IDENTIFIER
 WHERE ID_TP_CD = '14' 
  AND REF_NUM NOT LIKE '%DEL%'
  AND ROWNUM <= 10  
;

-- 외국인등록번호 (TB_MASCM025)  
SELECT FRNR_RGST_NO
     , DBSEC.spin_crypto.spindec@DL_MIG('P006', FRNR_RGST_NO)  AS "외국인등록번호(운영-복호화)"
     , DBSEC.spin_crypto.spindec('P006', FRNR_RGST_NO)   AS "외국인등록번호(복호화)"
	 , DBSEC.spin_crypto.spinenc('P006', DBSEC.spin_crypto.spindec@DL_MIG('P006', FRNR_RGST_NO ) ) AS "(운영)복호화-(개발)암호화"
	 , DBSEC.spin_crypto.spindec('P006', DBSEC.spin_crypto.spinenc('P006', DBSEC.spin_crypto.spindec@DL_MIG('P006', FRNR_RGST_NO ) ) )AS "(운영)복호화-(개발)복호화"
  FROM TB_MASCM025
 WHERE FRNR_RGST_NO IS NOT NULL 
   AND ROWNUM <= 20
;

-- 법인등록번호 (TB_CSAML010) 
SELECT COPR_RGST_NO  
  FROM TB_CSAML010
 WHERE COPR_RGST_NO IS NOT NULL 
   AND ROWNUM <= 10 
; 

============================
운영 암호화 값 추출 쿼리

-- 주소 
SELECT /*+ PARALLEL(8) */ 
       A.CONT_ID
	 , A.LOCATION_GROUP_ID 
	 , B.ADDRESS_ID 
	 , C.ADDR_LINE_ONE
  FROM LOCATIONGROUP A 
     , ADDRESSGROUP B 
	 , ADDRESS C 
 WHERE A.LOCATION_GROUP_ID = B.LOCATION_GROUP_ID
   AND B.ADDRESS_ID = C.ADDRESS_ID 
   AND A.LOCATION_GROUP_ID IN ('970000000077106','970000000077107') 
AND A.CONT_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')
; 

-- 전화번호 
SELECT /*+ PARALLEL (8) */ 
       A.CONT_ID
	 , A.LOCATION_GROUP_ID
	 , B.CONTACT_METHOD_ID
	 , C.AREA_CODE
	 , C.EXCHANGE
	 , C.PH_NUMBER
  FROM LOCATIONGROUP A 
     , CONTACTMETHODGROUP B 
	 , PHONENUMBER C 
 WHERE 1=1 
   AND A.LOCATION_GROUP_ID = B.LOCATION_GROUP_ID
   AND A.LOC_GROUP_TP_CODE = 'C' 
   AND B.CONTACT_METHOD_ID IN ( SELECT CONTACT_METHOD_ID 
                                  FROM CONTACTMETHOD 
                                 WHERE CONT_METH_CAT_CD IN ('10'))  -- 전화, 팩스
   AND B.CONTACT_METHOD_ID = C.CONTACT_METHOD_ID 
  AND A.CONT_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')
; 

-- 이메일 / #메일 
SELECT /*+ PARALLEL (8) */ 
       A.CONT_ID
	 , A.LOCATION_GROUP_ID
	 , B.CONTACT_METHOD_ID
	 , C.REF_NUM
  FROM LOCATIONGROUP A 
     , CONTACTMETHODGROUP B 
	 , CONTACTMETHOD C 
 WHERE 1=1 
   AND A.LOCATION_GROUP_ID = B.LOCATION_GROUP_ID
   AND B.CONTACT_METHOD_ID = C.CONTACT_METHOD_ID 
   AND C.CONT_METH_CAT_CD IN ('40','41','42') 
   AND A.CONT_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')
; 

-- 주민등록번호 
SELECT /*+ PARALLEL (8) */ 
       A.CONT_ID
	 , A.REF_NUM
  FROM IDENTIFIER A 
 WHERE 1=1 
   AND A.ID_TP_CD = '11' 
   AND A.CONT_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')

; 

-- 외국인등록번호 
SELECT /*+ PARALLEL (8) */ 
       A.CONT_ID
	 , A.REF_NUM
  FROM IDENTIFIER A 
 WHERE 1=1 
   AND A.ID_TP_CD = '11' 
   AND A.CONT_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')
; 

-- 여권번호  
SELECT /*+ PARALLEL (8) */ 
       A.CONT_ID
	 , A.REF_NUM
  FROM IDENTIFIER A 
 WHERE 1=1 
   AND A.ID_TP_CD = '16' 
   AND A.CONT_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')

; 

-- 계좌번호 
SELECT /*+ PARALLEL (8) */ 
       A.CUST_ID
	 , A.ACCT_NO 
	 , A.FINA_ORGN_CODE 
	 , A.USE_YN
	 , A.RGST_DATE 
  FROM TB_CSSFM020 A 
 WHERE 1=1 
   AND A.CUST_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')
; 

-- 카드번호 
SELECT /*+ PARALLEL (8) */ 
       A.CUST_ID
	 , A.CARD_NO
	 , A.USE_YN
	 , A.RGST_DATE 
  FROM TB_CSSFM040 A 
 WHERE 1=1
   AND A.CUST_ID IN (
'0010017510','6010017506','5001950545','7005580087','9039081769','4005583874','9005586419','7026027017',
'0005593960','0002377010','8026362968','8005597308','0005601840','5039504205','5005606845','5027037005',
'4001920144','8005611148','9010052149','0027367790','8001971058','3005621073','8005621568','3002220133',
'0053298660','4005624374','0005625170','9055995529','7053298667','9029270959','4040778354','1054658091',
'1055418721','0058625630','8030260728','8055458718','4030907094','5056453755','7058625647','7060824527',
'6030179166','0031899990','1031899991','8024677498','8062098628','2039535542','9031483249','3055369053',
'2062483532','7053449907','1051882451','5062728165','9039641079','6025833566','3061493693','1038086851',
'8062098828','8053449888','4053007114','2053675332','6056497236','1062553691','7029570787','3031156123',
'0050238840','9062098609','4062098954','9052353549','2056441832','6062098936','4062098684','7052040047',
'8062099278','5062099085','9053673549','6053372096','3052951193','1052142351','2050451972','1061989831',
'3062099223','4052776194','7062099207','7062098607','9062098799','3062098473','9041839689','8026769608',
'1050250631','8050248878','5062098825','4040686454','7052040047','8062099278','5062099085','9039455389',
'5062098465','7057145547','2062099272','7062099157','7062278027','3062099003','8062098838','5062098415',
'0052292650','4062020874','5032277795','7062707187','9050317459','7062278027','2062099162','4062098654',
'3052951193','2062866262','0062098810','6062099246','8062099248','4062098834','4062836784','6002363746',
'1061241121','8053673548','7062440947','8062098838','1053308671','9062099089','2062099332','5062909415',
'9062099209','9030663049','2062099272','7052040047','8062099278','5062098415','4062099194','5062098925',
'7056431967','9055330809','4062099004','8062534458','5039086165','4062098564','8062099438','0061662240',
'7062099287','8059039338','2062098642','1062098961','8062098628','2052733102','9032171799','5031446595')
; 




============================
주소 암호화 변환작업 (2020.11.05)



SELECT ADDR_ENC_KR
     --, DBSEC.DEC_ADDR(ADDR_ENC_KR) AS "이전 주소 암호화 데이터 복호화 에러"
     , DBSEC.DEC_ADDR@DL_MIG(ADDR_ENC_KR) AS "주소(운영키-복호화)"
     , DBSEC.ENC_ADDR(DBSEC.DEC_ADDR@DL_MIG(ADDR_ENC_KR),'select') AS "(운영)복호화-(개발)암호화"
	 , DBSEC.DEC_ADDR(DBSEC.ENC_ADDR(DBSEC.DEC_ADDR@DL_MIG(ADDR_ENC_KR),'select')) AS "(운영)복호화-(개발)암복호화"
FROM MAPKEY_ADDR_ENC
WHERE ROWNUM <= 10 
; 


SELECT ADDR_LINE_ONE
     --, DBSEC.DEC_ADDR(ADDR_LINE_ONE) AS "이전 주소 암호화 데이터 복호화 에러"
     , DBSEC.DEC_ADDR@DL_MIG(ADDR_LINE_ONE) AS "주소(운영키-복호화)"
     , DBSEC.ENC_ADDR(DBSEC.DEC_ADDR@DL_MIG(ADDR_LINE_ONE),'select') AS "(운영)복호화-(개발)암호화"
	 , DBSEC.DEC_ADDR(DBSEC.ENC_ADDR(DBSEC.DEC_ADDR@DL_MIG(ADDR_LINE_ONE),'select')) AS "(운영)복호화-(개발)암복호화"
FROM ADDRESS
WHERE ROWNUM <= 10 
; 


CREATE TABLE MAPKEY_ADDR_ENC_BAK
AS 
SELECT * 
  FROM MAPKEY_ADDR_ENC 
; 


TRUNCATE TABLE MAPKEY_ADDR_ENC_TMP1; 



SELECT ADDR_ENC_KR, ADDR_ENC_U8, DBSEC.DEC_ADDR(ADDR_ENC_U8)
FROM MAPKEY_ADDR_ENC_TMP1
WHERE ADDR_ENC_U8 IS NOT NULL 
AND ROWNUM <= 1000
; 

SELECT /*+ PARALLEL (8) */ 
       COUNT(*)
FROM MAPKEY_ADDR_ENC_TMP1
WHERE ADDR_ENC_U8 IS NOT NULL 
; 

COMMIT; 


SELECT SEC_CNT
     , TRUNC(RUN_TIME / 60) RUN_TIME
	 , MOD(RUN_TIME, 60) RUN_MIN
  FROM (
		SELECT SUM(SEC_DATA_CNT) SEC_CNT
			 , ROUND((MAX(END_DATE) - MIN(PROC_START_DATE)) * 24 * 60) RUN_TIME
		  FROM MIG_SEC_U8_LOG
		 WHERE PROC_START_DATE >= TO_DATE('20201105','YYYYMMDD') 
		 ORDER BY PROC_START_DATE DESC
				, START_DATE DESC
       )
;


SELECT A.* 
     , ROUND((END_DATE-START_DATE) * 24 * 60 * 60, 2) RUN_TIME
  FROM MIG_SEC_U8_LOG A
 WHERE PROC_START_DATE >= TO_DATE('20201105','YYYYMMDD') 
 ORDER BY PROC_START_DATE DESC
        , START_DATE DESC
;



======================================
Target_Table

SELECT xml
 FROM (SELECT  xml
        FROM (SELECT 2 rn
      , OWNER
      , table_name 
      , '<TARGET BUSINESSNAME ="" CONSTRAINT ="" DATABASETYPE ="Oracle" DESCRIPTION ="" NAME ="'||TABLE_NAME||'" OBJECTVERSION ="1" TABLEOPTIONS ="" VERSIONNUMBER ="1">' AS xml
FROM all_tables
UNION
SELECT column_id +2 rn
      , OWNER
      , table_name 
     , '<TARGETFIELD BUSINESSNAME ="" DATATYPE ="'||DATA_TYPE||'" DESCRIPTION ="" FIELDNUMBER ="'||column_id||'" KEYTYPE ="NOT A KEY" NAME ="'||column_name||'" NULLABLE ="'||decode(NULLABLE,'N','NOTNULL','NULL')||'" PICTURETEXT ="" PRECISION ="'||DECODE(DATA_TYPE,'DATE',19,'NUMBER','15',DATA_LENGTH)||'" SCALE ="'||DECODE(DATA_TYPE,'NUMBER','0',DATA_SCALE)||'"/>'  AS xml
 FROM all_tab_columns
UNION
SELECT 998 rn
      , OWNER
      , table_name 
	  , '</TARGET>'
FROM all_tables)
WHERE table_name IN ('TBL_ICMCCRCU10')
AND OWNER = 'TRG02'
ORDER BY table_name, rn)

============================================
[생성]마감자동화관련Table

/*수보 정규 통계 테이블 만들기*/
 CREATE TABLE TB_NCCLOSBO (
       CLOG_YM              VARCHAR2(6) NOT NULL,
       POLY_NO              VARCHAR2(9) NOT NULL,
       SEQ_NO               NUMBER(9) NOT NULL,
       IPDL_DVCD            VARCHAR2(4) NOT NULL,
       LAST_CHMN_MPNO       VARCHAR2(8) NOT NULL,
       LAST_CHNG_DTTM       DATE NOT NULL,
       PGM_ID               VARCHAR2(50) NOT NULL,
       PRSN_COPR_SADV       VARCHAR2(10) NOT NULL,
       PRSN_COPR_PMDV       VARCHAR2(10) NOT NULL,
       IRKD_CODE_DTAL       VARCHAR2(4) NOT NULL,
       IRKD_CODE_ITEM       VARCHAR2(3) NOT NULL,
       COLL_METD_CODE       VARCHAR2(10) NOT NULL,
       CNTT_DATE            VARCHAR2(8) NOT NULL,
       PAYM_CYCL_CODE       VARCHAR2(10) NOT NULL,
       PAYM_TERM            NUMBER(3) DEFAULT 0 NOT NULL,
       PAYM_YM              VARCHAR2(6) NOT NULL,
       PAYM_CNT             NUMBER(3) DEFAULT 0 NOT NULL,
       RECP_DATE            VARCHAR2(8) NOT NULL,
       MAIN_PREM            NUMBER(15) DEFAULT 0 NOT NULL,
       SUM_PREM             NUMBER(15) DEFAULT 0 NOT NULL,
       PRDC_KIND_CD1        VARCHAR2(10) NULL,
       DSCT_PREM_1          NUMBER(12) DEFAULT 0 NOT NULL,
       PPAY_INTE            NUMBER(12) DEFAULT 0 NOT NULL,
       FUND_CODE            VARCHAR2(5) NULL,
       ACCU_AMT             NUMBER(15) DEFAULT 0 NOT NULL,
       PRDC_KIND_CD2        VARCHAR2(10) NULL,
       DSCT_PREM_2          NUMBER(12) DEFAULT 0 NOT NULL,
       PRDC_KIND_CD3        VARCHAR2(10) NULL,
       DSCT_PREM_3          NUMBER(12) DEFAULT 0 NOT NULL,
       CONSTRAINT TB_NCCLOSBO_PK
              PRIMARY KEY (CLOG_YM, POLY_NO, SEQ_NO, IPDL_DVCD)
)
 ;

COMMENT ON TABLE TB_NCCLOSBO IS '신계약수입보험료월마감';

COMMENT ON COLUMN TB_NCCLOSBO.CLOG_YM IS '마감년월';

COMMENT ON COLUMN TB_NCCLOSBO.POLY_NO IS '증권번호';

COMMENT ON COLUMN TB_NCCLOSBO.SEQ_NO IS '일련번호';

COMMENT ON COLUMN TB_NCCLOSBO.IPDL_DVCD IS '수보처리구분코드';

COMMENT ON COLUMN TB_NCCLOSBO.LAST_CHMN_MPNO IS '최종변경자사번';

COMMENT ON COLUMN TB_NCCLOSBO.LAST_CHNG_DTTM IS '최종변경일시';

COMMENT ON COLUMN TB_NCCLOSBO.PGM_ID IS '프로그램ID';

COMMENT ON COLUMN TB_NCCLOSBO.PRSN_COPR_SADV IS '개인법인판매구분';

COMMENT ON COLUMN TB_NCCLOSBO.PRSN_COPR_PMDV IS '개인법인인가구분';

COMMENT ON COLUMN TB_NCCLOSBO.IRKD_CODE_DTAL IS '보험종류코드_세';

COMMENT ON COLUMN TB_NCCLOSBO.IRKD_CODE_ITEM IS '보험종류코드_목';

COMMENT ON COLUMN TB_NCCLOSBO.COLL_METD_CODE IS '수금방법코드';

COMMENT ON COLUMN TB_NCCLOSBO.CNTT_DATE IS '계약일자';

COMMENT ON COLUMN TB_NCCLOSBO.PAYM_CYCL_CODE IS '납입주기코드';

COMMENT ON COLUMN TB_NCCLOSBO.PAYM_TERM IS '납입기간';

COMMENT ON COLUMN TB_NCCLOSBO.PAYM_YM IS '납입년월';

COMMENT ON COLUMN TB_NCCLOSBO.PAYM_CNT IS '납회';

COMMENT ON COLUMN TB_NCCLOSBO.RECP_DATE IS '영수일자';

COMMENT ON COLUMN TB_NCCLOSBO.MAIN_PREM IS '주보험료';

COMMENT ON COLUMN TB_NCCLOSBO.SUM_PREM IS '합계보험료';

COMMENT ON COLUMN TB_NCCLOSBO.PRDC_KIND_CD1 IS '보험료할인종류코드1';

COMMENT ON COLUMN TB_NCCLOSBO.DSCT_PREM_1 IS '할인보험료1';

COMMENT ON COLUMN TB_NCCLOSBO.PPAY_INTE IS '선납이자';

COMMENT ON COLUMN TB_NCCLOSBO.FUND_CODE IS '펀드코드';

COMMENT ON COLUMN TB_NCCLOSBO.ACCU_AMT IS '적립금액';

COMMENT ON COLUMN TB_NCCLOSBO.PRDC_KIND_CD2 IS '보험료할인종류코드2';

COMMENT ON COLUMN TB_NCCLOSBO.DSCT_PREM_2 IS '할인보험료2';

COMMENT ON COLUMN TB_NCCLOSBO.PRDC_KIND_CD3 IS '보험료할인종류코드3';

COMMENT ON COLUMN TB_NCCLOSBO.DSCT_PREM_3 IS '할인보험료3';

/*수보 통계 테이블 만들기*/
CREATE TABLE TB_NCSUBO (
	CLOG_YM	        VARCHAR2(6)   ,
	POLY_NO	        VARCHAR2(12)  ,
	SEQ_NO	        NUMBER  (3.0) ,
	IPDL_DVCD	    VARCHAR2(10)  ,
	IRKD_CODE_DTAL	VARCHAR2(10)  ,
	IRKD_CODE_ITEM	VARCHAR2(10)  ,
	COLL_METD_CODE	VARCHAR2(10)  ,
	CNTT_DATE	    VARCHAR2(8)   ,
	PAYM_CYCL_CODE	VARCHAR2(10)  ,
	PAYM_TERM	    NUMBER  (3.0) ,
	PAYM_YM	        VARCHAR2(6)   ,
	PAYM_CNT	    NUMBER  (3.0) ,
	RECP_DATE	    VARCHAR2(8)   ,
	MAIN_PREM	    NUMBER  (15.0),
	SUM_PREM	    NUMBER  (15.0),
	PREM_DSCT_KDCD1	VARCHAR2(10)  ,
	DSCT_AMT1	    NUMBER  (10.0),
	PPAY_INTE	    NUMBER  (10.0),
	FUND_CODE	    VARCHAR2(10)  ,
	ACCU_AMT	    NUMBER  (15.0),
	PREM_DSCT_KDCD2	VARCHAR2(10)  ,
	DSCT_PREM2	    NUMBER  (10.0),
	PREM_DSCT_KDCD3	VARCHAR2(10)  ,
	DSCT_PREM3	    NUMBER  (10.0)
) TABLESPACE TSD_NCWORK01 NOLOGGING

create index TB_NCSUBO_ie1
on nc2040167.TB_NCSUBO (poly_no)

drop index TB_NCSUBO_ie1

grant all on TB_TMP_99991231_TB_NCSUBO to public;

/*수보 통계보기*/
SELECT /*+ full(a) parallel(a 5) */
 decode(IPDL_DVCD ,'1111','신계약'
                  ,'1112','선납'
                  ,'1113','자유납입'
                  ,'1114','마감후철회취소'
                  ,'1115','품질보증해지취소'
                  ,'1116','무효취소'
                  ,'1117','기타취소의 취소'
                  ,'1118','보험료정산(정산특약)'
                  ,'1119','마감후 반송취소'
                  ,'1222','특별계정이체취소(인출)'
                  ,'1131','전월 신계약'
                  ,'1132','특별계정이체'
                  ,'1138','전월 보험료정산취소의 취소'
                  ,'1201','신계약취소'
                  ,'1204','마감후 철회'
                  ,'1205','품질보증해지'
                  ,'1206','무효'
                  ,'1207','기타취소'
                  ,'1208','보험료정산취소(정산특약취소)'
                  ,'1209','수보마감후 반송,철회,감액'
                  ,'1222','특별계정이체취소'
                  ,'1228','전월 보험료정산의 취소'
                  ,'2112','소급'
                  ,'2115','부활'
                  ,'2119','부활 마감후 반송취소'
                  ,'2135','전월 부활'
                  ,'2131','부활 특별계정이체'
                  ,'2204','선납정산'
                  ,'2205','부활취소'
                  ,'2209','부활마감후 반송'
                  ,'2221','부활 특별계정이체취소'
				) 수보계정명, --ipdl_dvnm,
	 IPDL_DVCD 수보계정코드
	, count(*) cnt
	, SUM(DECODE(SUBSTR(FUND_CODE,1,1),'V',ACCU_AMT,0)) 변액
	, SUM(DECODE(SUBSTR(FUND_CODE,1,1),'5',ACCU_AMT,0)) 자산연계
	, SUM(DECODE(SUBSTR(FUND_CODE,1,1),'9',ACCU_AMT,0)) 신개인
	, SUM(SUM_PREM) 수보금액
	, SUM(DSCT_PREM_1) 할인보험료
        , SUM(PPAY_INTE) 선납이자
FROM  TB_NCCLOSBO a
where clog_ym = &clog_ym
GROUP BY IPDL_DVCD
order by IPDL_DVCD

/* ERP Data 저장 */
create table TB_ERPDATA (
	POLY_NO          VARCHAR2 (9) ,             -- 증권번호
	TRNF_ACCT_CODE   VARCHAR2 (10),             -- 이체계정코드
	SLIP_DATE        VARCHAR2 (8) ,             -- 전표일자
	ACCU_AMT         NUMBER   (15) DEFAULT 0    -- 적립금액
) TABLESPACE TSD_NCWORK01 NOLOGGING;

/* 변액_결산마감_통계테이블 생성 */
CREATE TABLE TB_NCVNTCLO
(
	CLOG_YM          VARCHAR2 (6) ,		    -- 마감년월
	POLY_NO          VARCHAR2 (9) ,             -- 증권번호
	FUND_CODE        VARCHAR2 (5) ,             -- 펀드코드
	TRNF_ACCT_CODE   VARCHAR2 (10),             -- 이체계정코드
	TRNF_YN          VARCHAR2 (1) ,             -- 이체여부
	SEQ_NO           NUMBER   (9) ,             -- 일련번호
	DLGS_TYPE_CODE   VARCHAR2 (10),             -- 거래유형코드
	PAYM_RESN_DTAL   VARCHAR2 (2) ,             -- 지급사유_세
	SLIP_DATE        VARCHAR2 (8) ,             -- 전표일자
	RQST_DATE        VARCHAR2 (8) ,             -- 신청일자
	IRKD_CODE_DTAL   VARCHAR2 (4) ,             -- 보험종류코드_세
	IRKD_CODE_ITEM   VARCHAR2 (3) ,             -- 보험종류코드_목
	CNTT_CONC_YM     VARCHAR2 (6) ,             -- 계약체결년월
	CNTT_DATE        VARCHAR2 (8) ,             -- 계약일자
	ANNT_PAYM_STDT   VARCHAR2 (8) ,             -- 연금지급개시일자
	EXPR_DATE        VARCHAR2 (8) ,             -- 만기일자
	PAYM_CYCL_CODE   VARCHAR2 (10),             -- 납입주기코드
	CNTT_STAT_CODE   VARCHAR2 (10),             -- 계약상태코드
	STDD_DATE        VARCHAR2 (8) ,             -- 기준일자
	RESN_DATE        VARCHAR2 (8) ,             -- 사유일자
	RQST_AMT         NUMBER   (15) DEFAULT 0,   -- 신청금액
	TRNF_ACCT        NUMBER   (15) DEFAULT 0,   -- 이체좌수
	TRNF_DATE        VARCHAR2 (8) ,             -- 이체일자
	EXCA_AMT         NUMBER   (13) DEFAULT 0,   -- 정산금액
	EXCA_INTE        NUMBER   (13) DEFAULT 0,   -- 정산이자
	TRNF_EXCA_PL     NUMBER   (15) DEFAULT 0,   -- 이체정산손익
	STPL_EXCA_PL     NUMBER   (15) DEFAULT 0,   -- 약관상정산손익
	BSNS_EXCA_PL     NUMBER   (15) DEFAULT 0    -- 사무정산손익
)
TABLESPACE TSD_NCWORK01 NOLOGGING




/* 변액_계정별통계테이블 생성 */
create table TB_TMP_99991231_TB_NCVAR (
trnf_bsns_dvsn varchar(4)
,prsn_copr_sadv  varchar(4)
,trnf_acct_code varchar(20)
,shrt_name    varchar(50)
,slip_date    varchar(20)
,cnt          number(10.0)
,stdd_prem    number(15.0)
,invt_wdra_prem  number (15.0)
,rqst_amt       number(15.0)
,trnf_amt       number (15.0)
) TABLESPACE TSD_NCWORK01 NOLOGGING;


/*변액_계정별통계 결과 보기*/
 SELECT  SUM( DECODE(TRNF_ACCT_CODE,'1011',INVT_WDRA_PREM,0) -
         DECODE(TRNF_ACCT_CODE,'1021',INVT_WDRA_PREM,0) -
         DECODE(TRNF_ACCT_CODE,'1041',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'1031',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'1051',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'44444',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'33333',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'22222',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'11111',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'99999',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'88888',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'77777',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'66666',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'55555',INVT_WDRA_PREM,0 ))  신계약,
     sum(DECODE(TRNF_ACCT_CODE,'2031',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'33333',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'22222',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'bfr_77777',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'bfr_66666',INVT_WDRA_PREM,0 )  )  품보해지,
     sum(DECODE(TRNF_ACCT_CODE,'1061',INVT_WDRA_PREM,0) +
        DECODE(TRNF_ACCT_CODE,'bfr_99999',INVT_WDRA_PREM,0 )  )  마감후철회,
     sum(DECODE(TRNF_ACCT_CODE,'2011',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'44444',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'11111',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'bfr_88888',INVT_WDRA_PREM,0) +
         DECODE(TRNF_ACCT_CODE,'bfr_55555',INVT_WDRA_PREM,0 )  )  무효,
     sum(DECODE(TRNF_ACCT_CODE,'1081',INVT_WDRA_PREM,0) -
        DECODE(TRNF_ACCT_CODE,'1091',INVT_WDRA_PREM,0 )  )  부활 ,
     sum(DECODE(TRNF_ACCT_CODE,'2021',INVT_WDRA_PREM,0) )  무효취소,
     sum(DECODE(TRNF_ACCT_CODE,'2041',INVT_WDRA_PREM,0) )  품보해지취소,
     sum(DECODE(TRNF_ACCT_CODE,'1071',INVT_WDRA_PREM,0) )  마감후철회취소
FROM  TB_TMP_99991231_TB_NCVAR


================================
--부활청약서 발행 승인
insert into tb_ncaplcre
select '142170597BU03'    ,admn_no_dvsn  ,rcnt_kind_code  ,rcnt_admn_sqno ,last_chmn_mpno  ,sysdate
      ,pgm_id        ,'20100111'   ,rqst_orgn_code  ,aplc_mpno      ,'20100111'     ,rcnm_mpno
      ,'20100111'  ,rcnt_time     ,rcnt_resn_code  ,del_yn
  from tb_ncaplcre
 where admn_no = '140845615BU02'
   and rcnt_kind_code = 'D06';


 /**********/
 /*  QA 용 */
 /**********/

/* 2회보험료 방문수금 승인 (nk21 qa) */
insert into tb_NCAPLBRM
select CTOR_CUST_ID,
       RCNT_KIND_CODE,
       (select decode(max(RCNT_ADMN_SQNO),null,1,max(RCNT_ADMN_SQNO)+1) from TB_NCAPLBRM t where t.CUST_ID=b.CTOR_CUST_ID ),
       a.LAST_CHMN_MPNO,
       a.LAST_CHNG_DTTM,
       a.PGM_ID,
       GRP_CUST_ID,
       b.IRKD_CODE_DTAL,
       b.IRKD_CODE_ITEM,
       to_char(sysdate,'yyyymmdd'),
       b.CLLT_ORGN_CODE,
       APLC_MPNO,
       to_char(sysdate,'yyyymmdd'),
       RCNT_TIME,
       RCNM_MPNO,
       RCNT_RESN_CODE,
       SPCL_RCNT_KDCD,
       to_char(sysdate,'yyyymmdd'),
       to_char(sysdate,'yyyymmdd'),
       CONN_DOCU_NO,
       DEL_YN
 from TB_NCAPLBRM a, tb_isaplctt b
where RCNT_KIND_CODE = 'B01'
and CUST_ID = '1019320241'
and RCNT_ADMN_SQNO = '1'
and b.poly_no =  :p_poly_no;

/* 2회이후 타인계좌 */
insert into tb_ncaplcre
select :p_poly_no    ,admn_no_dvsn  ,rcnt_kind_code  ,rcnt_admn_sqno ,last_chmn_mpno  ,sysdate
      ,pgm_id        ,:p_crnt_date  ,rqst_orgn_code  ,aplc_mpno      ,:p_crnt_date    ,rcnm_mpno
      ,:p_crnt_date  ,rcnt_time     ,rcnt_resn_code  ,del_yn
  from tb_ncaplcre
 where admn_no = '135407290'
   and rcnt_kind_code = 'D04';

/* image scan */
insert into tb_boimgarv
select :p_poly_no     ,imag_kind_code  ,last_chmn_mpno  ,last_chng_dttm  ,pgm_id         ,:p_poly_no
      ,plno_dlng_sqno ,medi_cust_id    ,medi_sqno       ,cntt_chng_rqno  ,grp_cust_id    ,irkd_code_dtal
      ,irkd_code_item ,rdoc_imag_adno  ,ref_docu_titl   ,prsn_acrp_sqno  ,acci_conu_sqno ,frst_scan_imno
      ,frst_scan_iptm ,sdoc_scan_yn    ,srdo_jgda_stcd  ,tot_page_no     ,del_obct_yn
  from tb_boimgarv
 where imag_Admn_no  = '42170692'
;

-- 0:신계약,3:부활
insert into tb_boimgarv
select '146758283BU01','3'   ,last_chmn_mpno  ,last_chng_dttm  ,pgm_id         ,'146758283'
      ,plno_dlng_sqno ,medi_cust_id    ,medi_sqno       ,cntt_chng_rqno  ,grp_cust_id    ,irkd_code_dtal
      ,irkd_code_item ,rdoc_imag_adno  ,ref_docu_titl   ,prsn_acrp_sqno  ,acci_conu_sqno ,frst_scan_imno
      ,frst_scan_iptm ,sdoc_scan_yn    ,srdo_jgda_stcd  ,tot_page_no     ,del_obct_yn
  from tb_boimgarv
 where imag_Admn_no  = '42170692'
;

/* 조기입력 */
update tb_ncaplsph
   set publ_time = to_char(lpad((publ_time-10000), 6,'0'))
 where pyno_bdct_no = :p_poly_no
;

/* 진단 */
insert into tb_ncmeddcu
select b.MEDI_CUST_ID
      ,(NVL((select max(MEDI_SQNO) from tb_ncmeddcu
       where cust_id = b.MEDI_CUST_ID),0)+1)        ,last_chmn_mpno   ,last_chng_dttm   ,pgm_id   ,bsns_dvcd_nc
      ,b.medi_kind_code ,b.MEDI_CUST_ID
      ,medi_jugm_sqno   ,caus_pyno         ,befo_dshs_yn      ,to_char(sysdate,'YYYYMMDD')    ,medo_kind_dvsn    ,to_char(sysdate,'YYYYMMDD')
      ,medi_cost_amt    ,to_char(ADD_MONTHS(sysdate,6),'YYYYMMDD')    ,to_char(sysdate,'YYYYMMDD')    ,jugm_rqst_date    ,jugm_obct_stcd    ,pjdg_obct_stcd
      ,judg_dlng_tpcd   ,medo_dlng_rscd    ,medi_item_ckys    ,judg_opin_cten    ,medi_opin_cten    ,admn_chec_adno
      ,(select MDOR_ADNO from tb_ncmedmog where to_char(sysdate,'YYYYMMDD') between ESTA_DATE and CLOS_DATE and rownum = 1)
      ,etdr_adno         ,medc_paym_yn      ,to_char(sysdate,'YYYYMMDD')    ,memo              ,outs_mdor_name
      ,frst_judg_mpno   ,scnd_judg_mpno    ,thrd_judg_mpno    ,crnt_judg_mpno    ,redu_amt          ,publ_date
      ,publ_man_mpno    ,jugm_dstb_bsdv    ,jugm_dstb_sqno
  from tb_ncmeddcu a
      ,(select b.CUST_ID MEDI_CUST_ID, a.medi_kind_code
 from tb_isaplins a
     ,tb_isaplcrm b
 where a.poly_no =  :p_poly_no --'151551919'
   and a.medi_kind_code <> '00'
   and a.poly_no = b.poly_no
   and a.CNTT_PRTR_NO = b.CNTT_PRTR_NO) b
 where cust_id = '2014215622'
;

-- 진단서 상세
insert into tb_ncmeddca
select
 b.MEDI_CUST_ID           -- 고객ID
,(select max(MEDI_SQNO) from tb_ncmeddcu
   where cust_id = b.MEDI_CUST_ID) -- 진단일련번호
,MEDI_ITEM_CODE    -- 검진항목코드
,LAST_CHMN_MPNO    -- 최종변경자사번
,LAST_CHNG_DTTM    -- 최종변경일시
,PGM_ID            -- 프로그램ID
,to_char(sysdate,'YYYYMMDD') -- 처리일자
,MEDI_ITEM_RSVL    -- 검진항목결과값
,MEDI_OPIN_CODE    -- 검진소견코드
,MEDI_OPIN_CTEN    -- 검진소견내용
,DSAS_PART_CODE    -- 질병부위코드
,DSAS_DGRE_CODE    -- 질병정도코드
,JUGM_NORM_YN      -- 판정정상여부
 from tb_ncmeddca a
,(select b.CUST_ID MEDI_CUST_ID, a.medi_kind_code
 from tb_isaplins a
     ,tb_isaplcrm b
 where a.poly_no =  '151551919'
   and a.medi_kind_code <> '00'
   and a.poly_no = b.poly_no
   and a.CNTT_PRTR_NO = b.CNTT_PRTR_NO) b
 where a.cust_id = '2014215622'
   and a.medi_item_code = 'GBA05'
;

 /***********/
 /* REMD 용 */
 /***********/
/* 2회보험료 방문수금 승인 (remd qa) */
insert into tb_NCAPLBRM
select CTOR_CUST_ID,
       RCNT_KIND_CODE,
       (select decode(max(RCNT_ADMN_SQNO),null,1,max(RCNT_ADMN_SQNO)+1) from TB_NCAPLBRM t where t.CUST_ID=b.CTOR_CUST_ID ),
       a.LAST_CHMN_MPNO,
       a.LAST_CHNG_DTTM,
       a.PGM_ID,
       GRP_CUST_ID,
       b.IRKD_CODE_DTAL,
       b.IRKD_CODE_ITEM,
       to_char(sysdate,'yyyymmdd'),
       b.CLLT_ORGN_CODE,
       APLC_MPNO,
       to_char(sysdate,'yyyymmdd'),
       RCNT_TIME,
       RCNM_MPNO,
       RCNT_RESN_CODE,
       SPCL_RCNT_KDCD,
       to_char(sysdate,'yyyymmdd'),
       to_char(sysdate,'yyyymmdd'),
       CONN_DOCU_NO,
       DEL_YN
 from TB_NCAPLBRM a, tb_isaplctt b
where RCNT_KIND_CODE = 'B01'
and CUST_ID = '1019320241'
and RCNT_ADMN_SQNO = '1'
and b.poly_no =  :p_poly_no
;

/* 2회이후 타인계좌 */
insert into tb_ncaplcre
select :p_poly_no    ,admn_no_dvsn  ,rcnt_kind_code  ,rcnt_admn_sqno ,last_chmn_mpno  ,sysdate
      ,pgm_id        ,:p_crnt_date  ,rqst_orgn_code  ,aplc_mpno      ,:p_crnt_date    ,rcnm_mpno
      ,:p_crnt_date  ,rcnt_time     ,rcnt_resn_code  ,del_yn
  from tb_ncaplcre
 where admn_no = '135407290'
   and rcnt_kind_code = 'D04'
;

/* image scan */
insert into tb_boimgarv
select :p_poly_no     ,imag_kind_code  ,last_chmn_mpno  ,last_chng_dttm  ,pgm_id         ,:p_poly_no
      ,plno_dlng_sqno ,medi_cust_id    ,medi_sqno       ,cntt_chng_rqno  ,grp_cust_id    ,irkd_code_dtal
      ,irkd_code_item ,rdoc_imag_adno  ,ref_docu_titl   ,prsn_acrp_sqno  ,acci_conu_sqno ,frst_scan_imno
      ,frst_scan_iptm ,sdoc_scan_yn    ,srdo_jgda_stcd  ,tot_page_no     ,del_obct_yn
  from tb_boimgarv
 where imag_Admn_no  = '156694500'
;

 /* 중도부가 청약서 image scan */
insert into tb_boimgarv
select '151594594JU01'     ,'90'  ,last_chmn_mpno  ,last_chng_dttm  ,pgm_id         ,'151594594JU01'
      ,plno_dlng_sqno ,medi_cust_id    ,medi_sqno       ,cntt_chng_rqno  ,grp_cust_id    ,irkd_code_dtal
      ,irkd_code_item ,rdoc_imag_adno  ,ref_docu_titl   ,prsn_acrp_sqno  ,acci_conu_sqno ,frst_scan_imno
      ,frst_scan_iptm ,sdoc_scan_yn    ,srdo_jgda_stcd  ,tot_page_no     ,del_obct_yn
  from tb_boimgarv
 where imag_Admn_no  = '42170692'
;

 /* 신계약 청약서 image scan */
insert into tb_boimgarv
select '151594594JU01'     ,'0'  ,last_chmn_mpno  ,last_chng_dttm  ,pgm_id         ,'151594594JU01'
      ,plno_dlng_sqno ,medi_cust_id    ,medi_sqno       ,cntt_chng_rqno  ,grp_cust_id    ,irkd_code_dtal
      ,irkd_code_item ,rdoc_imag_adno  ,ref_docu_titl   ,prsn_acrp_sqno  ,acci_conu_sqno ,frst_scan_imno
      ,frst_scan_iptm ,sdoc_scan_yn    ,srdo_jgda_stcd  ,tot_page_no     ,del_obct_yn
  from tb_boimgarv
 where imag_Admn_no  = '42170692'
;

/* 조기입력 */
update tb_ncaplsph
   set publ_time = to_char(lpad((publ_time-10000), 6,'0'))
 where pyno_bdct_no = :p_poly_no
;

/* 진단 */
insert into tb_ncmeddcu
select (select b.cust_id
          from tb_isaplins a
              ,tb_isaplcrm b
         where a.poly_no        = :p_poly_no
           and a.medi_kind_code <> '00'
           and a.poly_no      = b.poly_no
           and a.CNTT_PRTR_NO = b.CNTT_PRTR_NO
           and b.END_DATE = '99991231'
           and b.DEL_YN   = 'N'
           and rownum           = 1 )
      ,medi_sqno       ,last_chmn_mpno   ,last_chng_dttm   ,pgm_id   ,bsns_dvcd_nc
      ,(select a.medi_kind_code
          from tb_isaplins a
              ,tb_isaplcrm b
         where a.poly_no        = :p_poly_no
           and a.medi_kind_code <> '00'
           and a.poly_no      = b.poly_no
           and a.CNTT_PRTR_NO = b.CNTT_PRTR_NO
           and b.END_DATE = '99991231'
           and b.DEL_YN   = 'N'
           and rownum           = 1 )
      ,(select b.cust_id
          from tb_isaplins a
              ,tb_isaplcrm b
         where a.poly_no        = :p_poly_no
           and a.medi_kind_code <> '00'
           and a.poly_no      = b.poly_no
           and a.CNTT_PRTR_NO = b.CNTT_PRTR_NO
           and b.END_DATE = '99991231'
           and b.DEL_YN   = 'N'
           and rownum           = 1 )
      ,medi_jugm_sqno   ,caus_pyno         ,befo_dshs_yn      ,medi_recp_date    ,medo_kind_dvsn    ,medi_date
      ,medi_cost_amt    ,medi_vlid_endt    ,medo_jugm_jgdt    ,jugm_rqst_date    ,jugm_obct_stcd    ,pjdg_obct_stcd
      ,judg_dlng_tpcd   ,medo_dlng_rscd    ,medi_item_ckys    ,judg_opin_cten    ,medi_opin_cten    ,admn_chec_adno
      ,mdor_adno        ,etdr_adno         ,medc_paym_yn      ,medc_paym_date    ,memo              ,outs_mdor_name
      ,frst_judg_mpno   ,scnd_judg_mpno    ,thrd_judg_mpno    ,crnt_judg_mpno    ,redu_amt          ,publ_date
      ,publ_man_mpno    ,jugm_dstb_bsdv    ,jugm_dstb_sqno
  from tb_ncmeddcu
 where cust_id = '2014215622'
;


insert into tb_ncaplsph values (
 :p_poly_no   -- PYNO_BDCT_NO   증권번호_일괄계약번호
,'0000'       -- REVI_DLNG_NO   부활처리번호
,'NC'         -- BSNS_DVSN_CODE 업무구분코드
,'A11'        -- SRDO_FORM_KIND 청약서양식종류
,1            -- PUBL_SEQ_NO    발행일련번호
,'ORANGE'     -- LAST_CHMN_MPNO 최종변경자사번
,sysdate      -- LAST_CHNG_DTTM 최종변경일시
,'SQL'        -- PGM_ID         프로그램ID
,'01'         -- PUBL_RESN_CODE 발행사유코드
,'00214'      -- PUBL_ORGN_CODE 발행기관코드
,1            -- TOT_PAGE_NO    총페이지번호
,to_char(sysdate,'YYYYMMDD')  -- PUBL_DATE      발행일자
,'000000'                     -- PUBL_TIME      발행시각
,'Anyone'                     -- PUBL_MAN_MPNO  발행자사번
,1                            -- STRT_PAGE_NO   시작페이지번호
,1                            -- END_PAGE_NO    종료페이지번호
,null                         -- SRDO_NFRM_YN   청약서무장표여부
);




insert into tb_mascm050
select
 a.wrsp_lpno       -- 전담설계사고유번호
,b.cust_id         -- 고객ID
,'dbadmin'         -- 최종변경자사번
,SYSDATE           -- 최종변경일시
,'ORANGE'          -- 프로그램ID
,(select decode(max(admn_cust_no),null,1,max(admn_cust_no)+1) from tb_mascm050 t where t.wrsp_lpno=a.wrsp_lpno ) admn_cust_no    -- 관리고객번호
,b.use_yn          -- 사용여부
,b.befo_wrsp_lpno  -- 이전전담설계사고유번호
,b.new_appr_yn     -- 신규인정여부
,b.new_appr_date   -- 신규인정일자
,b.rgst_date       -- 등록일자
,b.rgst_time       -- 등록시각
,b.rgst_man_mpno   -- 등록자사번
,b.spor_yn         -- 협력자여부
,b.spor_rgdt       -- 협력자등록일자
,b.hshd_appr_yn    -- 세대인정여부
,b.hshd_appr_date  -- 세대인정일자
,b.name_insd_rule  -- 성명_두음법칙
,b.rsdn_rgst_no    -- 주민등록번호
,b.fnpl_reln       -- FP와의관계
,b.inps_cs_id      -- 소개자고객ID
,b.intr_date       -- 소개일자
,b.nwcs_appr_dvsn  -- 신규고객인정구분
,b.cust_type_dvsn  -- 고객유형구분
from
    (
    select
          '2040059'  WRSP_LPNO
         ,'6025034926' CUST_ID
      from dual
    ) a
   ,tb_mascm050 b
where a.CUST_ID = b.CUST_ID
  and rownum = 1

===================
ASIS 계약이력조회_20211008

  -- 계약이력
SELECT poly_no			증번
	 , 0				가입상품
     , hist_no			이력
	, LAST_CHMN_MPNO 	최종변경자
     , LAST_CHNG_DTTM 	최종변경일시
     , PGM_ID			최종변경프로그램
	 , irkd_code_dtal	보종세
	 , irkd_code_item	보종목
     , CNTT_STAT_CODE	계약상태
	 , CNTT_STAT_DTCD	계약상태상세
	 , BEFO_CTS_CODE	이전계약상태
	 , BEFO_CTS_DTCD	이전계약상태상세
	 , STRT_DATE		시작일자
	 , END_DATE			종료일자
	 , '-'				당일이후취소여부
	 , '-'				취소대상시작일자
	 , del_yn			삭제여부
  FROM tb_isaplchs
 WHERE poly_no = '177177806'
--   AND del_yn <> 'Y'
UNION
SELECT a.poly_no
	 , 0 가입상품
     , b.hist_no + 1 hist_no
	, A.LAST_CHMN_MPNO
     , A.LAST_CHNG_DTTM
     , A.PGM_ID
	 , a.irkd_code_dtal, a.irkd_code_item
     , a.CNTT_STAT_CODE, a.CNTT_STAT_DTCD, a.BEFO_CTS_CODE, a.BEFO_CTS_DTCD
	 , b.end_date STRT_DATE
	 , '99991231' END_DATE
	 , '-'				당일이후취소여부
	 , '-'				취소대상시작일자
	 , del_yn			삭제여부
  FROM tb_isaplctt a
     , tb_isaplchs b
 WHERE a.poly_no = '177177806'
   AND a.poly_no = b.poly_no
   AND b.hist_no = (SELECT MAX(hist_no) FROM tb_isaplchs WHERE poly_no = a.poly_no)
--   AND del_yn <> 'Y'
UNION


-- 가입상품이력
SELECT POLY_NO			증번
	 , JOIN_GOOD_NO		가입상품
	 , JNGD_HSNO		이력번호
	 , LAST_CHMN_MPNO	최종변경자
     , LAST_CHNG_DTTM	최종변경일시
     , PGM_ID			최종변경프로그램
     , GOOD_CODE_DTAL	상품세
	 , GOOD_CODE_ITEM	상품목
     , CNTT_STAT_CODE	계약상태
	 , CNTT_STAT_DTCD	계약상태상세
	 , BEFO_CTS_CODE	직전계약상태
	 , BEFO_CTS_DTCD	직전계약상태상세
	 , STRT_DATE		시작일자
	 , END_DATE			종료일자
	 , CRDD_AFTR_CNYN 	당일이후취소여부
	 , CNCL_OBJT_STDT 	취소대상시작일자
	 , del_yn			삭제여부
  FROM tb_isaplcjg
 WHERE poly_no = '177177806'
--   AND join_good_no = 12
--   AND del_yn = 'N'   
-- ORDER BY 시작일자, 종료일자, 가입상품
;

==========================
PSM목록_20211021

-- PSM 목록
SELECT B.CODE AS PSM_CODE
     , C.UUID
     , CASE WHEN C.DOMAIN_TYPE = 'UnitProduct' THEN 'Unit Product'
            WHEN C.DOMAIN_TYPE = 'SalesMP' THEN 'Sales Product'
            WHEN C.DOMAIN_TYPE = 'RoleComponent' THEN 'Role'
            WHEN C.DOMAIN_TYPE = 'ProductComponent' THEN 'Product Component'
            WHEN C.DOMAIN_TYPE = 'Component' THEN 'Component'
            WHEN C.DOMAIN_TYPE = 'ProductRequest' THEN 'Product Request'
            WHEN C.DOMAIN_TYPE = 'ComponentProperty' THEN 'Component Property'
            WHEN C.DOMAIN_TYPE = 'ComponentBaseProperty' THEN 'Component Base Property'
            WHEN C.DOMAIN_TYPE = 'Calculation' THEN 'Calculation'
            WHEN C.DOMAIN_TYPE = 'RequestBehaviour' THEN 'Request Behaviour'
            WHEN C.DOMAIN_TYPE = 'RuleSpecification' THEN 'Rule Specification'
            WHEN C.DOMAIN_TYPE = 'PoolContainerComponent' THEN 'Pool Container Product'
            WHEN C.DOMAIN_TYPE = 'CopmonentSpecification' THEN 'Component Specification'
            WHEN C.DOMAIN_TYPE = 'ApplicationComponent' THEN 'Application Component'
            ELSE C.DOMAIN_TYPE
       END AS DOMAIN_TYPE	
     , C.KIND_ID
	 , D.REF_ID
     , D.NAME AS KIND
     , C.DEF_DISP_NAME
     , A.ID AS PROD_ID
     , C.ID AS SPEC_ID
	 , C.DESCRIPTION
  FROM HPS.TBL_MARKETABLE_PRODUCT A
     , HPS.TBL_RESOURCE_VERSION E
	 , HPS.TBL_CMP_SPEC B
     , HPS.TBL_SPEC C
     , HPS.TBL_KIND D
 WHERE 1 = 1
--   AND A.PROD_TYPE = '2'  --1:Policy, 2:Coverage
--   AND A.PROD_TYPE = '1'  --1:Policy, 2:Coverage
   AND A.ID = E.RESOURCE_ID
   AND E.NEXT_VER_ID IS NULL  --가장최근건
   AND B.ID = A.ID
   AND C.ID = B.ID
   AND C.USE_YN = 'Y'
--   AND C.DISCRIMINATOR = 'UP'
   AND C.DOMAIN_TYPE = 'UnitProduct'  --20200615
   AND C.IS_POOL <> '1'
   AND D.ID = C.KIND_ID
   --UP보험계약, UC가입상품, UA연금급부, US제도
   AND ((B.CODE LIKE 'UP1%') OR (B.CODE LIKE 'UC0%') OR (B.CODE LIKE 'UA1%') OR (B.CODE LIKE 'US1%'))
 ORDER BY KIND, PSM_CODE
============================================
PSM별 상품구성요소목록_20211021

-- PSM코드별 상품구성요소 조회
WITH UNIT_PRODUCT AS (
SELECT B.CODE AS PSM_CODE
     , C.UUID
     , CASE WHEN C.DOMAIN_TYPE = 'UnitProduct' THEN 'Unit Product'
            WHEN C.DOMAIN_TYPE = 'SalesMP' THEN 'Sales Product'
            WHEN C.DOMAIN_TYPE = 'RoleComponent' THEN 'Role'
            WHEN C.DOMAIN_TYPE = 'ProductComponent' THEN 'Product Component'
            WHEN C.DOMAIN_TYPE = 'Component' THEN 'Component'
            WHEN C.DOMAIN_TYPE = 'ProductRequest' THEN 'Product Request'
            WHEN C.DOMAIN_TYPE = 'ComponentProperty' THEN 'Component Property'
            WHEN C.DOMAIN_TYPE = 'ComponentBaseProperty' THEN 'Component Base Property'
            WHEN C.DOMAIN_TYPE = 'Calculation' THEN 'Calculation'
            WHEN C.DOMAIN_TYPE = 'RequestBehaviour' THEN 'Request Behaviour'
            WHEN C.DOMAIN_TYPE = 'RuleSpecification' THEN 'Rule Specification'
            WHEN C.DOMAIN_TYPE = 'PoolContainerComponent' THEN 'Pool Container Product'
            WHEN C.DOMAIN_TYPE = 'CopmonentSpecification' THEN 'Component Specification'
            WHEN C.DOMAIN_TYPE = 'ApplicationComponent' THEN 'Application Component'
            ELSE C.DOMAIN_TYPE
       END AS DOMAIN_TYPE	
     , C.KIND_ID
	 , D.REF_ID
     , D.NAME AS KIND
     , C.DEF_DISP_NAME
     , A.ID AS PROD_ID
     , C.ID AS SPEC_ID
	 , C.DESCRIPTION
  FROM HPS.TBL_MARKETABLE_PRODUCT A
     , HPS.TBL_RESOURCE_VERSION E
	 , HPS.TBL_CMP_SPEC B
     , HPS.TBL_SPEC C
     , HPS.TBL_KIND D
 WHERE 1 = 1
--   AND A.PROD_TYPE = '2'  --1:Policy, 2:Coverage
--   AND A.PROD_TYPE = '1'  --1:Policy, 2:Coverage
   AND A.ID = E.RESOURCE_ID
   AND E.NEXT_VER_ID IS NULL  --가장최근건
   AND B.ID = A.ID
   AND C.ID = B.ID
   AND C.USE_YN = 'Y'
--   AND C.DEF_DISP_NAME LIKE '[Unit-P]보험계약상품_000%'
--   AND C.DISCRIMINATOR = 'UP'
   AND C.DOMAIN_TYPE = 'UnitProduct'  --20200615
   AND C.IS_POOL <> '1'
--   AND C.DEF_DISP_NAME LIKE '[Unit-C]가입상품_000%'
   AND D.ID = C.KIND_ID
   --UP보험계약, UC가입상품, UA연금급부, US제도
   --AND ((B.CODE LIKE 'UP1%') OR (B.CODE LIKE 'UC1%') OR (B.CODE LIKE 'UA1%') OR (B.CODE LIKE 'US1%'))
   AND ((B.CODE LIKE 'UP1%') OR (B.CODE LIKE 'UC0%') OR (B.CODE LIKE 'UA1%') OR (B.CODE LIKE 'US1%'))
--;
)
--PRODUCT_REQUEST AS (
SELECT B.PSM_CODE
	 , B.DESCRIPTION PSM_DESC
--     , A.UUID
     , CASE WHEN A.DOMAIN_TYPE = 'UnitProduct' THEN 'Unit Product'
            WHEN A.DOMAIN_TYPE = 'SalesMP' THEN 'Sales Product'
            WHEN A.DOMAIN_TYPE = 'RoleComponent' THEN 'Role'
            WHEN A.DOMAIN_TYPE = 'ProductComponent' THEN 'Product Component'
            WHEN A.DOMAIN_TYPE = 'Component' THEN 'Component'
            WHEN A.DOMAIN_TYPE = 'ProductRequest' THEN 'Product Request'
            WHEN A.DOMAIN_TYPE = 'ComponentProperty' THEN 'Component Property'
            WHEN A.DOMAIN_TYPE = 'ComponentBaseProperty' THEN 'Component Base Property'
            WHEN A.DOMAIN_TYPE = 'Calculation' THEN 'Calculation'
            WHEN A.DOMAIN_TYPE = 'RequestBehaviour' THEN 'Request Behaviour'
            WHEN A.DOMAIN_TYPE = 'RuleSpecification' THEN 'Rule Specification'
            WHEN A.DOMAIN_TYPE = 'PoolContainerComponent' THEN 'Pool Container Product'
            WHEN A.DOMAIN_TYPE = 'CopmonentSpecification' THEN 'Component Specification'
            WHEN A.DOMAIN_TYPE = 'ApplicationComponent' THEN 'Application Component'
            ELSE A.DOMAIN_TYPE
       END AS DOMAIN_TYPE	
     , A.KIND_ID
	 , C.REF_ID
     , C.NAME AS KIND
--     , CASE WHEN C.REF_ID = '427' THEN '중도부가신청서발행' 
--	        ELSE A.DEF_DISP_NAME
--		END REQ_NAME
	 , A.DEF_DISP_NAME NAME
	 , A.DESCRIPTION
     --, E.NAME AS TARGET_STATE  --처리후계약상태
--     , B.UUID AS PARENT_UUID
--     , A.ID AS SPEC_ID
--     , D.ID AS PRODUCT_REQUEST_ID
  FROM HPS.TBL_SPEC A
     , UNIT_PRODUCT B
     , HPS.TBL_KIND C
--     , HPS.TBL_PRODUCT_REQUEST D
     --, HPS.TBL_PRODUCT_STATE E
 WHERE A.PROD_ID = B.PROD_ID
   AND A.USE_YN = 'Y'
--   AND A.DOMAIN_TYPE = 'ProductRequest'  --20200615
   AND C.ID = A.KIND_ID
   AND A.DOMAIN_TYPE <> 'UnitProduct'
   AND A.DOMAIN_TYPE <> 'Calculation'
--   AND D.ID = A.ID
  ORDER BY PSM_CODE, DOMAIN_TYPE, KIND
;

===================================
가입설계구성 데이터 입력_20130726

-- 가입설계 대표상품 복사 --
insert into tb_maplt025@dl_mm
select '1761019','박미옥',sysdate,'SQL',fund_join_dvsn,rprs_inkd_name,mcnt_join_dvsn,prpy_plan_dvsn,mwwd_plan_dvsn,adpl_emtb_dvsn,link_scrn_id
  from tb_maplt025@dl_mm
 where rprs_inkd_code = '1761001';
 

-- 가입설계 메뉴구성 --
insert into tb_maplt021@dl_mm
select '1609082', outp_ordr, '박미옥',sysdate,'SQL', irkd_code_dtal, '082', inkd_slct_dv1,inkd_slct_dv2,inkd_slct_dv3,inkd_slct_dv4,inkd_slct_dv5,use_item_usyn
  from tb_maplt021@dl_mm
 where irkd_code_dtal = '1609'
   and irkd_code_item >= '079'
   and irkd_code_item <= '080';

-- 가입설계 상품구성 Copy --
insert into tb_maplt022@dl_mm
select irkd_code_dtal
     , trim(to_char(irkd_code_item + 2,'000')) irkd_code_item
     , sale_chnl_code
     , outp_ordr
     , outp_ordr_dtal
     , '박미옥'
     , sysdate
     , 'SQL'
     , good_code_dtal
     , good_code_item
     , use_item_usyn
     , jnpl_good_name
  from tb_maplt022@dl_mm
 where irkd_code_dtal = '1609'
   and irkd_code_item >= '079'
   and irkd_code_item <= '080'
   and sale_chnl_code = '1';


-- 해지환급금
insert into tb_maplt028@dl_mm
select irkd_code_dtal
     , trim(to_char(irkd_code_item + 18,'000')) irkd_code_item
     , '박미옥'
     , sysdate
     , 'SQL'
     , cnct_expl_dv1
     , cnct_expl_dv2
     , expl_eltr_dvsn
  from tb_maplt028@dl_mm
 where irkd_code_dtal = '1761'
   and irkd_code_item >= '001'
   and irkd_code_item <= '018';
 
 
-- 해지환급금 예시표 하단 문구
insert into tb_maplt030@dl_mm
select irkd_code_dtal
     , trim(to_char(irkd_code_item + 18,'000')) irkd_code_item
     , seq_no
     , '박미옥'
     , sysdate
     , 'SQL'
     , add_expl
  from tb_maplt030@dl_mm
 where irkd_code_dtal = '1761'
   and irkd_code_item >= '001'
   and irkd_code_item <= '018';
 
-- 2013.09 실손특약 상품코드 업데이트
update tb_maplt022@dl_mm
   set good_code_item = trim(to_char(good_code_item + 18,'000'))
 where good_code_dtal in ('5676','5677','5678','5679')
   and (irkd_code_dtal, irkd_code_item, sale_chnl_code) in (
       select irkd_code_dtal, irkd_code_item, sale_chnl_code
         from tb_mmnorssl@dl_mm
        where sale_strt_date = '20130901')

		=======================
		
가입설계상품구성데이터입력

		
insert into tb_maplt022@dl_mm
select irkd_code_dtal,
       irkd_code_item,
       sale_chnl_code,
       outp_ordr,
       outp_ordr_dtal,
       '1990264',
       sysdate,
       'SQL',
       good_code_dtal,
       good_code_item,
       good_name,
       use_item_usyn
  from (
        select distinct
               a.irkd_code_dtal,
               a.irkd_code_item,
               b.sale_chnl_code,
               a.outp_ordr,
               a.outp_ordr_dtal,
               a.good_code_dtal,
               a.good_code_item,
               a.good_name,
               a.use_item_usyn
          from tb_maplt022@dl_mm a,
               tb_mmnorcon@dl_mm b
         where a.irkd_code_dtal = b.irkd_code_dtal
           and a.irkd_code_item = b.irkd_code_item
           and b.sale_strt_date = '20090601'
        minus
        select irkd_code_dtal,
               irkd_code_item,
               sale_chnl_code,
               outp_ordr,
               outp_ordr_dtal,
               good_code_dtal,
               good_code_item,
               good_name,
               use_item_usyn
          from tb_maplt022@dl_mm
       )
================================
가입청약 가입상품 비교검증

가입설계, 청약서 가입상품(보기, 납기, 가입금액, 보험료) 비교 검증

-- 가입상품 검증
select a.poly_no, d.plan_no,
     c.good_code_dtal, c.good_code_item,
     c.insr_term_dvsn||c.insr_term nc보기, d.intr_inqr_code ma보기,
     c.PAYM_TERM_DVSN||c.PAYM_TERM nc납기, d.pytr_inqr_code ma납기,
     c.INSR_AMT nc가입금액, d.join_amt_mult ma가입금액, d.join_amt_mult - c.INSR_AMT 가입금액차,
     c.ORIG_PREM nc보험료, d.prem ma보험료, d.prem - c.ORIG_PREM 보험료차
from tb_ncaplci1 a, tb_isaplcjg c, tb_maplt009 d
where a.poly_no = c.poly_no
 and a.plan_no = d.plan_no
 and c.good_code_dtal = d.good_code_dtal
 and c.good_code_item = d.good_code_item
 and a.poly_no in (select poly_no 
                    from tb_isaplctt ctt, tb_mmnorssl@dl_mm ssl
                   where ctt.irkd_code_dtal = ssl.irkd_code_dtal
                     and ctt.irkd_code_item = ssl.irkd_code_item
                     and ctt.sale_chnl_code = ssl.sale_chnl_code
                     and ssl.sale_strt_date = '20160101')
 and exists (select 'X' from tb_ncaplsph where pyno_bdct_no = a.poly_no)
 and (c.insr_term_dvsn||c.insr_term <> d.intr_inqr_code
   or c.PAYM_TERM_DVSN||c.PAYM_TERM <> d.pytr_inqr_code
   or c.INSR_AMT <> d.join_amt_mult
   or c.ORIG_PREM <> d.prem)
 and c.end_date = '99991231';
 
 
 
-- 계약
select a.poly_no, a.irkd_code_dtal, a.irkd_code_item, a.cntt_date, b.srdo_publ_date, b.plan_no
  from tb_isaplctt a, tb_ncaplci1 b
 where a.poly_no = b.poly_no
   and a.poly_no = '172144876';

-- 가입설계 부가정보
select *
  from tb_maplt011
 where plan_no = '205369225';

-- 연금가입정보
select *
  from tb_isanninf
 where poly_no = '172145450';
 
select *
  from tb_isanninf
 where poly_no in (select poly_no 
                     from tb_isaplctt 
                    where irkd_code_dtal = '1791' 
                      and irkd_code_item = '001' 
                      and cntt_stat_code = '1')
;


=========================
가입한도데이터미존재상품

select distinct
       a.irkd_code_dtal,
       a.irkd_code_item,
       a.good_code_dtal,
       a.good_code_item,
       c.good_notc_name
  from tb_mmnorcon a,
       tb_mmnormat c
 where (select 'X'
          from tb_mmentlit b
         where b.irkd_code_dtal = a.irkd_code_dtal
           and b.irkd_code_item = a.irkd_code_item
           and b.sale_chnl_code = a.sale_chnl_code
           and b.good_code_dtal = a.good_code_dtal
           and b.good_code_item = a.good_code_item
           and rownum = 1) is NULL
   and a.good_code_dtal = c.good_code_dtal
   and a.good_code_item = c.good_code_item
   
   
====================
가입한도오류건
select a.irkd_code_dtal,
       a.irkd_code_item,
       a.sale_chnl_code,
       a.good_code_dtal,
       a.good_code_item,
       a.jolt_calt_code,
       a.numr,
       a.dnmt,
       a.stdd_amt,
       b.numr,
       b.dnmt,
       b.stdd_amt
  from tb_mmentlit a,
      (select irkd_code_dtal,
              irkd_code_item,
              sale_chnl_code,
              good_code_dtal,
              good_code_item,
              numr,
              dnmt,
              stdd_amt
	 	 from tb_mmentlit
		where jolt_scop_code = 3) b ,
       tb_mmnorcon c
 where a.jolt_scop_code = 1
   and (a.stdd_amt / b.stdd_amt) <> round(a.stdd_amt / b.stdd_amt)
   and to_char(sysdate,'YYYYMMDD') between c.sale_strt_date and c.sale_end_date
   and a.irkd_code_dtal = b.irkd_code_dtal
   and a.irkd_code_item = b.irkd_code_item
   and a.sale_chnl_code = b.sale_chnl_code
   and a.good_code_dtal = b.good_code_dtal
   and a.good_code_item = b.good_code_item
   and a.irkd_code_dtal = c.irkd_code_dtal
   and a.irkd_code_item = c.irkd_code_item
   and a.sale_chnl_code = c.sale_chnl_code
   and a.good_code_dtal = c.good_code_dtal
   and a.good_code_item = c.good_code_item
   
======================
건강체보종

-- 보종별 건강체 정보를 읽는다
select distinct
                  a.CHAF_IRKD_DTAL||a.CHAF_IRKD_ITEM 보종,
                  a.IRKD_CODE_DTAL||a.IRKD_CODE_ITEM 건강체
             from (
           select a.IRKD_CODE_DTAL, a.IRKD_CODE_ITEM,
                  b.CHAF_IRKD_DTAL, b.CHAF_IRKD_ITEM
             from (
           select IRKD_CODE_DTAL, IRKD_CODE_ITEM,
                  max(GOOD_CHNG_SQNO) GOOD_CHNG_SQNO
             from tb_ccswpmap
            where GOOD_CHNG_CACD = '107'
              and IRKD_CODE_DTAL = GOOD_CODE_DTAL
              and IRKD_CODE_ITEM = GOOD_CODE_ITEM
         group by IRKD_CODE_DTAL, IRKD_CODE_ITEM
                  ) a, tb_ccswpmap b
            where a.IRKD_CODE_DTAL = b.IRKD_CODE_DTAL
              and a.IRKD_CODE_ITEM = b.IRKD_CODE_ITEM
              and a.IRKD_CODE_DTAL = b.GOOD_CODE_DTAL
              and a.IRKD_CODE_ITEM = b.GOOD_CODE_ITEM
              and b.GOOD_CHNG_CACD = '107'
              and a.GOOD_CHNG_SQNO = b.GOOD_CHNG_SQNO
            union
           select distinct
                  CHBF_IKCD_DTAL, CHBF_IKCD_ITEM,
                  CHAF_IKCD_DTAL, CHAF_IKCD_ITEM
             from tb_ccchgmap
                  ) a, tb_mmnorssl@dl_mm b, tb_mmnoratr@dl_mm c
            where a.IRKD_CODE_DTAL = b.IRKD_CODE_DTAL
              and a.IRKD_CODE_ITEM = b.IRKD_CODE_ITEM
              and a.IRKD_CODE_DTAL = c.GOOD_CODE_DTAL
              and a.IRKD_CODE_ITEM = c.GOOD_CODE_ITEM
              and c.HEAL_GOOD_YN = 'Y'
         order by 보종;
		 ====================
검증대상건조회쿼리
select *
  from (
select c.poly_no
      ,a.sub_cust_id cust_id
      ,b.rsdn_rgst_no
      ,b.cust_name
      ,a.fmly_reln_code
      ,DECODE(a.fmly_reln_code,'11','X','12','Y','14','Z','13','Y1',a.fmly_reln_code) join_insu_code
      ,CASE WHEN a.fmly_reln_code = '11'
                 THEN '21'
            WHEN a.fmly_reln_code = '12'
                 THEN '22'
            WHEN a.fmly_reln_code = '14' and row_number() over (partition by a.fmly_reln_code order by decode(substr(b.rsdn_rgst_no,7,1),'1',1,'2',1,'3',2,'4',2,'5',1,'6',1,'7',2,'8',2),b.rsdn_rgst_no) = 1
                 THEN '23'
            WHEN a.fmly_reln_code = '14' and row_number() over (partition by a.fmly_reln_code order by decode(substr(b.rsdn_rgst_no,7,1),'1',1,'2',1,'3',2,'4',2,'5',1,'6',1,'7',2,'8',2),b.rsdn_rgst_no) = 2
                 THEN '24'
            WHEN a.fmly_reln_code = '13'
                 THEN '28'
            ELSE a.fmly_reln_code
       END cust_role_code
  from tb_csscm040 a
      ,tb_csscm010 b
      ,(select a.poly_no, b.cust_id
          from tb_isaplctt a,
               tb_isaplcmr b,
               tb_isaplcrm c
         where a.irkd_code_dtal = '1610'
           and a.irkd_code_item >= '027'
           and a.cntt_stat_code = '1'
           and a.poly_no = b.poly_no
           and b.cust_role_code = '21'
           and b.end_date = '99991231'
           and b.del_yn = 'N'
           and b.poly_no = c.poly_no
           and b.cntt_prtr_no = c.cntt_prtr_no
           and b.cust_id = c.cust_id
           and c.end_date = '99991231'
           and c.del_yn = 'N'
           and c.cntt_sex = '1'
           and c.cntt_age between 20 and 27
           and rownum < 200) c
 where a.main_cust_id = c.cust_id
   and a.sub_cust_id  = b.cust_id)
where JOIN_INSU_CODE in ('Y','Z')




select a.poly_no, b.cust_id
          from tb_isaplctt a,
               tb_isaplcmr b,
               tb_isaplcrm c
         where a.irkd_code_dtal = '1626'
           and a.irkd_code_item >= '054'
           and a.cntt_stat_code = '1'
           and a.poly_no = b.poly_no
           and b.cust_role_code = '21'
           and b.end_date = '99991231'
           and b.del_yn = 'N'
           and b.poly_no = c.poly_no
           and b.cntt_prtr_no = c.cntt_prtr_no
           and b.cust_id = c.cust_id
           and c.end_date = '99991231'
           and c.del_yn = 'N'
           and c.cntt_sex = '1'
           and c.cntt_age between 20 and 27
           and exists (select 'Y' from tb_mascm040 where main_cust_id = b.cust_id and fmly_reln_code = '12')
           and exists (select main_cust_id, count(*) from tb_mascm040 where main_cust_id = b.cust_id and fmly_reln_code = '14' group by main_cust_id having count(*) = 2)
           
           
select a.poly_no, b.cust_id
          from tb_isaplctt a,
               tb_isaplcmr b,
               tb_isaplcrm c
         where a.irkd_code_dtal = '1676'
           and a.irkd_code_item >= '001'
           and a.cntt_stat_code = '1'
           and a.poly_no = b.poly_no
           and b.cust_role_code = '21'
           and b.end_date = '99991231'
           and b.del_yn = 'N'
           and b.poly_no = c.poly_no
           and b.cntt_prtr_no = c.cntt_prtr_no
           and b.cust_id = c.cust_id
           and c.end_date = '99991231'
           and c.del_yn = 'N'
           and c.cntt_sex = '1'
           and c.cntt_age between 21 and 40
           and exists (select 'Y' from tb_mascm040 where main_cust_id = b.cust_id and fmly_reln_code = '12')
           and exists (select main_cust_id, count(*) from tb_mascm040 where main_cust_id = b.cust_id and fmly_reln_code = '14' group by main_cust_id having count(*) = 2)
           and not exists (select 'P' from tb_isaplcjg x, tb_mmnormat y where x.good_code_dtal = y.good_code_dtal 
                                                                          and x.good_code_item = y.good_code_item 
                                                                          and x.end_date = '99991231'
                                                                          and x.poly_no = a.poly_no
                                                                          and (y.pmmi_gurt_yn = 'Y' or x.good_code_dtal = '5582'))

// 기계약에 실손,수술특약 없는 계약                                                              
select a.poly_no, b.cust_id
          from tb_isaplctt a,
               tb_isaplcmr b
         where a.irkd_code_dtal = '1626'
           and a.irkd_code_item >= '049'
           and a.cntt_stat_code = '1'
           and a.poly_no = b.poly_no
           and b.cust_role_code = '21'
           and b.end_date = '99991231'
           and b.del_yn = 'N'
            and not exists (select 'P' from tb_isaplcjg x, tb_mmnormat y, tb_isaplcmr z where x.good_code_dtal = y.good_code_dtal 
                                                                          and x.good_code_item = y.good_code_item 
                                                                          and x.end_date = '99991231'
                                                                          and x.poly_no = z.poly_no
                                                                          and (y.pmmi_gurt_yn = 'Y' or x.good_code_dtal = '5582')
                                                                          and z.cust_id = b.cust_id
                                                                          and z.cust_role_code = '21'
                                                                          and z.end_date = '99991231'
                                                                          and z.del_yn = 'N')


===============================
계약원부 데이터 조회
-- 보종별별 보유건수
select irkd_code_dtal, irkd_code_item, count(1)
  from tb_isaplctt
 where irkd_code_dtal = '1110'
 group by irkd_code_dtal, irkd_code_item
 order by irkd_code_dtal, irkd_code_item
;
 

select *
  from tb_isaplctt
 where irkd_code_dtal between '1244' and '1247';

-- 계약상태별 보유건수
select irkd_code_dtal, irkd_code_item, cntt_stat_code, count(1)
  from tb_isaplctt
 where irkd_code_dtal = '1118' 
 group by irkd_code_dtal, irkd_code_item, cntt_stat_code;

-- 개별건
select  min(frst_cntt_date), max(frst_cntt_date)
  from tb_isaplctt
 where irkd_code_dtal = '1120' 
   and irkd_code_item between '009' and '016'
--   and cntt_date > '19970331'
--   and cntt_stat_code = '4'
;
 
 
select *
  from tb_ccswpmap
 where chaf_gdcd_dtal like '124%'
===================================
고객역할코드정리_20190613

-- 고객역할코드(공통코드) 확인
SELECT code_val, code_name
  FROM tb_uvcdm002
 WHERE code_id = 'CUST_ROLE_CODE';


-- 고객역할코드(원부) 확인
SELECT /*+ parallel(a 10) */ *
  FROM tb_isaplcmr a
 WHERE cust_role_code = '13'
 ; -- 136202403

-- 고객역할코드(증번별) 확인
 SELECT /*+ parallel(a 10) */ *
  FROM tb_isaplcmr a
 WHERE poly_no = '136283733'
 ;
 
 SELECT /*+ parallel(a 10) */ poly_no, COUNT(1), COUNT(DISTINCT cust_id)
   FROM tb_isaplcmr A
  WHERE poly_no IN (
		 SELECT /*+ parallel(a 10) */ poly_no
		  FROM tb_isaplcmr a
		 WHERE cust_role_code = '13'
		   --AND LENGTH(POLY_NO) = 9
		   --AND ROWNUM < 1000
		   )
    AND cust_role_code LIKE '1%'
	AND CUST_ROLE_HSNO = 1
	AND del_yn = 'N'
  GROUP BY poly_no
 ; -- 138201739
 
 SELECT *
   FROM tb_isaplcmr a, tb_isaplcrm b
  WHERE a.poly_no = b.poly_no
    AND a.poly_no = '138201739'
	AND a.cntt_prtr_no = b.cntt_prtr_no
	AND a.cust_role_code = '12';
	
SELECT *
  FROM tb_isaplins a
 WHERE a.poly_no = '138201739';
 

SELECT *
  FROM tb_iscjgins a, tb_isaplins b, tb_isaplcmr c
 WHERE a.poly_no = '138201739'
   AND a.poly_no = b.poly_no
   AND a.poly_no = c.poly_no
   AND c.cust_role_code = '12'
   AND b.cntt_prtr_no = c.cntt_prtr_no
   AND a.insu_no = b.insu_no;
   
SELECT *
  FROM tb_isaplctt
 WHERE poly_no = '136202403';
 
SELECT *
  FROM tb_csscm010
 WHERE cust_id = '4007000974';
   
   
1. 고객역할코드
11	계약자
12	제2계약자
13	계약자단체
21	주피보험자
22	제2피보험자(종피보험자)
23	제3피보험자(자녀1)
231	자녀1(불특정다수)
232	자녀2(불특정다수)
233	자녀3(불특정다수)
234	자녀4(불특정다수)
235	자녀5(불특정다수)   -- 미사용
236	자녀6(불특정다수)   -- 미사용
237	자녀7(불특정다수)   -- 미사용
238	자녀8(불특정다수)   -- 미사용
239	자녀9(불특정다수)   -- 미사용
24	제4피보험자(자녀2)
25	제5피보험자(피부양자)
26	제6피보험자
27	제7피보험자
28	부모1
29	부모2               -- 미사용
31	만기(생존)시수익자
32	만기(생존)시수익자  -- 미사용
33	만기(생존)시수익자  -- 미사용
34	만기(생존)시수익자  -- 미사용
35	만기(생존)시수익자  -- 미사용
41	입원/장해수익자
42	입원/장해수익자     -- 미사용
43	입원/장해수익자     -- 미사용
44	입원/장해수익자     -- 미사용
45	입원/장해수익자     -- 미사용
50	대표수익자
51	사망시수익자
52	사망시수익자
53	사망시수익자
54	사망시수익자
55	사망시수익자        -- 미사용

99  공통코드에 없으나 원부에 존재. 증번 : 42832510, 삭제여부='Y'


2. 가입피보험자 코드
V	피부양자
V1	피부양자1
V2	피부양자2
W	계약자
X	(주)피보험자
Y	종피보험자(배우자)
Y1	종피보험자(부모)
Y4	종피4
Y5	종피5
Y6	종피6
Z	자녀
Z1	자녀1
Z2	자녀2

피보험자코드/사고피보험자코드 조합
 SELECT /*+ parallel(a 10) */ 
        DISTINCT insu_code, acci_insu_code
  FROM tb_iscjgins A
;
*	V
*	X
*	Y
*	Z
*	Z1
*	Z2
X	*
X	V
X	V1
X	V2
X	X
X	Y
X	Y4
X	Y5
X	Y6
X	Z
X	Z1
X	Z2
Y	*
Y	V
Y	X
Y	Y
Y	Y1
Y	Z
Y1	Y1
Z	*
Z	Z
Z	Z1
Z1	Z1

가입상품피보험자TB 피보험자코드
 SELECT /*+ parallel(a 10) */ 
        *
  FROM tb_iscjgins A
 WHERE INSU_CODE IN ('Y1','Z1')
;

X
Y
Y1 --증번:117960080, 상품:5116 005
Z
Z1 --증번:130327759, 상품:5116 008

3. 계약자법인 역할코드 존재 상품
SELECT /*+ parallel(a 10) */ A.POLY_NO, A.CUST_ROLE_HSNO, B.IRKD_CODE_DTAL, B.IRKD_CODE_ITEM, 
        A.CUST_ID, B.CNTT_GRP_CTID 계약시단체고객ID, 
		C.CTOR_CRPB_YN 계약자법인체여부, 
		C.PREM_COPR_CGRT 법인부담율, C.GRTT_SPCD_YN 단체취급특약여부
  FROM tb_isaplcmr a, TB_ISAPLCTT B, TB_ISAPLCI2 C
 WHERE A.cust_role_code = '13'
   AND A.DEL_YN = 'N'
   AND A.POLY_NO = B.POLY_NO
   AND A.POLY_NO = C.POLY_NO
   AND B.CNTT_STAT_CODE NOT IN ('6','L')
   ;
   
==============================
고객정보조회동의승인

-- 특정FP 관리고객 전체
insert into tb_csscm210
select a.cust_id,   -- 고객ID
       a.wrsp_lpno, -- FP고유번호
       '01',      -- 동의구분
       (select nvl(max(hist_no),0) + 1 from tb_csscm210 where cust_id = a.cust_id and fnpl_prno = a.wrsp_lpno),         -- 일련번호
       '2101113', -- 최종변경자사번
       sysdate,
       'Orange',
       '153433', -- 이미지관리번호
       to_char(sysdate,'yyyymmdd'), -- 등록일자
       '2101113',
       '00231',
       to_char(sysdate,'yyyymmdd'), -- 신청일자
       '2101113',
       '00231',
       to_char(sysdate,'yyyymmdd'), -- 승인일자
       '2101113',
       '00231',
       '99991231', -- 종료일자
       'Y',        -- 승인여부
       ''          -- 녹취파일명
  from tb_mascm050 a
 where a.wrsp_lpno = '2101113';
 

-- 특정 주민번호 
insert into tb_csscm210
select a.cust_id,   -- 고객ID
       '2101113', -- FP고유번호
       '01',      -- 동의구분
       (select nvl(max(hist_no),0) + 1 from tb_csscm210 where cust_id = a.cust_id and fnpl_prno = '2101113'),         -- 일련번호
       '2101113', -- 최종변경자사번
       sysdate,
       'Orange',
       '153433', -- 이미지관리번호
       to_char(sysdate,'yyyymmdd'), -- 등록일자
       '2101113',
       '00231',
       to_char(sysdate,'yyyymmdd'), -- 신청일자
       '2101113',
       '00231',
       to_char(sysdate,'yyyymmdd'), -- 승인일자
       '2101113',
       '00231',
       '99991231', -- 종료일자
       'Y',        -- 승인여부
       ''          -- 녹취파일명
  from tb_csscm010 a
 where rsdn_rgst_no in ('5403031SKLrbo',
'8011121gXLNud',
'6409221lKjRkY',
'7406211LcZreZ',
'5904231wjiekq',
'6008091mUeyFY',
'9106031lzftzL',
'6012122gjZRbd',
'7306062gjZRbd',
'5708082gjZRbd',
'8209092gjZRbd',
'8807072gjZRbd',
'5201312gjZRbd',
'6511112gjZRbd',
'9008082StzeuL',
'9212122kcZRuC',
'9310101SakluJ',
'9402032SLLtlx',
'7902022gjZRbd',
'8511211aceNex',
'9112132DLLtlL')
=============================
공시이율조회
select rato_kind_code,
       rato
from tb_mmnorrtk
where to_char(sysdate,'YYYYMMDD') between strt_date and end_date
  and rato_kind_code in ('63','51','53','61')
==========================
공통

-- 테이블 검색
SELECT *
FROM ALL_COL_COMMENTS
WHERE table_name LIKE 'TB_MM%';

SELECT *
FROM ALL_TAB_COMMENTS
WHERE COMMENTS LIKE '%영문%증권%';

-- 공통코드 조회
SELECT A.CODE_ID, A.CODE_NAME, B.CODE_ID, B.CODE_VAL, B.CODE_NAME
  FROM TB_UVCDM001 A, TB_UVCDM002 B
 WHERE A.CODE_ID = :CODE_ID
   AND A.INER_STDD_CODE = B.CODE_ID
   AND A.END_DATE = '99991231'
   AND B.END_DATE = '99991231';
 
====================================
금리연동형연금테이블조회

-- 금리연동형연금(tb_mmpayanr) 테이블 데이터 조회

select distinct good_code_dtal || good_code_item 보종
     ,annt_type_code 연금형태
     ,good_type_dvcd 상품유형
,case when annt_type_code = '1' and gurt_pytr_dvcd = 'N' then -gurt_paym_term
      when annt_type_code = '2' and dcsn_pytr_dvcd = 'N' then -dcsn_paym_term
      when annt_type_code = '2'                          then  dcsn_paym_term
      else                                                     gurt_paym_term
 end  확정보증지급기간
,case when annt_type_code in ('1','6') and gurt_pytr_dvcd = 'N' then '보증기간부(' || gurt_paym_term || '세보증)'
      when annt_type_code in ('1','6')                          then '보증기간부(' || gurt_paym_term || '년보증)'
      when annt_type_code in ('2','7') and dcsn_pytr_dvcd = 'N' then '확정' || dcsn_paym_term || '세형'
      when annt_type_code in ('2','7')                          then '확정' || dcsn_paym_term || '년형'
      when annt_type_code = '3'                                 then '상속형'
      when annt_type_code = '10'                                then '보증금액부'
 end 연금지급형태
from tb_mmpayanr@dl_mm a,
     tb_mmnorssl@dl_mm b
where a.good_code_dtal = b.irkd_code_dtal
 and a.good_code_item = b.irkd_code_item
 and b.sale_strt_date <= :aDate and b.sale_end_date >= :bDate
 and seq_no < (select nvl(seq_no, '99')                       -- 신계약가능여부 컬럼 추가시 변경해야할 부분
                 from tb_mmpayanr@dl_mm
                where annt_type_code = '5'
                  and good_code_dtal = a.good_code_dtal
                  and good_code_item = a.good_code_item)
 and 1 < (select count(*)                                     -- 신계약가능여부 컬럼 추가시 변경해야할 부분
            from tb_mmpayanr@dl_mm c,
                 tb_mmpayanr@dl_mm d
           where c.annt_type_code = '5'
             and c.good_code_dtal = d.good_code_dtal
             and c.good_code_item = d.good_code_item
             and c.good_code_dtal = a.good_code_dtal
             and c.good_code_item = a.good_code_item
             and d.seq_no < nvl(c.seq_no, '99'))
order by 보종
=======================
급부_가입설계_20190227
 -- 가설 특약 문구
select distinct
                  a.good_code_dtal 상품세, a.good_code_item 상품목, 
				  a.good_expl_pmcd 급부코드,
				  a.prst_sqno 급부일련번호,
				  a.outp_ordr 순서,
                  nvl(a.acci_resl_code, 0) 사고결과,
                  upper(a.accm_code) 사고자코드,
                  decode(upper(a.accm_code), 'X','본인형', 'Y','배우자형',
                              'Y1','부모형', 'Z1','자녀1', 'Z2','자녀2',
                              'Z','자녀형', '기타') 사고자,
                  a.item_cd1 c1, b.item_cd1_min a1, b.item_cd1_max b1,
                  a.item_cd2 c2, b.item_cd2_min a2, b.item_cd2_max b2,
                  a.item_cd3 c3, b.item_cd3_min a3, b.item_cd3_max b3,
                  a.item_cd4 c4, b.item_cd4_min a4, b.item_cd4_max b4,
                  a.item_cd5 c5, b.item_cd5_min a5, b.item_cd5_max b5,
                  b.stdd_amt_cd1 기준금1, b.numr_1 분자1, b.dnmt_1 분모1,
                  b.optr_code 연산자,
                  b.stdd_amt_cd2 기준금2, b.numr_2 분자2, b.dnmt_2 분모2,
                  d.code_name 급부명,
                  nvl(rtrim(b.gurt_paym_ct1), ' ') 지급내용1,
                  nvl(rtrim(b.gurt_paym_ct2), ' ') 지급내용2,
                  nvl(rtrim(b.gurt_paym_ct3), ' ') 지급내용3,
                  nvl(trim(b.amt_outp_prg1), ' ') 문구1,
                  nvl(trim(b.amt_outp_prg2), ' ') 문구2
             from tb_mmnorpsi@dl_mm a, tb_mmnorprd@dl_mm b,
                  tb_mmnorcon@dl_mm c, tb_mmnorgec@dl_mm d
            where a.good_code_dtal = b.good_code_dtal
              and a.good_code_item = b.good_code_item
              and a.good_expl_pmcd = b.good_expl_pmcd
              and      a.prst_sqno = b.prst_sqno
              and a.good_code_dtal = c.good_code_dtal
              and a.good_code_item = c.good_code_item
              and a.good_expl_pmcd = d.good_expl_code	
			  AND c.irkd_code_dtal = '1797'
			  AND c.irkd_code_item = '007'
              and (a.good_code_dtal ='1224' or '5000' <= a.good_code_dtal)
              and a.good_code_dtal != '5627'
         order by 상품세, 상품목, 순서, 사고결과, 사고자코드,
                  a1,b1, a2,b2, a3,b3, a4,b4, a5,b5;
				  
-- 가설 특약 급부 부가설명
select distinct
		  a.good_code_dtal||a.good_code_item 상품, a.outp_ordr 순서,
		  trim(a.add_expl) 급부부가설명
	 from tb_mmnorade@dl_mm a, tb_mmnorcon@dl_mm b
	where a.good_code_dtal = b.good_code_dtal
	  and a.good_code_item = b.good_code_item
	  and (a.good_code_dtal = '1224' or '5000' <= a.good_code_dtal)
	  and a.good_code_dtal != '5627'
	order by 상품, 순서;
=================================
급부_증권_20190227
SELECT prst_code, prst_cond_code, prst_name
  FROM tb_mmpayamt;
  
SELECT *
  FROM tb_mmnorgec
 WHERE good_expl_cddv = 'PRST';
 
 
--TB_BOGUPR01
--TB_BOGUPR02
--TB_BOGUPR04

SELECT A.GOOD_CODE_DTAL
     , A.GOOD_CODE_ITEM
	 , A.GURT_PRST_SQNO
	 , C.PRST_NAME_CODE
	 , C.PRST_NAME
	 , B.CUST_ROLE_CODE
	 , B.GUPR_OUTP_ORDR
	 , B.GURT_PRGP_NAME
	 , B.GDNT_MNPR_CODE
	 , A.GURT_PRST_SACD
	 , A.GURT_PYML_NUMR
	 , A.GURT_PYML_DNMT
	 , A.POLY_TYPE_SAMT
	 , A.PAYM_AMT_NAME	 
	 , A.MASC_YN
  FROM TB_BOGUPR01 A, TB_BOGUPR02 B, TB_BOGUPRNM C
 WHERE (A.IRKD_CODE_DTAL, A.IRKD_CODE_ITEM) IN 
		(SELECT DISTINCT GOOD_CODE_DTAL, GOOD_CODE_ITEM
		   FROM TB_MMNORCON
		  WHERE IRKD_CODE_DTAL = '1797'
		    AND IRKD_CODE_ITEM = '007')
   AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
   AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM
   AND A.USE_BSNS_DVSN = B.USE_BSNS_DVSN
   AND A.GURT_PRST_SQNO = B.GURT_PRST_SQNO
   AND B.PRST_NAME_CODE = C.PRST_NAME_CODE
   AND B.END_DATE = '99991231'
   AND C.END_DATE = '99991231'
 ORDER BY A.GOOD_CODE_DTAL, A.GOOD_CODE_ITEM, A.GURT_PRST_SQNO,B.GUPR_OUTP_ORDR;
 
 SELECT *
  FROM TB_BOGUPR02 A
 WHERE IRKD_CODE_DTAL = '1797'
   AND IRKD_CODE_ITEM = '007';
 
SELECT *
  FROM TB_BOGUPR04 A
 WHERE IRKD_CODE_DTAL = '1797'
   AND IRKD_CODE_ITEM = '007'
 ORDER BY NOTC_PRGP_SQNO;
 

  
  
=====================
내근 명단
select 
       a.EMPL_NO 구사번
      ,b.empl_no 현사번
      ,a.EMPL_NAME 성명
      ,substr(a.RSDN_RGST_NO,1,6) 생년월일
      ,b.CLPO_CDNM
      ,b.PAYS_CODE
      ,a.TERM
from (
select t.EMPL_NO
      ,t.EMPL_NAME
      ,t.RSDN_RGST_NO
      ,t.CUST_ID
      ,t.CLPO_CODE
      ,(select CODE_NAME
          from tb_uvcdm002
         where code_id = 'CLPO_CODE'
           and code_val = t.CLPO_CODE) CLPO_CDNM
      ,PAYS_CODE
      ,trunc(months_between(sysdate,to_date(ENTR_DATE,'YYYYMMDD'))/12) term
      ,t.WORK_PSTN_OGCD
 from tb_uvorg006 t
 where (t.empl_no,t.cust_id) in (select min(y.empl_no),y.cust_id
                                   from tb_uvorg006 x
                                       ,tb_uvorg006 y
                                 where x.CUST_ID = y.CUST_ID
                                   and X.ORIG_PSTN_OGCD in ('00025','00305')
                                   and X.INCB_DVSN = 'P' 
                                 group by y.cust_id
                                )
) a
, (
select t.EMPL_NO
      ,t.EMPL_NAME
      ,t.RSDN_RGST_NO
      ,t.CUST_ID
      ,t.CLPO_CODE
      ,(select CODE_NAME
          from tb_uvcdm002
         where code_id = 'CLPO_CODE'
           and code_val = t.CLPO_CODE) CLPO_CDNM
      ,PAYS_CODE
      ,trunc(months_between(sysdate,to_date(ENTR_DATE,'YYYYMMDD'))/12) term
      ,t.WORK_PSTN_OGCD
 from tb_uvorg006 t
 where (t.empl_no,t.cust_id) in (select max(y.empl_no),y.cust_id
                                   from tb_uvorg006 x
                                       ,tb_uvorg006 y
                                 where x.CUST_ID = y.CUST_ID
                                   and X.ORIG_PSTN_OGCD in ('00025','00305')
                                   and X.INCB_DVSN = 'P' 
                                 group by y.cust_id
                                )
) b
where a.cust_id = b.cust_id
and b.WORK_PSTN_OGCD in ('00025','00305')
order by b.CLPO_CODE,a.EMPL_NO,b.PAYS_CODE



;
select IRKD_CODE_DTAL,
       IRKD_CODE_ITEM,
       CUST_ROLE_CODE,
       GOOD_CODE_DTAL,
       GOOD_CODE_ITEM,
       ASSM_ITEM_CODE,
       HIST_NO,
       AMT_SUM_CODE,
       CALC_MULT,
       CALC_AMT
from tb_ncudwams
where TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN strt_date AND end_date
  and del_yn='N'
===========================
대리점 계약고객_영미차장님요청_20140410

-- 대리점 채널 기관별 신계약건수
select b.orgn_name,
       a.cllt_orgn_code, 
       sum(decode(cntt_conc_ym, '201310', 1, 0)) A,
       sum(decode(cntt_conc_ym, '201311', 1, 0)) B,
       sum(decode(cntt_conc_ym, '201312', 1, 0)) C,
       sum(decode(cntt_conc_ym, '201401', 1, 0)) D,
       sum(decode(cntt_conc_ym, '201402', 1, 0)) E,
       sum(decode(cntt_conc_ym, '201403', 1, 0)) F
  from tb_isaplctt a, tb_uvorg004 b
 where a.sale_chnl_code = '7'
   and a.cntt_conc_ym >= '201310'
   and a.cntt_conc_ym <= '201403'
   and a.cntt_stat_code not in ('6','L')
   and a.cllt_orgn_code = b.orgn_code
 group by b.orgn_name,
       a.cllt_orgn_code
       

-- 기가입 고객 계약건수       
select a.cllt_orgn_code,
       sum(decode(a.cntt_conc_ym, '201310', 1, 0)) A,
       sum(decode(a.cntt_conc_ym, '201311', 1, 0)) B,
       sum(decode(a.cntt_conc_ym, '201312', 1, 0)) C,
       sum(decode(a.cntt_conc_ym, '201401', 1, 0)) D,
       sum(decode(a.cntt_conc_ym, '201402', 1, 0)) E,
       sum(decode(a.cntt_conc_ym, '201403', 1, 0)) F
  from tb_isaplctt a
 where a.cntt_stat_code not in ('6','L')
   and a.cntt_conc_ym >= '201310'
   and a.cntt_conc_ym <= '201403'
   and a.sale_chnl_code = '7'
   and exists (select 1 
                           from tb_isaplcmr b, tb_isaplctt c, tb_isaplcmr d
                          where c.poly_no = d.poly_no
                            and c.cntt_stat_code not in ('6','L')
                            and c.cntt_conc_ym < a.cntt_conc_ym
                            and (d.cust_role_code = '11' or  d.cust_role_code like '2%')
                            and d.del_yn = 'N'
                            and d.end_date = '99991231'
                            and a.poly_no = b.poly_no
                            and (b.cust_role_code = '11' or  b.cust_role_code like '2%')
                            and b.cust_role_hsno = 1
                            and d.cust_id = b.cust_id)
 group by a.cllt_orgn_code

==============================
데이터변경SR_eagles_ep
select mang_supt_titl 제목							
     , 시스템							
     , 변경희망일시							
     , 변경희망월							
     , 요청자							
     , DMDR_PSTN_DPNM 요청부서							
     , 요청일시							
     , case when dt_chng_type = '10' then '10. 주요테이블 품질평가'							
			when dt_chng_type = '20' then '20. 업무 프로세스 착오'				
			when dt_chng_type = '30' then '30. 프로그램 미비'				
			when dt_chng_type = '40' then '40. 업무 프로세스 편이'				
			when dt_chng_type = '51' then '51. 현행 운영시스템 착오'				
			when dt_chng_type = '52' then '52. 구시스템에 의한 착오'				
			when dt_chng_type = '53' then '53. 타시스템에 의한 착오'				
			when dt_chng_type = '60' then '60. 신규업무에 따른 데이터 변경/로드'				
			when dt_chng_type = '70' then '70. 기타사항'				
			else dt_chng_type 				
			end 데이터변경유형				
     , 데이터변경사유							
     , 데이터변경사항							
     , case when 향후방안유형 = '1' then '1. 프로그램 및 프로세스 반영완료'							
			when 향후방안유형 = '2' then '2. 프로그램 및 프로세스 반영예정(협의완료)'				
			when 향후방안유형 = '3' then '3. 프로그램 및 프로세스 반영 협의 필요'				
			when 향후방안유형 = '4' then '4. 지속적으로 데이터변경 처리해야 할 경우'				
			end 향후방안유형				
     , 향후방안							
     , 처리SQL번호							
     , 처리완료여부							
     , 처리일자							
     , 처리작업구분_INSERT							
     , 처리작업구분_UPDATE							
     , 처리작업구분_DELETE							
     --, a.*							
  from (							
 select distinct --a.bsdv_sysc, a.mnsp_seq_no, a.mnsp_dvsn_code, 							
        a.mang_supt_titl							
 	  , ( select ztol_bsns_sysn  						
 	  	   from tb_srztlsys  					
 	  	   where bssy_levl_1 = substr(a.bsdv_sysc, 1, 2) 					
 	  	   		 and bssy_levl_2 = substr(a.bsdv_sysc, 3, 2) 			
 	  			 and bssy_levl_3 = substr(a.bsdv_sysc, 5, 2) 			
 	  			 and bssy_levl_4 = 0 			
 	  			 and bssy_levl_5 = 0 			
 	  			 and use_yn = 'Y'  			
 	  			 and rownum = 1 ) 시스템 			
      , to_char(rqst_dttm, 'yyyy-mm-dd hh24:mm')     요청일시							
      --, a.dmdr_mpno      , a.dmdr_pstn_dpcd 							
      --, a.dmdr_name							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = '요청자'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 요청자      							
      , a.dmdr_pstn_dpnm --, a.revr_mpno      , a.revr_pstn_dpcd 							
      --, a.revr_name      , a.recp_resl                                         							
      , to_char(a.sr_recp_dttm, 'yyyy-mm-dd hh24:mi')      접수일시							
      --, a.work_mpno      , a.work_dlng_dpcd , a.work_dlmn_name 							
      --, a.sr_wkrt_dvsn   							
      , a.sr_wkrt_cten   작업내용							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('데이터변경사유')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 데이터변경사유							
      --, a.conn_sr_no     							
      , to_char(a.cplt_hope_dttm, 'yyyy-mm-dd hh:mm')    변경희망일시							
      , to_char(a.cplt_hope_dttm, 'yyyy-mm')    변경희망월							
 	  , decode(a.work_dlng_dttm, null, 'N', 'Y')   처리완료여부						
 	  , decode(a.work_dlng_dttm, null, '', to_char(a.work_dlng_dttm, 'yyyy-mm-dd hh:mm')) 처리일자						
 	  , (select cdname from eagles_ep.acl_cd where grpcd = 'SR_SUP_DTL' and cd = a.mnsp_dvsn_code) mnsp_dvsn_name						
      --, (select sr_titl from eagles_ep.tb_srbasic where sr_no = a.conn_sr_no)  					 value28 		
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('dt_chng_type')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) dt_chng_type -- 데이터변경유형							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('데이터변경사항')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 데이터변경사항							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('향후방안유형')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 향후방안유형							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('향후방안')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 향후방안							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('처리SQL번호')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리SQL번호							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = 'i'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리작업구분_insert							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = 'u'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리작업구분_update							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = 'd'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리작업구분_delete							
  from ( select a.*, b.rootinstanceid, b.instanceid							
           FROM eagles_ep.tb_srmngsup a, eagles_ep.bpm_procinst b							
          where a.mnsp_seq_no = b.instanceid							
            and b.isdeleted = 0) a							
  where to_char(a.rqst_dttm, 'yyyymm') between :yearMonth and :yearMonth1							
    and a.mnsp_dvsn_code in (select cd from eagles_ep.acl_cd where grpcd  = 'SR_SUP_DTL'							
							    and cdparam2 = 'DATA' )
    and a.del_yn = 'N'							
 order by 요청일시 desc							
 ) a							
 where 처리완료여부 = 'Y'							



-- IT운영1파트 변경건 --
select *
from (
select mang_supt_titl 제목							
     , 시스템							
     , 변경희망일시							
     , 변경희망월							
     , 요청자							
     , DMDR_PSTN_DPNM 요청부서							
     , 요청일시							
     , case when dt_chng_type = '10' then '10. 주요테이블 품질평가'							
			when dt_chng_type = '20' then '20. 업무 프로세스 착오'				
			when dt_chng_type = '30' then '30. 프로그램 미비'				
			when dt_chng_type = '40' then '40. 업무 프로세스 편이'				
			when dt_chng_type = '51' then '51. 현행 운영시스템 착오'				
			when dt_chng_type = '52' then '52. 구시스템에 의한 착오'				
			when dt_chng_type = '53' then '53. 타시스템에 의한 착오'				
			when dt_chng_type = '60' then '60. 신규업무에 따른 데이터 변경/로드'				
			when dt_chng_type = '70' then '70. 기타사항'				
			else dt_chng_type 				
			end 데이터변경유형				
     , 데이터변경사유							
     , 데이터변경사항							
     , case when 향후방안유형 = '1' then '1. 프로그램 및 프로세스 반영완료'							
			when 향후방안유형 = '2' then '2. 프로그램 및 프로세스 반영예정(협의완료)'				
			when 향후방안유형 = '3' then '3. 프로그램 및 프로세스 반영 협의 필요'				
			when 향후방안유형 = '4' then '4. 지속적으로 데이터변경 처리해야 할 경우'				
			end 향후방안유형				
     , 향후방안							
     , 처리SQL번호							
     , 처리완료여부							
     , 처리일자							
     , 처리작업구분_INSERT							
     , 처리작업구분_UPDATE							
     , 처리작업구분_DELETE							
     --, a.*							
  from (							
 select distinct --a.bsdv_sysc, a.mnsp_seq_no, a.mnsp_dvsn_code, 							
        a.mang_supt_titl							
 	  , ( select ztol_bsns_sysn  						
 	  	   from tb_srztlsys  					
 	  	   where bssy_levl_1 = substr(a.bsdv_sysc, 1, 2) 					
 	  	   		 and bssy_levl_2 = substr(a.bsdv_sysc, 3, 2) 			
 	  			 and bssy_levl_3 = substr(a.bsdv_sysc, 5, 2) 			
 	  			 and bssy_levl_4 = 0 			
 	  			 and bssy_levl_5 = 0 			
 	  			 and use_yn = 'Y'  			
 	  			 and rownum = 1 ) 시스템 			
      , to_char(rqst_dttm, 'yyyy-mm-dd hh24:mm')     요청일시							
      --, a.dmdr_mpno      , a.dmdr_pstn_dpcd 							
      --, a.dmdr_name							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = '요청자'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 요청자      							
      , a.dmdr_pstn_dpnm --, a.revr_mpno      , a.revr_pstn_dpcd 							
      --, a.revr_name      , a.recp_resl                                         							
      , to_char(a.sr_recp_dttm, 'yyyy-mm-dd hh24:mi')      접수일시							
      --, a.work_mpno      , a.work_dlng_dpcd , a.work_dlmn_name 							
      --, a.sr_wkrt_dvsn   							
      , a.sr_wkrt_cten   작업내용							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('데이터변경사유')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 데이터변경사유							
      --, a.conn_sr_no     							
      , to_char(a.cplt_hope_dttm, 'yyyy-mm-dd hh:mm')    변경희망일시							
      , to_char(a.cplt_hope_dttm, 'yyyy-mm')    변경희망월							
 	  , decode(a.work_dlng_dttm, null, 'N', 'Y')   처리완료여부						
 	  , decode(a.work_dlng_dttm, null, '', to_char(a.work_dlng_dttm, 'yyyy-mm-dd hh:mm')) 처리일자						
 	  , (select cdname from eagles_ep.acl_cd where grpcd = 'SR_SUP_DTL' and cd = a.mnsp_dvsn_code) mnsp_dvsn_name						
      --, (select sr_titl from eagles_ep.tb_srbasic where sr_no = a.conn_sr_no)  					 value28 		
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('dt_chng_type')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) dt_chng_type -- 데이터변경유형							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('데이터변경사항')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 데이터변경사항							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('향후방안유형')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 향후방안유형							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('향후방안')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 향후방안							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  in ('처리SQL번호')			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리SQL번호							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = 'i'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리작업구분_insert							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = 'u'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리작업구분_update							
      , (select max(aa.valuetext)							
		          from (select a.ATTRID, a.attrname, b.FORMVERSIONID					
				          from eagles_ep.bpm_form_attr a -- bpm_form_attrins  bpm_form_attr			
				             , eagles_ep.bpm_formver b			
			             where a.FORMVERSIONID = b.FORMVERSIONID				
				           and a.ATTRNAME  = 'd'			
			           ) zz				
                    , eagles_ep.bpm_form_attrins aa							
                    , eagles_ep.bpm_forminst cc							
                    , eagles_ep.bpm_procinst dd							
                where dd.rootinstanceid = a.rootinstanceid							
                  and dd.definitionId   = 383							
                  and zz.attrid = aa.attrid							
                  and zz.FORMVERSIONID = cc.FORMVERSIONID							
                  and cc.forminstanceid = aa.forminstanceid							
                  and cc.instanceid = dd.instanceid ) 처리작업구분_delete							
  from ( select a.*, b.rootinstanceid, b.instanceid							
           FROM eagles_ep.tb_srmngsup a, eagles_ep.bpm_procinst b							
          where a.mnsp_seq_no = b.instanceid							
            and b.isdeleted = 0) a							
  where to_char(a.rqst_dttm, 'yyyymm') between :yearMonth and :yearMonth1							
    and a.mnsp_dvsn_code in (select cd from eagles_ep.acl_cd where grpcd  = 'SR_SUP_DTL'							
							    and cdparam2 = 'DATA' )
    and a.del_yn = 'N'							
 order by 요청일시 desc							
 ) a							
 where 처리완료여부 = 'Y')
where 요청자 in ('권근호',
'홍태원',
'황유준')

=============================
도착일자정보변경
INSERT INTO TB_UVCOMLOG
(
    SELECT
        TO_CHAR(SYSDATE,'YYYYMMDD')             AS DLNG_DATE,                       
        SQ_UVCOMLOG.NEXTVAL                     AS  SEQ_NO,                         
        '1940585'                               AS LAST_CHMN_MPNO,                  
        SYSDATE                                 AS LAST_CHNG_DTTM,                    
        'SR_도착일자정보변경'                   AS PGM_ID,                              
        'TB_NCAPLCI1'                           AS TABL_NAME,                           
        'ARIV_DATE'                             AS COLM_NAME,   
        A.POLY_NO                                 AS CHNG_PK,  
        'U'                                     AS CHNG_DVSN,                             
        ARIV_DATE                               AS CHBF_DATA,         
        to_char(FRST_SCAN_IPTM,'YYYYMMDD')      AS CHAF_DATA          
    FROM tb_ncaplci1 A, 
         tb_boimgarv B , 
         dbadmin.tb_nc3 C
    where A.poly_no = c.poly_no
      and a.poly_no = B.IMAG_ADMN_NO
      and B.IMAG_KIND_CODE = '0'
); --처리건수 : 1961건

update tb_ncaplci1 x
  set ARIV_DATE = (
        select to_char(FRST_SCAN_IPTM,'YYYYMMDD')
          from tb_boimgarv a
        where a.IMAG_ADMN_NO = x.poly_no
          and a.IMAG_KIND_CODE = '0' ),
      LAST_CHMN_MPNO = '1940585',
      PGM_ID = 'SR_도착일자정보변경',
      last_chng_dttm = SYSDATE
where x.poly_no in (select poly_no from dbadmin.tb_nc3); --처리건수 : 1961건



====================
메뉴구성 조회
							select a.lcls_name 대분류,
	   a.mcls_name 중분류,
	   a.scrn_name 소분류,
       b.pgm_id 프로그램ID,
       b.pgm_defn_name 프로그램명,
       b.pgm_url 프로그램URL
from tb_uvmna010 a,
     tb_uvmna002 b
where a.menu_grp_id='MN029'
  and a.pgm_dtal_sqno = b.pgm_dtal_sqno
;

-- 2019.02.11
select a.menu_grp_id 메뉴그룹ID,
       c.menu_grp_name 메뉴그룹명,
	   a.lcls_name 대분류,
	   a.mcls_name 중분류,
	   a.scrn_name 소분류,
       b.pgm_id 프로그램ID,
       b.pgm_defn_name 프로그램명,
       b.pgm_url 프로그램URL,
	   d.PGRM_WORK_ID 담당자
from tb_uvmna010@ztool a,
     tb_uvmna002@ztool b,
	 tb_uvmna003@ztool c,
	 tb_uvchm830@ztool d
where a.pgm_dtal_sqno = b.pgm_dtal_sqno
  AND a.menu_grp_id = c.menu_grp_id
  AND NVL(TRIM(c.use_yn), 'Y') = 'Y'
  AND B.pgm_dtal_sqno = D.pgRm_SEQ_NO
  --AND b.pgm_id = d.pgrm_id
  AND NVL(TRIM(d.PGRM_DELT_FLAG), 'Y') = 'Y'
  AND PGRM_TYPE NOT IN (103,105,106,107,108,111,209)
  AND a.menu_grp_id NOT IN ('MN060', 'MN056',  'MN037','MN036', 'MN035', 'MN034', 'MN033', 'MN032', 'MN024', 'MN011')
ORDER BY a.menu_grp_id, a.lcls_no, a.mcls_no, a.scls_no
;
=====================
모집기관변경
update tb_isaplctt 
set CLLT_ORGN_CODE = '08218'
   ,LAST_CHMN_MPNO = '1021266'
   ,LAST_CHNG_DTTM = SYSDATE
   ,PGM_ID         = 'SR요청-모집기관변경요청'
where POLY_NO  = '158862618';

update tb_nccloncd
set CLLT_ORGN_CODE = '08218'
   ,LAST_CHMN_MPNO = '1021266'
   ,LAST_CHNG_DTTM = SYSDATE
   ,PGM_ID         = 'SR요청-모집기관변경요청'
where  POLY_NO = '158862618';

update tb_iscompci 
set COLL_ORGN_CODE = '08218'
,LAST_CHMN_MPNO = '1021266'
,LAST_CHNG_DTTM = SYSDATE
,PGM_ID         = 'SR요청-모집기관변경요청'
where  POLY_NO = '158862618';

update tb_isrcvprm 
set COLL_ORGN_CODE = '08218'
,LAST_CHMN_MPNO = '1021266'
,LAST_CHNG_DTTM = SYSDATE
,PGM_ID         = 'SR요청-모집기관변경요청'
where  POLY_NO = '158862618'
  and PAYM_CNT = 1;

update tb_isaplctt 
set CLLT_ORGN_CODE = '08218'
   ,LAST_CHMN_MPNO = '1021266'
   ,LAST_CHNG_DTTM = SYSDATE
   ,PGM_ID         = 'SR요청-모집기관변경요청'
where POLY_NO  = '158911734';

update tb_nccloncd
set CLLT_ORGN_CODE = '08218'
   ,LAST_CHMN_MPNO = '1021266'
   ,LAST_CHNG_DTTM = SYSDATE
   ,PGM_ID         = 'SR요청-모집기관변경요청'
where  POLY_NO = '158911734';

update tb_iscompci 
set COLL_ORGN_CODE = '08218'
,LAST_CHMN_MPNO = '1021266'
,LAST_CHNG_DTTM = SYSDATE
,PGM_ID         = 'SR요청-모집기관변경요청'
where  POLY_NO = '158911734';

update tb_isrcvprm 
set COLL_ORGN_CODE = '08218'
,LAST_CHMN_MPNO = '1021266'
,LAST_CHNG_DTTM = SYSDATE
,PGM_ID         = 'SR요청-모집기관변경요청'
where  POLY_NO = '158911734'
  and PAYM_CNT = 1;
============================
변액판매자격
     -- 변액보수교육
insert into TB_SMPPE040
select
     '9999057' --LP_PRNO
    ,CAPT_DVSN_CODE
    ,4 --HIST_SEQ_NO
    ,'dbadmin'--LAST_CHMN_MPNO
    ,SYSDATE  --LAST_CHNG_DTTM
    ,'ORANGE '--PGM_ID
    ,CAPT_TERM
    ,CAPT_GRAD_DVCD
    ,CAPT_ACQS_DATE
    ,CAPT_END_DATE
 from TB_SMPPE040
 where LP_PRNO = '9999060'
   and CAPT_DVSN_CODE = 'VR' -- 변액자격:V,변액보수교육:VR
   and CAPT_ACQS_DATE = '20090901'


-- 변액~
insert into TB_SMPPE040
select 
     LP_PRNO
    ,'V' CAPT_DVSN_CODE
    ,HIST_SEQ_NO
    ,LAST_CHMN_MPNO
    ,LAST_CHNG_DTTM
    ,PGM_ID
    ,CAPT_TERM
    ,CAPT_GRAD_DVCD
    ,CAPT_ACQS_DATE
    ,CAPT_END_DATE
 FROM TB_SMPPE040
WHERE lp_prno = '20917750'
  and CAPT_DVSN_CODE = 'CI'
  and HIST_SEQ_NO = 1   
  ========================
보종별 보종명-가입안내명.
  
-- 보종리스트
select a.irkd_code_dtal, -- 보종-세
       a.irkd_code_item, -- 보종-목
       a.inkd_bsns_name, -- 보종업무명
       a.inkd_notc_name,
       a.inkd_join_ntnm  -- 보종가입안내명
from tb_mmnorsub a,
     tb_mmnorssl b
where a.irkd_code_dtal = b.irkd_code_dtal
  and a.irkd_code_item = b.irkd_code_item
  and b.sale_chnl_code = '1'
  and to_char(sysdate, 'yyyymmdd') between b.sale_strt_date and b.sale_end_date
order by a.irkd_code_dtal,
         a.irkd_code_item


-- 특약리스트
select a.irkd_code_dtal,
       a.irkd_code_item,
       a.sale_chnl_code,
       '',
       a.good_code_dtal,
       a.good_code_item,
       '',
       b.good_notc_name,
       b.good_bsns_name,
       b.good_join_ntnm
  from tb_mmnorcon a,
       tb_mmnormat b
 where a.good_code_dtal = b.good_code_dtal
   and a.good_code_item = b.good_code_item
   and a.sale_chnl_code = '1'
   and to_char(sysdate, 'yyyymmdd') between a.sale_strt_date and a.sale_end_date
   and a.irkd_code_dtal = '1612'
   and a.irkd_code_item = '010'
   
=================================================
보종별 펀드종류조회
select a.irkd_code_dtal,
       a.irkd_code_item,
       a.fund_code,
       c.code_name fund_name
from tb_trfndfpl a,
     tb_mmnorssl b,
     (select code_val,
             code_name
        from tb_uvcdm002
       where code_id = 'FUND_CODE') c
where to_char(sysdate,'YYYYMMDD') between b.sale_strt_date and b.sale_end_date
  and a.irkd_code_dtal = b.irkd_code_dtal
  and a.irkd_code_item = b.irkd_code_item
  and a.fund_code = c.code_val
order by a.irkd_code_dtal, 
         a.irkd_code_item, 
         a.fund_code
===========================
보험료할인정비_김정한_20140516
		 

INSERT INTO TB_UVCOMLOG
(
 SELECT TO_CHAR(SYSDATE,'YYYYMMDD') AS DLNG_DATE      -- 처리일자
       ,SQ_UVCOMLOG.NEXTVAL         AS SEQ_NO         -- 일련번호
       ,'2130038'                   AS LAST_CHMN_MPNO -- 최종변경자사번(요청자사번)
       ,SYSDATE                     AS LAST_CHNG_DTTM -- 최종변경일시
       ,'의료수급할인율0처리'           AS PGM_ID         -- 프로그램ID
       ,'TB_ISAPLPPD'               AS TABL_NAME      -- TABLE명
       ,'PREM_DSCT_RATO'            AS COLM_NAME      -- COLUMN명
       ,POLY_NO          || ',' ||
        PREM_DSCT_KDCD   || ',' ||
        PRDC_HSNO                   AS CHNG_PK        -- 변경PK
       ,'U'                         AS CHNG_DVSN      -- 변경구분(U:Update, D:Delete, I:Insert)
       ,PREM_DSCT_KDCD              AS CHBF_DATA      -- 변경전데이터(U,D일 경우 기재, I는 Null)
       ,'0'                         AS CHAF_DATA      -- 변경후데이터(U,I일 경우 기재, D는 Null)
   FROM tb_isaplppd
  where PREM_DSCT_KDCD = '28'
    and poly_no in (select distinct POLY_NO from tb_isinsspt)
)
;

update tb_isaplppd
   set PREM_DSCT_RATO = 0
      ,last_chmn_mpno = '2130038'
      ,last_chng_dttm = sysdate
      ,pgm_id         = '의료수급할인율0처리'
 where PREM_DSCT_KDCD = '28'
   and poly_no in (select distinct POLY_NO from tb_isinsspt)
;


======================
보험료호출함수관리(fci) 데이터 확인

-- 필수 보험료사용항목이 fci 테이블 사용항목에 들어가 있는지 체크
--  setPCode("DJDX", 0x20);    // 종피 성별 <-- 주피 상해 위험직 구분 코드
--  setPCode("DJDY", 0x20);    // 종피 성별 <-- 배우자 상해 위험직 구분 코드
--  setPCode("DJDZ", 0x20);    // 종피 성별 <-- 자녀1 상해 위험직 구분 코드
--  setPCode( "Z02", 0x30);    // 종피 성별 <-- 업종 코드
--  setPCode(  "RP", 0x02);    // 종피 나이 <-- 환급률
--  setPCode(  "DA", 0x40);    // 할인율 함수 호출
select *
  from tb_mmnorfci@dl_mm
 where item_cd1 <> :itemCode 
   and item_cd2 <> :itemCode 
   and item_cd3 <> :itemCode 
   and item_cd4 <> :itemCode 
   and item_cd5 <> :itemCode 
   and (good_code_dtal, good_code_item) in (
select b.good_code_dtal, b.good_code_item
             from tb_mmnorpri@dl_mm a, tb_mmnormat@dl_mm b
            where a.good_code_dtal = b.pref_gdcd_dtal
              and a.good_code_item = b.pref_gdcd_item
              and :itemCode in (item_cd1,item_cd2,item_cd3,item_cd4,item_cd5,
                                item_cd6,item_cd7,item_cd8,item_cd9,item_cd10))
                                
                                
                                
-- 단생상품. 피보험자성별 항목코드가 가입상품피보험자 정보와 맞지 않는경우
select distinct a.good_code_dtal, a.good_code_item, b.join_insu_code, a.item_cd1
  from tb_mmnorfci@dl_mm a, tb_mmentinp@dl_mm b, tb_mmnormat c
 where a.good_code_dtal = b.good_code_dtal
   and a.good_code_item = b.good_code_item
   and a.good_code_dtal = c.good_code_dtal
   and a.good_code_item = c.good_code_item
   and c.cnin_dvcd = '1'
   and ((b.join_insu_code = 'X' and a.item_cd1 <> 'S02') or
        (b.join_insu_code = 'Y' and a.item_cd1 <> 'S03') or
        (b.join_insu_code = 'Z' and a.item_cd1 <> 'S04') or
        (b.join_insu_code = 'Z1' and a.item_cd1 <> 'S04') or
        (b.join_insu_code = 'Z2' and a.item_cd1 <> 'S05'));
  
-- 연생상품. 피보험자성별 항목코드가 가입상품피보험자 정보와 맞지 않는경우
select distinct a.good_code_dtal, a.good_code_item, b.join_insu_code, a.item_cd1
  from tb_mmnorfci@dl_mm a, tb_mmentinp@dl_mm b, tb_mmnormat c
 where a.good_code_dtal = b.good_code_dtal
   and a.good_code_item = b.good_code_item
   and a.good_code_dtal = c.good_code_dtal
   and a.good_code_item = c.good_code_item
   and c.cnin_dvcd <> '1'
   and b.insu_code = 'Z' and (a.item_cd1 = 'S02' or a.item_cd1 = 'S03');
   

-- 데이터 입력 누락 확인
select *
  from (
select good_code_dtal, good_code_item
  from tb_mmnormat@dl_mm
minus
select good_code_dtal, good_code_item
  from tb_mmnorfci@dl_mm)
 where (good_code_dtal, good_code_item) in
         (select b.good_code_dtal, b.good_code_item
            from tb_mmnorssl@dl_mm a, tb_mmnorcon@dl_mm b
           where a.irkd_code_dtal = b.irkd_code_dtal
             and a.irkd_code_item = b.irkd_code_item
             and a.sale_chnl_code = b.sale_chnl_code
             and :dateYMD between a.orig_sale_stdt and a.orig_sale_endt
             and :dateYMD between b.orig_sale_stdt and b.orig_sale_endt
             and a.irkd_code_dtal not in ('1224','1225','1265','1632','1636','1665','1700','1701','1702','1715','1750'));
==========================
사정항목별가입한도

SELECT C.assm_item_code,
       D.assm_itnm_abrv,
       C.risk_grad_code,
       SUM(DECODE(C.age_dvcd,'A',C.join_lmit_amt,0)) join_lmit_amt_A,
       SUM(DECODE(C.age_dvcd,'B',C.join_lmit_amt,0)) join_lmit_amt_B,
       SUM(DECODE(C.age_dvcd,'C',C.join_lmit_amt,0)) join_lmit_amt_C,
       SUM(DECODE(C.age_dvcd,'D',C.join_lmit_amt,0)) join_lmit_amt_D,
       SUM(DECODE(C.age_dvcd,'E',C.join_lmit_amt,0)) join_lmit_amt_E,
       SUM(DECODE(C.age_dvcd,'F',C.join_lmit_amt,0)) join_lmit_amt_F,
       SUM(DECODE(C.age_dvcd,'G',C.join_lmit_amt,0)) join_lmit_amt_G,
       SUM(DECODE(C.age_dvcd,'H',C.join_lmit_amt,0)) join_lmit_amt_H,
       SUM(DECODE(C.age_dvcd,'I',C.join_lmit_amt,0)) join_lmit_amt_I,
       SUM(DECODE(C.age_dvcd,'J',C.join_lmit_amt,0)) join_lmit_amt_J,
       SUM(DECODE(C.age_dvcd,'K',C.join_lmit_amt,0)) join_lmit_amt_K,
       SUM(DECODE(C.age_dvcd,'L',C.join_lmit_amt,0)) join_lmit_amt_L,
       C.strt_date,
       C.end_date,
       C.hist_no,
       MAX(C.last_chng_dttm) last_chng_dttm
  FROM
      (SELECT A.assm_item_code,
              B.risk_grad_code,
              A.age_dvcd,
              A.join_lmit_amt,
	          TO_CHAR(A.last_chng_dttm,'YYYYMMDDHH24MISS') last_chng_dttm,
              B.strt_date,
              B.end_date,
              B.hist_no
         FROM tb_ncudwjl3 A, --사정항목별등급별가입한도
              tb_ncudwjl4 B  --사정항목별가입한도적용일자
        WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN B.strt_date AND B.end_date
          AND A.assm_item_code = B.assm_item_code
          AND A.risk_grad_code = B.risk_grad_code
          AND A.hist_no        = B.hist_no
          AND A.age_dvcd	   <> '0'
          AND A.del_yn         = 'N' ) C,
       tb_nccodasm D --사정항목코드
 WHERE C.assm_item_code = D.assm_item_code
   AND TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN D.strt_date AND D.end_date
   AND D.del_yn = 'N'
 GROUP BY C.assm_item_code,
       D.assm_itnm_abrv,
       C.risk_grad_code,
       C.strt_date,
       C.end_date,
       C.hist_no
===============================
상품개정현황_기간별_신개정구분
-- 월별 상품개정현황(보종-세목 기준)-신상품/개정상품 구분
select *
  from (
        select nvl(구분,'개정상품') 구분, substr(a.sale_strt_date,1,6) 년월, count(1) 보종세목
          from (				
                select a.irkd_code_dtal, a.irkd_code_item, min(a.sale_strt_date) sale_strt_date			
                 from tb_mmnorssl a
                where a.sale_strt_date between '20170101' and '20181031'
                group by a.irkd_code_dtal, a.irkd_code_item) a, 
               (
                select irkd_code_dtal, min(sale_strt_date) sale_strt_date, '신상품' 구분
                  from tb_mmnorssl
                 where sale_strt_date between '20170101' and '20181231'
                   and irkd_code_item in ('001','801')
                 group by irkd_code_dtal
               ) b				
        where a.sale_strt_date = b.sale_strt_date(+)
          and a.irkd_code_dtal = b.irkd_code_dtal(+)
        group by nvl(구분,'개정상품'), substr(a.sale_strt_date,1,6))
        pivot (
            max(보종세목)
            for 년월 in ('201701','201702','201703','201704','201705','201706','201707','201708','201709','201710','201711','201712',
                         '201801','201802','201803','201804','201805','201806','201807','201808','201809','201810','201811','201812')
        )
order by 구분;

-- 월별 상품개정현황(보종-세 기준)-신상품/개정상품 구분
select *
  from (
        select nvl(구분,'개정상품') 구분, substr(a.sale_strt_date,1,6) 년월, count(distinct a.irkd_code_dtal) 보종세
          from (				
                select a.irkd_code_dtal, a.irkd_code_item, min(a.sale_strt_date) sale_strt_date			
                 from tb_mmnorssl a
                where a.sale_strt_date between '20170101' and '20181031'
                group by a.irkd_code_dtal, a.irkd_code_item) a, 
               (
                select irkd_code_dtal, min(sale_strt_date) sale_strt_date, '신상품' 구분
                  from tb_mmnorssl
                 where sale_strt_date between '20170101' and '20181231'
                   and irkd_code_item in ('001','801')
                 group by irkd_code_dtal
               ) b				
        where a.sale_strt_date = b.sale_strt_date(+)
          and a.irkd_code_dtal = b.irkd_code_dtal(+)
        group by nvl(구분,'개정상품'), substr(a.sale_strt_date,1,6)
     )
        pivot (
            max(보종세)
            for 년월 in ('201701','201702','201703','201704','201705','201706','201707','201708','201709','201710','201711','201712',
                         '201801','201802','201803','201804','201805','201806','201807','201808','201809','201810','201811','201812')
        )
order by 구분;

-- 월별 상품개정현황(상품-세목 기준)-신상품/개정상품 구분
select *
  from (
        select nvl(구분, '개정상품') 구분, substr(a.sale_strt_date,1,6) 년월, count(1) 상품세목
          from (				
                select b.good_code_dtal, b.good_code_item, min(b.sale_strt_date) sale_strt_date
                 from tb_mmnormat a, tb_mmnorcon b				
                where b.sale_strt_date between '20170101' and '20181031'
                  and a.good_code_dtal = b.good_code_dtal				
                  and a.good_code_item = b.good_code_item
                group by b.good_code_dtal, b.good_code_item) a, 
               (
                select a.good_code_dtal, min(b.sale_strt_date) sale_strt_date, '신상품' 구분
                  from tb_mmnormat a, tb_mmnorcon b
                 where a.good_code_dtal = b.good_code_dtal
                   and a.good_code_item = b.good_code_item
                   and b.sale_strt_date between '20170101' and '20181231'
                   and a.good_code_item in ('001','801')
                 group by a.good_code_dtal
               ) b				
        where a.sale_strt_date = b.sale_strt_date(+)
          and a.good_code_dtal = b.good_code_dtal(+)
        group by nvl(구분, '개정상품'), substr(a.sale_strt_date,1,6)
      )
        pivot (
            max(상품세목)
            for 년월 in ('201701','201702','201703','201704','201705','201706','201707','201708','201709','201710','201711','201712',
                         '201801','201802','201803','201804','201805','201806','201807','201808','201809','201810','201811','201812')
        )
order by 구분;

-- 월별 상품개정현황(상품-세 기준)-신상품/개정상품 구분
select *
  from (
        select nvl(구분, '개정상품') 구분, substr(a.sale_strt_date,1,6) 년월, count(distinct a.good_code_dtal) 상품세
          from (				
                select b.good_code_dtal, b.good_code_item, min(b.sale_strt_date) sale_strt_date
                 from tb_mmnormat a, tb_mmnorcon b				
                where b.sale_strt_date between '20170101' and '20181031'
                  and a.good_code_dtal = b.good_code_dtal	
                  and a.good_code_item = b.good_code_item
                group by b.good_code_dtal, b.good_code_item) a, 
               (
                select a.good_code_dtal, min(b.sale_strt_date) sale_strt_date, '신상품' 구분
                  from tb_mmnormat a, tb_mmnorcon b
                 where a.good_code_dtal = b.good_code_dtal
                   and a.good_code_item = b.good_code_item
                   and b.sale_strt_date between '20170101' and '20181231'
                   and a.good_code_item in ('001','801')
                 group by a.good_code_dtal
               ) b				
        where a.sale_strt_date = b.sale_strt_date(+)
          and a.good_code_dtal = b.good_code_dtal(+)
        group by nvl(구분, '개정상품'), substr(a.sale_strt_date,1,6)
      )
 pivot (
     max(상품세)
     for 년월 in ('201701','201702','201703','201704','201705','201706','201707','201708','201709','201710','201711','201712',
                  '201801','201802','201803','201804','201805','201806','201807','201808','201809','201810','201811','201812')
 )
order by 구분;
  
=================================
상품코드별 PSM코드_상품분류

-----------------------------------------------------------------------
--Policy
-----------------------------------------------------------------------

WITH UNIT_PRODUCT AS (
SELECT B.CODE AS PSM_CODE
     , C.UUID
     , CASE WHEN C.DOMAIN_TYPE = 'UnitProduct' THEN 'Unit Product'
            WHEN C.DOMAIN_TYPE = 'SalesMP' THEN 'Sales Product'
            WHEN C.DOMAIN_TYPE = 'RoleComponent' THEN 'Role'
            WHEN C.DOMAIN_TYPE = 'ProductComponent' THEN 'Product Component'
            WHEN C.DOMAIN_TYPE = 'Component' THEN 'Component'
            WHEN C.DOMAIN_TYPE = 'ProductRequest' THEN 'Product Request'
            WHEN C.DOMAIN_TYPE = 'ComponentProperty' THEN 'Component Property'
            WHEN C.DOMAIN_TYPE = 'ComponentBaseProperty' THEN 'Component Base Property'
            WHEN C.DOMAIN_TYPE = 'Calculation' THEN 'Calculation'
            WHEN C.DOMAIN_TYPE = 'RequestBehaviour' THEN 'Request Behaviour'
            WHEN C.DOMAIN_TYPE = 'RuleSpecification' THEN 'Rule Specification'
            WHEN C.DOMAIN_TYPE = 'PoolContainerComponent' THEN 'Pool Container Product'
            WHEN C.DOMAIN_TYPE = 'CopmonentSpecification' THEN 'Component Specification'
            WHEN C.DOMAIN_TYPE = 'ApplicationComponent' THEN 'Application Component'
            ELSE C.DOMAIN_TYPE
       END AS DOMAIN_TYPE	
     , C.KIND_ID
	 , D.REF_ID
     , D.NAME AS KIND
     , C.DEF_DISP_NAME
     , A.ID AS PROD_ID
     , C.ID AS SPEC_ID
	 , C.DESCRIPTION
  FROM HPS.TBL_MARKETABLE_PRODUCT A
     , HPS.TBL_RESOURCE_VERSION E
	 , HPS.TBL_CMP_SPEC B
     , HPS.TBL_SPEC C
     , HPS.TBL_KIND D
 WHERE 1 = 1
--   AND A.PROD_TYPE = '2'  --1:Policy, 2:Coverage
--   AND A.PROD_TYPE = '1'  --1:Policy, 2:Coverage
   AND A.ID = E.RESOURCE_ID
   AND E.NEXT_VER_ID IS NULL  --가장최근건
   AND B.ID = A.ID
   AND C.ID = B.ID
   AND C.USE_YN = 'Y'
--   AND C.DISCRIMINATOR = 'UP'
   AND C.DOMAIN_TYPE = 'UnitProduct'  --20200615
   AND C.IS_POOL <> '1'
--   AND C.DEF_DISP_NAME LIKE '[Unit-C]가입상품_000%'
   AND D.ID = C.KIND_ID
   --UP보험계약, UC가입상품, UA연금급부, US제도
   --AND ((B.CODE LIKE 'UP1%') OR (B.CODE LIKE 'UC1%') OR (B.CODE LIKE 'UA1%') OR (B.CODE LIKE 'US1%'))
   AND ((B.CODE LIKE 'UP1%') OR (B.CODE LIKE 'UC0%') OR (B.CODE LIKE 'UA1%') OR (B.CODE LIKE 'US1%'))
)

SELECT A.보종세
	 , A.보종목
	 , A.인가명
	 , A.판매여부
	 , A.PSM코드
	 , A.상품종목분류_연금
	 , A.보험료납입유형_유니버셜
	 , A.속성_계약별갱신
	 , A.속성_개인연금전환
	 , A.속성_공시이율적용전환
	 , A.속성_현대갱신
	 , A.속성_배당구분
	 , A.제도_계약분리 제도_변경설계
	 , A.제도_양육자금전환특약
	 , A.제도_중도부가
	 , A.계약구분_신계약
	 , A.계약구분_계약변경 계약구분_계약전환전용
FROM (SELECT CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A2.SALE_STAR_DATE AND A2.SALE_END_DATE THEN 'Y'
				  ELSE 'N'
			  END 판매여부,
			  A1.*
		FROM HPF.TMP_POL_PSM_REQ@DL_DPIM A1
		   , (SELECT ISRN_KIND_DTCD, ISRN_KIND_ITCD, MIN(SALE_STAR_DATE) SALE_STAR_DATE, MAX(SALE_END_DATE) SALE_END_DATE
				FROM HPF.MVW_SIMSETSIKSA
			   GROUP BY ISRN_KIND_DTCD, ISRN_KIND_ITCD) A2
	   WHERE A1.보종세 = A2.ISRN_KIND_DTCD(+)
		 AND A1.보종목 = A2.ISRN_KIND_ITCD(+)
	 ) A
 ORDER BY 1,2
;

-----------------------------------------------------------------------
--Coverage
-----------------------------------------------------------------------
--마이그팀전달시 상품분류정보를 빼고 전달
--단위상품
WITH UNIT_PRODUCT AS (
SELECT B.CODE AS PSM_CODE
     , C.UUID
     , CASE WHEN C.DOMAIN_TYPE = 'UnitProduct' THEN 'Unit Product'
            WHEN C.DOMAIN_TYPE = 'SalesMP' THEN 'Sales Product'
            WHEN C.DOMAIN_TYPE = 'RoleComponent' THEN 'Role'
            WHEN C.DOMAIN_TYPE = 'ProductComponent' THEN 'Product Component'
            WHEN C.DOMAIN_TYPE = 'Component' THEN 'Component'
            WHEN C.DOMAIN_TYPE = 'ProductRequest' THEN 'Product Request'
            WHEN C.DOMAIN_TYPE = 'ComponentProperty' THEN 'Component Property'
            WHEN C.DOMAIN_TYPE = 'ComponentBaseProperty' THEN 'Component Base Property'
            WHEN C.DOMAIN_TYPE = 'Calculation' THEN 'Calculation'
            WHEN C.DOMAIN_TYPE = 'RequestBehaviour' THEN 'Request Behaviour'
            WHEN C.DOMAIN_TYPE = 'RuleSpecification' THEN 'Rule Specification'
            WHEN C.DOMAIN_TYPE = 'PoolContainerComponent' THEN 'Pool Container Product'
            WHEN C.DOMAIN_TYPE = 'CopmonentSpecification' THEN 'Component Specification'
            WHEN C.DOMAIN_TYPE = 'ApplicationComponent' THEN 'Application Component'
            ELSE C.DOMAIN_TYPE
       END AS DOMAIN_TYPE	
     , C.KIND_ID
	 , D.REF_ID
     , D.NAME AS KIND
     , C.DEF_DISP_NAME
     , A.ID AS PROD_ID
     , C.ID AS SPEC_ID
  FROM HPS.TBL_MARKETABLE_PRODUCT A
     , HPS.TBL_RESOURCE_VERSION E
	 , HPS.TBL_CMP_SPEC B
     , HPS.TBL_SPEC C
     , HPS.TBL_KIND D
 WHERE 1 = 1
--   AND A.PROD_TYPE = '2'  --1:Policy, 2:Coverage
--   AND A.PROD_TYPE = '1'  --1:Policy, 2:Coverage
   AND A.ID = E.RESOURCE_ID
   AND E.NEXT_VER_ID IS NULL  --가장최근건
   AND B.ID = A.ID
   AND C.ID = B.ID
   AND C.USE_YN = 'Y'
--   AND C.DEF_DISP_NAME LIKE '[Unit-P]보험계약상품_000%'
--   AND C.DISCRIMINATOR = 'UP'
   AND C.DOMAIN_TYPE = 'UnitProduct'  --20200615
   AND C.IS_POOL <> '1'
--   AND C.DEF_DISP_NAME LIKE '[Unit-C]가입상품_000%'
   AND D.ID = C.KIND_ID
   --UP보험계약, UC가입상품, UA연금급부, US제도
   --AND ((B.CODE LIKE 'UP1%') OR (B.CODE LIKE 'UC1%') OR (B.CODE LIKE 'UA1%') OR (B.CODE LIKE 'US1%'))
   AND ((B.CODE LIKE 'UP1%') OR (B.CODE LIKE 'UC0%') OR (B.CODE LIKE 'UA1%') OR (B.CODE LIKE 'US1%'))
), 
PRODUCT_REQUEST AS (
SELECT B.PSM_CODE
     , A.UUID
     , CASE WHEN A.DOMAIN_TYPE = 'UnitProduct' THEN 'Unit Product'
            WHEN A.DOMAIN_TYPE = 'SalesMP' THEN 'Sales Product'
            WHEN A.DOMAIN_TYPE = 'RoleComponent' THEN 'Role'
            WHEN A.DOMAIN_TYPE = 'ProductComponent' THEN 'Product Component'
            WHEN A.DOMAIN_TYPE = 'Component' THEN 'Component'
            WHEN A.DOMAIN_TYPE = 'ProductRequest' THEN 'Product Request'
            WHEN A.DOMAIN_TYPE = 'ComponentProperty' THEN 'Component Property'
            WHEN A.DOMAIN_TYPE = 'ComponentBaseProperty' THEN 'Component Base Property'
            WHEN A.DOMAIN_TYPE = 'Calculation' THEN 'Calculation'
            WHEN A.DOMAIN_TYPE = 'RequestBehaviour' THEN 'Request Behaviour'
            WHEN A.DOMAIN_TYPE = 'RuleSpecification' THEN 'Rule Specification'
            WHEN A.DOMAIN_TYPE = 'PoolContainerComponent' THEN 'Pool Container Product'
            WHEN A.DOMAIN_TYPE = 'CopmonentSpecification' THEN 'Component Specification'
            WHEN A.DOMAIN_TYPE = 'ApplicationComponent' THEN 'Application Component'
            ELSE A.DOMAIN_TYPE
       END AS DOMAIN_TYPE	
     , A.KIND_ID
	 , C.REF_ID
     , C.NAME AS KIND
     , A.DEF_DISP_NAME AS REQ_NAME
     --, E.NAME AS TARGET_STATE  --처리후계약상태
     , B.UUID AS PARENT_UUID
     , A.ID AS SPEC_ID
     , D.ID AS PRODUCT_REQUEST_ID
  FROM HPS.TBL_SPEC A
     , UNIT_PRODUCT B
     , HPS.TBL_KIND C
     , HPS.TBL_PRODUCT_REQUEST D
     --, HPS.TBL_PRODUCT_STATE E
 WHERE A.PROD_ID = B.PROD_ID
   AND A.USE_YN = 'Y'
   AND A.DOMAIN_TYPE = 'ProductRequest'  --20200615
   AND C.ID = A.KIND_ID
   AND D.ID = A.ID
)
/* PSM유형별 REQUEST추출 SQL
SELECT DISTINCT REF_ID, ''''||REQ_NAME||'''' ||' AS '|| '"'||REQ_NAME||'"'
  FROM PRODUCT_REQUEST
 WHERE PSM_CODE LIKE 'UC%'
  ORDER BY REF_ID
*/
, REQ_HIST AS (
--가설
         SELECT  /*+ INDEX(TLA) INDEX(AG) NO_INDEX_SS(REQ)  */ 
                REQ.LAST_MODIFIED_PRGM_ID AS LAST_MODIFIED_PRGM_ID
              , REQ.LAST_MODIFIER_ID AS LAST_MODIFIER_ID
         	  , REQ.REQUEST_AT AS REQUEST_DATE
         	  , REQ.ID AS REQUEST_ID
         	  , REQ.KIND_ID AS REQUEST_KIND_ID
         	  , KIND.KIND_DISPLAY_NAME AS REQUEST_KIND_NAME
         	  , AG.PRODUCT_TYPE_CODE AS PRODUCT_TYPE_CODE
         	  , AG.PSM_CODE AS PSM_CODE
         	  , AG.PRODUCT_CODE AS PRODUCT_CODE
         	  , AG.PRODUCT_DETAIL_CODE AS PRODUCT_DETAIL_CODE
          FROM HQICNT.TBL_TOP_LEVEL_AGREEMENT TLA
    INNER JOIN HQICNT.TBL_AGREEMENT AG
            ON TLA.ID = AG.ID
    INNER JOIN HQICNT.TBL_REQUEST REQ
            ON REQ.ID = TLA.REQUEST_ID 
    INNER JOIN HQICNT.TBL_KIND KIND
            ON REQ.KIND_ID = KIND.ID
         WHERE REQ.REQUEST_AT >= TO_DATE('20210830','YYYYMMDD')
           AND REQ.REQUEST_AT < SYSDATE + 1
		   AND REQ.CREATOR_ID NOT LIKE 'MIG%'
		   AND REQ.CREATOR_ID NOT LIKE 'TEST%'
		   AND REQ.CREATOR_ID <> '윤병천'
--계약
		 UNION ALL
         SELECT  /*+ INDEX(TLA) INDEX(AG) NO_INDEX_SS(REQ)  */ 
                REQ.LAST_MODIFIED_PRGM_ID AS LAST_MODIFIED_PRGM_ID
              , REQ.LAST_MODIFIER_ID AS LAST_MODIFIER_ID
         	  , REQ.REQUEST_AT AS REQUEST_DATE
         	  , REQ.ID AS REQUEST_ID
         	  , REQ.KIND_ID AS REQUEST_KIND_ID
         	  , KIND.KIND_DISPLAY_NAME AS REQUEST_KIND_NAME
         	  , AG.PRODUCT_TYPE_CODE AS PRODUCT_TYPE_CODE
         	  , AG.PSM_CODE AS PSM_CODE
         	  , AG.PRODUCT_CODE AS PRODUCT_CODE
         	  , AG.PRODUCT_DETAIL_CODE AS PRODUCT_DETAIL_CODE
          FROM HPACNT.TBL_TOP_LEVEL_AGREEMENT TLA
    INNER JOIN HPACNT.TBL_AGREEMENT AG
            ON TLA.ID = AG.ID
    INNER JOIN HPACNT.TBL_REQUEST REQ
            ON REQ.ID = TLA.REQUEST_ID 
    INNER JOIN HPACNT.TBL_KIND KIND
            ON REQ.KIND_ID = KIND.ID
         WHERE  REQ.REQUEST_AT >= TO_DATE('20210830','YYYYMMDD')
           AND REQ.REQUEST_AT < SYSDATE + 1
		   AND REQ.CREATOR_ID NOT LIKE 'MIG%'
		   AND REQ.CREATOR_ID NOT LIKE 'TEST%'
		   AND REQ.CREATOR_ID <> '윤병천'
)
--, PSM_PROD_REQ_HIST AS (
SELECT PRODUCT_CODE, PRODUCT_DETAIL_CODE, A.PSM_CODE, LAST_MODIFIER_ID, REQUEST_DATE, REF_ID, REQ_NAME
     , CASE WHEN REQUEST_KIND_ID = REF_ID THEN REQ_CNT ELSE 0 END REQ_CNT
  FROM (
		SELECT PRODUCT_CODE, PRODUCT_DETAIL_CODE, PSM_CODE, LAST_MODIFIER_ID, TO_CHAR(REQUEST_DATE, 'YYYYMMDD') REQUEST_DATE, REQUEST_KIND_ID, COUNT(1) AS REQ_CNT 
		  FROM REQ_HIST A  
		 GROUP BY PRODUCT_CODE, PRODUCT_DETAIL_CODE, PSM_CODE, LAST_MODIFIER_ID, TO_CHAR(REQUEST_DATE, 'YYYYMMDD'), REQUEST_KIND_ID
	   ) a,
	   (SELECT DISTINCT PSM_CODE, REF_ID, REQ_NAME
		FROM PRODUCT_REQUEST
		WHERE PSM_CODE LIKE 'UC%') b
 WHERE A.PSM_CODE = B.PSM_CODE;
--)

SELECT *
  FROM (
		SELECT A.상품세
		     , A.상품목
			 , A.인가명
			 , B.REF_ID
		     , B.REQ_NAME
			 --, C.REQUEST_KIND_ID
			 , C.REQ_CNT
		FROM (SELECT CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN A2.SALE_STAR_DATE AND A2.SALE_END_DATE THEN 'Y'
						  ELSE 'N'
					  END 판매여부,
					  A1.*
			    FROM HPF.TMP_COV_PSM_REQ@DL_DPIM A1
				   , (SELECT PROD_DTCD, PROD_ITCD, MIN(SALE_STAR_DATE) SALE_STAR_DATE, MAX(SALE_END_DATE) SALE_END_DATE
					    FROM HPF.MVW_SIMSTRSIPCM
					   GROUP BY PROD_DTCD, PROD_ITCD) A2
			   WHERE A1.상품세 = A2.PROD_DTCD(+)
			     AND A1.상품목 = A2.PROD_ITCD(+)) A
LEFT OUTER JOIN (
			     	SELECT DISTINCT PSM_CODE, REF_ID, REQ_NAME
			     	FROM PRODUCT_REQUEST
			     	WHERE PSM_CODE LIKE 'UC%'
			    ) B
			 ON A.PSM코드 = B.PSM_CODE
LEFT OUTER JOIN PSM_PROD_REQ_HIST C
		     ON A.상품세 = C.PRODUCT_CODE
		    AND A.상품목 = C.PRODUCT_DETAIL_CODE
		    AND A.PSM코드 = C.PSM_CODE
			AND B.PSM_CODE = C.PSM_CODE
			AND B.REF_ID = C.REF_ID
      WHERE A.상품세 < '9000'
/*
WHERE A.보종세 = '1015'
  AND A.보종목 = '003'
*/
	    )
 PIVOT (
		MAX(CASE WHEN REQ_CNT IS NOT NULL THEN REQ_CNT
		         WHEN REF_ID IS NOT NULL THEN 0
				 ELSE NULL
		    END
		      ) FOR REQ_NAME IN (
										 '가입설계' AS "가입설계"
										,'미정의리퀘스트' AS "미정의리퀘스트"
										)
)	   

======================
상품테이블건수
-- 보험종류
SELECT DISTINCT A.*
FROM TB_MMNORSUB A, TB_MMNORSSL B
WHERE B.SALE_END_DATE='99991231'
  AND A.IRKD_CODE_DTAL = B.IRKD_CODE_DTAL
  AND A.IRKD_CODE_ITEM = B.IRKD_CODE_ITEM

-- 보험종류판매
SELECT COUNT(*)
FROM TB_MMNORSSL
WHERE SALE_END_DATE='99991231'

-- 상품
SELECT DISTINCT A.*
FROM TB_MMNORMAT A, TB_MMNORCON B, TB_MMNORSSL C
WHERE C.SALE_END_DATE='99991231'
  AND A.GOOD_CODE_DTAL = B.GOOD_CODE_DTAL
  AND A.GOOD_CODE_ITEM = B.GOOD_CODE_ITEM
  AND B.IRKD_CODE_DTAL = C.IRKD_CODE_DTAL
  AND B.IRKD_CODE_ITEM = C.IRKD_CODE_ITEM
  AND B.SALE_CHNL_CODE = C.SALE_CHNL_CODE
  
-- 상품구성
SELECT COUNT(*)
FROM TB_MMNORCON B, TB_MMNORSSL C
WHERE C.SALE_END_DATE='99991231'
  AND B.IRKD_CODE_DTAL = C.IRKD_CODE_DTAL
  AND B.IRKD_CODE_ITEM = C.IRKD_CODE_ITEM
  AND B.SALE_CHNL_CODE = C.SALE_CHNL_CODE
  
-- 상품구성관계
SELECT COUNT(*)
FROM TB_MMNORCOL B, TB_MMNORSSL C
WHERE C.SALE_END_DATE='99991231'
  AND B.IRKD_CODE_DTAL = C.IRKD_CODE_DTAL
  AND B.IRKD_CODE_ITEM = C.IRKD_CODE_ITEM
  AND B.SALE_CHNL_CODE = C.SALE_CHNL_CODE
============================
생존지급 관련 테이블 조회
select irkd_code_dtal, irkd_code_dtal, max(소멸), max(만기), max(지급금), count(1)
      from (
    -- 휴면
    -- 지급금이 0이고 소멸일 7년 경과 건은 제외
    select poly_no, cntt_stat_code, irkd_code_dtal, irkd_code_item, extn_date 소멸, expr_date 만기, paym_amt 지급금
      from tb_pasusmon
     where WORK_YM = :workYm --'201805'
       and (paym_amt > 0
           or nvl(extn_date,0) >= :extnDate --'20110101'
           or trim(extn_date) = '')
       and poly_no in (select poly_no
      from tb_isaplctt
     where irkd_code_dtal = :irkdCodeDtal)
     union
     -- 해약환급금(월말 기준) - 휴면 제외
    -- 지급금이 0이고 소멸일 7년 경과 건은 제외
    select poly_no, cntt_stat_code, irkd_code_dtal, irkd_code_item, extn_date 소멸, expr_date 만기, paym_amt 지급금
      from tb_pacalrcn
     where calc_date >= :calcDate --'20180331'
       and (paym_amt > 0
           or nvl(extn_date, 0) >= :extnDate --'20110101'
           or trim(extn_date) = '')
       and poly_no in (select poly_no
      from tb_isaplctt
     where irkd_code_dtal = :irkdCodeDtal)
     )
 group by irkd_code_dtal, irkd_code_dtal
 ;



-- 휴면
select *
  from tb_pasusmon
 where WORK_YM = '201803'
   and poly_no in ('33215080',
'33228471',
'33212076',
'33212336',
'33219256',
'33212077',
'33212078',
'33229303');

-- 휴면
-- 지급금이 0이고 소멸일 7년 경과 건은 제외
select poly_no, cntt_stat_code, irkd_code_dtal, irkd_code_item, extn_date 소멸, expr_date 만기, paym_amt 지급금
  from tb_pasusmon
 where WORK_YM = '201803'
   and (paym_amt > 0
       or extn_date >= '20110101'
       or extn_date is null
       or trim(extn_date) = '')
   and poly_no in (select poly_no
  from tb_isaplctt
 where irkd_code_dtal = '1121');


-- 해약환급금(월말 기준) - 휴면 포함
select poly_no, cntt_stat_code, irkd_code_dtal, irkd_code_item, extn_date 소멸, expr_date 만기, paym_amt 지급금
  from tb_pacalrcn
 where calc_date = '20180331'   
   and poly_no in ('33215080',
'33228471',
'33212076',
'33212336',
'33219256',
'33212077',
'33212078',
'33229303');


-- 해약환급금(월말 기준) - 휴면 제외
-- 지급금이 0이고 소멸일 7년 경과 건은 제외
select poly_no, cntt_stat_code, irkd_code_dtal, irkd_code_item, extn_date 소멸, expr_date 만기, paym_amt 지급금
  from tb_pacalrcn
 where calc_date = '20180331'
   and (paym_amt > 0
       or extn_date >= '20110101'
       or extn_date is null
       or trim(extn_date) = '')
   and poly_no in (select poly_no
  from tb_isaplctt
 where irkd_code_dtal = '1227');
   
   
select *
  from tb_pacalrcn
 where extn_date is not null;

-- 해약환급금(월말 기준) 산출 오류건
tb_pacalrce
========================
스코어링_1

--삭제 대상 건 로그 저장
INSERT INTO TB_UVCOMLOG
(
    SELECT
         TO_CHAR(SYSDATE,'YYYYMMDD')                                          AS DLNG_DATE,                        -- 처리일자        
         SQ_UVCOMLOG.NEXTVAL                                                  AS SEQ_NO,                           -- 일련번호        
        '1961112'                                                             AS LAST_CHMN_MPNO,                   -- 최종변경자사번(요청자사번)  
         SYSDATE                                                              AS LAST_CHNG_DTTM,                   -- 최종변경일시    
        'SR_툴팁팩터ID 코드수정 및 추가'                                      AS PGM_ID,                           -- 프로그램ID      
        'TB_NCCODCOM'                                                         AS TABL_NAME,                        -- TABLE명         
        'code_dvsn'                                                           AS COLM_NAME,                        -- COLUMN명        
        code_dvsn||','||comm_code||','||hist_no                               AS CHNG_PK,                          -- 변경PK          
        'D'                                                                   AS CHNG_DVSN,                        -- 변경구분(U:Update, D:Delete, I:Insert)        
        code_dvsn||','||comm_code||','||hist_no||','||last_chmn_mpno||','||last_chng_dttm||','||pgm_id||','||comm_code_name||','||strt_date||','||end_date||','||del_yn||','||cprs_mang_lkcd                                                                   AS CHBF_DATA,                        -- 변경전데이터(U,D일 경우 기재, I는 Null)    
        ''                                                           AS CHAF_DATA                         -- 변경후데이터(U,I일 경우 기재, D는 Null)    
    FROM TB_NCCODCOM
   where CODE_DVSN='20' 
     OR (CODE_DVSN='21' and PGM_ID = 'SVnccom131in')    
);


--이전 등록 툴팁 삭제
DELETE FROM  tb_nccodcom 
 where CODE_DVSN='20' 
    OR (CODE_DVSN='21' and PGM_ID = 'SVnccom131in')


--337건: 신계약 공통코드 추가
insert into tb_nccodcom
select * from DBADMIN.tb_nccodcom@QA  
 where CODE_DVSN='20' 
   OR (CODE_DVSN='21' and PGM_ID = 'SVnccom131in')



--337건: 신계약 공통코드 추가
INSERT INTO TB_UVCOMLOG
(
    SELECT
         TO_CHAR(SYSDATE,'YYYYMMDD')                                          AS DLNG_DATE,                        -- 처리일자        
         SQ_UVCOMLOG.NEXTVAL                                                  AS SEQ_NO,                           -- 일련번호        
        '1961112'                                                             AS LAST_CHMN_MPNO,                   -- 최종변경자사번(요청자사번)  
         SYSDATE                                                              AS LAST_CHNG_DTTM,                   -- 최종변경일시    
        'SR_툴팁팩터ID 코드수정 및 추가'                                               AS PGM_ID,                           -- 프로그램ID      
        'TB_NCCODCOM'                                                         AS TABL_NAME,                        -- TABLE명         
        'code_dvsn'                                                           AS COLM_NAME,                        -- COLUMN명        
        code_dvsn||','||comm_code||','||hist_no                               AS CHNG_PK,                          -- 변경PK          
        'I'                                                                   AS CHNG_DVSN,                        -- 변경구분(U:Update, D:Delete, I:Insert)        
         ''                                                                   AS CHBF_DATA,                        -- 변경전데이터(U,D일 경우 기재, I는 Null)    
         code_dvsn||','||comm_code||','||hist_no||','||last_chmn_mpno||','||last_chng_dttm||','||pgm_id||','||comm_code_name||','||strt_date||','||end_date||','||del_yn||','||cprs_mang_lkcd                                                          AS CHAF_DATA                         -- 변경후데이터(U,I일 경우 기재, D는 Null)    
    FROM TB_NCCODCOM
   where CODE_DVSN='20' 
     OR (CODE_DVSN='21' and PGM_ID = 'SVnccom131in')
);


update tb_maplt022
   set outp_ordr_dtal = outp_ordr
 where jnpl_good_name like '(무)실손%표준%'
   and (irkd_code_dtal, irkd_code_item) in (
('1609',	'083'),
('1609',	'084'),
('1626',	'085'),
('1626',	'086'),
('1626',	'087'),
('1626',	'088'),
('1626',	'089'),
('1626',	'090'),
('1668',	'049'),
('1668',	'050'),
('1668',	'051'),
('1668',	'052'),
('1668',	'053'),
('1668',	'054'),
('1685',	'060'),
('1685',	'061'),
('1685',	'062'),
('1686',	'019'),
('1686',	'020'),
('1705',	'009'),
('1705',	'010'),
('1705',	'011'),
('1705',	'012'),
('1706',	'051'),
('1706',	'052'),
('1706',	'053'),
('1710',	'083'),
('1710',	'084'),
('1710',	'085'),
('1710',	'086'),
('1710',	'087'),
('1710',	'088'),
('1710',	'089'),
('1710',	'090'),
('1710',	'091'),
('1710',	'092'),
('1710',	'093'),
('1710',	'094'),
('1710',	'095'),
('1710',	'096'),
('1710',	'097'),
('1710',	'098'),
('1713',	'067'),
('1713',	'068'),
('1713',	'069'),
('1713',	'070'),
('1713',	'071'),
('1713',	'072'),
('1713',	'073'),
('1713',	'074'),
('1713',	'075'),
('1713',	'076'),
('1713',	'077'),
('1713',	'078'),
('1713',	'079'),
('1713',	'080'),
('1713',	'081'),
('1713',	'082'),
('1749',	'021'),
('1749',	'022'),
('1749',	'023'),
('1755',	'025'),
('1755',	'026'),
('1755',	'027'),
('1755',	'031'),
('1755',	'032'),
('1755',	'033'),
('1760',	'003'),
('1760',	'004'),
('1761',	'037'),
('1761',	'038'),
('1761',	'039'),
('1761',	'040'),
('1761',	'041'),
('1761',	'042'),
('1761',	'043'),
('1761',	'044'),
('1761',	'045'),
('1761',	'046'),
('1761',	'047'),
('1761',	'048'),
('1761',	'049'),
('1761',	'050'),
('1761',	'051'),
('1761',	'052'),
('1761',	'053'),
('1761',	'054'),
('1765',	'003'),
('1765',	'004'),
('1769',	'013'),
('1769',	'014'),
('1769',	'015'),
('1769',	'019'),
('1769',	'020'),
('1769',	'021'),
('1770',	'007'),
('1770',	'008'),
('1770',	'009'),
('1781',	'001'),
('1781',	'002'),
('1781',	'003'),
('1781',	'004'),
('1781',	'005'),
('1781',	'006'),
('1781',	'013'),
('1781',	'014'),
('1781',	'015'),
('1781',	'016'),
('1781',	'017'),
('1781',	'018'),
('1782',	'001'),
('1782',	'002')
   );

update tb_maplt022
   set outp_ordr_dtal = outp_ordr
 where jnpl_good_name like '(무)실손%선택%'
   and (irkd_code_dtal, irkd_code_item) in (
('1609',	'083'),
('1609',	'084'),
('1626',	'085'),
('1626',	'086'),
('1626',	'087'),
('1626',	'088'),
('1626',	'089'),
('1626',	'090'),
('1668',	'049'),
('1668',	'050'),
('1668',	'051'),
('1668',	'052'),
('1668',	'053'),
('1668',	'054'),
('1685',	'060'),
('1685',	'061'),
('1685',	'062'),
('1686',	'019'),
('1686',	'020'),
('1705',	'009'),
('1705',	'010'),
('1705',	'011'),
('1705',	'012'),
('1706',	'051'),
('1706',	'052'),
('1706',	'053'),
('1710',	'083'),
('1710',	'084'),
('1710',	'085'),
('1710',	'086'),
('1710',	'087'),
('1710',	'088'),
('1710',	'089'),
('1710',	'090'),
('1710',	'091'),
('1710',	'092'),
('1710',	'093'),
('1710',	'094'),
('1710',	'095'),
('1710',	'096'),
('1710',	'097'),
('1710',	'098'),
('1713',	'067'),
('1713',	'068'),
('1713',	'069'),
('1713',	'070'),
('1713',	'071'),
('1713',	'072'),
('1713',	'073'),
('1713',	'074'),
('1713',	'075'),
('1713',	'076'),
('1713',	'077'),
('1713',	'078'),
('1713',	'079'),
('1713',	'080'),
('1713',	'081'),
('1713',	'082'),
('1749',	'021'),
('1749',	'022'),
('1749',	'023'),
('1755',	'025'),
('1755',	'026'),
('1755',	'027'),
('1755',	'031'),
('1755',	'032'),
('1755',	'033'),
('1760',	'003'),
('1760',	'004'),
('1761',	'037'),
('1761',	'038'),
('1761',	'039'),
('1761',	'040'),
('1761',	'041'),
('1761',	'042'),
('1761',	'043'),
('1761',	'044'),
('1761',	'045'),
('1761',	'046'),
('1761',	'047'),
('1761',	'048'),
('1761',	'049'),
('1761',	'050'),
('1761',	'051'),
('1761',	'052'),
('1761',	'053'),
('1761',	'054'),
('1765',	'003'),
('1765',	'004'),
('1769',	'013'),
('1769',	'014'),
('1769',	'015'),
('1769',	'019'),
('1769',	'020'),
('1769',	'021'),
('1770',	'007'),
('1770',	'008'),
('1770',	'009'),
('1781',	'001'),
('1781',	'002'),
('1781',	'003'),
('1781',	'004'),
('1781',	'005'),
('1781',	'006'),
('1781',	'013'),
('1781',	'014'),
('1781',	'015'),
('1781',	'016'),
('1781',	'017'),
('1781',	'018'),
('1782',	'001'),
('1782',	'002')
   );
   
update tb_maplt022
   set outp_ordr = 900 + outp_ordr
 where jnpl_good_name like '(무)실손%표준%'
   and (irkd_code_dtal, irkd_code_item) in (
('1609',	'083'),
('1609',	'084'),
('1626',	'085'),
('1626',	'086'),
('1626',	'087'),
('1626',	'088'),
('1626',	'089'),
('1626',	'090'),
('1668',	'049'),
('1668',	'050'),
('1668',	'051'),
('1668',	'052'),
('1668',	'053'),
('1668',	'054'),
('1685',	'060'),
('1685',	'061'),
('1685',	'062'),
('1686',	'019'),
('1686',	'020'),
('1705',	'009'),
('1705',	'010'),
('1705',	'011'),
('1705',	'012'),
('1706',	'051'),
('1706',	'052'),
('1706',	'053'),
('1710',	'083'),
('1710',	'084'),
('1710',	'085'),
('1710',	'086'),
('1710',	'087'),
('1710',	'088'),
('1710',	'089'),
('1710',	'090'),
('1710',	'091'),
('1710',	'092'),
('1710',	'093'),
('1710',	'094'),
('1710',	'095'),
('1710',	'096'),
('1710',	'097'),
('1710',	'098'),
('1713',	'067'),
('1713',	'068'),
('1713',	'069'),
('1713',	'070'),
('1713',	'071'),
('1713',	'072'),
('1713',	'073'),
('1713',	'074'),
('1713',	'075'),
('1713',	'076'),
('1713',	'077'),
('1713',	'078'),
('1713',	'079'),
('1713',	'080'),
('1713',	'081'),
('1713',	'082'),
('1749',	'021'),
('1749',	'022'),
('1749',	'023'),
('1755',	'025'),
('1755',	'026'),
('1755',	'027'),
('1755',	'031'),
('1755',	'032'),
('1755',	'033'),
('1760',	'003'),
('1760',	'004'),
('1761',	'037'),
('1761',	'038'),
('1761',	'039'),
('1761',	'040'),
('1761',	'041'),
('1761',	'042'),
('1761',	'043'),
('1761',	'044'),
('1761',	'045'),
('1761',	'046'),
('1761',	'047'),
('1761',	'048'),
('1761',	'049'),
('1761',	'050'),
('1761',	'051'),
('1761',	'052'),
('1761',	'053'),
('1761',	'054'),
('1765',	'003'),
('1765',	'004'),
('1769',	'013'),
('1769',	'014'),
('1769',	'015'),
('1769',	'019'),
('1769',	'020'),
('1769',	'021'),
('1770',	'007'),
('1770',	'008'),
('1770',	'009'),
('1781',	'001'),
('1781',	'002'),
('1781',	'003'),
('1781',	'004'),
('1781',	'005'),
('1781',	'006'),
('1781',	'013'),
('1781',	'014'),
('1781',	'015'),
('1781',	'016'),
('1781',	'017'),
('1781',	'018'),
('1782',	'001'),
('1782',	'002')
   );
   
select *
  from tb_maplt022
 where jnpl_good_name like '(무)실손%' 
   and (irkd_code_dtal, irkd_code_item) in (
('1609',	'083'),
('1609',	'084'),
('1626',	'085'),
('1626',	'086'),
('1626',	'087'),
('1626',	'088'),
('1626',	'089'),
('1626',	'090'),
('1668',	'049'),
('1668',	'050'),
('1668',	'051'),
('1668',	'052'),
('1668',	'053'),
('1668',	'054'),
('1685',	'060'),
('1685',	'061'),
('1685',	'062'),
('1686',	'019'),
('1686',	'020'),
('1705',	'009'),
('1705',	'010'),
('1705',	'011'),
('1705',	'012'),
('1706',	'051'),
('1706',	'052'),
('1706',	'053'),
('1710',	'083'),
('1710',	'084'),
('1710',	'085'),
('1710',	'086'),
('1710',	'087'),
('1710',	'088'),
('1710',	'089'),
('1710',	'090'),
('1710',	'091'),
('1710',	'092'),
('1710',	'093'),
('1710',	'094'),
('1710',	'095'),
('1710',	'096'),
('1710',	'097'),
('1710',	'098'),
('1713',	'067'),
('1713',	'068'),
('1713',	'069'),
('1713',	'070'),
('1713',	'071'),
('1713',	'072'),
('1713',	'073'),
('1713',	'074'),
('1713',	'075'),
('1713',	'076'),
('1713',	'077'),
('1713',	'078'),
('1713',	'079'),
('1713',	'080'),
('1713',	'081'),
('1713',	'082'),
('1749',	'021'),
('1749',	'022'),
('1749',	'023'),
('1755',	'025'),
('1755',	'026'),
('1755',	'027'),
('1755',	'031'),
('1755',	'032'),
('1755',	'033'),
('1760',	'003'),
('1760',	'004'),
('1761',	'037'),
('1761',	'038'),
('1761',	'039'),
('1761',	'040'),
('1761',	'041'),
('1761',	'042'),
('1761',	'043'),
('1761',	'044'),
('1761',	'045'),
('1761',	'046'),
('1761',	'047'),
('1761',	'048'),
('1761',	'049'),
('1761',	'050'),
('1761',	'051'),
('1761',	'052'),
('1761',	'053'),
('1761',	'054'),
('1765',	'003'),
('1765',	'004'),
('1769',	'013'),
('1769',	'014'),
('1769',	'015'),
('1769',	'019'),
('1769',	'020'),
('1769',	'021'),
('1770',	'007'),
('1770',	'008'),
('1770',	'009'),
('1781',	'001'),
('1781',	'002'),
('1781',	'003'),
('1781',	'004'),
('1781',	'005'),
('1781',	'006'),
('1781',	'013'),
('1781',	'014'),
('1781',	'015'),
('1781',	'016'),
('1781',	'017'),
('1781',	'018'),
('1782',	'001'),
('1782',	'002')
   );
   
update tb_maplt022 a
   set outp_ordr = (select outp_ordr_dtal
                      from tb_maplt022 b
                     where b.jnpl_good_name like '(무)실손%표준%'
                       and a.irkd_code_dtal = b.irkd_code_dtal
                       and a.irkd_code_item = b.irkd_code_item
                       and a.sale_chnl_code = b.sale_chnl_code
                       and a.good_code_dtal = b.good_code_dtal
                       and trim(to_char(b.good_code_item + 6, '000')) = a.good_code_item)
 where a.jnpl_good_name like '(무)실손%선택%' 
   and (a.irkd_code_dtal, a.irkd_code_item) in (
('1609',	'083'),
('1609',	'084'),
('1626',	'085'),
('1626',	'086'),
('1626',	'087'),
('1626',	'088'),
('1626',	'089'),
('1626',	'090'),
('1668',	'049'),
('1668',	'050'),
('1668',	'051'),
('1668',	'052'),
('1668',	'053'),
('1668',	'054'),
('1685',	'060'),
('1685',	'061'),
('1685',	'062'),
('1686',	'019'),
('1686',	'020'),
('1705',	'009'),
('1705',	'010'),
('1705',	'011'),
('1705',	'012'),
('1706',	'051'),
('1706',	'052'),
('1706',	'053'),
('1710',	'083'),
('1710',	'084'),
('1710',	'085'),
('1710',	'086'),
('1710',	'087'),
('1710',	'088'),
('1710',	'089'),
('1710',	'090'),
('1710',	'091'),
('1710',	'092'),
('1710',	'093'),
('1710',	'094'),
('1710',	'095'),
('1710',	'096'),
('1710',	'097'),
('1710',	'098'),
('1713',	'067'),
('1713',	'068'),
('1713',	'069'),
('1713',	'070'),
('1713',	'071'),
('1713',	'072'),
('1713',	'073'),
('1713',	'074'),
('1713',	'075'),
('1713',	'076'),
('1713',	'077'),
('1713',	'078'),
('1713',	'079'),
('1713',	'080'),
('1713',	'081'),
('1713',	'082'),
('1749',	'021'),
('1749',	'022'),
('1749',	'023'),
('1755',	'025'),
('1755',	'026'),
('1755',	'027'),
('1755',	'031'),
('1755',	'032'),
('1755',	'033'),
('1760',	'003'),
('1760',	'004'),
('1761',	'037'),
('1761',	'038'),
('1761',	'039'),
('1761',	'040'),
('1761',	'041'),
('1761',	'042'),
('1761',	'043'),
('1761',	'044'),
('1761',	'045'),
('1761',	'046'),
('1761',	'047'),
('1761',	'048'),
('1761',	'049'),
('1761',	'050'),
('1761',	'051'),
('1761',	'052'),
('1761',	'053'),
('1761',	'054'),
('1765',	'003'),
('1765',	'004'),
('1769',	'013'),
('1769',	'014'),
('1769',	'015'),
('1769',	'019'),
('1769',	'020'),
('1769',	'021'),
('1770',	'007'),
('1770',	'008'),
('1770',	'009'),
('1781',	'001'),
('1781',	'002'),
('1781',	'003'),
('1781',	'004'),
('1781',	'005'),
('1781',	'006'),
('1781',	'013'),
('1781',	'014'),
('1781',	'015'),
('1781',	'016'),
('1781',	'017'),
('1781',	'018'),
('1782',	'001'),
('1782',	'002')
   );
   
update tb_maplt022 a
   set outp_ordr = (select outp_ordr_dtal
                      from tb_maplt022 b
                     where b.jnpl_good_name like '(무)실손%선택%'
                       and a.irkd_code_dtal = b.irkd_code_dtal
                       and a.irkd_code_item = b.irkd_code_item
                       and a.sale_chnl_code = b.sale_chnl_code
                       and a.good_code_dtal = b.good_code_dtal
                       and trim(to_char(a.good_code_item + 6, '000')) = b.good_code_item)
 where a.jnpl_good_name like '(무)실손%표준%' 
   and (a.irkd_code_dtal, a.irkd_code_item) in (
('1609',	'083'),
('1609',	'084'),
('1626',	'085'),
('1626',	'086'),
('1626',	'087'),
('1626',	'088'),
('1626',	'089'),
('1626',	'090'),
('1668',	'049'),
('1668',	'050'),
('1668',	'051'),
('1668',	'052'),
('1668',	'053'),
('1668',	'054'),
('1685',	'060'),
('1685',	'061'),
('1685',	'062'),
('1686',	'019'),
('1686',	'020'),
('1705',	'009'),
('1705',	'010'),
('1705',	'011'),
('1705',	'012'),
('1706',	'051'),
('1706',	'052'),
('1706',	'053'),
('1710',	'083'),
('1710',	'084'),
('1710',	'085'),
('1710',	'086'),
('1710',	'087'),
('1710',	'088'),
('1710',	'089'),
('1710',	'090'),
('1710',	'091'),
('1710',	'092'),
('1710',	'093'),
('1710',	'094'),
('1710',	'095'),
('1710',	'096'),
('1710',	'097'),
('1710',	'098'),
('1713',	'067'),
('1713',	'068'),
('1713',	'069'),
('1713',	'070'),
('1713',	'071'),
('1713',	'072'),
('1713',	'073'),
('1713',	'074'),
('1713',	'075'),
('1713',	'076'),
('1713',	'077'),
('1713',	'078'),
('1713',	'079'),
('1713',	'080'),
('1713',	'081'),
('1713',	'082'),
('1749',	'021'),
('1749',	'022'),
('1749',	'023'),
('1755',	'025'),
('1755',	'026'),
('1755',	'027'),
('1755',	'031'),
('1755',	'032'),
('1755',	'033'),
('1760',	'003'),
('1760',	'004'),
('1761',	'037'),
('1761',	'038'),
('1761',	'039'),
('1761',	'040'),
('1761',	'041'),
('1761',	'042'),
('1761',	'043'),
('1761',	'044'),
('1761',	'045'),
('1761',	'046'),
('1761',	'047'),
('1761',	'048'),
('1761',	'049'),
('1761',	'050'),
('1761',	'051'),
('1761',	'052'),
('1761',	'053'),
('1761',	'054'),
('1765',	'003'),
('1765',	'004'),
('1769',	'013'),
('1769',	'014'),
('1769',	'015'),
('1769',	'019'),
('1769',	'020'),
('1769',	'021'),
('1770',	'007'),
('1770',	'008'),
('1770',	'009'),
('1781',	'001'),
('1781',	'002'),
('1781',	'003'),
('1781',	'004'),
('1781',	'005'),
('1781',	'006'),
('1781',	'013'),
('1781',	'014'),
('1781',	'015'),
('1781',	'016'),
('1781',	'017'),
('1781',	'018'),
('1782',	'001'),
('1782',	'002')
   );
   
update tb_maplt022
   set outp_ordr_dtal = 0
 where jnpl_good_name like '(무)실손%' 
   and outp_ordr_dtal <> 0
   and (irkd_code_dtal, irkd_code_item) in (
('1609',	'083'),
('1609',	'084'),
('1782',	'001'),
('1782',	'002')
   );
   
   
===================================  
실손가입가능여부 N 처리

실손가입가능여부 N 처리

update tb_ncpmmjyn set PMMI_JOIN_PSYN = 'N' where CUST_ID = '0029206190' and BSNS_DLNG_DATE = '20090803';

update tb_ncpmmtml  set PMMI_TELG_CTEN = (select PMMI_TELG_CTEN from tb_ncpmmtml where BSNS_DLNG_DATE = '20090731' and log_sqno = 3616) where BSNS_DLNG_DATE = '20090803' and TELG_NO = 109;

실손승인
insert into TB_CSPMMIAG
values('2055298332', '2000124', 1, '2000124', sysdate, 'test', 'CJ77777777777777', '20081024', 'udusr001', '00029', '20081024', '', '', '99991231', 'Y')

FP별 실손동의고객조회
select a.fnpl_prno, b.rsdn_rgst_no, b.cust_name
  from TB_CSPMMIAG a,
       tb_mascm010 b
 where a.cust_id = b.cust_id
   and a.inqr_rcnt_yn = 'Y'
   and a.end_date >= '20090907'
==========================================
실손처리
 /* 정보동의 스킵 */
insert into TB_CSPMMIAG
select 
 CUST_ID,          --고객ID
 WRSP_LPNO,             --FP고유번호
 NVL((select max(HIST_NO)+1 from TB_CSPMMIAG t where t.CUST_ID=s.CUST_ID and t.FNPL_PRNO=s.WRSP_LPNO),1) hist_no, --이력번호
 'Orange',             --최종변경자사번
 sysdate,               --최종변경일시
 'test',                --프로그램ID
 'CJ77777777777777',    --이미지관리번호
 TO_CHAR(SYSDATE,'YYYYMMDD'),            --신청일자
 'udusr001',            --신청처리자사번
 '00029',               --신청기관코드
 TO_CHAR(SYSDATE,'YYYYMMDD'),            --승인일자
 '',                    --승인자사번
 '',                    --승인기관코드
 '99991231',            --종료일자
 'Y'                    --조회승인여부
from
(
select
      distinct(SUB_CUST_ID) CUST_ID,          --고객ID
      WRSP_LPNO
 from tb_mascm050 S, tb_mascm040 b
where s.WRSP_LPNO in ('20918243','20911963','20917750','20917682','20917699','1940835') -- fp 사번입력
  and S.CUST_ID = b.MAIN_CUST_ID
) s ;


/* 실손보험 가입 check 스킵 */
insert into tb_ncpmmjyn
select 
 distinct(SUB_CUST_ID)   -- 고객ID
,TO_CHAR(SYSDATE,'YYYYMMDD')     -- 업무처리일자
,'2040167'      -- 최종변경자사번
,SYSDATE        -- 최종변경일시
,'SVncapl768vw' -- 프로그램ID
,'Y'            -- 실손가입가능여부
,''             -- 전문번호 
,''
,''
,''
,''
,''
,''
 from tb_mascm050 S, tb_mascm040 b
where s.WRSP_LPNO in ('20918243','20911963','20917750','20917682','20917699','1940835')  -- fp 사번입력
  and S.CUST_ID = b.MAIN_CUST_ID ;


========================
암복호화

-- 복호화 -> 암호화
select dbsec.spin_crypto.spinenc('P001','9010191852219') from dual


-- 암호화 -> 복호화
select dbsec.spin_crypto.spindec('P001','9012052Mzzyco') from dual


P001	주민등록번호
P002	카드번호
P003	계좌번호
P004	여권번호
P005	운전면허번호
P006	외국인번호
P007	전화번호
P008	주소(상세)
P009	이메일
P010	샵메일


select *
 from tb_csscm010
 where rsdn_rgst_no = '8401012wUCrzY'



<< UDF 사용법 >>

UDF의 유형은 Gateway 방식, API 방식에 따라 별도로 관리된다.
*** API방식의 경우에는 유형별로 별도의 함수를 사용하고 있음

1.Gateway 방식 암/복호화

암복호화의  주민등록번호 관련 항목은 'P001'로 정의
public static final String POLICY_ENCDEC_RES_NO 		= "P001";

암복호화의  카드번호 관련 항목은 'P002'로 정의
public static final String POLICY_ENCDEC_CARD_NO 	= "P002";

암복호화의  계좌번호 관련 항목은 'P003'로 정의
public static final String POLICY_ENCDEC_ACCT_NO 		= "P003";

암복호화의  운전면허번호 관련 항목은 'P005'로 정의
public static final String POLICY_ENCDEC_LICENCE_NO 	= "P005";

암복호화의  외국인등록번호 관련 항목은 'P006'로 정의
public static final String POLICY_ENCDEC_FORG_RES_NO 	= "P006";

암복호화의  전화번호 관련 항목은 'P007'로 정의
public static final String POLICY_ENCDEC_TEL 		= "P007";

select dbsec.spin_crypto.spinenc('정책번호', '암호화할값') from dual;  //암호화 함수
ex) select dbsec.spin_crypto.spinenc('P001', '1234561234567') from dual; //주민번호 암호화

select dbsec.spin_crypto.spindec('정책번호', '복호화할값') from dual;  //복호화 함수


2.주소 암/복호화

dbsec.enc_addr('암호화할값', '명령어') // 오라클용 addr 암호화 함수
ex> select dbsec.enc_addr(‘대한생명 7층', 'SELECT') from dual;

dbsec.dec_addr('복호화할값') // 오라클용 addr 복호화 함수
ex> select dbsec.dec_addr('2+txJhnlgRDBoUNkLlp7kA==') from dual;

securedb.dbsec.enc_addr ('암호화할값', '명령어') // MSSQL addr 암호화 함수
ex) select securedb.dbsec.enc_addr(대한생명 7층','SELECT')

securedb.dbsec.dec_addr ('복호화할값') //MSSQL용 복호화 함수

3.이메일 암/복호화

dbsec.enc_email('암호화할값', '명령어') // 오라클용 email 암호화 함수
ex> select dbsec.enc_email('aaaaa@naver.com', 'SELECT') from dual;

dbsec.dec_email('복호화할값') // 오라클용 email 복호화 함수
ex> select dbsec.dec_email('VUQyUe0IUUoJefKFfOkBLg==@naver.com') from dual;

securedb.dbsec.enc_email('암호화할값', '명령어') // MSSQL email 암호화 함수
ex) select securedb.dbsec.enc_email('aaaa@naver.com','SELECT')

securedb.dbsec.dec_email('복호화할값') //MSSQL용 복호화 함수

4.여권번호 암/복호화

dbsec.enc_passport('암호화할값', '명령어') // 오라클용 passport 암호화 함수
ex> select dbsec.enc_passport(‘M64855967', 'SELECT') from dual;

dbsec.dec_passport ('복호화할값') // 오라클용 passport 복호화 함수
ex> select dbsec.dec_passport(‘/IHRrv9kif/DzhMp1rQFyw==') from dual;

securedb.dbsec.enc_passport('암호화할값', '명령어') // MSSQL passport 암호화 함수
ex) select securedb.dbsec.enc_passport(‘M64855967','SELECT')

securedb.dbsec.dec_passport('복호화할값') //MSSQL용 복호화 함수


==================
연간보험료
select GOOD_DVCD,       --보험료지수상품구분(주1,특2)
       GOOD_NAME,       --상품인가명
       SEQ_NO,
       max(INTR_PRGP),        --보험기간  
       max(PYTR_PRGP),        --납입기간
       max(RISK_PRGP),   --보장위험문구
       sum(SELF_ANPM),    --본인남자연간보험료     
       sum(MATE_ANPM),    --배우자남자연간보험료 
       sum(CLD1_ANPM),    --자녀1남자연간보험료  
       sum(CLD2_ANPM),   --자녀2여자연간보험료  
       max(STDD_IAMT),        --기준보험금           
       sum(SELF_PMIX),    --본인남자보험료지수
       sum(MATE_PMIX),    --배우자남자보험료지수
       sum(CLD1_PMIX),    --자녀1남자보험료지수
       sum(CLD2_PMIX),   --자녀2여자보험료지수
       max(JOIN_AMT)          --가입금액
from (
    select  a.GOOD_CODE_DTAL,   --상품코드세
          a.GOOD_CODE_ITEM,   --상품코드목
          DECODE(a.PMIX_GOOD_DVCD, '1', '주계약', '2', '특약') GOOD_DVCD,   --보험료지수상품구분(주1,특2)
          a.GOOD_PERM_NAME GOOD_NAME,   --상품인가명
          a.INTR_PRGP,        --보험기간
          a.PYTR_PRGP,        --납입기간
          b.SEQ_NO,           --순서
          b.GURT_RISK_PRGP RISK_PRGP,   --보장위험문구
          DECODE(&p_self_dvsn, 'M', b.SELF_MAN_ANPM, 'F', b.SELF_WOMN_ANPM) SELF_ANPM,  --본인연간보험료
          DECODE(&p_self_dvsn, 'F', b.MATE_MAN_ANPM, 'M', b.MATE_WOMN_ANPM) MATE_ANPM,  --배우자연간보험료
          b.CLD1_MAN_ANPM    CLD1_ANPM, --자녀1남자연간보험료
          b.CLD2_WOMN_ANPM   CLD2_ANPM, --자녀2여자연간보험료
          b.STDD_IAMT,        --기준보험금
          DECODE(&p_self_dvsn, 'M', a.SELF_MAN_PMIX, 'F', a.SELF_WOMN_PMIX) SELF_PMIX,  --본인보험료지수
          DECODE(&p_self_dvsn, 'M', a.MATE_MAN_PMIX, 'F', a.MATE_WOMN_PMIX) MATE_PMIX,  --배우자보험료지수
          a.CLD1_MAN_PMIX    CLD1_PMIX, --자녀1남자보험료지수
          a.CLD2_WOMN_PMIX   CLD2_PMIX, --자녀2여자보험료지수
          a.JOIN_AMT          --가입금액
   from TB_MMNORPMI a, TB_MMNORYPM b 
   where a.GOOD_CODE_DTAL || a.GOOD_CODE_ITEM in ('1692001','5660001','5649004')
   and a.GOOD_CODE_DTAL = b.GOOD_CODE_DTAL
   and a.GOOD_CODE_ITEM = b.GOOD_CODE_ITEM)
group by GOOD_DVCD, GOOD_NAME, seq_no
order by GOOD_DVCD, GOOD_NAME, SEQ_NO


select * from TB_MMNORYPM
  ==============
연금가입정보 골드에이지연금 착오입력건 삭제_20140922
-- 골드에이지자금 삭제 - 최종 대상건 (27949건, 2014.9.22 10:48)
delete from tb_isanninf
 where poly_no in (
select /*+ use_nl(a b) index(a tb_isaplctt_ie8) index(b tb_isanninf_pk) */ a.poly_no
  from tb_isaplctt a, tb_isanninf b
 where a.poly_no = b.poly_no
   and b.annt_type_code = '5'
   and a.poly_no not in (select /*+ use_nl(a b c) */ poly_no
                           from tb_isanninf c
                          where b.poly_no = c.poly_no
                            and b.join_good_no = c.join_good_no                            
                            and c.annt_type_code <> '5')
   and (a.irkd_code_dtal, a.irkd_code_item) in (
   ('1228',	'049'),
('1643',	'018')
   ))
and annt_type_code = '5';  
==================
온슈어 신계약 현황
-- 월단위 데이터 산출
select cntt_conc_ym
      ,decode(CNTT_STAT_CODE,'1','유지','2','유지','6','청약서발행','7','신계약접수','기타(반송,철회 등)') cntt_stat
      ,sum(decode(CLLT_ORGN_CODE,'08061',1,0)) 온슈어
      ,sum(decode(CLLT_ORGN_CODE,'08061',sum_prem,0)) 온슈어보험료
      ,sum(decode(sale_chnl_code,'3',1,0)) CM
      ,sum(decode(sale_chnl_code,'3',sum_prem,0)) CM보험료
      ,sum(decode(sale_chnl_code,'1',1,0)) 개인
      ,sum(decode(sale_chnl_code,'1',sum_prem,0)) 개인보험료
 from tb_isaplctt
 where cntt_conc_ym >= '201305'
   and CNTT_PAYM_CYCD <> '0'
   and CNTT_STAT_CODE in ('1','2','6','7')
 group by cntt_conc_ym,decode(CNTT_STAT_CODE,'1','유지','2','유지','6','청약서발행','7','신계약접수','기타(반송,철회 등)');
 
-- 일단위 데이터 산출
select nvl(a.cntt_date,b.publ_date)
      ,decode(CNTT_STAT_CODE,'1','유지','2','유지','6','청약서발행','7','신계약접수','기타(반송,철회 등)') cntt_stat
      ,sum(decode(CLLT_ORGN_CODE,'08061',1,0)) 온슈어
      ,sum(decode(CLLT_ORGN_CODE,'08061',sum_prem,0)) 온슈어보험료
      ,sum(decode(sale_chnl_code,'1',1,0)) 개인
      ,sum(decode(sale_chnl_code,'1',sum_prem,0)) 개인보험료
      ,sum(decode(sale_chnl_code,'3',1,0)) CM
      ,sum(decode(sale_chnl_code,'3',sum_prem,0)) CM보험료
 from tb_isaplctt a, tb_ncaplsph b
 where a.poly_no = b.pyno_bdct_no
   and a.cntt_conc_ym >= '201308'
   and b.bsns_dvsn_code = 'NC'
 group by nvl(a.cntt_date,b.publ_date), decode(CNTT_STAT_CODE,'1','유지','2','유지','6','청약서발행','7','신계약접수','기타(반송,철회 등)');
   --and CNTT_STAT_CODE not in ('6','L')


select decode(CNTT_STAT_CODE,'1','유지','2','유지','6','청약서발행','7','신계약접수','기타(반송,철회 등)') cntt_stat
      ,count(1) 온슈어
      ,sum(sum_prem) 온슈어보험료
 from tb_isaplctt a, tb_ncaplsph b
 where a.poly_no = b.pyno_bdct_no
   and b.bsns_dvsn_code = 'NC'
   and b.revi_dlng_no = '0000'
   and b.publ_seq_no = 1
   and a.CNTT_STAT_CODE <> 'L'
   and a.cntt_conc_ym = '201308'
   and b.publ_date >= '20130826'
   and b.publ_date <= '20130830'
   and a.sale_chnl_code = '1'
   and a.CNTT_PAYM_CYCD <> '0'
 group by decode(CNTT_STAT_CODE,'1','유지','2','유지','6','청약서발행','7','신계약접수','기타(반송,철회 등)');
================================
월별보종별펀드가입건수_이제현M요청_20140609
 -- 월별, 보종별, 펀드별 가입건수

select /*+ parallel(a 8) parallel(b 8) */ b.cntt_conc_ym, b.irkd_code_dtal, d.rpik_insc_name, a.fund_code, c.code_name, count(1)
  from tb_iscjgadm a, tb_isaplctt b, tb_uvcdm002 c, tb_mmnorrsb d
 where a.join_good_no = 1
   and a.ACAT_ACCT_DVSN = '1'
   and a.hist_no = 1
   and a.good_dvcd = '1'
   and b.cntt_conc_ym >= '201201'
   and b.cntt_stat_code not in ('6','L')
   and a.poly_no = b.poly_no
   and c.code_id = 'FUND_CODE'   
   and a.fund_code = c.code_val
   and b.irkd_code_dtal = d.irkd_code_dtal
 group by b.cntt_conc_ym, b.irkd_code_dtal, d.rpik_insc_name, a.fund_code, c.code_name
 order by b.cntt_conc_ym, b.irkd_code_dtal, a.fund_code;
====================
자녀1정보삭제요청
-----------------------------------------------------------------------------------------------
/* 가입상품 Table ncLogging */ --DW쪽 삭제
insert into tb_nccomlog 
  ( dlng_date        -- 처리일자
   ,seq_no           -- 일련번호
   ,last_chmn_mpno   -- 최종변경자사번
   ,last_chng_dttm   -- 최종변경일시
   ,pgm_id           -- 프로그램ID
   ,tabl_name        -- TABLE명
   ,colm_name        -- COLUMN명
   ,chng_pk          -- 변경PK
   ,chng_dvsn        -- 변경구분
   ,chbf_data        -- 변경전데이터
   ,chaf_data        -- 변경후데이터
   )   
select to_char(sysdate,'yyyymmdd')
      ,(select /*+ index_desc(x tb_nccomlog_pk) */
               nvl(min(x.seq_no),0)
          from tb_nccomlog x
         where x.dlng_date = to_char(sysdate,'yyyymmdd')
           and rownum = 1) + rownum
      ,'1070324'
      ,sysdate
      ,'SR자녀1정보삭제요청'
      ,'TB_ISAPLCJG'
      ,null
      ,POLY_NO||','||JOIN_GOOD_NO||','||JNGD_HSNO
      ,'D'
	  ,poly_no           ||','||join_good_no                                ||','||jngd_hsno        ||','||
       last_chmn_mpno    ||','||to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','||pgm_id           ||','||
       good_code_dtal    ||','||good_code_item                              ||','||tabl_sepr_dvsn   ||','||
       good_reln_code    ||','||cntt_stat_code                              ||','||cntt_stat_dtcd   ||','||
       befo_cts_code     ||','||befo_cts_dtcd                               ||','||paym_cycl_code   ||','||
       paym_term         ||','||real_paym_term                              ||','||paym_term_dvsn   ||','||
       prem_cpay_reym    ||','||insr_term                                   ||','||real_insr_term   ||','||
       insr_term_dvsn    ||','||frst_cntt_date                              ||','||cntt_date        ||','||
       expr_date         ||','||extn_date                                   ||','||laps_date        ||','||
       insr_amt          ||','||orig_prem                                   ||','||prem             ||','||
       ptpy_yn           ||','||xtrc_prem                                   ||','||expr_retn_rato   ||','||
       lmit_pyct         ||','||lffd_paym_stdt                              ||','||annt_paym_stag   ||','||
       annt_paym_stdt    ||','||sint_strt_dvsn                              ||','||sint_strt_prsn   ||','||
       tint_strt_dvsn    ||','||tint_strt_prsn                              ||','||hynd_jngd_usyn   ||','||
       jngd_updt_eyct    ||','||prem_apcn_dvsn                              ||','||strt_date        ||','||
       end_date          ||','||del_yn                                      ||','||crdd_aftr_cnyn   ||','||
       cncl_objt_stdt    ||','||old_jngd_hsno                               ||','||jngd_dlng_dvcd   ||','||
       befo_jngd_no
      ,null
 from tb_isaplcjg
 where poly_no      = '152457247'
    and join_good_no between '11' and '19';

/* 가입상품 Table uvLogging */ --이력관리위해서
INSERT INTO TB_UVCOMLOG
(
   select to_char(sysdate,'yyyymmdd') AS DLNG_DATE
      ,SQ_UVCOMLOG.NEXTVAL                AS  SEQ_NO
      ,'1070324'                          AS LAST_CHMN_MPNO
      ,sysdate                            AS LAST_CHNG_DTTM     
      ,'SR자녀1정보삭제요청'              AS PGM_ID
      ,'TB_ISAPLCJG'                      AS TABL_NAME
      ,null                               AS COLM_NAME
      ,POLY_NO||','||JOIN_GOOD_NO||','||JNGD_HSNO AS CHNG_PK
      ,'D'                                AS CHNG_DVSN
	  ,poly_no           ||','||join_good_no                                ||','||jngd_hsno        ||','||
       last_chmn_mpno    ||','||to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','||pgm_id           ||','||
       good_code_dtal    ||','||good_code_item                              ||','||tabl_sepr_dvsn   ||','||
       good_reln_code    ||','||cntt_stat_code                              ||','||cntt_stat_dtcd   ||','||
       befo_cts_code     ||','||befo_cts_dtcd                               ||','||paym_cycl_code   ||','||
       paym_term         ||','||real_paym_term                              ||','||paym_term_dvsn   ||','||
       prem_cpay_reym    ||','||insr_term                                   ||','||real_insr_term   ||','||
       insr_term_dvsn    ||','||frst_cntt_date                              ||','||cntt_date        ||','||
       expr_date         ||','||extn_date                                   ||','||laps_date        ||','||
       insr_amt          ||','||orig_prem                                   ||','||prem             ||','||
       ptpy_yn           ||','||xtrc_prem                                   ||','||expr_retn_rato   ||','||
       lmit_pyct         ||','||lffd_paym_stdt                              ||','||annt_paym_stag   ||','||
       annt_paym_stdt    ||','||sint_strt_dvsn                              ||','||sint_strt_prsn   ||','||
       tint_strt_dvsn    ||','||tint_strt_prsn                              ||','||hynd_jngd_usyn   ||','||
       jngd_updt_eyct    ||','||prem_apcn_dvsn                              ||','||strt_date        ||','||
       end_date          ||','||del_yn                                      ||','||crdd_aftr_cnyn   ||','||
       cncl_objt_stdt    ||','||old_jngd_hsno                               ||','||jngd_dlng_dvcd   ||','||
       befo_jngd_no                     AS CHBF_DATA
      ,null                             AS CHAF_DATA
 from tb_isaplcjg
 where poly_no      = '152457247'
    and join_good_no between '11' and '19'
);

/* 가입상품 Table 삭제 */
delete from tb_isaplcjg
 where poly_no      = '152457247' 
  and join_good_no between '11' and '19';
-----------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------
/*  가입상품피보험자 Table Logging */
insert into tb_nccomlog
  ( dlng_date        -- 처리일자
   ,seq_no           -- 일련번호
   ,last_chmn_mpno   -- 최종변경자사번
   ,last_chng_dttm   -- 최종변경일시
   ,pgm_id           -- 프로그램ID
   ,tabl_name        -- TABLE명
   ,colm_name        -- COLUMN명
   ,chng_pk          -- 변경PK
   ,chng_dvsn        -- 변경구분
   ,chbf_data        -- 변경전데이터
   ,chaf_data        -- 변경후데이터
   )
select to_char(sysdate,'yyyymmdd')
      ,(select /*+ index_desc(x tb_nccomlog_pk) */
               nvl(min(x.seq_no),0)
          from tb_nccomlog x
         where x.dlng_date = to_char(sysdate,'yyyymmdd')
           and rownum = 1) + rownum
      ,'1070324'
      ,sysdate
      ,'SR자녀1정보삭제요청'
      ,'TB_ISCJGINS'
      ,null
      ,POLY_NO||','||JOIN_GOOD_NO||','||INSU_NO||','||JNGD_INSU_HSNO
      ,'D'
	  ,poly_no           ||','|| join_good_no    ||','|| insu_no                                     ||','||
       jngd_insu_hsno    ||','|| last_chmn_mpno  ||','|| to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','||
       pgm_id            ||','|| tabl_sepr_dvsn  ||','|| insu_code                                   ||','||
       acci_insu_code    ||','|| dead_yn         ||','|| dehn_date                                   ||','||
       strt_date         ||','|| end_date        ||','|| del_yn                                      ||','||
       crdd_aftr_cnyn    ||','|| cncl_objt_stdt
      ,null
  from tb_iscjgins
 where poly_no      = '152457247' 
   and join_good_no between '11' and '19';

/*  가입상품피보험자 Table uvLogging */
INSERT INTO TB_UVCOMLOG
(
   select to_char(sysdate,'yyyymmdd') AS DLNG_DATE
      ,SQ_UVCOMLOG.NEXTVAL                AS  SEQ_NO
      ,'1070324'                          AS LAST_CHMN_MPNO
      ,sysdate                            AS LAST_CHNG_DTTM     
      ,'SR자녀1정보삭제요청'              AS PGM_ID
      ,'TB_ISCJGINS'                      AS TABL_NAME
      ,null                               AS COLM_NAME
      ,POLY_NO||','||JOIN_GOOD_NO||','||INSU_NO||','||JNGD_INSU_HSNO AS CHNG_PK
      ,'D'                                AS CHNG_DVSN
	  ,poly_no           ||','|| join_good_no    ||','|| insu_no                                     ||','||
       jngd_insu_hsno    ||','|| last_chmn_mpno  ||','|| to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','||
       pgm_id            ||','|| tabl_sepr_dvsn  ||','|| insu_code                                   ||','||
       acci_insu_code    ||','|| dead_yn         ||','|| dehn_date                                   ||','||
       strt_date         ||','|| end_date        ||','|| del_yn                                      ||','||
       crdd_aftr_cnyn    ||','|| cncl_objt_stdt     AS CHBF_DATA
      ,null                             AS CHAF_DATA
  from tb_iscjgins
 where poly_no      = '152457247' 
   and join_good_no between '11' and '19'
);

/*  가입상품피보험자 Table 삭제 */
delete tb_iscjgins
 where poly_no      = '152457247'
   and join_good_no between '11' and '19';
-----------------------------------------------------------------------------------------------







-----------------------------------------------------------------------------------------------
/* 계약관계자 Table ncLogging */
insert into tb_nccomlog
  ( dlng_date        -- 처리일자
   ,seq_no           -- 일련번호
   ,last_chmn_mpno   -- 최종변경자사번
   ,last_chng_dttm   -- 최종변경일시
   ,pgm_id           -- 프로그램ID
   ,tabl_name        -- TABLE명
   ,colm_name        -- COLUMN명
   ,chng_pk          -- 변경PK
   ,chng_dvsn        -- 변경구분
   ,chbf_data        -- 변경전데이터
   ,chaf_data        -- 변경후데이터
   )
select to_char(sysdate,'yyyymmdd')
      ,(select /*+ index_desc(x tb_nccomlog_pk) */
               nvl(min(x.seq_no),0)
          from tb_nccomlog x
         where x.dlng_date = to_char(sysdate,'yyyymmdd')
           and rownum = 1) + rownum
      ,'1070324'
      ,sysdate
      ,'SR자녀1정보삭제요청'
      ,'TB_ISAPLCRM'
      ,null
      ,POLY_NO||','||CNTT_PRTR_NO||','||CNTT_PRTR_HSNO
      ,'D'
	  ,poly_no        ||','|| cntt_prtr_no                                ||','|| cntt_prtr_hsno  ||','||
       last_chmn_mpno ||','|| to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','|| pgm_id          ||','||
       tabl_sepr_dvsn ||','|| cust_id                                     ||','|| cntt_sex        ||','||
       cntt_age       ||','|| mins_reln_code                              ||','|| cntt_occp_code  ||','||
       cntt_drve_ctcd ||','|| cntt_risk_grcd                              ||','|| cntt_idac_bncd  ||','||
       cntt_frnr_dvcd ||','|| cntt_hndr_dvcd                              ||','|| cntt_frnr_stcd  ||','||
       cntt_inrk_occd ||','|| cntt_inrk_grcd                              ||','|| strt_date       ||','||
       end_date       ||','|| del_yn                                      ||','|| crdd_aftr_cnyn  ||','||
       cncl_objt_stdt ||','|| old_cnpr_hsno
      ,null
   from tb_isaplcrm
 where poly_no      = '152457247'
   and cntt_prtr_no = 3;

/* 계약관계자 Table uvLogging */
INSERT INTO TB_UVCOMLOG
(
   select to_char(sysdate,'yyyymmdd') AS DLNG_DATE
      ,SQ_UVCOMLOG.NEXTVAL                AS  SEQ_NO
      ,'1070324'                          AS LAST_CHMN_MPNO
      ,sysdate                            AS LAST_CHNG_DTTM     
      ,'SR자녀1정보삭제요청'              AS PGM_ID
      ,'TB_ISAPLCRM'                      AS TABL_NAME
      ,null                               AS COLM_NAME
      ,POLY_NO||','||CNTT_PRTR_NO||','||CNTT_PRTR_HSNO AS CHNG_PK
      ,'D'                                AS CHNG_DVSN
	  ,poly_no        ||','|| cntt_prtr_no                                ||','|| cntt_prtr_hsno  ||','||
       last_chmn_mpno ||','|| to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','|| pgm_id          ||','||
       tabl_sepr_dvsn ||','|| cust_id                                     ||','|| cntt_sex        ||','||
       cntt_age       ||','|| mins_reln_code                              ||','|| cntt_occp_code  ||','||
       cntt_drve_ctcd ||','|| cntt_risk_grcd                              ||','|| cntt_idac_bncd  ||','||
       cntt_frnr_dvcd ||','|| cntt_hndr_dvcd                              ||','|| cntt_frnr_stcd  ||','||
       cntt_inrk_occd ||','|| cntt_inrk_grcd                              ||','|| strt_date       ||','||
       end_date       ||','|| del_yn                                      ||','|| crdd_aftr_cnyn  ||','||
       cncl_objt_stdt ||','|| old_cnpr_hsno     AS CHBF_DATA
      ,null                             AS CHAF_DATA
  from tb_isaplcrm
 where poly_no      = '152457247'
   and cntt_prtr_no = 3
);

/* 계약관계자 Table 삭제 */
delete tb_isaplcrm
 where poly_no      = '152457247'
   and cntt_prtr_no = 3;
-----------------------------------------------------------------------------------------------





-----------------------------------------------------------------------------------------------
/* 계약관계자역할 Table ncLogging */
insert into tb_nccomlog
  ( dlng_date        -- 처리일자
   ,seq_no           -- 일련번호
   ,last_chmn_mpno   -- 최종변경자사번
   ,last_chng_dttm   -- 최종변경일시
   ,pgm_id           -- 프로그램ID
   ,tabl_name        -- TABLE명
   ,colm_name        -- COLUMN명
   ,chng_pk          -- 변경PK
   ,chng_dvsn        -- 변경구분
   ,chbf_data        -- 변경전데이터
   ,chaf_data        -- 변경후데이터
   )
select to_char(sysdate,'yyyymmdd')
      ,(select /*+ index_desc(x tb_nccomlog_pk) */
               nvl(min(x.seq_no),0)
          from tb_nccomlog x
         where x.dlng_date = to_char(sysdate,'yyyymmdd')
           and rownum = 1) + rownum
      ,'1070324'
      ,sysdate
      ,'SR자녀1정보삭제요청'
      ,'TB_ISAPLCMR'
      ,null
      ,POLY_NO||','||CUST_ROLE_CODE||','||CUST_ROLE_HSNO
      ,'D'
	  ,poly_no         ||','||  cust_role_code                              ||','||  cust_role_hsno   ||','||
       last_chmn_mpno  ||','||  to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','||  pgm_id           ||','||
       tabl_sepr_dvsn  ||','||  cntt_prtr_no                                ||','||  cust_id          ||','||
       bnfc_prio_rank  ||','||  recv_rato                                   ||','||  strt_date        ||','||
       end_date        ||','||  del_yn                                      ||','||  crdd_aftr_cnyn   ||','||
       cncl_objt_stdt
      ,null
  from tb_isaplcmr
 where poly_no      = '152457247'
   and cust_role_code in('23','24');

/* 계약관계자역할 Table uvLogging */   
INSERT INTO TB_UVCOMLOG
(
   select to_char(sysdate,'yyyymmdd') AS DLNG_DATE
      ,SQ_UVCOMLOG.NEXTVAL                AS  SEQ_NO
      ,'1070324'                          AS LAST_CHMN_MPNO
      ,sysdate                            AS LAST_CHNG_DTTM     
      ,'SR자녀1정보삭제요청'              AS PGM_ID
      ,'TB_ISAPLCMR'                      AS TABL_NAME
      ,null                               AS COLM_NAME
      ,POLY_NO||','||CUST_ROLE_CODE||','||CUST_ROLE_HSNO AS CHNG_PK
      ,'D'                                AS CHNG_DVSN
	  ,poly_no         ||','||  cust_role_code                              ||','||  cust_role_hsno   ||','||
       last_chmn_mpno  ||','||  to_char(last_chng_dttm,'YYYYMMDDHH24MISS')  ||','||  pgm_id           ||','||
       tabl_sepr_dvsn  ||','||  cntt_prtr_no                                ||','||  cust_id          ||','||
       bnfc_prio_rank  ||','||  recv_rato                                   ||','||  strt_date        ||','||
       end_date        ||','||  del_yn                                      ||','||  crdd_aftr_cnyn   ||','||
       cncl_objt_stdt                    AS CHBF_DATA
      ,null                              AS CHAF_DATA
  from tb_isaplcmr
 where poly_no      = '152457247'
   and cust_role_code in('23','24')
);

/* 계약관계자역할 Table 삭제 */
delete from tb_isaplcmr
 where poly_no      = '152457247'
   and cust_role_code in('23','24');
-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------

/* 피보험자 Table ncLogging */
insert into tb_nccomlog
  ( dlng_date        -- 처리일자
   ,seq_no           -- 일련번호
   ,last_chmn_mpno   -- 최종변경자사번
   ,last_chng_dttm   -- 최종변경일시
   ,pgm_id           -- 프로그램ID
   ,tabl_name        -- TABLE명
   ,colm_name        -- COLUMN명
   ,chng_pk          -- 변경PK
   ,chng_dvsn        -- 변경구분
   ,chbf_data        -- 변경전데이터
   ,chaf_data        -- 변경후데이터
   )
select to_char(sysdate,'yyyymmdd')
      ,(select /*+ index_desc(x tb_nccomlog_pk) */
               nvl(min(x.seq_no),0)
          from tb_nccomlog x
         where x.dlng_date = to_char(sysdate,'yyyymmdd')
           and rownum = 1) + rownum
      ,'1070324'
      ,sysdate
      ,'SR자녀1정보삭제요청'
      ,'TB_ISAPLINS'
      ,null
      ,POLY_NO||','||INSU_NO||','||INSU_HIST_NO
      ,'D'
	  ,poly_no          ||','|| insu_no                                       ||','|| insu_hist_no     ||','||
       last_chmn_mpno   ||','|| to_char(last_chng_dttm,'YYYYMMDDHH24MISS')    ||','|| pgm_id           ||','||
       tabl_sepr_dvsn   ||','|| cntt_prtr_no                                  ||','|| sex              ||','||
       join_age         ||','|| medi_kind_code                                ||','|| occp_code        ||','||
       idac_bntp_code   ||','|| hoby_code                                     ||','|| drve_catp_code   ||','||
       risk_grad_code   ||','|| wlis_dtiv_obyn                                ||','|| prev_medi_obyn   ||','||
       mdob_xtrt_rscd   ||','|| spcl_rcnt_kdcd                                ||','|| prem_calc_apag   ||','||
       spls_body_yn     ||','|| frnr_dvsn_code                                ||','|| hndr_dvsn_code   ||','||
       injr_occp_code   ||','|| injr_risk_grcd                                ||','|| frnr_stay_code   ||','||
       strt_date        ||','|| end_date                                      ||','|| crdd_aftr_cnyn   ||','||
       cncl_objt_stdt   ||','|| del_yn                                        ||','|| old_cnpr_hsno
      ,null
  from tb_isaplins
 where poly_no      = '152457247'
   and cntt_prtr_no in('2','3');

/* 피보험자 Table uvLogging */   
INSERT INTO TB_UVCOMLOG
(
   select to_char(sysdate,'yyyymmdd') AS DLNG_DATE
      ,SQ_UVCOMLOG.NEXTVAL                AS  SEQ_NO
      ,'1070324'                          AS LAST_CHMN_MPNO
      ,sysdate                            AS LAST_CHNG_DTTM     
      ,'SR자녀1정보삭제요청'              AS PGM_ID
      ,'TB_ISAPLINS'                      AS TABL_NAME
      ,null                               AS COLM_NAME
      ,POLY_NO||','||INSU_NO||','||INSU_HIST_NO AS CHNG_PK
      ,'D'                                AS CHNG_DVSN
	  ,poly_no          ||','|| insu_no                                       ||','|| insu_hist_no     ||','||
       last_chmn_mpno   ||','|| to_char(last_chng_dttm,'YYYYMMDDHH24MISS')    ||','|| pgm_id           ||','||
       tabl_sepr_dvsn   ||','|| cntt_prtr_no                                  ||','|| sex              ||','||
       join_age         ||','|| medi_kind_code                                ||','|| occp_code        ||','||
       idac_bntp_code   ||','|| hoby_code                                     ||','|| drve_catp_code   ||','||
       risk_grad_code   ||','|| wlis_dtiv_obyn                                ||','|| prev_medi_obyn   ||','||
       mdob_xtrt_rscd   ||','|| spcl_rcnt_kdcd                                ||','|| prem_calc_apag   ||','||
       spls_body_yn     ||','|| frnr_dvsn_code                                ||','|| hndr_dvsn_code   ||','||
       injr_occp_code   ||','|| injr_risk_grcd                                ||','|| frnr_stay_code   ||','||
       strt_date        ||','|| end_date                                      ||','|| crdd_aftr_cnyn   ||','||
       cncl_objt_stdt   ||','|| del_yn                                        ||','|| old_cnpr_hsno AS CHBF_DATA
      ,null                              AS CHAF_DATA
  from tb_isaplins
 where poly_no      = '152457247'
   and cntt_prtr_no in('2','3')
);

/* 피보험자 Table 삭제 */
delete from tb_isaplins
 where poly_no      = '152457247'
   and cntt_prtr_no in('2','3');
-----------------------------------------------------------------------------------------------
=====================
자녀사랑할인보험료 착오 관련
-- 효할인, 자녀사랑할인 대상 상품 중 특약 일시납 존재하는 보종목록
select *
  from tb_mmentdpp a, tb_mmnormdc mdc
 where pytr_inqr_code = 'N0'
   and good_code_dtal >= '5000'
   and exists (select 'X'
                 from tb_mmentdpp b
                where a.irkd_code_dtal = b.irkd_code_dtal
                  and a.irkd_code_item = b.irkd_code_item
                  and a.sale_chnl_code = b.sale_chnl_code
                  and b.irkd_code_dtal = b.good_code_dtal
                  and b.irkd_code_item = b.good_code_item
                  and b.pytr_inqr_code <> 'N0')     -- 주계약에 비일시납이 존재
  and not exists (select 'X'
                    from tb_mmentdpp b
                   where a.irkd_code_dtal = b.irkd_code_dtal
                     and a.irkd_code_item = b.irkd_code_item
                     and a.sale_chnl_code = b.sale_chnl_code
                     and a.good_code_dtal = b.good_code_dtal
                     and a.good_code_item = b.good_code_item
                     and b.pytr_inqr_code <> 'N0')  -- 특약에는 일시납만 존재
  and a.irkd_code_dtal = mdc.irkd_code_dtal
  and a.irkd_code_item = mdc.irkd_code_item
  and a.sale_chnl_code = mdc.sale_chnl_code
  and mdc.prem_dsct_kdcd in ('17','18')             -- 효할인(17), 자녀사랑할인(18) 존재
                    
                    
-- 자녀사랑할인 착오건, 454건
select *
  from tb_isaplctt a, tb_isaplcjg b, tb_isaplppd c
 where a.irkd_code_dtal = '1756'
   and a.irkd_code_item in ('002','007','013','019','022')
   and a.cntt_rapy_term <> 0
   and a.cntt_stat_code not in ('6','L')
   and a.poly_no = b.poly_no
   and b.good_code_dtal = '5722'
   and b.cntt_stat_code not in ('6','L')
   and b.del_yn = 'N'
   and to_char(sysdate,'yyyymmdd') between b.strt_date and b.end_date
   and a.poly_no = c.poly_no
   and c.prem_dsct_kdcd = '18'
   and c.del_yn = 'N'
   and to_char(sysdate,'yyyymmdd') between c.strt_date and c.end_date

-- 납입회차
select a.poly_no, max(a.orig_prem), max(a.prem), max(b.paym_cnt)
  from tb_isaplcjg a, tb_isrcvprm b
 where a.good_code_dtal = '5722'
   and a.jngd_hsno = (select max(jngd_hsno)
                      from tb_isaplcjg
                     where poly_no = a.poly_no
                       and join_good_no = a.join_good_no
                       and del_yn = 'N'
                       and end_date >= to_char(sysdate,'yyyymmdd'))
   and a.poly_no = b.poly_no
   and a.poly_no in (
'162122990',
'166938377')
group by a.poly_no
==================================
자료산출_유병자보험판매현황_양용현_20140619

select * from tb_mmnorsub where INKD_BSNS_NAME like '%실버암%'

select * from tb_mmnorsub where IRKD_CODE_DTAL='1771'

select * from tb_ncudwcmr --where IRKD_CODE_DTAL='1771'

select * from tb_ncmedres where jugm_date like '2014%' and xtrc_rato > 0

select * from tb_ncmedscr where LAST_CHNG_DTTM > to_date('20140101','yyyymmdd')

select * from tb_ncmedscb 

select /*+ ordered use_nl(a b c d e) full(a) parallel(a 10) */
       count(distinct a.poly_no) 인수  -- 1731548
      ,count(distinct (case when d.medi_jugm_ctid is not null then a.poly_no end)) 보험료할증
      ,count(distinct (case when c.redu_term is not null or c.lvl_redu_term is not null then a.poly_no end)) 보험금감액
      ,count(distinct (case when e.sppt_clsf_code between '01' and '43' then a.poly_no end)) 신체부위_부담보
      ,count(distinct (case when e.sppt_clsf_code between '50' and '75' then a.poly_no end)) 질병_부담보
      ,count(distinct (case when (d.medi_jugm_ctid is not null)
                              or (c.redu_term is not null or c.lvl_redu_term is not null)
                              or (e.sppt_clsf_code between '01' and '43')
                              or (e.sppt_clsf_code between '50' and '75')  then null else a.poly_no end)) 인수
--select /*+ ordered use_nl(a b c d e) full(a) parallel(a 10) */ a.poly_no, b.medi_jugm_ctid, d.medi_jugm_ctid, c.redu_term, c.lvl_redu_term, e.sppt_clsf_code
  from tb_nccloncd a
      ,tb_ncudwcmr b
      ,tb_ncmedres c
      ,tb_ncmedscr d
      ,tb_ncmedscb e
 where a.cntt_stat_code in ('1','2')
   and a.cntt_date between '20130401' and '20140331'
   and a.IRKD_CODE_DTAL <> '1771'  
   and b.poly_no(+) = a.poly_no
   and b.revi_dlng_no(+) = '0000'
   and b.del_yn(+) = 'N'
   and c.medi_jugm_ctid(+) = b.medi_jugm_ctid
   and c.medi_jugm_sqno(+) = b.medi_jugm_sqno
   and d.dshs_cnfm_rtdv(+)= c.dshs_cnfm_rtdv
   and d.mdiv_objt_no  (+)= c.mdiv_objt_no
   and d.medi_jugm_ctid(+)= c.medi_jugm_ctid
   and d.medi_jugm_sqno(+)= c.medi_jugm_sqno
   and d.del_yn(+) = 'N'
   and e.medi_jugm_ctid(+)= c.medi_jugm_ctid
   and e.medi_jugm_sqno(+)= c.medi_jugm_sqno


select /*+full(a) parallel(a 10) */ count(1) AS 인수거절  -- 65060
  from tb_ncrwttrx a
 where rwdt_dvsn = '1'
   and revi_dlng_no = '0000'
   and rwdt_stat_code = '12'
   and cntt_revi_date between '20130401' and '20140331'

   
select 65060+1731548 from dual


1,796,608
========================================
작업파일
-- 2020.01.06
[?2020-?01-?06 오후 3:10] 강상준(Kang Sang Jun): 
SELECT IRKD_CODE_DTAL, IRKD_CODE_ITEM, COUNT(1)
  FROM TB_NCGRPSRC@SYSADMIN_LINK
 GROUP BY IRKD_CODE_DTAL, IRKD_CODE_ITEM
 HAVING COUNT(1) > 1
;
SELECT * FROM TB_NCGRPSRC@SYSADMIN_LINK WHERE IRKD_CODE_DTAL = '1800' AND IRKD_CODE_ITEM = '802' ORDER BY STRT_DATE 


-- 2019.11.10
tb_isaplrqi / tb_isaplicd 테이블 -> 업무구분코드(RQST_BSNS_DVCD) 'LM', 1. 개시나이, 2. 신청년수, 3. 감액비율
DATA_ITEM_1 DATA_ITEM_2 DATA_ITEM_3
RQST_DATE
PAYM_GRAC_STYM
PAYM_GRAC_EDYM
PAYM_DUTY_STYM
PAYM_DUTY_EDYM

SELECT GOOD_CODE_DTAL, GOOD_CODE_ITEM
  FROM tb_mmnorspt
 WHERE spcl_type_dvcd = 'SPT_006'
MINUS
SELECT GOOD_CODE_DTAL, GOOD_CODE_ITEM
  FROM tb_mmnorspt
 WHERE spcl_type_dvcd = 'SPT_007'
;

SELECT good_code_dtal, good_code_item
  FROM tb_mmnormat
 WHERE INTR_DVCD = '2'
MINUS
SELECT good_code_dtal, good_code_item
  FROM tb_mmpayann
MINUS 
SELECT good_code_dtal, good_code_item
  FROM tb_mmpayanr
MINUS 
SELECT irkd_code_dtal, irkd_code_item
  FROM tb_mmnorsub
 WHERE annt_dvcd <> '0'
;

SELECT DISTINCT  A.GOOD_CODE_DTAL, A.GOOD_CODE_ITEM, B.GOOD_PERM_NAME, B.INTR_DVCD, A.SINT_STRT_DVSN||A.SINT_STRT_PRSN 
  FROM tb_isaplcjg A, TB_MMNORMAT B
 WHERE A.SINT_STRT_DVSN IS NOT NULL
   AND A.GOOD_CODE_DTAL = B.GOOD_CODE_DTAL
   AND A.GOOD_CODE_ITEM = B.GOOD_CODE_ITEM
   AND B.INTR_DVCD <> '2'
;   


SELECT DISTINCT good_code_dtal, good_code_item
  FROM tb_ccswpmap
 WHERE GOOD_CHNG_CACD = '119'
 --WHERE chaf_gdcd_dtal = '1477'
 ;
 SELECT *
   FROM tb_mmidxdvn
;

SELECT *
  FROM tb_isaplctt
 WHERE (irkd_code_dtal, irkd_code_item) IN 
       (select good_code_dtal, good_code_item 
	     from tb_mmnormat 
		where GOOD_PERM_NAME like '%전환용%' AND GOOD_PERM_NAME NOT like '%실손%');
  
		SELECT DISTINCT a.irkd_code_dtal, a.irkd_code_item, a.good_code_dtal, a.good_code_item, b.good_perm_name
		     , b.INTR_DVCD 보기개시구분
		  FROM tb_mmnorcon a, tb_mmnormat b
		 WHERE a.irkd_code_dtal IN ('1613','1840','1887','1685','1710','1224','1700')
		   AND a.good_code_dtal = b.good_code_dtal
		   AND a.good_code_item = b.good_code_item;

select * from tb_mmnormat where GOOD_PERM_NAME like '%가족사랑형%'
;
select * from tb_mmnormat where GOOD_PERM_NAME like '%전환%' AND GOOD_PERM_NAME NOT like '%전환용%'
;	
select * from tb_mmnormat where GOOD_PERM_NAME like '%스마트전환형%'	
;	
select * from tb_mmnormat where GOOD_PERM_NAME like '%적립형계약%' order by 1,2 --1781,1816 제외.	
;

SELECT DISTINCT good_code_dtal, good_code_item, 'Y' dvcd
  FROM tb_mmpayanr
 WHERE ANDV_DTAL_NAME like '%평생연금%'
;
SELECT DISTINCT good_code_dtal, good_code_item, 'Y' dvcd
		  FROM tb_ccswpmap
		 WHERE GOOD_CHNG_CACD = '119';
		 
SELECT *
  FROM tb_mmnoratr;
--1774	001	Y
--1774	004	Y
--1774	007	Y
--1774	008	Y
--1774	009	Y
--1774	010	Y
--1774	011	Y
--1774	012	Y
--1774	013	Y
--1774	014	Y
--1774	015	Y
--1774	016	Y
--1774	017	Y
--1774	018	Y
--1774	019	Y
--1774	020	Y
--1777	016	Y
--1777	017	Y
--1777	018	Y
--1777	019	Y
--1777	020	Y
--1777	021	Y
--1777	022	Y
--1777	023	Y
--1777	024	Y
--1777	025	Y
--1777	026	Y
--1777	027	Y
--1777	028	Y
--1777	029	Y
--1777	030	Y
--1777	031	Y
--1777	032	Y
--1777	033	Y

SELECT DISTINCT b.good_code_dtal, b.good_code_item
  FROM tb_isanninf a, tb_isaplcjg b
 WHERE a.scnd_anpy_stdt IS NOT NULL
   AND a.poly_no = b.poly_no
   AND a.JOIN_GOOD_NO = b.join_good_no
 ORDER BY b.good_code_dtal, b.good_code_item
;



select good_code_dtal, good_code_item, '전환' dvcd 
  from tb_mmnormat 
 where GOOD_PERM_NAME like '%개인연금전환%' 
   or GOOD_PERM_NAME like '%전환형%계약%'
   or GOOD_PERM_NAME like '%연금전환옵션%'
   or GOOD_PERM_NAME like '%전환특약%'
   or GOOD_PERM_NAME like '% 전환형 %'
   or GOOD_PERM_NAME like '%웰컴%'
   OR (GOOD_PERM_NAME like '%전환용%' AND GOOD_PERM_NAME NOT like '%실손%')
union
select good_code_dtal, good_code_item, '증액계약' dvcd
  from tb_mmnormat 
 where GOOD_PERM_NAME like '%증액%'
union
select good_code_dtal, good_code_item, '연장계약' dvcd
  from tb_mmnormat 
 where GOOD_PERM_NAME like '%연장%'
union
select good_code_dtal, good_code_item, '매증' dvcd
  from tb_mmnormat 
 where GOOD_PERM_NAME like '%매증%'
;

select b.* --good_code_dtal, good_code_item, '연장계약' dvcd
  from tb_mmnormat a, tb_mmnormat b
 where a.GOOD_PERM_NAME like '%연장%'
   AND a.good_code_dtal < '5000'
   AND b.GOOD_PERM_NAME NOT like '%연장%'
   AND a.good_code_dtal = b.good_code_dtal
   AND a.good_code_item <> b.good_code_item;

=====================================
적합성원칙처리
/********************************/
/* 단건 고객 처리 하기          */
/********************************/
select *
 from tb_csscm010
 where RSDN_RGST_NO = '5409261690718'


/****************************************/
/* 고객 적합성 판단 관리 데이터 만들기  */
/****************************************/
insert into tb_csscm200
select
 cust_id,                     --고객ID
 fp_no,                       --FP고유번호
 NVL((select max(HIST_NO)+1
        from tb_csscm200 t
       where t.CUST_ID   = cust_id
         and t.FNPL_PRNO = fp_no
     ),1),                    --hist_no 이력번호
 '2010176',                   --최종변경자사번
 sysdate,                     --최종변경일시
 'test',                      --프로그램ID
 'CJ77777777777777',          --이미지관리번호
 TO_CHAR(SYSDATE,'YYYYMMDD'), --신청일자
 'udusr001',                  --신청처리자사번
 '00029',                     --신청기관코드
 TO_CHAR(SYSDATE,'YYYYMMDD'), --승인일자
 '',                          --승인자사번
 '',                          --승인기관코드
 '99991231',                  --종료일자
 'Y'                          --조회승인여부
FROM (SELECT &p_cust_id cust_id, &p_fp_no fp_no FROM DUAL)


/****************************************/
/* 적합성진단결과 불원 데이터 만들기    */
/****************************************/
insert into tb_ncaplsrt
select
 s.CUST_ID --고객ID
,NVL((select max(QUST_RESL_SQNO)+1
        from tb_ncaplsrt t
       where t.CUST_ID   = s.CUST_ID)
     ,1)                      --설문결과일련번호
,'Orange'                     --최종변경자사번
,sysdate                      --최종변경일시
,'Orange'                     --프로그램ID
,fp_no                        --FP고유번호
,TO_CHAR(SYSDATE,'YYYYMMDD')  --최초입력일자
,'N'                          --적합성진단여부(Y:진단/N:불원)
,''                           --부적합확인유무
,''                           --변액적합도코드(01:적합/02:부적합)
,''                           --상품적합도코드(01:보장형,02:연금형,03:저축형,04연금&저축형)
,''                           --위험도분류코드(01:안정형,02:중립형,03:수익형)
,''                           --위험도점수
,''                           --이미지관리번호
,'NC'                         --업무구분코드(NC:신계약,BA:방카)
,''                           --방카설문관리번호
,''                           --증권번호
FROM (SELECT &p_cust_id cust_id, &p_fp_no fp_no FROM DUAL) s



--고객적합성판단관리 승인여부 변경
update tb_csscm200 a
   set a.rcnt_yn = NVL(&p_rcnt_yn,a.rcnt_yn) -- 승인여부
 where a.cust_id   = &p_cust_id
   and a.fnpl_prno = &p_fnpl_prno
   and a.end_date  >= to_char(sysdate, 'yyyymmdd')
   and a.hist_no   = (select /*+ index_desc(b tb_csscm200_pk) */
                             hist_no
                        from tb_csscm200 b
                       where b.cust_id   = a.cust_id
                         and b.fnpl_prno = a.fnpl_prno
                         and b.end_date  >= to_char(sysdate, 'yyyymmdd')
                     )
;

--적합성 진단결과 변경
update tb_ncaplsrt a
   set fnpl_prno      = NVL(&p_fnpl_prno     , fnpl_prno     )  -- FP고유번호
      ,frst_inpt_date = NVL(&p_frst_inpt_date, frst_inpt_date)  -- 최초입력일자
      ,stbl_natr_dgyn = NVL(&p_stbl_natr_dgyn, stbl_natr_dgyn)  -- 적합성진단여부
      ,incg_cnfm_yn   = NVL(&p_incg_cnfm_yn  , incg_cnfm_yn  )  -- 부적합확인유무
      ,vrbl_stdg_code = NVL(&p_vrbl_stdg_code, vrbl_stdg_code)  -- 변액적합도코드
      ,good_stdg_code = NVL(&p_good_stdg_code, good_stdg_code)  -- 상품적합도코드
      ,risk_dgre_clcd = NVL(&p_risk_dgre_clcd, risk_dgre_clcd)  -- 위험도분류코드
      ,risk_dgre_pnt  = NVL(&p_risk_dgre_pnt , risk_dgre_pnt )  -- 위험도점수
      ,imag_admn_no   = NVL(&p_imag_admn_no  , imag_admn_no  )  -- 이미지관리번호
      ,bsns_dvsn_code = NVL(&p_bsns_dvsn_code, bsns_dvsn_code)  -- 업무구분코드
 where a.cust_id        = &p_cust_id
   and a.qust_resl_sqno = (select MAX(b.qust_resl_sqno)
                             from tb_ncaplsrt b
                            where b.cust_id = a.cust_id
                              and b.fnpl_prno = &p_fnpl_prno)
;



--고객적합성판단관리 승인여부
select a.rcnt_yn
  from tb_csscm200 a
 where a.cust_id   = &p_cust_id
   and a.fnpl_prno = &p_fnpl_prno
   and a.end_date  >= to_char(sysdate, 'yyyymmdd')
   and a.hist_no   = (select /*+ index_desc(b tb_csscm200_pk) */
                             hist_no
                        from tb_csscm200 b
                       where b.cust_id   = a.cust_id
                         and b.fnpl_prno = a.fnpl_prno
                         and b.end_date  >= to_char(sysdate, 'yyyymmdd')
                     )


--적합성 진단결과
select
       fnpl_prno       -- FP고유번호
      ,frst_inpt_date  -- 최초입력일자
      ,stbl_natr_dgyn  -- 적합성진단여부
      ,incg_cnfm_yn    -- 부적합확인유무
      ,vrbl_stdg_code  -- 변액적합도코드
      ,good_stdg_code  -- 상품적합도코드
      ,risk_dgre_clcd  -- 위험도분류코드
      ,risk_dgre_pnt   -- 위험도점수
      ,imag_admn_no    -- 이미지관리번호
      ,bsns_dvsn_code  -- 업무구분코드
      ,(select good_clsf_code
          from tb_mmnorrst
         where bsns_clsf_code = 'NCAPL001'
           and irkd_code_dtal = &p_irkd_code_dtal) good_clsf_code -- 상품 유형 보기
  from tb_ncaplsrt a
 where a.cust_id        = &p_cust_id
   and a.qust_resl_sqno = (select MAX(b.qust_resl_sqno)
                             from tb_ncaplsrt b
                            where b.cust_id = a.cust_id)


-- 상품 유형 보기
select good_clsf_code
 from tb_mmnorrst
 where bsns_clsf_code = 'NCAPL001'
   and irkd_code_dtal = &p_irkd_code_dtal

=======================
적합성진단건 관련 조회
-- 적합성진단건 분석. 계약건수, 위험도분류, 불원건수
select count(1) 계약건수
     , sum(decode(c.risk_dgre_clcd,'01',1,0)) 안정형
     , sum(decode(c.risk_dgre_clcd,'02',1,0)) 중립형
     , sum(decode(c.risk_dgre_clcd,'03',1,0)) 수익형
     , sum(decode(c.stbl_natr_dgyn,'Y',0,1)) 불원
  from tb_isaplctt a, tb_ncaplci1 b, tb_ncaplsrt c
 where a.cntt_date between '20141101' and '20141115'
   and a.poly_no = b.poly_no
   and ((a.sale_chnl_code <> '5' and b.suit_imag_adno = c.imag_admn_no)
    or  (a.sale_chnl_code = '5' and a.poly_no = c.poly_no))
   and cntt_stat_code in ('1','2');


select decode(c.risk_dgre_clcd,'01','안정형','02','중립형','03','수익형','불원확인서') 진단결과
     , a.poly_no 증권번호
     , crm.cntt_age 계약자연령
     , decode((select vrbl_good_dvcd
          from tb_mmnoratr
         where good_code_dtal = a.irkd_code_dtal
           and good_code_item = a.irkd_code_item),'4','변액종신','5','변액유니버셜','3','연금','기타') 유형
     , (select inkd_notc_name
          from tb_mmnorsub
         where irkd_code_dtal = a.irkd_code_dtal
           and irkd_code_item = a.irkd_code_item) 가입상품명
     , f.fund_code 펀드코드
     , (select code_name from tb_uvcdm002 where code_id = 'FUND_CODE' and code_val = f.fund_code) 펀드코드명
     , f.join_rato 펀드투입비율
     , c.incg_cnfm_yn 부적합확인여부
  from tb_isaplctt a, tb_ncaplci1 b, tb_isaplcmr cmr, tb_isaplcrm crm, tb_ncaplsrt c, tb_iscjgadm f
 where a.cntt_date between '20141101' and '20141115'
   and a.poly_no = b.poly_no
   and ((a.sale_chnl_code <> '5' and b.suit_imag_adno = c.imag_admn_no)
    or  (a.sale_chnl_code = '5' and a.poly_no = c.poly_no))
   and cntt_stat_code in ('1','2')
   and a.poly_no = crm.poly_no
   and a.poly_no = cmr.poly_no
   and cmr.cust_role_code = '11'
   and cmr.del_yn = 'N'
   and cmr.end_date = '99991231'
   and cmr.cntt_prtr_no = crm.cntt_prtr_no
   and crm.del_yn = 'N'
   and crm.end_date = '99991231'
   and a.poly_no = f.poly_no
   and f.join_good_no = 1
   and f.acat_acct_dvsn = '1'
   and f.del_yn = 'N'
   and f.end_date = '99991231'
 order by a.poly_no, f.fund_code;
   
select *
  from tb_isaplcmr
 where poly_no = '168382547';
 
select *
  from tb_csscm010
 where cust_id = '2061272092';
 
 -- 변액종신 - VUL종신(4), 유니버셜 - VUL적립(5), 연금 - 연금(3), 기타 -CI(2)

====================
중도부가 보종별 가능건
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1609'
   and irkd_code_item between '053' and '064'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1609'
   and irkd_code_item between '065' and '068'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1610'
   and irkd_code_item between '023' and '030'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1613'
   and irkd_code_item between '025' and '028'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1626'
   and irkd_code_item between '049' and '064'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1626'
   and irkd_code_item between '065' and '068'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1627'
   and irkd_code_item between '025' and '028'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1666'
   and irkd_code_item between '001' and '020'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1675'
   and irkd_code_item between '001' and '012'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1676'
   and irkd_code_item between '001' and '008'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1681'
   and irkd_code_item between '001' and '004'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1684'
   and irkd_code_item between '001' and '008'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5 
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1686'
   and irkd_code_item between '001' and '004'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1686'
   and irkd_code_item between '009' and '010'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1668'
   and irkd_code_item between '025' and '030'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1728'
   and irkd_code_item between '001' and '002'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1727'
   and irkd_code_item between '001' and '002'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1688'
   and irkd_code_item between '001' and '004'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1688'
   and irkd_code_item between '041' and '056'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1692'
   and irkd_code_item between '001' and '004'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1692'
   and irkd_code_item between '021' and '036'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1710'
   and irkd_code_item between '001' and '018'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1710'
   and irkd_code_item between '019' and '034'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1713'
   and irkd_code_item between '001' and '018'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5
 UNION ALL
select IRKD_CODE_DTAL,IRKD_CODE_ITEM,i.POLY_NO,CNTT_STAT_CODE
  from tb_isaplctt i
      ,tb_iscompci c
 where irkd_code_dtal = '1698'
   and irkd_code_item between '001' and '006'
   and cntt_conc_ym >= '200901'
   and cntt_stat_code = '1'
   and not exists (select 'x' from tb_ncmwactt w where w.poly_no = i.poly_no and w.cntt_stat_code in ('1','7'))
   and i.poly_no = c.poly_no
   and c.LAST_PAYM_YM = TO_CHAR(SYSDATE,'YYYYMM')
   and rownum < 5



====================
증액계약조회
 select *
  from tb_isaplctt
 where (irkd_code_dtal, irkd_code_item) in 
(('1818',	'051'),
('1818',	'052'),
('1818',	'077'),
('1818',	'078'),
('1818',	'103'),
('1818',	'104'),
('1894',	'019'),
('1894',	'020'),
('1899',	'010'))

SELECT DISTINCT b.irkd_code_dtal, b.irkd_code_item, a.ICCO_INTR_DVSN, a.icco_insr_term
  FROM tb_isaplci2 a, tb_isaplctt b
 WHERE a.icco_insr_term > 0
   AND a.poly_no = b.poly_no
   AND b.cntt_stat_code NOT IN ('6','L')
   
< 증액보험기간 저장건 >
1818	001	X	70
=================================
직업코드변경작업(SR용)
-- 1. 직업코드 7개 종료처리
update tb_nccomhzd
   set last_chmn_mpno = '2080079'
      ,last_chng_dttm = sysdate
      ,pgm_id         = 'SR요청-직업코드종료'
      ,end_date       = '20121031'
 where occp_bsns_code in ('031004','110302','150132','150505','150704','150705','150707')
   and end_date = '99991231'
   and del_yn = 'N'

-- 2. 직업코드 생성
insert into tb_nccomhzd values ('1','030504','00','1','2080079',SYSDATE,'SR요청-직업코드생성','4','조경감독','20121101','99991231','N','093154','C','조경감독');

=====================================
청약서일괄발행개선_설문대상자
SELECT DECODE(GUBUN, 1, '24미만', '24이상') as 구분
,DECODE(ORGN_BUSS_TPDV, 'A2', '개인', 'A6', 'GFP', '대리점') as 채널구분
, L3_RANK, L3_code, L3_name
,L4_RANK, L4_code, L4_name
,L6_RANK, L6_code, L6_name
,lp_prno, lp_name
,CNT,RANK_CNT
FROM
(
SELECT L3_RANK, L3_code, L3_name
       ,L4_RANK, L4_code, L4_name
       ,L6_RANK, L6_code, L6_name
       ,ORGN_BUSS_TPDV
       ,lp_prno, lp_name
       ,GUBUN, CNT
       ,RANK() OVER (PARTITION BY L3_CODE ORDER BY CNT DESC) AS RANK_CNT
  FROM (
        select /*+ FULL(A) PARALLEL(A 6) INDEX(C tb_uvorgvw3_PK)*/
                C.L3_RANK, C.L3_code, C.L3_name
                ,C.L4_RANK, C.L4_code, C.L4_name
                ,C.L6_RANK, C.L6_code, C.L6_name
                ,C.ORGN_BUSS_TPDV
                ,B.lp_prno, B.lp_name, 
                CASE WHEN B.MMTH < 24 THEN 1 else 2 end as GUBUN
                ,count(*) as CNT 
          from tb_uvorgvw3 C, tb_smppe001 B, tb_maact019 A
         where C.STDD_YM = '201408'
           and C.ORGN_STAT_DVSN <> 'X'
           and C.ORGN_CODE = B.OFFC_CODE
           and B.CLOG_YM = '201408'
           and B.INCB_DVSN = 'P'
           and B.LP_PRNO = A.LP_PRNO
           and NVL(B.CROS_DVSN_CODE, ' ') != 'A'
           and A.PUBL_DATE between '20140101' and '20140631'
           and C.L3_code <> '01000'
         group by C.L3_RANK, C.L3_code, C.L3_name
                ,C.L4_RANK, C.L4_code, C.L4_name
                ,C.L6_RANK, C.L6_code, C.L6_name
                ,C.ORGN_BUSS_TPDV
                ,B.lp_prno, B.lp_name, B.MMTH
      )
)
WHERE RANK_CNT <= 200
  and cnt >= 1000;
===============================
판매보종-상품구성정보
SELECT DISTINCT
	   A.IRKD_CODE_DTAL,
       A.IRKD_CODE_ITEM,
       A.SALE_CHNL_CODE,
       DECODE(A.SALE_CHNL_CODE,'1','개인','2','법인','3','CM','4','TM','5','방카','6','KLD','대리점') SALE_CHNL_CODE,
       C.INKD_NOTC_NAME,
       C.INKD_BSNS_NAME,
       A.GOOD_CODE_DTAL,
       A.GOOD_CODE_ITEM,
       DECODE(A.IRKD_CODE_DTAL, A.GOOD_CODE_DTAL, '주계약', B.GOOD_BSNS_NAME) GOOD_BSNS_NAME
FROM TB_MMNORCON@dl_mm A, TB_MMNORMAT@dl_mm B, TB_MMNORSUB@dl_mm C
WHERE SALE_STRT_DATE = '20080401'
  AND A.IRKD_CODE_DTAL = C.IRKD_CODE_DTAL
  AND A.IRKD_CODE_ITEM = C.IRKD_CODE_ITEM
  AND A.GOOD_CODE_DTAL = B.GOOD_CODE_DTAL
  AND A.GOOD_CODE_ITEM = B.GOOD_CODE_ITEM
  AND A.IRKD_CODE_DTAL in ('1617','1626','1609','1573')
  ========================
  판매상품_보종 분석

-- 보종코드 속성 파악
SELECT *
  FROM tb_mmnorsub a, tb_mmnorsub b
 WHERE a.irkd_code_
 ;
 
-- 판매상품 속성 파악


-- 고객역할코드 확인
SELECT *
  FROM tb_isaplcmr
 WHERE cust_role_code = '12'
   AND ROWNUM < 10
 ; 
 
-- 제도특약
SELECT sys_spcd_code, b.code_name, a.irkd_code_dtal, a.irkd_code_item, sale_chnl_code, a.strt_date, a.end_date
  FROM tb_mmnorrid a, tb_uvcdm002 b
 WHERE a.SYS_SPCD_CODE = b.code_val
   AND b.code_id = 'SYS_SPCD_CODE'
 GROUP BY sys_spcd_code, b.code_name
;

SELECT code_val, code_name
  FROM tb_uvcdm002
 WHERE code_id = 'SPCL_TYPE_DVCD'
   AND end_date = '99991231';
   
SELECT *
  FROM tb_mmnorspt
;

SELECT IRKD_CODE_DTAL
     , COUNT(IRKD_CODE_ITEM) 목개수
     , COUNT(DISTINCT PSGR_DVSN_SLCD) 개인단체판매구분
     , COUNT(DISTINCT PSGR_DVSN_PRCD) 개인단체인가구분 
     , COUNT(DISTINCT DVDN_YN) 배당유무
     , COUNT(DISTINCT GRP_HNDL_YN) 단체취급여부
     , COUNT(DISTINCT TXFR_GOOD_YN) 비과세상품여부
     , COUNT(DISTINCT REVI_POSS_TERM) 부활가능기간
     , COUNT(DISTINCT TXPR_CONN_TPCD) 세금우대관련유형코드
     , COUNT(DISTINCT POLY_TYPE_CODE) 증권타입코드
     , COUNT(DISTINCT CMPN_CODE) 회사코드
     , COUNT(DISTINCT SVOF_GOOD_CODE) 감독원상품코드
     , COUNT(DISTINCT SSPL_PREM_STCD) 청약설계보험료기준코드
     , COUNT(DISTINCT EMBR_JOIN_YN) 태아가입여부
     , COUNT(DISTINCT ANNT_DVCD) 연금구분코드
     , COUNT(DISTINCT JCCA_SAMT_KIND) 가입건수산출기준액종류
     , COUNT(DISTINCT JCCA_UNIT_AMT) 가입건수산출단위금액
     , COUNT(DISTINCT ADPS_GOOD_CNT) 부가가능상품수
     , COUNT(DISTINCT FSC_GDCL_CODE) 금감위상품분류코드
     , COUNT(DISTINCT CRSA_GOOD_DVCD) 교차판매상품구분코드
  FROM TB_MMNORSUB
 GROUP BY IRKD_CODE_DTAL
;

-- 상품 테이블
SELECT a.good_code_dtal
     , a.good_code_item
	 , MIN(b.GOOD_PERM_NAME) 상품인가명
	 , MIN(b.PREM_YN) 보험료유무
	 , MIN(b.JOIN_STDD_CODE)  가입기준코드
	 , MIN(b.JOIN_METD_CODE)  가입방법코드
	 , MIN(b.STDD_JOIN_AMT) 기준가입금액
	 , MIN(b.CNIN_DVCD) 연생구분코드
	 , MIN(b.MIAG_GPAG_USYN) 주피연령군단연령사용여부
	 , MIN(b.RSFN_ACCU_DVSN) 준비금적립구분
	 , MIN(b.MINS_AGE_STDD) 주피연령기준
	 , MIN(b.SCND_AGE_STDD) 종피연령기준
	 , MIN(b.CHLD_AGE_STDD) 자녀연령기준
	 , MIN(b.PREM_APAG_STCD) 보험료적용연령기준코드
	 , MIN(b.PREF_GDCD_DTAL) P참조상품코드_세
	 , MIN(b.PREF_GDCD_ITEM) P참조상품코드_목
	 , MIN(b.VREF_GDCD_DTAL) V참조상품코드_세
	 , MIN(b.VREF_GDCD_ITEM) V참조상품코드_목
	 , MIN(b.FINT_LFTB_DVCD) 제1보기생명표구분코드
	 , MIN(b.SINT_LFTB_DVCD) 제2보기생명표구분코드
	 , MIN(b.TINT_LFTB_DVCD) 제3보기생명표구분코드
	 , MIN(b.PRVL_CALC_DVCD) 현가계산구분코드
	 , MIN(b.PRVL_CALC_DVC2) 현가계산구분코드2
	 , MIN(b.THSC_INSR_YN) 제3분야보험여부
	 , MIN(b.PMMI_GURT_YN) 실손보장여부
	 , MIN(b.DPAC_OBJT_CODE) 구분계리대상코드
	 , MIN(b.PMMI_CMPN_CGRT) 실손회사부담율
	 , MIN(b.FRPY_STRT_CNT) 자유납입개시횟수
	 , MIN(b.ANRM_INDU_CODE) 연금보험료소득공제코드
	 , MIN(b.INTR_DVCD) 보험기간구분코드
	 , MIN(b.PMMI_CPCR_PAY) 실손회사부담율_급여
	 , MIN(b.PMMI_CPCR_NPAY) 실손회사부담율_비급여
  FROM tb_mmnorcon a, tb_mmnormat b
 WHERE a.good_code_dtal = b.good_code_dtal
   AND a.good_code_item = b.good_code_item
   AND a.good_code_dtal IN   
		(SELECT good_code_dtal
		  FROM tb_mmnorcon
		 WHERE TO_CHAR(SYSDATE,'yyyymmdd') BETWEEN sale_strt_date AND sale_end_date)		 
--   AND (a.irkd_code_dtal IN ('1836','1613','1840','1887','1685','1710','1700','1202') OR
--        a.irkd_code_dtal = '1224' AND a.irkd_code_item >= '062')
   --AND a.sale_strt_date >= '20190101'
 GROUP BY a.good_code_dtal
     , a.good_code_item
 ORDER BY a.good_code_dtal
     , a.good_code_item
========================================
펀드별보종정보조회
-- 1. 펀드정보조회
	SELECT A.fund_code,
	       (SELECT x.code_name
	          FROM tb_uvcdm002 x
	         WHERE x.code_id = 'FUND_TYPE_DVCD'
	           AND x.code_val = A.fund_type_dvcd) fund_name
	  FROM tb_trfndfpl A
	 WHERE A.irkd_code_dtal = &p_irkd_code_dtal
	   AND A.irkd_code_item = &p_irkd_code_item

   
-- 2. 단일펀드, 복수펀드 구분
   -- 클라이언트에서 처리
   -- 단일펀드 : 콤보박스 처리
   -- 복수펀드 : 각 펀드별 투입비율 입력
   
-- 3. 펀드자동재배분
   -- 자동재배분주기 선택 콤보박스는 클라이언트에서 1612(변액유니버셜적립), 1275(변액연금)일 경우만 보이도록 처리
   -- 코드값 조회
     SELECT CODE_VAL, CODE_NAME
	   FROM TB_UVCDM002
	  WHERE CODE_ID='AUTO_REDV_CYCL'


   	 =========================
표준준비금구분코드_기준정보_원부 확인_20190618
-- 상품특이유형. 표준준비금구분 값이 있는 상품의 원부데이터 확인

SELECT B.POLY_NO
     , B.JOIN_GOOD_NO
	 , B.GOOD_CODE_DTAL
	 , B.GOOD_CODE_ITEM
	 , B.JNGD_HSNO, B.CNTT_DATE, b.STDD_RSFN_DVCD, A.SPCL_TYPE_DTDV, A.STRT_DATE, A.END_DATE
  FROM (
		SELECT GOOD_CODE_DTAL, GOOD_CODE_ITEM, STRT_DATE, END_DATE, SPCL_TYPE_DTDV
		  FROM TB_MMNORSPT
		 WHERE SPCL_TYPE_DVCD = 'SPT_SVCG' 
	   ) A,
	   TB_ISAPLCJG B
 WHERE A.GOOD_CODE_DTAL = B.GOOD_CODE_DTAL
   AND A.GOOD_CODE_ITEM = B.GOOD_CODE_ITEM
   AND B.CNTT_DATE BETWEEN A.STRT_DATE AND A.END_DATE
   AND B.STDD_RSFN_DVCD <> A.SPCL_TYPE_DTDV
   ;
   
   	 ================
피보험자조회
select distinct
                  case when b.good_code_dtal < '5000'  then '0'
                       else b.good_code_dtal||b.good_code_item end 상품,
                  b.irkd_code_dtal||b.irkd_code_item 보종,
                  b.sale_chnl_code  채널, b.join_insu_code 피보,
                  u.code_name 피보코드명, b.join_poss_sex  성별,
                  nvl(item_cd1,'*') c1, nvl(item_cd2,'*') c2,
                  nvl(item_cd3,'*') c3, nvl(item_cd4,'*') c4,
                  nvl(item_cd5,'*') c5,
                  nvl(item_cd1_min,0) a1, nvl(item_cd1_max,0) b1,
                  nvl(item_cd2_min,0) a2, nvl(item_cd2_max,0) b2,
                  nvl(item_cd3_min,0) a3, nvl(item_cd3_max,0) b3,
                  nvl(item_cd4_min,0) a4, nvl(item_cd4_max,0) b4,
                  nvl(item_cd5_min,0) a5, nvl(item_cd5_max,0) b5,
                  nvl(min_age,0) 나이1,   nvl(max_age,127) 나이2
             from tb_mmnorcon@dl_mm c, tb_mmentinp@dl_mm b, tb_uvcdm002 u,
                  tb_mmentagi@dl_mm i, tb_mmentage@dl_mm a
            where c.sale_strt_date <= '20070529' and '20070228' <= c.sale_end_date
              and c.irkd_code_dtal = b.irkd_code_dtal
              and c.irkd_code_item = b.irkd_code_item
              and c.sale_chnl_code = b.sale_chnl_code
              and c.good_code_dtal = b.good_code_dtal
              and c.good_code_item = b.good_code_item
              and       u.code_id  =  'JOIN_INSU_CODE'
              and       u.code_val = b.join_insu_code
              and b.irkd_code_dtal = i.irkd_code_dtal(+)
              and b.irkd_code_item = i.irkd_code_item(+)
              and b.sale_chnl_code = i.sale_chnl_code(+)
              and b.good_code_dtal = i.good_code_dtal(+)
              and b.good_code_item = i.good_code_item(+)
              and b.join_insu_code = i.join_insu_code(+)
              and b.irkd_code_dtal = a.irkd_code_dtal(+)
              and b.irkd_code_item = a.irkd_code_item(+)
              and b.sale_chnl_code = a.sale_chnl_code(+)
              and b.good_code_dtal = a.good_code_dtal(+)
              and b.good_code_item = a.good_code_item(+)
              and b.join_insu_code = a.join_insu_code(+)
         order by 상품,보종,채널,피보,a1,b1,a2,b2,a3,b3,a4,b4,a5,b5,나이1,나이2;
		 ============
20210422_계약레벨 보험료수금정보 오류건 공유		 
계약레벨 보험료수금정보 오류건 공유
2021-04-22 (목) 오후 1:43 / 홍정우



안녕하세요..
아래 계약레벨로 보험료수금정보 asis와 차이나는 건 확인 부탁드려요..
Tobe 최종기준일자와 asis 최종영수일자 차이가 나는 건입니다.. asis 날짜 ‘00000000’ 빼고 봐주심 될거 같아요..

SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       A.poly_no,
       A.last_pymt_period,
       B.last_paym_ym,
       A.last_number_of_pymts,
       B.last_paym_cnt,
       TO_CHAR(A.last_standard_on,'YYYYMMDD') AS last_standard_on,
       B.last_recp_date,
       TO_CHAR(A.last_processing_on,'YYYYMMDD') AS last_processing_on,
       B.last_recv_dldt,
       A.last_subst_pymt_period,
       B.last_sbst_pamn
FROM mig02.mig_tbl_vao_prem_coll_900 A,
     mig02.tb_iscompci B
WHERE 1 = 1
      AND A.product_type_code = '1'
      AND A.poly_no = B.poly_no(+)
      AND NVL(TO_CHAR(A.last_standard_on,'YYYYMMDD'),'NULL') != NVL(B.last_recp_date,'NULL')
;
=========================================
ASSI TB_ISRCVPRH 존재하는 입금취소건 마이그 추가 요청_20210420
ASSI TB_ISRCVPRH 존재하는 입금취소건 마이그 추가 요청
2021-04-20 (화) 오후 3:23 / 홍정우 

안녕하세요..
현재 premium payment 마이그 대상은 TB_ISRCVPRM, TB_CPRCVPRC 테이블로 하였으나, 
TB_ISRCVPRH에 추가로 마이그 해야 할 건이 있어서 요청 드립니다.

대상 건 산출 쿼리는 첨부파일로 보내 드립니다.
첨부파일에 건수는 현재 QA 기준입니다.
대상건은 입금취소(TB_CPRCVPRC) 마이그와 동일한 기준으로 처리 부탁드립니다.

TB_ISRCVPRH 전건을 마이그 하는 것이 아니라 검증 편의성을 위해 마이그 수행 시 해당 건은 마이그DB에 별도 테이블로 기록 부탁 드립니다.

궁금한 점 있으면 바로 문의해 주세요.
고맙습니다. 수고하세요.



WITH isrcvprh AS (SELECT poly_no,recv_dlng_sqno,recv_seq_no -- 38,789
                  FROM tb_isrcvprh
                  MINUS
                  SELECT poly_no,recv_dlng_sqno,recv_seq_no
                  FROM tb_cprcvprc),
     isrcvprm AS (SELECT /*+ USE_NL(A B) INDEX(A tb_isrcvprm_pk) */ -- 608
                         A.poly_no,A.recv_dlng_sqno,A.recv_seq_no
                  FROM tb_isrcvprm A,
                       isrcvprh B
                  WHERE 1 = 1
                        AND A.poly_no = B.poly_no
                        AND A.recv_dlng_sqno = B.recv_dlng_sqno
                        AND A.recv_seq_no = B.recv_seq_no)
SELECT * -- 38,181
FROM tb_isrcvprh A
WHERE 1 = 1
      AND (A.poly_no,A.recv_dlng_sqno,A.recv_seq_no) IN (SELECT poly_no,recv_dlng_sqno,recv_seq_no FROM isrcvprh)
      AND (A.poly_no,A.recv_dlng_sqno,A.recv_seq_no) NOT IN (SELECT poly_no,recv_dlng_sqno,recv_seq_no FROM isrcvprm)
      AND A.recv_hsno = (SELECT MAX(recv_hsno) FROM tb_isrcvprh WHERE (poly_no,recv_dlng_sqno,recv_seq_no) IN ((A.poly_no,A.recv_dlng_sqno,A.recv_seq_no)))
ORDER BY TO_NUMBER(A.poly_no),A.recv_dlng_sqno,A.recv_seq_no,A.recv_hsno
;

=================================
coverage level vao_prem_coll 3개월납 수금정보 최종납월오류 해소방안_20210504
3개월납 일부 계약 계약별 수금정보 최종납월오류(계약 최종납월 < 가입상품 최종납월) 해소 방안
2021-05-04 (화) 오후 4:43 / 홍정우

3개월납 일부 계약 계약별 수금정보 최종납월오류(계약 최종납월 < 가입상품 최종납월) 해소 방안3개월납 일부 계약 계약별 수금정보 최종납월오류(계약 최종납월 < 가입상품 최종납월) 해소 방안

ASIS 데이터변경 착오건으로 마이그로 계약별 수금정보 생성 후 수정하여 이행 필요
  - 511799637 외 10,185 건
  - 컨버젼 시 계약의 최종납월 '200806', 최종납회 '2' 변경
  - 대상건
    SELECT *
    FROM mig03.mig_tbl_vao_prem_coll_900 A
    WHERE 1 = 1
          AND A.product_type_code = '1'
          AND A.premium_payment_type_code = '2'
          AND A.group_collection_mgmt_number = '700999896701'
          AND A.collection_method_code = '02'
          AND A.policy_number LIKE '5________'
          AND A.last_pymt_period = '200804'
          AND A.last_number_of_pymts = 3
          AND A.last_standard_on = TO_DATE('20080418','YYYYMMDD')
          AND A.last_processing_on = TO_DATE('20080418','YYYYMMDD')
          AND A.last_subst_pymt_period IS NULL
    ;

이해 안되는 부분 있으면 바로 문의 주세요..
고맙습니다.
========================================
Coverage_Level_최종수금정보_검증쿼리_20210510
/*
※ 최종납월 검증
계약최종납월 > 가입상품최종납월 > 가입상품완납년월 : 오류(특약 가입상품 최종납월 > 완납년월)
계약최종납월 > 가입상품완납년월 > 가입상품최종납월 : 오류(계약 최종납월 완납년월 경과 가입상품 최종납월 부족)

가입상품최종납월 > 계약최종납월 > 가입상품완납년월 : 오류(계약 최종납월 < 가입상품 최종납월)
가입상품최종납월 > 가입상품완납년월 > 계약최종납월 : 오류(계약 최종납월 < 가입상품 최종납월)

가입상품완납년월 > 계약최종납월 > 가입상품최종납월 : 오류(계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월)
가입상품완납년월 > 가입상품최종납월 > 계약최종납월 : 오류(계약 최종납월 < 가입상품 최종납월)

계약최종납월 = 가입상품최종납월 > 가입상품완납년월 : 오류(특약 가입상품 최종납월 > 완납년월)
가입상품완납년월 > 계약최종납월 = 가입상품최종납월 : 정상

가입상품최종납월 = 가입상품완납년월 > 계약최종납월 : 오류(계약 최종납월 < 가입상품 최종납월)
계약최종납월 > 가입상품최종납월 = 가입상품완납년월 : 정상

계약최종납월 = 가입상품완납년월 > 가입상품최종납월 : 오류(계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월)
가입상품최종납월 > 계약최종납월 = 가입상품완납년월 : 오류(계약 최종납월 < 가입상품 최종납월)

계약최종납월 = 가입상품최종납월 = 가입상품완납년월 : 정상


※ 최종납회 검증
(중도부가가입상품이면 최종납회 재계산 - 계약년월과 최종납월로 계산, 갱신은 계약일자-갱신경과년수로 사용)
(보험료납입제도 적용 상품이면 최종납회 재계산 - 납회 증가하지 않는 횟수 사용)
계약최종납회 > 가입상품최종납회
  → 가입상품최종납월 > 가입상품완납년월 : 오류(최종납월오류)
  → 가입상품최종납월 = 가입상품완납년월 : 정상
  → 가입상품최종납월 < 가입상품완납년월 : 오류(가입상품 최종납월 부족)
계약최종납회 = 가입상품최종납회 : 정상
계약최종납회 < 가입상품최종납회 : 오류(계약최종납회 < 가입상품최종납회)


※ 최종기준일자 검증
계약최종기준일자 > 가입상품최종기준일자 : 오류(계약최종기준일자 > 가입상품최종기준일자)
계약최종기준일자 = 가입상품최종기준일자 : 정상
계약최종기준일자 < 가입상품최종기준일자 : 오류(계약최종기준일자 < 가입상품최종기준일자)


※ 최종처리일자 검증
계약최종처리일자 > 가입상품최종처리일자 : 오류(계약최종처리일자 > 가입상품최종처리일자)
계약최종처리일자 = 가입상품최종처리일자 : 정상
계약최종처리일자 < 가입상품최종처리일자 : 오류(계약최종처리일자 < 가입상품최종처리일자)


※ 최종대체납월 검증
최종납월과 동일

*/
DROP TABLE tbl_hjw_vao_prem_coll_p_c_001;

CREATE TABLE tbl_hjw_vao_prem_coll_p_c_001 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8)
           FULL(D) PARALLEL(D 8)
           FULL(E) PARALLEL(E 8)
           FULL(F) PARALLEL(F 8)
           FULL(G) PARALLEL(G 8) */
       A.policy_number,
       A.agreement_number AS p_agreement_number,
       A.last_pymt_period AS p_last_pymt_period,
       A.last_number_of_pymts AS p_last_number_of_pymts,
       TO_CHAR(A.last_standard_on,'YYYYMMDD') AS p_last_standard_on,
       TO_CHAR(A.last_processing_on,'YYYYMMDD') AS p_last_processing_on,
       NVL(A.last_subst_pymt_period,'000000') AS p_last_subst_pymt_period,
       B.agreement_number AS c_agreement_number,
       B.last_pymt_period AS c_last_pymt_period,
       B.last_number_of_pymts AS c_last_number_of_pymts,
       TO_CHAR(B.last_standard_on,'YYYYMMDD') AS c_last_standard_on,
       TO_CHAR(B.last_processing_on,'YYYYMMDD') AS c_last_processing_on,
       NVL(B.last_subst_pymt_period,'000000') AS c_last_subst_pymt_period,
       C.poly_no,
       C.join_good_no,
       C.jngd_hsno,
       F.vrbl_good_yn,
       F.prem_frpy_psyn,
       DECODE(D.good_code_dtal,'1611','Y','N') AS magc_yn,
       D.good_code_dtal||'-'||D.good_code_item AS main_good_code,
       C.good_code_dtal||'-'||C.good_code_item AS join_good_code,
       D.cntt_stat_code AS main_cts_code,
       C.good_reln_code,
       C.cntt_stat_code,
       C.real_paym_term,
       E.cntt_paym_cycd,
       C.paym_cycl_code,
       C.cntt_date,
       SUBSTR(C.cntt_date,1,6) AS cntt_ym,
       E.cntt_conc_ym,
       C.prem_cpay_reym,
       C.expr_date,
       C.extn_date,
       NVL(C.jngd_updt_eyct,0) AS jngd_updt_eyct,
       NVL(G.cpay_add_mcnt,0) AS cpay_add_mcnt,
       NVL(C.jngd_dlng_dvcd,'0') AS jngd_dlng_dvcd,
       TO_CHAR(ADD_MONTHS(TO_DATE(C.cntt_date,'YYYYMMDD'),-1*NVL(C.jngd_updt_eyct,0)*12),'YYYYMM') AS calc_cntt_ym,
       CASE WHEN C.paym_cycl_code = 0
            THEN 1
            ELSE (MONTHS_BETWEEN(TO_DATE(B.last_pymt_period,'YYYYMM'),TO_DATE(SUBSTR(C.cntt_date,1,6),'YYYYMM'))+1+NVL(C.jngd_updt_eyct,0)*12)/TO_NUMBER(C.paym_cycl_code)
       END AS calc_last_paym_cnt,
       CASE WHEN C.paym_cycl_code = 0
            THEN SUBSTR(C.cntt_date,1,6)
            ELSE TO_CHAR(ADD_MONTHS(TO_DATE(C.cntt_date,'YYYYMMDD'),C.real_paym_term*12+NVL(G.cpay_add_mcnt,0) -1),'YYYYMM')
       END AS calc_prem_cpay_reym
FROM mig03.mig_tbl_vao_prem_coll_900 A,
     mig03.mig_tbl_vao_prem_coll_900 B,
     mig02.tb_isaplcjg C,
     mig02.tb_isaplcjg D,
     mig02.tb_isaplctt E,
     mig02.tb_mmnoratr F,
     (SELECT A.poly_no,
             A.join_good_no,
             SUM(A.pysy_rqst_mcnt) AS cpay_add_mcnt
      FROM mig02.tb_isprmpys A
      WHERE 1 = 1
            AND A.prpy_sys_dvcd IN ('1','2','3','5','8')
            AND CASE WHEN A.prpy_sys_dvcd = '3'
                          AND A.prpy_sys_endt = '99991231'
                     THEN 0
                     ELSE 1
                END = 1
            AND A.del_yn = 'N'
      GROUP BY A.poly_no,
               A.join_good_no) G
WHERE 1 = 1
      AND A.product_type_code = '1'
      AND A.policy_number = B.policy_number
      AND B.product_type_code = '2'
      AND B.poly_no = C.poly_no
      AND SUBSTR(B.agreement_number,-3) = C.join_good_no
      AND C.end_date = '99991231'
      AND C.del_yn = 'N'
      AND A.poly_no = D.poly_no
      AND D.join_good_no = 1
      AND D.end_date = '99991231'
      AND D.del_yn = 'N'
      AND A.poly_no = E.poly_no
      AND D.good_code_dtal = F.good_code_dtal
      AND D.good_code_item = F.good_code_item
      AND C.poly_no = G.poly_no(+)
      AND C.join_good_no = G.join_good_no(+)
ORDER BY C.poly_no,
         C.join_good_no,
         C.jngd_hsno
;

DROP TABLE tbl_hjw_vao_prem_coll_p_c_002;

CREATE TABLE tbl_hjw_vao_prem_coll_p_c_002 AS
SELECT /*+ FULL(A) PARALLEL(A 8) */
       A.*,
       CASE WHEN p_last_pymt_period > c_last_pymt_period
                 AND c_last_pymt_period > prem_cpay_reym
            THEN '특약 가입상품 최종납월 > 완납년월'
            WHEN p_last_pymt_period > prem_cpay_reym
                 AND prem_cpay_reym > c_last_pymt_period
            THEN '계약 최종납월 완납년월 경과 가입상품 최종납월 부족'
            WHEN c_last_pymt_period > p_last_pymt_period
                 AND p_last_pymt_period > prem_cpay_reym
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN c_last_pymt_period > prem_cpay_reym
                 AND prem_cpay_reym > p_last_pymt_period
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN prem_cpay_reym > p_last_pymt_period
                 AND p_last_pymt_period > c_last_pymt_period
            THEN '계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월'
            WHEN prem_cpay_reym > c_last_pymt_period
                 AND c_last_pymt_period > p_last_pymt_period
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN p_last_pymt_period = c_last_pymt_period
                 AND c_last_pymt_period > prem_cpay_reym
            THEN '특약 가입상품 최종납월 > 완납년월'
            WHEN prem_cpay_reym > p_last_pymt_period
                 AND p_last_pymt_period = c_last_pymt_period
            THEN '정상'
            WHEN c_last_pymt_period = prem_cpay_reym
                 AND prem_cpay_reym > p_last_pymt_period
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN p_last_pymt_period > c_last_pymt_period
                 AND c_last_pymt_period = prem_cpay_reym
            THEN '정상'
            WHEN p_last_pymt_period = prem_cpay_reym
                 AND prem_cpay_reym > c_last_pymt_period
            THEN '계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월'
            WHEN c_last_pymt_period > p_last_pymt_period
                 AND p_last_pymt_period = prem_cpay_reym
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN p_last_pymt_period = c_last_pymt_period
                 AND c_last_pymt_period = prem_cpay_reym
            THEN '정상'
            ELSE ''
       END AS err_last_paym_ym,
       CASE WHEN p_last_number_of_pymts > c_last_number_of_pymts
            THEN CASE WHEN c_last_pymt_period > prem_cpay_reym
                      THEN '최종납월오류'
                      WHEN c_last_pymt_period = prem_cpay_reym
                      THEN '정상'
                      WHEN c_last_pymt_period < prem_cpay_reym
                      THEN '가입상품 최종납월 부족'
                      ELSE ''
                 END
            WHEN p_last_number_of_pymts = c_last_number_of_pymts
            THEN '정상'
            WHEN p_last_number_of_pymts < c_last_number_of_pymts
            THEN '계약최종납회 < 가입상품최종납회'
            ELSE ''
       END AS err_last_paym_cnt,
       CASE WHEN p_last_standard_on > c_last_standard_on
            THEN CASE WHEN p_last_pymt_period > c_last_pymt_period
                      THEN '정상'
                      WHEN p_last_pymt_period = c_last_pymt_period
                      THEN '계약최종기준일자 > 가입상품최종기준일자'
                      WHEN p_last_pymt_period < c_last_pymt_period
                      THEN '계약최종기준일자 > 가입상품최종기준일자'
                      ELSE ''
                 END
            WHEN p_last_standard_on = c_last_standard_on
            THEN '정상'
            WHEN p_last_standard_on < c_last_standard_on
            THEN '계약최종기준일자 < 가입상품최종기준일자'
            ELSE ''
       END AS err_last_stdd_date,
       CASE WHEN p_last_processing_on > c_last_processing_on
            THEN CASE WHEN p_last_pymt_period > c_last_pymt_period
                      THEN '정상'
                      WHEN p_last_pymt_period = c_last_pymt_period
                      THEN '계약최종처리일자 > 가입상품최종처리일자'
                      WHEN p_last_pymt_period < c_last_pymt_period
                      THEN '계약최종처리일자 > 가입상품최종처리일자'
                      ELSE ''
                 END
            WHEN p_last_processing_on = c_last_processing_on
            THEN '정상'
            WHEN p_last_processing_on < c_last_processing_on
            THEN '계약최종처리일자 < 가입상품최종처리일자'
            ELSE ''
       END AS err_last_dlng_date,
       CASE WHEN p_last_subst_pymt_period = '000000'
                 AND c_last_subst_pymt_period = '000000'
            THEN '정상'
            WHEN p_last_subst_pymt_period = '000000'
                 AND c_last_subst_pymt_period != '000000'
            THEN '가입상품 최종대체납월 대상 아님'
            WHEN p_last_subst_pymt_period != '000000'
                 AND c_last_subst_pymt_period = '000000'
            THEN CASE WHEN good_reln_code = '1' OR SUBSTR(join_good_code,1,4) IN ('5625','5834')
                      THEN '가입상품 최종대체납월 누락'
                      ELSE '정상'
                 END
            WHEN p_last_subst_pymt_period > c_last_subst_pymt_period
                 AND c_last_subst_pymt_period > prem_cpay_reym
            THEN '특약 가입상품 최종대체납월 > 완납년월'
            WHEN p_last_subst_pymt_period > prem_cpay_reym
                 AND prem_cpay_reym > c_last_subst_pymt_period
            THEN '계약 최종대체납월 완납년월 경과 가입상품 최종대체납월 부족'
            WHEN c_last_subst_pymt_period > p_last_subst_pymt_period
                 AND p_last_subst_pymt_period > prem_cpay_reym
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN c_last_subst_pymt_period > prem_cpay_reym
                 AND prem_cpay_reym > p_last_subst_pymt_period
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN prem_cpay_reym > p_last_subst_pymt_period
                 AND p_last_subst_pymt_period > c_last_subst_pymt_period
            THEN '계약 최종대체납월 완납년월 미경과 계약 최종대체납월 > 가입상품 최종대체납월'
            WHEN prem_cpay_reym > c_last_subst_pymt_period
                 AND c_last_subst_pymt_period > p_last_subst_pymt_period
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN p_last_subst_pymt_period = c_last_subst_pymt_period
                 AND c_last_subst_pymt_period > prem_cpay_reym
            THEN '특약 가입상품 최종대체납월 > 완납년월'
            WHEN prem_cpay_reym > p_last_subst_pymt_period
                 AND p_last_subst_pymt_period = c_last_subst_pymt_period
            THEN '정상'
            WHEN c_last_subst_pymt_period = prem_cpay_reym
                 AND prem_cpay_reym > p_last_subst_pymt_period
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN p_last_subst_pymt_period > c_last_subst_pymt_period
                 AND c_last_subst_pymt_period = prem_cpay_reym
            THEN '정상'
            WHEN p_last_subst_pymt_period = prem_cpay_reym
                 AND prem_cpay_reym > c_last_subst_pymt_period
            THEN '계약 최종대체납월 완납년월 미경과 계약 최종대체납월 > 가입상품 최종대체납월'
            WHEN c_last_subst_pymt_period > p_last_subst_pymt_period
                 AND p_last_subst_pymt_period = prem_cpay_reym
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN p_last_subst_pymt_period = c_last_subst_pymt_period
                 AND c_last_subst_pymt_period = prem_cpay_reym
            THEN '정상'
            ELSE ''
       END AS err_last_sbst_ym
FROM migusr.tbl_hjw_vao_prem_coll_p_c_001 A
WHERE 1 = 1
ORDER BY A.poly_no,
         A.join_good_no,
         A.jngd_hsno
;

/*
년납 계약 중 소급계약 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약 중 계약성립일자로 계산한 최종납입년월이 맞으면 최종납입년월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code != '0'
      AND A.magc_yn = 'N'
      AND A.prem_frpy_psyn = 'N'
      AND A.cntt_conc_ym > A.calc_cntt_ym
      AND A.paym_cycl_code = '12'
      AND A.err_last_paym_ym IN ('특약 가입상품 최종납월 > 완납년월')
      AND A.c_last_pymt_period > A.prem_cpay_reym
      AND TO_CHAR(ADD_MONTHS(TO_DATE(A.cntt_conc_ym,'YYYYMM'),12*p_last_number_of_pymts-1),'YYYYMM') = A.c_last_pymt_period
;

/*
월납 계약 중 소급계약 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약 중 최종납회가 정상이면 최종납입년월, 최종대체납월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상',
    A.err_last_sbst_ym = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code = '1'
      AND A.magc_yn = 'N'
      AND A.prem_frpy_psyn = 'Y'
      AND A.good_reln_code = '1'
      AND A.err_last_paym_ym IN ('특약 가입상품 최종납월 > 완납년월')
      AND A.err_last_paym_cnt = '정상'
      AND A.c_last_pymt_period > A.prem_cpay_reym
;

/*
일시납 계약 중 자유납입 계약이고 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약의 주계약 중 최종납회가 정상이고 최종대체납월이 '가입상품 최종대체납월 대상 아님'이 아니면 최종납입년월, 최종대체납월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상',
    A.err_last_sbst_ym = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code = '0'
      AND A.magc_yn = 'N'
      AND A.prem_frpy_psyn = 'Y'
      AND A.good_reln_code = '1'
      AND A.err_last_paym_ym IN ('특약 가입상품 최종납월 > 완납년월')
      AND A.err_last_paym_cnt = '정상'
      AND A.err_last_sbst_ym != '가입상품 최종대체납월 대상 아님'
      AND A.c_last_pymt_period > A.prem_cpay_reym
;

/*
일시납 계약 중 자유납입이 아닌 계약이고 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약의 주계약 중 최종납월이 '999912'이면 최종납입년월, 최종대체납월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상',
    A.err_last_sbst_ym = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code = '0'
      AND A.magc_yn = 'N'
      AND A.prem_frpy_psyn = 'N'
      AND A.p_last_pymt_period = '999912'
      AND A.err_last_paym_ym = '특약 가입상품 최종납월 > 완납년월'
;

/*
비일시납 계약 중 자유납입이 아닌 계약이고 가입상품이 일시납이고 가입상품의 최종납입년월이 999912이고 최종납입년월 '계약 최종납월 < 가입상품 최종납월'인 가입상품은 최종납입년월, 최종납회, 최종대체납월 정상, 최종기준일자와 최종처리일자는 일부 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상',
    A.err_last_paym_cnt = '정상',
    A.err_last_stdd_date = DECODE(A.err_last_stdd_date,'계약최종기준일자 > 가입상품최종기준일자','정상',A.err_last_stdd_date),
    A.err_last_dlng_date = DECODE(A.err_last_dlng_date,'계약최종처리일자 > 가입상품최종처리일자','정상',A.err_last_dlng_date),
    A.err_last_sbst_ym = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code = '0'
      AND A.cntt_paym_cycd >= '1'
      AND A.magc_yn = 'N'
      AND A.prem_frpy_psyn = 'N'
      AND A.p_last_pymt_period != '999912'
      AND A.c_last_pymt_period = '999912'
      AND A.err_last_paym_ym = '계약 최종납월 < 가입상품 최종납월'
;

/*
비일시납 계약 중 최종납입년월 '계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월'인 계약 중 가입상품 계약상태가 감소이면 최종납입년월, 최종납회, 최종기준일자, 최종처리일자 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상',
    A.err_last_paym_cnt = '정상',
    A.err_last_stdd_date = '정상',
    A.err_last_dlng_date = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code != '0'
      AND A.err_last_paym_ym IN ('계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월')
      AND A.err_last_paym_cnt IS NOT NULL 
      AND A.cntt_stat_code NOT IN ('1','2','3','4','9')
;

/*
비일시납 계약 중 최종납입년월 '계약 최종납월 완납년월 경과 가입상품 최종납월 부족', 최종납회 '가입상품 최종납월 부족'인 계약 중 가입상품 계약상태가 감소이면 최종납입년월, 최종납회 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상',
    A.err_last_paym_cnt = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code != '0'
      AND A.err_last_paym_ym = '계약 최종납월 완납년월 경과 가입상품 최종납월 부족'
      AND A.err_last_paym_cnt = '가입상품 최종납월 부족'
      AND A.cntt_stat_code NOT IN ('1','2','3','4','9')
;

/*
일시납 계약 중 가입상품이 비일시납 계약이고 최종납입년월과 최종납회가 정상이 아닌 가입상품 계약상태가 감소이면 최종납입년월, 최종납회 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_paym_ym = '정상',
    A.err_last_paym_cnt = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code != '0'
      AND A.cntt_paym_cycd = '0'
      AND A.magc_yn = 'N'
      AND A.prem_frpy_psyn = 'N'
      AND A.cntt_stat_code NOT IN ('1','2','3','4','9')
      AND (A.err_last_paym_ym,A.err_last_paym_cnt) NOT IN (('정상','정상'))
;

/*
매직어카운트 최종대체납월은 전부 정상임
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_sbst_ym = '정상'
WHERE 1 = 1
      AND A.paym_cycl_code = '1'
      AND A.magc_yn = 'Y'
      AND A.prem_frpy_psyn = 'N'
	  AND A.err_last_sbst_ym != '정상'
;

/*
최종대체납월을 사용하는 경우 주계약 가입상품의 최종대체납월은 완납년월을 경과할 수 있으므로 정상임
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ migusr.tbl_hjw_vao_prem_coll_p_c_002 A
SET A.err_last_sbst_ym = '정상'
WHERE 1 = 1
      AND A.join_good_no = 1
      AND A.err_last_sbst_ym = '특약 가입상품 최종대체납월 > 완납년월'
;

COMMIT;



/*
집계조회
*/
SELECT /*+ FULL(A) PARALLEL(A 8) */
       A.paym_cycl_code AS "납입주기",
       A.prem_frpy_psyn AS "UL",
       A.magc_yn AS "매직",
       COUNT(*) AS "전체",
       SUM(CASE WHEN A.err_last_paym_ym = '정상'
                     AND A.err_last_paym_cnt = '정상'
                     AND A.err_last_stdd_date = '정상'
                     AND A.err_last_dlng_date = '정상'
                     AND A.err_last_sbst_ym = '정상'
                THEN 1
                ELSE 0
           END) AS "정상",
       SUM(CASE WHEN A.err_last_paym_ym = '정상'
                     AND A.err_last_paym_cnt = '정상'
                     AND A.err_last_stdd_date = '정상'
                     AND A.err_last_dlng_date = '정상'
                     AND A.err_last_sbst_ym = '정상'
                THEN 0
                ELSE 1
           END) AS "오류",
       SUM(CASE WHEN A.err_last_paym_ym != '정상'
                THEN 1
                ELSE 0
           END) AS "최종납월오류",
       SUM(CASE WHEN A.err_last_paym_cnt != '정상'
                THEN 1
                ELSE 0
           END) AS "최종납회오류",
       SUM(CASE WHEN A.err_last_stdd_date != '정상'
                THEN 1
                ELSE 0
           END) AS "최종기준일자오류",
       SUM(CASE WHEN A.err_last_dlng_date != '정상'
                THEN 1
                ELSE 0
           END) AS "최종처리일자오류",
       SUM(CASE WHEN A.err_last_sbst_ym != '정상'
                THEN 1
                ELSE 0
           END) AS "최종대체납월오류"
FROM migusr.tbl_hjw_vao_prem_coll_p_c_002 A
WHERE 1 = 1
GROUP BY A.paym_cycl_code,A.prem_frpy_psyn,A.magc_yn
ORDER BY TO_NUMBER(A.paym_cycl_code),A.prem_frpy_psyn,A.magc_yn
;


=======================
payment_comp와 payment_comp_element 비교하는 쿼리
payment_comp와 payment_comp_element 비교하는 쿼리
2021-04-20 (화) 오전 11:20 홍정우

아래 payment_comp와 payment_comp_element 비교하는 쿼리 속도가 안나는데…
자료 뽑을 수 있는 방안 있는지 확인 줌 부탁드려요..

SELECT /*+ FULL(A) PARALLEL(A 8) */
       A.itrt_lntp_yn,
       '('||A.premium_kind_type_code||') '||
       DECODE(A.premium_kind_type_code,'11','일반 기본보험료',
                                       '12','자유납입 기본보험료',
                                       '13','계약이전 일시납',
                                       '14','부분일시납입 기본보험료',
                                       '15','납입유예 납면 일시금보험료',
                                       '16','전환적립금',
                                       '17','부분납입유예 기본보험료',
                                       '18','감액완납계약변경',
                                       '21','일반 추가보험료',
                                       '22','자유납입 추가보험료',
                                       '23','중도인출 추가보험료',
                                       '24','중도인출 자유납입 추가보험료',
                                       '31','일반 대체보험료',
                                       '32','퇴연 대체보험료',
                                       '41','중도부가특약 초회보험료',
                                       '42','주계약납면특약유지 기본보험료') AS "보험료종류",
       COUNT(DISTINCT A.prem_payment_id) AS "전체",
       SUM(DECODE(A.orig_prem+A.xtrc+A.incr-A.coll_dsct,A.coll_prem,1,0)) AS "수보적용할인정상",
       SUM(DECODE(A.orig_prem+A.xtrc+A.incr-A.coll_dsct,A.coll_prem,0,1)) AS "수보적용할인오류",
       ROUND(SUM(DECODE(A.orig_prem+A.xtrc+A.incr-A.coll_dsct,A.coll_prem,1,0))/COUNT(DISTINCT A.prem_payment_id)*100,3) AS "수보적용할인정상율",
       SUM(DECODE(A.coll_prem-A.rlrv_dsct,A.rlrv_prem,1,0)) AS "실입적용할인정상",
       SUM(DECODE(A.coll_prem-A.rlrv_dsct,A.rlrv_prem,0,1)) AS "실입적용할인오류",
       ROUND(SUM(DECODE(A.coll_prem-A.rlrv_dsct,A.rlrv_prem,1,0))/COUNT(DISTINCT A.prem_payment_id)*100,3) AS "실입적용할인정상율"
FROM (SELECT /*+ FULL(A) PARALLEL(A 8)
                 FULL(B) PARALLEL(B 8)
                 FULL(C) PARALLEL(C 8)
                 USE_HASH(A,B,C)
                 LEADING(A)
                 PQ_DISTRIBUTE(B,NONE,NONE)
                 PQ_DISTRIBUTE(C,NONE,NONE) */
             C.itrt_lntp_yn,
             A.id AS prem_payment_id,
             A.premium_kind_type_code,
             A.orig_premium_amount AS orig_prem,
             A.premium_amount AS coll_prem,
             A.amount AS rlrv_prem,
             SUM(DECODE(B.fin_element_type_code,'12001',B.base_amount,0)) AS xtrc,
             SUM(DECODE(B.fin_element_type_code,'13001',B.base_amount,0)) AS incr,
             SUM(CASE WHEN B.fin_element_type_code = '11001'
                           AND B.fin_element_type_kind_code IN ('02','16','22','26','28','29')
                      THEN B.base_amount
                      ELSE 0
                 END) AS coll_dsct,
             SUM(CASE WHEN B.fin_element_type_code = '11001'
                           AND B.fin_element_type_kind_code IN ('24','25','30')
                      THEN B.base_amount
                      ELSE 0
                 END) AS add_dsct,
             SUM(CASE WHEN B.fin_element_type_code = '11001'
                           AND B.fin_element_type_kind_code NOT IN ('02','16','22','26','28','29','24','25','30')
                      THEN B.base_amount
                      ELSE 0
                 END) AS rlrv_dsct
      FROM mig03.mig_tbl_prem_payment_comp_900 A,
           mig03.mig_tbl_prem_payment_comp_element_900 B,
           migusr.tbl_hjw_itrt_lntp_yn_001 C
      WHERE 1 = 1
            AND A.poly_no = B.poly_no(+)
            AND A.vald_dvsn_code = B.vald_dvsn_code(+)
            AND A.id = B.prem_payment_comp_id(+)
            AND A.policy_number = C.policy_number(+)
      GROUP BY C.itrt_lntp_yn,
               A.id,
               A.premium_kind_type_code,
               A.orig_premium_amount,
               A.premium_amount,
               A.amount) A
GROUP BY A.itrt_lntp_yn,A.premium_kind_type_code
ORDER BY A.itrt_lntp_yn,A.premium_kind_type_code
;
=================================
PremiumPayment 마이그 검증 내용 공유_20210317
2021-03-17 (수) 오전 9:21
PremiumPayment 마이그 검증 내용 공유 - 홍정우

003 : 기본조건에 주계약만을 포함하였을 때 금액이 일치하는 경우 (004 내용 일부 중복)
A. case01 - 보종코드_세 (tb_isaplctt 테이블의 irkd_code_dtal 값이 1611) ← "004"의 내용 일부 포함
        - 보종코드_세 가 1611인 경우 특이케이스임. Policy level에 대응하는 Coverage level은 주계약만 생성하도록 적용(특약 미생성).
        - 입금처리일자 당시 주계약의 계약상태 완납 또는 감소(ASIS 2,B,C / TOBE 계약상태 유지이면서 납입상태 완납, 계약상태 감소) 건은
          입금처리일자에 새로운 계약 이력이 생성 된 경우이므로 직전 계약 이력을 읽으면 됨
        - 입금처리일자 당시 주계약의 계약상태 실효(ASIS/TOBE 모두 계약상태 실효) 건은 과거 계약이력 생성 규칙이 상이함.
          Policy level의 계약상태도 실효로 판단 되므로 해당 가입상품을 그대로 사용하면 됨

SELECT B.poly_no,
       B.irkd_code_dtal,
       B.irkd_code_item,
       MIN(A.etc) AS min_etc,
       MAX(A.etc) AS max_etc,
       MIN(C.cntt_stat_code) AS min_cntt_stat_code,
       MAX(C.cntt_stat_code) AS max_cntt_stat_code
FROM mig02.err_tbl_prem_payment_comp_010@dl_pdna A,
     mig02.tb_isaplctt@dl_pdna B,
     mig02.tb_isaplcjg@dl_pdna C
WHERE 1=1
      AND A.etc IN ('003','004')
      AND A.poly_no = B.poly_no
      AND B.irkd_code_dtal = '1611'
      AND A.asis_2_pk_col1 = C.poly_no
      AND TO_NUMBER(A.asis_2_pk_col2) = C.join_good_no
      AND TO_NUMBER(A.asis_2_pk_col3) = C.jngd_hsno
GROUP BY B.poly_no,
         B.irkd_code_dtal,
         B.irkd_code_item
ORDER BY B.poly_no
;


005 : 기본조건에 주계약만을 포함, 원특약보험료를 더했을 때 금액이 일치하는 경우
A. case01 - 마이그 규칙 확인 필요
        - 확인 증권번호 148860992, 35110144
        - 가입상품 정상 존재, premiumPayment의 입금처리일자에 해당하는 가입상품 존재하는데 premiumPaymentComposition 생성 안됨

SELECT B.* -- 가입상품 존재(입금처리일자에도 존재함)
FROM hpacnt.tbl_top_level_agreement A,
     hpacnt.tbl_agreement B
WHERE A.policy_number IN ('148860992','35110144')
      AND A.ID = B.ID
             AND B.product_type_code = '2'
;

SELECT *
FROM hpafin.tbl_prem_payment
WHERE (agreement_number,number_of_payments) IN (('P148860992',1),('P035110144',68))
;

SELECT *
FROM hpafin.tbl_prem_payment_comp
WHERE prem_payment_id IN (100357834374,100935073087)
;


==============================
TBL_PREM_PAYMENT_ELEMENT_증액_생성방안_20210412
CREATE TABLE tbl_hjw_iprdtlhi0 TABLESPACE tsd_bac01 AS
SELECT /*+ FULL(A) PARALLEL(A 8) */
       A.poly_no,
       A.join_good_no,
       A.chng_hsno,
       RANK() OVER (PARTITION BY A.poly_no,A.join_good_no ORDER BY A.chng_hsno) AS seq_1,
       RANK() OVER (PARTITION BY A.poly_no,A.join_good_no ORDER BY A.chng_hsno)-1 AS seq_2,
       A.icco_prem,
       A.chaf_coll_prem-A.chbf_coll_prem AS icco_coll_prem,
       A.icco_prem_sum,
       A.rqst_date
FROM mig02.tb_isiprdtl@dl_pdna A
WHERE 1 = 1
      AND A.cncl_date IS NULL
      AND A.icco_prem != 0
;

CREATE TABLE tbl_hjw_iprdtlpol TABLESPACE tsd_bac01 AS
SELECT /*+ FULL(A) PARALLEL(A 8) */
       DISTINCT
       A.poly_no
FROM mig02.tbl_hjw_iprdtlhi0 A
;

CREATE TABLE tbl_hjw_iprdtlhis TABLESPACE tsd_bac01 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       A.poly_no,
       A.join_good_no,
       A.chng_hsno,
       A.icco_prem,
       A.icco_coll_prem,
       SUM(C.icco_prem) AS sum_icco_prem,
       SUM(C.icco_coll_prem) AS sum_icco_coll_prem,
       A.icco_prem_sum,
       A.rqst_date AS strt_date,
       NVL(TO_CHAR(TO_DATE(B.rqst_date,'YYYYMMDD')-1,'YYYYMMDD'),'99991231') AS end_date
FROM mig02.tbl_hjw_iprdtlhi0 A,
     mig02.tbl_hjw_iprdtlhi0 B,
     mig02.tbl_hjw_iprdtlhi0 C
WHERE 1 = 1
      AND A.poly_no = B.poly_no(+)
      AND A.join_good_no = B.join_good_no(+)
      AND A.seq_1 = B.seq_2(+)
      AND A.poly_no = C.poly_no
      AND A.join_good_no = C.join_good_no
      AND A.seq_1 >= C.seq_1
GROUP BY A.poly_no,
         A.join_good_no,
         A.chng_hsno,
         A.icco_prem,
         A.icco_coll_prem,
         A.icco_prem_sum,
         A.rqst_date,
         B.rqst_date
ORDER BY TO_NUMBER(A.poly_no),
         A.join_good_no,
         A.chng_hsno
;

CREATE TABLE tbl_hjw_iprdtlrcv TABLESPACE tsd_bac01 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       B.poly_no,
       B.recv_dlng_sqno,
       B.recv_seq_no,
       B.prem_kind_dvcd,
       B.rcwc_metd_dvsn,
       B.recv_dlng_date,
       B.sum_orig_prem,
       B.coll_prem,
       DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
       +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
       +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0) AS dsct_02,
       DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0) AS dsct_99,
       NVL(C.sum_icco_prem,0) AS sum_icco_prem,
       NVL(C.sum_icco_coll_prem,0) AS sum_icco_coll_prem_from_ipr,
       B.coll_prem-B.sum_orig_prem
       +DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
       +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
       +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0)
       +DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0) AS sum_icco_coll_prem_from_rcv,
       NVL(C.sum_icco_coll_prem,0)
       -(B.coll_prem-B.sum_orig_prem
         +DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
         +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
         +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0)
         +DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0)) AS diff_icco_ipr_minus_rcv
FROM mig02.tbl_hjw_iprdtlpol A,
     mig02.tb_isrcvprm@dl_pdna B,
     mig02.tbl_hjw_iprdtlhis C
WHERE 1 = 1
      AND A.poly_no = B.poly_no
      AND B.poly_no = C.poly_no(+)
      AND B.recv_dlng_date BETWEEN C.strt_date(+) AND C.end_date(+)
ORDER BY TO_NUMBER(A.poly_no),
         B.recv_dlng_sqno,
         B.recv_seq_no
;
======================================
TBL_PREM_PAYMENT_ELEMENT_증액_생성방안_20210413_최종
/*
[마이그 팀 제공용]
TBL_PREM_PAYMENT_ELEMENT 증액 생성 로직
*/
CREATE TABLE tbl_prem_element_ip1 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       DISTINCT
       A.poly_no,
       A.join_good_no,
       A.chng_hsno,
       DENSE_RANK() OVER (PARTITION BY A.poly_no,A.join_good_no ORDER BY A.chng_hsno) AS seq_1,
       DENSE_RANK() OVER (PARTITION BY A.poly_no,A.join_good_no ORDER BY A.chng_hsno)-1 AS seq_2,
       A.icco_prem,
       A.chaf_coll_prem-A.chbf_coll_prem AS icco_coll_prem,
       A.icco_prem_sum,
       A.rqst_date,
       DECODE(A.last_paym_ym,'000000','199607',A.last_paym_ym) AS last_paym_ym
FROM mig02.tb_isiprdtl A,
     mig02.tbl_top_level_agreement B
WHERE 1 = 1
      AND A.cncl_date IS NULL
      AND A.icco_prem != 0
      AND A.poly_no = B.policy_number
;

CREATE TABLE tbl_prem_element_ip2 AS
SELECT /*+ FULL(A) PARALLEL(A 8) */
       DISTINCT
       A.poly_no
FROM migusr.tbl_prem_element_ip1 A
;

CREATE TABLE tbl_prem_element_ip3 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       A.poly_no,
       A.join_good_no,
       A.chng_hsno,
       A.icco_prem,
       A.icco_coll_prem,
       SUM(C.icco_prem) AS sum_icco_prem,
       SUM(C.icco_coll_prem) AS sum_icco_coll_prem,
       A.icco_prem_sum,
       A.rqst_date AS strt_date,
       NVL(TO_CHAR(TO_DATE(B.rqst_date,'YYYYMMDD')-1,'YYYYMMDD'),'99991231') AS end_date,
       TO_CHAR(ADD_MONTHS(TO_DATE(A.last_paym_ym,'YYYYMM'),1),'YYYYMM') AS strt_paym_ym,
       NVL(B.last_paym_ym,'999912') AS end_paym_ym
FROM migusr.tbl_prem_element_ip1 A,
     migusr.tbl_prem_element_ip1 B,
     migusr.tbl_prem_element_ip1 C
WHERE 1 = 1
      AND A.poly_no = B.poly_no(+)
      AND A.join_good_no = B.join_good_no(+)
      AND A.seq_1 = B.seq_2(+)
      AND A.poly_no = C.poly_no
      AND A.join_good_no = C.join_good_no
      AND A.seq_1 >= C.seq_1
GROUP BY A.poly_no,
         A.join_good_no,
         A.chng_hsno,
         A.icco_prem,
         A.icco_coll_prem,
         A.icco_prem_sum,
         A.rqst_date,
         B.rqst_date,
         A.last_paym_ym,
         B.last_paym_ym
ORDER BY TO_NUMBER(A.poly_no),
         A.join_good_no,
         A.chng_hsno
;

CREATE TABLE tbl_prem_element_ip4 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       B.poly_no,
       B.recv_dlng_sqno,
       B.recv_seq_no,
       '2' AS payment_state_code,
       B.prem_kind_dvcd,
       B.rcwc_metd_dvsn,
       B.paym_ym,
       B.recv_dlng_date,
       B.sum_orig_prem,
       B.coll_prem,
       DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
       +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
       +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0) AS dsct_02,
       DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0) AS dsct_99,
       C.strt_date,
       C.end_date,
       C.strt_paym_ym,
       C.end_paym_ym,
       NVL(C.sum_icco_prem,0) AS sum_icco_prem,
       NVL(C.sum_icco_coll_prem,0) AS sum_icco_coll_prem_from_ipr,
       B.coll_prem-B.sum_orig_prem
       +DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
       +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
       +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0)
       +DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0) AS sum_icco_coll_prem_from_rcv,
       NVL(C.sum_icco_coll_prem,0)
       -(B.coll_prem-B.sum_orig_prem
         +DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
         +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
         +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0)
         +DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0)) AS diff_icco_ipr_minus_rcv
FROM migusr.tbl_prem_element_ip2 A,
     mig02.tb_isrcvprm B,
     migusr.tbl_prem_element_ip3 C
WHERE 1 = 1
      AND A.poly_no = B.poly_no
      AND B.prem_kind_dvcd = '11'
      AND B.rcwc_metd_dvsn NOT IN ('63','64')
      AND B.poly_no = C.poly_no(+)
      AND B.paym_ym BETWEEN C.strt_paym_ym(+) AND C.end_paym_ym(+)
UNION
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       B.poly_no,
       B.recv_dlng_sqno,
       B.recv_seq_no,
       '3' AS payment_state_code,
       B.prem_kind_dvcd,
       B.rcwc_metd_dvsn,
       B.paym_ym,
       B.recv_dlng_date,
       B.sum_orig_prem,
       B.coll_prem,
       DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
       +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
       +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0) AS dsct_02,
       DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0) AS dsct_99,
       C.strt_date,
       C.end_date,
       C.strt_paym_ym,
       C.end_paym_ym,
       NVL(C.sum_icco_prem,0) AS sum_icco_prem,
       NVL(C.sum_icco_coll_prem,0) AS sum_icco_coll_prem_from_ipr,
       B.coll_prem-B.sum_orig_prem
       +DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
       +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
       +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0)
       +DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0) AS sum_icco_coll_prem_from_rcv,
       NVL(C.sum_icco_coll_prem,0)
       -(B.coll_prem-B.sum_orig_prem
         +DECODE(B.prdc_kind_cd1,'02',B.dsct_prem_1,0)
         +DECODE(B.prdc_kind_cd2,'02',B.dsct_prem_2,0)
         +DECODE(B.prdc_kind_cd5,'02',B.dsct_prem_5,0)
         +DECODE(B.prdc_kind_cd1,'99',B.dsct_prem_5,0)) AS diff_icco_ipr_minus_rcv
FROM migusr.tbl_prem_element_ip2 A,
     mig02.tb_cprcvprc B,
     migusr.tbl_prem_element_ip3 C
WHERE 1 = 1
      AND A.poly_no = B.poly_no
      AND B.prem_kind_dvcd = '11'
      AND B.rcwc_metd_dvsn NOT IN ('63','64')
      AND B.poly_no = C.poly_no(+)
      AND B.paym_ym BETWEEN C.strt_paym_ym(+) AND C.end_paym_ym(+)
;

CREATE TABLE tbl_prem_element_ipr AS -- element로 생성
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       B.*,
       '13001' AS fin_element_type_code,
       A.sum_icco_coll_prem_from_ipr AS base_amount
FROM migusr.tbl_hjw_iprdtlrcv A,
     mig02.mig_tbl_prem_payment_900 B
WHERE 1 = 1
      AND A.sum_icco_prem != 0
      AND A.sum_icco_coll_prem_from_ipr != 0
      AND A.payment_state_code = '2'
      AND A.poly_no = B.asis_pk_col1
      AND A.recv_dlng_sqno = TO_NUMBER(B.asis_pk_col2)
      AND A.recv_seq_no = TO_NUMBER(B.asis_pk_col3)
UNION
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       B.*,
       '13001' AS fin_element_type_code,
       A.sum_icco_coll_prem_from_ipr AS base_amount
FROM migusr.tbl_hjw_iprdtlrcv A,
     mig02.mig_tbl_prem_payment_900 B
WHERE 1 = 1
      AND A.sum_icco_prem != 0
      AND A.sum_icco_coll_prem_from_ipr != 0
      AND A.payment_state_code = '3'
      AND A.poly_no = B.asis_pk_col2
      AND A.recv_dlng_sqno = TO_NUMBER(B.asis_pk_col3)
      AND A.recv_seq_no = TO_NUMBER(B.asis_pk_col4)
;

SELECT /*+ FULL(A) PARALLEL(A 8) */
       --COUNT(*) -- 5,049,340
       A.*
FROM tbl_prem_element_ipr A
;

==============================
가입상품별할인 대상 아닌 것_20210415
가입상품별할인 불필요 데이터 제외 요청
2021-04-16 (금) 오전 10:49

안녕하세요..

TBL_PREM_PAYMENT_COMP_ELEMENT 검증하다 ASIS의 TB_ISCJGPRD 테이블에 불필요한 데이터가 많이 있는 것으로 파악되었습니다.
해당 데이터가 마이그 후 TBL_MONEY_PROV_ELEMENT에 생성이 되었고,
이로 인해 TBL_PREM_PAYMENT_ELEMENT, TBL_PREM_PAYMENT_COMP_ELEMENT 테이블에 잘못된 값이 생성됩니다.

ASIS를 클린징 할 수는 없는 것으로 파악되어, 마이그 대상에서 미리 불필요한 데이터를 제외시키는 방법으로 해결해야 할 거 같습니다.
해당 건으로 TBL_MONEY_PROV_ELEMENT에서 생기지 않도록 하면 후속 오류 데이터도 발생하지 않으리라 판단됩니다.
제외 대상 건은 첨부파일(쿼리) “가입상품별할인 대상 아닌 것_20210415.sql“로 확인 부탁 드립니다.

궁금한 점 있으시면 문의 바로 주세요..

고맙습니다.


/*
무조건 삭제 대상
24	2706
26	1396
*/
SELECT /*+ FULL(A) PARALLEL(A 8) */
       A.prem_dsct_kdcd,COUNT(DISTINCT A.poly_no||A.join_good_no)
FROM mig02.tb_iscjgprd A
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('24','26')
	  AND A.del_yn = 'N'
GROUP BY A.prem_dsct_kdcd
;

/*
가입상품별할인 판단하여 아닌것 삭제
17	92
18	230382
*/
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       A.prem_dsct_kdcd,COUNT(DISTINCT A.poly_no||A.join_good_no)
FROM mig02.tb_iscjgprd A,
     mig02.tb_isaplcjg B
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('17')
	  AND A.del_yn = 'N'
	  AND A.poly_no = B.poly_no
	  AND A.join_good_no = B.join_good_no
	  AND B.del_yn = 'N'
	  AND (B.good_code_dtal,B.good_code_item) NOT IN (('5574','047'),('5574','049'),('5574','051'),('5574','053'),('5792','005'),('5809','002'))
GROUP BY A.prem_dsct_kdcd
UNION
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       A.prem_dsct_kdcd,COUNT(DISTINCT A.poly_no||A.join_good_no)
FROM mig02.tb_iscjgprd A,
     mig02.tb_isaplcjg B
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('18')
	  AND A.del_yn = 'N'
	  AND A.poly_no = B.poly_no
	  AND A.join_good_no = B.join_good_no
	  AND B.del_yn = 'N'
	  AND (B.good_code_dtal,B.good_code_item) NOT IN (('1887','001'),('1887','002'),('1887','003'),('1887','004'),('1887','005'),('1887','006'),('1887','007'),('1887','008'),('1887','009'),('1887','010'),('1887','011'),('1887','012'),('1887','013'),('1887','014'),('1887','015'),('1887','016'),('1887','017'),('1887','018'),('1887','019'),('1887','020'),('1887','021'),('1887','022'),('1887','023'),('1887','024'),('1887','025'),('1887','026'),('1887','027'),('1887','028'),('1887','029'),('1887','030'))
GROUP BY A.prem_dsct_kdcd
;

/*
하이브리드변액보험 아닌것 삭제
02	2272
16	4601
*/
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       A.prem_dsct_kdcd,COUNT(DISTINCT A.poly_no)
FROM mig02.tb_iscjgprd A,
     mig02.tb_isaplctt B
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('02','16')
	  AND A.del_yn = 'N'
	  AND A.poly_no = B.poly_no
	  AND B.irkd_code_dtal != '1840'
GROUP BY A.prem_dsct_kdcd
;


/*
마이그 제외 대상건
*/
SELECT /*+ FULL(A) PARALLEL(A 8) */
       DISTINCT
	   A.*
FROM mig02.tb_iscjgprd A
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('24','26')
	  AND A.del_yn = 'N'
UNION
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       DISTINCT
	   A.*
FROM mig02.tb_iscjgprd A,
     mig02.tb_isaplcjg B
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('17')
	  AND A.del_yn = 'N'
	  AND A.poly_no = B.poly_no
	  AND A.join_good_no = B.join_good_no
	  AND B.del_yn = 'N'
	  AND (B.good_code_dtal,B.good_code_item) NOT IN (('5574','047'),('5574','049'),('5574','051'),('5574','053'),('5792','005'),('5809','002'))
UNION
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       DISTINCT
	   A.*
FROM mig02.tb_iscjgprd A,
     mig02.tb_isaplcjg B
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('18')
	  AND A.del_yn = 'N'
	  AND A.poly_no = B.poly_no
	  AND A.join_good_no = B.join_good_no
	  AND B.del_yn = 'N'
	  AND (B.good_code_dtal,B.good_code_item) NOT IN (('1887','001'),('1887','002'),('1887','003'),('1887','004'),('1887','005'),('1887','006'),('1887','007'),('1887','008'),('1887','009'),('1887','010'),('1887','011'),('1887','012'),('1887','013'),('1887','014'),('1887','015'),('1887','016'),('1887','017'),('1887','018'),('1887','019'),('1887','020'),('1887','021'),('1887','022'),('1887','023'),('1887','024'),('1887','025'),('1887','026'),('1887','027'),('1887','028'),('1887','029'),('1887','030'))
UNION
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8) */
       DISTINCT
	   A.*
FROM mig02.tb_iscjgprd A,
     mig02.tb_isaplctt B
WHERE 1 = 1
      AND A.prem_dsct_kdcd IN ('02','16')
	  AND A.del_yn = 'N'
	  AND A.poly_no = B.poly_no
	  AND B.irkd_code_dtal != '1840'
;
============================
검증참고자료_계약별금리연동형상품여부산출_20210413
-- TBL_PREM_PAYMENT_COMP 생성시 금리연동형 구분 방법

CREATE TABLE tbl_hjw_itrt_lntp_yn_001 TABLESPACE tsd_bac01 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       A.policy_number,
       MAX(NVL2(C.prod_dtcd,'Y','N')) AS itrt_lntp_yn
FROM mig02.tbl_top_level_agreement@dl_pdna A,
     mig02.tb_isaplcjg@dl_pdna B,
     (SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod
      WHERE acvl_acit_mtho_code NOT IN ('00','01')
            AND prod_dtcd LIKE '1___'
      UNION
      SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod
      WHERE prod_dtcd = '1049') C
WHERE 1 = 1
      AND A.policy_number = B.poly_no
      AND B.good_reln_code = '1'
      AND B.end_date = '99991231'
      AND B.del_yn = 'N'
      AND B.good_code_dtal = C.prod_dtcd(+)
      AND B.good_code_item = C.prod_itcd(+)
GROUP BY A.policy_number
;

CREATE TABLE tbl_hjw_itrt_lntp_yn_002 TABLESPACE tsd_bac01 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       A.poly_no,
       MAX(NVL2(C.prod_dtcd,'Y','N')) AS itrt_lntp_yn
FROM mig02.mig_tbl_prem_payment_900@dl_pdna A,
     mig02.tb_isaplcjg@dl_pdna B,
     (SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod
      WHERE acvl_acit_mtho_code NOT IN ('00','01')
            AND prod_dtcd LIKE '1___'
      UNION
      SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod
      WHERE prod_dtcd = '1049') C
WHERE 1 = 1
      AND A.poly_no = B.poly_no
      AND B.good_reln_code = '1'
      AND B.end_date = '99991231'
      AND B.del_yn = 'N'
      AND B.good_code_dtal = C.prod_dtcd(+)
      AND B.good_code_item = C.prod_itcd(+)
GROUP BY A.poly_no
;

--N	11900124
--Y	6554527
SELECT itrt_lntp_yn, COUNT(*)
FROM i2130039.tbl_hjw_itrt_lntp_yn_001
GROUP BY itrt_lntp_yn
;

--N	11932800
--Y	6721126
SELECT itrt_lntp_yn, COUNT(*)
FROM i2130039.tbl_hjw_itrt_lntp_yn_002
GROUP BY itrt_lntp_yn
;



/*
PDNA에서 임시테이블 생성 시
*/
CREATE TABLE tbl_hjw_itrt_lntp_yn_001 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       A.policy_number,
       MAX(NVL2(C.prod_dtcd,'Y','N')) AS itrt_lntp_yn
FROM mig02.tbl_top_level_agreement A,
     mig02.tb_isaplcjg B,
     (SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod@dl_dicr
      WHERE acvl_acit_mtho_code NOT IN ('00','01')
            AND prod_dtcd LIKE '1___'
      UNION
      SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod@dl_dicr
      WHERE prod_dtcd = '1049') C
WHERE 1 = 1
      AND A.policy_number = B.poly_no
      AND B.good_reln_code = '1'
      AND B.end_date = '99991231'
      AND B.del_yn = 'N'
      AND B.good_code_dtal = C.prod_dtcd(+)
      AND B.good_code_item = C.prod_itcd(+)
GROUP BY A.policy_number
;

CREATE TABLE tbl_hjw_itrt_lntp_yn_002 AS
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8) */
       A.poly_no,
       MAX(NVL2(C.prod_dtcd,'Y','N')) AS itrt_lntp_yn
FROM mig02.mig_tbl_prem_payment_900 A,
     mig02.tb_isaplcjg B,
     (SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod@dl_dicr
      WHERE acvl_acit_mtho_code NOT IN ('00','01')
            AND prod_dtcd LIKE '1___'
      UNION
      SELECT prod_dtcd,
             prod_itcd
      FROM hpf.mvw_simatrsprod@dl_dicr
      WHERE prod_dtcd = '1049') C
WHERE 1 = 1
      AND A.poly_no = B.poly_no
      AND B.good_reln_code = '1'
      AND B.end_date = '99991231'
      AND B.del_yn = 'N'
      AND B.good_code_dtal = C.prod_dtcd(+)
      AND B.good_code_item = C.prod_itcd(+)
GROUP BY A.poly_no
;

========================
20210510_Coverage_Level_최종수금정보_검증쿼리
/*
※ 최종납월 검증
계약최종납월 > 가입상품최종납월 > 가입상품완납년월 : 오류(특약 가입상품 최종납월 > 완납년월)
계약최종납월 > 가입상품완납년월 > 가입상품최종납월 : 오류(계약 최종납월 완납년월 경과 가입상품 최종납월 부족)

가입상품최종납월 > 계약최종납월 > 가입상품완납년월 : 오류(계약 최종납월 < 가입상품 최종납월)
가입상품최종납월 > 가입상품완납년월 > 계약최종납월 : 오류(계약 최종납월 < 가입상품 최종납월)

가입상품완납년월 > 계약최종납월 > 가입상품최종납월 : 오류(계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월)
가입상품완납년월 > 가입상품최종납월 > 계약최종납월 : 오류(계약 최종납월 < 가입상품 최종납월)

계약최종납월 = 가입상품최종납월 > 가입상품완납년월 : 오류(특약 가입상품 최종납월 > 완납년월)
가입상품완납년월 > 계약최종납월 = 가입상품최종납월 : 정상

가입상품최종납월 = 가입상품완납년월 > 계약최종납월 : 오류(계약 최종납월 < 가입상품 최종납월)
계약최종납월 > 가입상품최종납월 = 가입상품완납년월 : 정상

계약최종납월 = 가입상품완납년월 > 가입상품최종납월 : 오류(계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월)
가입상품최종납월 > 계약최종납월 = 가입상품완납년월 : 오류(계약 최종납월 < 가입상품 최종납월)

계약최종납월 = 가입상품최종납월 = 가입상품완납년월 : 정상


※ 최종납회 검증
(중도부가가입상품이면 최종납회 재계산 - 계약년월과 최종납월로 계산, 갱신은 계약일자-갱신경과년수로 사용)
(보험료납입제도 적용 상품이면 최종납회 재계산 - 납회 증가하지 않는 횟수 사용)
계약최종납회 > 가입상품최종납회
  → 가입상품최종납월 > 가입상품완납년월 : 오류(최종납월오류)
  → 가입상품최종납월 = 가입상품완납년월 : 정상
  → 가입상품최종납월 < 가입상품완납년월 : 오류(가입상품 최종납월 부족)
계약최종납회 = 가입상품최종납회 : 정상
계약최종납회 < 가입상품최종납회 : 오류(계약최종납회 < 가입상품최종납회)


※ 최종기준일자 검증
계약최종기준일자 > 가입상품최종기준일자 : 오류(계약최종기준일자 > 가입상품최종기준일자)
계약최종기준일자 = 가입상품최종기준일자 : 정상
계약최종기준일자 < 가입상품최종기준일자 : 오류(계약최종기준일자 < 가입상품최종기준일자)


※ 최종처리일자 검증
계약최종처리일자 > 가입상품최종처리일자 : 오류(계약최종처리일자 > 가입상품최종처리일자)
계약최종처리일자 = 가입상품최종처리일자 : 정상
계약최종처리일자 < 가입상품최종처리일자 : 오류(계약최종처리일자 < 가입상품최종처리일자)


※ 최종대체납월 검증
최종납월과 동일

*/
--DROP TABLE ERR_TBL_VAO_PREM_COLL_001;
--CREATE TABLE ERR_TBL_VAO_PREM_COLL_001 AS

EXECUTE MIG_PRC_TRUNCATE('ERR_TBL_VAO_PREM_COLL_001');
INSERT INTO ERR_TBL_VAO_PREM_COLL_001
SELECT /*+ FULL(A) PARALLEL(A 8)
           FULL(B) PARALLEL(B 8)
           FULL(C) PARALLEL(C 8)
           FULL(D) PARALLEL(D 8)
           FULL(E) PARALLEL(E 8)
           FULL(F) PARALLEL(F 8)
           FULL(G) PARALLEL(G 8) */
       A.POLICY_NUMBER,
       A.AGREEMENT_NUMBER AS P_AGREEMENT_NUMBER,
       A.LAST_PYMT_PERIOD AS P_LAST_PYMT_PERIOD,
       A.LAST_NUMBER_OF_PYMTS AS P_LAST_NUMBER_OF_PYMTS,
       TO_CHAR(A.LAST_STANDARD_ON,'YYYYMMDD') AS P_LAST_STANDARD_ON,
       TO_CHAR(A.LAST_PROCESSING_ON,'YYYYMMDD') AS P_LAST_PROCESSING_ON,
       NVL(A.LAST_SUBST_PYMT_PERIOD,'000000') AS P_LAST_SUBST_PYMT_PERIOD,
       B.AGREEMENT_NUMBER AS C_AGREEMENT_NUMBER,
       B.LAST_PYMT_PERIOD AS C_LAST_PYMT_PERIOD,
       B.LAST_NUMBER_OF_PYMTS AS C_LAST_NUMBER_OF_PYMTS,
       TO_CHAR(B.LAST_STANDARD_ON,'YYYYMMDD') AS C_LAST_STANDARD_ON,
       TO_CHAR(B.LAST_PROCESSING_ON,'YYYYMMDD') AS C_LAST_PROCESSING_ON,
       NVL(B.LAST_SUBST_PYMT_PERIOD,'000000') AS C_LAST_SUBST_PYMT_PERIOD,
       C.POLY_NO,
       C.JOIN_GOOD_NO,
       C.JNGD_HSNO,
       F.VRBL_GOOD_YN,
       F.PREM_FRPY_PSYN,
       DECODE(D.GOOD_CODE_DTAL,'1611','Y','N') AS MAGC_YN,
       D.GOOD_CODE_DTAL||'-'||D.GOOD_CODE_ITEM AS MAIN_GOOD_CODE,
       C.GOOD_CODE_DTAL||'-'||C.GOOD_CODE_ITEM AS JOIN_GOOD_CODE,
       D.CNTT_STAT_CODE AS MAIN_CTS_CODE,
       C.GOOD_RELN_CODE,
       C.CNTT_STAT_CODE,
       C.REAL_PAYM_TERM,
       E.CNTT_PAYM_CYCD,
       C.PAYM_CYCL_CODE,
       C.CNTT_DATE,
       SUBSTR(C.CNTT_DATE,1,6) AS CNTT_YM,
       E.CNTT_CONC_YM,
       C.PREM_CPAY_REYM,
       C.EXPR_DATE,
       C.EXTN_DATE,
       NVL(C.JNGD_UPDT_EYCT,0) AS JNGD_UPDT_EYCT,
       NVL(G.CPAY_ADD_MCNT,0) AS CPAY_ADD_MCNT,
       NVL(C.JNGD_DLNG_DVCD,'0') AS JNGD_DLNG_DVCD,
       TO_CHAR(ADD_MONTHS(TO_DATE(C.CNTT_DATE,'YYYYMMDD'),-1*NVL(C.JNGD_UPDT_EYCT,0)*12),'YYYYMM') AS CALC_CNTT_YM,
       CASE WHEN C.PAYM_CYCL_CODE = 0
            THEN 1
            ELSE (MONTHS_BETWEEN(TO_DATE(B.LAST_PYMT_PERIOD,'YYYYMM'),TO_DATE(SUBSTR(C.CNTT_DATE,1,6),'YYYYMM'))+1+NVL(C.JNGD_UPDT_EYCT,0)*12)/TO_NUMBER(C.PAYM_CYCL_CODE)
       END AS CALC_LAST_PAYM_CNT,
       CASE WHEN C.PAYM_CYCL_CODE = 0
            THEN SUBSTR(C.CNTT_DATE,1,6)
            ELSE TO_CHAR(ADD_MONTHS(TO_DATE(C.CNTT_DATE,'YYYYMMDD'),C.REAL_PAYM_TERM*12+NVL(G.CPAY_ADD_MCNT,0) -1),'YYYYMM')
       END AS CALC_PREM_CPAY_REYM
FROM MIG_TBL_VAO_PREM_COLL_900 A,
     MIG_TBL_VAO_PREM_COLL_900 B,
     TB_ISAPLCJG C,
     TB_ISAPLCJG D,
     TB_ISAPLCTT E,
     TB_MMNORATR F,
     (SELECT /*+ FULL(A) PARALLEL(A 8) */
             A.POLY_NO,
             A.JOIN_GOOD_NO,
             SUM(A.PYSY_RQST_MCNT) AS CPAY_ADD_MCNT
      FROM TB_ISPRMPYS A
      WHERE 1 = 1
            AND A.PRPY_SYS_DVCD IN ('1','2','3','5','8')
            AND CASE WHEN A.PRPY_SYS_DVCD = '3'
                          AND A.PRPY_SYS_ENDT = '99991231'
                     THEN 0
                     ELSE 1
                END = 1
            AND A.DEL_YN = 'N'
      GROUP BY A.POLY_NO,
               A.JOIN_GOOD_NO) G
WHERE 1 = 1
      AND A.PRODUCT_TYPE_CODE = '1'
      AND A.POLICY_NUMBER = B.POLICY_NUMBER
      AND B.PRODUCT_TYPE_CODE = '2'
      AND B.POLY_NO = C.POLY_NO
      AND SUBSTR(B.AGREEMENT_NUMBER,-3) = C.JOIN_GOOD_NO
      AND C.END_DATE = '99991231'
      AND C.DEL_YN = 'N'
      AND A.POLY_NO = D.POLY_NO
      AND D.JOIN_GOOD_NO = 1
      AND D.END_DATE = '99991231'
      AND D.DEL_YN = 'N'
      AND A.POLY_NO = E.POLY_NO
      AND D.GOOD_CODE_DTAL = F.GOOD_CODE_DTAL
      AND D.GOOD_CODE_ITEM = F.GOOD_CODE_ITEM
      AND C.POLY_NO = G.POLY_NO(+)
      AND C.JOIN_GOOD_NO = G.JOIN_GOOD_NO(+)
ORDER BY C.POLY_NO,
         C.JOIN_GOOD_NO,
         C.JNGD_HSNO
;

-- DROP TABLE ERR_TBL_VAO_PREM_COLL_002;
-- CREATE TABLE ERR_TBL_VAO_PREM_COLL_002 AS

EXECUTE MIG_PRC_TRUNCATE('ERR_TBL_VAO_PREM_COLL_002');
INSERT INTO ERR_TBL_VAO_PREM_COLL_002
SELECT /*+ FULL(A) PARALLEL(A 8) */
       A.*,
       CASE WHEN P_LAST_PYMT_PERIOD > C_LAST_PYMT_PERIOD
                 AND C_LAST_PYMT_PERIOD > PREM_CPAY_REYM
            THEN '특약 가입상품 최종납월 > 완납년월'
            WHEN P_LAST_PYMT_PERIOD > PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > C_LAST_PYMT_PERIOD
            THEN '계약 최종납월 완납년월 경과 가입상품 최종납월 부족'
            WHEN C_LAST_PYMT_PERIOD > P_LAST_PYMT_PERIOD
                 AND P_LAST_PYMT_PERIOD > PREM_CPAY_REYM
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN C_LAST_PYMT_PERIOD > PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > P_LAST_PYMT_PERIOD
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN PREM_CPAY_REYM > P_LAST_PYMT_PERIOD
                 AND P_LAST_PYMT_PERIOD > C_LAST_PYMT_PERIOD
            THEN '계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월'
            WHEN PREM_CPAY_REYM > C_LAST_PYMT_PERIOD
                 AND C_LAST_PYMT_PERIOD > P_LAST_PYMT_PERIOD
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN P_LAST_PYMT_PERIOD = C_LAST_PYMT_PERIOD
                 AND C_LAST_PYMT_PERIOD > PREM_CPAY_REYM
            THEN '특약 가입상품 최종납월 > 완납년월'
            WHEN PREM_CPAY_REYM > P_LAST_PYMT_PERIOD
                 AND P_LAST_PYMT_PERIOD = C_LAST_PYMT_PERIOD
            THEN '정상'
            WHEN C_LAST_PYMT_PERIOD = PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > P_LAST_PYMT_PERIOD
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN P_LAST_PYMT_PERIOD > C_LAST_PYMT_PERIOD
                 AND C_LAST_PYMT_PERIOD = PREM_CPAY_REYM
            THEN '정상'
            WHEN P_LAST_PYMT_PERIOD = PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > C_LAST_PYMT_PERIOD
            THEN '계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월'
            WHEN C_LAST_PYMT_PERIOD > P_LAST_PYMT_PERIOD
                 AND P_LAST_PYMT_PERIOD = PREM_CPAY_REYM
            THEN '계약 최종납월 < 가입상품 최종납월'
            WHEN P_LAST_PYMT_PERIOD = C_LAST_PYMT_PERIOD
                 AND C_LAST_PYMT_PERIOD = PREM_CPAY_REYM
            THEN '정상'
            ELSE ''
       END AS ERR_LAST_PAYM_YM,
       CASE WHEN P_LAST_NUMBER_OF_PYMTS > C_LAST_NUMBER_OF_PYMTS
            THEN CASE WHEN C_LAST_PYMT_PERIOD > PREM_CPAY_REYM
                      THEN '최종납월오류'
                      WHEN C_LAST_PYMT_PERIOD = PREM_CPAY_REYM
                      THEN '정상'
                      WHEN C_LAST_PYMT_PERIOD < PREM_CPAY_REYM
                      THEN '가입상품 최종납월 부족'
                      ELSE ''
                 END
            WHEN P_LAST_NUMBER_OF_PYMTS = C_LAST_NUMBER_OF_PYMTS
            THEN '정상'
            WHEN P_LAST_NUMBER_OF_PYMTS < C_LAST_NUMBER_OF_PYMTS
            THEN '계약최종납회 < 가입상품최종납회'
            ELSE ''
       END AS ERR_LAST_PAYM_CNT,
       CASE WHEN P_LAST_STANDARD_ON > C_LAST_STANDARD_ON
            THEN CASE WHEN P_LAST_PYMT_PERIOD > C_LAST_PYMT_PERIOD
                      THEN '정상'
                      WHEN P_LAST_PYMT_PERIOD = C_LAST_PYMT_PERIOD
                      THEN '계약최종기준일자 > 가입상품최종기준일자'
                      WHEN P_LAST_PYMT_PERIOD < C_LAST_PYMT_PERIOD
                      THEN '계약최종기준일자 > 가입상품최종기준일자'
                      ELSE ''
                 END
            WHEN P_LAST_STANDARD_ON = C_LAST_STANDARD_ON
            THEN '정상'
            WHEN P_LAST_STANDARD_ON < C_LAST_STANDARD_ON
            THEN '계약최종기준일자 < 가입상품최종기준일자'
            ELSE ''
       END AS ERR_LAST_STDD_DATE,
       CASE WHEN P_LAST_PROCESSING_ON > C_LAST_PROCESSING_ON
            THEN CASE WHEN P_LAST_PYMT_PERIOD > C_LAST_PYMT_PERIOD
                      THEN '정상'
                      WHEN P_LAST_PYMT_PERIOD = C_LAST_PYMT_PERIOD
                      THEN '계약최종처리일자 > 가입상품최종처리일자'
                      WHEN P_LAST_PYMT_PERIOD < C_LAST_PYMT_PERIOD
                      THEN '계약최종처리일자 > 가입상품최종처리일자'
                      ELSE ''
                 END
            WHEN P_LAST_PROCESSING_ON = C_LAST_PROCESSING_ON
            THEN '정상'
            WHEN P_LAST_PROCESSING_ON < C_LAST_PROCESSING_ON
            THEN '계약최종처리일자 < 가입상품최종처리일자'
            ELSE ''
       END AS ERR_LAST_DLNG_DATE,
       CASE WHEN P_LAST_SUBST_PYMT_PERIOD = '000000'
                 AND C_LAST_SUBST_PYMT_PERIOD = '000000'
            THEN '정상'
            WHEN P_LAST_SUBST_PYMT_PERIOD = '000000'
                 AND C_LAST_SUBST_PYMT_PERIOD != '000000'
            THEN '가입상품 최종대체납월 대상 아님'
            WHEN P_LAST_SUBST_PYMT_PERIOD != '000000'
                 AND C_LAST_SUBST_PYMT_PERIOD = '000000'
            THEN CASE WHEN GOOD_RELN_CODE = '1' OR SUBSTR(JOIN_GOOD_CODE,1,4) IN ('5625','5834')
                      THEN '가입상품 최종대체납월 누락'
                      ELSE '정상'
                 END
            WHEN P_LAST_SUBST_PYMT_PERIOD > C_LAST_SUBST_PYMT_PERIOD
                 AND C_LAST_SUBST_PYMT_PERIOD > PREM_CPAY_REYM
            THEN '특약 가입상품 최종대체납월 > 완납년월'
            WHEN P_LAST_SUBST_PYMT_PERIOD > PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > C_LAST_SUBST_PYMT_PERIOD
            THEN '계약 최종대체납월 완납년월 경과 가입상품 최종대체납월 부족'
            WHEN C_LAST_SUBST_PYMT_PERIOD > P_LAST_SUBST_PYMT_PERIOD
                 AND P_LAST_SUBST_PYMT_PERIOD > PREM_CPAY_REYM
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN C_LAST_SUBST_PYMT_PERIOD > PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > P_LAST_SUBST_PYMT_PERIOD
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN PREM_CPAY_REYM > P_LAST_SUBST_PYMT_PERIOD
                 AND P_LAST_SUBST_PYMT_PERIOD > C_LAST_SUBST_PYMT_PERIOD
            THEN '계약 최종대체납월 완납년월 미경과 계약 최종대체납월 > 가입상품 최종대체납월'
            WHEN PREM_CPAY_REYM > C_LAST_SUBST_PYMT_PERIOD
                 AND C_LAST_SUBST_PYMT_PERIOD > P_LAST_SUBST_PYMT_PERIOD
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN P_LAST_SUBST_PYMT_PERIOD = C_LAST_SUBST_PYMT_PERIOD
                 AND C_LAST_SUBST_PYMT_PERIOD > PREM_CPAY_REYM
            THEN '특약 가입상품 최종대체납월 > 완납년월'
            WHEN PREM_CPAY_REYM > P_LAST_SUBST_PYMT_PERIOD
                 AND P_LAST_SUBST_PYMT_PERIOD = C_LAST_SUBST_PYMT_PERIOD
            THEN '정상'
            WHEN C_LAST_SUBST_PYMT_PERIOD = PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > P_LAST_SUBST_PYMT_PERIOD
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN P_LAST_SUBST_PYMT_PERIOD > C_LAST_SUBST_PYMT_PERIOD
                 AND C_LAST_SUBST_PYMT_PERIOD = PREM_CPAY_REYM
            THEN '정상'
            WHEN P_LAST_SUBST_PYMT_PERIOD = PREM_CPAY_REYM
                 AND PREM_CPAY_REYM > C_LAST_SUBST_PYMT_PERIOD
            THEN '계약 최종대체납월 완납년월 미경과 계약 최종대체납월 > 가입상품 최종대체납월'
            WHEN C_LAST_SUBST_PYMT_PERIOD > P_LAST_SUBST_PYMT_PERIOD
                 AND P_LAST_SUBST_PYMT_PERIOD = PREM_CPAY_REYM
            THEN '계약 최종대체납월 < 가입상품 최종대체납월'
            WHEN P_LAST_SUBST_PYMT_PERIOD = C_LAST_SUBST_PYMT_PERIOD
                 AND C_LAST_SUBST_PYMT_PERIOD = PREM_CPAY_REYM
            THEN '정상'
            ELSE ''
       END AS ERR_LAST_SBST_YM
FROM ERR_TBL_VAO_PREM_COLL_001 A
WHERE 1 = 1
ORDER BY A.POLY_NO,
         A.JOIN_GOOD_NO,
         A.JNGD_HSNO
;

/*
년납 계약 중 소급계약 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약 중 계약성립일자로 계산한 최종납입년월이 맞으면 최종납입년월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE != '0'
      AND A.MAGC_YN = 'N'
      AND A.PREM_FRPY_PSYN = 'N'
      AND A.CNTT_CONC_YM > A.CALC_CNTT_YM
      AND A.PAYM_CYCL_CODE = '12'
      AND A.ERR_LAST_PAYM_YM IN ('특약 가입상품 최종납월 > 완납년월')
      AND A.C_LAST_PYMT_PERIOD > A.PREM_CPAY_REYM
      AND TO_CHAR(ADD_MONTHS(TO_DATE(A.CNTT_CONC_YM,'YYYYMM'),12*P_LAST_NUMBER_OF_PYMTS-1),'YYYYMM') = A.C_LAST_PYMT_PERIOD
;

/*
월납 계약 중 소급계약 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약 중 최종납회가 정상이면 최종납입년월, 최종대체납월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상',
    A.ERR_LAST_SBST_YM = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE = '1'
      AND A.MAGC_YN = 'N'
      AND A.PREM_FRPY_PSYN = 'Y'
      AND A.GOOD_RELN_CODE = '1'
      AND A.ERR_LAST_PAYM_YM IN ('특약 가입상품 최종납월 > 완납년월')
      AND A.ERR_LAST_PAYM_CNT = '정상'
      AND A.C_LAST_PYMT_PERIOD > A.PREM_CPAY_REYM
;

/*
일시납 계약 중 자유납입 계약이고 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약의 주계약 중 최종납회가 정상이고 최종대체납월이 '가입상품 최종대체납월 대상 아님'이 아니면 최종납입년월, 최종대체납월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상',
    A.ERR_LAST_SBST_YM = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE = '0'
      AND A.MAGC_YN = 'N'
      AND A.PREM_FRPY_PSYN = 'Y'
      AND A.GOOD_RELN_CODE = '1'
      AND A.ERR_LAST_PAYM_YM IN ('특약 가입상품 최종납월 > 완납년월')
      AND A.ERR_LAST_PAYM_CNT = '정상'
      AND A.ERR_LAST_SBST_YM != '가입상품 최종대체납월 대상 아님'
      AND A.C_LAST_PYMT_PERIOD > A.PREM_CPAY_REYM
;

/*
일시납 계약 중 자유납입이 아닌 계약이고 최종납입년월 '특약 가입상품 최종납월 > 완납년월'인 계약의 주계약 중 최종납월이 '999912'이면 최종납입년월, 최종대체납월 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상',
    A.ERR_LAST_SBST_YM = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE = '0'
      AND A.MAGC_YN = 'N'
      AND A.PREM_FRPY_PSYN = 'N'
      AND A.P_LAST_PYMT_PERIOD = '999912'
      AND A.ERR_LAST_PAYM_YM = '특약 가입상품 최종납월 > 완납년월'
;

/*
비일시납 계약 중 자유납입이 아닌 계약이고 가입상품이 일시납이고 가입상품의 최종납입년월이 999912이고 최종납입년월 '계약 최종납월 < 가입상품 최종납월'인 가입상품은 최종납입년월, 최종납회, 최종대체납월 정상, 최종기준일자와 최종처리일자는 일부 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상',
    A.ERR_LAST_PAYM_CNT = '정상',
    A.ERR_LAST_STDD_DATE = DECODE(A.ERR_LAST_STDD_DATE,'계약최종기준일자 > 가입상품최종기준일자','정상',A.ERR_LAST_STDD_DATE),
    A.ERR_LAST_DLNG_DATE = DECODE(A.ERR_LAST_DLNG_DATE,'계약최종처리일자 > 가입상품최종처리일자','정상',A.ERR_LAST_DLNG_DATE),
    A.ERR_LAST_SBST_YM = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE = '0'
      AND A.CNTT_PAYM_CYCD >= '1'
      AND A.MAGC_YN = 'N'
      AND A.PREM_FRPY_PSYN = 'N'
      AND A.P_LAST_PYMT_PERIOD != '999912'
      AND A.C_LAST_PYMT_PERIOD = '999912'
      AND A.ERR_LAST_PAYM_YM = '계약 최종납월 < 가입상품 최종납월'
;

/*
비일시납 계약 중 최종납입년월 '계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월'인 계약 중 가입상품 계약상태가 감소이면 최종납입년월, 최종납회, 최종기준일자, 최종처리일자 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상',
    A.ERR_LAST_PAYM_CNT = '정상',
    A.ERR_LAST_STDD_DATE = '정상',
    A.ERR_LAST_DLNG_DATE = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE != '0'
      AND A.ERR_LAST_PAYM_YM IN ('계약 최종납월 완납년월 미경과 계약 최종납월 > 가입상품 최종납월')
      AND A.ERR_LAST_PAYM_CNT IS NOT NULL 
      AND A.CNTT_STAT_CODE NOT IN ('1','2','3','4','9')
;

/*
비일시납 계약 중 최종납입년월 '계약 최종납월 완납년월 경과 가입상품 최종납월 부족', 최종납회 '가입상품 최종납월 부족'인 계약 중 가입상품 계약상태가 감소이면 최종납입년월, 최종납회 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상',
    A.ERR_LAST_PAYM_CNT = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE != '0'
      AND A.ERR_LAST_PAYM_YM = '계약 최종납월 완납년월 경과 가입상품 최종납월 부족'
      AND A.ERR_LAST_PAYM_CNT = '가입상품 최종납월 부족'
      AND A.CNTT_STAT_CODE NOT IN ('1','2','3','4','9')
;

/*
일시납 계약 중 가입상품이 비일시납 계약이고 최종납입년월과 최종납회가 정상이 아닌 가입상품 계약상태가 감소이면 최종납입년월, 최종납회 정상
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_PAYM_YM = '정상',
    A.ERR_LAST_PAYM_CNT = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE != '0'
      AND A.CNTT_PAYM_CYCD = '0'
      AND A.MAGC_YN = 'N'
      AND A.PREM_FRPY_PSYN = 'N'
      AND A.CNTT_STAT_CODE NOT IN ('1','2','3','4','9')
      AND (A.ERR_LAST_PAYM_YM,A.ERR_LAST_PAYM_CNT) NOT IN (('정상','정상'))
;

/*
매직어카운트 최종대체납월은 전부 정상임
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_SBST_YM = '정상'
WHERE 1 = 1
      AND A.PAYM_CYCL_CODE = '1'
      AND A.MAGC_YN = 'Y'
      AND A.PREM_FRPY_PSYN = 'N'
	  AND A.ERR_LAST_SBST_YM != '정상'
;

/*
최종대체납월을 사용하는 경우 주계약 가입상품의 최종대체납월은 완납년월을 경과할 수 있으므로 정상임
*/
UPDATE /*+ FULL(A) PARALLEL(A 8) */ ERR_TBL_VAO_PREM_COLL_002 A
SET A.ERR_LAST_SBST_YM = '정상'
WHERE 1 = 1
      AND A.JOIN_GOOD_NO = 1
      AND A.ERR_LAST_SBST_YM = '특약 가입상품 최종대체납월 > 완납년월'
;

COMMIT;



/*
집계조회
*/
SELECT /*+ FULL(A) PARALLEL(A 8) */
       A.PAYM_CYCL_CODE AS "납입주기",
       A.PREM_FRPY_PSYN AS "UL",
       A.MAGC_YN AS "매직",
       COUNT(*) AS "전체",
       SUM(CASE WHEN A.ERR_LAST_PAYM_YM = '정상'
                 AND A.ERR_LAST_PAYM_CNT = '정상'
                 AND A.ERR_LAST_STDD_DATE = '정상'
                 AND A.ERR_LAST_DLNG_DATE = '정상'
                 AND A.ERR_LAST_SBST_YM = '정상'
                THEN 1
                ELSE 0
           END) AS "정상",
       SUM(CASE WHEN A.ERR_LAST_PAYM_YM = '정상'
                     AND A.ERR_LAST_PAYM_CNT = '정상'
                     AND A.ERR_LAST_STDD_DATE = '정상'
                     AND A.ERR_LAST_DLNG_DATE = '정상'
                     AND A.ERR_LAST_SBST_YM = '정상'
                THEN 0
                ELSE 1
           END) AS "오류",
       SUM(CASE WHEN A.ERR_LAST_PAYM_YM != '정상'
                THEN 1
                ELSE 0
           END) AS "최종납월오류",
       SUM(CASE WHEN A.ERR_LAST_PAYM_CNT != '정상'
                THEN 1
                ELSE 0
           END) AS "최종납회오류",
       SUM(CASE WHEN A.ERR_LAST_STDD_DATE != '정상'
                THEN 1
                ELSE 0
           END) AS "최종기준일자오류",
       SUM(CASE WHEN A.ERR_LAST_DLNG_DATE != '정상'
                THEN 1
                ELSE 0
           END) AS "최종처리일자오류",
       SUM(CASE WHEN A.ERR_LAST_SBST_YM != '정상'
                THEN 1
                ELSE 0
           END) AS "최종대체납월오류"
FROM ERR_TBL_VAO_PREM_COLL_002 A
WHERE 1 = 1
GROUP BY A.PAYM_CYCL_CODE,A.PREM_FRPY_PSYN,A.MAGC_YN
ORDER BY TO_NUMBER(A.PAYM_CYCL_CODE),A.PREM_FRPY_PSYN,A.MAGC_YN
;


==========================
20210427_(수정 재발송)coverage level vao_prem_coll 생성 규칙 공유
(수정 재발송)coverage level vao_prem_coll 생성 규칙 공유
2021-04-27 (화) 오후 4:30 /  홍정우

--> 가입상품별 보험료 입금에 있는 대상은 기본적으로 대상에 포함됨 
--> '모든 가입상품'의 정의 기본 : 유지 / 납입중 / 납년월이 넘어가지 않은

※ policy level vao_prem_coll 정상이라는 가정
※ 입금내역으로 coverage level vao_prem_coll 생성할 때 payment와 연결된 comp로 생성

<<coverage level vao_prem_coll 생성 규칙>>
1. 보험료종류 11,18 입금내역
--> TBL_PREM_PAYMENT_COMP 생성 대상을 그대로 생성
  1) 모든 가입상품
    - 최종대체년월 변경하지 않음
    - 최종납입년월은 종납입년월, 최종납회는 납회, 최종기준일자는 영수일자, 최종처리일자는 기장일자(처리일자)로 변경
2. 보험료종류 12,17,21,22,23,24 입금내역
--> 주계약만 생성
--> 모든 컬럼 변경하지 않으므로 TBL_VAO_PREM_COLL_VERSION에 값을 만들지 않음 
  1) 주계약
    - 모든 컬럼 변경하지 않음
  2) 특약
    - 모든 컬럼 변경하지 않음
3. 보험료종류 31,32 입금내역
  1) 모든 가입상품
    - 최종납회, 최종대체년월 변경하지 않음
    - 최종납입년월은 종납입년월, 최종기준일자는 영수일자, 최종처리일자는 기장일자(처리일자)로 변경
4. 보험료종류 13,16  입금내역  
--> 13: 납입주기 일시납인 주계약만 생성 
--> 16: 주계약만 생성
  1) 납입주기가 일시납인 상품만 해당
    - 최종대체년월 변경하지 않음
    - 최종납입년월은 종납입년월, 최종납회는 납회, 최종기준일자는 영수일자, 최종처리일자는 기장일자(처리일자)로 변경
5. 보험료종류 41 입금내역
--> TBL_PREM_PAYMENT_COMP 생성 대상을 그대로 생성
  1) 중도부가 가입상품
    - 최종대체년월 변경하지 않음
    - 최종납입년월은 종납입년월, 최종납회는 납회, 최종기준일자는 영수일자, 최종처리일자는 기장일자(처리일자)로 변경
6. 보험료종류 42 입금내역
--> TBL_PREM_PAYMENT_COMP 생성 대상을 그대로 생성
  1) 유지 가입상품
    - 최종대체년월 변경하지 않음
    - 최종납입년월은 종납입년월, 최종납회는 납회, 최종기준일자는 영수일자, 최종처리일자는 기장일자(처리일자)로 변경
7. 월대체 내역
  1) 주계약
    - 최종납입년월은 대체납월, 최종납회는 대체납회(대체납회가 0 이면 변경하지 않음), 최종기준일자는 영수일자, 최종처리일자는 기장일자(처리일자), 최종대체년월은 대체납월로 변경
    - 대체납월이 가입상품의 완납예정년월을 초과하더라도 변경함
  2) 특약
    - 최종납입년월은 대체납월, 최종납회는 대체납회(대체납회가 0 이면 변경하지 않음), 최종기준일자는 영수일자, 최종처리일자는 기장일자(처리일자), 최종대체년월은 대체납월로 변경
    - 대체납월이 가입상품의 완납예정년월을 초과하는 경우에는 변경하지 않음



궁금한 점 문의주세요..

============================
20210504_최종대체납월 마이그 규칙 공유
최종대체납월 마이그 규칙 공유
2021-05-04 (화) 오후 5:50 / 홍정우

안녕하세요..

현재 최종대체납월은 계약별 또는 가입상품별 “수금정보이력”을 유지 않기로 결정한 상태입니다.
tbl_vao_prem_coll_version 테이블의 최종대체납월 컬럼은 추후 삭제 할 예정이고, 이력 생성 로직은 막아주시기 바랍니다.

tbl_vao_prem_coll 테이블의 계약별 수금정보와 가입상품별 수금정보의 최종대체납월 마이그 규칙을 알려드립니다.
최종대체납월에 대한 수금정보이력을 만들지 않으므로 로직이 간단해 졌습니다.
1. 계약별 수금정보의 최종대체납월은 ASIS의 tb_iscompci의 데이터를 유지한다.
2. 가입상품별 수금정보는 주계약과 특약을 구분하여 생성한다.
1) 주계약의 경우(ASIS tb_isaplcjg 테이블의 good_reln_code 값이 ‘1’인 경우) : 계약별 수금정보의 최종대체납월과 동일하다.
2) 특약의 경우(ASIS tb_isaplcjg 테이블의 good_reln_code 값이 ‘1’이 아닌 경우) : 일부 상품(상품_세 코드 5625, 5834)만 계약별 수금정보의 최종대체납월과 해당 가입상품별 수금정보의 최종납입년월 중 작은 값으로 생성한다.

궁금한 점 있으면 문의주세요..
=================================
